(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9300462581764474823131649827701039612293243408203125p-857 {+ 4188555981760773 -857 (2.00845e-258)}
; Y = -1.5079199976149286754889544681645929813385009765625p-810 {- 2287468311992616 -810 (-2.20842e-244)}
; Z = 1.5751436710162420862246790420613251626491546630859375p-750 {+ 2590216822473247 -750 (2.65964e-226)}
; 1.9300462581764474823131649827701039612293243408203125p-857 x -1.5079199976149286754889544681645929813385009765625p-810 1.5751436710162420862246790420613251626491546630859375p-750 == 1.5751436710162420862246790420613251626491546630859375p-750
; [HW: 1.5751436710162420862246790420613251626491546630859375p-750] 

; mpf : + 2590216822473247 -750
; mpfd: + 2590216822473247 -750 (2.65964e-226) class: Pos. norm. non-zero
; hwf : + 2590216822473247 -750 (2.65964e-226) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010100110 #b1110111000010111100000101111011010100010100100000101)))
(assert (= y (fp #b1 #b00011010101 #b1000001000000111000010111000001010111101100100101000)))
(assert (= z (fp #b0 #b00100010001 #b1001001100111100100111011001100110000100001000011111)))
(assert (= r (fp #b0 #b00100010001 #b1001001100111100100111011001100110000100001000011111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
