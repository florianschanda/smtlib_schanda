(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0893007365285700682733249777811579406261444091796875p-315 {+ 402174763753979 -315 (1.63192e-095)}
; Y = 1.3552407580089294025782464814255945384502410888671875p51 {+ 1599862145395827 51 (3.05173e+015)}
; Z = -1.93072498224107302888796766637824475765228271484375p302 {- 4191612683205308 302 (-1.57318e+091)}
; 1.0893007365285700682733249777811579406261444091796875p-315 x 1.3552407580089294025782464814255945384502410888671875p51 -1.93072498224107302888796766637824475765228271484375p302 == -1.9307249822410728068433627413469366729259490966796875p302
; [HW: -1.9307249822410728068433627413469366729259490966796875p302] 

; mpf : - 4191612683205307 302
; mpfd: - 4191612683205307 302 (-1.57318e+091) class: Neg. norm. non-zero
; hwf : - 4191612683205307 302 (-1.57318e+091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000100 #b0001011011011100011010011011111011100110000111111011)))
(assert (= y (fp #b0 #b10000110010 #b0101101011110001000011101110110111011010110001110011)))
(assert (= z (fp #b1 #b10100101101 #b1110111001000011111111100001000001001011101010111100)))
(assert (= r (fp #b1 #b10100101101 #b1110111001000011111111100001000001001011101010111011)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
