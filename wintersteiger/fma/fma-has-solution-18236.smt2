(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2582040376414334037491471462999470531940460205078125p149 {- 1162847607707517 149 (-8.97884e+044)}
; Y = 1.16624029559040476300424415967427194118499755859375p-947 {+ 748679733274908 -947 (9.80352e-286)}
; Z = -1.9690951264041782753366760516655631363391876220703125p-432 {- 4364416450160421 -432 (-1.77545e-130)}
; -1.2582040376414334037491471462999470531940460205078125p149 x 1.16624029559040476300424415967427194118499755859375p-947 -1.9690951264041782753366760516655631363391876220703125p-432 == -1.9690951264041782753366760516655631363391876220703125p-432
; [HW: -1.9690951264041782753366760516655631363391876220703125p-432] 

; mpf : - 4364416450160421 -432
; mpfd: - 4364416450160421 -432 (-1.77545e-130) class: Neg. norm. non-zero
; hwf : - 4364416450160421 -432 (-1.77545e-130) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010010100 #b0100001000011001101010001110100101011101011101111101)))
(assert (= y (fp #b0 #b00001001100 #b0010101010001110101110010101100011010110100100011100)))
(assert (= z (fp #b1 #b01001001111 #b1111100000010110100111100100001010011110011100100101)))
(assert (= r (fp #b1 #b01001001111 #b1111100000010110100111100100001010011110011100100101)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
