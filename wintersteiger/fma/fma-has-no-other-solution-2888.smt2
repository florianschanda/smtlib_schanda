(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.364456156875440751008454753900878131389617919921875p968 {- 1641364612297118 968 (-3.40405e+291)}
; Y = -1.927992367251501804048530175350606441497802734375p-163 {- 4179306079356528 -163 (-1.64898e-049)}
; Z = 1.289622510167305780015567506779916584491729736328125p-1002 {+ 1304343828867586 -1002 (3.00889e-302)}
; -1.364456156875440751008454753900878131389617919921875p968 x -1.927992367251501804048530175350606441497802734375p-163 1.289622510167305780015567506779916584491729736328125p-1002 == 1.315330527952583761219784719287417829036712646484375p806
; [HW: 1.315330527952583761219784719287417829036712646484375p806] 

; mpf : + 1420122448185798 806
; mpfd: + 1420122448185798 806 (5.61321e+242) class: Pos. norm. non-zero
; hwf : + 1420122448185798 806 (5.61321e+242) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111000111 #b0101110101001100111111111010101010011011000110011110)))
(assert (= y (fp #b1 #b01101011100 #b1110110110010000111010000110010001001000011001110000)))
(assert (= z (fp #b0 #b00000010101 #b0100101000100100101100110110100101011010101000000010)))
(assert (= r (fp #b0 #b11100100101 #b0101000010111001100000000110000011111100100111000110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
