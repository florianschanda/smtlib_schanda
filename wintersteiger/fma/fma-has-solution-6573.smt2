(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5140474739824372196750346120097674429416656494140625p597 {+ 2315064012278049 597 (7.8532e+179)}
; Y = 1.385361610497052975432552557322196662425994873046875p565 {+ 1735514405437422 565 (1.67306e+170)}
; Z = 1.18801424936729116410560891381464898586273193359375p617 {+ 846740903390876 617 (6.46143e+185)}
; 1.5140474739824372196750346120097674429416656494140625p597 x 1.385361610497052975432552557322196662425994873046875p565 1.18801424936729116410560891381464898586273193359375p617 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010100 #b1000001110011000100111011000000101011000100100100001)))
(assert (= y (fp #b0 #b11000110100 #b0110001010100111000011101111101000110111111111101110)))
(assert (= z (fp #b0 #b11001101000 #b0011000000100001101100111010110000110110111010011100)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
