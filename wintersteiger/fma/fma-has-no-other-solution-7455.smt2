(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6132174748806857866867403572541661560535430908203125p-1007 {+ 2761685991369733 -1007 (1.17622e-303)}
; Y = -1.080965192605275237980322344810701906681060791015625p-522 {- 364634811247098 -522 (-7.87325e-158)}
; Z = 1.3685795518098355927349984995089471340179443359375p613 {+ 1659934732187160 613 (4.65219e+184)}
; 1.6132174748806857866867403572541661560535430908203125p-1007 x -1.080965192605275237980322344810701906681060791015625p-522 1.3685795518098355927349984995089471340179443359375p613 == 1.3685795518098355927349984995089471340179443359375p613
; [HW: 1.3685795518098355927349984995089471340179443359375p613] 

; mpf : + 1659934732187160 613
; mpfd: + 1659934732187160 613 (4.65219e+184) class: Pos. norm. non-zero
; hwf : + 1659934732187160 613 (4.65219e+184) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010000 #b1001110011111011110100100000011111110010110000000101)))
(assert (= y (fp #b1 #b00111110101 #b0001010010111010001000101000011001011010100111111010)))
(assert (= z (fp #b0 #b11001100100 #b0101111001011011001110101100000011111111011000011000)))
(assert (= r (fp #b0 #b11001100100 #b0101111001011011001110101100000011111111011000011000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
