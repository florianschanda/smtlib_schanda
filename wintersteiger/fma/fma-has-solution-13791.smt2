(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.519903810343142591676723895943723618984222412109375p202 {- 2341438606529878 202 (-9.76957e+060)}
; Y = -zero {- 0 -1023 (-0)}
; Z = 1.4112610741454540974615383674972690641880035400390625p-189 {+ 1852155220273457 -189 (1.79861e-057)}
; -1.519903810343142591676723895943723618984222412109375p202 x -zero 1.4112610741454540974615383674972690641880035400390625p-189 == 1.4112610741454540974615383674972690641880035400390625p-189
; [HW: 1.4112610741454540974615383674972690641880035400390625p-189] 

; mpf : + 1852155220273457 -189
; mpfd: + 1852155220273457 -189 (1.79861e-057) class: Pos. norm. non-zero
; hwf : + 1852155220273457 -189 (1.79861e-057) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011001001 #b1000010100011000011010101000011001111101010101010110)))
(assert (= y (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= z (fp #b0 #b01101000010 #b0110100101001000011001111101111110010010100100110001)))
(assert (= r (fp #b0 #b01101000010 #b0110100101001000011001111101111110010010100100110001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
