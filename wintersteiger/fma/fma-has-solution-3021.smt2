(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5253085275668727405218305648304522037506103515625p348 {+ 2365779289004712 348 (8.74573e+104)}
; Y = 1.986842827320625115561369966599158942699432373046875p305 {+ 4444344989394414 305 (1.29513e+092)}
; Z = 1.0828492931095896611992657199152745306491851806640625p610 {+ 373120045576257 610 (4.60114e+183)}
; 1.5253085275668727405218305648304522037506103515625p348 x 1.986842827320625115561369966599158942699432373046875p305 1.0828492931095896611992657199152745306491851806640625p610 == 1.515274153723674022131717720185406506061553955078125p654
; [HW: 1.515274153723674022131717720185406506061553955078125p654] 

; mpf : + 2320588486703586 654
; mpfd: + 2320588486703586 654 (1.13268e+197) class: Pos. norm. non-zero
; hwf : + 2320588486703586 654 (1.13268e+197) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011011 #b1000011001111010100111101010001000110101101010101000)))
(assert (= y (fp #b0 #b10100110000 #b1111110010100001101110110100010110100010010111101110)))
(assert (= z (fp #b0 #b11001100001 #b0001010100110101100111000111110001100111000001000001)))
(assert (= r (fp #b0 #b11010001101 #b1000001111101001000000011100011010110111100111100010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
