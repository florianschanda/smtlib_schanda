(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9836735736075630232022604104713536798954010009765625p-361 {- 4430071939553225 -361 (-4.2232e-109)}
; Y = 1.125623868363771151734908926300704479217529296875p728 {+ 565759606751920 728 (1.58939e+219)}
; Z = 1.7606370534802378013949919477454386651515960693359375p740 {+ 3425604750617791 740 (1.01828e+223)}
; -1.9836735736075630232022604104713536798954010009765625p-361 x 1.125623868363771151734908926300704479217529296875p728 1.7606370534802378013949919477454386651515960693359375p740 == 1.7606370534802378013949919477454386651515960693359375p740
; [HW: 1.7606370534802378013949919477454386651515960693359375p740] 

; mpf : + 3425604750617791 740
; mpfd: + 3425604750617791 740 (1.01828e+223) class: Pos. norm. non-zero
; hwf : + 3425604750617791 740 (1.01828e+223) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010110 #b1111101111010010000010000000010010010101011111001001)))
(assert (= y (fp #b0 #b11011010111 #b0010000000101000111000101100011000111000001010110000)))
(assert (= z (fp #b0 #b11011100011 #b1100001010111001000111000010010011010010110010111111)))
(assert (= r (fp #b0 #b11011100011 #b1100001010111001000111000010010011010010110010111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
