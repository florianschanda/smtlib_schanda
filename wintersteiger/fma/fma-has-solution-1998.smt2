(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1538683492897907623131459331489168107509613037109375p-662 {- 692961440525615 -662 (-6.02975e-200)}
; Y = -1.9256003794481431068419396979152224957942962646484375p63 {- 4168533523976647 63 (-1.77605e+019)}
; Z = 1.0741913046167805845243492512963712215423583984375p-702 {+ 334127931826264 -702 (5.10534e-212)}
; -1.1538683492897907623131459331489168107509613037109375p-662 x -1.9256003794481431068419396979152224957942962646484375p63 1.0741913046167805845243492512963712215423583984375p-702 == 1.11094466561281191019361358485184609889984130859375p-598
; [HW: 1.11094466561281191019361358485184609889984130859375p-598] 

; mpf : + 499650354712604 -598
; mpfd: + 499650354712604 -598 (1.07092e-180) class: Pos. norm. non-zero
; hwf : + 499650354712604 -598 (1.07092e-180) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101001 #b0010011101100011111010101000100000010110110100101111)))
(assert (= y (fp #b1 #b10000111110 #b1110110011110100001001010111111011100101000111000111)))
(assert (= z (fp #b0 #b00101000001 #b0001001011111110001100111000101011111010000001011000)))
(assert (= r (fp #b0 #b00110101001 #b0001110001100110110111101001111001111001000000011100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
