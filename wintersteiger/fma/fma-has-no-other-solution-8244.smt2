(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8521639765576860536810954727116040885448455810546875p779 {+ 3837805367283755 779 (5.88906e+234)}
; Y = -1.6849442645756089742548056165105663239955902099609375p-725 {- 3084714734712271 -725 (-9.54638e-219)}
; Z = 1.7277901542891085373554460602463223040103912353515625p224 {+ 3277675467660345 224 (4.65811e+067)}
; 1.8521639765576860536810954727116040885448455810546875p779 x -1.6849442645756089742548056165105663239955902099609375p-725 1.7277901542891085373554460602463223040103912353515625p224 == 1.7277901542891083153108411352150142192840576171875p224
; [HW: 1.7277901542891083153108411352150142192840576171875p224] 

; mpf : + 3277675467660344 224
; mpfd: + 3277675467660344 224 (4.65811e+067) class: Pos. norm. non-zero
; hwf : + 3277675467660344 224 (4.65811e+067) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100001010 #b1101101000100111011010110001101000100101000000101011)))
(assert (= y (fp #b1 #b00100101010 #b1010111101011000100000011101111111101111010111001111)))
(assert (= z (fp #b0 #b10011011111 #b1011101001010000011101001001111100000101110000111001)))
(assert (= r (fp #b0 #b10011011111 #b1011101001010000011101001001111100000101110000111000)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
