(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1902062710617811180924263680935837328433990478515625p322 {+ 856612891477369 322 (1.01691e+097)}
; Y = 1.836766211477378174521390974405221641063690185546875p-66 {+ 3768459998205742 -66 (2.48928e-020)}
; Z = -1.176205864204185491672660646145232021808624267578125p-704 {- 793560664370466 -704 (-1.39755e-212)}
; 1.1902062710617811180924263680935837328433990478515625p322 x 1.836766211477378174521390974405221641063690185546875p-66 -1.176205864204185491672660646145232021808624267578125p-704 == 1.0930653316873826241817369009368121623992919921875p257
; [HW: 1.0930653316873826241817369009368121623992919921875p257] 

; mpf : + 419128993108408 257
; mpfd: + 419128993108408 257 (2.53137e+077) class: Pos. norm. non-zero
; hwf : + 419128993108408 257 (2.53137e+077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101000001 #b0011000010110001010110111011000110110100010101111001)))
(assert (= y (fp #b0 #b01110111101 #b1101011000110110010011110111100010110001011100101110)))
(assert (= z (fp #b1 #b00100111111 #b0010110100011011110100111101100000011110110100100010)))
(assert (= r (fp #b0 #b10100000000 #b0001011111010011001000010010101111111101000110111000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
