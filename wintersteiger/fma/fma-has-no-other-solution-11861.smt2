(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5911033124875910704787429494899697601795196533203125p894 {+ 2662092657856581 894 (2.10143e+269)}
; Y = 1.077104895472636325592930006678216159343719482421875p-647 {+ 347249578519006 -647 (1.84438e-195)}
; Z = -1.2739460682247223388685597456060349941253662109375p-363 {- 1233743410776472 -363 (-6.78051e-110)}
; 1.5911033124875910704787429494899697601795196533203125p894 x 1.077104895472636325592930006678216159343719482421875p-647 -1.2739460682247223388685597456060349941253662109375p-363 == 1.7137851670831121264626517586293630301952362060546875p247
; [HW: 1.7137851670831121264626517586293630301952362060546875p247] 

; mpf : + 3214602612498091 247
; mpfd: + 3214602612498091 247 (3.87584e+074) class: Pos. norm. non-zero
; hwf : + 3214602612498091 247 (3.87584e+074) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111101 #b1001011101010010100010111111001110110001000001000101)))
(assert (= y (fp #b0 #b00101111000 #b0001001110111101001001010111110001101010100111011110)))
(assert (= z (fp #b1 #b01010010100 #b0100011000100001010101000101101111100100100110011000)))
(assert (= r (fp #b0 #b10011110110 #b1011011010111010100111111110110011111101111010101011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
