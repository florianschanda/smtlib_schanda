(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0242529206587722701016218707081861793994903564453125p-583 {+ 109225444441493 -583 (3.23534e-176)}
; Y = 1.1474507739433736919210105043021030724048614501953125p-286 {+ 664059250586869 -286 (9.22901e-087)}
; Z = -1.1431238332500839316452356797526590526103973388671875p706 {- 644572442092915 706 (-3.84831e+212)}
; 1.0242529206587722701016218707081861793994903564453125p-583 x 1.1474507739433736919210105043021030724048614501953125p-286 -1.1431238332500839316452356797526590526103973388671875p706 == -1.143123833250083709600630754721350967884063720703125p706
; [HW: -1.143123833250083709600630754721350967884063720703125p706] 

; mpf : - 644572442092914 706
; mpfd: - 644572442092914 706 (-3.84831e+212) class: Neg. norm. non-zero
; hwf : - 644572442092914 706 (-3.84831e+212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111000 #b0000011000110101011100000111110100001111110110010101)))
(assert (= y (fp #b0 #b01011100001 #b0010010110111111010101010111101111011011010011110101)))
(assert (= z (fp #b1 #b11011000001 #b0010010010100011110000110111011100010110010101110011)))
(assert (= r (fp #b1 #b11011000001 #b0010010010100011110000110111011100010110010101110010)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
