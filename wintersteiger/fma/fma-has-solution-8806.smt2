(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2335412585420899578281250796862877905368804931640625p-736 {+ 1051776324945793 -736 (3.41253e-222)}
; Y = 1.710066848150827212293734191916882991790771484375p-667 {+ 3197856792740208 -667 (2.79258e-201)}
; Z = -1.065060053441771348303745980956591665744781494140625p642 {- 293004432437066 642 (-1.94371e+193)}
; 1.2335412585420899578281250796862877905368804931640625p-736 x 1.710066848150827212293734191916882991790771484375p-667 -1.065060053441771348303745980956591665744781494140625p642 == -1.065060053441771348303745980956591665744781494140625p642
; [HW: -1.065060053441771348303745980956591665744781494140625p642] 

; mpf : - 293004432437066 642
; mpfd: - 293004432437066 642 (-1.94371e+193) class: Neg. norm. non-zero
; hwf : - 293004432437066 642 (-1.94371e+193) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100011111 #b0011101111001001010111000010001110110100011110000001)))
(assert (= y (fp #b0 #b00101100100 #b1011010111000110111100001110001011001000000101110000)))
(assert (= z (fp #b1 #b11010000001 #b0001000010100111110001101001000111001110111101001010)))
(assert (= r (fp #b1 #b11010000001 #b0001000010100111110001101001000111001110111101001010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
