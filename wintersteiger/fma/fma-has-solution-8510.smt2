(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8269042148270078218530443336931057274341583251953125p694 {- 3724045513766005 694 (-1.50153e+209)}
; Y = -1.58181952000859649132280537742190062999725341796875p22 {- 2620282173507596 22 (-6.63463e+006)}
; Z = 1.73330640217330422814256962737999856472015380859375p-550 {+ 3302518439576092 -550 (4.70303e-166)}
; -1.8269042148270078218530443336931057274341583251953125p694 x -1.58181952000859649132280537742190062999725341796875p22 1.73330640217330422814256962737999856472015380859375p-550 == 1.4449163740996697757879019263782538473606109619140625p717
; [HW: 1.4449163740996697757879019263782538473606109619140625p717] 

; mpf : + 2003725216606305 717
; mpfd: + 2003725216606305 717 (9.96207e+215) class: Pos. norm. non-zero
; hwf : + 2003725216606305 717 (9.96207e+215) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110101 #b1101001110101111111111101001111110011011010001110101)))
(assert (= y (fp #b1 #b10000010101 #b1001010011110010000111111100001010011100100000001100)))
(assert (= z (fp #b0 #b00111011001 #b1011101110111001111101111110011101001000001000011100)))
(assert (= r (fp #b0 #b11011001100 #b0111000111100110000010100001110000110110100001100001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
