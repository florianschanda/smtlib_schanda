(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1327907917800492665350020615733228623867034912109375p-879 {+ 598036560378863 -879 (2.8105e-265)}
; Y = -1.1140881592791107568274355799076147377490997314453125p-646 {- 513807391616789 -646 (-3.81542e-195)}
; Z = 1.3868862063090876546311847050674259662628173828125p836 {+ 1742380574568392 836 (6.35502e+251)}
; 1.1327907917800492665350020615733228623867034912109375p-879 x -1.1140881592791107568274355799076147377490997314453125p-646 1.3868862063090876546311847050674259662628173828125p836 == 1.3868862063090876546311847050674259662628173828125p836
; [HW: 1.3868862063090876546311847050674259662628173828125p836] 

; mpf : + 1742380574568392 836
; mpfd: + 1742380574568392 836 (6.35502e+251) class: Pos. norm. non-zero
; hwf : + 1742380574568392 836 (6.35502e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010000 #b0010000111111110100100111100101111100111101111101111)))
(assert (= y (fp #b1 #b00101111001 #b0001110100110100111000011011000011110110111100010101)))
(assert (= z (fp #b0 #b11101000011 #b0110001100001010111110010111001101011110111111001000)))
(assert (= r (fp #b0 #b11101000011 #b0110001100001010111110010111001101011110111111001000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
