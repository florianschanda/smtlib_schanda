(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1168726842610479099704434702289290726184844970703125p-885 {- 526347777287845 -885 (-4.3297e-267)}
; Y = 1.57757425463975398116645010304637253284454345703125p250 {+ 2601163197974388 250 (2.85423e+075)}
; Z = 1.351013460276486721767241760971955955028533935546875p-676 {+ 1580824088903214 -676 (4.30906e-204)}
; -1.1168726842610479099704434702289290726184844970703125p-885 x 1.57757425463975398116645010304637253284454345703125p250 1.351013460276486721767241760971955955028533935546875p-676 == -1.7619495924000094788652859278954565525054931640625p-635
; [HW: -1.7619495924000094788652859278954565525054931640625p-635] 

; mpf : - 3431515900407784 -635
; mpfd: - 3431515900407784 -635 (-1.23579e-191) class: Neg. norm. non-zero
; hwf : - 3431515900407784 -635 (-1.23579e-191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001010 #b0001110111101011010111100100010010110010011010100101)))
(assert (= y (fp #b0 #b10011111001 #b1001001111011011111010000000011010110000011101110100)))
(assert (= z (fp #b0 #b00101011011 #b0101100111011100000001001010010001010111111000101110)))
(assert (= r (fp #b1 #b00110000100 #b1100001100001111001000001110010010001110111111101000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
