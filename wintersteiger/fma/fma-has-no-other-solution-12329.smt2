(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1354330650527106882918815244920551776885986328125p719 {+ 609936301305032 719 (3.13133e+216)}
; Y = 1.114679096849213291164915062836371362209320068359375p966 {+ 516468737837302 966 (6.95225e+290)}
; Z = 1.152738412162222392254307123948819935321807861328125p-401 {+ 687872656098946 -401 (2.23204e-121)}
; 1.1354330650527106882918815244920551776885986328125p719 x 1.114679096849213291164915062836371362209320068359375p966 1.152738412162222392254307123948819935321807861328125p-401 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001110 #b0010001010101011101111011100100100110010110011001000)))
(assert (= y (fp #b0 #b11111000101 #b0001110101011011100110111111101010000000100011110110)))
(assert (= z (fp #b0 #b01001101110 #b0010011100011001110111010101010100010100011010000010)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
