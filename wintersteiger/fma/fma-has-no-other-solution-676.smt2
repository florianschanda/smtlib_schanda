(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.741164650391458845746228689677082002162933349609375p53 {- 3337908843323158 53 (-1.5683e+016)}
; Y = 1.281839903846686556931899758637882769107818603515625p-289 {+ 1269294085942074 -289 (1.28874e-087)}
; Z = 1.409265534995349344882242803578265011310577392578125p-679 {+ 1843168110900642 -679 (5.61857e-205)}
; -1.741164650391458845746228689677082002162933349609375p53 x 1.281839903846686556931899758637882769107818603515625p-289 1.409265534995349344882242803578265011310577392578125p-679 == -1.1159471640195184338750777897075749933719635009765625p-235
; [HW: -1.1159471640195184338750777897075749933719635009765625p-235] 

; mpf : - 522179604672969 -235
; mpfd: - 522179604672969 -235 (-2.02113e-071) class: Neg. norm. non-zero
; hwf : - 522179604672969 -235 (-2.02113e-071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000110100 #b1011110110111100111101110110111001100001111100010110)))
(assert (= y (fp #b0 #b01011011110 #b0100100000100110101010001111000110111010101100111010)))
(assert (= z (fp #b0 #b00101011000 #b0110100011000101101000000100100000101111010110100010)))
(assert (= r (fp #b1 #b01100010100 #b0001110110101110101101101001110110000111000111001001)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
