(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0097892744595509117999654336017556488513946533203125p351 {- 44086972808261 351 (-4.6319e+105)}
; Y = -1.1215295561270564039801911349059082567691802978515625p-204 {- 547320463688313 -204 (-4.36206e-062)}
; Z = 1.6360743261706838236335670444532297551631927490234375p872 {+ 2864624098322231 872 (5.1518e+262)}
; -1.0097892744595509117999654336017556488513946533203125p351 x -1.1215295561270564039801911349059082567691802978515625p-204 1.6360743261706838236335670444532297551631927490234375p872 == 1.6360743261706838236335670444532297551631927490234375p872
; [HW: 1.6360743261706838236335670444532297551631927490234375p872] 

; mpf : + 2864624098322231 872
; mpfd: + 2864624098322231 872 (5.1518e+262) class: Pos. norm. non-zero
; hwf : + 2864624098322231 872 (5.1518e+262) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101011110 #b0000001010000001100011001100010110100111110001000101)))
(assert (= y (fp #b1 #b01100110011 #b0001111100011100100011111001110100010000001001111001)))
(assert (= z (fp #b0 #b11101100111 #b1010001011010101110001000101110010111010011100110111)))
(assert (= r (fp #b0 #b11101100111 #b1010001011010101110001000101110010111010011100110111)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
