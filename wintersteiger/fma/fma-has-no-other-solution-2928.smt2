(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.069598676059779318592291019740514457225799560546875p-543 {- 313444571568302 -543 (-3.71478e-164)}
; Y = -1.319373953864159343396522672264836728572845458984375p167 {- 1438332419614470 167 (-2.46818e+050)}
; Z = 1.74240853037058140984072451828978955745697021484375p-86 {+ 3343510780733628 -86 (2.25201e-026)}
; -1.069598676059779318592291019740514457225799560546875p-543 x -1.319373953864159343396522672264836728572845458984375p167 1.74240853037058140984072451828978955745697021484375p-86 == 1.74240853037058140984072451828978955745697021484375p-86
; [HW: 1.74240853037058140984072451828978955745697021484375p-86] 

; mpf : + 3343510780733628 -86
; mpfd: + 3343510780733628 -86 (2.25201e-026) class: Pos. norm. non-zero
; hwf : + 3343510780733628 -86 (2.25201e-026) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100000 #b0001000111010001001110000000010110000101100010101110)))
(assert (= y (fp #b1 #b10010100110 #b0101000111000010011111011100111100001010011100000110)))
(assert (= z (fp #b0 #b01110101001 #b1011111000001110011111000100011000110110100010111100)))
(assert (= r (fp #b0 #b01110101001 #b1011111000001110011111000100011000110110100010111100)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
