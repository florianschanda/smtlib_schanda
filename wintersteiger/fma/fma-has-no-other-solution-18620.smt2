(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4698902251068191038285704053123481571674346923828125p-990 {+ 2116197442696109 -990 (1.40472e-298)}
; Y = -1.5911387570709691896553295009653083980083465576171875p-166 {- 2662252286069075 -166 (-1.7011e-050)}
; Z = 1.0285398347297196597338597712223418056964874267578125p-556 {+ 128531989053981 -556 (4.36057e-168)}
; 1.4698902251068191038285704053123481571674346923828125p-990 x -1.5911387570709691896553295009653083980083465576171875p-166 1.0285398347297196597338597712223418056964874267578125p-556 == 1.0285398347297196597338597712223418056964874267578125p-556
; [HW: 1.0285398347297196597338597712223418056964874267578125p-556] 

; mpf : + 128531989053981 -556
; mpfd: + 128531989053981 -556 (4.36057e-168) class: Pos. norm. non-zero
; hwf : + 128531989053981 -556 (4.36057e-168) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100001 #b0111100001001010101110011100110110001011001110101101)))
(assert (= y (fp #b1 #b01101011001 #b1001011101010100110111101001110100000100100101010011)))
(assert (= z (fp #b0 #b00111010011 #b0000011101001110011000101111100011001100001000011101)))
(assert (= r (fp #b0 #b00111010011 #b0000011101001110011000101111100011001100001000011101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
