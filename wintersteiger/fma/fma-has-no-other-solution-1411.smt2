(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.56440892031034817222234778455458581447601318359375p-688 {+ 2541871803194268 -688 (1.21819e-207)}
; Y = 1.067924011120390037632432722602970898151397705078125p-390 {+ 305902551171298 -390 (4.23489e-118)}
; Z = -1.1770047581060396613139573673834092915058135986328125p686 {- 797158562649165 686 (-3.77881e+206)}
; 1.56440892031034817222234778455458581447601318359375p-688 x 1.067924011120390037632432722602970898151397705078125p-390 -1.1770047581060396613139573673834092915058135986328125p686 == -1.1770047581060396613139573673834092915058135986328125p686
; [HW: -1.1770047581060396613139573673834092915058135986328125p686] 

; mpf : - 797158562649165 686
; mpfd: - 797158562649165 686 (-3.77881e+206) class: Neg. norm. non-zero
; hwf : - 797158562649165 686 (-3.77881e+206) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001111 #b1001000001111101000110100101111001001101101110011100)))
(assert (= y (fp #b0 #b01001111001 #b0001000101100011011101111100111001100000000011100010)))
(assert (= z (fp #b1 #b11010101101 #b0010110101010000001011110000111101001101010001001101)))
(assert (= r (fp #b1 #b11010101101 #b0010110101010000001011110000111101001101010001001101)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
