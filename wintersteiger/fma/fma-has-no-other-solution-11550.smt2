(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.25552546380160467975883875624276697635650634765625p265 {- 1150784383560580 265 (-7.44345e+079)}
; Y = -1.976456583080654194617409302736632525920867919921875p510 {- 4397569503705502 510 (-6.62499e+153)}
; Z = 1.9592035540985668351510184947983361780643463134765625p857 {+ 4319868768810761 857 (1.88272e+258)}
; -1.25552546380160467975883875624276697635650634765625p265 x -1.976456583080654194617409302736632525920867919921875p510 1.9592035540985668351510184947983361780643463134765625p857 == 1.9592035540985668351510184947983361780643463134765625p857
; [HW: 1.9592035540985668351510184947983361780643463134765625p857] 

; mpf : + 4319868768810761 857
; mpfd: + 4319868768810761 857 (1.88272e+258) class: Pos. norm. non-zero
; hwf : + 4319868768810761 857 (1.88272e+258) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001000 #b0100000101101010000111011110011001010010101110000100)))
(assert (= y (fp #b1 #b10111111101 #b1111100111111001000011110000001001001011100110011110)))
(assert (= z (fp #b0 #b11101011000 #b1111010110001110010111010011011100001111011100001001)))
(assert (= r (fp #b0 #b11101011000 #b1111010110001110010111010011011100001111011100001001)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
