(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.012976425018346393613910549902357161045074462890625p181 {- 58440622877226 181 (-3.10476e+054)}
; Y = -1.0607064262583085767488455530838109552860260009765625p-997 {- 273397438675913 -997 (-7.91935e-301)}
; Z = -1.248068187254966598942473865463398396968841552734375p-614 {- 1117199795683942 -614 (-1.83578e-185)}
; -1.012976425018346393613910549902357161045074462890625p181 x -1.0607064262583085767488455530838109552860260009765625p-997 -1.248068187254966598942473865463398396968841552734375p-614 == -1.248068187254966598942473865463398396968841552734375p-614
; [HW: -1.248068187254966598942473865463398396968841552734375p-614] 

; mpf : - 1117199795683942 -614
; mpfd: - 1117199795683942 -614 (-1.83578e-185) class: Neg. norm. non-zero
; hwf : - 1117199795683942 -614 (-1.83578e-185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010110100 #b0000001101010010011011000100100100010010101000101010)))
(assert (= y (fp #b1 #b00000011010 #b0000111110001010011101001101001101101111101111001001)))
(assert (= z (fp #b1 #b00110011001 #b0011111110000001011001011000111101110000001001100110)))
(assert (= r (fp #b1 #b00110011001 #b0011111110000001011001011000111101110000001001100110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
