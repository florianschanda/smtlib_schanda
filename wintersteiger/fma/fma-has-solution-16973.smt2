(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.260821741201649359709335840307176113128662109375p-32 {+ 1174636696485872 -32 (2.93558e-010)}
; Y = -1.7823071310485862905892417984432540833950042724609375p-781 {- 3523198103879695 -781 (-1.40138e-235)}
; Z = 1.5433572793250600607706246591988019645214080810546875p697 {+ 2447063640697387 697 (1.01478e+210)}
; 1.260821741201649359709335840307176113128662109375p-32 x -1.7823071310485862905892417984432540833950042724609375p-781 1.5433572793250600607706246591988019645214080810546875p697 == 1.5433572793250600607706246591988019645214080810546875p697
; [HW: 1.5433572793250600607706246591988019645214080810546875p697] 

; mpf : + 2447063640697387 697
; mpfd: + 2447063640697387 697 (1.01478e+210) class: Pos. norm. non-zero
; hwf : + 2447063640697387 697 (1.01478e+210) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011111 #b0100001011000101001101101011000010001011111111110000)))
(assert (= y (fp #b1 #b00011110010 #b1100100001000101010001111011011101001000000000001111)))
(assert (= z (fp #b0 #b11010111000 #b1000101100011001011101100111000010111110101000101011)))
(assert (= r (fp #b0 #b11010111000 #b1000101100011001011101100111000010111110101000101011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
