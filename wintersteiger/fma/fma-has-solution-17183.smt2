(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.87106895926460392587387104867957532405853271484375p-971 {+ 3922945840358076 -971 (9.37484e-293)}
; Y = -1.6145176619175793941707297562970779836177825927734375p230 {- 2767541513224599 230 (-2.78575e+069)}
; Z = 1.0826063087261450501586068639880977571010589599609375p-479 {+ 372025741197519 -479 (6.9359e-145)}
; 1.87106895926460392587387104867957532405853271484375p-971 x -1.6145176619175793941707297562970779836177825927734375p230 1.0826063087261450501586068639880977571010589599609375p-479 == 1.082606308726144828114001938956789672374725341796875p-479
; [HW: 1.082606308726144828114001938956789672374725341796875p-479] 

; mpf : + 372025741197518 -479
; mpfd: + 372025741197518 -479 (6.9359e-145) class: Pos. norm. non-zero
; hwf : + 372025741197518 -479 (6.9359e-145) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000110100 #b1101111011111110011000000001010010011010001010111100)))
(assert (= y (fp #b1 #b10011100101 #b1001110101010001000001111000110011000000000110010111)))
(assert (= z (fp #b0 #b01000100000 #b0001010100100101101011111110001001101100000011001111)))
(assert (= r (fp #b0 #b01000100000 #b0001010100100101101011111110001001101100000011001110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
