(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.01226304005354705850550089962780475616455078125p-789 {+ 55227822615584 -789 (3.10904e-238)}
; Y = -1.1031572810447458632410189238726161420345306396484375p-777 {- 464579092473671 -777 (-1.38781e-234)}
; Z = -1.6360861155594588201012129502487368881702423095703125p-1019 {- 2864677193009125 -1019 (-2.91233e-307)}
; 1.01226304005354705850550089962780475616455078125p-789 x -1.1031572810447458632410189238726161420345306396484375p-777 -1.6360861155594588201012129502487368881702423095703125p-1019 == -1.6360861155594588201012129502487368881702423095703125p-1019
; [HW: -1.6360861155594588201012129502487368881702423095703125p-1019] 

; mpf : - 2864677193009125 -1019
; mpfd: - 2864677193009125 -1019 (-2.91233e-307) class: Neg. norm. non-zero
; hwf : - 2864677193009125 -1019 (-2.91233e-307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101010 #b0000001100100011101010111010101111111010110000100000)))
(assert (= y (fp #b1 #b00011110110 #b0001101001101000100000111111110001101110011101000111)))
(assert (= z (fp #b1 #b00000000100 #b1010001011010110100010100010011111000100011111100101)))
(assert (= r (fp #b1 #b00000000100 #b1010001011010110100010100010011111000100011111100101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
