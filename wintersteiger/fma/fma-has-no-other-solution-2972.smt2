(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -0.2893742540789785433474889941862784326076507568359375p-1022 {- 1303225782840703 -1023 (-6.43879e-309)}
; Y = -1.8048995233775142477128383688977919518947601318359375p-12 {- 3624945193553663 -12 (-0.000440649)}
; Z = -1.66088962358278902087249662145040929317474365234375p-780 {- 2976382262500476 -780 (-2.61183e-235)}
; -0.2893742540789785433474889941862784326076507568359375p-1022 x -1.8048995233775142477128383688977919518947601318359375p-12 -1.66088962358278902087249662145040929317474365234375p-780 == -1.6608896235827887988278916964191012084484100341796875p-780
; [HW: -1.6608896235827887988278916964191012084484100341796875p-780] 

; mpf : - 2976382262500475 -780
; mpfd: - 2976382262500475 -780 (-2.61183e-235) class: Neg. norm. non-zero
; hwf : - 2976382262500475 -780 (-2.61183e-235) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0100101000010100011011100101110110010010110101111111)))
(assert (= y (fp #b1 #b01111110011 #b1100111000001101111001010010100101111000111011111111)))
(assert (= z (fp #b1 #b00011110011 #b1010100100110000000011111111011110001101110001111100)))
(assert (= r (fp #b1 #b00011110011 #b1010100100110000000011111111011110001101110001111011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
