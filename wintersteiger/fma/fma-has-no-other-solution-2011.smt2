(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1504429754137157626558973788633011281490325927734375p-965 {+ 677534928013719 -965 (3.68909e-291)}
; Y = -1.784232970145464225453224571538157761096954345703125p73 {- 3531871312118770 73 (-1.68516e+022)}
; Z = -1.8245508724506283027011477315681986510753631591796875p-708 {- 3713447001916667 -708 (-1.35494e-213)}
; 1.1504429754137157626558973788633011281490325927734375p-965 x -1.784232970145464225453224571538157761096954345703125p73 -1.8245508724506283027011477315681986510753631591796875p-708 == -1.8245508724506283027011477315681986510753631591796875p-708
; [HW: -1.8245508724506283027011477315681986510753631591796875p-708] 

; mpf : - 3713447001916667 -708
; mpfd: - 3713447001916667 -708 (-1.35494e-213) class: Neg. norm. non-zero
; hwf : - 3713447001916667 -708 (-1.35494e-213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111010 #b0010011010000011011011100100101101010000100110010111)))
(assert (= y (fp #b1 #b10001001000 #b1100100011000011011111011110111100111000001111110010)))
(assert (= z (fp #b1 #b00100111011 #b1101001100010101110001000001011100010000010011111011)))
(assert (= r (fp #b1 #b00100111011 #b1101001100010101110001000001011100010000010011111011)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
