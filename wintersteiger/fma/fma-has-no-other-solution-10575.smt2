(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.41768733423654769154609311954118311405181884765625p-246 {+ 1881096522825092 -246 (1.25372e-074)}
; Y = -1.3159985641880076467913340820814482867717742919921875p-278 {- 1423131015926723 -278 (-2.70967e-084)}
; Z = 1.451807694500935053127932405914179980754852294921875p1009 {+ 2034760964597534 1009 (7.9648e+303)}
; 1.41768733423654769154609311954118311405181884765625p-246 x -1.3159985641880076467913340820814482867717742919921875p-278 1.451807694500935053127932405914179980754852294921875p1009 == 1.4518076945009348310833274808828718960285186767578125p1009
; [HW: 1.4518076945009348310833274808828718960285186767578125p1009] 

; mpf : + 2034760964597533 1009
; mpfd: + 2034760964597533 1009 (7.9648e+303) class: Pos. norm. non-zero
; hwf : + 2034760964597533 1009 (7.9648e+303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100001001 #b0110101011101101100011101010000001111111110110000100)))
(assert (= y (fp #b1 #b01011101001 #b0101000011100101010010000010101011000101001111000011)))
(assert (= z (fp #b0 #b11111110000 #b0111001110101001101010110100011111110110011100011110)))
(assert (= r (fp #b0 #b11111110000 #b0111001110101001101010110100011111110110011100011101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
