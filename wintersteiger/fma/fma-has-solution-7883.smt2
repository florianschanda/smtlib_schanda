(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2646080583734953250996113638393580913543701171875p910 {- 1191688753090104 910 (-1.09459e+274)}
; Y = -1.73725196881219545730345998890697956085205078125p-310 {- 3320287692020768 -310 (-8.32845e-094)}
; Z = -1.547602120975802630908901846851222217082977294921875p-717 {- 2466180707973918 -717 (-2.24467e-216)}
; -1.2646080583734953250996113638393580913543701171875p910 x -1.73725196881219545730345998890697956085205078125p-310 -1.547602120975802630908901846851222217082977294921875p-717 == 1.0984714195925613378079788162722252309322357177734375p601
; [HW: 1.0984714195925613378079788162722252309322357177734375p601] 

; mpf : + 443475848583703 601
; mpfd: + 443475848583703 601 (9.11625e+180) class: Pos. norm. non-zero
; hwf : + 443475848583703 601 (9.11625e+180) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001101 #b0100001110111101010110101000110011111000111000111000)))
(assert (= y (fp #b1 #b01011001001 #b1011110010111100100010111000011011110101110000100000)))
(assert (= z (fp #b1 #b00100110010 #b1000110000101111101001110001000011001111101100011110)))
(assert (= r (fp #b0 #b11001011000 #b0001100100110101011011000100011010111101101000010111)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
