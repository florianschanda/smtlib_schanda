(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6896523039711517366612270052428357303142547607421875p-966 {- 3105917859179683 -966 (-2.70908e-291)}
; Y = 1.6517056709704791561676984201767481863498687744140625p66 {+ 2935021416937889 66 (1.21874e+020)}
; Z = 1.535382449151655226415869037737138569355010986328125p567 {+ 2411148198500098 567 (7.41693e+170)}
; -1.6896523039711517366612270052428357303142547607421875p-966 x 1.6517056709704791561676984201767481863498687744140625p66 1.535382449151655226415869037737138569355010986328125p567 == 1.5353824491516550043712641127058304846286773681640625p567
; [HW: 1.5353824491516550043712641127058304846286773681640625p567] 

; mpf : + 2411148198500097 567
; mpfd: + 2411148198500097 567 (7.41693e+170) class: Pos. norm. non-zero
; hwf : + 2411148198500097 567 (7.41693e+170) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000111001 #b1011000010001101000011011010101100101010110010100011)))
(assert (= y (fp #b0 #b10001000001 #b1010011011010110001011101100111101101111100110100001)))
(assert (= z (fp #b0 #b11000110110 #b1000100100001110110100101111110111110101011100000010)))
(assert (= r (fp #b0 #b11000110110 #b1000100100001110110100101111110111110101011100000001)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
