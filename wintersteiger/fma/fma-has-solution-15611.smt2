(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.421376453729261246650139582925476133823394775390625p-82 {- 1897710839997802 -82 (-2.93934e-025)}
; Y = 1.1198190020749532180843743844889104366302490234375p-633 {+ 539616813096664 -633 (3.14167e-191)}
; Z = -1.90322968563636063521471442072652280330657958984375p-422 {- 4067784875661884 -422 (-1.75725e-127)}
; -1.421376453729261246650139582925476133823394775390625p-82 x 1.1198190020749532180843743844889104366302490234375p-633 -1.90322968563636063521471442072652280330657958984375p-422 == -1.90322968563636063521471442072652280330657958984375p-422
; [HW: -1.90322968563636063521471442072652280330657958984375p-422] 

; mpf : - 4067784875661884 -422
; mpfd: - 4067784875661884 -422 (-1.75725e-127) class: Neg. norm. non-zero
; hwf : - 4067784875661884 -422 (-1.75725e-127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101101 #b0110101111011111010100111100100000010010010101101010)))
(assert (= y (fp #b0 #b00110000110 #b0001111010101100011101010100011101011001111011011000)))
(assert (= z (fp #b1 #b01001011001 #b1110011100111010000011111000100010010101101000111100)))
(assert (= r (fp #b1 #b01001011001 #b1110011100111010000011111000100010010101101000111100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
