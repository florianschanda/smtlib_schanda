(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2685208591436578640099241965799592435359954833984375p95 {+ 1209310441180583 95 (5.02513e+028)}
; Y = -1.480437640416874867099750190391205251216888427734375p-283 {- 2163698778356198 -283 (-9.5258e-086)}
; Z = -1.1253150737495316580094595337868668138980865478515625p74 {- 564368919442297 74 (-2.12566e+022)}
; 1.2685208591436578640099241965799592435359954833984375p95 x -1.480437640416874867099750190391205251216888427734375p-283 -1.1253150737495316580094595337868668138980865478515625p74 == -1.1253150737495316580094595337868668138980865478515625p74
; [HW: -1.1253150737495316580094595337868668138980865478515625p74] 

; mpf : - 564368919442297 74
; mpfd: - 564368919442297 74 (-2.12566e+022) class: Neg. norm. non-zero
; hwf : - 564368919442297 74 (-2.12566e+022) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001011110 #b0100010010111101110010000111010001010000110110100111)))
(assert (= y (fp #b1 #b01011100100 #b0111101011111101111101100001000101011011100111100110)))
(assert (= z (fp #b1 #b10001001001 #b0010000000010100101001100000111101110011001101111001)))
(assert (= r (fp #b1 #b10001001001 #b0010000000010100101001100000111101110011001101111001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
