(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6101314823971233369803712776047177612781524658203125p840 {- 2747787916770693 840 (-1.18048e+253)}
; Y = -1.0766577468947431395207559035043232142925262451171875p-857 {- 345235800350227 -857 (-1.1204e-258)}
; Z = -1.1645987431664110989260052519966848194599151611328125p824 {- 741286838389901 824 (-1.30284e+248)}
; -1.6101314823971233369803712776047177612781524658203125p840 x -1.0766577468947431395207559035043232142925262451171875p-857 -1.1645987431664110989260052519966848194599151611328125p824 == -1.1645987431664110989260052519966848194599151611328125p824
; [HW: -1.1645987431664110989260052519966848194599151611328125p824] 

; mpf : - 741286838389901 824
; mpfd: - 741286838389901 824 (-1.30284e+248) class: Neg. norm. non-zero
; hwf : - 741286838389901 824 (-1.30284e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000111 #b1001110000110001100100111010101100100111110110000101)))
(assert (= y (fp #b1 #b00010100110 #b0001001110011111110101111001001111100101111000010011)))
(assert (= z (fp #b1 #b11100110111 #b0010101000100011001001001010101011011100110010001101)))
(assert (= r (fp #b1 #b11100110111 #b0010101000100011001001001010101011011100110010001101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
