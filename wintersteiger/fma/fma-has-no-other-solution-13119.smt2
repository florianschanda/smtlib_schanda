(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2279882166606956861443222805974073708057403564453125p-212 {+ 1026767647597973 -212 (1.86567e-064)}
; Y = 1.8247617216107887561094003103789873421192169189453125p28 {+ 3714396582115797 28 (4.89831e+008)}
; Z = 1.9296133545180447210753982290043495595455169677734375p-134 {+ 4186606357006103 -134 (8.86035e-041)}
; 1.2279882166606956861443222805974073708057403564453125p-212 x 1.8247617216107887561094003103789873421192169189453125p28 1.9296133545180447210753982290043495595455169677734375p-134 == 1.9296133545180464974322376292548142373561859130859375p-134
; [HW: 1.9296133545180464974322376292548142373561859130859375p-134] 

; mpf : + 4186606357006111 -134
; mpfd: + 4186606357006111 -134 (8.86035e-041) class: Pos. norm. non-zero
; hwf : + 4186606357006111 -134 (8.86035e-041) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101011 #b0011101001011101011011111000111001101110010110010101)))
(assert (= y (fp #b0 #b10000011011 #b1101001100100011100101011000110101001111100111010101)))
(assert (= z (fp #b0 #b01101111001 #b1110110111111011001001000000101110010100011100010111)))
(assert (= r (fp #b0 #b01101111001 #b1110110111111011001001000000101110010100011100011111)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
