(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3945223925436016632062319331453181803226470947265625p-943 {+ 1776770900048681 -943 (1.8756e-284)}
; Y = 0.5665625126212334716768737052916549146175384521484375p-1022 {+ 2551570720723079 -1023 (1.26064e-308)}
; Z = 1.6358032885757187724351524593657813966274261474609375p-313 {+ 2863403453510543 -313 (9.80263e-095)}
; 1.3945223925436016632062319331453181803226470947265625p-943 x 0.5665625126212334716768737052916549146175384521484375p-1022 1.6358032885757187724351524593657813966274261474609375p-313 == 1.6358032885757187724351524593657813966274261474609375p-313
; [HW: 1.6358032885757187724351524593657813966274261474609375p-313] 

; mpf : + 2863403453510543 -313
; mpfd: + 2863403453510543 -313 (9.80263e-095) class: Pos. norm. non-zero
; hwf : + 2863403453510543 -313 (9.80263e-095) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010000 #b0110010011111111011010110110010110000011101100101001)))
(assert (= y (fp #b0 #b00000000000 #b1001000100001010001111011010011011011001000010000111)))
(assert (= z (fp #b0 #b01011000110 #b1010001011000100000000010001101100011111001110001111)))
(assert (= r (fp #b0 #b01011000110 #b1010001011000100000000010001101100011111001110001111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
