(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5527118344451216191970388535992242395877838134765625p-162 {+ 2489192811650313 -162 (2.65602e-049)}
; Y = -1.089405246020685336105771057191304862499237060546875p246 {- 402645432663726 246 (-1.23188e+074)}
; Z = 1.0835936000109824828285809417138807475566864013671875p-455 {+ 376472105860019 -455 (1.16471e-137)}
; 1.5527118344451216191970388535992242395877838134765625p-162 x -1.089405246020685336105771057191304862499237060546875p246 1.0835936000109824828285809417138807475566864013671875p-455 == -1.6915324180029174261363777986844070255756378173828125p84
; [HW: -1.6915324180029174261363777986844070255756378173828125p84] 

; mpf : - 3114385140032557 84
; mpfd: - 3114385140032557 84 (-3.2719e+025) class: Neg. norm. non-zero
; hwf : - 3114385140032557 84 (-3.2719e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011101 #b1000110101111110100001011101010100001101110100001001)))
(assert (= y (fp #b1 #b10011110101 #b0001011011100011010000110001111110111111111010101110)))
(assert (= z (fp #b0 #b01000111000 #b0001010101100110011000111110001000110011101110110011)))
(assert (= r (fp #b1 #b10001010011 #b1011000100001000010001001011111101110010010000101101)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
