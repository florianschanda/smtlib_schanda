(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2742700648228295623454187079914845526218414306640625p-245 {+ 1235202561734977 -245 (2.25379e-074)}
; Y = 1.5777014643397604398700195815763436257839202880859375p-828 {+ 2601736099531935 -828 (8.81431e-250)}
; Z = 1.2833005737485307928835709390114061534404754638671875p837 {+ 1275872358367731 837 (1.17607e+252)}
; 1.2742700648228295623454187079914845526218414306640625p-245 x 1.5777014643397604398700195815763436257839202880859375p-828 1.2833005737485307928835709390114061534404754638671875p837 == 1.2833005737485307928835709390114061534404754638671875p837
; [HW: 1.2833005737485307928835709390114061534404754638671875p837] 

; mpf : + 1275872358367731 837
; mpfd: + 1275872358367731 837 (1.17607e+252) class: Pos. norm. non-zero
; hwf : + 1275872358367731 837 (1.17607e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100001010 #b0100011000110110100100000001111010101111100101000001)))
(assert (= y (fp #b0 #b00011000011 #b1001001111100100001111100100000000110000110010011111)))
(assert (= z (fp #b0 #b11101000100 #b0100100010000110011000101110101100110000000111110011)))
(assert (= r (fp #b0 #b11101000100 #b0100100010000110011000101110101100110000000111110011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
