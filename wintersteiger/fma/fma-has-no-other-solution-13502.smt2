(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0429655454752608800816915390896610915660858154296875p284 {- 193499614592155 284 (-3.24182e+085)}
; Y = 1.7393331008418078109656335072941146790981292724609375p632 {+ 3329660277453839 632 (3.09985e+190)}
; Z = 1.429369853754901331654991736286319792270660400390625p-839 {+ 1933709913374698 -839 (3.89922e-253)}
; -1.0429655454752608800816915390896610915660858154296875p284 x 1.7393331008418078109656335072941146790981292724609375p632 1.429369853754901331654991736286319792270660400390625p-839 == -1.8140644962826530939281610699254088103771209716796875p916
; [HW: -1.8140644962826530939281610699254088103771209716796875p916] 

; mpf : - 3666220562114107 916
; mpfd: - 3666220562114107 916 (-1.00491e+276) class: Neg. norm. non-zero
; hwf : - 3666220562114107 916 (-1.00491e+276) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011011 #b0000101011111111110010100011110010101011110010011011)))
(assert (= y (fp #b0 #b11001110111 #b1011110101000100111011110010000011110111010000001111)))
(assert (= z (fp #b0 #b00010111000 #b0110110111101011001011101100011111000011111111101010)))
(assert (= r (fp #b1 #b11110010011 #b1101000001100110100001111110010001011110011000111011)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
