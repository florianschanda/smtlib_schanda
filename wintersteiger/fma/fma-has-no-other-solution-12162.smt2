(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0024332524288421808478233288042247295379638671875p-971 {+ 10958394731832 -971 (5.02261e-293)}
; Y = 1.4583313893048828191467691794969141483306884765625p703 {+ 2064141074085672 703 (6.13682e+211)}
; Z = -0.8685401053368855261993530803010798990726470947265625p-1022 {- 3911556894751529 -1023 (-1.93257e-308)}
; 1.0024332524288421808478233288042247295379638671875p-971 x 1.4583313893048828191467691794969141483306884765625p703 -0.8685401053368855261993530803010798990726470947265625p-1022 == 1.4618798776999657462738468893803656101226806640625p-268
; [HW: 1.4618798776999657462738468893803656101226806640625p-268] 

; mpf : + 2080122045099496 -268
; mpfd: + 2080122045099496 -268 (3.08229e-081) class: Pos. norm. non-zero
; hwf : + 2080122045099496 -268 (3.08229e-081) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000110100 #b0000000010011111011101110011001110011010110100111000)))
(assert (= y (fp #b0 #b11010111110 #b0111010101010101001101001011011111001011011100101000)))
(assert (= z (fp #b1 #b00000000000 #b1101111001011000101001001111001110101111101100101001)))
(assert (= r (fp #b0 #b01011110011 #b0111011000111101110000100111100101100110110111101000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
