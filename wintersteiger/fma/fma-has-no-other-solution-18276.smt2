(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0268765469875591467285858016111887991428375244140625p563 {+ 121041206998177 563 (3.10031e+169)}
; Y = -1.1318598376751329848133309496915899217128753662109375p-609 {- 593843915818863 -609 (-5.32752e-184)}
; Z = 1.82692126165801926873655247618444263935089111328125p-847 {+ 3724122285867796 -847 (1.94676e-255)}
; 1.0268765469875591467285858016111887991428375244140625p563 x -1.1318598376751329848133309496915899217128753662109375p-609 1.82692126165801926873655247618444263935089111328125p-847 == -1.1622803217857395896572825222392566502094268798828125p-46
; [HW: -1.1622803217857395896572825222392566502094268798828125p-46] 

; mpf : - 730845596723821 -46
; mpfd: - 730845596723821 -46 (-1.6517e-014) class: Neg. norm. non-zero
; hwf : - 730845596723821 -46 (-1.6517e-014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000110010 #b0000011011100001011000011010001001010111010010100001)))
(assert (= y (fp #b1 #b00110011110 #b0010000111000001100100001111101001111000011101101111)))
(assert (= z (fp #b0 #b00010110000 #b1101001110110001000111001001111100110000001100010100)))
(assert (= r (fp #b1 #b01111010001 #b0010100110001011001101000000001011011010101001101101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
