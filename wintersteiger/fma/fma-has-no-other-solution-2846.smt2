(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.563987599950375173563088537775911390781402587890625p953 {- 2539974344978090 953 (-1.19075e+287)}
; Y = 1.5281417556154577308547004577121697366237640380859375p-613 {+ 2378539013788575 -613 (4.49548e-185)}
; Z = 1.3158917778540486498428663253434933722019195556640625p239 {+ 1422650093032897 239 (1.16249e+072)}
; -1.563987599950375173563088537775911390781402587890625p953 x 1.5281417556154577308547004577121697366237640380859375p-613 1.3158917778540486498428663253434933722019195556640625p239 == -1.1949973783744860522659791968180797994136810302734375p341
; [HW: -1.1949973783744860522659791968180797994136810302734375p341] 

; mpf : - 878190120585559 341
; mpfd: - 878190120585559 341 (-5.35298e+102) class: Neg. norm. non-zero
; hwf : - 878190120585559 341 (-5.35298e+102) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110111000 #b1001000001100001011111011100100100100010111010101010)))
(assert (= y (fp #b0 #b00110011010 #b1000011100110100010011000101000000000101001110011111)))
(assert (= z (fp #b0 #b10011101110 #b0101000011011110010010001001011011110101010111000001)))
(assert (= r (fp #b1 #b10101010100 #b0011000111101011010110010010001011101100100101010111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
