(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1325963755511951891463695574202574789524078369140625p718 {+ 597160987523041 718 (1.56175e+216)}
; Y = -1.2839835367780916275393110481672920286655426025390625p298 {- 1278948150413169 298 (-6.5388e+089)}
; Z = 1.30819687152218033787676176871173083782196044921875p261 {+ 1387995315744044 261 (4.84732e+078)}
; 1.1325963755511951891463695574202574789524078369140625p718 x -1.2839835367780916275393110481672920286655426025390625p298 1.30819687152218033787676176871173083782196044921875p261 == -1.454235100022271520714411963126622140407562255859375p1016
; [HW: -1.454235100022271520714411963126622140407562255859375p1016] 

; mpf : - 2045693027198902 1016
; mpfd: - 2045693027198902 1016 (-1.0212e+306) class: Neg. norm. non-zero
; hwf : - 2045693027198902 1016 (-1.0212e+306) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001101 #b0010000111110001110101100000100010001111011111100001)))
(assert (= y (fp #b1 #b10100101001 #b0100100010110011001001010010001100010000011101110001)))
(assert (= z (fp #b0 #b10100000100 #b0100111011100101111111010111101111101010110100101100)))
(assert (= r (fp #b1 #b11111110111 #b0111010001001000110000000110001101001010011110110110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
