(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.952706758532655850757464577327482402324676513671875p-708 {- 4290609802721022 -708 (-1.45011e-213)}
; Y = 1.963046634213771124422009961563162505626678466796875p283 {+ 4337176462985550 283 (3.05084e+085)}
; Z = 1.079030826087280292568948425468988716602325439453125p-119 {+ 355923198917458 -119 (1.62355e-036)}
; -1.952706758532655850757464577327482402324676513671875p-708 x 1.963046634213771124422009961563162505626678466796875p283 1.079030826087280292568948425468988716602325439453125p-119 == 1.079030826087280292568948425468988716602325439453125p-119
; [HW: 1.079030826087280292568948425468988716602325439453125p-119] 

; mpf : + 355923198917458 -119
; mpfd: + 355923198917458 -119 (1.62355e-036) class: Pos. norm. non-zero
; hwf : + 355923198917458 -119 (1.62355e-036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111011 #b1111001111100100100101110001001010010011011011111110)))
(assert (= y (fp #b0 #b10100011010 #b1111011010001010001110010110011001111000100101001110)))
(assert (= z (fp #b0 #b01110001000 #b0001010000111011010111010011110101101011101101010010)))
(assert (= r (fp #b0 #b01110001000 #b0001010000111011010111010011110101101011101101010010)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
