(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.232221852756984592502931263879872858524322509765625p-530 {- 1045834249543642 -530 (-3.50583e-160)}
; Y = 1.890391257669900682003572001121938228607177734375p-184 {+ 4009965736256112 -184 (7.70961e-056)}
; Z = -1.6019793529539059218080865321098826825618743896484375p929 {- 2711073989647943 929 (-7.26981e+279)}
; -1.232221852756984592502931263879872858524322509765625p-530 x 1.890391257669900682003572001121938228607177734375p-184 -1.6019793529539059218080865321098826825618743896484375p929 == -1.6019793529539059218080865321098826825618743896484375p929
; [HW: -1.6019793529539059218080865321098826825618743896484375p929] 

; mpf : - 2711073989647943 929
; mpfd: - 2711073989647943 929 (-7.26981e+279) class: Neg. norm. non-zero
; hwf : - 2711073989647943 929 (-7.26981e+279) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101101 #b0011101101110010111001000010111100000001111111011010)))
(assert (= y (fp #b0 #b01101000111 #b1110001111110000101011100111010001010110001001110000)))
(assert (= z (fp #b1 #b11110100000 #b1001101000011011010100011010000111001101111001000111)))
(assert (= r (fp #b1 #b11110100000 #b1001101000011011010100011010000111001101111001000111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
