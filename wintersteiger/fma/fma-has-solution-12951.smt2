(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.011503612527127504705504179582931101322174072265625p-74 {- 51807665090586 -74 (-5.35486e-023)}
; Y = -1.698172889359824022648126629064790904521942138671875p347 {- 3144291164361086 347 (-4.86845e+104)}
; Z = 1.4672863376290126158352222773828543722629547119140625p-366 {+ 2104470576021345 -366 (9.76195e-111)}
; -1.011503612527127504705504179582931101322174072265625p-74 x -1.698172889359824022648126629064790904521942138671875p347 1.4672863376290126158352222773828543722629547119140625p-366 == 1.7177080122830918895715512917377054691314697265625p273
; [HW: 1.7177080122830918895715512917377054691314697265625p273] 

; mpf : + 3232269536678952 273
; mpfd: + 3232269536678952 273 (2.60698e+082) class: Pos. norm. non-zero
; hwf : + 3232269536678952 273 (2.60698e+082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110110101 #b0000001011110001111001101001011110010111000000011010)))
(assert (= y (fp #b1 #b10101011010 #b1011001010111011011101010101111011000001000101111110)))
(assert (= z (fp #b0 #b01010010001 #b0111011110100000000100111101000111111011111101100001)))
(assert (= r (fp #b0 #b10100010000 #b1011011110111011101101100101100011010101010000101000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
