(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1281288641231113079044234837056137621402740478515625p-827 {- 577041104720249 -827 (-1.26053e-249)}
; Y = 1.3675131761116416928558692234219051897525787353515625p102 {+ 1655132202990137 102 (6.93412e+030)}
; Z = -1.839838100354134642344661187962628901004791259765625p-37 {- 3782294555806426 -37 (-1.33866e-011)}
; -1.1281288641231113079044234837056137621402740478515625p-827 x 1.3675131761116416928558692234219051897525787353515625p102 -1.839838100354134642344661187962628901004791259765625p-37 == -1.839838100354134642344661187962628901004791259765625p-37
; [HW: -1.839838100354134642344661187962628901004791259765625p-37] 

; mpf : - 3782294555806426 -37
; mpfd: - 3782294555806426 -37 (-1.33866e-011) class: Neg. norm. non-zero
; hwf : - 3782294555806426 -37 (-1.33866e-011) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000100 #b0010000011001101000011011010000100010101000101111001)))
(assert (= y (fp #b0 #b10001100101 #b0101111000010101010101111111000000111111101000111001)))
(assert (= z (fp #b1 #b01111011010 #b1101011011111111101000010011011011110100101011011010)))
(assert (= r (fp #b1 #b01111011010 #b1101011011111111101000010011011011110100101011011010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
