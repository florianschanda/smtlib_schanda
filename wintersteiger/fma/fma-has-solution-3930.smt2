(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9417391083994306466564694346743635833263397216796875p136 {- 4241215897667899 136 (-1.69149e+041)}
; Y = -1.2060716860454590015905296240816824138164520263671875p-379 {- 928064368485939 -379 (-9.79501e-115)}
; Z = -1.056445810428356946175654229591600596904754638671875p83 {- 254209330811774 83 (-1.02173e+025)}
; -1.9417391083994306466564694346743635833263397216796875p136 x -1.2060716860454590015905296240816824138164520263671875p-379 -1.056445810428356946175654229591600596904754638671875p83 == -1.056445810428356946175654229591600596904754638671875p83
; [HW: -1.056445810428356946175654229591600596904754638671875p83] 

; mpf : - 254209330811774 83
; mpfd: - 254209330811774 83 (-1.02173e+025) class: Neg. norm. non-zero
; hwf : - 254209330811774 83 (-1.02173e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000111 #b1111000100010101110100000110111111110000100100111011)))
(assert (= y (fp #b1 #b01010000100 #b0011010011000001000111010011000000110010011000110011)))
(assert (= z (fp #b1 #b10001010010 #b0000111001110011001110111000110111001001001101111110)))
(assert (= r (fp #b1 #b10001010010 #b0000111001110011001110111000110111001001001101111110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
