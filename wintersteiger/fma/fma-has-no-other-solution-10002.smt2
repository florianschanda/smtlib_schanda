(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.176420153055731443458853391348384320735931396484375p-1 {- 794525735562438 -1 (-0.58821)}
; Y = 1.4336191893028626953565662915934808552265167236328125p472 {+ 1952847219365069 472 (1.7482e+142)}
; Z = 1.3824062525705567150424712963285855948925018310546875p202 {+ 1722204656580907 202 (8.88576e+060)}
; -1.176420153055731443458853391348384320735931396484375p-1 x 1.4336191893028626953565662915934808552265167236328125p472 1.3824062525705567150424712963285855948925018310546875p202 == -1.686538506103307355488141183741390705108642578125p471
; [HW: -1.686538506103307355488141183741390705108642578125p471] 

; mpf : - 3091894560262352 471
; mpfd: - 3091894560262352 471 (-1.02831e+142) class: Neg. norm. non-zero
; hwf : - 3091894560262352 471 (-1.02831e+142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111111110 #b0010110100101001110111110000001110111010110011000110)))
(assert (= y (fp #b0 #b10111010111 #b0110111100000001101010101100110011111001010011001101)))
(assert (= z (fp #b0 #b10011001001 #b0110000111100101011000000100110010010011100100101011)))
(assert (= r (fp #b1 #b10111010110 #b1010111111000000111111001100111100101000100011010000)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
