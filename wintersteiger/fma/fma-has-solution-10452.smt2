(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9144997599089739193090053959167562425136566162109375p366 {+ 4118540777956463 366 (2.87762e+110)}
; Y = -1.9409922819982134978289423088426701724529266357421875p4 {- 4237852490565667 4 (-31.0559)}
; Z = -1.2931806282304822985906866961158812046051025390625p302 {- 1320368168051048 302 (-1.0537e+091)}
; 1.9144997599089739193090053959167562425136566162109375p366 x -1.9409922819982134978289423088426701724529266357421875p4 -1.2931806282304822985906866961158812046051025390625p302 == -1.8580146289353753896733678629971109330654144287109375p371
; [HW: -1.8580146289353753896733678629971109330654144287109375p371] 

; mpf : - 3864154363151791 371
; mpfd: - 3864154363151791 371 (-8.93671e+111) class: Neg. norm. non-zero
; hwf : - 3864154363151791 371 (-8.93671e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101101 #b1110101000011100101010000000000100000010010001101111)))
(assert (= y (fp #b1 #b10000000011 #b1111000011100100110111101100010011111000100000100011)))
(assert (= z (fp #b1 #b10100101101 #b0100101100001101111000101011101000010010000101101000)))
(assert (= r (fp #b1 #b10101110010 #b1101101110100110110110001100001011000100010110101111)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
