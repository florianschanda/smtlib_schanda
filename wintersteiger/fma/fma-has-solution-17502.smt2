(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6465351612664009817166288485168479382991790771484375p-801 {+ 2911735511361287 -801 (1.23465e-241)}
; Y = 1.6751853803048388780183586277416907250881195068359375p-931 {+ 3040764627146879 -931 (9.22862e-281)}
; Z = -1.645069390712382340069552810746245086193084716796875p18 {- 2905134267640398 18 (-431245)}
; 1.6465351612664009817166288485168479382991790771484375p-801 x 1.6751853803048388780183586277416907250881195068359375p-931 -1.645069390712382340069552810746245086193084716796875p18 == -1.645069390712382340069552810746245086193084716796875p18
; [HW: -1.645069390712382340069552810746245086193084716796875p18] 

; mpf : - 2905134267640398 18
; mpfd: - 2905134267640398 18 (-431245) class: Neg. norm. non-zero
; hwf : - 2905134267640398 18 (-431245) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011110 #b1010010110000011010101000000110101011010011100000111)))
(assert (= y (fp #b0 #b00001011100 #b1010110011011000111100101111011100100101100001111111)))
(assert (= z (fp #b1 #b10000010001 #b1010010100100011010001001000000011000010101001001110)))
(assert (= r (fp #b1 #b10000010001 #b1010010100100011010001001000000011000010101001001110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
