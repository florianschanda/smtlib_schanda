(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9567704348864698449261823043343611061573028564453125p-594 {+ 4308910974033813 -594 (3.01802e-179)}
; Y = -1.722294626472528733529543387703597545623779296875p240 {- 3252925810633392 240 (-3.04303e+072)}
; Z = -1.82176677078038284918193312478251755237579345703125p-2 {- 3700908522671988 -2 (-0.455442)}
; 1.9567704348864698449261823043343611061573028564453125p-594 x -1.722294626472528733529543387703597545623779296875p240 -1.82176677078038284918193312478251755237579345703125p-2 == -1.8217667707803830712265380498138256371021270751953125p-2
; [HW: -1.8217667707803830712265380498138256371021270751953125p-2] 

; mpf : - 3700908522671989 -2
; mpfd: - 3700908522671989 -2 (-0.455442) class: Neg. norm. non-zero
; hwf : - 3700908522671989 -2 (-0.455442) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101101 #b1111010011101110111010000011111110011101111110010101)))
(assert (= y (fp #b1 #b10011101111 #b1011100011101000010011001111011011000110101010110000)))
(assert (= z (fp #b1 #b01111111101 #b1101001001011111010011101001110101110000111101110100)))
(assert (= r (fp #b1 #b01111111101 #b1101001001011111010011101001110101110000111101110101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
