(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7380957351630248464147143749869428575038909912109375p274 {+ 3324087677843951 274 (5.27585e+082)}
; Y = -1.9274817950557683321477497884188778698444366455078125p956 {- 4177006666606077 956 (-1.17399e+288)}
; Z = 1.7692458156246957390322904757340438663959503173828125p-587 {+ 3464375168603693 -587 (3.49286e-177)}
; 1.7380957351630248464147143749869428575038909912109375p274 x -1.9274817950557683321477497884188778698444366455078125p956 1.7692458156246957390322904757340438663959503173828125p-587 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010001 #b1011110011110011110101111001001111010111100111101111)))
(assert (= y (fp #b1 #b11110111011 #b1110110101101111011100100110100101100110010111111101)))
(assert (= z (fp #b0 #b00110110100 #b1100010011101101010010110011010010110001011000101101)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
