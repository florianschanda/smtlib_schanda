(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.11213831801090190509739841218106448650360107421875p-899 {+ 505026087207852 -899 (2.63144e-271)}
; Y = 1.30577370824250937886290557798929512500762939453125p20 {+ 1377082358500660 20 (1.3692e+006)}
; Z = -1.304929332366032923573584412224590778350830078125p-529 {- 1373279627618000 -529 (-7.42539e-160)}
; 1.11213831801090190509739841218106448650360107421875p-899 x 1.30577370824250937886290557798929512500762939453125p20 -1.304929332366032923573584412224590778350830078125p-529 == -1.304929332366032923573584412224590778350830078125p-529
; [HW: -1.304929332366032923573584412224590778350830078125p-529] 

; mpf : - 1373279627618000 -529
; mpfd: - 1373279627618000 -529 (-7.42539e-160) class: Neg. norm. non-zero
; hwf : - 1373279627618000 -529 (-7.42539e-160) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111100 #b0001110010110101000110001100100001111100001110101100)))
(assert (= y (fp #b0 #b10000010011 #b0100111001000111001011111000110011100000110100110100)))
(assert (= z (fp #b1 #b00111101110 #b0100111000001111110110010100011000011010011011010000)))
(assert (= r (fp #b1 #b00111101110 #b0100111000001111110110010100011000011010011011010000)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
