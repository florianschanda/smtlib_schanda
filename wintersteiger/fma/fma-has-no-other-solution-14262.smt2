(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9449954105707167872907348282751627266407012939453125p338 {- 4255880978913109 338 (-1.08907e+102)}
; Y = -1.46458853300754920923054669401608407497406005859375p93 {- 2092320744133404 93 (-1.45046e+028)}
; Z = -1.8537659310636713794195884474902413785457611083984375p-633 {- 3845019928999975 -633 (-5.20077e-191)}
; -1.9449954105707167872907348282751627266407012939453125p338 x -1.46458853300754920923054669401608407497406005859375p93 -1.8537659310636713794195884474902413785457611083984375p-633 == 1.4243089875370908981011552896234206855297088623046875p432
; [HW: 1.4243089875370908981011552896234206855297088623046875p432] 

; mpf : + 1910917798161995 432
; mpfd: + 1910917798161995 432 (1.57966e+130) class: Pos. norm. non-zero
; hwf : + 1910917798161995 432 (1.57966e+130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010001 #b1111000111101011001110000001111101000101011101010101)))
(assert (= y (fp #b1 #b10001011100 #b0111011011101111010001100010101101011101001100011100)))
(assert (= z (fp #b1 #b00110000110 #b1101101010010000011001110111000001011011100000100111)))
(assert (= r (fp #b0 #b10110101111 #b0110110010011111100000111000100011011110111001001011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
