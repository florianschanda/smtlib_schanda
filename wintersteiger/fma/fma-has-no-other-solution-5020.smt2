(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9233762671506469121851523595978505909442901611328125p506 {+ 4158517012662413 506 (4.02942e+152)}
; Y = -1.2845438614537612043164926944882608950138092041015625p-1013 {- 1281471628413721 -1013 (-1.4634e-305)}
; Z = -1.09624434542536786096889045438729226589202880859375p408 {- 433445998194204 408 (-7.24679e+122)}
; 1.9233762671506469121851523595978505909442901611328125p506 x -1.2845438614537612043164926944882608950138092041015625p-1013 -1.09624434542536786096889045438729226589202880859375p408 == -1.09624434542536786096889045438729226589202880859375p408
; [HW: -1.09624434542536786096889045438729226589202880859375p408] 

; mpf : - 433445998194204 408
; mpfd: - 433445998194204 408 (-7.24679e+122) class: Neg. norm. non-zero
; hwf : - 433445998194204 408 (-7.24679e+122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111111001 #b1110110001100010011000110001010101010000100010001101)))
(assert (= y (fp #b1 #b00000001010 #b0100100011010111110111011101001100111000101100011001)))
(assert (= z (fp #b1 #b10110010111 #b0001100010100011011110000010110000000110111000011100)))
(assert (= r (fp #b1 #b10110010111 #b0001100010100011011110000010110000000110111000011100)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
