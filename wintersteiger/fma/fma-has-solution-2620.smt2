(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1183260861089039384097532092710025608539581298828125p909 {- 532893317308269 909 (-4.83988e+273)}
; Y = 1.5164696527099625900092405572650022804737091064453125p-552 {+ 2325972535492757 -552 (1.02867e-166)}
; Z = -1.9642170829762533035278693205327726900577545166015625p-825 {- 4342447695596121 -825 (-8.77896e-249)}
; -1.1183260861089039384097532092710025608539581298828125p909 x 1.5164696527099625900092405572650022804737091064453125p-552 -1.9642170829762533035278693205327726900577545166015625p-825 == -1.6959075714180611438308687866083346307277679443359375p357
; [HW: -1.6959075714180611438308687866083346307277679443359375p357] 

; mpf : - 3134089079322687 357
; mpfd: - 3134089079322687 357 (-4.97864e+107) class: Neg. norm. non-zero
; hwf : - 3134089079322687 357 (-4.97864e+107) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001100 #b0001111001001010100111100100111000011001111101101101)))
(assert (= y (fp #b0 #b00111010111 #b1000010000110111010110101110101111000100000010010101)))
(assert (= z (fp #b1 #b00011000110 #b1111011011010110111011100100010110100000101001011001)))
(assert (= r (fp #b1 #b10101100100 #b1011001000100110111111111010010001000111100000111111)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
