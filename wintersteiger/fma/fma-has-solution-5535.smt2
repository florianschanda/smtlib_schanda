(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7272561827834653769286887836642563343048095703125p-494 {- 3275270673786504 -494 (-3.37706e-149)}
; Y = -1.52629442146064508989411478978581726551055908203125p72 {- 2370219360377332 72 (-7.20772e+021)}
; Z = 1.897816486783483913569625656236894428730010986328125p-523 {+ 4043405995325186 -523 (6.91141e-158)}
; -1.7272561827834653769286887836642563343048095703125p-494 x -1.52629442146064508989411478978581726551055908203125p72 1.897816486783483913569625656236894428730010986328125p-523 == 1.31815073810790561736894233035854995250701904296875p-421
; [HW: 1.31815073810790561736894233035854995250701904296875p-421] 

; mpf : + 1432823545590412 -421
; mpfd: + 1432823545590412 -421 (2.43409e-127) class: Pos. norm. non-zero
; hwf : + 1432823545590412 -421 (2.43409e-127) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010001 #b1011101000101101011101100001000011011110011010001000)))
(assert (= y (fp #b1 #b10001000111 #b1000011010111011001110110011000000111101100111110100)))
(assert (= z (fp #b0 #b00111110100 #b1110010111010111010011010010000010001011011100000010)))
(assert (= r (fp #b0 #b01001011010 #b0101000101110010010100111010011101011111001010001100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
