(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -0.968169121871655047328886212198995053768157958984375p-1022 {- 4360246096492806 -1023 (-2.15425e-308)}
; Y = 1.091826159347205393856938826502300798892974853515625p-951 {+ 413548257018938 -951 (5.73624e-287)}
; Z = 1.329200202758988869078393690870143473148345947265625p-464 {+ 1482585910475674 -464 (2.79044e-140)}
; -0.968169121871655047328886212198995053768157958984375p-1022 x 1.091826159347205393856938826502300798892974853515625p-951 1.329200202758988869078393690870143473148345947265625p-464 == 1.329200202758988869078393690870143473148345947265625p-464
; [HW: 1.329200202758988869078393690870143473148345947265625p-464] 

; mpf : + 1482585910475674 -464
; mpfd: + 1482585910475674 -464 (2.79044e-140) class: Pos. norm. non-zero
; hwf : + 1482585910475674 -464 (2.79044e-140) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1111011111011001111011100111101101101111100100000110)))
(assert (= y (fp #b0 #b00001001000 #b0001011110000001111010110100111101010000010000111010)))
(assert (= z (fp #b0 #b01000101111 #b0101010001000110011101101110100010101111101110011010)))
(assert (= r (fp #b0 #b01000101111 #b0101010001000110011101101110100010101111101110011010)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
