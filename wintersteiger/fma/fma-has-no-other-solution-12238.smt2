(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4091260593425880554008244871511124074459075927734375p300 {- 1842539968402839 300 (-2.87044e+090)}
; Y = 1.4790349064397607659060440710163675248622894287109375p779 {+ 2157381426139567 779 (4.70268e+234)}
; Z = -1.336928874372031561534868160379119217395782470703125p393 {- 1517392753072242 393 (-2.6971e+118)}
; -1.4091260593425880554008244871511124074459075927734375p300 x 1.4790349064397607659060440710163675248622894287109375p779 -1.336928874372031561534868160379119217395782470703125p393 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101011 #b0110100010111100011111000100010011010001010110010111)))
(assert (= y (fp #b0 #b11100001010 #b0111101010100010000010000001100011001101000110101111)))
(assert (= z (fp #b1 #b10110001000 #b0101011001000000111110001000000010000001100001110010)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
