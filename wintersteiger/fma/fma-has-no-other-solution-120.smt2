(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.992126478325271232705517832073383033275604248046875p-521 {- 4468140438090094 -521 (-2.90194e-157)}
; Y = -1.79237073356928267031662471708841621875762939453125p281 {- 3568520540441908 281 (-6.96397e+084)}
; Z = -1.745114555735926220592091340222395956516265869140625p-892 {- 3355697635560650 -892 (-5.28528e-269)}
; -1.992126478325271232705517832073383033275604248046875p-521 x -1.79237073356928267031662471708841621875762939453125p281 -1.745114555735926220592091340222395956516265869140625p-892 == 1.7853145986593290661659239049185998737812042236328125p-239
; [HW: 1.7853145986593290661659239049185998737812042236328125p-239] 

; mpf : + 3536742533890765 -239
; mpfd: + 3536742533890765 -239 (2.0209e-072) class: Pos. norm. non-zero
; hwf : + 3536742533890765 -239 (2.0209e-072) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110110 #b1111110111111100000000000011100111100111000101101110)))
(assert (= y (fp #b1 #b10100011000 #b1100101011011000110011101111001011111100110100110100)))
(assert (= z (fp #b1 #b00010000011 #b1011111010111111110100111101100010101000110011001010)))
(assert (= r (fp #b0 #b01100010000 #b1100100100001010011000001010011001010000001011001101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
