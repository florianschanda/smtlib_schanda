(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.12849017880295843241356124053709208965301513671875p419 {+ 578668321377772 419 (1.5278e+126)}
; Y = 1.9426311099855986253004402897204272449016571044921875p-536 {+ 4245233115678979 -536 (8.636e-162)}
; Z = 1.481771243673147164798820085707120597362518310546875p737 {+ 2169704793484206 737 (1.07124e+222)}
; 1.12849017880295843241356124053709208965301513671875p419 x 1.9426311099855986253004402897204272449016571044921875p-536 1.481771243673147164798820085707120597362518310546875p737 == 1.481771243673147164798820085707120597362518310546875p737
; [HW: 1.481771243673147164798820085707120597362518310546875p737] 

; mpf : + 2169704793484206 737
; mpfd: + 2169704793484206 737 (1.07124e+222) class: Pos. norm. non-zero
; hwf : + 2169704793484206 737 (1.07124e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110100010 #b0010000011100100101110110111101111010000110111101100)))
(assert (= y (fp #b0 #b00111100111 #b1111000101010000010001011011110110010100100100000011)))
(assert (= z (fp #b0 #b11011100000 #b0111101101010101010111000011011110111010101110101110)))
(assert (= r (fp #b0 #b11011100000 #b0111101101010101010111000011011110111010101110101110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
