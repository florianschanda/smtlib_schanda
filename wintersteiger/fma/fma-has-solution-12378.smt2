(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3245514763503349886519799838424660265445709228515625p-192 {+ 1461649907953913 -192 (2.11013e-058)}
; Y = 1.154681940199175915751084176008589565753936767578125p-386 {+ 696625528241954 -386 (7.32629e-117)}
; Z = 1.3153121416188759962295762306894175708293914794921875p-212 {+ 1420039643500163 -212 (1.99834e-064)}
; 1.3245514763503349886519799838424660265445709228515625p-192 x 1.154681940199175915751084176008589565753936767578125p-386 1.3153121416188759962295762306894175708293914794921875p-212 == 1.3153121416188759962295762306894175708293914794921875p-212
; [HW: 1.3153121416188759962295762306894175708293914794921875p-212] 

; mpf : + 1420039643500163 -212
; mpfd: + 1420039643500163 -212 (1.99834e-064) class: Pos. norm. non-zero
; hwf : + 1420039643500163 -212 (1.99834e-064) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111111 #b0101001100010101110011100011100011001011000011111001)))
(assert (= y (fp #b0 #b01001111101 #b0010011110011001001111000101001001101111111100100010)))
(assert (= z (fp #b0 #b01100101011 #b0101000010111000010010111110100001001000111010000011)))
(assert (= r (fp #b0 #b01100101011 #b0101000010111000010010111110100001001000111010000011)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
