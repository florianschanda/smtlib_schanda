(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9405208421718447286963282749638892710208892822265625p-385 {- 4235729314339305 -385 (-2.46246e-116)}
; Y = -1.8005060036942841517060287515050731599330902099609375p667 {- 3605158539945423 667 (-1.10256e+201)}
; Z = 1.1157310351060834019421008633798919618129730224609375p127 {+ 521206246578959 127 (1.89832e+038)}
; -1.9405208421718447286963282749638892710208892822265625p-385 x -1.8005060036942841517060287515050731599330902099609375p667 1.1157310351060834019421008633798919618129730224609375p127 == 1.7469597133121472776196014820015989243984222412109375p283
; [HW: 1.7469597133121472776196014820015989243984222412109375p283] 

; mpf : + 3364007486533359 283
; mpfd: + 3364007486533359 283 (2.71501e+085) class: Pos. norm. non-zero
; hwf : + 3364007486533359 283 (2.71501e+085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001111110 #b1111000011000101111110010101001001010101100111101001)))
(assert (= y (fp #b1 #b11010011010 #b1100110011101101111101100010001000011110010111001111)))
(assert (= z (fp #b0 #b10001111110 #b0001110110100000100011001001001011101001101100001111)))
(assert (= r (fp #b0 #b10100011010 #b1011111100111000110000000111010000011010111011101111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
