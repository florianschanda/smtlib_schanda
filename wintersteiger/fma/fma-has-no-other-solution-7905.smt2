(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.944997152559814868055809711222536861896514892578125p99 {+ 4255888824134562 99 (1.23279e+030)}
; Y = -1.6225900142431484152183429614524357020854949951171875p-189 {- 2803896156150035 -189 (-2.06795e-057)}
; Z = -1.472530250715503807867889918270520865917205810546875p602 {- 2128087061043630 602 (-2.44411e+181)}
; 1.944997152559814868055809711222536861896514892578125p99 x -1.6225900142431484152183429614524357020854949951171875p-189 -1.472530250715503807867889918270520865917205810546875p602 == -1.472530250715503807867889918270520865917205810546875p602
; [HW: -1.472530250715503807867889918270520865917205810546875p602] 

; mpf : - 2128087061043630 602
; mpfd: - 2128087061043630 602 (-2.44411e+181) class: Neg. norm. non-zero
; hwf : - 2128087061043630 602 (-2.44411e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100010 #b1111000111101011010101010101100100001110101110100010)))
(assert (= y (fp #b1 #b01101000010 #b1001111101100010000011110010010111111101100100010011)))
(assert (= z (fp #b1 #b11001011001 #b0111100011110111101111100001010100110001100110101110)))
(assert (= r (fp #b1 #b11001011001 #b0111100011110111101111100001010100110001100110101110)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
