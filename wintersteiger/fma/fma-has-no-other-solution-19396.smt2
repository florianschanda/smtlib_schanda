(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4165678045456322475814658901072107255458831787109375p-591 {+ 1876054609326255 -591 (1.74787e-178)}
; Y = 1.74582564619557434326679867808707058429718017578125p136 {+ 3358900102289748 136 (1.52083e+041)}
; Z = 1.3337339050489014358191752762650139629840850830078125p-233 {+ 1503003890419133 -233 (9.66229e-071)}
; 1.4165678045456322475814658901072107255458831787109375p-591 x 1.74582564619557434326679867808707058429718017578125p136 1.3337339050489014358191752762650139629840850830078125p-233 == 1.3337339050489014358191752762650139629840850830078125p-233
; [HW: 1.3337339050489014358191752762650139629840850830078125p-233] 

; mpf : + 1503003890419133 -233
; mpfd: + 1503003890419133 -233 (9.66229e-071) class: Pos. norm. non-zero
; hwf : + 1503003890419133 -233 (9.66229e-071) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110000 #b0110101010100100001100000000100100010111000010101111)))
(assert (= y (fp #b0 #b10010000111 #b1011111011101110011011011111011011101101100101010100)))
(assert (= z (fp #b0 #b01100010110 #b0101010101101111100101011100111111000000010110111101)))
(assert (= r (fp #b0 #b01100010110 #b0101010101101111100101011100111111000000010110111101)))
(assert  (not (= (fp.fma roundTowardZero x y z) r)))
(check-sat)
(exit)
