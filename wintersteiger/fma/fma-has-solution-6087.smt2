(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.24543622457350178223123293719254434108734130859375p634 {- 1105346489532444 634 (-8.87848e+190)}
; Y = -1.7402278804811894818982409560703672468662261962890625p254 {- 3333690006704337 254 (-5.03762e+076)}
; Z = 1.97674815717235929923845105804502964019775390625p-455 {+ 4398882636676256 -455 (2.12473e-137)}
; -1.24543622457350178223123293719254434108734130859375p634 x -1.7402278804811894818982409560703672468662261962890625p254 1.97674815717235929923845105804502964019775390625p-455 == 1.083671420682019714831767487339675426483154296875p889
; [HW: 1.083671420682019714831767487339675426483154296875p889] 

; mpf : + 376822579005104 889
; mpfd: + 376822579005104 889 (4.47264e+267) class: Pos. norm. non-zero
; hwf : + 376822579005104 889 (4.47264e+267) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111001 #b0011111011010100111010001000110111001100000000011100)))
(assert (= y (fp #b1 #b10011111101 #b1011110101111111100100110000101001000001000011010001)))
(assert (= z (fp #b0 #b01000111000 #b1111101000001100001010101100111101111011110010100000)))
(assert (= r (fp #b0 #b11101111000 #b0001010101101011011111010111111101110000011010110000)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
