(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.776992006985619099168616230599582195281982421875p-815 {- 3499260913130288 -815 (-8.13278e-246)}
; Y = -1.96760484627152276715378320659510791301727294921875p643 {- 4357704825110316 643 (-7.18166e+193)}
; Z = -1.2564786856373124646069072696263901889324188232421875p39 {- 1155077313064675 39 (-6.90756e+011)}
; -1.776992006985619099168616230599582195281982421875p-815 x -1.96760484627152276715378320659510791301727294921875p643 -1.2564786856373124646069072696263901889324188232421875p39 == -1.256478685637312242562302344595082104206085205078125p39
; [HW: -1.256478685637312242562302344595082104206085205078125p39] 

; mpf : - 1155077313064674 39
; mpfd: - 1155077313064674 39 (-6.90756e+011) class: Neg. norm. non-zero
; hwf : - 1155077313064674 39 (-6.90756e+011) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010000 #b1100011011101000111100101011101101000001101100110000)))
(assert (= y (fp #b1 #b11010000010 #b1111011110110100111100111000001000101111111100101100)))
(assert (= z (fp #b1 #b10000100110 #b0100000110101000100101100100111011101110111011100011)))
(assert (= r (fp #b1 #b10000100110 #b0100000110101000100101100100111011101110111011100010)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
