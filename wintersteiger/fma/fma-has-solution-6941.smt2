(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.361362564552432985465202364139258861541748046875p-692 {+ 1627432311063984 -692 (6.62547e-209)}
; Y = 1.90990753928438738995509993401356041431427001953125p-642 {+ 4097859254862772 -642 (1.04654e-193)}
; Z = -1.15250462176059986774134813458658754825592041015625p-235 {- 686819757733316 -235 (-2.08734e-071)}
; 1.361362564552432985465202364139258861541748046875p-692 x 1.90990753928438738995509993401356041431427001953125p-642 -1.15250462176059986774134813458658754825592041015625p-235 == -1.1525046217605996456967432095552794635295867919921875p-235
; [HW: -1.1525046217605996456967432095552794635295867919921875p-235] 

; mpf : - 686819757733315 -235
; mpfd: - 686819757733315 -235 (-2.08734e-071) class: Neg. norm. non-zero
; hwf : - 686819757733315 -235 (-2.08734e-071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001011 #b0101110010000010010000011100110011000000010110110000)))
(assert (= y (fp #b0 #b00101111101 #b1110100011101111101100110101001110011100001110110100)))
(assert (= z (fp #b1 #b01100010100 #b0010011100001010100010101111101011110011010111000100)))
(assert (= r (fp #b1 #b01100010100 #b0010011100001010100010101111101011110011010111000011)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
