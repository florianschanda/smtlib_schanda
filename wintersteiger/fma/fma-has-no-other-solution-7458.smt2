(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.268888999914887794062678949558176100254058837890625p-763 {+ 1210968399820714 -763 (2.61539e-230)}
; Y = -1.653462452926131476260707131586968898773193359375p303 {- 2942933259498736 303 (-2.69453e+091)}
; Z = 1.4531365473941526555989867119933478534221649169921875p-253 {+ 2040745585992259 -253 (1.00396e-076)}
; 1.268888999914887794062678949558176100254058837890625p-763 x -1.653462452926131476260707131586968898773193359375p303 1.4531365473941526555989867119933478534221649169921875p-253 == 1.4531365473941526555989867119933478534221649169921875p-253
; [HW: 1.4531365473941526555989867119933478534221649169921875p-253] 

; mpf : + 2040745585992259 -253
; mpfd: + 2040745585992259 -253 (1.00396e-076) class: Pos. norm. non-zero
; hwf : + 2040745585992259 -253 (1.00396e-076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000100 #b0100010011010101111010001101010011100011011110101010)))
(assert (= y (fp #b1 #b10100101110 #b1010011101001001010100001011100001111011010011110000)))
(assert (= z (fp #b0 #b01100000010 #b0111010000000000110000011011101110101110001001000011)))
(assert (= r (fp #b0 #b01100000010 #b0111010000000000110000011011101110101110001001000011)))
(assert  (not (= (fp.fma roundNearestTiesToEven x y z) r)))
(check-sat)
(exit)
