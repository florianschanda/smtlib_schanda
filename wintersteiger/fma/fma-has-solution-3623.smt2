(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1212211038772197380097850327729247510433197021484375p-833 {+ 545931318250887 -833 (1.95751e-251)}
; Y = -1.9522206890152269398441831071977503597736358642578125p-534 {- 4288420740223453 -534 (-3.47145e-161)}
; Z = 1.454912497166620521937829835223965346813201904296875p-833 {+ 2048743752725774 -833 (2.5401e-251)}
; 1.1212211038772197380097850327729247510433197021484375p-833 x -1.9522206890152269398441831071977503597736358642578125p-534 1.454912497166620521937829835223965346813201904296875p-833 == 1.4549124971666202998932249101926572620868682861328125p-833
; [HW: 1.4549124971666202998932249101926572620868682861328125p-833] 

; mpf : + 2048743752725773 -833
; mpfd: + 2048743752725773 -833 (2.5401e-251) class: Pos. norm. non-zero
; hwf : + 2048743752725773 -833 (2.5401e-251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010111110 #b0001111100001000010110001010010010111100110110000111)))
(assert (= y (fp #b1 #b00111101001 #b1111001111000100101111000010110111100101000111011101)))
(assert (= z (fp #b0 #b00010111110 #b0111010001110101001001010011100111011111010100001110)))
(assert (= r (fp #b0 #b00010111110 #b0111010001110101001001010011100111011111010100001101)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
