(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8013612867038173437350678796065039932727813720703125p164 {+ 3609010392188453 164 (4.21231e+049)}
; Y = 1.8816067773426154996485593073884956538677215576171875p902 {+ 3970403953927507 902 (6.36187e+271)}
; Z = -1.7196561989114460544669782393611967563629150390625p-458 {- 3241043389252456 -458 (-2.31049e-138)}
; 1.8013612867038173437350678796065039932727813720703125p164 x 1.8816067773426154996485593073884956538677215576171875p902 -1.7196561989114460544669782393611967563629150390625p-458 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010100011 #b1100110100100110000000110110011010101100011000100101)))
(assert (= y (fp #b0 #b11110000101 #b1110000110110000111110110101010010011110010101010011)))
(assert (= z (fp #b1 #b01000110101 #b1011100000111011011000110111111010110000001101101000)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
