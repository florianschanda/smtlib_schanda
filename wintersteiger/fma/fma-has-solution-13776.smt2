(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.700000783869703990802690896089188754558563232421875p-714 {- 3152523269394654 -714 (-1.97257e-215)}
; Y = 1.5696692547799646622053160172072239220142364501953125p-95 {+ 2565562243551477 -95 (3.9624e-029)}
; Z = 1.2138859748577848218786812140024267137050628662109375p-458 {+ 963256796669295 -458 (1.63095e-138)}
; -1.700000783869703990802690896089188754558563232421875p-714 x 1.5696692547799646622053160172072239220142364501953125p-95 1.2138859748577848218786812140024267137050628662109375p-458 == 1.213885974857784599834076288971118628978729248046875p-458
; [HW: 1.213885974857784599834076288971118628978729248046875p-458] 

; mpf : + 963256796669294 -458
; mpfd: + 963256796669294 -458 (1.63095e-138) class: Pos. norm. non-zero
; hwf : + 963256796669294 -458 (1.63095e-138) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110101 #b1011001100110011010000000101100111100101000011011110)))
(assert (= y (fp #b0 #b01110100000 #b1001000111010101110110000010001011010001000011110101)))
(assert (= z (fp #b0 #b01000110101 #b0011011011000001001110110011001100010110010101101111)))
(assert (= r (fp #b0 #b01000110101 #b0011011011000001001110110011001100010110010101101110)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
