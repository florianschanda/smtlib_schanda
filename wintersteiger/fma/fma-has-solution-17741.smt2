(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.10235779088310437145992182195186614990234375p-36 {- 460978508879616 -36 (-1.60414e-011)}
; Y = -1.584976552517949333065416794852353632450103759765625p989 {- 2634500183940314 989 (-8.29256e+297)}
; Z = 1.8287521585203709850731002006796188652515411376953125p-25 {+ 3732367912294837 -25 (5.45011e-008)}
; -1.10235779088310437145992182195186614990234375p-36 x -1.584976552517949333065416794852353632450103759765625p989 1.8287521585203709850731002006796188652515411376953125p-25 == 1.7472112510352053593720711432979442179203033447265625p953
; [HW: 1.7472112510352053593720711432979442179203033447265625p953] 

; mpf : + 3365140311729193 953
; mpfd: + 3365140311729193 953 (1.33024e+287) class: Pos. norm. non-zero
; hwf : + 3365140311729193 953 (1.33024e+287) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011011 #b0001101000110100000111101100010001010101011100000000)))
(assert (= y (fp #b1 #b11111011100 #b1001010111000001000001011111100111111101110011011010)))
(assert (= z (fp #b0 #b01111100110 #b1101010000101001000110011111100101010101100110110101)))
(assert (= r (fp #b0 #b11110111000 #b1011111101001001001111001000111001100110010000101001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
