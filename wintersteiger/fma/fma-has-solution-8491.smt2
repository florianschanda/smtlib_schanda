(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.18127316374654167674407290178351104259490966796875p484 {- 816381752701196 484 (-5.90022e+145)}
; Y = 1.3158632131218925831461774578201584517955780029296875p-178 {+ 1422521448915803 -178 (3.43456e-054)}
; Z = 1.3100574886690117271115241237566806375980377197265625p-373 {+ 1396374790433193 -373 (6.80929e-113)}
; -1.18127316374654167674407290178351104259490966796875p484 x 1.3158632131218925831461774578201584517955780029296875p-178 1.3100574886690117271115241237566806375980377197265625p-373 == -1.5543939008221878683713157442980445921421051025390625p306
; [HW: -1.5543939008221878683713157442980445921421051025390625p306] 

; mpf : - 2496768165159281 306
; mpfd: - 2496768165159281 306 (-2.02647e+092) class: Neg. norm. non-zero
; hwf : - 2496768165159281 306 (-2.02647e+092) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111100011 #b0010111001100111111010110000010111101111000100001100)))
(assert (= y (fp #b0 #b01101001101 #b0101000011011100011010010101101001011110001101011011)))
(assert (= z (fp #b0 #b01010001010 #b0100111101011111111011010111010110110110100110101001)))
(assert (= r (fp #b1 #b10100110001 #b1000110111101100110000100011100100100010000101110001)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
