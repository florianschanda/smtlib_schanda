(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2458434016667343513518062536604702472686767578125p-940 {+ 1107180252137800 -940 (1.3405e-283)}
; Y = 1.5304642699115047488334084846428595483303070068359375p-216 {+ 2388998688306815 -216 (1.45326e-065)}
; Z = -1.512085112539924391938939152169041335582733154296875p-415 {- 2306226322016782 -415 (-1.78701e-125)}
; 1.2458434016667343513518062536604702472686767578125p-940 x 1.5304642699115047488334084846428595483303070068359375p-216 -1.512085112539924391938939152169041335582733154296875p-415 == -1.5120851125399241698943342271377332508563995361328125p-415
; [HW: -1.5120851125399241698943342271377332508563995361328125p-415] 

; mpf : - 2306226322016781 -415
; mpfd: - 2306226322016781 -415 (-1.78701e-125) class: Neg. norm. non-zero
; hwf : - 2306226322016781 -415 (-1.78701e-125) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010011 #b0011111011101111100101111101101000011000100101001000)))
(assert (= y (fp #b0 #b01100100111 #b1000011111001100100000011010001011110111011001111111)))
(assert (= z (fp #b1 #b01001100000 #b1000001100011000000000101000101100100000101000001110)))
(assert (= r (fp #b1 #b01001100000 #b1000001100011000000000101000101100100000101000001101)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
