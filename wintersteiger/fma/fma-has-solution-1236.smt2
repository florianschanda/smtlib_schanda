(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9755937926776379054416565850260667502880096435546875p-774 {- 4393683841167979 -774 (-1.9883e-233)}
; Y = -1.366893069171424723862173777888529002666473388671875p-306 {- 1652339489605246 -306 (-1.04847e-092)}
; Z = -1.51500944003984816532693002955056726932525634765625p957 {- 2319396322255748 957 (-1.84553e+288)}
; -1.9755937926776379054416565850260667502880096435546875p-774 x -1.366893069171424723862173777888529002666473388671875p-306 -1.51500944003984816532693002955056726932525634765625p957 == -1.51500944003984816532693002955056726932525634765625p957
; [HW: -1.51500944003984816532693002955056726932525634765625p957] 

; mpf : - 2319396322255748 957
; mpfd: - 2319396322255748 957 (-1.84553e+288) class: Neg. norm. non-zero
; hwf : - 2319396322255748 957 (-1.84553e+288) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011111001 #b1111100111000000100000111100100110111011001001101011)))
(assert (= y (fp #b1 #b01011001101 #b0101110111101100101101000100010100111000011001111110)))
(assert (= z (fp #b1 #b11110111100 #b1000001111010111101010001001111000011010001110000100)))
(assert (= r (fp #b1 #b11110111100 #b1000001111010111101010001001111000011010001110000100)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
