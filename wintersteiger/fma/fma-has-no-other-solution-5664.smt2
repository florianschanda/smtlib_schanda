(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.126295202717497279110148156178183853626251220703125p-847 {- 568783027897202 -847 (-1.20018e-255)}
; Y = -1.16914590847502974924054797156713902950286865234375p-420 {- 761765450379388 -420 (-4.31788e-127)}
; Z = -1.1103538627511237990574954892508685588836669921875p-269 {- 496989615164856 -269 (-1.17056e-081)}
; -1.126295202717497279110148156178183853626251220703125p-847 x -1.16914590847502974924054797156713902950286865234375p-420 -1.1103538627511237990574954892508685588836669921875p-269 == -1.1103538627511235770128905642195604741573333740234375p-269
; [HW: -1.1103538627511235770128905642195604741573333740234375p-269] 

; mpf : - 496989615164855 -269
; mpfd: - 496989615164855 -269 (-1.17056e-081) class: Neg. norm. non-zero
; hwf : - 496989615164855 -269 (-1.17056e-081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110000 #b0010000001010100111000011110010101010000001101110010)))
(assert (= y (fp #b1 #b01001011011 #b0010101101001101001001010111000100100111000001111100)))
(assert (= z (fp #b1 #b01011110010 #b0001110001000000001001101001011110000000110110111000)))
(assert (= r (fp #b1 #b01011110010 #b0001110001000000001001101001011110000000110110110111)))
(assert  (not (= (fp.fma roundTowardPositive x y z) r)))
(check-sat)
(exit)
