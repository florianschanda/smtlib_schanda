(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3207125172858391604080452452762983739376068115234375p631 {- 1444360773341559 631 (-1.17689e+190)}
; Y = 1.945832818071521419511782369227148592472076416015625p232 {+ 4259652327021690 232 (1.34296e+070)}
; Z = -1.203276038525597169126513108494691550731658935546875p448 {- 915473891357230 448 (-8.74588e+134)}
; -1.3207125172858391604080452452762983739376068115234375p631 x 1.945832818071521419511782369227148592472076416015625p232 -1.203276038525597169126513108494691550731658935546875p448 == -1.2849428796863187063337363724713213741779327392578125p864
; [HW: -1.2849428796863187063337363724713213741779327392578125p864] 

; mpf : - 1283268646777181 864
; mpfd: - 1283268646777181 864 (-1.58052e+260) class: Neg. norm. non-zero
; hwf : - 1283268646777181 864 (-1.58052e+260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110110 #b0101001000011010001101110010110100101001000101110111)))
(assert (= y (fp #b0 #b10011100111 #b1111001000100010000110010111110100011001110001111010)))
(assert (= z (fp #b1 #b10110111111 #b0011010000001001111001100000000110000111001000101110)))
(assert (= r (fp #b1 #b11101011111 #b0100100011110010000001000011110101111011000101011101)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
