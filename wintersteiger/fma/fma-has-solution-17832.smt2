(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8596044227268471171754526949371211230754852294921875p3 {- 3871314157878659 3 (-14.8768)}
; Y = 1.50257930584893539815993790398351848125457763671875p-349 {+ 2263415974545388 -349 (1.31029e-105)}
; Z = -1.33775350957854843869654359878040850162506103515625p455 {- 1521106579881028 455 (-1.24458e+137)}
; -1.8596044227268471171754526949371211230754852294921875p3 x 1.50257930584893539815993790398351848125457763671875p-349 -1.33775350957854843869654359878040850162506103515625p455 == -1.33775350957854843869654359878040850162506103515625p455
; [HW: -1.33775350957854843869654359878040850162506103515625p455] 

; mpf : - 1521106579881028 455
; mpfd: - 1521106579881028 455 (-1.24458e+137) class: Neg. norm. non-zero
; hwf : - 1521106579881028 455 (-1.24458e+137) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000000010 #b1101110000001111000010010001001100011011110110000011)))
(assert (= y (fp #b0 #b01010100010 #b1000000010101001000010011001001001000100011111101100)))
(assert (= z (fp #b1 #b10111000110 #b0101011001110111000000111001010110111111110001000100)))
(assert (= r (fp #b1 #b10111000110 #b0101011001110111000000111001010110111111110001000100)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
