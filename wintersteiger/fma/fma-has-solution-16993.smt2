(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1245025968662520909902013954706490039825439453125p1007 {+ 560709848853512 1007 (1.54229e+303)}
; Y = 1.3895342407040687238151122073759324848651885986328125p-173 {+ 1754306261282893 -173 (1.16059e-052)}
; Z = -1.151598466975977341775205786689184606075286865234375p278 {- 682738799382950 278 (-5.59294e+083)}
; 1.1245025968662520909902013954706490039825439453125p1007 x 1.3895342407040687238151122073759324848651885986328125p-173 -1.151598466975977341775205786689184606075286865234375p278 == 1.562534862106300881379183920216746628284454345703125p834
; [HW: 1.562534862106300881379183920216746628284454345703125p834] 

; mpf : + 2533431795364850 834
; mpfd: + 2533431795364850 834 (1.78997e+251) class: Pos. norm. non-zero
; hwf : + 2533431795364850 834 (1.78997e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111101110 #b0001111111011111011001101111010111001110110000001000)))
(assert (= y (fp #b0 #b01101010010 #b0110001110111000100001000001100001111111000001001101)))
(assert (= z (fp #b1 #b10100010101 #b0010011011001111001010000011100111001001000110100110)))
(assert (= r (fp #b0 #b11101000001 #b1001000000000010010010001110001110011011001111110010)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
