(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1218742158373107287161474232561886310577392578125p653 {- 548872673030984 653 (-4.19306e+196)}
; Y = -1.2454591838880617604701228628982789814472198486328125p-578 {- 1105449889092941 -578 (-1.2589e-174)}
; Z = 1.9911784157485288293543135296204127371311187744140625p25 {+ 4463870743822753 25 (6.68129e+007)}
; -1.1218742158373107287161474232561886310577392578125p653 x -1.2454591838880617604701228628982789814472198486328125p-578 1.9911784157485288293543135296204127371311187744140625p25 == 1.3972485452817979822981442339369095861911773681640625p75
; [HW: 1.3972485452817979822981442339369095861911773681640625p75] 

; mpf : + 1789048400504577 75
; mpfd: + 1789048400504577 75 (5.27866e+022) class: Pos. norm. non-zero
; hwf : + 1789048400504577 75 (5.27866e+022) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001100 #b0001111100110011001001100000101100111111001101001000)))
(assert (= y (fp #b1 #b00110111101 #b0011111011010110011010011011111101001101010101001101)))
(assert (= z (fp #b0 #b10000011000 #b1111110110111101110111100110000000100100000110100001)))
(assert (= r (fp #b0 #b10001001010 #b0110010110110010000101001010011001011110011100000001)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
