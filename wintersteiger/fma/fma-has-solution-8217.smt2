(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.224801142763769945531748817302286624908447265625p-136 {+ 1012414342783376 -136 (1.406e-041)}
; Y = 1.4835280399503740778044402759405784308910369873046875p-589 {+ 2177616700543691 -589 (7.32198e-178)}
; Z = -1.41203171136834271237603388726711273193359375p-28 {- 1855625861783296 -28 (-5.26023e-009)}
; 1.224801142763769945531748817302286624908447265625p-136 x 1.4835280399503740778044402759405784308910369873046875p-589 -1.41203171136834271237603388726711273193359375p-28 == -1.41203171136834271237603388726711273193359375p-28
; [HW: -1.41203171136834271237603388726711273193359375p-28] 

; mpf : - 1855625861783296 -28
; mpfd: - 1855625861783296 -28 (-5.26023e-009) class: Neg. norm. non-zero
; hwf : - 1855625861783296 -28 (-5.26023e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101110111 #b0011100110001100100100010101010001000110000110010000)))
(assert (= y (fp #b0 #b00110110010 #b0111101111001000011111100101111001001001001011001011)))
(assert (= z (fp #b1 #b01111100011 #b0110100101111010111010010000010100111101111100000000)))
(assert (= r (fp #b1 #b01111100011 #b0110100101111010111010010000010100111101111100000000)))
(assert (= (fp.fma roundNearestTiesToEven x y z) r))
(check-sat)
(exit)
