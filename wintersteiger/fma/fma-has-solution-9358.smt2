(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2870967394717809373361205871333368122577667236328125p300 {- 1292968768904397 300 (-2.62186e+090)}
; Y = 1.5036398514191786635052494602859951555728912353515625p-392 {+ 2268192247180345 -392 (1.49068e-118)}
; Z = -zero {- 0 -1023 (-0)}
; -1.2870967394717809373361205871333368122577667236328125p300 x 1.5036398514191786635052494602859951555728912353515625p-392 -zero == -1.935329950101457807676297306898050010204315185546875p-92
; [HW: -1.935329950101457807676297306898050010204315185546875p-92] 

; mpf : - 4212351614745390 -92
; mpfd: - 4212351614745390 -92 (-3.90837e-028) class: Neg. norm. non-zero
; hwf : - 4212351614745390 -92 (-3.90837e-028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101011 #b0100100101111111001011000000001011010001110011001101)))
(assert (= y (fp #b0 #b01001110111 #b1000000011101110100010101001001011001110110000111001)))
(assert (= z (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (= r (fp #b1 #b01110100011 #b1110111101110001110010001001101010100111101100101110)))
(assert (= (fp.fma roundTowardPositive x y z) r))
(check-sat)
(exit)
