(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.507711564913512436447717846021987497806549072265625p32 {- 2286529614556186 32 (-6.47557e+009)}
; Y = -1.5853042170311668623838841085671447217464447021484375p918 {- 2635975853719943 918 (-3.51276e+276)}
; Z = -1.252972908261339224367247879854403436183929443359375p570 {- 1139288695380598 570 (-4.84216e+171)}
; -1.507711564913512436447717846021987497806549072265625p32 x -1.5853042170311668623838841085671447217464447021484375p918 -1.252972908261339224367247879854403436183929443359375p570 == 1.1950907509620254387527893413789570331573486328125p951
; [HW: 1.1950907509620254387527893413789570331573486328125p951] 

; mpf : + 878610633336008 951
; mpfd: + 878610633336008 951 (2.27471e+286) class: Pos. norm. non-zero
; hwf : + 878610633336008 951 (2.27471e+286) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000011111 #b1000000111111001011000101001011100011010110000011010)))
(assert (= y (fp #b1 #b11110010101 #b1001010111010110011111110100011001011100000110000111)))
(assert (= z (fp #b1 #b11000111001 #b0100000011000010110101010001111111000001101001110110)))
(assert (= r (fp #b0 #b11110110110 #b0011000111110001011101111010101100100010010011001000)))
(assert (= (fp.fma roundTowardNegative x y z) r))
(check-sat)
(exit)
