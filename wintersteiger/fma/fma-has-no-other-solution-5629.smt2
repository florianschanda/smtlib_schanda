(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7430319794050854742550882292562164366245269775390625p28 {+ 3346318545573105 28 (4.67892e+008)}
; Y = 1.9410385506028600133276995620690286159515380859375p10 {+ 4238060865836312 10 (1987.62)}
; Z = -1.099215369218018434338546285289339721202850341796875p463 {- 446826299839694 463 (-2.61801e+139)}
; 1.7430319794050854742550882292562164366245269775390625p28 x 1.9410385506028600133276995620690286159515380859375p10 -1.099215369218018434338546285289339721202850341796875p463 == -1.099215369218018434338546285289339721202850341796875p463
; [HW: -1.099215369218018434338546285289339721202850341796875p463] 

; mpf : - 446826299839694 463
; mpfd: - 446826299839694 463 (-2.61801e+139) class: Neg. norm. non-zero
; hwf : - 446826299839694 463 (-2.61801e+139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011011 #b1011111000110111010110000000001101101101010011110001)))
(assert (= y (fp #b0 #b10000001001 #b1111000011100111111001110000011100011101010100011000)))
(assert (= z (fp #b1 #b10111001110 #b0001100101100110001011011010111000001101010011001110)))
(assert (= r (fp #b1 #b10111001110 #b0001100101100110001011011010111000001101010011001110)))
(assert  (not (= (fp.fma roundTowardNegative x y z) r)))
(check-sat)
(exit)
