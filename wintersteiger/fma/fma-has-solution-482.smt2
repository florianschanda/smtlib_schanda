(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8602344344168952883222800664952956140041351318359375p660 {- 3874151478291199 660 (-8.89948e+198)}
; Y = 1.506124665055747602337987700593657791614532470703125p-492 {+ 2279382852948082 -492 (1.17789e-148)}
; Z = -1.019530076931104201065636516432277858257293701171875p617 {- 87955647189438 617 (-5.54507e+185)}
; -1.8602344344168952883222800664952956140041351318359375p660 x 1.506124665055747602337987700593657791614532470703125p-492 -1.019530076931104201065636516432277858257293701171875p617 == -1.019530076931104201065636516432277858257293701171875p617
; [HW: -1.019530076931104201065636516432277858257293701171875p617] 

; mpf : - 87955647189438 617
; mpfd: - 87955647189438 617 (-5.54507e+185) class: Neg. norm. non-zero
; hwf : - 87955647189438 617 (-5.54507e+185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun z () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010011 #b1101110000111000010100101110101010110110101011111111)))
(assert (= y (fp #b0 #b01000010011 #b1000000110010001011000101101010000011101000001110010)))
(assert (= z (fp #b1 #b11001101000 #b0000010011111111111011000101000110110101000110111110)))
(assert (= r (fp #b1 #b11001101000 #b0000010011111111111011000101000110110101000110111110)))
(assert (= (fp.fma roundTowardZero x y z) r))
(check-sat)
(exit)
