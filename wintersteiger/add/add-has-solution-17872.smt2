(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.985258399458219802369285389431752264499664306640625p-726 {+ 4437209360663690 -726 (5.62393e-219)}
; Y = 1.3224102488586420012239841526024974882602691650390625p-579 {+ 1452006676620209 -579 (6.68342e-175)}
; 1.985258399458219802369285389431752264499664306640625p-726 + 1.3224102488586420012239841526024974882602691650390625p-579 == 1.3224102488586420012239841526024974882602691650390625p-579
; [HW: 1.3224102488586420012239841526024974882602691650390625p-579] 

; mpf : + 1452006676620209 -579
; mpfd: + 1452006676620209 -579 (6.68342e-175) class: Pos. norm. non-zero
; hwf : + 1452006676620209 -579 (6.68342e-175) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100101001 #b1111110000111001111001001111101111001000010010001010)))
(assert (= y (fp #b0 #b00110111100 #b0101001010001001011110100110001010111110001110110001)))
(assert (= r (fp #b0 #b00110111100 #b0101001010001001011110100110001010111110001110110001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
