(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2591737206966968631860481764306314289569854736328125p407 {- 1167214671953869 407 (-4.16192e+122)}
; Y = 1.6799808457312852549847548289108090102672576904296875p-7 {+ 3062361483454491 -7 (0.0131249)}
; -1.2591737206966968631860481764306314289569854736328125p407 + 1.6799808457312852549847548289108090102672576904296875p-7 == -1.2591737206966968631860481764306314289569854736328125p407
; [HW: -1.2591737206966968631860481764306314289569854736328125p407] 

; mpf : - 1167214671953869 407
; mpfd: - 1167214671953869 407 (-4.16192e+122) class: Neg. norm. non-zero
; hwf : - 1167214671953869 407 (-4.16192e+122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110010110 #b0100001001011001001101010111111001011111111111001101)))
(assert (= y (fp #b0 #b01111111000 #b1010111000010011001110011000011001010010100000011011)))
(assert (= r (fp #b1 #b10110010110 #b0100001001011001001101010111111001011111111111001101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
