(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2563598131024011905765291885472834110260009765625p874 {- 1154541958760744 874 (-1.58245e+263)}
; Y = -1.6577068970428729954846858163364231586456298828125p951 {- 2962048536441288 951 (-3.15525e+286)}
; -1.2563598131024011905765291885472834110260009765625p874 + -1.6577068970428729954846858163364231586456298828125p951 == -1.6577068970428729954846858163364231586456298828125p951
; [HW: -1.6577068970428729954846858163364231586456298828125p951] 

; mpf : - 2962048536441288 951
; mpfd: - 2962048536441288 951 (-3.15525e+286) class: Neg. norm. non-zero
; hwf : - 2962048536441288 951 (-3.15525e+286) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101001 #b0100000110100000110010111111010101001000100100101000)))
(assert (= y (fp #b1 #b11110110110 #b1010100001011111011110101010110100100111000111001000)))
(assert (= r (fp #b1 #b11110110110 #b1010100001011111011110101010110100100111000111001000)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
