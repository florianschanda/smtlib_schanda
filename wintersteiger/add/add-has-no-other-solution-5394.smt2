(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2366406198814112737949244547053240239620208740234375p-505 {- 1065734607518647 -505 (-1.18058e-152)}
; Y = -1.97166970637613392369758003042079508304595947265625p-638 {- 4376011327562756 -638 (-1.72861e-192)}
; -1.2366406198814112737949244547053240239620208740234375p-505 + -1.97166970637613392369758003042079508304595947265625p-638 == -1.2366406198814112737949244547053240239620208740234375p-505
; [HW: -1.2366406198814112737949244547053240239620208740234375p-505] 

; mpf : - 1065734607518647 -505
; mpfd: - 1065734607518647 -505 (-1.18058e-152) class: Neg. norm. non-zero
; hwf : - 1065734607518647 -505 (-1.18058e-152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000110 #b0011110010010100011110101100101101001011101110110111)))
(assert (= y (fp #b1 #b00110000001 #b1111100010111111010110001000101101100110010000000100)))
(assert (= r (fp #b1 #b01000000110 #b0011110010010100011110101100101101001011101110110111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
