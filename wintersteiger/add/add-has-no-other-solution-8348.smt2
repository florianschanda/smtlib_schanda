(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.508533549846013510631337339873425662517547607421875p180 {+ 2290231505591902 180 (2.31182e+054)}
; Y = -1.6518890874262819323803341831080615520477294921875p797 {- 2935847451219896 797 (-1.37685e+240)}
; 1.508533549846013510631337339873425662517547607421875p180 + -1.6518890874262819323803341831080615520477294921875p797 == -1.6518890874262817103357292580767534673213958740234375p797
; [HW: -1.6518890874262817103357292580767534673213958740234375p797] 

; mpf : - 2935847451219895 797
; mpfd: - 2935847451219895 797 (-1.37685e+240) class: Neg. norm. non-zero
; hwf : - 2935847451219895 797 (-1.37685e+240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010110011 #b1000001000101111010000010011010110000001111001011110)))
(assert (= y (fp #b1 #b11100011100 #b1010011011100010001101000000011100011101011110111000)))
(assert (= r (fp #b1 #b11100011100 #b1010011011100010001101000000011100011101011110110111)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
