(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.11845616769768430032172545907087624073028564453125p-101 {+ 533479152703028 -101 (4.41153e-031)}
; Y = -1.2706891520990108990218914186698384582996368408203125p-735 {- 1219075564526341 -735 (-7.0306e-222)}
; 1.11845616769768430032172545907087624073028564453125p-101 + -1.2706891520990108990218914186698384582996368408203125p-735 == 1.11845616769768430032172545907087624073028564453125p-101
; [HW: 1.11845616769768430032172545907087624073028564453125p-101] 

; mpf : + 533479152703028 -101
; mpfd: + 533479152703028 -101 (4.41153e-031) class: Pos. norm. non-zero
; hwf : + 533479152703028 -101 (4.41153e-031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011010 #b0001111001010011001001001011011001000101011000110100)))
(assert (= y (fp #b1 #b00100100000 #b0100010101001011111000100101111110100101101100000101)))
(assert (= r (fp #b0 #b01110011010 #b0001111001010011001001001011011001000101011000110100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
