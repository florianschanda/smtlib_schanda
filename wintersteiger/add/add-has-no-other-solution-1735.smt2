(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.82656179348581648724803017103113234043121337890625p-668 {+ 3722503385141412 -668 (1.49141e-201)}
; Y = -1.8382460835343634730776329888612963259220123291015625p-252 {- 3775124749450137 -252 (-2.54006e-076)}
; 1.82656179348581648724803017103113234043121337890625p-668 + -1.8382460835343634730776329888612963259220123291015625p-252 == -1.8382460835343632510330280638299882411956787109375p-252
; [HW: -1.8382460835343632510330280638299882411956787109375p-252] 

; mpf : - 3775124749450136 -252
; mpfd: - 3775124749450136 -252 (-2.54006e-076) class: Neg. norm. non-zero
; hwf : - 3775124749450136 -252 (-2.54006e-076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100011 #b1101001110011001100011011011111100100101000010100100)))
(assert (= y (fp #b1 #b01100000011 #b1101011010010111010010111001101011000111101110011001)))
(assert (= r (fp #b1 #b01100000011 #b1101011010010111010010111001101011000111101110011000)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
