(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.27568631965765444391536220791749656200408935546875p-670 {+ 1241580806481356 -670 (2.60403e-202)}
; Y = -1.4610020039074227415909490446210838854312896728515625p-868 {- 2076168453014521 -868 (-7.4236e-262)}
; 1.27568631965765444391536220791749656200408935546875p-670 + -1.4610020039074227415909490446210838854312896728515625p-868 == 1.2756863196576542218707572828861884772777557373046875p-670
; [HW: 1.2756863196576542218707572828861884772777557373046875p-670] 

; mpf : + 1241580806481355 -670
; mpfd: + 1241580806481355 -670 (2.60403e-202) class: Pos. norm. non-zero
; hwf : + 1241580806481355 -670 (2.60403e-202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100001 #b0100011010010011011000001110111011100010010111001100)))
(assert (= y (fp #b1 #b00010011011 #b0111011000000100001110100011001000101100001111111001)))
(assert (= r (fp #b0 #b00101100001 #b0100011010010011011000001110111011100010010111001011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
