(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.06442653711161927532202753354795277118682861328125p-324 {+ 290151328528660 -324 (3.11456e-098)}
; Y = -1.442607027605770309008903495850972831249237060546875p-466 {- 1993324844596910 -466 (-7.57129e-141)}
; 1.06442653711161927532202753354795277118682861328125p-324 + -1.442607027605770309008903495850972831249237060546875p-466 == 1.06442653711161927532202753354795277118682861328125p-324
; [HW: 1.06442653711161927532202753354795277118682861328125p-324] 

; mpf : + 290151328528660 -324
; mpfd: + 290151328528660 -324 (3.11456e-098) class: Pos. norm. non-zero
; hwf : + 290151328528660 -324 (3.11456e-098) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010111011 #b0001000001111110010000011110110111100011100100010100)))
(assert (= y (fp #b1 #b01000101101 #b0111000101001110101100011011010010001011111010101110)))
(assert (= r (fp #b0 #b01010111011 #b0001000001111110010000011110110111100011100100010100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
