(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.699136252523896661870139723760075867176055908203125p725 {- 3148629766347826 725 (-2.99899e+218)}
; Y = -1.82000099452457231308244445244781672954559326171875p-849 {- 3692956173384300 -849 (-4.84848e-256)}
; -1.699136252523896661870139723760075867176055908203125p725 + -1.82000099452457231308244445244781672954559326171875p-849 == -1.6991362525238968839147446487913839519023895263671875p725
; [HW: -1.6991362525238968839147446487913839519023895263671875p725] 

; mpf : - 3148629766347827 725
; mpfd: - 3148629766347827 725 (-2.99899e+218) class: Neg. norm. non-zero
; hwf : - 3148629766347827 725 (-2.99899e+218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010100 #b1011001011111010100101111110110000001001110000110010)))
(assert (= y (fp #b1 #b00010101110 #b1101000111101011100101011100111000101011101001101100)))
(assert (= r (fp #b1 #b11011010100 #b1011001011111010100101111110110000001001110000110011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
