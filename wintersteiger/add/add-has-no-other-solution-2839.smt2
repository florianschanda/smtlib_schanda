(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0400783961691593137999234386370517313480377197265625p-849 {+ 180497050053033 -849 (2.77077e-256)}
; Y = -1.87736469784498805069006266421638429164886474609375p-355 {- 3951299326282716 -355 (-2.558e-107)}
; 1.0400783961691593137999234386370517313480377197265625p-849 + -1.87736469784498805069006266421638429164886474609375p-355 == -1.8773646978449878286454577391850762069225311279296875p-355
; [HW: -1.8773646978449878286454577391850762069225311279296875p-355] 

; mpf : - 3951299326282715 -355
; mpfd: - 3951299326282715 -355 (-2.558e-107) class: Neg. norm. non-zero
; hwf : - 3951299326282715 -355 (-2.558e-107) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101110 #b0000101001000010100100111110100011010010100110101001)))
(assert (= y (fp #b1 #b01010011100 #b1110000010011010111110010000101111101000101111011100)))
(assert (= r (fp #b1 #b01010011100 #b1110000010011010111110010000101111101000101111011011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
