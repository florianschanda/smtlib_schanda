(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.232939437523439263344471328309737145900726318359375p361 {+ 1049065964030454 361 (5.79122e+108)}
; Y = 1.298318511205688974285976655664853751659393310546875p-662 {+ 1343507135903662 -662 (6.7846e-200)}
; 1.232939437523439263344471328309737145900726318359375p361 + 1.298318511205688974285976655664853751659393310546875p-662 == 1.232939437523439263344471328309737145900726318359375p361
; [HW: 1.232939437523439263344471328309737145900726318359375p361] 

; mpf : + 1049065964030454 361
; mpfd: + 1049065964030454 361 (5.79122e+108) class: Pos. norm. non-zero
; hwf : + 1049065964030454 361 (5.79122e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101000 #b0011101110100001111010110100001000011100100111110110)))
(assert (= y (fp #b0 #b00101101001 #b0100110001011110100110100001100101101011011110101110)))
(assert (= r (fp #b0 #b10101101000 #b0011101110100001111010110100001000011100100111110110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
