(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6386541211651179938968425631173886358737945556640625p-765 {+ 2876242462097857 -765 (8.44385e-231)}
; Y = -1.6398583773210528846675515524111688137054443359375p-925 {- 2881665949672984 -925 (-5.78176e-279)}
; 1.6386541211651179938968425631173886358737945556640625p-765 + -1.6398583773210528846675515524111688137054443359375p-925 == 1.6386541211651177718522376380860805511474609375p-765
; [HW: 1.6386541211651177718522376380860805511474609375p-765] 

; mpf : + 2876242462097856 -765
; mpfd: + 2876242462097856 -765 (8.44385e-231) class: Pos. norm. non-zero
; hwf : + 2876242462097856 -765 (8.44385e-231) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000010 #b1010001101111110110101100010001111011100000111000001)))
(assert (= y (fp #b1 #b00001100010 #b1010001111001101110000100011010010101010011000011000)))
(assert (= r (fp #b0 #b00100000010 #b1010001101111110110101100010001111011100000111000000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
