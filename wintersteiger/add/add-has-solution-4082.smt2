(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.634255169872646629158907671808265149593353271484375p-166 {+ 2856431346696262 -166 (1.74719e-050)}
; Y = 1.07061279319813440480402277898974716663360595703125p-377 {+ 318011749134708 -377 (3.47796e-114)}
; 1.634255169872646629158907671808265149593353271484375p-166 + 1.07061279319813440480402277898974716663360595703125p-377 == 1.634255169872646629158907671808265149593353271484375p-166
; [HW: 1.634255169872646629158907671808265149593353271484375p-166] 

; mpf : + 2856431346696262 -166
; mpfd: + 2856431346696262 -166 (1.74719e-050) class: Pos. norm. non-zero
; hwf : + 2856431346696262 -166 (1.74719e-050) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011001 #b1010001001011110100010111111101111101100000001000110)))
(assert (= y (fp #b0 #b01010000110 #b0001001000010011101011100001010101110111000101110100)))
(assert (= r (fp #b0 #b01101011001 #b1010001001011110100010111111101111101100000001000110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
