(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3810565585868277427294970038929022848606109619140625p586 {- 1716126175258721 586 (-3.49775e+176)}
; Y = -1.9054464516287297204399919792194850742816925048828125p177 {- 4077768302159085 177 (-3.65011e+053)}
; -1.3810565585868277427294970038929022848606109619140625p586 + -1.9054464516287297204399919792194850742816925048828125p177 == -1.381056558586827964774101928924210369586944580078125p586
; [HW: -1.381056558586827964774101928924210369586944580078125p586] 

; mpf : - 1716126175258722 586
; mpfd: - 1716126175258722 586 (-3.49775e+176) class: Neg. norm. non-zero
; hwf : - 1716126175258722 586 (-3.49775e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001001 #b0110000110001100111011000011000100001110100001100001)))
(assert (= y (fp #b1 #b10010110000 #b1110011111001011010101101011001000000110010011101101)))
(assert (= r (fp #b1 #b11001001001 #b0110000110001100111011000011000100001110100001100010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
