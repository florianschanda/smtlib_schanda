(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.091134066387590362268156241043470799922943115234375p-42 {- 410431347423910 -42 (-2.48095e-013)}
; Y = -1.9157143632037045843929945476702414453029632568359375p-771 {- 4124010864902015 -771 (-1.54243e-232)}
; -1.091134066387590362268156241043470799922943115234375p-42 + -1.9157143632037045843929945476702414453029632568359375p-771 == -1.091134066387590362268156241043470799922943115234375p-42
; [HW: -1.091134066387590362268156241043470799922943115234375p-42] 

; mpf : - 410431347423910 -42
; mpfd: - 410431347423910 -42 (-2.48095e-013) class: Neg. norm. non-zero
; hwf : - 410431347423910 -42 (-2.48095e-013) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010101 #b0001011101010100100011111110101010101111101010100110)))
(assert (= y (fp #b1 #b00011111100 #b1110101001101100010000011010101001101111111101111111)))
(assert (= r (fp #b1 #b01111010101 #b0001011101010100100011111110101010101111101010100110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
