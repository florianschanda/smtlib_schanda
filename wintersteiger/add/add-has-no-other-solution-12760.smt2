(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6956295460008288245035146246664226055145263671875p160 {+ 3132836964157240 160 (2.47817e+048)}
; Y = -1.8373038780976889139395780148333869874477386474609375p279 {- 3770881433396623 279 (-1.78464e+084)}
; 1.6956295460008288245035146246664226055145263671875p160 + -1.8373038780976889139395780148333869874477386474609375p279 == -1.837303878097688691894973089802078902721405029296875p279
; [HW: -1.837303878097688691894973089802078902721405029296875p279] 

; mpf : - 3770881433396622 279
; mpfd: - 3770881433396622 279 (-1.78464e+084) class: Neg. norm. non-zero
; hwf : - 3770881433396622 279 (-1.78464e+084) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011111 #b1011001000010100110001110010011000110100011100111000)))
(assert (= y (fp #b1 #b10100010110 #b1101011001011001100011000000010100111110010110001111)))
(assert (= r (fp #b1 #b10100010110 #b1101011001011001100011000000010100111110010110001110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
