(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1703043609908918565309932091622613370418548583984375p794 {- 766982656698151 794 (-1.21931e+239)}
; Y = -1.5133172851297509442503042009775526821613311767578125p167 {- 2311775534033181 167 (-2.831e+050)}
; -1.1703043609908918565309932091622613370418548583984375p794 + -1.5133172851297509442503042009775526821613311767578125p167 == -1.1703043609908918565309932091622613370418548583984375p794
; [HW: -1.1703043609908918565309932091622613370418548583984375p794] 

; mpf : - 766982656698151 794
; mpfd: - 766982656698151 794 (-1.21931e+239) class: Neg. norm. non-zero
; hwf : - 766982656698151 794 (-1.21931e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100011001 #b0010101110011001000100010000110011010010011100100111)))
(assert (= y (fp #b1 #b10010100110 #b1000001101101000110000101111100000011010100100011101)))
(assert (= r (fp #b1 #b11100011001 #b0010101110011001000100010000110011010010011100100111)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
