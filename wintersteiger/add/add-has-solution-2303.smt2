(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.392398424892780983697093688533641397953033447265625p-180 {- 1767205400127898 -180 (-9.08582e-055)}
; Y = -1.8253253073490374180920525759574957191944122314453125p-634 {- 3716934746636565 -634 (-2.56049e-191)}
; -1.392398424892780983697093688533641397953033447265625p-180 + -1.8253253073490374180920525759574957191944122314453125p-634 == -1.392398424892780983697093688533641397953033447265625p-180
; [HW: -1.392398424892780983697093688533641397953033447265625p-180] 

; mpf : - 1767205400127898 -180
; mpfd: - 1767205400127898 -180 (-9.08582e-055) class: Neg. norm. non-zero
; hwf : - 1767205400127898 -180 (-9.08582e-055) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001011 #b0110010001110100001110010010000111101010100110011010)))
(assert (= y (fp #b1 #b00110000101 #b1101001101001000100001001111001110100000000100010101)))
(assert (= r (fp #b1 #b01101001011 #b0110010001110100001110010010000111101010100110011010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
