(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2073372733897589359486346438643522560596466064453125p704 {- 933764067178133 704 (-1.01612e+212)}
; Y = 1.1890750975464303706985447206534445285797119140625p403 {+ 851518538855144 403 (2.45639e+121)}
; -1.2073372733897589359486346438643522560596466064453125p704 + 1.1890750975464303706985447206534445285797119140625p403 == -1.2073372733897589359486346438643522560596466064453125p704
; [HW: -1.2073372733897589359486346438643522560596466064453125p704] 

; mpf : - 933764067178133 704
; mpfd: - 933764067178133 704 (-1.01612e+212) class: Neg. norm. non-zero
; hwf : - 933764067178133 704 (-1.01612e+212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010111111 #b0011010100010100000011100011100001110011011010010101)))
(assert (= y (fp #b0 #b10110010010 #b0011000001100111001110011100000001110011001011101000)))
(assert (= r (fp #b1 #b11010111111 #b0011010100010100000011100011100001110011011010010101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
