(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.514294507604258654964723973535001277923583984375p-430 {- 2316176552805232 -430 (-5.4615e-130)}
; Y = 1.508063156310851748997947652242146432399749755859375p658 {+ 2288113041442230 658 (1.80367e+198)}
; -1.514294507604258654964723973535001277923583984375p-430 + 1.508063156310851748997947652242146432399749755859375p658 == 1.5080631563108515269533427272108383476734161376953125p658
; [HW: 1.5080631563108515269533427272108383476734161376953125p658] 

; mpf : + 2288113041442229 658
; mpfd: + 2288113041442229 658 (1.80367e+198) class: Pos. norm. non-zero
; hwf : + 2288113041442229 658 (1.80367e+198) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001010001 #b1000001110101000110011100000101010101100001101110000)))
(assert (= y (fp #b0 #b11010010001 #b1000001000010000011011010101000010101000010110110110)))
(assert (= r (fp #b0 #b11010010001 #b1000001000010000011011010101000010101000010110110101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
