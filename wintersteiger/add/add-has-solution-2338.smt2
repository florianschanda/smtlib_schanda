(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.238799775291522298203972241026349365711212158203125p727 {- 1075458579019058 727 (-8.74597e+218)}
; Y = -1.3878720860524682567671561628230847418308258056640625p460 {- 1746820582213313 460 (-4.13188e+138)}
; -1.238799775291522298203972241026349365711212158203125p727 + -1.3878720860524682567671561628230847418308258056640625p460 == -1.238799775291522298203972241026349365711212158203125p727
; [HW: -1.238799775291522298203972241026349365711212158203125p727] 

; mpf : - 1075458579019058 727
; mpfd: - 1075458579019058 727 (-8.74597e+218) class: Neg. norm. non-zero
; hwf : - 1075458579019058 727 (-8.74597e+218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010110 #b0011110100100001111110110110100100101011010100110010)))
(assert (= y (fp #b1 #b10111001011 #b0110001101001011100101011100010010100000011011000001)))
(assert (= r (fp #b1 #b11011010110 #b0011110100100001111110110110100100101011010100110010)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
