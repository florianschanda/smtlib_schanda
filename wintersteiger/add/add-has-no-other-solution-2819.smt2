(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1844200249726111184855881219846196472644805908203125p265 {- 830553955746309 265 (-7.0219e+079)}
; Y = -1.17393546832428530279912592959590256214141845703125p864 {- 783335710331764 864 (-1.44398e+260)}
; -1.1844200249726111184855881219846196472644805908203125p265 + -1.17393546832428530279912592959590256214141845703125p864 == -1.17393546832428530279912592959590256214141845703125p864
; [HW: -1.17393546832428530279912592959590256214141845703125p864] 

; mpf : - 783335710331764 864
; mpfd: - 783335710331764 864 (-1.44398e+260) class: Neg. norm. non-zero
; hwf : - 783335710331764 864 (-1.44398e+260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001000 #b0010111100110110001001101001011111111100001000000101)))
(assert (= y (fp #b1 #b11101011111 #b0010110010000111000010001110110000010001001101110100)))
(assert (= r (fp #b1 #b11101011111 #b0010110010000111000010001110110000010001001101110100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
