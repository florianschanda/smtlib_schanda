(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.99675621893941634965585762984119355678558349609375p-351 {+ 4488990936194780 -351 (4.35308e-106)}
; Y = -1.4744042261967666984645575212198309600353240966796875p717 {- 2136526696322747 717 (-1.01654e+216)}
; 1.99675621893941634965585762984119355678558349609375p-351 + -1.4744042261967666984645575212198309600353240966796875p717 == -1.474404226196766476419952596188522875308990478515625p717
; [HW: -1.474404226196766476419952596188522875308990478515625p717] 

; mpf : - 2136526696322746 717
; mpfd: - 2136526696322746 717 (-1.01654e+216) class: Neg. norm. non-zero
; hwf : - 2136526696322746 717 (-1.01654e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100000 #b1111111100101011011010100110001001101101111011011100)))
(assert (= y (fp #b1 #b11011001100 #b0111100101110010100011100010110010011001011010111011)))
(assert (= r (fp #b1 #b11011001100 #b0111100101110010100011100010110010011001011010111010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
