(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4746704152787828423498694974114187061786651611328125p873 {+ 2137725505373325 873 (9.28712e+262)}
; Y = 1.1710451338521605801901159793487749993801116943359375p883 {+ 770318801080127 883 (7.55196e+265)}
; 1.4746704152787828423498694974114187061786651611328125p873 + 1.1710451338521605801901159793487749993801116943359375p883 == 1.1724852416795812359850970096886157989501953125p883
; [HW: 1.1724852416795812359850970096886157989501953125p883] 

; mpf : + 776804470155072 883
; mpfd: + 776804470155072 883 (7.56125e+265) class: Pos. norm. non-zero
; hwf : + 776804470155072 883 (7.56125e+265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101101000 #b0111100110000100000000000001011000000000010010001101)))
(assert (= y (fp #b0 #b11101110010 #b0010101111001001100111010010100000001000111100111111)))
(assert (= r (fp #b0 #b11101110010 #b0010110000100111111111100010100000001110011101000000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
