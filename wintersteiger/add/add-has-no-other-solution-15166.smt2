(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9421179711470113460336506250314414501190185546875p-835 {- 4242922143796728 -835 (-8.47675e-252)}
; Y = -1.318661577067879786540061104460619390010833740234375p-467 {- 1435124159740198 -467 (-3.46039e-141)}
; -1.9421179711470113460336506250314414501190185546875p-835 + -1.318661577067879786540061104460619390010833740234375p-467 == -1.318661577067879786540061104460619390010833740234375p-467
; [HW: -1.318661577067879786540061104460619390010833740234375p-467] 

; mpf : - 1435124159740198 -467
; mpfd: - 1435124159740198 -467 (-3.46039e-141) class: Neg. norm. non-zero
; hwf : - 1435124159740198 -467 (-3.46039e-141) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111100 #b1111000100101110101001001011001100001100110111111000)))
(assert (= y (fp #b1 #b01000101100 #b0101000110010011110011100001101111111111100100100110)))
(assert (= r (fp #b1 #b01000101100 #b0101000110010011110011100001101111111111100100100110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
