(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.17750686020134054388108779676258563995361328125p-442 {- 799419829458464 -442 (-1.03682e-133)}
; Y = 1.9824249110355307568198668377590365707874298095703125p-961 {+ 4424448463259109 -961 (1.01712e-289)}
; -1.17750686020134054388108779676258563995361328125p-442 + 1.9824249110355307568198668377590365707874298095703125p-961 == -1.1775068602013403218364828717312775552272796630859375p-442
; [HW: -1.1775068602013403218364828717312775552272796630859375p-442] 

; mpf : - 799419829458463 -442
; mpfd: - 799419829458463 -442 (-1.03682e-133) class: Neg. norm. non-zero
; hwf : - 799419829458463 -442 (-1.03682e-133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001000101 #b0010110101110001000101101110111101100001011000100000)))
(assert (= y (fp #b0 #b00000111110 #b1111101110000000001100101110111110101100010111100101)))
(assert (= r (fp #b1 #b01001000101 #b0010110101110001000101101110111101100001011000011111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
