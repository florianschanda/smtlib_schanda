(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.069218436388783999291263171471655368804931640625p-361 {+ 311732124327696 -361 (2.27634e-109)}
; Y = 1.943603115907967637809861116693355143070220947265625p527 {+ 4249610641188762 527 (8.53916e+158)}
; 1.069218436388783999291263171471655368804931640625p-361 + 1.943603115907967637809861116693355143070220947265625p527 == 1.9436031159079678598544660417246632277965545654296875p527
; [HW: 1.9436031159079678598544660417246632277965545654296875p527] 

; mpf : + 4249610641188763 527
; mpfd: + 4249610641188763 527 (8.53916e+158) class: Pos. norm. non-zero
; hwf : + 4249610641188763 527 (8.53916e+158) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010110 #b0001000110111000010011001010100010010001111100010000)))
(assert (= y (fp #b0 #b11000001110 #b1111000110001111111110010100101100111010011110011010)))
(assert (= r (fp #b0 #b11000001110 #b1111000110001111111110010100101100111010011110011011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
