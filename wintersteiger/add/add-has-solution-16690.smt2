(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8900076355502049008094900273135863244533538818359375p325 {- 4008238055820799 325 (-1.29185e+098)}
; Y = 1.895689260742276172067022343981079757213592529296875p-308 {+ 4033825820918670 -308 (3.6352e-093)}
; -1.8900076355502049008094900273135863244533538818359375p325 + 1.895689260742276172067022343981079757213592529296875p-308 == -1.890007635550204678764885102282278239727020263671875p325
; [HW: -1.890007635550204678764885102282278239727020263671875p325] 

; mpf : - 4008238055820798 325
; mpfd: - 4008238055820798 325 (-1.29185e+098) class: Neg. norm. non-zero
; hwf : - 4008238055820798 325 (-1.29185e+098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000100 #b1110001111010111100010100101011111100000110111111111)))
(assert (= y (fp #b0 #b01011001011 #b1110010101001011111001000011001001000100001110001110)))
(assert (= r (fp #b1 #b10101000100 #b1110001111010111100010100101011111100000110111111110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
