(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9575576438524924238748781135655008256435394287109375p130 {- 4312456248039855 130 (-2.66449e+039)}
; Y = -1.98062607892899489314686434227041900157928466796875p-314 {- 4416347243654412 -314 (-5.9345e-095)}
; -1.9575576438524924238748781135655008256435394287109375p130 + -1.98062607892899489314686434227041900157928466796875p-314 == -1.9575576438524924238748781135655008256435394287109375p130
; [HW: -1.9575576438524924238748781135655008256435394287109375p130] 

; mpf : - 4312456248039855 130
; mpfd: - 4312456248039855 130 (-2.66449e+039) class: Neg. norm. non-zero
; hwf : - 4312456248039855 130 (-2.66449e+039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000001 #b1111010100100010011111110110110001100001100110101111)))
(assert (= y (fp #b1 #b01011000101 #b1111101100001010010011111000101010011010110100001100)))
(assert (= r (fp #b1 #b10010000001 #b1111010100100010011111110110110001100001100110101111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
