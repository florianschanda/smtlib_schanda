(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.214272103427826987598336927476339042186737060546875p515 {- 964995765153454 515 (-1.30246e+155)}
; Y = -1.8324357301245679519041686944547109305858612060546875p-375 {- 3748957243998891 -375 (-2.38112e-113)}
; -1.214272103427826987598336927476339042186737060546875p515 + -1.8324357301245679519041686944547109305858612060546875p-375 == -1.214272103427826987598336927476339042186737060546875p515
; [HW: -1.214272103427826987598336927476339042186737060546875p515] 

; mpf : - 964995765153454 515
; mpfd: - 964995765153454 515 (-1.30246e+155) class: Neg. norm. non-zero
; hwf : - 964995765153454 515 (-1.30246e+155) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000010 #b0011011011011010100010010101110010101010111010101110)))
(assert (= y (fp #b1 #b01010001000 #b1101010100011010100000100000110011101000001010101011)))
(assert (= r (fp #b1 #b11000000010 #b0011011011011010100010010101110010101010111010101110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
