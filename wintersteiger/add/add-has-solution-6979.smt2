(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1944575459393933503093876424827612936496734619140625p120 {- 875758931432033 120 (-1.58771e+036)}
; Y = -1.4861597863525000118301022666855715215206146240234375p-303 {- 2189469032659639 -303 (-9.11962e-092)}
; -1.1944575459393933503093876424827612936496734619140625p120 + -1.4861597863525000118301022666855715215206146240234375p-303 == -1.1944575459393933503093876424827612936496734619140625p120
; [HW: -1.1944575459393933503093876424827612936496734619140625p120] 

; mpf : - 875758931432033 120
; mpfd: - 875758931432033 120 (-1.58771e+036) class: Neg. norm. non-zero
; hwf : - 875758931432033 120 (-1.58771e+036) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001110111 #b0011000111000111111110000100000001000101001001100001)))
(assert (= y (fp #b1 #b01011010000 #b0111110001110100111101111011111100000011101010110111)))
(assert (= r (fp #b1 #b10001110111 #b0011000111000111111110000100000001000101001001100001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
