(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6784111960550884834475482421112246811389923095703125p672 {- 3055292409757669 672 (-3.28894e+202)}
; Y = 1.29954099605807815720481812604703009128570556640625p-914 {+ 1349012718229348 -914 (9.3837e-276)}
; -1.6784111960550884834475482421112246811389923095703125p672 + 1.29954099605807815720481812604703009128570556640625p-914 == -1.6784111960550884834475482421112246811389923095703125p672
; [HW: -1.6784111960550884834475482421112246811389923095703125p672] 

; mpf : - 3055292409757669 672
; mpfd: - 3055292409757669 672 (-3.28894e+202) class: Neg. norm. non-zero
; hwf : - 3055292409757669 672 (-3.28894e+202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011111 #b1010110110101100010110110010110001001011111111100101)))
(assert (= y (fp #b0 #b00001101101 #b0100110010101110101101111111110111100001011101100100)))
(assert (= r (fp #b1 #b11010011111 #b1010110110101100010110110010110001001011111111100101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
