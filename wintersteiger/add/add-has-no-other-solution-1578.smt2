(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.836717699306025242123041607555933296680450439453125p-641 {+ 3768241518808914 -641 (2.01287e-193)}
; Y = 1.8529560192958591802181445018504746258258819580078125p-100 {+ 3841372410664253 -100 (1.46172e-030)}
; 1.836717699306025242123041607555933296680450439453125p-641 + 1.8529560192958591802181445018504746258258819580078125p-100 == 1.8529560192958591802181445018504746258258819580078125p-100
; [HW: 1.8529560192958591802181445018504746258258819580078125p-100] 

; mpf : + 3841372410664253 -100
; mpfd: + 3841372410664253 -100 (1.46172e-030) class: Pos. norm. non-zero
; hwf : + 3841372410664253 -100 (1.46172e-030) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101111110 #b1101011000110011001000011001001010000000111101010010)))
(assert (= y (fp #b0 #b01110011011 #b1101101001011011010100110101111111001101010100111101)))
(assert (= r (fp #b0 #b01110011011 #b1101101001011011010100110101111111001101010100111101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
