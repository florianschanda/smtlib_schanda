(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.67322461615794537692636367864906787872314453125p-664 {+ 3031934130465568 -664 (2.18593e-200)}
; Y = 1.8648018721643910833307700158911757171154022216796875p-423 {+ 3894721389228859 -423 (8.60884e-128)}
; 1.67322461615794537692636367864906787872314453125p-664 + 1.8648018721643910833307700158911757171154022216796875p-423 == 1.86480187216439130537537494092248380184173583984375p-423
; [HW: 1.86480187216439130537537494092248380184173583984375p-423] 

; mpf : + 3894721389228860 -423
; mpfd: + 3894721389228860 -423 (8.60884e-128) class: Pos. norm. non-zero
; hwf : + 3894721389228860 -423 (8.60884e-128) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100111 #b1010110001011000011100101100110101000010101100100000)))
(assert (= y (fp #b0 #b01001011000 #b1101110101100011101001111100111001110111001100111011)))
(assert (= r (fp #b0 #b01001011000 #b1101110101100011101001111100111001110111001100111100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
