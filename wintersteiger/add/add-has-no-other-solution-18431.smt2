(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3379339500532168028001933635096065700054168701171875p-984 {- 1521919211535507 -984 (-8.18312e-297)}
; Y = -1.2151349805000373205388086716993711888790130615234375p-166 {- 968881818014327 -166 (-1.29911e-050)}
; -1.3379339500532168028001933635096065700054168701171875p-984 + -1.2151349805000373205388086716993711888790130615234375p-166 == -1.2151349805000373205388086716993711888790130615234375p-166
; [HW: -1.2151349805000373205388086716993711888790130615234375p-166] 

; mpf : - 968881818014327 -166
; mpfd: - 968881818014327 -166 (-1.29911e-050) class: Neg. norm. non-zero
; hwf : - 968881818014327 -166 (-1.29911e-050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100111 #b0101011010000010110101101101111110101111110010010011)))
(assert (= y (fp #b1 #b01101011001 #b0011011100010011000101100000100101111001001001110111)))
(assert (= r (fp #b1 #b01101011001 #b0011011100010011000101100000100101111001001001110111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
