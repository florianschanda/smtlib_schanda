(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1313069325365712192166256500058807432651519775390625p-690 {- 591353852442865 -690 (-2.20234e-208)}
; Y = -1.6094480207815922145897502559819258749485015869140625p877 {- 2744709879293665 877 (-1.62175e+264)}
; -1.1313069325365712192166256500058807432651519775390625p-690 + -1.6094480207815922145897502559819258749485015869140625p877 == -1.609448020781592436634355181013233959674835205078125p877
; [HW: -1.609448020781592436634355181013233959674835205078125p877] 

; mpf : - 2744709879293666 877
; mpfd: - 2744709879293666 877 (-1.62175e+264) class: Neg. norm. non-zero
; hwf : - 2744709879293666 877 (-1.62175e+264) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001101 #b0010000110011101010101001100010011111011100011110001)))
(assert (= y (fp #b1 #b11101101100 #b1001110000000100110010010001010111011110011011100001)))
(assert (= r (fp #b1 #b11101101100 #b1001110000000100110010010001010111011110011011100010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
