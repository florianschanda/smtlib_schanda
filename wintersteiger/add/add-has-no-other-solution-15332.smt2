(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5465610305464008167319889253121800720691680908203125p-814 {- 2461492053504005 -814 (-1.41563e-245)}
; Y = 1.2731183479190750773568652221001684665679931640625p-753 {+ 1230015689916392 -753 (2.68709e-227)}
; -1.5465610305464008167319889253121800720691680908203125p-814 + 1.2731183479190750773568652221001684665679931640625p-753 == 1.2731183479190748553122602970688603818416595458984375p-753
; [HW: 1.2731183479190748553122602970688603818416595458984375p-753] 

; mpf : + 1230015689916391 -753
; mpfd: + 1230015689916391 -753 (2.68709e-227) class: Pos. norm. non-zero
; hwf : + 1230015689916391 -753 (2.68709e-227) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010001 #b1000101111101011011011000111011101110111000000000101)))
(assert (= y (fp #b0 #b00100001110 #b0100010111101011000101011000010000111111111111101000)))
(assert (= r (fp #b0 #b00100001110 #b0100010111101011000101011000010000111111111111100111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
