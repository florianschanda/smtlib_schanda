(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.314278338667136392103884645621292293071746826171875p146 {- 1415383808911934 146 (-1.17238e+044)}
; Y = 1.4073516390904436956788003953988663852214813232421875p-720 {+ 1834548690016483 -720 (2.55156e-217)}
; -1.314278338667136392103884645621292293071746826171875p146 + 1.4073516390904436956788003953988663852214813232421875p-720 == -1.314278338667136392103884645621292293071746826171875p146
; [HW: -1.314278338667136392103884645621292293071746826171875p146] 

; mpf : - 1415383808911934 146
; mpfd: - 1415383808911934 146 (-1.17238e+044) class: Neg. norm. non-zero
; hwf : - 1415383808911934 146 (-1.17238e+044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010010001 #b0101000001110100100010111001001001101010101000111110)))
(assert (= y (fp #b0 #b00100101111 #b0110100001001000001100100110111111011101100011100011)))
(assert (= r (fp #b1 #b10010010001 #b0101000001110100100010111001001001101010101000111110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
