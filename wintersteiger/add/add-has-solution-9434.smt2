(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9643152770165854814621297919075004756450653076171875p61 {+ 4342889922239571 61 (4.5294e+018)}
; Y = -1.3377067257212400530619333949289284646511077880859375p923 {- 1520895884118687 923 (-9.48521e+277)}
; 1.9643152770165854814621297919075004756450653076171875p61 + -1.3377067257212400530619333949289284646511077880859375p923 == -1.3377067257212400530619333949289284646511077880859375p923
; [HW: -1.3377067257212400530619333949289284646511077880859375p923] 

; mpf : - 1520895884118687 923
; mpfd: - 1520895884118687 923 (-9.48521e+277) class: Neg. norm. non-zero
; hwf : - 1520895884118687 923 (-9.48521e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000111100 #b1111011011011101010111011011000111010001110001010011)))
(assert (= y (fp #b1 #b11110011010 #b0101011001110011111100101010111010011100101010011111)))
(assert (= r (fp #b1 #b11110011010 #b0101011001110011111100101010111010011100101010011111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
