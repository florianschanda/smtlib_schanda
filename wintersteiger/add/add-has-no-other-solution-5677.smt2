(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.782147348066553060874639413668774068355560302734375p144 {+ 3522478505301350 144 (3.97432e+043)}
; Y = 1.195558202155707849811960841179825365543365478515625p322 {+ 880715846357690 322 (1.02148e+097)}
; 1.782147348066553060874639413668774068355560302734375p144 + 1.195558202155707849811960841179825365543365478515625p322 == 1.1955582021557080718565657662111334502696990966796875p322
; [HW: 1.1955582021557080718565657662111334502696990966796875p322] 

; mpf : + 880715846357691 322
; mpfd: + 880715846357691 322 (1.02148e+097) class: Pos. norm. non-zero
; hwf : + 880715846357691 322 (1.02148e+097) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001111 #b1100100000111010110011110000000010011001010101100110)))
(assert (= y (fp #b0 #b10101000001 #b0011001000010000000110100011001010111001001010111010)))
(assert (= r (fp #b0 #b10101000001 #b0011001000010000000110100011001010111001001010111011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
