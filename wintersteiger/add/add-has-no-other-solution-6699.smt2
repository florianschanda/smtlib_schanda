(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7719849460752443714994797119288705289363861083984375p253 {- 3476711115480103 253 (-2.56477e+076)}
; Y = 1.9343345190633252084211335386498831212520599365234375p-1007 {+ 4207868591892983 -1007 (1.41035e-303)}
; -1.7719849460752443714994797119288705289363861083984375p253 + 1.9343345190633252084211335386498831212520599365234375p-1007 == -1.7719849460752443714994797119288705289363861083984375p253
; [HW: -1.7719849460752443714994797119288705289363861083984375p253] 

; mpf : - 3476711115480103 253
; mpfd: - 3476711115480103 253 (-2.56477e+076) class: Neg. norm. non-zero
; hwf : - 3476711115480103 253 (-2.56477e+076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111100 #b1100010110100000110011100011000001100101110000100111)))
(assert (= y (fp #b0 #b00000010000 #b1110111100110000100011000000101011100110100111110111)))
(assert (= r (fp #b1 #b10011111100 #b1100010110100000110011100011000001100101110000100111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
