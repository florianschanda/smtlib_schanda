(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1525097905933969766323343719705007970333099365234375p877 {- 686843036086775 877 (-1.16132e+264)}
; Y = 1.264388000672668876944726434885524213314056396484375p-26 {+ 1190697701310662 -26 (1.88408e-008)}
; -1.1525097905933969766323343719705007970333099365234375p877 + 1.264388000672668876944726434885524213314056396484375p-26 == -1.1525097905933969766323343719705007970333099365234375p877
; [HW: -1.1525097905933969766323343719705007970333099365234375p877] 

; mpf : - 686843036086775 877
; mpfd: - 686843036086775 877 (-1.16132e+264) class: Neg. norm. non-zero
; hwf : - 686843036086775 877 (-1.16132e+264) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101100 #b0010011100001010111000011011001011101011000111110111)))
(assert (= y (fp #b0 #b01111100101 #b0100001110101110111011101001100001011000000011000110)))
(assert (= r (fp #b1 #b11101101100 #b0010011100001010111000011011001011101011000111110111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
