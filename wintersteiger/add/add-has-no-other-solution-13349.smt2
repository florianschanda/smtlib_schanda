(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.415803092374605665071385374176315963268280029296875p-41 {- 1872610651877774 -41 (-6.43833e-013)}
; Y = -1.860102122684882619552126925555057823657989501953125p967 {- 3873555599224210 967 (-2.32029e+291)}
; -1.415803092374605665071385374176315963268280029296875p-41 + -1.860102122684882619552126925555057823657989501953125p967 == -1.860102122684882619552126925555057823657989501953125p967
; [HW: -1.860102122684882619552126925555057823657989501953125p967] 

; mpf : - 3873555599224210 967
; mpfd: - 3873555599224210 967 (-2.32029e+291) class: Neg. norm. non-zero
; hwf : - 3873555599224210 967 (-2.32029e+291) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010110 #b0110101001110010000100100100101101010011000110001110)))
(assert (= y (fp #b1 #b11111000110 #b1101110000101111101001110001100000100110110110010010)))
(assert (= r (fp #b1 #b11111000110 #b1101110000101111101001110001100000100110110110010010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
