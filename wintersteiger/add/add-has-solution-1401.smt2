(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9092339344092879027670051073073409497737884521484375p-627 {+ 4094825608198279 -627 (3.42809e-189)}
; Y = 1.9796164765806161245365046852384693920612335205078125p601 {+ 4411800398894461 601 (1.64289e+181)}
; 1.9092339344092879027670051073073409497737884521484375p-627 + 1.9796164765806161245365046852384693920612335205078125p601 == 1.9796164765806161245365046852384693920612335205078125p601
; [HW: 1.9796164765806161245365046852384693920612335205078125p601] 

; mpf : + 4411800398894461 601
; mpfd: + 4411800398894461 601 (1.64289e+181) class: Pos. norm. non-zero
; hwf : + 4411800398894461 601 (1.64289e+181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110001100 #b1110100011000011100011100001110010110011100010000111)))
(assert (= y (fp #b0 #b11001011000 #b1111101011001000001001010011100110001001010101111101)))
(assert (= r (fp #b0 #b11001011000 #b1111101011001000001001010011100110001001010101111101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
