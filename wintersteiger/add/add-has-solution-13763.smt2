(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.649043287170797622565032725105993449687957763671875p-94 {+ 2923031106249726 -94 (8.32554e-029)}
; Y = -1.0054075952315120190405650646425783634185791015625p-336 {- 24353643869608 -336 (-7.1823e-102)}
; 1.649043287170797622565032725105993449687957763671875p-94 + -1.0054075952315120190405650646425783634185791015625p-336 == 1.649043287170797622565032725105993449687957763671875p-94
; [HW: 1.649043287170797622565032725105993449687957763671875p-94] 

; mpf : + 2923031106249726 -94
; mpfd: + 2923031106249726 -94 (8.32554e-029) class: Pos. norm. non-zero
; hwf : + 2923031106249726 -94 (8.32554e-029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100001 #b1010011000100111101100110110110000010110001111111110)))
(assert (= y (fp #b1 #b01010101111 #b0000000101100010011001000110010010101011010110101000)))
(assert (= r (fp #b0 #b01110100001 #b1010011000100111101100110110110000010110001111111110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
