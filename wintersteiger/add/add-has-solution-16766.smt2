(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9294166129542527077234126409166492521762847900390625p887 {- 4185720311772721 887 (-1.99082e+267)}
; Y = -1.9723183052886525956637342460453510284423828125p-130 {- 4378932357383488 -130 (-1.44903e-039)}
; -1.9294166129542527077234126409166492521762847900390625p887 + -1.9723183052886525956637342460453510284423828125p-130 == -1.9294166129542527077234126409166492521762847900390625p887
; [HW: -1.9294166129542527077234126409166492521762847900390625p887] 

; mpf : - 4185720311772721 887
; mpfd: - 4185720311772721 887 (-1.99082e+267) class: Neg. norm. non-zero
; hwf : - 4185720311772721 887 (-1.99082e+267) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110110 #b1110110111101110001111110100010011111111011000110001)))
(assert (= y (fp #b1 #b01101111101 #b1111100011101001110110100011101010000100010101000000)))
(assert (= r (fp #b1 #b11101110110 #b1110110111101110001111110100010011111111011000110001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
