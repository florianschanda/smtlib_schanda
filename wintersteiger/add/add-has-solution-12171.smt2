(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3143117968381823335022318133269436657428741455078125p328 {- 1415534491118589 328 (-7.18682e+098)}
; Y = -1.38606617853635061266004413482733070850372314453125p580 {- 1738687497796660 580 (-5.48506e+174)}
; -1.3143117968381823335022318133269436657428741455078125p328 + -1.38606617853635061266004413482733070850372314453125p580 == -1.38606617853635061266004413482733070850372314453125p580
; [HW: -1.38606617853635061266004413482733070850372314453125p580] 

; mpf : - 1738687497796660 580
; mpfd: - 1738687497796660 580 (-5.48506e+174) class: Neg. norm. non-zero
; hwf : - 1738687497796660 580 (-5.48506e+174) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000111 #b0101000001110110101111001110100000101010101111111101)))
(assert (= y (fp #b1 #b11001000011 #b0110001011010101001110111010101011100111110000110100)))
(assert (= r (fp #b1 #b11001000011 #b0110001011010101001110111010101011100111110000110100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
