(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9254932297546301089852249788236804306507110595703125p-287 {- 4168050964656869 -287 (-7.74343e-087)}
; Y = 1.6090323087151030545527419235440902411937713623046875p-795 {+ 2742837678585931 -795 (7.72179e-240)}
; -1.9254932297546301089852249788236804306507110595703125p-287 + 1.6090323087151030545527419235440902411937713623046875p-795 == -1.9254932297546301089852249788236804306507110595703125p-287
; [HW: -1.9254932297546301089852249788236804306507110595703125p-287] 

; mpf : - 4168050964656869 -287
; mpfd: - 4168050964656869 -287 (-7.74343e-087) class: Neg. norm. non-zero
; hwf : - 4168050964656869 -287 (-7.74343e-087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100000 #b1110110011101101000111111101001001110111001011100101)))
(assert (= y (fp #b0 #b00011100100 #b1001101111101001100010101001100000100011100001001011)))
(assert (= r (fp #b1 #b01011100000 #b1110110011101101000111111101001001110111001011100101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
