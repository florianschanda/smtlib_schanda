(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.62349600585589559642585300025530159473419189453125p-308 {- 2807976379639604 -308 (-3.11324e-093)}
; Y = -1.30241093587521117314054208691231906414031982421875p-788 {- 1361937778120364 -788 (-8.0004e-238)}
; -1.62349600585589559642585300025530159473419189453125p-308 + -1.30241093587521117314054208691231906414031982421875p-788 == -1.62349600585589559642585300025530159473419189453125p-308
; [HW: -1.62349600585589559642585300025530159473419189453125p-308] 

; mpf : - 2807976379639604 -308
; mpfd: - 2807976379639604 -308 (-3.11324e-093) class: Neg. norm. non-zero
; hwf : - 2807976379639604 -308 (-3.11324e-093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001011 #b1001111110011101011011110010101001010110011100110100)))
(assert (= y (fp #b1 #b00011101011 #b0100110101101010110011011001011110001001011010101100)))
(assert (= r (fp #b1 #b01011001011 #b1001111110011101011011110010101001010110011100110100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
