(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3212825980962354943670788998133502900600433349609375p-551 {+ 1446928189066831 -551 (1.79254e-166)}
; Y = -1.29486909930766369569710150244645774364471435546875p363 {- 1327972365765068 363 (-2.43284e+109)}
; 1.3212825980962354943670788998133502900600433349609375p-551 + -1.29486909930766369569710150244645774364471435546875p363 == -1.2948690993076634736524965774151496589183807373046875p363
; [HW: -1.2948690993076634736524965774151496589183807373046875p363] 

; mpf : - 1327972365765067 363
; mpfd: - 1327972365765067 363 (-2.43284e+109) class: Neg. norm. non-zero
; hwf : - 1327972365765067 363 (-2.43284e+109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111011000 #b0101001000111111100100111000101110011000111001001111)))
(assert (= y (fp #b1 #b10101101010 #b0100101101111100100010101001001000100000100111001100)))
(assert (= r (fp #b1 #b10101101010 #b0100101101111100100010101001001000100000100111001011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
