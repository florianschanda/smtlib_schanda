(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.906849572067569997813052395940758287906646728515625p-177 {+ 4084087394844602 -177 (9.95422e-054)}
; Y = -1.2424963141296705426697144503123126924037933349609375p448 {- 1092106309953103 448 (-9.03094e+134)}
; 1.906849572067569997813052395940758287906646728515625p-177 + -1.2424963141296705426697144503123126924037933349609375p448 == -1.242496314129670320625109525281004607677459716796875p448
; [HW: -1.242496314129670320625109525281004607677459716796875p448] 

; mpf : - 1092106309953102 448
; mpfd: - 1092106309953102 448 (-9.03094e+134) class: Neg. norm. non-zero
; hwf : - 1092106309953102 448 (-9.03094e+134) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001110 #b1110100000100111010010110010011001101011111110111010)))
(assert (= y (fp #b1 #b10110111111 #b0011111000010100001111010000101010010110011001001111)))
(assert (= r (fp #b1 #b10110111111 #b0011111000010100001111010000101010010110011001001110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
