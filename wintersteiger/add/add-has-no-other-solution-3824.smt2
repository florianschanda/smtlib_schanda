(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5941914915774741956511206808499991893768310546875p-935 {- 2676000580055032 -935 (-5.48902e-282)}
; Y = -1.381036922777410413942789091379381716251373291015625p484 {- 1716037743434746 484 (-6.898e+145)}
; -1.5941914915774741956511206808499991893768310546875p-935 + -1.381036922777410413942789091379381716251373291015625p484 == -1.381036922777410413942789091379381716251373291015625p484
; [HW: -1.381036922777410413942789091379381716251373291015625p484] 

; mpf : - 1716037743434746 484
; mpfd: - 1716037743434746 484 (-6.898e+145) class: Neg. norm. non-zero
; hwf : - 1716037743434746 484 (-6.898e+145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011000 #b1001100000011100111011101111111111100010111111111000)))
(assert (= y (fp #b1 #b10111100011 #b0110000110001011101000101100000111100101101111111010)))
(assert (= r (fp #b1 #b10111100011 #b0110000110001011101000101100000111100101101111111010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
