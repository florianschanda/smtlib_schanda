(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7485744239541336497723023057915270328521728515625p-153 {- 3371279496778920 -153 (-1.53142e-046)}
; Y = 1.2605380889780661846089060418307781219482421875p-752 {+ 1173359240437440 -752 (5.32107e-227)}
; -1.7485744239541336497723023057915270328521728515625p-153 + 1.2605380889780661846089060418307781219482421875p-752 == -1.7485744239541336497723023057915270328521728515625p-153
; [HW: -1.7485744239541336497723023057915270328521728515625p-153] 

; mpf : - 3371279496778920 -153
; mpfd: - 3371279496778920 -153 (-1.53142e-046) class: Neg. norm. non-zero
; hwf : - 3371279496778920 -153 (-1.53142e-046) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101100110 #b1011111110100010100100101100110110000001010010101000)))
(assert (= y (fp #b0 #b00100001111 #b0100001010110010100111111100101110000101111011000000)))
(assert (= r (fp #b1 #b01101100110 #b1011111110100010100100101100110110000001010010101000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
