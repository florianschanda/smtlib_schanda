(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9845309054390245506738210679031908512115478515625p-688 {- 4433933018869928 -688 (-1.54533e-207)}
; Y = -1.1588036738452538454424711744650267064571380615234375p939 {- 715188166354551 939 (-5.38488e+282)}
; -1.9845309054390245506738210679031908512115478515625p-688 + -1.1588036738452538454424711744650267064571380615234375p939 == -1.1588036738452538454424711744650267064571380615234375p939
; [HW: -1.1588036738452538454424711744650267064571380615234375p939] 

; mpf : - 715188166354551 939
; mpfd: - 715188166354551 939 (-5.38488e+282) class: Neg. norm. non-zero
; hwf : - 715188166354551 939 (-5.38488e+282) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001111 #b1111110000001010001101111010100011000011000010101000)))
(assert (= y (fp #b1 #b11110101010 #b0010100010100111010110111000100110100110011001110111)))
(assert (= r (fp #b1 #b11110101010 #b0010100010100111010110111000100110100110011001110111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
