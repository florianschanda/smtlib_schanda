(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5258912535283066791436112907831557095050811767578125p384 {- 2368403653427485 384 (-6.01232e+115)}
; Y = -1.666436682709387273604306756169535219669342041015625p582 {- 3001363995916026 582 (-2.63783e+175)}
; -1.5258912535283066791436112907831557095050811767578125p384 + -1.666436682709387273604306756169535219669342041015625p582 == -1.6664366827093874956489116812008433043956756591796875p582
; [HW: -1.6664366827093874956489116812008433043956756591796875p582] 

; mpf : - 3001363995916027 582
; mpfd: - 3001363995916027 582 (-2.63783e+175) class: Neg. norm. non-zero
; hwf : - 3001363995916027 582 (-2.63783e+175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101111111 #b1000011010100000110011110010011100101000000100011101)))
(assert (= y (fp #b1 #b11001000101 #b1010101010011011100110000010110100010111011011111010)))
(assert (= r (fp #b1 #b11001000101 #b1010101010011011100110000010110100010111011011111011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
