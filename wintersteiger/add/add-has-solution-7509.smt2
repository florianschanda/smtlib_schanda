(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.73042794464279925392702352837659418582916259765625p-239 {+ 3289555019314308 -239 (1.95878e-072)}
; Y = -1.6227749521950636246714338994934223592281341552734375p-84 {- 2804729042641367 -84 (-8.38955e-026)}
; 1.73042794464279925392702352837659418582916259765625p-239 + -1.6227749521950636246714338994934223592281341552734375p-84 == -1.6227749521950636246714338994934223592281341552734375p-84
; [HW: -1.6227749521950636246714338994934223592281341552734375p-84] 

; mpf : - 2804729042641367 -84
; mpfd: - 2804729042641367 -84 (-8.38955e-026) class: Neg. norm. non-zero
; hwf : - 2804729042641367 -84 (-8.38955e-026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100010000 #b1011101011111101010100110110011001010011010010000100)))
(assert (= y (fp #b1 #b01110101011 #b1001111101101110001011011110010001110010000111010111)))
(assert (= r (fp #b1 #b01110101011 #b1001111101101110001011011110010001110010000111010111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
