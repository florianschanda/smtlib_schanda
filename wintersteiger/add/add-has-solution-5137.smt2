(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.800789682634838850816549893352203071117401123046875p-179 {+ 3606436116316398 -179 (2.35014e-054)}
; Y = -1.368326389260651421153625051374547183513641357421875p411 {- 1658794589424990 411 (-7.23632e+123)}
; 1.800789682634838850816549893352203071117401123046875p-179 + -1.368326389260651421153625051374547183513641357421875p411 == -1.3683263892606511991090201263432390987873077392578125p411
; [HW: -1.3683263892606511991090201263432390987873077392578125p411] 

; mpf : - 1658794589424989 411
; mpfd: - 1658794589424989 411 (-7.23632e+123) class: Neg. norm. non-zero
; hwf : - 1658794589424989 411 (-7.23632e+123) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001100 #b1100110100000000100011010111100111100100000011101110)))
(assert (= y (fp #b1 #b10110011010 #b0101111001001010101000110110010000100000110101011110)))
(assert (= r (fp #b1 #b10110011010 #b0101111001001010101000110110010000100000110101011101)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
