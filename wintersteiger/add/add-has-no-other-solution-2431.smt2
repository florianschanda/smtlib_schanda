(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4277848255394751664226760112796910107135772705078125p825 {- 1926571580894333 825 (-3.19455e+248)}
; Y = 1.5461114316674089419478832496679387986660003662109375p-11 {+ 2459467240160111 -11 (0.000754937)}
; -1.4277848255394751664226760112796910107135772705078125p825 + 1.5461114316674089419478832496679387986660003662109375p-11 == -1.4277848255394751664226760112796910107135772705078125p825
; [HW: -1.4277848255394751664226760112796910107135772705078125p825] 

; mpf : - 1926571580894333 825
; mpfd: - 1926571580894333 825 (-3.19455e+248) class: Neg. norm. non-zero
; hwf : - 1926571580894333 825 (-3.19455e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100111000 #b0110110110000011010011100110101101101010110001111101)))
(assert (= y (fp #b0 #b01111110100 #b1000101111001101111101010111001011111011101101101111)))
(assert (= r (fp #b1 #b11100111000 #b0110110110000011010011100110101101101010110001111101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
