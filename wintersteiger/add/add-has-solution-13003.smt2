(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.468712506526088645841809920966625213623046875p683 {- 2110893469734784 683 (-5.89419e+205)}
; Y = -1.524549794148165826612739692791365087032318115234375p240 {- 2362362257462950 240 (-2.69365e+072)}
; -1.468712506526088645841809920966625213623046875p683 + -1.524549794148165826612739692791365087032318115234375p240 == -1.468712506526088645841809920966625213623046875p683
; [HW: -1.468712506526088645841809920966625213623046875p683] 

; mpf : - 2110893469734784 683
; mpfd: - 2110893469734784 683 (-5.89419e+205) class: Neg. norm. non-zero
; hwf : - 2110893469734784 683 (-5.89419e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010101010 #b0111011111111101100010101111011011000001011110000000)))
(assert (= y (fp #b1 #b10011101111 #b1000011001001000111001010011001011111101011010100110)))
(assert (= r (fp #b1 #b11010101010 #b0111011111111101100010101111011011000001011110000000)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
