(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7512205283710589043266736553050577640533447265625p810 {- 3383196491644968 810 (-1.19574e+244)}
; Y = 1.5934777137535902635789852865855209529399871826171875p-638 {+ 2672786010513363 -638 (1.39704e-192)}
; -1.7512205283710589043266736553050577640533447265625p810 + 1.5934777137535902635789852865855209529399871826171875p-638 == -1.7512205283710589043266736553050577640533447265625p810
; [HW: -1.7512205283710589043266736553050577640533447265625p810] 

; mpf : - 3383196491644968 810
; mpfd: - 3383196491644968 810 (-1.19574e+244) class: Neg. norm. non-zero
; hwf : - 3383196491644968 810 (-1.19574e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101001 #b1100000001001111111111010001000101110000000000101000)))
(assert (= y (fp #b0 #b00110000001 #b1001011111101110001001111100101101111001111111010011)))
(assert (= r (fp #b1 #b11100101001 #b1100000001001111111111010001000101110000000000101000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
