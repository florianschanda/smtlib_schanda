(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3020504962478423038874097983352839946746826171875p-286 {+ 1360314502348856 -286 (1.04725e-086)}
; Y = -1.4252838648234043006368665373884141445159912109375p216 {- 1915308255145368 216 (-1.501e+065)}
; 1.3020504962478423038874097983352839946746826171875p-286 + -1.4252838648234043006368665373884141445159912109375p216 == -1.4252838648234043006368665373884141445159912109375p216
; [HW: -1.4252838648234043006368665373884141445159912109375p216] 

; mpf : - 1915308255145368 216
; mpfd: - 1915308255145368 216 (-1.501e+065) class: Neg. norm. non-zero
; hwf : - 1915308255145368 216 (-1.501e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100001 #b0100110101010011001011100110101100100000000000111000)))
(assert (= y (fp #b1 #b10011010111 #b0110110011011111011001110100001011101110110110011000)))
(assert (= r (fp #b1 #b10011010111 #b0110110011011111011001110100001011101110110110011000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
