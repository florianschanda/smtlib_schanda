(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.788709617648626792885124814347364008426666259765625p275 {- 3552032340145882 275 (-1.0859e+083)}
; Y = -1.5083506224531475492511845004628412425518035888671875p-891 {- 2289407673853555 -891 (-9.13642e-269)}
; -1.788709617648626792885124814347364008426666259765625p275 + -1.5083506224531475492511845004628412425518035888671875p-891 == -1.788709617648626792885124814347364008426666259765625p275
; [HW: -1.788709617648626792885124814347364008426666259765625p275] 

; mpf : - 3552032340145882 275
; mpfd: - 3552032340145882 275 (-1.0859e+083) class: Neg. norm. non-zero
; hwf : - 3552032340145882 275 (-1.0859e+083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010010 #b1100100111101000110111111001110111010111011011011010)))
(assert (= y (fp #b1 #b00010000100 #b1000001000100011010001000011001001010110011001110011)))
(assert (= r (fp #b1 #b10100010010 #b1100100111101000110111111001110111010111011011011010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
