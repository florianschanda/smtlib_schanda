(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2920195626995063520325857098214328289031982421875p-886 {- 1315139193758392 -886 (-2.50434e-267)}
; Y = -1.477080137944232429703106390661559998989105224609375p-795 {- 2148577931471510 -795 (-7.08855e-240)}
; -1.2920195626995063520325857098214328289031982421875p-886 + -1.477080137944232429703106390661559998989105224609375p-795 == -1.477080137944232429703106390661559998989105224609375p-795
; [HW: -1.477080137944232429703106390661559998989105224609375p-795] 

; mpf : - 2148577931471510 -795
; mpfd: - 2148577931471510 -795 (-7.08855e-240) class: Neg. norm. non-zero
; hwf : - 2148577931471510 -795 (-7.08855e-240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001001 #b0100101011000001110010110100011110010110001010111000)))
(assert (= y (fp #b1 #b00011100100 #b0111101000100001111011001000011000001010101010010110)))
(assert (= r (fp #b1 #b00011100100 #b0111101000100001111011001000011000001010101010010110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
