(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.684397214834000511274325617705471813678741455078125p-925 {+ 3082251041699810 -925 (5.9388e-279)}
; Y = -1.79232597593538667268830977263860404491424560546875p-347 {- 3568318969978572 -347 (-6.25185e-105)}
; 1.684397214834000511274325617705471813678741455078125p-925 + -1.79232597593538667268830977263860404491424560546875p-347 == -1.79232597593538667268830977263860404491424560546875p-347
; [HW: -1.79232597593538667268830977263860404491424560546875p-347] 

; mpf : - 3568318969978572 -347
; mpfd: - 3568318969978572 -347 (-6.25185e-105) class: Neg. norm. non-zero
; hwf : - 3568318969978572 -347 (-6.25185e-105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100010 #b1010111100110100101001111110011100101111011111100010)))
(assert (= y (fp #b1 #b01010100100 #b1100101011010101111000000000101001101001111011001100)))
(assert (= r (fp #b1 #b01010100100 #b1100101011010101111000000000101001101001111011001100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
