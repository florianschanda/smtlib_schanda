(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.038615490356648241032644364167936146259307861328125p347 {- 173908707980930 347 (-2.97758e+104)}
; Y = -1.983948915214227337600050304899923503398895263671875p699 {- 4431311967910398 699 (-5.21792e+210)}
; -1.038615490356648241032644364167936146259307861328125p347 + -1.983948915214227337600050304899923503398895263671875p699 == -1.9839489152142275596446552299312315881252288818359375p699
; [HW: -1.9839489152142275596446552299312315881252288818359375p699] 

; mpf : - 4431311967910399 699
; mpfd: - 4431311967910399 699 (-5.21792e+210) class: Neg. norm. non-zero
; hwf : - 4431311967910399 699 (-5.21792e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101011010 #b0000100111100010101101000110110000110011011010000010)))
(assert (= y (fp #b1 #b11010111010 #b1111101111100100000100110111101111000111100111111110)))
(assert (= r (fp #b1 #b11010111010 #b1111101111100100000100110111101111000111100111111111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
