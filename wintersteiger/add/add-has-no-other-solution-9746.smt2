(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.680402095741815760021609094110317528247833251953125p-97 {+ 3064258624844946 -97 (1.06048e-029)}
; Y = 1.5898711863570020863534182353760115802288055419921875p-468 {+ 2656543655073987 -468 (2.08605e-141)}
; 1.680402095741815760021609094110317528247833251953125p-97 + 1.5898711863570020863534182353760115802288055419921875p-468 == 1.6804020957418159820662140191416256129741668701171875p-97
; [HW: 1.6804020957418159820662140191416256129741668701171875p-97] 

; mpf : + 3064258624844947 -97
; mpfd: + 3064258624844947 -97 (1.06048e-029) class: Pos. norm. non-zero
; hwf : + 3064258624844947 -97 (1.06048e-029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011110 #b1010111000101110110101001110110101010111010010010010)))
(assert (= y (fp #b0 #b01000101011 #b1001011100000001110011000100111001000001100011000011)))
(assert (= r (fp #b0 #b01110011110 #b1010111000101110110101001110110101010111010010010011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
