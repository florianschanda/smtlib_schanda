(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6017125476582847465323311553220264613628387451171875p452 {- 2709872405418003 452 (-1.8627e+136)}
; Y = 1.2594490646921439047645208120229654014110565185546875p-761 {+ 1168454711069163 -761 (1.03837e-229)}
; -1.6017125476582847465323311553220264613628387451171875p452 + 1.2594490646921439047645208120229654014110565185546875p-761 == -1.601712547658284524487726230290718376636505126953125p452
; [HW: -1.601712547658284524487726230290718376636505126953125p452] 

; mpf : - 2709872405418002 452
; mpfd: - 2709872405418002 452 (-1.8627e+136) class: Neg. norm. non-zero
; hwf : - 2709872405418002 452 (-1.8627e+136) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000011 #b1001101000001001110101010110000111001001000000010011)))
(assert (= y (fp #b0 #b00100000110 #b0100001001101011010000001111111111010100100111101011)))
(assert (= r (fp #b1 #b10111000011 #b1001101000001001110101010110000111001001000000010010)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
