(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.133939035702188125043221589294262230396270751953125p770 {- 603207791278738 770 (-7.04184e+231)}
; Y = -1.2322891209343505014572883737855590879917144775390625p754 {- 1046137198482161 754 (-1.16769e+227)}
; -1.133939035702188125043221589294262230396270751953125p770 + -1.2322891209343505014572883737855590879917144775390625p754 == -1.13395783894194845942138272221200168132781982421875p770
; [HW: -1.13395783894194845942138272221200168132781982421875p770] 

; mpf : - 603292473542316 770
; mpfd: - 603292473542316 770 (-7.04196e+231) class: Neg. norm. non-zero
; hwf : - 603292473542316 770 (-7.04196e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000001 #b0010001001001001110101000010000111111111101010010010)))
(assert (= y (fp #b1 #b11011110001 #b0011101101110111010011001100000110100001001011110001)))
(assert (= r (fp #b1 #b11100000001 #b0010001001001011000011111001100101001100011010101100)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
