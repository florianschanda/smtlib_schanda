(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.652105372800872995497911688289605081081390380859375p870 {- 2936821513952310 870 (-1.30057e+262)}
; Y = -1.0413240852145595471966998957213945686817169189453125p-602 {- 186107134773717 -602 (-6.27377e-182)}
; -1.652105372800872995497911688289605081081390380859375p870 + -1.0413240852145595471966998957213945686817169189453125p-602 == -1.652105372800872995497911688289605081081390380859375p870
; [HW: -1.652105372800872995497911688289605081081390380859375p870] 

; mpf : - 2936821513952310 870
; mpfd: - 2936821513952310 870 (-1.30057e+262) class: Neg. norm. non-zero
; hwf : - 2936821513952310 870 (-1.30057e+262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100101 #b1010011011110000011000001011000110111001110000110110)))
(assert (= y (fp #b1 #b00110100101 #b0000101010010100001101110001101010001000100111010101)))
(assert (= r (fp #b1 #b11101100101 #b1010011011110000011000001011000110111001110000110110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
