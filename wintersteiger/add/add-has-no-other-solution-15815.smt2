(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3390466812649093331089034109027124941349029541015625p664 {- 1526930507405849 664 (-1.02497e+200)}
; Y = 1.6526089041791054423669038442312739789485931396484375p-224 {+ 2939089217679687 -224 (6.12987e-068)}
; -1.3390466812649093331089034109027124941349029541015625p664 + 1.6526089041791054423669038442312739789485931396484375p-224 == -1.3390466812649091110642984858714044094085693359375p664
; [HW: -1.3390466812649091110642984858714044094085693359375p664] 

; mpf : - 1526930507405848 664
; mpfd: - 1526930507405848 664 (-1.02497e+200) class: Neg. norm. non-zero
; hwf : - 1526930507405848 664 (-1.02497e+200) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010111 #b0101011011001011110000110110011111011001101000011001)))
(assert (= y (fp #b0 #b01100011111 #b1010011100010001011000001000110010000111000101000111)))
(assert (= r (fp #b1 #b11010010111 #b0101011011001011110000110110011111011001101000011000)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
