(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.779548460881042348802338892710395157337188720703125p-693 {- 3510774157941106 -693 (-4.33035e-209)}
; Y = -1.59704113043657525139451536233536899089813232421875p545 {- 2688834212559020 545 (-1.83935e+164)}
; -1.779548460881042348802338892710395157337188720703125p-693 + -1.59704113043657525139451536233536899089813232421875p545 == -1.59704113043657525139451536233536899089813232421875p545
; [HW: -1.59704113043657525139451536233536899089813232421875p545] 

; mpf : - 2688834212559020 545
; mpfd: - 2688834212559020 545 (-1.83935e+164) class: Neg. norm. non-zero
; hwf : - 2688834212559020 545 (-1.83935e+164) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001010 #b1100011110010000011111001110100100100001100101110010)))
(assert (= y (fp #b1 #b11000100000 #b1001100011010111101100000000000110010111100010101100)))
(assert (= r (fp #b1 #b11000100000 #b1001100011010111101100000000000110010111100010101100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
