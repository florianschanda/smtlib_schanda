(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9860134203458572610401233760057948529720306396484375p-216 {- 4440609672451911 -216 (-1.88583e-065)}
; Y = 1.515495469724484234319561437587253749370574951171875p-77 {+ 2321585205362366 -77 (1.00287e-023)}
; -1.9860134203458572610401233760057948529720306396484375p-216 + 1.515495469724484234319561437587253749370574951171875p-77 == 1.5154954697244840122749565125559456646442413330078125p-77
; [HW: 1.5154954697244840122749565125559456646442413330078125p-77] 

; mpf : + 2321585205362365 -77
; mpfd: + 2321585205362365 -77 (1.00287e-023) class: Pos. norm. non-zero
; hwf : + 2321585205362365 -77 (1.00287e-023) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100111 #b1111110001101011011000000010000111001101011101000111)))
(assert (= y (fp #b0 #b01110110010 #b1000001111110111100000101101011110110011111010111110)))
(assert (= r (fp #b0 #b01110110010 #b1000001111110111100000101101011110110011111010111101)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
