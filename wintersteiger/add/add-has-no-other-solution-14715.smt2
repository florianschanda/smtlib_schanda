(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7059054634799879490714147323160432279109954833984375p-495 {+ 3179115582287271 -495 (1.66766e-149)}
; Y = -1.9973024514638846316216813647770322859287261962890625p212 {- 4491450948788433 212 (-1.31463e+064)}
; 1.7059054634799879490714147323160432279109954833984375p-495 + -1.9973024514638846316216813647770322859287261962890625p212 == -1.997302451463884409577076439745724201202392578125p212
; [HW: -1.997302451463884409577076439745724201202392578125p212] 

; mpf : - 4491450948788432 212
; mpfd: - 4491450948788432 212 (-1.31463e+064) class: Neg. norm. non-zero
; hwf : - 4491450948788432 212 (-1.31463e+064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000010000 #b1011010010110110001110000110111110110110110110100111)))
(assert (= y (fp #b1 #b10011010011 #b1111111101001111001101101010010101000010000011010001)))
(assert (= r (fp #b1 #b10011010011 #b1111111101001111001101101010010101000010000011010000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
