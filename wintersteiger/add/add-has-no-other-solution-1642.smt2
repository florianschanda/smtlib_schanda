(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.900235071991641433442055131308734416961669921875p-786 {+ 4054298334767408 -786 (4.66907e-237)}
; Y = -1.91821113126274322979725184268318116664886474609375p-394 {- 4135255308602332 -394 (-4.75421e-119)}
; 1.900235071991641433442055131308734416961669921875p-786 + -1.91821113126274322979725184268318116664886474609375p-394 == -1.9182111312627430077526469176518730819225311279296875p-394
; [HW: -1.9182111312627430077526469176518730819225311279296875p-394] 

; mpf : - 4135255308602331 -394
; mpfd: - 4135255308602331 -394 (-4.75421e-119) class: Neg. norm. non-zero
; hwf : - 4135255308602331 -394 (-4.75421e-119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101101 #b1110011001110101110011100100000011101010100100110000)))
(assert (= y (fp #b1 #b01001110101 #b1110101100001111111000100111101110011000101111011100)))
(assert (= r (fp #b1 #b01001110101 #b1110101100001111111000100111101110011000101111011011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
