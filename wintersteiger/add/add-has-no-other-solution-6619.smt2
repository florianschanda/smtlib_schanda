(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0571905559231000726327920347102917730808258056640625p685 {+ 257563366344385 685 (1.69707e+206)}
; Y = 1.3200390675161026710071610068553127348423004150390625p739 {+ 1441327825209521 739 (3.81728e+222)}
; 1.0571905559231000726327920347102917730808258056640625p685 + 1.3200390675161026710071610068553127348423004150390625p739 == 1.3200390675161026710071610068553127348423004150390625p739
; [HW: 1.3200390675161026710071610068553127348423004150390625p739] 

; mpf : + 1441327825209521 739
; mpfd: + 1441327825209521 739 (3.81728e+222) class: Pos. norm. non-zero
; hwf : + 1441327825209521 739 (3.81728e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010101100 #b0000111010100100000010100100111101010100011011000001)))
(assert (= y (fp #b0 #b11011100010 #b0101000111101110000101001001000001101100100010110001)))
(assert (= r (fp #b0 #b11011100010 #b0101000111101110000101001001000001101100100010110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
