(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.811162421332560779063669542665593326091766357421875p-587 {+ 3653150778450270 -587 (3.57561e-177)}
; Y = -1.413273075173175019614291159086860716342926025390625p504 {- 1861216467352170 504 (-7.40191e+151)}
; 1.811162421332560779063669542665593326091766357421875p-587 + -1.413273075173175019614291159086860716342926025390625p504 == -1.4132730751731747975696862340555526316165924072265625p504
; [HW: -1.4132730751731747975696862340555526316165924072265625p504] 

; mpf : - 1861216467352169 504
; mpfd: - 1861216467352169 504 (-7.40191e+151) class: Neg. norm. non-zero
; hwf : - 1861216467352169 504 (-7.40191e+151) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110100 #b1100111110101000010101110010011101011110000101011110)))
(assert (= y (fp #b1 #b10111110111 #b0110100111001100010000111010011000101111101001101010)))
(assert (= r (fp #b1 #b10111110111 #b0110100111001100010000111010011000101111101001101001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
