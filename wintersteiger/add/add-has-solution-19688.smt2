(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.508753488755300242729617821169085800647735595703125p965 {- 2291222022381810 965 (-4.70505e+290)}
; Y = 1.5147661426573648668636451475322246551513671875p-855 {+ 2318300608254656 -855 (6.30521e-258)}
; -1.508753488755300242729617821169085800647735595703125p965 + 1.5147661426573648668636451475322246551513671875p-855 == -1.508753488755300242729617821169085800647735595703125p965
; [HW: -1.508753488755300242729617821169085800647735595703125p965] 

; mpf : - 2291222022381810 965
; mpfd: - 2291222022381810 965 (-4.70505e+290) class: Neg. norm. non-zero
; hwf : - 2291222022381810 965 (-4.70505e+290) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111000100 #b1000001000111101101010110010101111101110000011110010)))
(assert (= y (fp #b0 #b00010101000 #b1000001111000111101101101100001111001101001011000000)))
(assert (= r (fp #b1 #b11111000100 #b1000001000111101101010110010101111101110000011110010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
