(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2460362875264594517688010455458424985408782958984375p-989 {+ 1108048932823783 -989 (2.38158e-298)}
; Y = -1.1885847713382222679001642973162233829498291015625p-742 {- 849310305926568 -742 (-5.13775e-224)}
; 1.2460362875264594517688010455458424985408782958984375p-989 + -1.1885847713382222679001642973162233829498291015625p-742 == -1.1885847713382222679001642973162233829498291015625p-742
; [HW: -1.1885847713382222679001642973162233829498291015625p-742] 

; mpf : - 849310305926568 -742
; mpfd: - 849310305926568 -742 (-5.13775e-224) class: Neg. norm. non-zero
; hwf : - 849310305926568 -742 (-5.13775e-224) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100010 #b0011111011111100001110111111000010001110001011100111)))
(assert (= y (fp #b1 #b00100011001 #b0011000001000111000101110111000101101011110110101000)))
(assert (= r (fp #b1 #b00100011001 #b0011000001000111000101110111000101101011110110101000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
