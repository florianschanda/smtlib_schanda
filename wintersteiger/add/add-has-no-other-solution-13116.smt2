(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.86016328672593544979463331401348114013671875p1017 {+ 3873831057576704 1017 (2.6125e+306)}
; Y = -1.778037926502392895855564347584731876850128173828125p522 {- 3503971315876290 522 (-2.44117e+157)}
; 1.86016328672593544979463331401348114013671875p1017 + -1.778037926502392895855564347584731876850128173828125p522 == 1.8601632867259352277500283889821730554103851318359375p1017
; [HW: 1.8601632867259352277500283889821730554103851318359375p1017] 

; mpf : + 3873831057576703 1017
; mpfd: + 3873831057576703 1017 (2.6125e+306) class: Pos. norm. non-zero
; hwf : + 3873831057576703 1017 (2.6125e+306) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111111000 #b1101110000110011101010010100000110110101001100000000)))
(assert (= y (fp #b1 #b11000001001 #b1100011100101101011111100101100101100000000111000010)))
(assert (= r (fp #b0 #b11111111000 #b1101110000110011101010010100000110110101001011111111)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
