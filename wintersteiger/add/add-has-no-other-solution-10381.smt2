(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1530270555832859979972226938116364181041717529296875p15 {+ 689172590502491 15 (37782.4)}
; Y = 1.281189485093091828815659027895890176296234130859375p535 {+ 1266364860285750 535 (1.44099e+161)}
; 1.1530270555832859979972226938116364181041717529296875p15 + 1.281189485093091828815659027895890176296234130859375p535 == 1.2811894850930920508602639529271982610225677490234375p535
; [HW: 1.2811894850930920508602639529271982610225677490234375p535] 

; mpf : + 1266364860285751 535
; mpfd: + 1266364860285751 535 (1.44099e+161) class: Pos. norm. non-zero
; hwf : + 1266364860285751 535 (1.44099e+161) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000001110 #b0010011100101100110001111111011100100010001001011011)))
(assert (= y (fp #b0 #b11000010110 #b0100011111111100000010001011101001110100001100110110)))
(assert (= r (fp #b0 #b11000010110 #b0100011111111100000010001011101001110100001100110111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
