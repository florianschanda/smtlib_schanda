(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.337103590867645408479802426882088184356689453125p-445 {+ 1518179606216784 -445 (1.47169e-134)}
; Y = -0.1180615994745302099744321822072379291057586669921875p-1022 {- 531702175400259 -1023 (-2.62696e-309)}
; 1.337103590867645408479802426882088184356689453125p-445 + -0.1180615994745302099744321822072379291057586669921875p-1022 == 1.337103590867645408479802426882088184356689453125p-445
; [HW: 1.337103590867645408479802426882088184356689453125p-445] 

; mpf : + 1518179606216784 -445
; mpfd: + 1518179606216784 -445 (1.47169e-134) class: Pos. norm. non-zero
; hwf : + 1518179606216784 -445 (1.47169e-134) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001000010 #b0101011001001100011010111100001000100100000001010000)))
(assert (= y (fp #b1 #b00000000000 #b0001111000111001010010001111010010101000000101000011)))
(assert (= r (fp #b0 #b01001000010 #b0101011001001100011010111100001000100100000001010000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
