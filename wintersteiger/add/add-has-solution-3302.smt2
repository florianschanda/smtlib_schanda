(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.617226235074181062145726173184812068939208984375p822 {- 2779739842283376 822 (-4.52301e+247)}
; Y = 1.5341111479480231682970270412624813616275787353515625p697 {+ 2405422766873145 697 (1.0087e+210)}
; -1.617226235074181062145726173184812068939208984375p822 + 1.5341111479480231682970270412624813616275787353515625p697 == -1.6172262350741808401011212481535039842128753662109375p822
; [HW: -1.6172262350741808401011212481535039842128753662109375p822] 

; mpf : - 2779739842283375 822
; mpfd: - 2779739842283375 822 (-4.52301e+247) class: Neg. norm. non-zero
; hwf : - 2779739842283375 822 (-4.52301e+247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110101 #b1001111000000010100010011101110111100000011101110000)))
(assert (= y (fp #b0 #b11010111000 #b1000100010111011100000100001100011011101101000111001)))
(assert (= r (fp #b1 #b11100110101 #b1001111000000010100010011101110111100000011101101111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
