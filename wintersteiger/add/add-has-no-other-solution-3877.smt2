(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.87039634665974308092017963645048439502716064453125p-823 {+ 3919916662481460 -823 (3.34385e-248)}
; Y = 1.2840652271382013704936753129004500806331634521484375p-315 {+ 1279316051088519 -315 (1.9237e-095)}
; 1.87039634665974308092017963645048439502716064453125p-823 + 1.2840652271382013704936753129004500806331634521484375p-315 == 1.2840652271382015925382802379317581653594970703125p-315
; [HW: 1.2840652271382015925382802379317581653594970703125p-315] 

; mpf : + 1279316051088520 -315
; mpfd: + 1279316051088520 -315 (1.9237e-095) class: Pos. norm. non-zero
; hwf : + 1279316051088520 -315 (1.9237e-095) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001000 #b1101111011010010010010111000001101110110001000110100)))
(assert (= y (fp #b0 #b01011000100 #b0100100010111000011111111010110001111101010010000111)))
(assert (= r (fp #b0 #b01011000100 #b0100100010111000011111111010110001111101010010001000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
