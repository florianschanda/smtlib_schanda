(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2083406670316245712371028275811113417148590087890625p-834 {+ 938282950409745 -834 (1.05481e-251)}
; Y = 1.1476222717516606497412112730671651661396026611328125p626 {+ 664831608052365 626 (3.19578e+188)}
; 1.2083406670316245712371028275811113417148590087890625p-834 + 1.1476222717516606497412112730671651661396026611328125p626 == 1.1476222717516606497412112730671651661396026611328125p626
; [HW: 1.1476222717516606497412112730671651661396026611328125p626] 

; mpf : + 664831608052365 626
; mpfd: + 664831608052365 626 (3.19578e+188) class: Pos. norm. non-zero
; hwf : + 664831608052365 626 (3.19578e+188) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010111101 #b0011010101010101110100000101111101010011111000010001)))
(assert (= y (fp #b0 #b11001110001 #b0010010111001010100100101011110101010101101010001101)))
(assert (= r (fp #b0 #b11001110001 #b0010010111001010100100101011110101010101101010001101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
