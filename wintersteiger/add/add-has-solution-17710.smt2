(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1594895224159913471595473311026580631732940673828125p519 {- 718276953722157 519 (-1.98992e+156)}
; Y = 1.2495092712440800664097650951589457690715789794921875p-113 {+ 1123689861000323 -113 (1.20323e-034)}
; -1.1594895224159913471595473311026580631732940673828125p519 + 1.2495092712440800664097650951589457690715789794921875p-113 == -1.1594895224159913471595473311026580631732940673828125p519
; [HW: -1.1594895224159913471595473311026580631732940673828125p519] 

; mpf : - 718276953722157 519
; mpfd: - 718276953722157 519 (-1.98992e+156) class: Neg. norm. non-zero
; hwf : - 718276953722157 519 (-1.98992e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000110 #b0010100011010100010011100010101011010100110100101101)))
(assert (= y (fp #b0 #b01110001110 #b0011111111011111110101101111000000001010110010000011)))
(assert (= r (fp #b1 #b11000000110 #b0010100011010100010011100010101011010100110100101101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
