(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4774519974009636680278845233260653913021087646484375p-980 {- 2150252637582279 -980 (-1.44583e-295)}
; Y = -1.166292873136823171620335415354929864406585693359375p810 {- 748916521493366 810 (-7.9635e+243)}
; -1.4774519974009636680278845233260653913021087646484375p-980 + -1.166292873136823171620335415354929864406585693359375p810 == -1.166292873136823171620335415354929864406585693359375p810
; [HW: -1.166292873136823171620335415354929864406585693359375p810] 

; mpf : - 748916521493366 810
; mpfd: - 748916521493366 810 (-7.9635e+243) class: Neg. norm. non-zero
; hwf : - 748916521493366 810 (-7.9635e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000101011 #b0111101000111010010010110100101000111111001111000111)))
(assert (= y (fp #b1 #b11100101001 #b0010101010010010001010110111001110101110001101110110)))
(assert (= r (fp #b1 #b11100101001 #b0010101010010010001010110111001110101110001101110110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
