(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.049797437060649318851801581331528723239898681640625p998 {- 224267718990346 998 (-2.81217e+300)}
; Y = 1.237268678513171682453730682027526199817657470703125p950 {+ 1068563132138610 950 (1.1775e+286)}
; -1.049797437060649318851801581331528723239898681640625p998 + 1.237268678513171682453730682027526199817657470703125p950 == -1.0497974370606451000043080057366751134395599365234375p998
; [HW: -1.0497974370606451000043080057366751134395599365234375p998] 

; mpf : - 224267718990327 998
; mpfd: - 224267718990327 998 (-2.81217e+300) class: Neg. norm. non-zero
; hwf : - 224267718990327 998 (-2.81217e+300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100101 #b0000110010111111100001100101101110011001101000001010)))
(assert (= y (fp #b0 #b11110110101 #b0011110010111101101000111101111010010100010001110010)))
(assert (= r (fp #b1 #b11111100101 #b0000110010111111100001100101101110011001100111110111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
