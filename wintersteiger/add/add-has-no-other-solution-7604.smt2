(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2684647643885662571250350083573721349239349365234375p-305 {+ 1209057812862455 -305 (1.94594e-092)}
; Y = -1.9500572704901097953467115075909532606601715087890625p-344 {- 4278677569359889 -344 (-5.44163e-104)}
; 1.2684647643885662571250350083573721349239349365234375p-305 + -1.9500572704901097953467115075909532606601715087890625p-344 == 1.2684647643850193166059625582420267164707183837890625p-305
; [HW: 1.2684647643850193166059625582420267164707183837890625p-305] 

; mpf : + 1209057812846481 -305
; mpfd: + 1209057812846481 -305 (1.94594e-092) class: Pos. norm. non-zero
; hwf : + 1209057812846481 -305 (1.94594e-092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001110 #b0100010010111010000110110101011100101101010111110111)))
(assert (= y (fp #b1 #b01010100111 #b1111001100110110111101000000101000010101000000010001)))
(assert (= r (fp #b0 #b01011001110 #b0100010010111010000110110101011100101001011110010001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
