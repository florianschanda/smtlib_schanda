(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6418817121420479221427513039088808000087738037109375p-281 {+ 2890778239618863 -281 (4.22584e-085)}
; Y = 1.4977893066984375725070322005194611847400665283203125p-919 {+ 2241843736156101 -919 (3.37975e-277)}
; 1.6418817121420479221427513039088808000087738037109375p-281 + 1.4977893066984375725070322005194611847400665283203125p-919 == 1.641881712142048144187356228940188884735107421875p-281
; [HW: 1.641881712142048144187356228940188884735107421875p-281] 

; mpf : + 2890778239618864 -281
; mpfd: + 2890778239618864 -281 (4.22584e-085) class: Pos. norm. non-zero
; hwf : + 2890778239618864 -281 (4.22584e-085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100110 #b1010010001010010010111000010000110001100111100101111)))
(assert (= y (fp #b0 #b00001101000 #b0111111101101111000111101011100010010001011111000101)))
(assert (= r (fp #b0 #b01011100110 #b1010010001010010010111000010000110001100111100110000)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
