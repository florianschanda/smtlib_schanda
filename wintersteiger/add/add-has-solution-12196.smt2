(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8966708402107601560970806531258858740329742431640625p-19 {+ 4038246461847169 -19 (3.61761e-006)}
; Y = -1.9321327018630969352130932747968472540378570556640625p-320 {- 4197952488770497 -320 (-9.04562e-097)}
; 1.8966708402107601560970806531258858740329742431640625p-19 + -1.9321327018630969352130932747968472540378570556640625p-320 == 1.896670840210759934052475728094577789306640625p-19
; [HW: 1.896670840210759934052475728094577789306640625p-19] 

; mpf : + 4038246461847168 -19
; mpfd: + 4038246461847168 -19 (3.61761e-006) class: Pos. norm. non-zero
; hwf : + 4038246461847168 -19 (3.61761e-006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101100 #b1110010110001100001110000101110111111011011010000001)))
(assert (= y (fp #b1 #b01010111111 #b1110111010100000001111111010111000001000101111000001)))
(assert (= r (fp #b0 #b01111101100 #b1110010110001100001110000101110111111011011010000000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
