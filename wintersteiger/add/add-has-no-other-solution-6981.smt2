(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1514661065132874018246411651489324867725372314453125p-67 {- 682142700852501 -67 (-7.80264e-021)}
; Y = 1.8676646241707410833754465784295462071895599365234375p-902 {+ 3907614078097911 -902 (5.52386e-272)}
; -1.1514661065132874018246411651489324867725372314453125p-67 + 1.8676646241707410833754465784295462071895599365234375p-902 == -1.15146610651328717978003624011762440204620361328125p-67
; [HW: -1.15146610651328717978003624011762440204620361328125p-67] 

; mpf : - 682142700852500 -67
; mpfd: - 682142700852500 -67 (-7.80264e-021) class: Neg. norm. non-zero
; hwf : - 682142700852500 -67 (-7.80264e-021) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110111100 #b0010011011000110011110111001010111101101010100010101)))
(assert (= y (fp #b0 #b00001111001 #b1101111000011111010001001101000010110101100111110111)))
(assert (= r (fp #b1 #b01110111100 #b0010011011000110011110111001010111101101010100010100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
