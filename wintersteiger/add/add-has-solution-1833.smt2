(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.27361212056632222555663247476331889629364013671875p-847 {- 1232239444226540 -847 (-1.35716e-255)}
; Y = 1.52682327219894720116144526400603353977203369140625p-103 {+ 2372601092365284 -103 (1.50556e-031)}
; -1.27361212056632222555663247476331889629364013671875p-847 + 1.52682327219894720116144526400603353977203369140625p-103 == 1.5268232721989469791168403389747254550457000732421875p-103
; [HW: 1.5268232721989469791168403389747254550457000732421875p-103] 

; mpf : + 2372601092365283 -103
; mpfd: + 2372601092365283 -103 (1.50556e-031) class: Pos. norm. non-zero
; hwf : + 2372601092365283 -103 (1.50556e-031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110000 #b0100011000001011011100011010010110011111000111101100)))
(assert (= y (fp #b0 #b01110011000 #b1000011011011101111000111101010011011101101111100100)))
(assert (= r (fp #b0 #b01110011000 #b1000011011011101111000111101010011011101101111100011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
