(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.467690216327228736048482460319064557552337646484375p365 {- 2106289483976134 365 (-1.10302e+110)}
; Y = 1.2298833757685956324934295480488799512386322021484375p-858 {+ 1035302685450119 -858 (6.39923e-259)}
; -1.467690216327228736048482460319064557552337646484375p365 + 1.2298833757685956324934295480488799512386322021484375p-858 == -1.467690216327228736048482460319064557552337646484375p365
; [HW: -1.467690216327228736048482460319064557552337646484375p365] 

; mpf : - 2106289483976134 365
; mpfd: - 2106289483976134 365 (-1.10302e+110) class: Neg. norm. non-zero
; hwf : - 2106289483976134 365 (-1.10302e+110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101100 #b0111011110111010100010111100011111001000110111000110)))
(assert (= y (fp #b0 #b00010100101 #b0011101011011001101000110000110011010001111110000111)))
(assert (= r (fp #b1 #b10101101100 #b0111011110111010100010111100011111001000110111000110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
