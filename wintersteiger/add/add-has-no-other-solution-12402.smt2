(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8909551477867043711711403375375084578990936279296875p-201 {+ 4012505271576027 -201 (5.88372e-061)}
; Y = -1.597078698310121058767663271282799541950225830078125p-633 {- 2689003403220322 -633 (-4.48063e-191)}
; 1.8909551477867043711711403375375084578990936279296875p-201 + -1.597078698310121058767663271282799541950225830078125p-633 == 1.8909551477867043711711403375375084578990936279296875p-201
; [HW: 1.8909551477867043711711403375375084578990936279296875p-201] 

; mpf : + 4012505271576027 -201
; mpfd: + 4012505271576027 -201 (5.88372e-061) class: Pos. norm. non-zero
; hwf : + 4012505271576027 -201 (5.88372e-061) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110110 #b1110010000010101101000101111010111110010010111011011)))
(assert (= y (fp #b1 #b00110000110 #b1001100011011010001001100100101001100001010101100010)))
(assert (= r (fp #b0 #b01100110110 #b1110010000010101101000101111010111110010010111011011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
