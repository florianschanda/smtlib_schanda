(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.325684837845500396724673919379711151123046875p413 {- 1466754114361216 413 (-2.80433e+124)}
; Y = 1.287369745340347204631825661635957658290863037109375p-110 {+ 1294198278032342 -110 (9.91754e-034)}
; -1.325684837845500396724673919379711151123046875p413 + 1.287369745340347204631825661635957658290863037109375p-110 == -1.325684837845500396724673919379711151123046875p413
; [HW: -1.325684837845500396724673919379711151123046875p413] 

; mpf : - 1466754114361216 413
; mpfd: - 1466754114361216 413 (-2.80433e+124) class: Neg. norm. non-zero
; hwf : - 1466754114361216 413 (-2.80433e+124) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110011100 #b0101001101100000000101001101111101011001011110000000)))
(assert (= y (fp #b0 #b01110010001 #b0100100110010001000100000100101000011000101111010110)))
(assert (= r (fp #b1 #b10110011100 #b0101001101100000000101001101111101011001011110000000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
