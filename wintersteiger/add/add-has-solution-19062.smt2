(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0985349000208846081960700757917948067188262939453125p821 {+ 443761739017045 821 (1.53617e+247)}
; Y = -1.9500562971085668717563521568081341683864593505859375p-509 {- 4278673185639135 -509 (-1.16353e-153)}
; 1.0985349000208846081960700757917948067188262939453125p821 + -1.9500562971085668717563521568081341683864593505859375p-509 == 1.09853490002088438615146515076048672199249267578125p821
; [HW: 1.09853490002088438615146515076048672199249267578125p821] 

; mpf : + 443761739017044 821
; mpfd: + 443761739017044 821 (1.53617e+247) class: Pos. norm. non-zero
; hwf : + 443761739017044 821 (1.53617e+247) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100110100 #b0001100100111001100101010100110100011010101101010101)))
(assert (= y (fp #b1 #b01000000010 #b1111001100110110111000111011010101110000101011011111)))
(assert (= r (fp #b0 #b11100110100 #b0001100100111001100101010100110100011010101101010100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
