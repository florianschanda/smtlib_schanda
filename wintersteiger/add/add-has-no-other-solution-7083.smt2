(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1417236660230205558264060528017580509185791015625p-475 {- 638266649490856 -475 (-1.17034e-143)}
; Y = 1.8352001133985800240822072737501002848148345947265625p757 {+ 3761406919481641 757 (1.3912e+228)}
; -1.1417236660230205558264060528017580509185791015625p-475 + 1.8352001133985800240822072737501002848148345947265625p757 == 1.8352001133985800240822072737501002848148345947265625p757
; [HW: 1.8352001133985800240822072737501002848148345947265625p757] 

; mpf : + 3761406919481641 757
; mpfd: + 3761406919481641 757 (1.3912e+228) class: Pos. norm. non-zero
; hwf : + 3761406919481641 757 (1.3912e+228) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000100100 #b0010010001001000000000001000111010100011010110101000)))
(assert (= y (fp #b0 #b11011110100 #b1101010111001111101011001011010010101001100100101001)))
(assert (= r (fp #b0 #b11011110100 #b1101010111001111101011001011010010101001100100101001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
