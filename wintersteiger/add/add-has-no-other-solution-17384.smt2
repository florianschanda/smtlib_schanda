(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3333981749209524725330311412108130753040313720703125p991 {- 1501491896340005 991 (-2.79052e+298)}
; Y = -1.1919997846631671389872053623548708856105804443359375p-660 {- 864690158664255 -660 (-2.4916e-199)}
; -1.3333981749209524725330311412108130753040313720703125p991 + -1.1919997846631671389872053623548708856105804443359375p-660 == -1.3333981749209524725330311412108130753040313720703125p991
; [HW: -1.3333981749209524725330311412108130753040313720703125p991] 

; mpf : - 1501491896340005 991
; mpfd: - 1501491896340005 991 (-2.79052e+298) class: Neg. norm. non-zero
; hwf : - 1501491896340005 991 (-2.79052e+298) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111011110 #b0101010101011001100101010011000111010100111000100101)))
(assert (= y (fp #b1 #b00101101011 #b0011000100100110111001011101101111110111101000111111)))
(assert (= r (fp #b1 #b11111011110 #b0101010101011001100101010011000111010100111000100101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
