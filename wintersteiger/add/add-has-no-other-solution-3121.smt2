(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5989609442969030528303164828685112297534942626953125p-491 {+ 2697480285545013 -491 (2.50098e-148)}
; Y = -1.5018755999350121843605165850021876394748687744140625p56 {- 2260246764853665 56 (-1.08222e+017)}
; 1.5989609442969030528303164828685112297534942626953125p-491 + -1.5018755999350121843605165850021876394748687744140625p56 == -1.5018755999350121843605165850021876394748687744140625p56
; [HW: -1.5018755999350121843605165850021876394748687744140625p56] 

; mpf : - 2260246764853665 56
; mpfd: - 2260246764853665 56 (-1.08222e+017) class: Neg. norm. non-zero
; hwf : - 2260246764853665 56 (-1.08222e+017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000010100 #b1001100101010101100000010010001101010110001000110101)))
(assert (= y (fp #b1 #b10000110111 #b1000000001111010111010110101100001100001100110100001)))
(assert (= r (fp #b1 #b10000110111 #b1000000001111010111010110101100001100001100110100001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
