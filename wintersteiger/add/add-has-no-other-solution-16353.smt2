(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2715373979535138371232960707857273519039154052734375p-623 {- 1222895724240599 -623 (-3.65293e-188)}
; Y = 1.9927803663344227924625329251284711062908172607421875p-977 {+ 4471085287884451 -977 (1.5601e-294)}
; -1.2715373979535138371232960707857273519039154052734375p-623 + 1.9927803663344227924625329251284711062908172607421875p-977 == -1.271537397953513615078691145754419267177581787109375p-623
; [HW: -1.271537397953513615078691145754419267177581787109375p-623] 

; mpf : - 1222895724240598 -623
; mpfd: - 1222895724240598 -623 (-3.65293e-188) class: Neg. norm. non-zero
; hwf : - 1222895724240598 -623 (-3.65293e-188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110010000 #b0100010110000011011110011001001111011001111011010111)))
(assert (= y (fp #b0 #b00000101110 #b1111111000100110110110101010010110000100011010100011)))
(assert (= r (fp #b1 #b00110010000 #b0100010110000011011110011001001111011001111011010110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
