(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1698425871763233896416522838990204036235809326171875p18 {- 764903012318931 18 (-306667)}
; Y = 1.109045188654688818274962613941170275211334228515625p-283 {+ 491095870991802 -283 (7.13609e-086)}
; -1.1698425871763233896416522838990204036235809326171875p18 + 1.109045188654688818274962613941170275211334228515625p-283 == -1.169842587176323167597047358867712318897247314453125p18
; [HW: -1.169842587176323167597047358867712318897247314453125p18] 

; mpf : - 764903012318930 18
; mpfd: - 764903012318930 18 (-306667) class: Neg. norm. non-zero
; hwf : - 764903012318930 18 (-306667) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010001 #b0010101101111010110011011100010101100011111011010011)))
(assert (= y (fp #b0 #b01011100100 #b0001101111101010011000101010111100001110110110111010)))
(assert (= r (fp #b1 #b10000010001 #b0010101101111010110011011100010101100011111011010010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
