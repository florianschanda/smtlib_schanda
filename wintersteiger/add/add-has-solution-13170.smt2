(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.09014846907261730990512660355307161808013916015625p-576 {- 405992611723460 -576 (-4.40766e-174)}
; Y = -1.4561564830460269615031165812979452311992645263671875p-150 {- 2054346167068723 -150 (-1.02025e-045)}
; -1.09014846907261730990512660355307161808013916015625p-576 + -1.4561564830460269615031165812979452311992645263671875p-150 == -1.4561564830460269615031165812979452311992645263671875p-150
; [HW: -1.4561564830460269615031165812979452311992645263671875p-150] 

; mpf : - 2054346167068723 -150
; mpfd: - 2054346167068723 -150 (-1.02025e-045) class: Neg. norm. non-zero
; hwf : - 2054346167068723 -150 (-1.02025e-045) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111111 #b0001011100010011111110000101011001110011100011000100)))
(assert (= y (fp #b1 #b01101101001 #b0111010011000110101010111101100010001010100000110011)))
(assert (= r (fp #b1 #b01101101001 #b0111010011000110101010111101100010001010100000110011)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
