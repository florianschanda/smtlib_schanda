(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7199106606544127817670641888980753719806671142578125p14 {+ 3242189383063261 14 (28179)}
; Y = -1.5915039656601444040262549606268294155597686767578125p586 {- 2663897039335197 586 (-4.03074e+176)}
; 1.7199106606544127817670641888980753719806671142578125p14 + -1.5915039656601444040262549606268294155597686767578125p586 == -1.59150396566014418198165003559552133083343505859375p586
; [HW: -1.59150396566014418198165003559552133083343505859375p586] 

; mpf : - 2663897039335196 586
; mpfd: - 2663897039335196 586 (-4.03074e+176) class: Neg. norm. non-zero
; hwf : - 2663897039335196 586 (-4.03074e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000001101 #b1011100001001100000100001010011110001101011011011101)))
(assert (= y (fp #b1 #b11001001001 #b1001011101101100110011011100101111110110111100011101)))
(assert (= r (fp #b1 #b11001001001 #b1001011101101100110011011100101111110110111100011100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
