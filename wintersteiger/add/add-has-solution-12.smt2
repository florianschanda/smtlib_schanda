(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7590191128355538996430595943820662796497344970703125p-436 {+ 3418318193733285 -436 (9.91271e-132)}
; Y = 1.56412246727166692750188303762115538120269775390625p-598 {+ 2540581733396004 -598 (1.50776e-180)}
; 1.7590191128355538996430595943820662796497344970703125p-436 + 1.56412246727166692750188303762115538120269775390625p-598 == 1.7590191128355538996430595943820662796497344970703125p-436
; [HW: 1.7590191128355538996430595943820662796497344970703125p-436] 

; mpf : + 3418318193733285 -436
; mpfd: + 3418318193733285 -436 (9.91271e-132) class: Pos. norm. non-zero
; hwf : + 3418318193733285 -436 (9.91271e-132) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001011 #b1100001001001111000100111001101010101010111010100101)))
(assert (= y (fp #b0 #b00110101001 #b1001000001101010010101000111101111011110111000100100)))
(assert (= r (fp #b0 #b01001001011 #b1100001001001111000100111001101010101010111010100101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
