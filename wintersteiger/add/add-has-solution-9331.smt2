(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2425095726882080526820573140867054462432861328125p-599 {- 1092166021192392 -599 (-5.9887e-181)}
; Y = -1.9485795315784748549248206472839228808879852294921875p230 {- 4272022424948099 230 (-3.36215e+069)}
; -1.2425095726882080526820573140867054462432861328125p-599 + -1.9485795315784748549248206472839228808879852294921875p230 == -1.94857953157847507696942557231523096561431884765625p230
; [HW: -1.94857953157847507696942557231523096561431884765625p230] 

; mpf : - 4272022424948100 230
; mpfd: - 4272022424948100 230 (-3.36215e+069) class: Neg. norm. non-zero
; hwf : - 4272022424948100 230 (-3.36215e+069) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101000 #b0011111000010101000110110111101110101001101011001000)))
(assert (= y (fp #b1 #b10011100101 #b1111001011010110000110111011000111001000110110000011)))
(assert (= r (fp #b1 #b10011100101 #b1111001011010110000110111011000111001000110110000100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
