(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5322017244981538386383590477635152637958526611328125p-174 {- 2396823488135821 -174 (-6.39877e-053)}
; Y = 1.828701593277139547666365615441463887691497802734375p-597 {+ 3732140186684262 -597 (3.52562e-180)}
; -1.5322017244981538386383590477635152637958526611328125p-174 + 1.828701593277139547666365615441463887691497802734375p-597 == -1.5322017244981538386383590477635152637958526611328125p-174
; [HW: -1.5322017244981538386383590477635152637958526611328125p-174] 

; mpf : - 2396823488135821 -174
; mpfd: - 2396823488135821 -174 (-6.39877e-053) class: Neg. norm. non-zero
; hwf : - 2396823488135821 -174 (-6.39877e-053) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010001 #b1000100000111110010111110100100110011000001010001101)))
(assert (= y (fp #b0 #b00110101010 #b1101010000100101110010011010000101000100101101100110)))
(assert (= r (fp #b1 #b01101010001 #b1000100000111110010111110100100110011000001010001101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
