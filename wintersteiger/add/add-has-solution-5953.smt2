(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1180215153798183091993223570170812308788299560546875p504 {+ 531521652686251 504 (5.85555e+151)}
; Y = -1.304305193495677972492785556823946535587310791015625p716 {- 1370468756034042 716 (-4.49631e+215)}
; 1.1180215153798183091993223570170812308788299560546875p504 + -1.304305193495677972492785556823946535587310791015625p716 == -1.304305193495677972492785556823946535587310791015625p716
; [HW: -1.304305193495677972492785556823946535587310791015625p716] 

; mpf : - 1370468756034042 716
; mpfd: - 1370468756034042 716 (-4.49631e+215) class: Neg. norm. non-zero
; hwf : - 1370468756034042 716 (-4.49631e+215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111110111 #b0001111000110110101010000111010011000111110110101011)))
(assert (= y (fp #b1 #b11011001011 #b0100110111100110111100011111011000010001000111111010)))
(assert (= r (fp #b1 #b11011001011 #b0100110111100110111100011111011000010001000111111010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
