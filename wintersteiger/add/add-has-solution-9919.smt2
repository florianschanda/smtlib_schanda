(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.432918042956412563171397778205573558807373046875p-828 {- 1949689536940464 -828 (-8.00544e-250)}
; Y = -1.4502941889436427036486065844655968248844146728515625p-304 {- 2027944741533689 -304 (-4.44977e-092)}
; -1.432918042956412563171397778205573558807373046875p-828 + -1.4502941889436427036486065844655968248844146728515625p-304 == -1.4502941889436427036486065844655968248844146728515625p-304
; [HW: -1.4502941889436427036486065844655968248844146728515625p-304] 

; mpf : - 2027944741533689 -304
; mpfd: - 2027944741533689 -304 (-4.44977e-092) class: Neg. norm. non-zero
; hwf : - 2027944741533689 -304 (-4.44977e-092) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000011 #b0110111011010011101101111000010001011000100110110000)))
(assert (= y (fp #b1 #b01011001111 #b0111001101000110011110101101111100010111011111111001)))
(assert (= r (fp #b1 #b01011001111 #b0111001101000110011110101101111100010111011111111001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
