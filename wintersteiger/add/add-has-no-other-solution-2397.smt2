(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5149751460035052463837246250477619469165802001953125p170 {+ 2319241875646453 170 (2.26728e+051)}
; Y = 1.6141155644515283729134580426034517586231231689453125p352 {+ 2765730627226325 352 (1.48079e+106)}
; 1.5149751460035052463837246250477619469165802001953125p170 + 1.6141155644515283729134580426034517586231231689453125p352 == 1.6141155644515283729134580426034517586231231689453125p352
; [HW: 1.6141155644515283729134580426034517586231231689453125p352] 

; mpf : + 2765730627226325 352
; mpfd: + 2765730627226325 352 (1.48079e+106) class: Pos. norm. non-zero
; hwf : + 2765730627226325 352 (1.48079e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010101001 #b1000001111010101011010010100001001010110011111110101)))
(assert (= y (fp #b0 #b10101011111 #b1001110100110110101011010111100101001000101011010101)))
(assert (= r (fp #b0 #b10101011111 #b1001110100110110101011010111100101001000101011010101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
