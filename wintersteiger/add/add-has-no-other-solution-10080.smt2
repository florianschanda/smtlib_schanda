(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6639203308078343024334344590897671878337860107421875p-87 {+ 2990031354429859 -87 (1.07528e-026)}
; Y = -1.997720573958140288794993466581217944622039794921875p776 {- 4493334005097758 776 (-7.93983e+233)}
; 1.6639203308078343024334344590897671878337860107421875p-87 + -1.997720573958140288794993466581217944622039794921875p776 == -1.9977205739581400667503885415499098598957061767578125p776
; [HW: -1.9977205739581400667503885415499098598957061767578125p776] 

; mpf : - 4493334005097757 776
; mpfd: - 4493334005097757 776 (-7.93983e+233) class: Neg. norm. non-zero
; hwf : - 4493334005097757 776 (-7.93983e+233) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101000 #b1010100111110110101011101100101111111000000110100011)))
(assert (= y (fp #b1 #b11100000111 #b1111111101101010100111011001001110110010010100011110)))
(assert (= r (fp #b1 #b11100000111 #b1111111101101010100111011001001110110010010100011101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
