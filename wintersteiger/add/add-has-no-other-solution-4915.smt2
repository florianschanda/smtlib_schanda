(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8834732160177003468248813078389503061771392822265625p-21 {- 3978809646449129 -21 (-8.9811e-007)}
; Y = -1.7386286130968546803643448583898134529590606689453125p-707 {- 3326487546708181 -707 (-2.58226e-213)}
; -1.8834732160177003468248813078389503061771392822265625p-21 + -1.7386286130968546803643448583898134529590606689453125p-707 == -1.8834732160177003468248813078389503061771392822265625p-21
; [HW: -1.8834732160177003468248813078389503061771392822265625p-21] 

; mpf : - 3978809646449129 -21
; mpfd: - 3978809646449129 -21 (-8.9811e-007) class: Neg. norm. non-zero
; hwf : - 3978809646449129 -21 (-8.9811e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111101010 #b1110001000101011010011001111100110110000000111101001)))
(assert (= y (fp #b1 #b00100111100 #b1011110100010110110000111100100100100100000011010101)))
(assert (= r (fp #b1 #b01111101010 #b1110001000101011010011001111100110110000000111101001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
