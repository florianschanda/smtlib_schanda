(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3294633473297483572395094597595743834972381591796875p-160 {- 1483771008266491 -160 (-9.09656e-049)}
; Y = 1.6765540478561626880349422208382748067378997802734375p678 {+ 3046928557821015 678 (2.10259e+204)}
; -1.3294633473297483572395094597595743834972381591796875p-160 + 1.6765540478561626880349422208382748067378997802734375p678 == 1.6765540478561626880349422208382748067378997802734375p678
; [HW: 1.6765540478561626880349422208382748067378997802734375p678] 

; mpf : + 3046928557821015 678
; mpfd: + 3046928557821015 678 (2.10259e+204) class: Pos. norm. non-zero
; hwf : + 3046928557821015 678 (2.10259e+204) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101011111 #b0101010001010111101101011011111000000011000011111011)))
(assert (= y (fp #b0 #b11010100101 #b1010110100110010101001010110010110000100110001010111)))
(assert (= r (fp #b0 #b11010100101 #b1010110100110010101001010110010110000100110001010111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
