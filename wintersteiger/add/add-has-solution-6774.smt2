(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.365303116187331244901770332944579422473907470703125p-193 {+ 1645178977938546 -193 (1.08753e-058)}
; Y = 1.3962813024234304037918263929896056652069091796875p481 {+ 1784692325928056 481 (8.71768e+144)}
; 1.365303116187331244901770332944579422473907470703125p-193 + 1.3962813024234304037918263929896056652069091796875p481 == 1.3962813024234304037918263929896056652069091796875p481
; [HW: 1.3962813024234304037918263929896056652069091796875p481] 

; mpf : + 1784692325928056 481
; mpfd: + 1784692325928056 481 (8.71768e+144) class: Pos. norm. non-zero
; hwf : + 1784692325928056 481 (8.71768e+144) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111110 #b0101110110000100100000010100100100100110110001110010)))
(assert (= y (fp #b0 #b10111100000 #b0110010101110010101100010000000111101100110001111000)))
(assert (= r (fp #b0 #b10111100000 #b0110010101110010101100010000000111101100110001111000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
