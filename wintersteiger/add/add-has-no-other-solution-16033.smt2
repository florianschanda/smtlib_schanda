(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7440712950290218063997826902777887880802154541015625p628 {+ 3350999207029785 628 (1.94268e+189)}
; Y = 1.8168543538343568943815853344858624041080474853515625p-294 {+ 3678784963544377 -294 (5.70823e-089)}
; 1.7440712950290218063997826902777887880802154541015625p628 + 1.8168543538343568943815853344858624041080474853515625p-294 == 1.744071295029022028444387615309096872806549072265625p628
; [HW: 1.744071295029022028444387615309096872806549072265625p628] 

; mpf : + 3350999207029786 628
; mpfd: + 3350999207029786 628 (1.94268e+189) class: Pos. norm. non-zero
; hwf : + 3350999207029786 628 (1.94268e+189) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110011 #b1011111001111011011101001101011000001010110000011001)))
(assert (= y (fp #b0 #b01011011001 #b1101000100011101010111011110111101010000010100111001)))
(assert (= r (fp #b0 #b11001110011 #b1011111001111011011101001101011000001010110000011010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
