(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4799989360463710053039676495245657861232757568359375p-863 {- 2161723029516671 -863 (-2.40644e-260)}
; Y = 1.3288634932293763579735923485714010894298553466796875p-42 {+ 1481069505563579 -42 (3.02149e-013)}
; -1.4799989360463710053039676495245657861232757568359375p-863 + 1.3288634932293763579735923485714010894298553466796875p-42 == 1.328863493229376135928987423540093004703521728515625p-42
; [HW: 1.328863493229376135928987423540093004703521728515625p-42] 

; mpf : + 1481069505563578 -42
; mpfd: + 1481069505563578 -42 (3.02149e-013) class: Pos. norm. non-zero
; hwf : + 1481069505563578 -42 (3.02149e-013) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010100000 #b0111101011100001001101011101010001101111000101111111)))
(assert (= y (fp #b0 #b01111010101 #b0101010000110000011001011101110001000100101110111011)))
(assert (= r (fp #b0 #b01111010101 #b0101010000110000011001011101110001000100101110111010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
