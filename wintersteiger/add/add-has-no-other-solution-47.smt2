(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9971875119721833602426386278239078819751739501953125p-301 {- 4490933307336437 -301 (-4.90219e-091)}
; Y = -1.854881039538343490136185209848918020725250244140625p-597 {- 3850041931110986 -597 (-3.57609e-180)}
; -1.9971875119721833602426386278239078819751739501953125p-301 + -1.854881039538343490136185209848918020725250244140625p-597 == -1.997187511972183582287243552855215966701507568359375p-301
; [HW: -1.997187511972183582287243552855215966701507568359375p-301] 

; mpf : - 4490933307336438 -301
; mpfd: - 4490933307336438 -301 (-4.90219e-091) class: Neg. norm. non-zero
; hwf : - 4490933307336438 -301 (-4.90219e-091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010010 #b1111111101000111101011100100011111100110011011110101)))
(assert (= y (fp #b1 #b00110101010 #b1101101011011001011110111101101011001001101001001010)))
(assert (= r (fp #b1 #b01011010010 #b1111111101000111101011100100011111100110011011110110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
