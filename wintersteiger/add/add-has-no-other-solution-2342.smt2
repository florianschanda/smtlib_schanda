(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5797488830345411958688828235608525574207305908203125p-728 {- 2610956853602821 -728 (-1.1188e-219)}
; Y = 1.7888405839963230636868729561683721840381622314453125p192 {+ 3552622160140565 192 (1.12287e+058)}
; -1.5797488830345411958688828235608525574207305908203125p-728 + 1.7888405839963230636868729561683721840381622314453125p192 == 1.78884058399632284164226803113706409931182861328125p192
; [HW: 1.78884058399632284164226803113706409931182861328125p192] 

; mpf : + 3552622160140564 192
; mpfd: + 3552622160140564 192 (1.12287e+058) class: Pos. norm. non-zero
; hwf : + 3552622160140564 192 (1.12287e+058) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100111 #b1001010001101010011011000011110010000110101000000101)))
(assert (= y (fp #b0 #b10010111111 #b1100100111110001011101001101111000000101100100010101)))
(assert (= r (fp #b0 #b10010111111 #b1100100111110001011101001101111000000101100100010100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
