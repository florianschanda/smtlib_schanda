(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.72179662485542106509228688082657754421234130859375p162 {- 3250683010736156 162 (-1.00656e+049)}
; Y = 1.18141607230684630991390804410912096500396728515625p-782 {+ 817025355640132 -782 (4.64458e-236)}
; -1.72179662485542106509228688082657754421234130859375p162 + 1.18141607230684630991390804410912096500396728515625p-782 == -1.7217966248554208430476819557952694594860076904296875p162
; [HW: -1.7217966248554208430476819557952694594860076904296875p162] 

; mpf : - 3250683010736155 162
; mpfd: - 3250683010736155 162 (-1.00656e+049) class: Neg. norm. non-zero
; hwf : - 3250683010736155 162 (-1.00656e+049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010100001 #b1011100011000111101010011110001000011110000000011100)))
(assert (= y (fp #b0 #b00011110001 #b0010111001110001010010001010000110000110110101000100)))
(assert (= r (fp #b1 #b10010100001 #b1011100011000111101010011110001000011110000000011011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
