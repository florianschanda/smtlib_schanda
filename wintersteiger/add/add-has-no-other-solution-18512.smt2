(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5753920030071506541702319736941717565059661865234375p439 {+ 2591335210334967 439 (2.23644e+132)}
; Y = 1.295203700091687171180865334463305771350860595703125p878 {+ 1329479273731314 878 (2.6102e+264)}
; 1.5753920030071506541702319736941717565059661865234375p439 + 1.295203700091687171180865334463305771350860595703125p878 == 1.2952037000916873932254702594946138560771942138671875p878
; [HW: 1.2952037000916873932254702594946138560771942138671875p878] 

; mpf : + 1329479273731315 878
; mpfd: + 1329479273731315 878 (2.6102e+264) class: Pos. norm. non-zero
; hwf : + 1329479273731315 878 (2.6102e+264) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110110110 #b1001001101001100111000111110101101001011101011110111)))
(assert (= y (fp #b0 #b11101101101 #b0100101110010010011110000011110110001101010011110010)))
(assert (= r (fp #b0 #b11101101101 #b0100101110010010011110000011110110001101010011110011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
