(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.46169436029040067381856715655885636806488037109375p1006 {- 2079286548962908 1006 (-1.00238e+303)}
; Y = -1.8575401109051856707310435012914240360260009765625p155 {- 3862017323927848 155 (-8.48374e+046)}
; -1.46169436029040067381856715655885636806488037109375p1006 + -1.8575401109051856707310435012914240360260009765625p155 == -1.46169436029040067381856715655885636806488037109375p1006
; [HW: -1.46169436029040067381856715655885636806488037109375p1006] 

; mpf : - 2079286548962908 1006
; mpfd: - 2079286548962908 1006 (-1.00238e+303) class: Neg. norm. non-zero
; hwf : - 2079286548962908 1006 (-1.00238e+303) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101101 #b0111011000110001100110100000001000110001111001011100)))
(assert (= y (fp #b1 #b10010011010 #b1101101110000111101111111010101101011000100100101000)))
(assert (= r (fp #b1 #b11111101101 #b0111011000110001100110100000001000110001111001011100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
