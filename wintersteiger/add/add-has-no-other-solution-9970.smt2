(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7967035437477505421810519692371599376201629638671875p-677 {- 3588033782747123 -677 (-2.8653e-204)}
; Y = -1.1363867858186853521118564458447508513927459716796875p431 {- 614231477791291 431 (-6.30165e+129)}
; -1.7967035437477505421810519692371599376201629638671875p-677 + -1.1363867858186853521118564458447508513927459716796875p431 == -1.1363867858186853521118564458447508513927459716796875p431
; [HW: -1.1363867858186853521118564458447508513927459716796875p431] 

; mpf : - 614231477791291 431
; mpfd: - 614231477791291 431 (-6.30165e+129) class: Neg. norm. non-zero
; hwf : - 614231477791291 431 (-6.30165e+129) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101011010 #b1100101111110100110000110111000100000000111111110011)))
(assert (= y (fp #b1 #b10110101110 #b0010001011101010001111101001000010110010101000111011)))
(assert (= r (fp #b1 #b10110101110 #b0010001011101010001111101001000010110010101000111011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
