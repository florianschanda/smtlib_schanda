(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1230125067494187707239916562684811651706695556640625p733 {- 553999079558593 733 (-5.07424e+220)}
; Y = -1.6931671513894521741150356319849379360675811767578125p-805 {- 3121747324703005 -805 (-7.93512e-243)}
; -1.1230125067494187707239916562684811651706695556640625p733 + -1.6931671513894521741150356319849379360675811767578125p-805 == -1.1230125067494187707239916562684811651706695556640625p733
; [HW: -1.1230125067494187707239916562684811651706695556640625p733] 

; mpf : - 553999079558593 733
; mpfd: - 553999079558593 733 (-5.07424e+220) class: Neg. norm. non-zero
; hwf : - 553999079558593 733 (-5.07424e+220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011011100 #b0001111101111101101111110110010101111100110111000001)))
(assert (= y (fp #b1 #b00011011010 #b1011000101110011011001110000010111100001000100011101)))
(assert (= r (fp #b1 #b11011011100 #b0001111101111101101111110110010101111100110111000001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
