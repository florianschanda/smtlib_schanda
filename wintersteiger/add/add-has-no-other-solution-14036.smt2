(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8330113089872004383806824989733286201953887939453125p-32 {+ 3751549420750165 -32 (4.26781e-010)}
; Y = -1.2968393974167724547186253403197042644023895263671875p223 {- 1336845799595059 223 (-1.74814e+067)}
; 1.8330113089872004383806824989733286201953887939453125p-32 + -1.2968393974167724547186253403197042644023895263671875p223 == -1.296839397416772232674020415288396179676055908203125p223
; [HW: -1.296839397416772232674020415288396179676055908203125p223] 

; mpf : - 1336845799595058 223
; mpfd: - 1336845799595058 223 (-1.74814e+067) class: Neg. norm. non-zero
; hwf : - 1336845799595058 223 (-1.74814e+067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011111 #b1101010101000000001110101010100101001100010101010101)))
(assert (= y (fp #b1 #b10011011110 #b0100101111111101101010101011000000010001110000110011)))
(assert (= r (fp #b1 #b10011011110 #b0100101111111101101010101011000000010001110000110010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
