(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.225226230762300527743491329601965844631195068359375p-119 {- 1014328768935158 -119 (-1.84352e-036)}
; Y = 1.7040647660940473340218659359379671514034271240234375p-899 {+ 3170825818225847 -899 (4.032e-271)}
; -1.225226230762300527743491329601965844631195068359375p-119 + 1.7040647660940473340218659359379671514034271240234375p-899 == -1.225226230762300527743491329601965844631195068359375p-119
; [HW: -1.225226230762300527743491329601965844631195068359375p-119] 

; mpf : - 1014328768935158 -119
; mpfd: - 1014328768935158 -119 (-1.84352e-036) class: Neg. norm. non-zero
; hwf : - 1014328768935158 -119 (-1.84352e-036) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110001000 #b0011100110101000011011010001111101010011010011110110)))
(assert (= y (fp #b0 #b00001111100 #b1011010000111101100101101010100010100011110010110111)))
(assert (= r (fp #b1 #b01110001000 #b0011100110101000011011010001111101010011010011110110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
