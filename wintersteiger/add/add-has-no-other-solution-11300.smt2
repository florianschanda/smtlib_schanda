(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.357289071993985185571318652364425361156463623046875p-972 {- 1609086931495662 -972 (-3.40029e-293)}
; Y = 1.8681491746374081497350516656297259032726287841796875p-681 {+ 3909796299399035 -681 (1.86202e-205)}
; -1.357289071993985185571318652364425361156463623046875p-972 + 1.8681491746374081497350516656297259032726287841796875p-681 == 1.8681491746374081497350516656297259032726287841796875p-681
; [HW: 1.8681491746374081497350516656297259032726287841796875p-681] 

; mpf : + 3909796299399035 -681
; mpfd: + 3909796299399035 -681 (1.86202e-205) class: Pos. norm. non-zero
; hwf : + 3909796299399035 -681 (1.86202e-205) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000110011 #b0101101101110111010010111110111101101110101011101110)))
(assert (= y (fp #b0 #b00101010110 #b1101111000111111000001100011100100011101111101111011)))
(assert (= r (fp #b0 #b00101010110 #b1101111000111111000001100011100100011101111101111011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
