(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.063167117133404726558865149854682385921478271484375p-699 {- 284479405184070 -699 (-4.04236e-211)}
; Y = 1.8501104747235055381082702297135256230831146240234375p286 {+ 3828557217188535 286 (2.30026e+086)}
; -1.063167117133404726558865149854682385921478271484375p-699 + 1.8501104747235055381082702297135256230831146240234375p286 == 1.8501104747235055381082702297135256230831146240234375p286
; [HW: 1.8501104747235055381082702297135256230831146240234375p286] 

; mpf : + 3828557217188535 286
; mpfd: + 3828557217188535 286 (2.30026e+086) class: Pos. norm. non-zero
; hwf : + 3828557217188535 286 (2.30026e+086) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000100 #b0001000000101011101110000101111001000101010001000110)))
(assert (= y (fp #b0 #b10100011101 #b1101100110100000110101110000111011101100101010110111)))
(assert (= r (fp #b0 #b10100011101 #b1101100110100000110101110000111011101100101010110111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
