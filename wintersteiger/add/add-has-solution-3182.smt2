(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7482221346386312976761701065697707235813140869140625p890 {+ 3369692926748897 890 (1.44309e+268)}
; Y = 1.6682979561746567043201139313168823719024658203125p-636 {+ 3009746426400648 -636 (5.85055e-192)}
; 1.7482221346386312976761701065697707235813140869140625p890 + 1.6682979561746567043201139313168823719024658203125p-636 == 1.7482221346386312976761701065697707235813140869140625p890
; [HW: 1.7482221346386312976761701065697707235813140869140625p890] 

; mpf : + 3369692926748897 890
; mpfd: + 3369692926748897 890 (1.44309e+268) class: Pos. norm. non-zero
; hwf : + 3369692926748897 890 (1.44309e+268) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111001 #b1011111110001011011111000101111001101010100011100001)))
(assert (= y (fp #b0 #b00110000011 #b1010101100010101100100110010100111000000111110001000)))
(assert (= r (fp #b0 #b11101111001 #b1011111110001011011111000101111001101010100011100001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
