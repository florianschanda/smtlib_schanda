(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2005029680964114380259388781269080936908721923828125p-823 {+ 902985092405677 -823 (2.14623e-248)}
; Y = 1.8860559912071419574886022019200026988983154296875p-950 {+ 3990441431829880 -950 (1.98179e-286)}
; 1.2005029680964114380259388781269080936908721923828125p-823 + 1.8860559912071419574886022019200026988983154296875p-950 == 1.2005029680964114380259388781269080936908721923828125p-823
; [HW: 1.2005029680964114380259388781269080936908721923828125p-823] 

; mpf : + 902985092405677 -823
; mpfd: + 902985092405677 -823 (2.14623e-248) class: Pos. norm. non-zero
; hwf : + 902985092405677 -823 (2.14623e-248) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001000 #b0011001101010100001010011001101010111001100110101101)))
(assert (= y (fp #b0 #b00001001001 #b1110001011010100100100001100000010101000110101111000)))
(assert (= r (fp #b0 #b00011001000 #b0011001101010100001010011001101010111001100110101101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
