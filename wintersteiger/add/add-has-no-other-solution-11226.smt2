(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.512843327324691511392984466510824859142303466796875p398 {+ 2309641017838926 398 (9.76635e+119)}
; Y = -1.0552091878109137734753630866180174052715301513671875p-289 {- 248640077652659 -289 (-1.06089e-087)}
; 1.512843327324691511392984466510824859142303466796875p398 + -1.0552091878109137734753630866180174052715301513671875p-289 == 1.512843327324691511392984466510824859142303466796875p398
; [HW: 1.512843327324691511392984466510824859142303466796875p398] 

; mpf : + 2309641017838926 398
; mpfd: + 2309641017838926 398 (9.76635e+119) class: Pos. norm. non-zero
; hwf : + 2309641017838926 398 (9.76635e+119) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110001101 #b1000001101001001101100110100011011010100110101001110)))
(assert (= y (fp #b1 #b01011011110 #b0000111000100010001100000111100000010110001010110011)))
(assert (= r (fp #b0 #b10110001101 #b1000001101001001101100110100011011010100110101001110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
