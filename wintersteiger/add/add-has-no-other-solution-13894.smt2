(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2665541875076353761642167228274047374725341796875p234 {- 1200453339533432 234 (-3.49657e+070)}
; Y = -1.1378615624954144802671862635179422795772552490234375p-883 {- 620873281483063 -883 (-1.76443e-266)}
; -1.2665541875076353761642167228274047374725341796875p234 + -1.1378615624954144802671862635179422795772552490234375p-883 == -1.2665541875076355982088216478587128221988677978515625p234
; [HW: -1.2665541875076355982088216478587128221988677978515625p234] 

; mpf : - 1200453339533433 234
; mpfd: - 1200453339533433 234 (-3.49657e+070) class: Neg. norm. non-zero
; hwf : - 1200453339533433 234 (-3.49657e+070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101001 #b0100010000111100111001010010110111110101000001111000)))
(assert (= y (fp #b1 #b00010001100 #b0010001101001010111001010011011001001011000100110111)))
(assert (= r (fp #b1 #b10011101001 #b0100010000111100111001010010110111110101000001111001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
