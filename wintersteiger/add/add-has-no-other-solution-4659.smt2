(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.971311399362351668429482742794789373874664306640625p970 {- 4374397656229002 970 (-1.96721e+292)}
; Y = -1.3792852805978099706152306680451147258281707763671875p-504 {- 1708149048367411 -504 (-2.63352e-152)}
; -1.971311399362351668429482742794789373874664306640625p970 + -1.3792852805978099706152306680451147258281707763671875p-504 == -1.9713113993623518904740876678260974586009979248046875p970
; [HW: -1.9713113993623518904740876678260974586009979248046875p970] 

; mpf : - 4374397656229003 970
; mpfd: - 4374397656229003 970 (-1.96721e+292) class: Neg. norm. non-zero
; hwf : - 4374397656229003 970 (-1.96721e+292) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001001 #b1111100010100111110111010010011001111110010010001010)))
(assert (= y (fp #b1 #b01000000111 #b0110000100011000110101110001010000000101100100110011)))
(assert (= r (fp #b1 #b11111001001 #b1111100010100111110111010010011001111110010010001011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
