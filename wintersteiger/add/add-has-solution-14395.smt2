(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.30770582933439261097419148427434265613555908203125p-952 {+ 1385783858330100 -952 (3.43522e-287)}
; Y = 1.41390303206827372406451104325242340564727783203125p813 {+ 1864053540990196 813 (7.72336e+244)}
; 1.30770582933439261097419148427434265613555908203125p-952 + 1.41390303206827372406451104325242340564727783203125p813 == 1.41390303206827372406451104325242340564727783203125p813
; [HW: 1.41390303206827372406451104325242340564727783203125p813] 

; mpf : + 1864053540990196 813
; mpfd: + 1864053540990196 813 (7.72336e+244) class: Pos. norm. non-zero
; hwf : + 1864053540990196 813 (7.72336e+244) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000111 #b0100111011000101110011110010100111000111100111110100)))
(assert (= y (fp #b0 #b11100101100 #b0110100111110101100011001001001001110010110011110100)))
(assert (= r (fp #b0 #b11100101100 #b0110100111110101100011001001001001110010110011110100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
