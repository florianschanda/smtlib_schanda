(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0733746826382402073107869000523351132869720458984375p-397 {- 330450193388007 -397 (-3.32539e-120)}
; Y = -1.43091896974518117957586582633666694164276123046875p-878 {- 1940686511571276 -878 (-7.10034e-265)}
; -1.0733746826382402073107869000523351132869720458984375p-397 + -1.43091896974518117957586582633666694164276123046875p-878 == -1.0733746826382404293553918250836431980133056640625p-397
; [HW: -1.0733746826382404293553918250836431980133056640625p-397] 

; mpf : - 330450193388008 -397
; mpfd: - 330450193388008 -397 (-3.32539e-120) class: Neg. norm. non-zero
; hwf : - 330450193388008 -397 (-3.32539e-120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110010 #b0001001011001000101011101110011001001001000111100111)))
(assert (= y (fp #b1 #b00010010001 #b0110111001010000101101001010001001001000000101001100)))
(assert (= r (fp #b1 #b01001110010 #b0001001011001000101011101110011001001001000111101000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
