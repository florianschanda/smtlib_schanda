(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.605586562059825528336887145997025072574615478515625p-62 {- 2727319415233210 -62 (-3.48156e-019)}
; Y = 1.131563174581403874441321022459305822849273681640625p635 {+ 592507864020490 635 (1.61334e+191)}
; -1.605586562059825528336887145997025072574615478515625p-62 + 1.131563174581403874441321022459305822849273681640625p635 == 1.131563174581403874441321022459305822849273681640625p635
; [HW: 1.131563174581403874441321022459305822849273681640625p635] 

; mpf : + 592507864020490 635
; mpfd: + 592507864020490 635 (1.61334e+191) class: Pos. norm. non-zero
; hwf : + 592507864020490 635 (1.61334e+191) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000001 #b1001101100000111101110001000111011110001101010111010)))
(assert (= y (fp #b0 #b11001111010 #b0010000110101110000111111100110000101111011000001010)))
(assert (= r (fp #b0 #b11001111010 #b0010000110101110000111111100110000101111011000001010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
