(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1295755340645856623638110249885357916355133056640625p231 {+ 583556326929601 231 (3.89802e+069)}
; Y = -1.119022706203975037198006248218007385730743408203125p-918 {- 536030615308850 -918 (-5.05013e-277)}
; 1.1295755340645856623638110249885357916355133056640625p231 + -1.119022706203975037198006248218007385730743408203125p-918 == 1.1295755340645856623638110249885357916355133056640625p231
; [HW: 1.1295755340645856623638110249885357916355133056640625p231] 

; mpf : + 583556326929601 231
; mpfd: + 583556326929601 231 (3.89802e+069) class: Pos. norm. non-zero
; hwf : + 583556326929601 231 (3.89802e+069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100110 #b0010000100101011110111001011100100101011010011000001)))
(assert (= y (fp #b1 #b00001101001 #b0001111001111000010001011010011010100000101000110010)))
(assert (= r (fp #b0 #b10011100110 #b0010000100101011110111001011100100101011010011000001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
