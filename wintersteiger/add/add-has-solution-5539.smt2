(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.58627776830949063224807105143554508686065673828125p637 {+ 2640360338894228 637 (9.04662e+191)}
; Y = -1.4330126724210432431760864346870221197605133056640625p863 {- 1950115710162113 863 (-8.81325e+259)}
; 1.58627776830949063224807105143554508686065673828125p637 + -1.4330126724210432431760864346870221197605133056640625p863 == -1.4330126724210432431760864346870221197605133056640625p863
; [HW: -1.4330126724210432431760864346870221197605133056640625p863] 

; mpf : - 1950115710162113 863
; mpfd: - 1950115710162113 863 (-8.81325e+259) class: Neg. norm. non-zero
; hwf : - 1950115710162113 863 (-8.81325e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001111100 #b1001011000010110010011001100000101000010110110010100)))
(assert (= y (fp #b1 #b11101011110 #b0110111011011001111010110010001011001101010011000001)))
(assert (= r (fp #b1 #b11101011110 #b0110111011011001111010110010001011001101010011000001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
