(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3441614942800603760275635067955590784549713134765625p937 {- 1549965577394953 937 (-1.56156e+282)}
; Y = -1.2092045113354650265335976655478589236736297607421875p-376 {- 942173359294627 -376 (-7.85636e-114)}
; -1.3441614942800603760275635067955590784549713134765625p937 + -1.2092045113354650265335976655478589236736297607421875p-376 == -1.3441614942800603760275635067955590784549713134765625p937
; [HW: -1.3441614942800603760275635067955590784549713134765625p937] 

; mpf : - 1549965577394953 937
; mpfd: - 1549965577394953 937 (-1.56156e+282) class: Neg. norm. non-zero
; hwf : - 1549965577394953 937 (-1.56156e+282) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110101000 #b0101100000011010111101111011101001111001101100001001)))
(assert (= y (fp #b1 #b01010000111 #b0011010110001110011011010100011001011100100010100011)))
(assert (= r (fp #b1 #b11110101000 #b0101100000011010111101111011101001111001101100001001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
