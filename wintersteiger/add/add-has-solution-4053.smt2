(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.211387471877269472742000289144925773143768310546875p477 {+ 952004539577262 477 (4.72706e+143)}
; Y = -1.8374450325044608955948888251441530883312225341796875p-412 {- 3771517136330363 -412 (-1.73723e-124)}
; 1.211387471877269472742000289144925773143768310546875p477 + -1.8374450325044608955948888251441530883312225341796875p-412 == 1.2113874718772692506973953641136176884174346923828125p477
; [HW: 1.2113874718772692506973953641136176884174346923828125p477] 

; mpf : + 952004539577261 477
; mpfd: + 952004539577261 477 (4.72706e+143) class: Pos. norm. non-zero
; hwf : + 952004539577261 477 (4.72706e+143) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111011100 #b0011011000011101011111010100011001111111001110101110)))
(assert (= y (fp #b1 #b01001100011 #b1101011001100010110011000011001011001101111001111011)))
(assert (= r (fp #b0 #b10111011100 #b0011011000011101011111010100011001111111001110101101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
