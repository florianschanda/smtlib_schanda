(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4440705524925683267412068744306452572345733642578125p-139 {- 1999915974731741 -139 (-2.07214e-042)}
; Y = 1.159655982231277082661335953162051737308502197265625p-302 {+ 719026622084250 -302 (1.42321e-091)}
; -1.4440705524925683267412068744306452572345733642578125p-139 + 1.159655982231277082661335953162051737308502197265625p-302 == -1.44407055249256810469660194939933717250823974609375p-139
; [HW: -1.44407055249256810469660194939933717250823974609375p-139] 

; mpf : - 1999915974731740 -139
; mpfd: - 1999915974731740 -139 (-2.07214e-042) class: Neg. norm. non-zero
; hwf : - 1999915974731740 -139 (-2.07214e-042) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110100 #b0111000110101110100110111001010000010010011111011101)))
(assert (= y (fp #b0 #b01011010001 #b0010100011011111001101101110011001001011010010011010)))
(assert (= r (fp #b1 #b01101110100 #b0111000110101110100110111001010000010010011111011100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
