(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.658220806713266437526499430532567203044891357421875p282 {- 2964362979841374 282 (-1.28855e+085)}
; Y = -1.6490475664335197958365597514784894883632659912109375p-265 {- 2923050378335727 -265 (-2.78153e-080)}
; -1.658220806713266437526499430532567203044891357421875p282 + -1.6490475664335197958365597514784894883632659912109375p-265 == -1.6582208067132666595711043555638752877712249755859375p282
; [HW: -1.6582208067132666595711043555638752877712249755859375p282] 

; mpf : - 2964362979841375 282
; mpfd: - 2964362979841375 282 (-1.28855e+085) class: Neg. norm. non-zero
; hwf : - 2964362979841375 282 (-1.28855e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011001 #b1010100010000001001010001010011001100001010101011110)))
(assert (= y (fp #b1 #b01011110110 #b1010011000100111111110110011011101100001010111101111)))
(assert (= r (fp #b1 #b10100011001 #b1010100010000001001010001010011001100001010101011111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
