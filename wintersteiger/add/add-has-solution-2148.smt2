(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8839581124289404012728255111142061650753021240234375p-954 {+ 3980993425746103 -954 (1.23724e-287)}
; Y = 1.74375441688026011632928202743642032146453857421875p-941 {+ 3349572114717100 -941 (9.38122e-284)}
; 1.8839581124289404012728255111142061650753021240234375p-954 + 1.74375441688026011632928202743642032146453857421875p-941 == 1.743984392235781388791338031296618282794952392578125p-941
; [HW: 1.743984392235781388791338031296618282794952392578125p-941] 

; mpf : + 3350607831642530 -941
; mpfd: + 3350607831642530 -941 (9.38246e-284) class: Pos. norm. non-zero
; hwf : + 3350607831642530 -941 (9.38246e-284) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000101 #b1110001001001011000101000010111111101010100010110111)))
(assert (= y (fp #b0 #b00001010010 #b1011111001100110101100001000000011000001100110101100)))
(assert (= r (fp #b0 #b00001010010 #b1011111001110101110000101101100101100011000110100010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
