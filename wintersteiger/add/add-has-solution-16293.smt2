(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9161460125249083485954315619892440736293792724609375p-929 {+ 4125954840624143 -929 (4.22243e-280)}
; Y = 1.35094762762679732048809455591253936290740966796875p-954 {+ 1580527605006604 -954 (8.87202e-288)}
; 1.9161460125249083485954315619892440736293792724609375p-929 + 1.35094762762679732048809455591253936290740966796875p-954 == 1.916146052786285025604229304008185863494873046875p-929
; [HW: 1.916146052786285025604229304008185863494873046875p-929] 

; mpf : + 4125955021945264 -929
; mpfd: + 4125955021945264 -929 (4.22243e-280) class: Pos. norm. non-zero
; hwf : + 4125955021945264 -929 (4.22243e-280) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011110 #b1110101010001000100010111000101000100111110000001111)))
(assert (= y (fp #b0 #b00001000101 #b0101100111010111101101000010011101000100000100001100)))
(assert (= r (fp #b0 #b00001011110 #b1110101010001000100011000011011100010011100110110000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
