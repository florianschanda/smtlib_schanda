(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8892947629683189969540535457781516015529632568359375p-273 {+ 4005027563126655 -273 (1.24483e-082)}
; Y = 1.2365148499757447897451356766396202147006988525390625p-110 {+ 1065168190218353 -110 (9.52576e-034)}
; 1.8892947629683189969540535457781516015529632568359375p-273 + 1.2365148499757447897451356766396202147006988525390625p-110 == 1.2365148499757447897451356766396202147006988525390625p-110
; [HW: 1.2365148499757447897451356766396202147006988525390625p-110] 

; mpf : + 1065168190218353 -110
; mpfd: + 1065168190218353 -110 (9.52576e-034) class: Pos. norm. non-zero
; hwf : + 1065168190218353 -110 (9.52576e-034) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011101110 #b1110001110101000110100100101001101110011111101111111)))
(assert (= y (fp #b0 #b01110010001 #b0011110010001100001111001011100110101010000001110001)))
(assert (= r (fp #b0 #b01110010001 #b0011110010001100001111001011100110101010000001110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
