(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4182078275720446658425544228521175682544708251953125p-865 {+ 1883440616416885 -865 (5.76492e-261)}
; Y = -1.8243214087571519854691359796561300754547119140625p-1007 {- 3712413589312232 -1007 (-1.33013e-303)}
; 1.4182078275720446658425544228521175682544708251953125p-865 + -1.8243214087571519854691359796561300754547119140625p-1007 == 1.41820782757204444379794949782080948352813720703125p-865
; [HW: 1.41820782757204444379794949782080948352813720703125p-865] 

; mpf : + 1883440616416884 -865
; mpfd: + 1883440616416884 -865 (5.76492e-261) class: Pos. norm. non-zero
; hwf : + 1883440616416884 -865 (5.76492e-261) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010011110 #b0110101100001111101010110000111001011010011001110101)))
(assert (= y (fp #b1 #b00000010000 #b1101001100000110101110100101010000000001001011101000)))
(assert (= r (fp #b0 #b00010011110 #b0110101100001111101010110000111001011010011001110100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
