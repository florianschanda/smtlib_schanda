(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6185883130145537478483674931339919567108154296875p358 {- 2785874095988088 358 (-9.50331e+107)}
; Y = -1.91382540180070659374678143649362027645111083984375p-167 {- 4115503739031356 -167 (-1.02304e-050)}
; -1.6185883130145537478483674931339919567108154296875p358 + -1.91382540180070659374678143649362027645111083984375p-167 == -1.6185883130145539698929724181653000414371490478515625p358
; [HW: -1.6185883130145539698929724181653000414371490478515625p358] 

; mpf : - 2785874095988089 358
; mpfd: - 2785874095988089 358 (-9.50331e+107) class: Neg. norm. non-zero
; hwf : - 2785874095988089 358 (-9.50331e+107) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100101 #b1001111001011011110011011011111000010101110101111000)))
(assert (= y (fp #b1 #b01101011000 #b1110100111110000011101100010011011111100111100111100)))
(assert (= r (fp #b1 #b10101100101 #b1001111001011011110011011011111000010101110101111001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
