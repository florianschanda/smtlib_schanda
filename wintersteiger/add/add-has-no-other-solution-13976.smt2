(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.926532505605011547089588930248282849788665771484375p116 {+ 4172731446989382 116 (1.6005e+035)}
; Y = -1.8637228296014594075558079566690139472484588623046875p721 {- 3889861813544523 721 (-2.05593e+217)}
; 1.926532505605011547089588930248282849788665771484375p116 + -1.8637228296014594075558079566690139472484588623046875p721 == -1.863722829601459185511203031637705862522125244140625p721
; [HW: -1.863722829601459185511203031637705862522125244140625p721] 

; mpf : - 3889861813544522 721
; mpfd: - 3889861813544522 721 (-2.05593e+217) class: Neg. norm. non-zero
; hwf : - 3889861813544522 721 (-2.05593e+217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001110011 #b1110110100110001001110111111101001000001001001000110)))
(assert (= y (fp #b1 #b11011010000 #b1101110100011100111100000111100111110010011001001011)))
(assert (= r (fp #b1 #b11011010000 #b1101110100011100111100000111100111110010011001001010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
