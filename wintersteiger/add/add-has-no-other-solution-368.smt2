(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0212139263780055653541012361529283225536346435546875p824 {- 95539030931051 824 (-1.14244e+248)}
; Y = 1.8138201204606800853724735134164802730083465576171875p-704 {+ 3665119991253331 -704 (2.15515e-212)}
; -1.0212139263780055653541012361529283225536346435546875p824 + 1.8138201204606800853724735134164802730083465576171875p-704 == -1.021213926378005343309496311121620237827301025390625p824
; [HW: -1.021213926378005343309496311121620237827301025390625p824] 

; mpf : - 95539030931050 824
; mpfd: - 95539030931050 824 (-1.14244e+248) class: Neg. norm. non-zero
; hwf : - 95539030931050 824 (-1.14244e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110111 #b0000010101101110010001101010000000000011011001101011)))
(assert (= y (fp #b0 #b00100111111 #b1101000001010110100000111111001000110100100101010011)))
(assert (= r (fp #b1 #b11100110111 #b0000010101101110010001101010000000000011011001101010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
