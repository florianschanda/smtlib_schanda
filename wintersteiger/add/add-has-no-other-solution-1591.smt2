(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.364044971291832997195569987525232136249542236328125p708 {+ 1639512797056002 708 (1.83682e+213)}
; Y = 1.7192146954815215043055331989307887852191925048828125p-125 {+ 3239055034569965 -125 (4.04185e-038)}
; 1.364044971291832997195569987525232136249542236328125p708 + 1.7192146954815215043055331989307887852191925048828125p-125 == 1.3640449712918332192401749125565402209758758544921875p708
; [HW: 1.3640449712918332192401749125565402209758758544921875p708] 

; mpf : + 1639512797056003 708
; mpfd: + 1639512797056003 708 (1.83682e+213) class: Pos. norm. non-zero
; hwf : + 1639512797056003 708 (1.83682e+213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011000011 #b0101110100110010000011010001110111111000110000000010)))
(assert (= y (fp #b0 #b01110000010 #b1011100000011110011101000100101111100101010011101101)))
(assert (= r (fp #b0 #b11011000011 #b0101110100110010000011010001110111111000110000000011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
