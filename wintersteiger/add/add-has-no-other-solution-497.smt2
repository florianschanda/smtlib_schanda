(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.03052496931988368800148236914537847042083740234375p-305 {+ 137472240454524 -305 (1.58092e-092)}
; Y = -1.6891877956728780230122310967999510467052459716796875p78 {- 3103825899780667 78 (-5.10526e+023)}
; 1.03052496931988368800148236914537847042083740234375p-305 + -1.6891877956728780230122310967999510467052459716796875p78 == -1.689187795672877800967626171768642961978912353515625p78
; [HW: -1.689187795672877800967626171768642961978912353515625p78] 

; mpf : - 3103825899780666 78
; mpfd: - 3103825899780666 78 (-5.10526e+023) class: Neg. norm. non-zero
; hwf : - 3103825899780666 78 (-5.10526e+023) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001110 #b0000011111010000011111000000000011110000101101111100)))
(assert (= y (fp #b1 #b10001001101 #b1011000001101110100111001000001100110111101000111011)))
(assert (= r (fp #b1 #b10001001101 #b1011000001101110100111001000001100110111101000111010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
