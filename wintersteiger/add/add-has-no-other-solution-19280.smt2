(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.63033087184477398778881251928396522998809814453125p811 {- 2838757879560244 811 (-2.2264e+244)}
; Y = -1.2520394691126937036784738666028715670108795166015625p-417 {- 1135084859178585 -417 (-3.69922e-126)}
; -1.63033087184477398778881251928396522998809814453125p811 + -1.2520394691126937036784738666028715670108795166015625p-417 == -1.63033087184477398778881251928396522998809814453125p811
; [HW: -1.63033087184477398778881251928396522998809814453125p811] 

; mpf : - 2838757879560244 811
; mpfd: - 2838757879560244 811 (-2.2264e+244) class: Neg. norm. non-zero
; hwf : - 2838757879560244 811 (-2.2264e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101010 #b1010000101011101010111010011000000111011100000110100)))
(assert (= y (fp #b1 #b01001011110 #b0100000010000101101010001001110100100011111001011001)))
(assert (= r (fp #b1 #b11100101010 #b1010000101011101010111010011000000111011100000110100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
