(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.95384392564869102670854772441089153289794921875p368 {+ 4295731148121056 368 (1.1747e+111)}
; Y = -1.9002273047638331693320878912345506250858306884765625p-390 {- 4054263354283145 -390 (-7.53542e-118)}
; 1.95384392564869102670854772441089153289794921875p368 + -1.9002273047638331693320878912345506250858306884765625p-390 == 1.9538439256486908046639427993795834481716156005859375p368
; [HW: 1.9538439256486908046639427993795834481716156005859375p368] 

; mpf : + 4295731148121055 368
; mpfd: + 4295731148121055 368 (1.1747e+111) class: Pos. norm. non-zero
; hwf : + 4295731148121055 368 (1.1747e+111) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101111 #b1111010000101111000111011001001000100110001111100000)))
(assert (= y (fp #b1 #b01001111001 #b1110011001110101010010111111000011101101010010001001)))
(assert (= r (fp #b0 #b10101101111 #b1111010000101111000111011001001000100110001111011111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
