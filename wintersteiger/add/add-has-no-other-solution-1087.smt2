(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.412072482671657080999239042284898459911346435546875p655 {- 1855809479409710 655 (-2.11108e+197)}
; Y = -1.0839234739289924647209772956557571887969970703125p385 {- 377957725914248 385 (-8.54175e+115)}
; -1.412072482671657080999239042284898459911346435546875p655 + -1.0839234739289924647209772956557571887969970703125p385 == -1.412072482671657080999239042284898459911346435546875p655
; [HW: -1.412072482671657080999239042284898459911346435546875p655] 

; mpf : - 1855809479409710 655
; mpfd: - 1855809479409710 655 (-2.11108e+197) class: Neg. norm. non-zero
; hwf : - 1855809479409710 655 (-2.11108e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001110 #b0110100101111101100101010000110010101000000000101110)))
(assert (= y (fp #b1 #b10110000000 #b0001010101111100000000100011111111100100010010001000)))
(assert (= r (fp #b1 #b11010001110 #b0110100101111101100101010000110010101000000000101110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
