(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6410585570801046184641336367349140346050262451171875p450 {+ 2887071078788627 450 (4.77114e+135)}
; Y = -1.719271382807412873461316848988644778728485107421875p935 {- 3239310331589726 935 (-4.99333e+281)}
; 1.6410585570801046184641336367349140346050262451171875p450 + -1.719271382807412873461316848988644778728485107421875p935 == -1.719271382807412873461316848988644778728485107421875p935
; [HW: -1.719271382807412873461316848988644778728485107421875p935] 

; mpf : - 3239310331589726 935
; mpfd: - 3239310331589726 935 (-4.99333e+281) class: Neg. norm. non-zero
; hwf : - 3239310331589726 935 (-4.99333e+281) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111000001 #b1010010000011100011010011110000101111010111000010011)))
(assert (= y (fp #b1 #b11110100110 #b1011100000100010001010110101101000011011010001011110)))
(assert (= r (fp #b1 #b11110100110 #b1011100000100010001010110101101000011011010001011110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
