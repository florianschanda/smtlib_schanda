(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.737003473174783874100057801115326583385467529296875p-437 {- 3319168567160718 -437 (-4.89432e-132)}
; Y = -1.6955859504255723635424146777950227260589599609375p-322 {- 3132640627140760 -322 (-1.98455e-097)}
; -1.737003473174783874100057801115326583385467529296875p-437 + -1.6955859504255723635424146777950227260589599609375p-322 == -1.6955859504255723635424146777950227260589599609375p-322
; [HW: -1.6955859504255723635424146777950227260589599609375p-322] 

; mpf : - 3132640627140760 -322
; mpfd: - 3132640627140760 -322 (-1.98455e-097) class: Neg. norm. non-zero
; hwf : - 3132640627140760 -322 (-1.98455e-097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001010 #b1011110010101100010000100111011001010010111110001110)))
(assert (= y (fp #b1 #b01010111101 #b1011001000010001111010111011110010100010100010011000)))
(assert (= r (fp #b1 #b01010111101 #b1011001000010001111010111011110010100010100010011000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
