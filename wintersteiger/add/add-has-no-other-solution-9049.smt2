(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4624782449448032739525160650373436510562896728515625p892 {- 2082816851600377 892 (-4.82887e+268)}
; Y = 1.716381267016881650988580076955258846282958984375p-758 {+ 3226294407192432 -758 (1.13208e-228)}
; -1.4624782449448032739525160650373436510562896728515625p892 + 1.716381267016881650988580076955258846282958984375p-758 == -1.4624782449448032739525160650373436510562896728515625p892
; [HW: -1.4624782449448032739525160650373436510562896728515625p892] 

; mpf : - 2082816851600377 892
; mpfd: - 2082816851600377 892 (-4.82887e+268) class: Neg. norm. non-zero
; hwf : - 2082816851600377 892 (-4.82887e+268) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111011 #b0111011001100100111110010110100100100110001111111001)))
(assert (= y (fp #b0 #b00100001001 #b1011011101100100110000110100000101001101111101110000)))
(assert (= r (fp #b1 #b11101111011 #b0111011001100100111110010110100100100110001111111001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
