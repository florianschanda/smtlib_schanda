(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6986528215208356318299820486572571098804473876953125p534 {- 3146452586662581 534 (-9.55262e+160)}
; Y = 1.1178651021465337844773557662847451865673065185546875p-430 {+ 530817230107115 -430 (4.03173e-130)}
; -1.6986528215208356318299820486572571098804473876953125p534 + 1.1178651021465337844773557662847451865673065185546875p-430 == -1.69865282152083540978537712362594902515411376953125p534
; [HW: -1.69865282152083540978537712362594902515411376953125p534] 

; mpf : - 3146452586662580 534
; mpfd: - 3146452586662580 534 (-9.55262e+160) class: Neg. norm. non-zero
; hwf : - 3146452586662580 534 (-9.55262e+160) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010101 #b1011001011011010111010010100101110110000101010110101)))
(assert (= y (fp #b0 #b01001010001 #b0001111000101100011010000100011100001111000111101011)))
(assert (= r (fp #b1 #b11000010101 #b1011001011011010111010010100101110110000101010110100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
