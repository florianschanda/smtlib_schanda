(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5416575759686674818027540823095478117465972900390625p534 {+ 2439408857294897 534 (8.66973e+160)}
; Y = -1.0957383182466557958179009801824577152729034423828125p-86 {- 431167054380717 -86 (-1.41621e-026)}
; 1.5416575759686674818027540823095478117465972900390625p534 + -1.0957383182466557958179009801824577152729034423828125p-86 == 1.5416575759686674818027540823095478117465972900390625p534
; [HW: 1.5416575759686674818027540823095478117465972900390625p534] 

; mpf : + 2439408857294897 534
; mpfd: + 2439408857294897 534 (8.66973e+160) class: Pos. norm. non-zero
; hwf : + 2439408857294897 534 (8.66973e+160) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000010101 #b1000101010101010000100100010011001101010100000110001)))
(assert (= y (fp #b1 #b01110101001 #b0001100010000010010011100111000111010111111010101101)))
(assert (= r (fp #b0 #b11000010101 #b1000101010101010000100100010011001101010100000110001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
