(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2783985027270521328546237782575190067291259765625p-715 {- 1253795393142056 -715 (-7.41685e-216)}
; Y = -1.3209339544801357302361566325998865067958831787109375p515 {- 1445358037807279 515 (-1.41687e+155)}
; -1.2783985027270521328546237782575190067291259765625p-715 + -1.3209339544801357302361566325998865067958831787109375p515 == -1.3209339544801357302361566325998865067958831787109375p515
; [HW: -1.3209339544801357302361566325998865067958831787109375p515] 

; mpf : - 1445358037807279 515
; mpfd: - 1445358037807279 515 (-1.41687e+155) class: Neg. norm. non-zero
; hwf : - 1445358037807279 515 (-1.41687e+155) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110100 #b0100011101000101000111111101000001110111110100101000)))
(assert (= y (fp #b1 #b11000000010 #b0101001000101000101110100100011010101011000010101111)))
(assert (= r (fp #b1 #b11000000010 #b0101001000101000101110100100011010101011000010101111)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
