(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.348756859965350773933323580422438681125640869140625p-173 {+ 1570661264582858 -173 (1.12653e-052)}
; Y = -1.666774046510310025581702575436793267726898193359375p525 {- 3002883347404150 525 (-1.83073e+158)}
; 1.348756859965350773933323580422438681125640869140625p-173 + -1.666774046510310025581702575436793267726898193359375p525 == -1.666774046510310025581702575436793267726898193359375p525
; [HW: -1.666774046510310025581702575436793267726898193359375p525] 

; mpf : - 3002883347404150 525
; mpfd: - 3002883347404150 525 (-1.83073e+158) class: Neg. norm. non-zero
; hwf : - 3002883347404150 525 (-1.83073e+158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010010 #b0101100101001000001000010010101111001110100011001010)))
(assert (= y (fp #b1 #b11000001100 #b1010101010110001101101000011001110010101010101110110)))
(assert (= r (fp #b1 #b11000001100 #b1010101010110001101101000011001110010101010101110110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
