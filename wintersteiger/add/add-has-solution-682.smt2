(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9650288486761351425258226299774833023548126220703125p-137 {- 4346103563299621 -137 (-1.12787e-041)}
; Y = -1.24945584899158834701893283636309206485748291015625p-271 {- 1123449268563908 -271 (-3.293e-082)}
; -1.9650288486761351425258226299774833023548126220703125p-137 + -1.24945584899158834701893283636309206485748291015625p-271 == -1.965028848676135364570427555008791387081146240234375p-137
; [HW: -1.965028848676135364570427555008791387081146240234375p-137] 

; mpf : - 4346103563299622 -137
; mpfd: - 4346103563299622 -137 (-1.12787e-041) class: Neg. norm. non-zero
; hwf : - 4346103563299622 -137 (-1.12787e-041) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110110 #b1111011100001100001000010111000011000010101100100101)))
(assert (= y (fp #b1 #b01011110000 #b0011111111011100010101101010100100110110111111000100)))
(assert (= r (fp #b1 #b01101110110 #b1111011100001100001000010111000011000010101100100110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
