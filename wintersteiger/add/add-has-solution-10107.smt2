(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2632183528130325189664517893106676638126373291015625p-917 {+ 1185430075645849 -917 (1.14018e-276)}
; Y = 1.2732611969922065231486385528114624321460723876953125p-239 {+ 1230659024948917 -239 (1.44128e-072)}
; 1.2632183528130325189664517893106676638126373291015625p-917 + 1.2732611969922065231486385528114624321460723876953125p-239 == 1.2732611969922065231486385528114624321460723876953125p-239
; [HW: 1.2732611969922065231486385528114624321460723876953125p-239] 

; mpf : + 1230659024948917 -239
; mpfd: + 1230659024948917 -239 (1.44128e-072) class: Pos. norm. non-zero
; hwf : + 1230659024948917 -239 (1.44128e-072) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101010 #b0100001101100010010001110010100100001001111110011001)))
(assert (= y (fp #b0 #b01100010000 #b0100010111110100011100100010000001011000111010110101)))
(assert (= r (fp #b0 #b01100010000 #b0100010111110100011100100010000001011000111010110101)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
