(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1183913258404825086245182319544255733489990234375p-242 {+ 533187130939096 -242 (1.58247e-073)}
; Y = -1.255340446897877715315416935482062399387359619140625p868 {- 1149951141501898 868 (-2.47057e+261)}
; 1.1183913258404825086245182319544255733489990234375p-242 + -1.255340446897877715315416935482062399387359619140625p868 == -1.2553404468978774932708120104507543146610260009765625p868
; [HW: -1.2553404468978774932708120104507543146610260009765625p868] 

; mpf : - 1149951141501897 868
; mpfd: - 1149951141501897 868 (-2.47057e+261) class: Neg. norm. non-zero
; hwf : - 1149951141501897 868 (-2.47057e+261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100001101 #b0001111001001110111001001101100010011101011011011000)))
(assert (= y (fp #b1 #b11101100011 #b0100000101011101111111011101010011000101101111001010)))
(assert (= r (fp #b1 #b11101100011 #b0100000101011101111111011101010011000101101111001001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
