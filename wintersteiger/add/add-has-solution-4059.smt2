(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2986551537071580053606112414854578673839569091796875p290 {- 1345023238947835 290 (-2.58341e+087)}
; Y = -1.3750133613244852615054014677298255264759063720703125p-124 {- 1688910034319909 -124 (-6.46528e-038)}
; -1.2986551537071580053606112414854578673839569091796875p290 + -1.3750133613244852615054014677298255264759063720703125p-124 == -1.2986551537071580053606112414854578673839569091796875p290
; [HW: -1.2986551537071580053606112414854578673839569091796875p290] 

; mpf : - 1345023238947835 290
; mpfd: - 1345023238947835 290 (-2.58341e+087) class: Neg. norm. non-zero
; hwf : - 1345023238947835 290 (-2.58341e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100100001 #b0100110001110100101010100000010111110100001111111011)))
(assert (= y (fp #b1 #b01110000011 #b0110000000000000111000000010101001110011101000100101)))
(assert (= r (fp #b1 #b10100100001 #b0100110001110100101010100000010111110100001111111011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
