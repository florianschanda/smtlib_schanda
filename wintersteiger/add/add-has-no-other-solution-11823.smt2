(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.316649141320450411285492009483277797698974609375p910 {- 1426060954857968 910 (-1.13964e+274)}
; Y = -1.42846269565246242194689330062828958034515380859375p975 {- 1929624436482588 975 (-4.56157e+293)}
; -1.316649141320450411285492009483277797698974609375p910 + -1.42846269565246242194689330062828958034515380859375p975 == -1.4284626956524626439914982256595976650714874267578125p975
; [HW: -1.4284626956524626439914982256595976650714874267578125p975] 

; mpf : - 1929624436482589 975
; mpfd: - 1929624436482589 975 (-4.56157e+293) class: Neg. norm. non-zero
; hwf : - 1929624436482589 975 (-4.56157e+293) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001101 #b0101000100001111111010110000101001000111000111110000)))
(assert (= y (fp #b1 #b11111001110 #b0110110110101111101110110011000101100010001000011100)))
(assert (= r (fp #b1 #b11111001110 #b0110110110101111101110110011000101100010001000011101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
