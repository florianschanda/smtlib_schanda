(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9129600072831609569590227692970074713230133056640625p415 {+ 4111606348604609 415 (1.61865e+125)}
; Y = -1.0924691014900285157551707015954889357089996337890625p-830 {- 416443811013777 -830 (-1.52585e-250)}
; 1.9129600072831609569590227692970074713230133056640625p415 + -1.0924691014900285157551707015954889357089996337890625p-830 == 1.9129600072831609569590227692970074713230133056640625p415
; [HW: 1.9129600072831609569590227692970074713230133056640625p415] 

; mpf : + 4111606348604609 415
; mpfd: + 4111606348604609 415 (1.61865e+125) class: Pos. norm. non-zero
; hwf : + 4111606348604609 415 (1.61865e+125) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011110 #b1110100110110111101111110011110111010110010011000001)))
(assert (= y (fp #b1 #b00011000001 #b0001011110101100000011100001011011001010010010010001)))
(assert (= r (fp #b0 #b10110011110 #b1110100110110111101111110011110111010110010011000001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
