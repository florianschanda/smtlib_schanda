(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2181898341832850807264776449301280081272125244140625p-262 {- 982639655923873 -262 (-1.64383e-079)}
; Y = -1.0303131602444974834753566028666682541370391845703125p-773 {- 136518337181541 -773 (-2.07388e-233)}
; -1.2181898341832850807264776449301280081272125244140625p-262 + -1.0303131602444974834753566028666682541370391845703125p-773 == -1.218189834183285302771082569961436092853546142578125p-262
; [HW: -1.218189834183285302771082569961436092853546142578125p-262] 

; mpf : - 982639655923874 -262
; mpfd: - 982639655923874 -262 (-1.64383e-079) class: Neg. norm. non-zero
; hwf : - 982639655923874 -262 (-1.64383e-079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111001 #b0011011111011011010010011111101000100011000010100001)))
(assert (= y (fp #b1 #b00011111010 #b0000011111000010100110100110111111100011011101100101)))
(assert (= r (fp #b1 #b01011111001 #b0011011111011011010010011111101000100011000010100010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
