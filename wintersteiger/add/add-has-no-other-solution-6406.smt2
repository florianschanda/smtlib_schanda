(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7297279694592802012920174092869274318218231201171875p67 {- 3286402611338643 67 (-2.55263e+020)}
; Y = -1.4032396489046063958738841392914764583110809326171875p-148 {- 1816029932547795 -148 (-3.93272e-045)}
; -1.7297279694592802012920174092869274318218231201171875p67 + -1.4032396489046063958738841392914764583110809326171875p-148 == -1.7297279694592802012920174092869274318218231201171875p67
; [HW: -1.7297279694592802012920174092869274318218231201171875p67] 

; mpf : - 3286402611338643 67
; mpfd: - 3286402611338643 67 (-2.55263e+020) class: Neg. norm. non-zero
; hwf : - 3286402611338643 67 (-2.55263e+020) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000010 #b1011101011001111011100111100001111001101110110010011)))
(assert (= y (fp #b1 #b01101101011 #b0110011100111010101101101011000001111110111011010011)))
(assert (= r (fp #b1 #b10001000010 #b1011101011001111011100111100001111001101110110010011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
