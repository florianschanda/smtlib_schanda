(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.070895059250152048235804613796062767505645751953125p-1007 {- 319282962421394 -1007 (-7.80803e-304)}
; Y = -1.94994322529755148565300260088406503200531005859375p-419 {- 4278163955473180 -419 (-1.4403e-126)}
; -1.070895059250152048235804613796062767505645751953125p-1007 + -1.94994322529755148565300260088406503200531005859375p-419 == -1.94994322529755148565300260088406503200531005859375p-419
; [HW: -1.94994322529755148565300260088406503200531005859375p-419] 

; mpf : - 4278163955473180 -419
; mpfd: - 4278163955473180 -419 (-1.4403e-126) class: Neg. norm. non-zero
; hwf : - 4278163955473180 -419 (-1.4403e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000010000 #b0001001000100110001011011011100011101101011010010010)))
(assert (= y (fp #b1 #b01001011100 #b1111001100101111011110101010110110110101101100011100)))
(assert (= r (fp #b1 #b01001011100 #b1111001100101111011110101010110110110101101100011100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
