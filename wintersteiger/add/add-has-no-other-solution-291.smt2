(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.746037041431760084009283673367463052272796630859375p-1018 {- 3359852141796662 -1018 (-6.2161e-307)}
; Y = -1.6891541966148528874924750198260881006717681884765625p567 {- 3103674583075465 567 (-8.15975e+170)}
; -1.746037041431760084009283673367463052272796630859375p-1018 + -1.6891541966148528874924750198260881006717681884765625p567 == -1.6891541966148528874924750198260881006717681884765625p567
; [HW: -1.6891541966148528874924750198260881006717681884765625p567] 

; mpf : - 3103674583075465 567
; mpfd: - 3103674583075465 567 (-8.15975e+170) class: Neg. norm. non-zero
; hwf : - 3103674583075465 567 (-8.15975e+170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000101 #b1011111011111100010010001001011010001101110100110110)))
(assert (= y (fp #b1 #b11000110110 #b1011000001101100011010001101000001011100101010001001)))
(assert (= r (fp #b1 #b11000110110 #b1011000001101100011010001101000001011100101010001001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
