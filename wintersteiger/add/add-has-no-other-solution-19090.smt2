(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.020112203420126650854626859654672443866729736328125p-696 {- 90577311828482 -696 (-3.10292e-210)}
; Y = 1.6114401741616408703094975862768478691577911376953125p-174 {+ 2753681740513717 -174 (6.72969e-053)}
; -1.020112203420126650854626859654672443866729736328125p-696 + 1.6114401741616408703094975862768478691577911376953125p-174 == 1.6114401741616408703094975862768478691577911376953125p-174
; [HW: 1.6114401741616408703094975862768478691577911376953125p-174] 

; mpf : + 2753681740513717 -174
; mpfd: + 2753681740513717 -174 (6.72969e-053) class: Pos. norm. non-zero
; hwf : + 2753681740513717 -174 (6.72969e-053) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000111 #b0000010100100110000100101100011111110000101000000010)))
(assert (= y (fp #b0 #b01101010001 #b1001110010000111010101111101111101111100000110110101)))
(assert (= r (fp #b0 #b01101010001 #b1001110010000111010101111101111101111100000110110101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
