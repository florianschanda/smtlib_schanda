(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.887161550166780887849427017499692738056182861328125p-473 {+ 3995420426748546 -473 (7.73786e-143)}
; Y = 1.964116996984980101359496984514407813549041748046875p355 {+ 4341996948363118 355 (1.4415e+107)}
; 1.887161550166780887849427017499692738056182861328125p-473 + 1.964116996984980101359496984514407813549041748046875p355 == 1.9641169969849803234041019095457158982753753662109375p355
; [HW: 1.9641169969849803234041019095457158982753753662109375p355] 

; mpf : + 4341996948363119 355
; mpfd: + 4341996948363119 355 (1.4415e+107) class: Pos. norm. non-zero
; hwf : + 4341996948363119 355 (1.4415e+107) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000100110 #b1110001100011101000001001111010000111100001010000010)))
(assert (= y (fp #b0 #b10101100010 #b1111011011010000010111110001101110010001011101101110)))
(assert (= r (fp #b0 #b10101100010 #b1111011011010000010111110001101110010001011101101111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
