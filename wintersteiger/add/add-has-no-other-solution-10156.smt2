(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.622541073793877242081862277700565755367279052734375p-720 {+ 2803675747960934 -720 (2.9417e-217)}
; Y = -1.9605504306457353091985851278877817094326019287109375p700 {- 4325934561526703 700 (-1.03128e+211)}
; 1.622541073793877242081862277700565755367279052734375p-720 + -1.9605504306457353091985851278877817094326019287109375p700 == -1.9605504306457353091985851278877817094326019287109375p700
; [HW: -1.9605504306457353091985851278877817094326019287109375p700] 

; mpf : - 4325934561526703 700
; mpfd: - 4325934561526703 700 (-1.03128e+211) class: Neg. norm. non-zero
; hwf : - 4325934561526703 700 (-1.03128e+211) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100101111 #b1001111101011110110110100001000001011100100001100110)))
(assert (= y (fp #b1 #b11010111011 #b1111010111100110101000100000110111001000001110101111)))
(assert (= r (fp #b1 #b11010111011 #b1111010111100110101000100000110111001000001110101111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
