(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2878729126341956767731744548655115067958831787109375p-403 {- 1296464342069423 -403 (-6.23426e-122)}
; Y = 1.4180973236706930773465273887268267571926116943359375p-637 {+ 1882942951087935 -637 (2.48656e-192)}
; -1.2878729126341956767731744548655115067958831787109375p-403 + 1.4180973236706930773465273887268267571926116943359375p-637 == -1.287872912634195454728569529834203422069549560546875p-403
; [HW: -1.287872912634195454728569529834203422069549560546875p-403] 

; mpf : - 1296464342069422 -403
; mpfd: - 1296464342069422 -403 (-6.23426e-122) class: Neg. norm. non-zero
; hwf : - 1296464342069422 -403 (-6.23426e-122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001101100 #b0100100110110010000010100000100100101011000010101111)))
(assert (= y (fp #b0 #b00110000010 #b0110101100001000011011010001101110110101111100111111)))
(assert (= r (fp #b1 #b01001101100 #b0100100110110010000010100000100100101011000010101110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
