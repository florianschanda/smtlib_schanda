(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.856438021011675321148004513815976679325103759765625p995 {+ 3857053952294106 995 (6.21622e+299)}
; Y = -1.483554716893953351330992518342100083827972412109375p484 {- 2177736842816854 484 (-7.41006e+145)}
; 1.856438021011675321148004513815976679325103759765625p995 + -1.483554716893953351330992518342100083827972412109375p484 == 1.856438021011675321148004513815976679325103759765625p995
; [HW: 1.856438021011675321148004513815976679325103759765625p995] 

; mpf : + 3857053952294106 995
; mpfd: + 3857053952294106 995 (6.21622e+299) class: Pos. norm. non-zero
; hwf : + 3857053952294106 995 (6.21622e+299) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100010 #b1101101100111111100001011010101101001011110011011010)))
(assert (= y (fp #b1 #b10111100011 #b0111101111001010001111011110111011100010110101010110)))
(assert (= r (fp #b0 #b11111100010 #b1101101100111111100001011010101101001011110011011010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
