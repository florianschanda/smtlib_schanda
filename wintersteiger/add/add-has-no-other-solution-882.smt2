(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7691259021737149037534209128352813422679901123046875p125 {+ 3463835126430539 125 (7.52503e+037)}
; Y = -1.8410189101725682458976507405168376863002777099609375p-307 {- 3787612450464719 -307 (-7.06073e-093)}
; 1.7691259021737149037534209128352813422679901123046875p125 + -1.8410189101725682458976507405168376863002777099609375p-307 == 1.7691259021737149037534209128352813422679901123046875p125
; [HW: 1.7691259021737149037534209128352813422679901123046875p125] 

; mpf : + 3463835126430539 125
; mpfd: + 3463835126430539 125 (7.52503e+037) class: Pos. norm. non-zero
; hwf : + 3463835126430539 125 (7.52503e+037) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111100 #b1100010011100101011011110110010001010111101101001011)))
(assert (= y (fp #b1 #b01011001100 #b1101011101001101000000111110101010000010001111001111)))
(assert (= r (fp #b0 #b10001111100 #b1100010011100101011011110110010001010111101101001011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
