(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6902834199800154113546568623860366642475128173828125p-327 {- 3108760153002029 -327 (-6.18231e-099)}
; Y = -1.4988335817784383952044890975230373442173004150390625p967 {- 2246546733017265 967 (-1.86965e+291)}
; -1.6902834199800154113546568623860366642475128173828125p-327 + -1.4988335817784383952044890975230373442173004150390625p967 == -1.4988335817784383952044890975230373442173004150390625p967
; [HW: -1.4988335817784383952044890975230373442173004150390625p967] 

; mpf : - 2246546733017265 967
; mpfd: - 2246546733017265 967 (-1.86965e+291) class: Neg. norm. non-zero
; hwf : - 2246546733017265 967 (-1.86965e+291) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010111000 #b1011000010110110011010100000100111001001000000101101)))
(assert (= y (fp #b1 #b11111000110 #b0111111110110011100011101011111111100010100010110001)))
(assert (= r (fp #b1 #b11111000110 #b0111111110110011100011101011111111100010100010110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
