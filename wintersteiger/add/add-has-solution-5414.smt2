(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.149058884576051209336355896084569394588470458984375p-654 {- 671301537032966 -654 (-1.53718e-197)}
; Y = 1.221566553179916692073447848088108003139495849609375p-628 {+ 997847046338838 -628 (1.09668e-189)}
; -1.149058884576051209336355896084569394588470458984375p-654 + 1.221566553179916692073447848088108003139495849609375p-628 == 1.221566536057605123488656317931599915027618408203125p-628
; [HW: 1.221566536057605123488656317931599915027618408203125p-628] 

; mpf : + 997846969226802 -628
; mpfd: + 997846969226802 -628 (1.09668e-189) class: Pos. norm. non-zero
; hwf : + 997846969226802 -628 (1.09668e-189) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101110001 #b0010011000101000101110010001101001101110101100000110)))
(assert (= y (fp #b0 #b00110001011 #b0011100010111000100101011110101111001011100100010110)))
(assert (= r (fp #b0 #b00110001011 #b0011100010111000100101011010001001000001011000110010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
