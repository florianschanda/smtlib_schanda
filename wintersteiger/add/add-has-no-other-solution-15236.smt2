(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.307882654758457885435518619487993419170379638671875p421 {- 1386580209244030 421 (-7.08267e+126)}
; Y = 1.582184114321057766261446886346675455570220947265625p-393 {+ 2621924160317338 -393 (7.84276e-119)}
; -1.307882654758457885435518619487993419170379638671875p421 + 1.582184114321057766261446886346675455570220947265625p-393 == -1.307882654758457885435518619487993419170379638671875p421
; [HW: -1.307882654758457885435518619487993419170379638671875p421] 

; mpf : - 1386580209244030 421
; mpfd: - 1386580209244030 421 (-7.08267e+126) class: Neg. norm. non-zero
; hwf : - 1386580209244030 421 (-7.08267e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110100100 #b0100111011010001011001011100110100110001011101111110)))
(assert (= y (fp #b0 #b01001110110 #b1001010100001010000001001010001101000010011110011010)))
(assert (= r (fp #b1 #b10110100100 #b0100111011010001011001011100110100110001011101111110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
