(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3636064682386546120795856040786020457744598388671875p440 {- 1637537954869107 440 (-3.87157e+132)}
; Y = -1.752893597481497867107691490673460066318511962890625p-801 {- 3390731325067306 -801 (-1.3144e-241)}
; -1.3636064682386546120795856040786020457744598388671875p440 + -1.752893597481497867107691490673460066318511962890625p-801 == -1.3636064682386546120795856040786020457744598388671875p440
; [HW: -1.3636064682386546120795856040786020457744598388671875p440] 

; mpf : - 1637537954869107 440
; mpfd: - 1637537954869107 440 (-3.87157e+132) class: Neg. norm. non-zero
; hwf : - 1637537954869107 440 (-3.87157e+132) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110110111 #b0101110100010101010100000100000110110010111101110011)))
(assert (= y (fp #b1 #b00011011110 #b1100000010111101101000101000001010001101000000101010)))
(assert (= r (fp #b1 #b10110110111 #b0101110100010101010100000100000110110010111101110011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
