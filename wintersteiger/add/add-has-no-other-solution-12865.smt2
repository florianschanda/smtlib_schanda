(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2763573875427660642145610836450941860675811767578125p-470 {- 1244603027558685 -470 (-4.18672e-142)}
; Y = 1.813436649646015030867829409544356167316436767578125p744 {+ 3663392992235298 744 (1.67811e+224)}
; -1.2763573875427660642145610836450941860675811767578125p-470 + 1.813436649646015030867829409544356167316436767578125p744 == 1.8134366496460148088232244845130480825901031494140625p744
; [HW: 1.8134366496460148088232244845130480825901031494140625p744] 

; mpf : + 3663392992235297 744
; mpfd: + 3663392992235297 744 (1.67811e+224) class: Pos. norm. non-zero
; hwf : + 3663392992235297 744 (1.67811e+224) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101001 #b0100011010111111010110111001010110000001000100011101)))
(assert (= y (fp #b0 #b11011100111 #b1101000000111101011000100101111110011000111100100010)))
(assert (= r (fp #b0 #b11011100111 #b1101000000111101011000100101111110011000111100100001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
