(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6205131896751312492455099345534108579158782958984375p-286 {- 2794542969799399 -286 (-1.30339e-086)}
; Y = 1.6780280218157834770664749157731421291828155517578125p-738 {+ 3053566746396317 -738 (1.16055e-222)}
; -1.6205131896751312492455099345534108579158782958984375p-286 + 1.6780280218157834770664749157731421291828155517578125p-738 == -1.620513189675131027200905009522102773189544677734375p-286
; [HW: -1.620513189675131027200905009522102773189544677734375p-286] 

; mpf : - 2794542969799398 -286
; mpfd: - 2794542969799398 -286 (-1.30339e-086) class: Neg. norm. non-zero
; hwf : - 2794542969799398 -286 (-1.30339e-086) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100001 #b1001111011011001111100111101000001100100001011100111)))
(assert (= y (fp #b0 #b00100011101 #b1010110110010011001111101001001101111000011010011101)))
(assert (= r (fp #b1 #b01011100001 #b1001111011011001111100111101000001100100001011100110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
