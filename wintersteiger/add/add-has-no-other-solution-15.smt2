(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.12624997820552597005416828324086964130401611328125p754 {- 568579354801940 754 (-1.06721e+227)}
; Y = -1.1281310814333498360184648845461197197437286376953125p-73 {- 577051090597813 -73 (-1.19446e-022)}
; -1.12624997820552597005416828324086964130401611328125p754 + -1.1281310814333498360184648845461197197437286376953125p-73 == -1.12624997820552597005416828324086964130401611328125p754
; [HW: -1.12624997820552597005416828324086964130401611328125p754] 

; mpf : - 568579354801940 754
; mpfd: - 568579354801940 754 (-1.06721e+227) class: Neg. norm. non-zero
; hwf : - 568579354801940 754 (-1.06721e+227) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110001 #b0010000001010001111010110010011110000011011100010100)))
(assert (= y (fp #b1 #b01110110110 #b0010000011001101001100101101010001011011011110110101)))
(assert (= r (fp #b1 #b11011110001 #b0010000001010001111010110010011110000011011100010100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
