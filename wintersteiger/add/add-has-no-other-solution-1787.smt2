(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8816805598161148171953982455306686460971832275390625p-359 {+ 3970736240647665 -359 (1.60242e-108)}
; Y = -1.9658922031072931790873781210393644869327545166015625p558 {- 4349991765994073 558 (-1.8548e+168)}
; 1.8816805598161148171953982455306686460971832275390625p-359 + -1.9658922031072931790873781210393644869327545166015625p558 == -1.9658922031072931790873781210393644869327545166015625p558
; [HW: -1.9658922031072931790873781210393644869327545166015625p558] 

; mpf : - 4349991765994073 558
; mpfd: - 4349991765994073 558 (-1.8548e+168) class: Neg. norm. non-zero
; hwf : - 4349991765994073 558 (-1.8548e+168) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010011000 #b1110000110110101110100010011000111101101110111110001)))
(assert (= y (fp #b1 #b11000101101 #b1111011101000100101101100001111111001110101001011001)))
(assert (= r (fp #b1 #b11000101101 #b1111011101000100101101100001111111001110101001011001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
