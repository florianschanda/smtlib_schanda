(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8446517918566083249487519424292258918285369873046875p641 {- 3803973495063243 641 (-1.68322e+193)}
; Y = 1.951116771627557699986255101975984871387481689453125p-714 {+ 4283449138287698 -714 (2.26395e-215)}
; -1.8446517918566083249487519424292258918285369873046875p641 + 1.951116771627557699986255101975984871387481689453125p-714 == -1.8446517918566083249487519424292258918285369873046875p641
; [HW: -1.8446517918566083249487519424292258918285369873046875p641] 

; mpf : - 3803973495063243 641
; mpfd: - 3803973495063243 641 (-1.68322e+193) class: Neg. norm. non-zero
; hwf : - 3803973495063243 641 (-1.68322e+193) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000000 #b1101100000111011000110011000111010001000001011001011)))
(assert (= y (fp #b0 #b00100110101 #b1111001101111100011000111000010011010001010001010010)))
(assert (= r (fp #b1 #b11010000000 #b1101100000111011000110011000111010001000001011001011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
