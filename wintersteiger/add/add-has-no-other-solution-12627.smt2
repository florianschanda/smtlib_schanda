(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2465107324587283432748563427594490349292755126953125p1 {+ 1110185642843957 1 (2.49302)}
; Y = -1.814181266176850382265683947480283677577972412109375p632 {- 3666746446966102 632 (-3.23324e+190)}
; 1.2465107324587283432748563427594490349292755126953125p1 + -1.814181266176850382265683947480283677577972412109375p632 == -1.814181266176850382265683947480283677577972412109375p632
; [HW: -1.814181266176850382265683947480283677577972412109375p632] 

; mpf : - 3666746446966102 632
; mpfd: - 3666746446966102 632 (-3.23324e+190) class: Neg. norm. non-zero
; hwf : - 3666746446966102 632 (-3.23324e+190) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000000000 #b0011111100011011010100111100111000000101111100110101)))
(assert (= y (fp #b1 #b11001110111 #b1101000001101110001011101111011100111110110101010110)))
(assert (= r (fp #b1 #b11001110111 #b1101000001101110001011101111011100111110110101010110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
