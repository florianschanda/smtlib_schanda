(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.608152962703168764591055150958709418773651123046875p657 {+ 2738877456214254 657 (9.61689e+197)}
; Y = 1.067263523896926802336793116410262882709503173828125p582 {+ 302927981157826 582 (1.68939e+175)}
; 1.608152962703168764591055150958709418773651123046875p657 + 1.067263523896926802336793116410262882709503173828125p582 == 1.6081529627031689866356600759900175034999847412109375p657
; [HW: 1.6081529627031689866356600759900175034999847412109375p657] 

; mpf : + 2738877456214255 657
; mpfd: + 2738877456214255 657 (9.61689e+197) class: Pos. norm. non-zero
; hwf : + 2738877456214255 657 (9.61689e+197) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010010000 #b1001101110101111111010011001110111000110100011101110)))
(assert (= y (fp #b0 #b11001000101 #b0001000100111000001011101010101101011001110111000010)))
(assert (= r (fp #b0 #b11010010000 #b1001101110101111111010011001110111000110100011101111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
