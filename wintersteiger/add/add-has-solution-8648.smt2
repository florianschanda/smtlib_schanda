(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.957078197417941201052826727391220629215240478515625p-218 {+ 4310297013255866 -218 (4.64589e-066)}
; Y = -1.30946042970819664930104408995248377323150634765625p-758 {- 1393685875919748 -758 (-8.63686e-229)}
; 1.957078197417941201052826727391220629215240478515625p-218 + -1.30946042970819664930104408995248377323150634765625p-758 == 1.957078197417941201052826727391220629215240478515625p-218
; [HW: 1.957078197417941201052826727391220629215240478515625p-218] 

; mpf : + 4310297013255866 -218
; mpfd: + 4310297013255866 -218 (4.64589e-066) class: Pos. norm. non-zero
; hwf : + 4310297013255866 -218 (4.64589e-066) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100100101 #b1111010100000011000100111010010110011111111010111010)))
(assert (= y (fp #b1 #b00100001001 #b0100111100111000110011000111100100000000101110000100)))
(assert (= r (fp #b0 #b01100100101 #b1111010100000011000100111010010110011111111010111010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
