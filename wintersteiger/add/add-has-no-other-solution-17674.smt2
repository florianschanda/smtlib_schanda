(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4855330348801174533690527823637239634990692138671875p352 {+ 2186646394962163 352 (1.36283e+106)}
; Y = -1.3196941010557041717987658557831309735774993896484375p129 {- 1439774234387015 129 (-8.98137e+038)}
; 1.4855330348801174533690527823637239634990692138671875p352 + -1.3196941010557041717987658557831309735774993896484375p129 == 1.485533034880117231324447857332415878772735595703125p352
; [HW: 1.485533034880117231324447857332415878772735595703125p352] 

; mpf : + 2186646394962162 352
; mpfd: + 2186646394962162 352 (1.36283e+106) class: Pos. norm. non-zero
; hwf : + 2186646394962162 352 (1.36283e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011111 #b0111110001001011111001001001100111110000000011110011)))
(assert (= y (fp #b1 #b10010000000 #b0101000111010111011110001111110011000010001001000111)))
(assert (= r (fp #b0 #b10101011111 #b0111110001001011111001001001100111110000000011110010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
