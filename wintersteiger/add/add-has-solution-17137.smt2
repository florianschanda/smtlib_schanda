(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.463459197863719918331071312422864139080047607421875p-87 {- 2087234670800478 -87 (-9.45738e-027)}
; Y = 1.7301842064420045463890573955723084509372711181640625p941 {+ 3288457320044033 941 (3.21602e+283)}
; -1.463459197863719918331071312422864139080047607421875p-87 + 1.7301842064420045463890573955723084509372711181640625p941 == 1.7301842064420043243444524705410003662109375p941
; [HW: 1.7301842064420043243444524705410003662109375p941] 

; mpf : + 3288457320044032 941
; mpfd: + 3288457320044032 941 (3.21602e+283) class: Pos. norm. non-zero
; hwf : + 3288457320044032 941 (3.21602e+283) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101000 #b0111011010100101010000110001000111011010111001011110)))
(assert (= y (fp #b0 #b11110101100 #b1011101011101101010110100010011010111001011000000001)))
(assert (= r (fp #b0 #b11110101100 #b1011101011101101010110100010011010111001011000000000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
