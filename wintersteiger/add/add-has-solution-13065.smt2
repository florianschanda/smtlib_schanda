(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6569302359307134242527581591275520622730255126953125p332 {- 2958550765745973 332 (-1.44965e+100)}
; Y = 1.316481592215018370239931755349971354007720947265625p568 {+ 1425306380769178 568 (1.2719e+171)}
; -1.6569302359307134242527581591275520622730255126953125p332 + 1.316481592215018370239931755349971354007720947265625p568 == 1.3164815922150181481953268303186632692813873291015625p568
; [HW: 1.3164815922150181481953268303186632692813873291015625p568] 

; mpf : + 1425306380769177 568
; mpfd: + 1425306380769177 568 (1.2719e+171) class: Pos. norm. non-zero
; hwf : + 1425306380769177 568 (1.2719e+171) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101001011 #b1010100000101100100101000111011100010011011100110101)))
(assert (= y (fp #b0 #b11000110111 #b0101000100000100111100000000100001011001011110011010)))
(assert (= r (fp #b0 #b11000110111 #b0101000100000100111100000000100001011001011110011001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
