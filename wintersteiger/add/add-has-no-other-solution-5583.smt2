(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7016326773438927855153224300011061131954193115234375p311 {- 3159872664236919 311 (-7.09896e+093)}
; Y = -1.880537183412908763813220502925105392932891845703125p760 {- 3965586931104242 760 (-1.14046e+229)}
; -1.7016326773438927855153224300011061131954193115234375p311 + -1.880537183412908763813220502925105392932891845703125p760 == -1.880537183412908763813220502925105392932891845703125p760
; [HW: -1.880537183412908763813220502925105392932891845703125p760] 

; mpf : - 3965586931104242 760
; mpfd: - 3965586931104242 760 (-1.14046e+229) class: Neg. norm. non-zero
; hwf : - 3965586931104242 760 (-1.14046e+229) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110110 #b1011001110011110001100101111101011111111001101110111)))
(assert (= y (fp #b1 #b11011110111 #b1110000101101010111000101000010110101011100111110010)))
(assert (= r (fp #b1 #b11011110111 #b1110000101101010111000101000010110101011100111110010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
