(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3796416432426628073670826779562048614025115966796875p760 {- 1709753963041979 760 (-8.36687e+228)}
; Y = 1.37901897768621761741769660147838294506072998046875p724 {+ 1706949726673996 724 (1.21699e+218)}
; -1.3796416432426628073670826779562048614025115966796875p760 + 1.37901897768621761741769660147838294506072998046875p724 == -1.3796416432225953041523780484567396342754364013671875p760
; [HW: -1.3796416432225953041523780484567396342754364013671875p760] 

; mpf : - 1709753962951603 760
; mpfd: - 1709753962951603 760 (-8.36687e+228) class: Neg. norm. non-zero
; hwf : - 1709753962951603 760 (-8.36687e+228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110111 #b0110000100110000001100011101100111101101010010111011)))
(assert (= y (fp #b0 #b11011010011 #b0110000100000111011000110100000110111001110001001100)))
(assert (= r (fp #b1 #b11011110111 #b0110000100110000001100011101100111010111001110110011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
