(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0492175261144518483291676602675579488277435302734375p200 {- 221656032269143 200 (-1.68603e+060)}
; Y = -1.0164446431726619213264939389773644506931304931640625p-427 {- 74060088864641 -427 (-2.93275e-129)}
; -1.0492175261144518483291676602675579488277435302734375p200 + -1.0164446431726619213264939389773644506931304931640625p-427 == -1.0492175261144518483291676602675579488277435302734375p200
; [HW: -1.0492175261144518483291676602675579488277435302734375p200] 

; mpf : - 221656032269143 200
; mpfd: - 221656032269143 200 (-1.68603e+060) class: Neg. norm. non-zero
; hwf : - 221656032269143 200 (-1.68603e+060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000111 #b0000110010011001100001010001000100001101001101010111)))
(assert (= y (fp #b1 #b01001010100 #b0000010000110101101101110101010010011110111110000001)))
(assert (= r (fp #b1 #b10011000111 #b0000110010011001100001010001000100001101001101010111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
