(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9919356120466160664506105604232288897037506103515625p838 {- 4467280852788665 838 (-3.651e+252)}
; Y = -1.649845878056531045530164192314259707927703857421875p-586 {- 2926645654263646 -586 (-6.51427e-177)}
; -1.9919356120466160664506105604232288897037506103515625p838 + -1.649845878056531045530164192314259707927703857421875p-586 == -1.9919356120466160664506105604232288897037506103515625p838
; [HW: -1.9919356120466160664506105604232288897037506103515625p838] 

; mpf : - 4467280852788665 838
; mpfd: - 4467280852788665 838 (-3.651e+252) class: Neg. norm. non-zero
; hwf : - 4467280852788665 838 (-3.651e+252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000101 #b1111110111101111011111100000010101111010010110111001)))
(assert (= y (fp #b1 #b00110110101 #b1010011001011100010011001010100110110001011101011110)))
(assert (= r (fp #b1 #b11101000101 #b1111110111101111011111100000010101111010010110111001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
