(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.32082647171559841581256478093564510345458984375p649 {- 1444873978468960 649 (-3.08541e+195)}
; Y = -1.907889219713153838853259003371931612491607666015625p-497 {- 4088769551593850 -497 (-4.66278e-150)}
; -1.32082647171559841581256478093564510345458984375p649 + -1.907889219713153838853259003371931612491607666015625p-497 == -1.32082647171559841581256478093564510345458984375p649
; [HW: -1.32082647171559841581256478093564510345458984375p649] 

; mpf : - 1444873978468960 649
; mpfd: - 1444873978468960 649 (-3.08541e+195) class: Neg. norm. non-zero
; hwf : - 1444873978468960 649 (-3.08541e+195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001000 #b0101001000100001101011110000001110110101101001100000)))
(assert (= y (fp #b1 #b01000001110 #b1110100001101011011011011000101100001111000101111010)))
(assert (= r (fp #b1 #b11010001000 #b0101001000100001101011110000001110110101101001100000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
