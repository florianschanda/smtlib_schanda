(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.78481664422770780475957508315332233905792236328125p-387 {+ 3534499946498068 -387 (5.6622e-117)}
; Y = -1.649136240135407494022956598200835287570953369140625p-21 {- 2923449729186506 -21 (-7.86369e-007)}
; 1.78481664422770780475957508315332233905792236328125p-387 + -1.649136240135407494022956598200835287570953369140625p-21 == -1.649136240135407494022956598200835287570953369140625p-21
; [HW: -1.649136240135407494022956598200835287570953369140625p-21] 

; mpf : - 2923449729186506 -21
; mpfd: - 2923449729186506 -21 (-7.86369e-007) class: Neg. norm. non-zero
; hwf : - 2923449729186506 -21 (-7.86369e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111100 #b1100100011101001101111100101110001010000100000010100)))
(assert (= y (fp #b1 #b01111101010 #b1010011000101101110010101110101000000111101011001010)))
(assert (= r (fp #b1 #b01111101010 #b1010011000101101110010101110101000000111101011001010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
