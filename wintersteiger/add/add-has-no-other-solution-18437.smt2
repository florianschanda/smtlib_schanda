(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.643554622690632793791110088932327926158905029296875p-193 {+ 2898312358942094 -193 (1.30917e-058)}
; Y = -1.466554924323636210914401090121828019618988037109375p401 {- 2101176583331798 401 (-7.57402e+120)}
; 1.643554622690632793791110088932327926158905029296875p-193 + -1.466554924323636210914401090121828019618988037109375p401 == -1.466554924323636210914401090121828019618988037109375p401
; [HW: -1.466554924323636210914401090121828019618988037109375p401] 

; mpf : - 2101176583331798 401
; mpfd: - 2101176583331798 401 (-7.57402e+120) class: Neg. norm. non-zero
; hwf : - 2101176583331798 401 (-7.57402e+120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111110 #b1010010010111111111111101110100110100101010110001110)))
(assert (= y (fp #b1 #b10110010000 #b0111011101110000001001001011110111000001111111010110)))
(assert (= r (fp #b1 #b10110010000 #b0111011101110000001001001011110111000001111111010110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
