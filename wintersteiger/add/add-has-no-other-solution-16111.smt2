(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8966149115566739435934096036362461745738983154296875p337 {- 4037994581581467 337 (-5.30992e+101)}
; Y = 1.185781264815875868379180246847681701183319091796875p-240 {+ 836684434997198 -240 (6.71128e-073)}
; -1.8966149115566739435934096036362461745738983154296875p337 + 1.185781264815875868379180246847681701183319091796875p-240 == -1.8966149115566739435934096036362461745738983154296875p337
; [HW: -1.8966149115566739435934096036362461745738983154296875p337] 

; mpf : - 4037994581581467 337
; mpfd: - 4037994581581467 337 (-5.30992e+101) class: Neg. norm. non-zero
; hwf : - 4037994581581467 337 (-5.30992e+101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010000 #b1110010110001000100011100000101000111101111010011011)))
(assert (= y (fp #b0 #b01100001111 #b0010111110001111010111000110100010010111111111001110)))
(assert (= r (fp #b1 #b10101010000 #b1110010110001000100011100000101000111101111010011011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
