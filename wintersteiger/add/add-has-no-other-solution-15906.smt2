(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9683420669014328741042163528618402779102325439453125p-463 {- 4361024971664469 -463 (-8.26442e-140)}
; Y = -1.1594688160267530019353898751433007419109344482421875p710 {- 718183700435299 710 (-6.24534e+213)}
; -1.9683420669014328741042163528618402779102325439453125p-463 + -1.1594688160267530019353898751433007419109344482421875p710 == -1.15946881602675322397999480017460882663726806640625p710
; [HW: -1.15946881602675322397999480017460882663726806640625p710] 

; mpf : - 718183700435300 710
; mpfd: - 718183700435300 710 (-6.24534e+213) class: Neg. norm. non-zero
; hwf : - 718183700435300 710 (-6.24534e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110000 #b1111011111100101010001000000010010101110110001010101)))
(assert (= y (fp #b1 #b11011000101 #b0010100011010010111100101100010110010001000101100011)))
(assert (= r (fp #b1 #b11011000101 #b0010100011010010111100101100010110010001000101100100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
