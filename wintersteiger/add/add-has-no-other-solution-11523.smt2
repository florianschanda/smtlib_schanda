(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1017116079438171727389317311462946236133575439453125p-346 {- 458068359635029 -346 (-7.68581e-105)}
; Y = 1.4482517789568258859134175509097985923290252685546875p641 {+ 2018746544678123 641 (1.32151e+193)}
; -1.1017116079438171727389317311462946236133575439453125p-346 + 1.4482517789568258859134175509097985923290252685546875p641 == 1.4482517789568258859134175509097985923290252685546875p641
; [HW: 1.4482517789568258859134175509097985923290252685546875p641] 

; mpf : + 2018746544678123 641
; mpfd: + 2018746544678123 641 (1.32151e+193) class: Pos. norm. non-zero
; hwf : + 2018746544678123 641 (1.32151e+193) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010100101 #b0001101000001001110001011001110110111110000001010101)))
(assert (= y (fp #b0 #b11010000000 #b0111001011000000101000001110101011111110010011101011)))
(assert (= r (fp #b0 #b11010000000 #b0111001011000000101000001110101011111110010011101011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
