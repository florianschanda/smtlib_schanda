(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4884018318327154606350859467056579887866973876953125p-927 {- 2199566307848885 -927 (-1.31194e-279)}
; Y = 1.47009799118974004983328995876945555210113525390625p-197 {+ 2117133137949732 -197 (7.31875e-060)}
; -1.4884018318327154606350859467056579887866973876953125p-927 + 1.47009799118974004983328995876945555210113525390625p-197 == 1.47009799118974004983328995876945555210113525390625p-197
; [HW: 1.47009799118974004983328995876945555210113525390625p-197] 

; mpf : + 2117133137949732 -197
; mpfd: + 2117133137949732 -197 (7.31875e-060) class: Pos. norm. non-zero
; hwf : + 2117133137949732 -197 (7.31875e-060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001100000 #b0111110100000111111001110000011100000111001010110101)))
(assert (= y (fp #b0 #b01100111010 #b0111100001011000010101111000101000010011010000100100)))
(assert (= r (fp #b0 #b01100111010 #b0111100001011000010101111000101000010011010000100100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
