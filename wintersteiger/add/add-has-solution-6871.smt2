(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3603187702377237400241938303224742412567138671875p-718 {- 1622731479377208 -718 (-9.86515e-217)}
; Y = -1.301825188602682370486718355095945298671722412109375p934 {- 1359299806922070 934 (-1.89046e+281)}
; -1.3603187702377237400241938303224742412567138671875p-718 + -1.301825188602682370486718355095945298671722412109375p934 == -1.301825188602682370486718355095945298671722412109375p934
; [HW: -1.301825188602682370486718355095945298671722412109375p934] 

; mpf : - 1359299806922070 934
; mpfd: - 1359299806922070 934 (-1.89046e+281) class: Neg. norm. non-zero
; hwf : - 1359299806922070 934 (-1.89046e+281) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110001 #b0101110000111101110110011101011001001110010100111000)))
(assert (= y (fp #b1 #b11110100101 #b0100110101000100011010100110001000101000010101010110)))
(assert (= r (fp #b1 #b11110100101 #b0100110101000100011010100110001000101000010101010110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
