(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4201080150925757816793293386581353843212127685546875p939 {+ 1891998300226283 939 (6.59914e+282)}
; Y = -1.3354894093832860857418154409970156848430633544921875p-370 {- 1510909979085315 -370 (-5.55318e-112)}
; 1.4201080150925757816793293386581353843212127685546875p939 + -1.3354894093832860857418154409970156848430633544921875p-370 == 1.4201080150925757816793293386581353843212127685546875p939
; [HW: 1.4201080150925757816793293386581353843212127685546875p939] 

; mpf : + 1891998300226283 939
; mpfd: + 1891998300226283 939 (6.59914e+282) class: Pos. norm. non-zero
; hwf : + 1891998300226283 939 (6.59914e+282) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110101010 #b0110101110001100001100101110100110011100001011101011)))
(assert (= y (fp #b1 #b01010001101 #b0101010111100010101000100100100101110100101000000011)))
(assert (= r (fp #b0 #b11110101010 #b0110101110001100001100101110100110011100001011101011)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
