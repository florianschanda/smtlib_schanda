(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9350542031150987920540273989900015294551849365234375p102 {+ 4211109760720375 102 (9.81189e+030)}
; Y = 1.4608207811263864694950598277500830590724945068359375p-506 {+ 2075352298165375 -506 (6.97299e-153)}
; 1.9350542031150987920540273989900015294551849365234375p102 + 1.4608207811263864694950598277500830590724945068359375p-506 == 1.9350542031150987920540273989900015294551849365234375p102
; [HW: 1.9350542031150987920540273989900015294551849365234375p102] 

; mpf : + 4211109760720375 102
; mpfd: + 4211109760720375 102 (9.81189e+030) class: Pos. norm. non-zero
; hwf : + 4211109760720375 102 (9.81189e+030) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100101 #b1110111101011111101101100101011001011101110111110111)))
(assert (= y (fp #b0 #b01000000101 #b0111010111111000010110011100100001000001010001111111)))
(assert (= r (fp #b0 #b10001100101 #b1110111101011111101101100101011001011101110111110111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
