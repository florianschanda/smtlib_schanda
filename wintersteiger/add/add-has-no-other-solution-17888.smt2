(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.64463002147533732255624272511340677738189697265625p-873 {+ 2903155524508164 -873 (2.61145e-263)}
; Y = -1.6082856325454966128774003664148040115833282470703125p908 {- 2739474948066725 908 (-3.48016e+273)}
; 1.64463002147533732255624272511340677738189697265625p-873 + -1.6082856325454966128774003664148040115833282470703125p908 == -1.6082856325454966128774003664148040115833282470703125p908
; [HW: -1.6082856325454966128774003664148040115833282470703125p908] 

; mpf : - 2739474948066725 908
; mpfd: - 2739474948066725 908 (-3.48016e+273) class: Neg. norm. non-zero
; hwf : - 2739474948066725 908 (-3.48016e+273) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010110 #b1010010100000110011110010001110001000001101000000100)))
(assert (= y (fp #b1 #b11110001011 #b1001101110111000100110110111001001101000110110100101)))
(assert (= r (fp #b1 #b11110001011 #b1001101110111000100110110111001001101000110110100101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
