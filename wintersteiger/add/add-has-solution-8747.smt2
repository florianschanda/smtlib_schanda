(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.078587900061216853231371715082786977291107177734375p536 {+ 353928437431526 536 (2.42624e+161)}
; Y = 1.6113383902795035407251589276711456477642059326171875p416 {+ 2753223346660051 416 (2.72687e+125)}
; 1.078587900061216853231371715082786977291107177734375p536 + 1.6113383902795035407251589276711456477642059326171875p416 == 1.078587900061216853231371715082786977291107177734375p536
; [HW: 1.078587900061216853231371715082786977291107177734375p536] 

; mpf : + 353928437431526 536
; mpfd: + 353928437431526 536 (2.42624e+161) class: Pos. norm. non-zero
; hwf : + 353928437431526 536 (2.42624e+161) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000010111 #b0001010000011110010101100010110010011111110011100110)))
(assert (= y (fp #b0 #b10110011111 #b1001110010000000101011000011100100001010001011010011)))
(assert (= r (fp #b0 #b11000010111 #b0001010000011110010101100010110010011111110011100110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
