(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.196466106776856275217824077117256820201873779296875p974 {- 884804685271182 974 (-1.91036e+293)}
; Y = 1.0278119482214000957043253947631455957889556884765625p-354 {+ 125253879646345 -354 (2.80088e-107)}
; -1.196466106776856275217824077117256820201873779296875p974 + 1.0278119482214000957043253947631455957889556884765625p-354 == -1.196466106776856275217824077117256820201873779296875p974
; [HW: -1.196466106776856275217824077117256820201873779296875p974] 

; mpf : - 884804685271182 974
; mpfd: - 884804685271182 974 (-1.91036e+293) class: Neg. norm. non-zero
; hwf : - 884804685271182 974 (-1.91036e+293) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001101 #b0011001001001011100110100100111101100001000010001110)))
(assert (= y (fp #b0 #b01010011101 #b0000011100011110101011110001000000001100100010001001)))
(assert (= r (fp #b1 #b11111001101 #b0011001001001011100110100100111101100001000010001110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
