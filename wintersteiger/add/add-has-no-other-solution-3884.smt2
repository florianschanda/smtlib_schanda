(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2546204607150759358091818285174667835235595703125p-736 {+ 1146708611997320 -736 (3.47085e-222)}
; Y = -1.5549773992890771889818779527558945119380950927734375p-76 {- 2499396008637335 -76 (-2.058e-023)}
; 1.2546204607150759358091818285174667835235595703125p-736 + -1.5549773992890771889818779527558945119380950927734375p-76 == -1.5549773992890771889818779527558945119380950927734375p-76
; [HW: -1.5549773992890771889818779527558945119380950927734375p-76] 

; mpf : - 2499396008637335 -76
; mpfd: - 2499396008637335 -76 (-2.058e-023) class: Neg. norm. non-zero
; hwf : - 2499396008637335 -76 (-2.058e-023) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100011111 #b0100000100101110110011100111011110101001111010001000)))
(assert (= y (fp #b1 #b01110110011 #b1000111000010010111111111011001111110111001110010111)))
(assert (= r (fp #b1 #b01110110011 #b1000111000010010111111111011001111110111001110010111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
