(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5246604460062780361795375938527286052703857421875p414 {+ 2362860589129912 414 (6.45047e+124)}
; Y = -1.776799763605545035005661702598445117473602294921875p-629 {- 3498395125915422 -629 (-7.97574e-190)}
; 1.5246604460062780361795375938527286052703857421875p414 + -1.776799763605545035005661702598445117473602294921875p-629 == 1.5246604460062780361795375938527286052703857421875p414
; [HW: 1.5246604460062780361795375938527286052703857421875p414] 

; mpf : + 2362860589129912 414
; mpfd: + 2362860589129912 414 (6.45047e+124) class: Pos. norm. non-zero
; hwf : + 2362860589129912 414 (6.45047e+124) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011101 #b1000011001010000001001011010000100011010000010111000)))
(assert (= y (fp #b1 #b00110001010 #b1100011011011100010110010110110000111001111100011110)))
(assert (= r (fp #b0 #b10110011101 #b1000011001010000001001011010000100011010000010111000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
