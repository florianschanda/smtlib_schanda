(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5747888845426636361679584297235123813152313232421875p-679 {- 2588619006243043 -679 (-6.27849e-205)}
; Y = 1.3644333503950882846567083106492646038532257080078125p840 {+ 1641261901040701 840 (1.00034e+253)}
; -1.5747888845426636361679584297235123813152313232421875p-679 + 1.3644333503950882846567083106492646038532257080078125p840 == 1.36443335039508806261210338561795651912689208984375p840
; [HW: 1.36443335039508806261210338561795651912689208984375p840] 

; mpf : + 1641261901040700 840
; mpfd: + 1641261901040700 840 (1.00034e+253) class: Pos. norm. non-zero
; hwf : + 1641261901040700 840 (1.00034e+253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101011000 #b1001001100100101010111010100010100110111000011100011)))
(assert (= y (fp #b0 #b11101000111 #b0101110101001011100000010000100110000100110000111101)))
(assert (= r (fp #b0 #b11101000111 #b0101110101001011100000010000100110000100110000111100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
