(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5125322452607863343843064285465516149997711181640625p875 {- 2308240028771841 875 (-3.81023e+263)}
; Y = -1.5032920401703802060211501157027669250965118408203125p-974 {- 2266625844569861 -974 (-9.41516e-294)}
; -1.5125322452607863343843064285465516149997711181640625p875 + -1.5032920401703802060211501157027669250965118408203125p-974 == -1.5125322452607863343843064285465516149997711181640625p875
; [HW: -1.5125322452607863343843064285465516149997711181640625p875] 

; mpf : - 2308240028771841 875
; mpfd: - 2308240028771841 875 (-3.81023e+263) class: Neg. norm. non-zero
; hwf : - 2308240028771841 875 (-3.81023e+263) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101010 #b1000001100110101010100000010111110001010011000000001)))
(assert (= y (fp #b1 #b00000110001 #b1000000011010111101111110100010011011110011100000101)))
(assert (= r (fp #b1 #b11101101010 #b1000001100110101010100000010111110001010011000000001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
