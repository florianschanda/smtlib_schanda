(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.346256781095264809522404902963899075984954833984375p-291 {- 1559401910315142 -291 (-3.38376e-088)}
; Y = -1.2124870515652153013519409796572290360927581787109375p997 {- 956956606250159 997 (-1.62399e+300)}
; -1.346256781095264809522404902963899075984954833984375p-291 + -1.2124870515652153013519409796572290360927581787109375p997 == -1.2124870515652153013519409796572290360927581787109375p997
; [HW: -1.2124870515652153013519409796572290360927581787109375p997] 

; mpf : - 956956606250159 997
; mpfd: - 956956606250159 997 (-1.62399e+300) class: Neg. norm. non-zero
; hwf : - 956956606250159 997 (-1.62399e+300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011100 #b0101100010100100010010001100111011010010100010000110)))
(assert (= y (fp #b1 #b11111100100 #b0011011001100101100011010010100101001011110010101111)))
(assert (= r (fp #b1 #b11111100100 #b0011011001100101100011010010100101001011110010101111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
