(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4734882482981113138720274946535937488079071044921875p374 {+ 2132401498599683 374 (5.66976e+112)}
; Y = -1.124602780932348888853766766260378062725067138671875p-580 {- 561161037776254 -580 (-2.84185e-175)}
; 1.4734882482981113138720274946535937488079071044921875p374 + -1.124602780932348888853766766260378062725067138671875p-580 == 1.4734882482981113138720274946535937488079071044921875p374
; [HW: 1.4734882482981113138720274946535937488079071044921875p374] 

; mpf : + 2132401498599683 374
; mpfd: + 2132401498599683 374 (5.66976e+112) class: Pos. norm. non-zero
; hwf : + 2132401498599683 374 (5.66976e+112) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110101 #b0111100100110110100001101001110101111011000100000011)))
(assert (= y (fp #b1 #b00110111011 #b0001111111100101111101111100010100011000010101111110)))
(assert (= r (fp #b0 #b10101110101 #b0111100100110110100001101001110101111011000100000011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
