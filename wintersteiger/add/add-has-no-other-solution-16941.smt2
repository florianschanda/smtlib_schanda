(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.099569742734368471559491808875463902950286865234375p-463 {- 448422256275878 -463 (-4.61673e-140)}
; Y = 1.8846808317522041331670834551914595067501068115234375p-554 {+ 3984248264221047 -554 (3.1961e-167)}
; -1.099569742734368471559491808875463902950286865234375p-463 + 1.8846808317522041331670834551914595067501068115234375p-554 == -1.099569742734368471559491808875463902950286865234375p-463
; [HW: -1.099569742734368471559491808875463902950286865234375p-463] 

; mpf : - 448422256275878 -463
; mpfd: - 448422256275878 -463 (-4.61673e-140) class: Neg. norm. non-zero
; hwf : - 448422256275878 -463 (-4.61673e-140) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110000 #b0001100101111101011001110001010010110111000110100110)))
(assert (= y (fp #b0 #b00111010101 #b1110001001111010011100010110011111000110000101110111)))
(assert (= r (fp #b1 #b01000110000 #b0001100101111101011001110001010010110111000110100110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
