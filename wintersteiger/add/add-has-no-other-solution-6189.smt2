(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.89231722344318864514889355632476508617401123046875p-49 {- 4018639514995020 -49 (-3.36143e-015)}
; Y = 1.7601282186408726548876302331336773931980133056640625p316 {+ 3423313162224833 316 (2.34976e+095)}
; -1.89231722344318864514889355632476508617401123046875p-49 + 1.7601282186408726548876302331336773931980133056640625p316 == 1.7601282186408724328430253081023693084716796875p316
; [HW: 1.7601282186408724328430253081023693084716796875p316] 

; mpf : + 3423313162224832 316
; mpfd: + 3423313162224832 316 (2.34976e+095) class: Pos. norm. non-zero
; hwf : + 3423313162224832 316 (2.34976e+095) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111001110 #b1110010001101110111001101100110001011000100101001100)))
(assert (= y (fp #b0 #b10100111011 #b1100001010010111110000110100111111010100010011000001)))
(assert (= r (fp #b0 #b10100111011 #b1100001010010111110000110100111111010100010011000000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
