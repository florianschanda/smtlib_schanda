(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.959889872720232073532997674192301928997039794921875p406 {+ 4322959673099550 406 (3.23899e+122)}
; Y = -1.4730802997157799172356362760183401405811309814453125p-899 {- 2130564261516309 -899 (-3.48546e-271)}
; 1.959889872720232073532997674192301928997039794921875p406 + -1.4730802997157799172356362760183401405811309814453125p-899 == 1.9598898727202318514883927491609938442707061767578125p406
; [HW: 1.9598898727202318514883927491609938442707061767578125p406] 

; mpf : + 4322959673099549 406
; mpfd: + 4322959673099549 406 (3.23899e+122) class: Pos. norm. non-zero
; hwf : + 4322959673099549 406 (3.23899e+122) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110010101 #b1111010110111011010101111011101100011000010100011110)))
(assert (= y (fp #b1 #b00001111100 #b0111100100011011110010100101111110101001010000010101)))
(assert (= r (fp #b0 #b10110010101 #b1111010110111011010101111011101100011000010100011101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
