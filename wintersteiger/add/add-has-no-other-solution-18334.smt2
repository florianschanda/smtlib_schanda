(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.159695149933367641637005363008938729763031005859375p230 {+ 719203017732790 230 (2.00098e+069)}
; Y = -1.2217704577031793800045988973579369485378265380859375p-988 {- 998765350673823 -988 (-4.6704e-298)}
; 1.159695149933367641637005363008938729763031005859375p230 + -1.2217704577031793800045988973579369485378265380859375p-988 == 1.159695149933367641637005363008938729763031005859375p230
; [HW: 1.159695149933367641637005363008938729763031005859375p230] 

; mpf : + 719203017732790 230
; mpfd: + 719203017732790 230 (2.00098e+069) class: Pos. norm. non-zero
; hwf : + 719203017732790 230 (2.00098e+069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100101 #b0010100011100001110010000000011001001011001010110110)))
(assert (= y (fp #b1 #b00000100011 #b0011100011000101111100101101111100001101110110011111)))
(assert (= r (fp #b0 #b10011100101 #b0010100011100001110010000000011001001011001010110110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
