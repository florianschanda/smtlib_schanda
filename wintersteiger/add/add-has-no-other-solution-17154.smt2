(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.54231993729542349313987870118580758571624755859375p-527 {- 2442391867519260 -527 (-3.51048e-159)}
; Y = -1.3734740721863463175367314761388115584850311279296875p-25 {- 1681977692330971 -25 (-4.09327e-008)}
; -1.54231993729542349313987870118580758571624755859375p-527 + -1.3734740721863463175367314761388115584850311279296875p-25 == -1.37347407218634653958133640117011964321136474609375p-25
; [HW: -1.37347407218634653958133640117011964321136474609375p-25] 

; mpf : - 1681977692330972 -25
; mpfd: - 1681977692330972 -25 (-4.09327e-008) class: Neg. norm. non-zero
; hwf : - 1681977692330972 -25 (-4.09327e-008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110000 #b1000101011010101011110101011101010100111000100011100)))
(assert (= y (fp #b1 #b01111100110 #b0101111110011011111111110010110111110001101111011011)))
(assert (= r (fp #b1 #b01111100110 #b0101111110011011111111110010110111110001101111011100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
