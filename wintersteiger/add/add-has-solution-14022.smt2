(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.785789549430568445842482105945236980915069580078125p-907 {- 3538881522007138 -907 (-1.65053e-273)}
; Y = -1.6466581380772795650813122847466729581356048583984375p407 {- 2912289349680935 407 (-5.44267e+122)}
; -1.785789549430568445842482105945236980915069580078125p-907 + -1.6466581380772795650813122847466729581356048583984375p407 == -1.6466581380772795650813122847466729581356048583984375p407
; [HW: -1.6466581380772795650813122847466729581356048583984375p407] 

; mpf : - 2912289349680935 407
; mpfd: - 2912289349680935 407 (-5.44267e+122) class: Neg. norm. non-zero
; hwf : - 2912289349680935 407 (-5.44267e+122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001110100 #b1100100100101001100000010000000001010111110001100010)))
(assert (= y (fp #b1 #b10110010110 #b1010010110001011011000110100001010111011111100100111)))
(assert (= r (fp #b1 #b10110010110 #b1010010110001011011000110100001010111011111100100111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
