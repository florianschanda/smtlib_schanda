(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.78493354761798617147405821015127003192901611328125p322 {+ 3535026432562964 322 (1.52504e+097)}
; Y = -1.10157823631468687608503387309610843658447265625p-617 {- 457467707215776 -617 (-2.02539e-186)}
; 1.78493354761798617147405821015127003192901611328125p322 + -1.10157823631468687608503387309610843658447265625p-617 == 1.78493354761798617147405821015127003192901611328125p322
; [HW: 1.78493354761798617147405821015127003192901611328125p322] 

; mpf : + 3535026432562964 322
; mpfd: + 3535026432562964 322 (1.52504e+097) class: Pos. norm. non-zero
; hwf : + 3535026432562964 322 (1.52504e+097) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101000001 #b1100100011110001011001111010110010001101011100010100)))
(assert (= y (fp #b1 #b00110010110 #b0001101000000001000010000000001011110100111110100000)))
(assert (= r (fp #b0 #b10101000001 #b1100100011110001011001111010110010001101011100010100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
