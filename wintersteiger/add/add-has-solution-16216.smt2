(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.90579000279108878856959563563577830791473388671875p-866 {- 4079315519045868 -866 (-3.87346e-261)}
; Y = -1.2946229532735420431066586388624273240566253662109375p-525 {- 1326863822577519 -525 (-1.17868e-158)}
; -1.90579000279108878856959563563577830791473388671875p-866 + -1.2946229532735420431066586388624273240566253662109375p-525 == -1.2946229532735420431066586388624273240566253662109375p-525
; [HW: -1.2946229532735420431066586388624273240566253662109375p-525] 

; mpf : - 1326863822577519 -525
; mpfd: - 1326863822577519 -525 (-1.17868e-158) class: Neg. norm. non-zero
; hwf : - 1326863822577519 -525 (-1.17868e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011101 #b1110011111100001110110101000011100001000000011101100)))
(assert (= y (fp #b1 #b00111110010 #b0100101101101100011010001110110011110101111101101111)))
(assert (= r (fp #b1 #b00111110010 #b0100101101101100011010001110110011110101111101101111)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
