(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.44297478622665220626686277682892978191375732421875p-214 {+ 1994981082184876 -214 (5.48075e-065)}
; Y = -0.7291720996386714670478568223188631236553192138671875p-1022 {- 3283899196221683 -1023 (-1.62246e-308)}
; 1.44297478622665220626686277682892978191375732421875p-214 + -0.7291720996386714670478568223188631236553192138671875p-1022 == 1.4429747862266519842222578517976216971874237060546875p-214
; [HW: 1.4429747862266519842222578517976216971874237060546875p-214] 

; mpf : + 1994981082184875 -214
; mpfd: + 1994981082184875 -214 (5.48075e-065) class: Pos. norm. non-zero
; hwf : + 1994981082184875 -214 (5.48075e-065) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101001 #b0111000101100110110010111010101111001011110010101100)))
(assert (= y (fp #b1 #b00000000000 #b1011101010101011000001011101000100011010100011110011)))
(assert (= r (fp #b0 #b01100101001 #b0111000101100110110010111010101111001011110010101011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
