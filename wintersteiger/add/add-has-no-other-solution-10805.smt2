(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.176421312891427373159558555926196277141571044921875p709 {- 794530958998046 709 (-3.16833e+213)}
; Y = -1.2774227895798453413789275145973078906536102294921875p-406 {- 1249401171775875 -406 (-7.72959e-123)}
; -1.176421312891427373159558555926196277141571044921875p709 + -1.2774227895798453413789275145973078906536102294921875p-406 == -1.176421312891427373159558555926196277141571044921875p709
; [HW: -1.176421312891427373159558555926196277141571044921875p709] 

; mpf : - 794530958998046 709
; mpfd: - 794530958998046 709 (-3.16833e+213) class: Neg. norm. non-zero
; hwf : - 794530958998046 709 (-3.16833e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011000100 #b0010110100101001111100100111100100101111101000011110)))
(assert (= y (fp #b1 #b01001101001 #b0100011100000101001011100001000001101001000110000011)))
(assert (= r (fp #b1 #b11011000100 #b0010110100101001111100100111100100101111101000011110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
