(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2302690834744283154833510707248933613300323486328125p-583 {+ 1037039758530381 -583 (3.88609e-176)}
; Y = -1.2032073859349556865794284021831117570400238037109375p679 {- 915164707575599 679 (-3.01792e+204)}
; 1.2302690834744283154833510707248933613300323486328125p-583 + -1.2032073859349556865794284021831117570400238037109375p679 == -1.203207385934955464534823477151803672313690185546875p679
; [HW: -1.203207385934955464534823477151803672313690185546875p679] 

; mpf : - 915164707575598 679
; mpfd: - 915164707575598 679 (-3.01792e+204) class: Neg. norm. non-zero
; hwf : - 915164707575598 679 (-3.01792e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111000 #b0011101011110010111010100010011011001101011101001101)))
(assert (= y (fp #b1 #b11010100110 #b0011010000000101011001100011010011100101011100101111)))
(assert (= r (fp #b1 #b11010100110 #b0011010000000101011001100011010011100101011100101110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
