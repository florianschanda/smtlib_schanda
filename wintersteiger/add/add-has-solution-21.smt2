(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.538414525061655435678176218061707913875579833984375p-73 {+ 2424803454438534 -73 (1.62886e-022)}
; Y = -1.1619489450384097306567809937405399978160858154296875p-433 {- 729353208528027 -433 (-5.2384e-131)}
; 1.538414525061655435678176218061707913875579833984375p-73 + -1.1619489450384097306567809937405399978160858154296875p-433 == 1.5384145250616552136335712930303998291492462158203125p-73
; [HW: 1.5384145250616552136335712930303998291492462158203125p-73] 

; mpf : + 2424803454438533 -73
; mpfd: + 2424803454438533 -73 (1.62886e-022) class: Pos. norm. non-zero
; hwf : + 2424803454438533 -73 (1.62886e-022) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110110110 #b1000100111010101100010001100100011010100110010000110)))
(assert (= y (fp #b1 #b01001001110 #b0010100101110101011111000110111010001111110010011011)))
(assert (= r (fp #b0 #b01110110110 #b1000100111010101100010001100100011010100110010000101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
