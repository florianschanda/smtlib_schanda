(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8073004854761014481567826805985532701015472412109375p-520 {- 3635758165566191 -520 (-5.26542e-157)}
; Y = 1.4333881259190726087382472542230971157550811767578125p-926 {+ 1951806602395933 -926 (2.5269e-279)}
; -1.8073004854761014481567826805985532701015472412109375p-520 + 1.4333881259190726087382472542230971157550811767578125p-926 == -1.8073004854761014481567826805985532701015472412109375p-520
; [HW: -1.8073004854761014481567826805985532701015472412109375p-520] 

; mpf : - 3635758165566191 -520
; mpfd: - 3635758165566191 -520 (-5.26542e-157) class: Neg. norm. non-zero
; hwf : - 3635758165566191 -520 (-5.26542e-157) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110111 #b1100111010101011001111101001111100101010001011101111)))
(assert (= y (fp #b0 #b00001100001 #b0110111011110010100001100011001101001100000100011101)))
(assert (= r (fp #b1 #b00111110111 #b1100111010101011001111101001111100101010001011101111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
