(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.91326489138187216809683377505280077457427978515625p980 {+ 4112979424517956 980 (1.95511e+295)}
; Y = 1.1358498483431260783760308186174370348453521728515625p-232 {+ 611813326376441 -232 (1.64574e-070)}
; 1.91326489138187216809683377505280077457427978515625p980 + 1.1358498483431260783760308186174370348453521728515625p-232 == 1.91326489138187216809683377505280077457427978515625p980
; [HW: 1.91326489138187216809683377505280077457427978515625p980] 

; mpf : + 4112979424517956 980
; mpfd: + 4112979424517956 980 (1.95511e+295) class: Pos. norm. non-zero
; hwf : + 4112979424517956 980 (1.95511e+295) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111010011 #b1110100111001011101110100101100100010001111101000100)))
(assert (= y (fp #b0 #b01100010111 #b0010001011000111000011100011111111001100110111111001)))
(assert (= r (fp #b0 #b11111010011 #b1110100111001011101110100101100100010001111101000100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
