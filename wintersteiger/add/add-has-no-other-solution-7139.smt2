(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.463882054294253887150034643127582967281341552734375p-821 {+ 2089139046863462 -821 (1.04684e-247)}
; Y = -1.66644688070387214651191243319772183895111083984375p202 {- 3001409923600188 202 (-1.07115e+061)}
; 1.463882054294253887150034643127582967281341552734375p-821 + -1.66644688070387214651191243319772183895111083984375p202 == -1.66644688070387214651191243319772183895111083984375p202
; [HW: -1.66644688070387214651191243319772183895111083984375p202] 

; mpf : - 3001409923600188 202
; mpfd: - 3001409923600188 202 (-1.07115e+061) class: Neg. norm. non-zero
; hwf : - 3001409923600188 202 (-1.07115e+061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001010 #b0111011011000000111110010110110001100101001001100110)))
(assert (= y (fp #b1 #b10011001001 #b1010101010011100010000110100010100100100111100111100)))
(assert (= r (fp #b1 #b10011001001 #b1010101010011100010000110100010100100100111100111100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
