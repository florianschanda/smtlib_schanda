(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7754676034138279216989531050785444676876068115234375p-951 {- 3492395609772407 -951 (-9.32796e-287)}
; Y = 1.341326945341811960332734088297002017498016357421875p-928 {+ 1537199903852894 -928 (5.91151e-280)}
; -1.7754676034138279216989531050785444676876068115234375p-951 + 1.341326945341811960332734088297002017498016357421875p-928 == 1.341326733689580219532899718615226447582244873046875p-928
; [HW: 1.341326733689580219532899718615226447582244873046875p-928] 

; mpf : + 1537198950655982 -928
; mpfd: + 1537198950655982 -928 (5.91151e-280) class: Pos. norm. non-zero
; hwf : + 1537198950655982 -928 (5.91151e-280) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001000 #b1100011010000101000010110111101111000101000101110111)))
(assert (= y (fp #b0 #b00001011111 #b0101011101100001001100111110001101111100100101011110)))
(assert (= r (fp #b0 #b00001011111 #b0101011101100001001100000101011001110010011111101110)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
