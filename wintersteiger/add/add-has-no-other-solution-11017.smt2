(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.758429034350690312038523188675753772258758544921875p882 {+ 3415660716488734 882 (5.66997e+265)}
; Y = -1.5399286222466030960021043938468210399150848388671875p-862 {- 2431622341956467 -862 (-5.00777e-260)}
; 1.758429034350690312038523188675753772258758544921875p882 + -1.5399286222466030960021043938468210399150848388671875p-862 == 1.758429034350690312038523188675753772258758544921875p882
; [HW: 1.758429034350690312038523188675753772258758544921875p882] 

; mpf : + 3415660716488734 882
; mpfd: + 3415660716488734 882 (5.66997e+265) class: Pos. norm. non-zero
; hwf : + 3415660716488734 882 (5.66997e+265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101110001 #b1100001000101000011001111011101011011111100000011110)))
(assert (= y (fp #b1 #b00010100001 #b1000101000111000110000110001111010111001001101110011)))
(assert (= r (fp #b0 #b11101110001 #b1100001000101000011001111011101011011111100000011110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
