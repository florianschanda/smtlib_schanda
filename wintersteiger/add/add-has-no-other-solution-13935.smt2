(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2588050650258273410742049236432649195194244384765625p-873 {+ 1165554394411913 -873 (1.99881e-263)}
; Y = -1.2783865788058845769370464040548540651798248291015625p492 {- 1253741692575129 492 (-1.63463e+148)}
; 1.2588050650258273410742049236432649195194244384765625p-873 + -1.2783865788058845769370464040548540651798248291015625p492 == -1.2783865788058845769370464040548540651798248291015625p492
; [HW: -1.2783865788058845769370464040548540651798248291015625p492] 

; mpf : - 1253741692575129 492
; mpfd: - 1253741692575129 492 (-1.63463e+148) class: Neg. norm. non-zero
; hwf : - 1253741692575129 492 (-1.63463e+148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010110 #b0100001001000001000011000111101001010011001110001001)))
(assert (= y (fp #b1 #b10111101011 #b0100011101000100010101111100001110011101110110011001)))
(assert (= r (fp #b1 #b10111101011 #b0100011101000100010101111100001110011101110110011001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
