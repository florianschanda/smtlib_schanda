(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.909060090506194296011699407245032489299774169921875p-573 {+ 4094042684861086 -573 (6.17493e-173)}
; Y = -1.2707683622578243021195021356106735765933990478515625p-967 {- 1219432295368057 -967 (-1.01873e-291)}
; 1.909060090506194296011699407245032489299774169921875p-573 + -1.2707683622578243021195021356106735765933990478515625p-967 == 1.909060090506194296011699407245032489299774169921875p-573
; [HW: 1.909060090506194296011699407245032489299774169921875p-573] 

; mpf : + 4094042684861086 -573
; mpfd: + 4094042684861086 -573 (6.17493e-173) class: Pos. norm. non-zero
; hwf : + 4094042684861086 -573 (6.17493e-173) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111000010 #b1110100010111000001010010111111011010010101010011110)))
(assert (= y (fp #b1 #b00000111000 #b0100010101010001000100110100110010110000010101111001)))
(assert (= r (fp #b0 #b00111000010 #b1110100010111000001010010111111011010010101010011110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
