(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.39586497883129823094350285828113555908203125p-259 {- 1782817371153664 -259 (-1.50687e-078)}
; Y = 1.758564101874808383030313052586279809474945068359375p-742 {+ 3416269006540022 -742 (7.60154e-224)}
; -1.39586497883129823094350285828113555908203125p-259 + 1.758564101874808383030313052586279809474945068359375p-742 == -1.39586497883129823094350285828113555908203125p-259
; [HW: -1.39586497883129823094350285828113555908203125p-259] 

; mpf : - 1782817371153664 -259
; mpfd: - 1782817371153664 -259 (-1.50687e-078) class: Neg. norm. non-zero
; hwf : - 1782817371153664 -259 (-1.50687e-078) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111100 #b0110010101010111011010000100000110110110010100000000)))
(assert (= y (fp #b0 #b00100011001 #b1100001000110001010000011100100101111000110011110110)))
(assert (= r (fp #b1 #b01011111100 #b0110010101010111011010000100000110110110010100000000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
