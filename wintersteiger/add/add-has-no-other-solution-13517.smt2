(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.443741400983679756819810791057534515857696533203125p446 {- 1998433608118962 446 (-2.62342e+134)}
; Y = 1.617936380245639238495414247154258191585540771484375p217 {+ 2782938051812934 217 (3.40777e+065)}
; -1.443741400983679756819810791057534515857696533203125p446 + 1.617936380245639238495414247154258191585540771484375p217 == -1.4437414009836795347752058660262264311313629150390625p446
; [HW: -1.4437414009836795347752058660262264311313629150390625p446] 

; mpf : - 1998433608118961 446
; mpfd: - 1998433608118961 446 (-2.62342e+134) class: Neg. norm. non-zero
; hwf : - 1998433608118961 446 (-2.62342e+134) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110111101 #b0111000110011001000010010101010100011011001010110010)))
(assert (= y (fp #b0 #b10011011000 #b1001111000110001000101000010000000101001111001000110)))
(assert (= r (fp #b1 #b10110111101 #b0111000110011001000010010101010100011011001010110001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
