(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.180738968129421362363018488395027816295623779296875p610 {+ 813975949518990 610 (5.01708e+183)}
; Y = 1.7661965802426544680514552965178154408931732177734375p468 {+ 3450642633273367 468 (1.3461e+141)}
; 1.180738968129421362363018488395027816295623779296875p610 + 1.7661965802426544680514552965178154408931732177734375p468 == 1.180738968129421362363018488395027816295623779296875p610
; [HW: 1.180738968129421362363018488395027816295623779296875p610] 

; mpf : + 813975949518990 610
; mpfd: + 813975949518990 610 (5.01708e+183) class: Pos. norm. non-zero
; hwf : + 813975949518990 610 (5.01708e+183) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001100001 #b0010111001000100111010001011010100111010100010001110)))
(assert (= y (fp #b0 #b10111010011 #b1100010000100101011101011000011001110011000000010111)))
(assert (= r (fp #b0 #b11001100001 #b0010111001000100111010001011010100111010100010001110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
