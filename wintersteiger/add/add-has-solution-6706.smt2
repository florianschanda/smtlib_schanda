(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.867463200653205479540019950945861637592315673828125p-820 {+ 3906706947219394 -820 (2.67089e-247)}
; Y = -1.749129431647748145195464530843310058116912841796875p17 {- 3373779029221070 17 (-229262)}
; 1.867463200653205479540019950945861637592315673828125p-820 + -1.749129431647748145195464530843310058116912841796875p17 == -1.749129431647748145195464530843310058116912841796875p17
; [HW: -1.749129431647748145195464530843310058116912841796875p17] 

; mpf : - 3373779029221070 17
; mpfd: - 3373779029221070 17 (-229262) class: Neg. norm. non-zero
; hwf : - 3373779029221070 17 (-229262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001011 #b1101111000010010000100010111110101001001111111000010)))
(assert (= y (fp #b1 #b10000010000 #b1011111111000110111100100100100101100101111011001110)))
(assert (= r (fp #b1 #b10000010000 #b1011111111000110111100100100100101100101111011001110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
