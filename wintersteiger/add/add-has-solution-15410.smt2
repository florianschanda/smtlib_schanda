(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6274794241495615931825113875675015151500701904296875p-722 {- 2825916100782619 -722 (-7.37664e-218)}
; Y = -1.7390802227088071330030061290017329156398773193359375p-43 {- 3328521415588287 -43 (-1.97711e-013)}
; -1.6274794241495615931825113875675015151500701904296875p-722 + -1.7390802227088071330030061290017329156398773193359375p-43 == -1.7390802227088073550476110540330410003662109375p-43
; [HW: -1.7390802227088073550476110540330410003662109375p-43] 

; mpf : - 3328521415588288 -43
; mpfd: - 3328521415588288 -43 (-1.97711e-013) class: Neg. norm. non-zero
; hwf : - 3328521415588288 -43 (-1.97711e-013) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100101101 #b1010000010100010011111011101010110100010101000011011)))
(assert (= y (fp #b1 #b01111010100 #b1011110100110100010111001000100110100111100110111111)))
(assert (= r (fp #b1 #b01111010100 #b1011110100110100010111001000100110100111100111000000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
