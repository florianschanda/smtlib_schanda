(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.36804239973830110699282158748246729373931884765625p-411 {+ 1657515614317956 -411 (2.58685e-124)}
; Y = -1.307204577031037207035524261300452053546905517578125p548 {- 1383526418643490 548 (-1.20443e+165)}
; 1.36804239973830110699282158748246729373931884765625p-411 + -1.307204577031037207035524261300452053546905517578125p548 == -1.307204577031037207035524261300452053546905517578125p548
; [HW: -1.307204577031037207035524261300452053546905517578125p548] 

; mpf : - 1383526418643490 548
; mpfd: - 1383526418643490 548 (-1.20443e+165) class: Neg. norm. non-zero
; hwf : - 1383526418643490 548 (-1.20443e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100100 #b0101111000111000000001101101011001101010110110000100)))
(assert (= y (fp #b1 #b11000100011 #b0100111010100100111101011000101110000111101000100010)))
(assert (= r (fp #b1 #b11000100011 #b0100111010100100111101011000101110000111101000100010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
