(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.34845590339957954739702472579665482044219970703125p654 {- 1569305876705396 654 (-1.00798e+197)}
; Y = 1.080375655651508726151632799883373081684112548828125p313 {+ 361979772841794 313 (1.80287e+094)}
; -1.34845590339957954739702472579665482044219970703125p654 + 1.080375655651508726151632799883373081684112548828125p313 == -1.3484559033995793253524198007653467357158660888671875p654
; [HW: -1.3484559033995793253524198007653467357158660888671875p654] 

; mpf : - 1569305876705395 654
; mpfd: - 1569305876705395 654 (-1.00798e+197) class: Neg. norm. non-zero
; hwf : - 1569305876705395 654 (-1.00798e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001101 #b0101100100110100011001111111010100110011000001110100)))
(assert (= y (fp #b0 #b10100111000 #b0001010010010011011111111011110001101010111101000010)))
(assert (= r (fp #b1 #b11010001101 #b0101100100110100011001111111010100110011000001110011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
