(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2234715385027878919999011486652307212352752685546875p-931 {+ 1006426337529067 -931 (6.74012e-281)}
; Y = 1.1779968326892633623259598607546649873256683349609375p-933 {+ 801626469372495 -933 (1.6224e-281)}
; 1.2234715385027878919999011486652307212352752685546875p-931 + 1.1779968326892633623259598607546649873256683349609375p-933 == 1.5179707466751037880925423451117239892482757568359375p-931
; [HW: 1.5179707466751037880925423451117239892482757568359375p-931] 

; mpf : + 2332732861714815 -931
; mpfd: + 2332732861714815 -931 (8.36253e-281) class: Pos. norm. non-zero
; hwf : + 2332732861714815 -931 (8.36253e-281) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011100 #b0011100100110101011011100100010101110100110011101011)))
(assert (= y (fp #b0 #b00001011010 #b0010110110010001001100110100111100110001001001001111)))
(assert (= r (fp #b0 #b00001011100 #b1000010010011001101110110001100101000001000101111111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
