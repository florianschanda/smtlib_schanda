(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1351479997059612525589500364731065928936004638671875p-119 {+ 608652481115635 -119 (1.70798e-036)}
; Y = 1.730129633835344460379701558849774301052093505859375p-366 {+ 3288211546873014 -366 (1.15107e-110)}
; 1.1351479997059612525589500364731065928936004638671875p-119 + 1.730129633835344460379701558849774301052093505859375p-366 == 1.1351479997059612525589500364731065928936004638671875p-119
; [HW: 1.1351479997059612525589500364731065928936004638671875p-119] 

; mpf : + 608652481115635 -119
; mpfd: + 608652481115635 -119 (1.70798e-036) class: Pos. norm. non-zero
; hwf : + 608652481115635 -119 (1.70798e-036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001000 #b0010001010011001000011110010111011011011010111110011)))
(assert (= y (fp #b0 #b01010010001 #b1011101011101001110001101001001100101001110010110110)))
(assert (= r (fp #b0 #b01110001000 #b0010001010011001000011110010111011011011010111110011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
