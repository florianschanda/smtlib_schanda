(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5796250845588450939516178550547920167446136474609375p-445 {+ 2610399314833807 -445 (1.73863e-134)}
; Y = -1.3656885261517672791597988180001266300678253173828125p557 {- 1646914710110765 557 (-6.44257e+167)}
; 1.5796250845588450939516178550547920167446136474609375p-445 + -1.3656885261517672791597988180001266300678253173828125p557 == -1.3656885261517672791597988180001266300678253173828125p557
; [HW: -1.3656885261517672791597988180001266300678253173828125p557] 

; mpf : - 1646914710110765 557
; mpfd: - 1646914710110765 557 (-6.44257e+167) class: Neg. norm. non-zero
; hwf : - 1646914710110765 557 (-6.44257e+167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001000010 #b1001010001100010010011110011111000011111000110001111)))
(assert (= y (fp #b1 #b11000101100 #b0101110110011101110000110110010001011000001000101101)))
(assert (= r (fp #b1 #b11000101100 #b0101110110011101110000110110010001011000001000101101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
