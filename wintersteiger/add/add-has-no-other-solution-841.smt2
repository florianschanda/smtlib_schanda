(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4292111401802591874599102084175683557987213134765625p794 {- 1932995130979081 794 (-1.48906e+239)}
; Y = -1.093189721120342738913677749224007129669189453125p683 {- 419689193312336 683 (-4.38715e+205)}
; -1.4292111401802591874599102084175683557987213134765625p794 + -1.093189721120342738913677749224007129669189453125p683 == -1.4292111401802591874599102084175683557987213134765625p794
; [HW: -1.4292111401802591874599102084175683557987213134765625p794] 

; mpf : - 1932995130979081 794
; mpfd: - 1932995130979081 794 (-1.48906e+239) class: Neg. norm. non-zero
; hwf : - 1932995130979081 794 (-1.48906e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100011001 #b0110110111100000110010000000001000100111001100001001)))
(assert (= y (fp #b1 #b11010101010 #b0001011111011011010010000001010010001001000001010000)))
(assert (= r (fp #b1 #b11100011001 #b0110110111100000110010000000001000100111001100001001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
