(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7193995893978539779567427103756926953792572021484375p-752 {+ 3239887722742663 -752 (7.25805e-227)}
; Y = -0.9223350864333321741383997505181469023227691650390625p-1022 {- 4153827951571889 -1023 (-2.05226e-308)}
; 1.7193995893978539779567427103756926953792572021484375p-752 + -0.9223350864333321741383997505181469023227691650390625p-1022 == 1.7193995893978539779567427103756926953792572021484375p-752
; [HW: 1.7193995893978539779567427103756926953792572021484375p-752] 

; mpf : + 3239887722742663 -752
; mpfd: + 3239887722742663 -752 (7.25805e-227) class: Pos. norm. non-zero
; hwf : + 3239887722742663 -752 (7.25805e-227) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100001111 #b1011100000101010100100100100110100111000001110000111)))
(assert (= y (fp #b1 #b00000000000 #b1110110000011110001001101111100000101111001110110001)))
(assert (= r (fp #b0 #b00100001111 #b1011100000101010100100100100110100111000001110000111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
