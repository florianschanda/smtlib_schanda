(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9042161159458588226556230438291095197200775146484375p-486 {+ 4072227362836167 -486 (9.531e-147)}
; Y = -1.100412152554020916994659273768775165081024169921875p402 {- 452216132825758 402 (-1.13662e+121)}
; 1.9042161159458588226556230438291095197200775146484375p-486 + -1.100412152554020916994659273768775165081024169921875p402 == -1.100412152554020916994659273768775165081024169921875p402
; [HW: -1.100412152554020916994659273768775165081024169921875p402] 

; mpf : - 452216132825758 402
; mpfd: - 452216132825758 402 (-1.13662e+121) class: Neg. norm. non-zero
; hwf : - 452216132825758 402 (-1.13662e+121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011001 #b1110011101111010101101010001011010000000111011000111)))
(assert (= y (fp #b1 #b10110010001 #b0001100110110100100111000101111101010111001010011110)))
(assert (= r (fp #b1 #b10110010001 #b0001100110110100100111000101111101010111001010011110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
