(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5349633898911949625443185141193680465221405029296875p598 {- 2409260923370843 598 (-1.59234e+180)}
; Y = -1.1103812136326138837461030561826191842555999755859375p-758 {- 497112792584543 -758 (-7.32378e-229)}
; -1.5349633898911949625443185141193680465221405029296875p598 + -1.1103812136326138837461030561826191842555999755859375p-758 == -1.5349633898911949625443185141193680465221405029296875p598
; [HW: -1.5349633898911949625443185141193680465221405029296875p598] 

; mpf : - 2409260923370843 598
; mpfd: - 2409260923370843 598 (-1.59234e+180) class: Neg. norm. non-zero
; hwf : - 2409260923370843 598 (-1.59234e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010101 #b1000100011110011010111000101100000100011110101011011)))
(assert (= y (fp #b1 #b00100001001 #b0001110001000001111100010111011010100101000101011111)))
(assert (= r (fp #b1 #b11001010101 #b1000100011110011010111000101100000100011110101011011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
