(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.1049344628105044474608575910679064691066741943359375p-1022 {- 472582807611711 -1023 (-2.33487e-309)}
; Y = 1.6761831631265764475102741926093585789203643798828125p412 {+ 3045258241491053 412 (1.77288e+124)}
; -0.1049344628105044474608575910679064691066741943359375p-1022 + 1.6761831631265764475102741926093585789203643798828125p412 == 1.6761831631265764475102741926093585789203643798828125p412
; [HW: 1.6761831631265764475102741926093585789203643798828125p412] 

; mpf : + 3045258241491053 412
; mpfd: + 3045258241491053 412 (1.77288e+124) class: Pos. norm. non-zero
; hwf : + 3045258241491053 412 (1.77288e+124) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0001101011011100111111000010010111111110100100111111)))
(assert (= y (fp #b0 #b10110011011 #b1010110100011010010101101111101110111100000001101101)))
(assert (= r (fp #b0 #b10110011011 #b1010110100011010010101101111101110111100000001101101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
