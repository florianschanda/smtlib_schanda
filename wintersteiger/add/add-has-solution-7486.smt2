(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.185115468634794222424488907563500106334686279296875p-94 {+ 833685955564174 -94 (5.9833e-029)}
; Y = -1.9481884467617527345595362930907867848873138427734375p-597 {- 4270261135513239 -597 (-3.75598e-180)}
; 1.185115468634794222424488907563500106334686279296875p-94 + -1.9481884467617527345595362930907867848873138427734375p-597 == 1.1851154686347940003798839825321920216083526611328125p-94
; [HW: 1.1851154686347940003798839825321920216083526611328125p-94] 

; mpf : + 833685955564173 -94
; mpfd: + 833685955564173 -94 (5.9833e-029) class: Pos. norm. non-zero
; hwf : + 833685955564173 -94 (5.9833e-029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100001 #b0010111101100011101110100011001111000101001010001110)))
(assert (= y (fp #b1 #b00110101010 #b1111001010111100011110100110000101001001011010010111)))
(assert (= r (fp #b0 #b01110100001 #b0010111101100011101110100011001111000101001010001101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
