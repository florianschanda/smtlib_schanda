(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.192866835863327423794544301927089691162109375p582 {- 868595010126208 582 (-1.88821e+175)}
; Y = 1.1844716823722130083496040242607705295085906982421875p-894 {+ 830786599991907 -894 (8.96827e-270)}
; -1.192866835863327423794544301927089691162109375p582 + 1.1844716823722130083496040242607705295085906982421875p-894 == -1.192866835863327423794544301927089691162109375p582
; [HW: -1.192866835863327423794544301927089691162109375p582] 

; mpf : - 868595010126208 582
; mpfd: - 868595010126208 582 (-1.88821e+175) class: Neg. norm. non-zero
; hwf : - 868595010126208 582 (-1.88821e+175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001000101 #b0011000101011111101110001001000010000100000110000000)))
(assert (= y (fp #b0 #b00010000001 #b0010111100111001100010010100001011010011101001100011)))
(assert (= r (fp #b1 #b11001000101 #b0011000101011111101110001001000010000100000110000000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
