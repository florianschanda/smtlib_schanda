(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.899081246792654997790350535069592297077178955078125p310 {- 4049101968031202 310 (-3.96134e+093)}
; Y = -1.511396861261474544591010271687991917133331298828125p-143 {- 2303126713815618 -143 (-1.35547e-043)}
; -1.899081246792654997790350535069592297077178955078125p310 + -1.511396861261474544591010271687991917133331298828125p-143 == -1.899081246792654997790350535069592297077178955078125p310
; [HW: -1.899081246792654997790350535069592297077178955078125p310] 

; mpf : - 4049101968031202 310
; mpfd: - 4049101968031202 310 (-3.96134e+093) class: Neg. norm. non-zero
; hwf : - 4049101968031202 310 (-3.96134e+093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110101 #b1110011000101010001100000100011101101011110111100010)))
(assert (= y (fp #b1 #b01101110000 #b1000001011101010111001111001101001100101001001000010)))
(assert (= r (fp #b1 #b10100110101 #b1110011000101010001100000100011101101011110111100010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
