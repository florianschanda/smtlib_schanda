(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9397207019347766365768848118023015558719635009765625p-136 {- 4232125803065801 -136 (-2.22669e-041)}
; Y = -1.273190182242296852876961565925739705562591552734375p371 {- 1230339202947686 371 (-6.12381e+111)}
; -1.9397207019347766365768848118023015558719635009765625p-136 + -1.273190182242296852876961565925739705562591552734375p371 == -1.273190182242296852876961565925739705562591552734375p371
; [HW: -1.273190182242296852876961565925739705562591552734375p371] 

; mpf : - 1230339202947686 371
; mpfd: - 1230339202947686 371 (-6.12381e+111) class: Neg. norm. non-zero
; hwf : - 1230339202947686 371 (-6.12381e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110111 #b1111000010010001100010010011001000101111000111001001)))
(assert (= y (fp #b1 #b10101110010 #b0100010111101111110010101011001001010001101001100110)))
(assert (= r (fp #b1 #b10101110010 #b0100010111101111110010101011001001010001101001100110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
