(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3083630312930265571225163512281142175197601318359375p-183 {- 1388743632826111 -183 (-1.06718e-055)}
; Y = 1.51470127752788830122199215111322700977325439453125p827 {+ 2318008481681716 827 (1.35561e+249)}
; -1.3083630312930265571225163512281142175197601318359375p-183 + 1.51470127752788830122199215111322700977325439453125p827 == 1.5147012775278880791773872260819189250469207763671875p827
; [HW: 1.5147012775278880791773872260819189250469207763671875p827] 

; mpf : + 2318008481681715 827
; mpfd: + 2318008481681715 827 (1.35561e+249) class: Pos. norm. non-zero
; hwf : + 2318008481681715 827 (1.35561e+249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001000 #b0100111011110000111000010010111010110010111011111111)))
(assert (= y (fp #b0 #b11100111010 #b1000001111000011011101101000001000110001000100110100)))
(assert (= r (fp #b0 #b11100111010 #b1000001111000011011101101000001000110001000100110011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
