(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0628303812824004825898782655713148415088653564453125p-41 {- 282962881730965 -41 (-4.83319e-013)}
; Y = 1.814085594033566284366543186479248106479644775390625p764 {+ 3666315577937258 764 (1.76025e+230)}
; -1.0628303812824004825898782655713148415088653564453125p-41 + 1.814085594033566284366543186479248106479644775390625p764 == 1.8140855940335660623219382614479400217533111572265625p764
; [HW: 1.8140855940335660623219382614479400217533111572265625p764] 

; mpf : + 3666315577937257 764
; mpfd: + 3666315577937257 764 (1.76025e+230) class: Pos. norm. non-zero
; hwf : + 3666315577937257 764 (1.76025e+230) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010110 #b0001000000010101101001101110000011001101100110010101)))
(assert (= y (fp #b0 #b11011111011 #b1101000001100111111010011101101010000100110101101010)))
(assert (= r (fp #b0 #b11011111011 #b1101000001100111111010011101101010000100110101101001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
