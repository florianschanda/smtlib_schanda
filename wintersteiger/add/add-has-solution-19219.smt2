(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7720286208977140685050244428566657006740570068359375p1023 {- 3476907809394303 1023 (-1.59278e+308)}
; Y = 1.2055820519592919115581253208802081644535064697265625p599 {+ 925859252597929 599 (2.50129e+180)}
; -1.7720286208977140685050244428566657006740570068359375p1023 + 1.2055820519592919115581253208802081644535064697265625p599 == -1.772028620897713846460419517825357615947723388671875p1023
; [HW: -1.772028620897713846460419517825357615947723388671875p1023] 

; mpf : - 3476907809394302 1023
; mpfd: - 3476907809394302 1023 (-1.59278e+308) class: Neg. norm. non-zero
; hwf : - 3476907809394302 1023 (-1.59278e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111110 #b1100010110100011101010101110111001010100111001111111)))
(assert (= y (fp #b0 #b11001010110 #b0011010010100001000001100111110111001111010010101001)))
(assert (= r (fp #b1 #b11111111110 #b1100010110100011101010101110111001010100111001111110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
