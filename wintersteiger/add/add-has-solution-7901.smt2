(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.116969573130146553552322075120173394680023193359375p-958 {+ 526784125962614 -958 (4.58464e-289)}
; Y = 1.61869133146052046612339836428873240947723388671875p-817 {+ 2786338049822956 -817 (1.85207e-246)}
; 1.116969573130146553552322075120173394680023193359375p-958 + 1.61869133146052046612339836428873240947723388671875p-817 == 1.61869133146052046612339836428873240947723388671875p-817
; [HW: 1.61869133146052046612339836428873240947723388671875p-817] 

; mpf : + 2786338049822956 -817
; mpfd: + 2786338049822956 -817 (1.85207e-246) class: Pos. norm. non-zero
; hwf : + 2786338049822956 -817 (1.85207e-246) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000001 #b0001110111110001101101111100101100111000100101110110)))
(assert (= y (fp #b0 #b00011001110 #b1001111001100010100011100001101011110001000011101100)))
(assert (= r (fp #b0 #b00011001110 #b1001111001100010100011100001101011110001000011101100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
