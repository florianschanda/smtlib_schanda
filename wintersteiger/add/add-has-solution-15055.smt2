(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.266275405894742522860951794427819550037384033203125p-279 {+ 1199197818765490 -279 (1.30365e-084)}
; Y = -1.86832799583398401210843076114542782306671142578125p-92 {- 3910601638473300 -92 (-3.77306e-028)}
; 1.266275405894742522860951794427819550037384033203125p-279 + -1.86832799583398401210843076114542782306671142578125p-92 == -1.8683279958339837900638258361141197383403778076171875p-92
; [HW: -1.8683279958339837900638258361141197383403778076171875p-92] 

; mpf : - 3910601638473299 -92
; mpfd: - 3910601638473299 -92 (-3.77306e-028) class: Neg. norm. non-zero
; hwf : - 3910601638473299 -92 (-3.77306e-028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011101000 #b0100010000101010101000000000000000001100000010110010)))
(assert (= y (fp #b1 #b01110100011 #b1101111001001010101111100101100001001110111001010100)))
(assert (= r (fp #b1 #b01110100011 #b1101111001001010101111100101100001001110111001010011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
