(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.66721826489241653490580574725754559040069580078125p-600 {- 3004883929144276 -600 (-4.01786e-181)}
; Y = 1.198085106248392595063023691182024776935577392578125p-470 {+ 892096010687906 -470 (3.92997e-142)}
; -1.66721826489241653490580574725754559040069580078125p-600 + 1.198085106248392595063023691182024776935577392578125p-470 == 1.198085106248392595063023691182024776935577392578125p-470
; [HW: 1.198085106248392595063023691182024776935577392578125p-470] 

; mpf : + 892096010687906 -470
; mpfd: + 892096010687906 -470 (3.92997e-142) class: Pos. norm. non-zero
; hwf : + 892096010687906 -470 (3.92997e-142) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100111 #b1010101011001110110100001111001100000001101111010100)))
(assert (= y (fp #b0 #b01000101001 #b0011001010110101101101001001110100101001010110100010)))
(assert (= r (fp #b0 #b01000101001 #b0011001010110101101101001001110100101001010110100010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
