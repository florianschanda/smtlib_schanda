(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3549141914480617998606248875148594379425048828125p744 {- 1598391420353992 744 (-1.2538e+224)}
; Y = 1.9852141492006987189000710714026354253292083740234375p-957 {+ 4437010075220407 -957 (1.62968e-288)}
; -1.3549141914480617998606248875148594379425048828125p744 + 1.9852141492006987189000710714026354253292083740234375p-957 == -1.3549141914480617998606248875148594379425048828125p744
; [HW: -1.3549141914480617998606248875148594379425048828125p744] 

; mpf : - 1598391420353992 744
; mpfd: - 1598391420353992 744 (-1.2538e+224) class: Neg. norm. non-zero
; hwf : - 1598391420353992 744 (-1.2538e+224) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011100111 #b0101101011011011101010000000110100100111110111001000)))
(assert (= y (fp #b0 #b00001000010 #b1111110000110110111111101001011001011111100110110111)))
(assert (= r (fp #b1 #b11011100111 #b0101101011011011101010000000110100100111110111001000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
