(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.68354273223998074371365873957984149456024169921875p295 {- 3078402794207788 295 (-1.0717e+089)}
; Y = -1.9075896567928360969546019987319596111774444580078125p-623 {- 4087420440137533 -623 (-5.48022e-188)}
; -1.68354273223998074371365873957984149456024169921875p295 + -1.9075896567928360969546019987319596111774444580078125p-623 == -1.6835427322399809657582636646111495792865753173828125p295
; [HW: -1.6835427322399809657582636646111495792865753173828125p295] 

; mpf : - 3078402794207789 295
; mpfd: - 3078402794207789 295 (-1.0717e+089) class: Neg. norm. non-zero
; hwf : - 3078402794207789 295 (-1.0717e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100100110 #b1010111011111100101010000001000001100011101000101100)))
(assert (= y (fp #b1 #b00110010000 #b1110100001010111110010111011011000011100111100111101)))
(assert (= r (fp #b1 #b10100100110 #b1010111011111100101010000001000001100011101000101101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
