(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.084573343336999062813674754579551517963409423828125p-470 {- 380884477537986 -470 (-3.55763e-142)}
; Y = 1.224603404131482609074055289966054260730743408203125p-937 {+ 1011523807152690 -937 (1.05412e-282)}
; -1.084573343336999062813674754579551517963409423828125p-470 + 1.224603404131482609074055289966054260730743408203125p-937 == -1.0845733433369988407690698295482434332370758056640625p-470
; [HW: -1.0845733433369988407690698295482434332370758056640625p-470] 

; mpf : - 380884477537985 -470
; mpfd: - 380884477537985 -470 (-3.55763e-142) class: Neg. norm. non-zero
; hwf : - 380884477537985 -470 (-3.55763e-142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101001 #b0001010110100110100110010011111110111110111011000010)))
(assert (= y (fp #b0 #b00001010110 #b0011100101111111100110111101001101010000101000110010)))
(assert (= r (fp #b1 #b01000101001 #b0001010110100110100110010011111110111110111011000001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
