(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.644545858763008627789758975268341600894927978515625p810 {- 2902776489348282 810 (-1.1229e+244)}
; Y = 1.2156213868412646395000820120912976562976837158203125p430 {+ 971072397431429 430 (3.37052e+129)}
; -1.644545858763008627789758975268341600894927978515625p810 + 1.2156213868412646395000820120912976562976837158203125p430 == -1.6445458587630084057451540502370335161685943603515625p810
; [HW: -1.6445458587630084057451540502370335161685943603515625p810] 

; mpf : - 2902776489348281 810
; mpfd: - 2902776489348281 810 (-1.1229e+244) class: Neg. norm. non-zero
; hwf : - 2902776489348281 810 (-1.1229e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101001 #b1010010100000000111101010001100000101000110010111010)))
(assert (= y (fp #b0 #b10110101101 #b0011011100110010111101101001010011001101001010000101)))
(assert (= r (fp #b1 #b11100101001 #b1010010100000000111101010001100000101000110010111001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
