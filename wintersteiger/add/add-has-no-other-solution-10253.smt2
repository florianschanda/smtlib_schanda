(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7022684496865487790984161620144732296466827392578125p-257 {- 3162735928322397 -257 (-7.35054e-078)}
; Y = 1.76208423019159265976441020029596984386444091796875p379 {+ 3432122255115788 379 (2.16968e+114)}
; -1.7022684496865487790984161620144732296466827392578125p-257 + 1.76208423019159265976441020029596984386444091796875p379 == 1.7620842301915924377198052752646617591381072998046875p379
; [HW: 1.7620842301915924377198052752646617591381072998046875p379] 

; mpf : + 3432122255115787 379
; mpfd: + 3432122255115787 379 (2.16968e+114) class: Pos. norm. non-zero
; hwf : + 3432122255115787 379 (2.16968e+114) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111110 #b1011001111000111110111010111100001101010100101011101)))
(assert (= y (fp #b0 #b10101111010 #b1100001100010111111100111011110101111000011000001100)))
(assert (= r (fp #b0 #b10101111010 #b1100001100010111111100111011110101111000011000001011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
