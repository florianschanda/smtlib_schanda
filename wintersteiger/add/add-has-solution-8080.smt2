(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9786233668679236163967516404227353632450103759765625p354 {- 4407327830362441 354 (-7.26075e+106)}
; Y = 1.8543606846412064026452526377397589385509490966796875p-418 {+ 3847698460990139 -418 (2.7394e-126)}
; -1.9786233668679236163967516404227353632450103759765625p354 + 1.8543606846412064026452526377397589385509490966796875p-418 == -1.9786233668679233943521467153914272785186767578125p354
; [HW: -1.9786233668679233943521467153914272785186767578125p354] 

; mpf : - 4407327830362440 354
; mpfd: - 4407327830362440 354 (-7.26075e+106) class: Neg. norm. non-zero
; hwf : - 4407327830362440 354 (-7.26075e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100001 #b1111101010000111000011111001101111001100100101001001)))
(assert (= y (fp #b0 #b01001011101 #b1101101010110111011000011011111110000101101010111011)))
(assert (= r (fp #b1 #b10101100001 #b1111101010000111000011111001101111001100100101001000)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
