(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.272069173799202257413298866595141589641571044921875p-101 {- 1225290629741086 -101 (-5.01743e-031)}
; Y = -1.7302366493094594179780187914730049669742584228515625p296 {- 3288693501722361 296 (-2.20285e+089)}
; -1.272069173799202257413298866595141589641571044921875p-101 + -1.7302366493094594179780187914730049669742584228515625p296 == -1.730236649309459640022623716504313051700592041015625p296
; [HW: -1.730236649309459640022623716504313051700592041015625p296] 

; mpf : - 3288693501722362 296
; mpfd: - 3288693501722362 296 (-2.20285e+089) class: Neg. norm. non-zero
; hwf : - 3288693501722362 296 (-2.20285e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110011010 #b0100010110100110010100110100101110110111101000011110)))
(assert (= y (fp #b1 #b10100100111 #b1011101011110000110010011111111100011111111011111001)))
(assert (= r (fp #b1 #b10100100111 #b1011101011110000110010011111111100011111111011111010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
