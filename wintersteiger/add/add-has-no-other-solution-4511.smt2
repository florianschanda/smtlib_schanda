(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8470685374000332945598756850813515484333038330078125p-306 {+ 3814857549392061 -306 (1.41679e-092)}
; Y = -1.5757515627216458486969941077404655516147613525390625p648 {- 2592954523331185 648 (-1.84045e+195)}
; 1.8470685374000332945598756850813515484333038330078125p-306 + -1.5757515627216458486969941077404655516147613525390625p648 == -1.5757515627216458486969941077404655516147613525390625p648
; [HW: -1.5757515627216458486969941077404655516147613525390625p648] 

; mpf : - 2592954523331185 648
; mpfd: - 2592954523331185 648 (-1.84045e+195) class: Neg. norm. non-zero
; hwf : - 2592954523331185 648 (-1.84045e+195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001101 #b1101100011011001011110111101000110011010100010111101)))
(assert (= y (fp #b1 #b11010000111 #b1001001101100100011101000101010010000010101001110001)))
(assert (= r (fp #b1 #b11010000111 #b1001001101100100011101000101010010000010101001110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
