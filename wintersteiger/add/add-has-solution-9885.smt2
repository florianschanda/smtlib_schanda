(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.95899834551967710893904950353316962718963623046875p-691 {+ 4318944591531340 -691 (1.90681e-208)}
; Y = -1.1618354673129200893555434959125705063343048095703125p-840 {- 728842150285797 -840 (-1.5847e-253)}
; 1.95899834551967710893904950353316962718963623046875p-691 + -1.1618354673129200893555434959125705063343048095703125p-840 == 1.9589983455196768868944445785018615424633026123046875p-691
; [HW: 1.9589983455196768868944445785018615424633026123046875p-691] 

; mpf : + 4318944591531339 -691
; mpfd: + 4318944591531339 -691 (1.90681e-208) class: Pos. norm. non-zero
; hwf : + 4318944591531339 -691 (1.90681e-208) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001100 #b1111010110000000111010100110001011101100110101001100)))
(assert (= y (fp #b1 #b00010110111 #b0010100101101110000011001001011101110001000111100101)))
(assert (= r (fp #b0 #b00101001100 #b1111010110000000111010100110001011101100110101001011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
