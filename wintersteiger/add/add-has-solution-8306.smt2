(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.61058945850971202418122629751451313495635986328125p989 {- 2749850457820692 989 (-8.42656e+297)}
; Y = 1.76120064806511766875019020517356693744659423828125p-79 {+ 3428142954980244 -79 (2.91366e-024)}
; -1.61058945850971202418122629751451313495635986328125p989 + 1.76120064806511766875019020517356693744659423828125p-79 == -1.6105894585097118021366213724832050502300262451171875p989
; [HW: -1.6105894585097118021366213724832050502300262451171875p989] 

; mpf : - 2749850457820691 989
; mpfd: - 2749850457820691 989 (-8.42656e+297) class: Neg. norm. non-zero
; hwf : - 2749850457820691 989 (-8.42656e+297) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111011100 #b1001110001001111100101110011101110010100111000010100)))
(assert (= y (fp #b0 #b01110110000 #b1100001011011110000010111011000100100010001110010100)))
(assert (= r (fp #b1 #b11111011100 #b1001110001001111100101110011101110010100111000010011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
