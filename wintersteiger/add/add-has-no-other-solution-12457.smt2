(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.70740278136180467782878622529096901416778564453125p-367 {+ 3185858902541876 -367 (5.67973e-111)}
; Y = -1.8054995656169392503898052382282912731170654296875p-145 {- 3627647543559544 -145 (-4.04807e-044)}
; 1.70740278136180467782878622529096901416778564453125p-367 + -1.8054995656169392503898052382282912731170654296875p-145 == -1.8054995656169392503898052382282912731170654296875p-145
; [HW: -1.8054995656169392503898052382282912731170654296875p-145] 

; mpf : - 3627647543559544 -145
; mpfd: - 3627647543559544 -145 (-4.04807e-044) class: Neg. norm. non-zero
; hwf : - 3627647543559544 -145 (-4.04807e-044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010000 #b1011010100011000010110010100001100001100011000110100)))
(assert (= y (fp #b1 #b01101101110 #b1100111000110101001110000011001101000100010101111000)))
(assert (= r (fp #b1 #b01101101110 #b1100111000110101001110000011001101000100010101111000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
