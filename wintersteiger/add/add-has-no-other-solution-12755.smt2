(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8787856481312881218315169462584890425205230712890625p541 {+ 3957698717462609 541 (1.3524e+163)}
; Y = 1.2369559108441581241066842267173342406749725341796875p399 {+ 1067154551780987 399 (1.59706e+120)}
; 1.8787856481312881218315169462584890425205230712890625p541 + 1.2369559108441581241066842267173342406749725341796875p399 == 1.8787856481312881218315169462584890425205230712890625p541
; [HW: 1.8787856481312881218315169462584890425205230712890625p541] 

; mpf : + 3957698717462609 541
; mpfd: + 3957698717462609 541 (1.3524e+163) class: Pos. norm. non-zero
; hwf : + 3957698717462609 541 (1.3524e+163) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011100 #b1110000011111000000110001010001011101011000001010001)))
(assert (= y (fp #b0 #b10110001110 #b0011110010101001001001000111111110101011011001111011)))
(assert (= r (fp #b0 #b11000011100 #b1110000011111000000110001010001011101011000001010001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
