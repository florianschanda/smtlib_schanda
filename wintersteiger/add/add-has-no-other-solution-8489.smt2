(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7131700879022033756626797185163013637065887451171875p-414 {- 3211832542128147 -414 (-4.04932e-125)}
; Y = -1.1482053002042789113801291023264639079570770263671875p593 {- 667457334774323 593 (-3.72226e+178)}
; -1.7131700879022033756626797185163013637065887451171875p-414 + -1.1482053002042789113801291023264639079570770263671875p593 == -1.1482053002042789113801291023264639079570770263671875p593
; [HW: -1.1482053002042789113801291023264639079570770263671875p593] 

; mpf : - 667457334774323 593
; mpfd: - 667457334774323 593 (-3.72226e+178) class: Neg. norm. non-zero
; hwf : - 667457334774323 593 (-3.72226e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001100001 #b1011011010010010010100001001110000000110100000010011)))
(assert (= y (fp #b1 #b11001010000 #b0010010111110000110010000101010101111000101000110011)))
(assert (= r (fp #b1 #b11001010000 #b0010010111110000110010000101010101111000101000110011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
