(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.350839284175418431033222077530808746814727783203125p-87 {+ 1580039669479346 -87 (8.72959e-027)}
; Y = 1.0597932602352593267625024964218027889728546142578125p-823 {+ 269284904514781 -823 (1.89467e-248)}
; 1.350839284175418431033222077530808746814727783203125p-87 + 1.0597932602352593267625024964218027889728546142578125p-823 == 1.350839284175418431033222077530808746814727783203125p-87
; [HW: 1.350839284175418431033222077530808746814727783203125p-87] 

; mpf : + 1580039669479346 -87
; mpfd: + 1580039669479346 -87 (8.72959e-027) class: Pos. norm. non-zero
; hwf : + 1580039669479346 -87 (8.72959e-027) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101000 #b0101100111010000100110100111001110101111011110110010)))
(assert (= y (fp #b0 #b00011001000 #b0000111101001110100111000111000100111011010011011101)))
(assert (= r (fp #b0 #b01110101000 #b0101100111010000100110100111001110101111011110110010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
