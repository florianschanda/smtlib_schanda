(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3208478316155807252840759247192181646823883056640625p-841 {- 1444970174906561 -841 (-9.00796e-254)}
; Y = -1.4677451533624290558321945354691706597805023193359375p-407 {- 2106536898387391 -407 (-4.44061e-123)}
; -1.3208478316155807252840759247192181646823883056640625p-841 + -1.4677451533624290558321945354691706597805023193359375p-407 == -1.4677451533624290558321945354691706597805023193359375p-407
; [HW: -1.4677451533624290558321945354691706597805023193359375p-407] 

; mpf : - 2106536898387391 -407
; mpfd: - 2106536898387391 -407 (-4.44061e-123) class: Neg. norm. non-zero
; hwf : - 2106536898387391 -407 (-4.44061e-123) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110110 #b0101001000100011000101010101111111001000000011000001)))
(assert (= y (fp #b1 #b01001101000 #b0111011110111110001001010111100010001101110110111111)))
(assert (= r (fp #b1 #b01001101000 #b0111011110111110001001010111100010001101110110111111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
