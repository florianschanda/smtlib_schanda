(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 0.502486716353775175747387038427405059337615966796875p-1022 {+ 2262998988529486 -1023 (1.11807e-308)}
; Y = -1.673521181236545363191225987975485622882843017578125p496 {- 3033269740843042 496 (-3.42381e+149)}
; 0.502486716353775175747387038427405059337615966796875p-1022 + -1.673521181236545363191225987975485622882843017578125p496 == -1.673521181236545363191225987975485622882843017578125p496
; [HW: -1.673521181236545363191225987975485622882843017578125p496] 

; mpf : - 3033269740843042 496
; mpfd: - 3033269740843042 496 (-3.42381e+149) class: Neg. norm. non-zero
; hwf : - 3033269740843042 496 (-3.42381e+149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1000000010100010111110000010110101101001111101001110)))
(assert (= y (fp #b1 #b10111101111 #b1010110001101011111000100101011010010011000000100010)))
(assert (= r (fp #b1 #b10111101111 #b1010110001101011111000100101011010010011000000100010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
