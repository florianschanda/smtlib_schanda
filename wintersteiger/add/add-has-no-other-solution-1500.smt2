(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6842317815704266337206718162633478641510009765625p-415 {+ 3081505996515624 -415 (1.99046e-125)}
; Y = -1.7830798898313731104536827842821367084980010986328125p-127 {- 3526678300045901 -127 (-1.048e-038)}
; 1.6842317815704266337206718162633478641510009765625p-415 + -1.7830798898313731104536827842821367084980010986328125p-127 == -1.78307988983137288840907785925082862377166748046875p-127
; [HW: -1.78307988983137288840907785925082862377166748046875p-127] 

; mpf : - 3526678300045900 -127
; mpfd: - 3526678300045900 -127 (-1.048e-038) class: Neg. norm. non-zero
; hwf : - 3526678300045900 -127 (-1.048e-038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100000 #b1010111100101001110100000110010010111010100100101000)))
(assert (= y (fp #b1 #b01110000000 #b1100100001110111111011000111010011111011001001001101)))
(assert (= r (fp #b1 #b01110000000 #b1100100001110111111011000111010011111011001001001100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
