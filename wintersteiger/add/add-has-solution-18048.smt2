(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7304902542376605634188990734401158988475799560546875p-729 {- 3289835636782507 -729 (-6.12777e-220)}
; Y = 1.6080712123898981413816500207758508622646331787109375p-380 {+ 2738509285533871 -380 (6.52991e-115)}
; -1.7304902542376605634188990734401158988475799560546875p-729 + 1.6080712123898981413816500207758508622646331787109375p-380 == 1.608071212389897919337045095744542777538299560546875p-380
; [HW: 1.608071212389897919337045095744542777538299560546875p-380] 

; mpf : + 2738509285533870 -380
; mpfd: + 2738509285533870 -380 (6.52991e-115) class: Pos. norm. non-zero
; hwf : + 2738509285533870 -380 (6.52991e-115) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100110 #b1011101100000001011010001100011111111111010110101011)))
(assert (= y (fp #b0 #b01010000011 #b1001101110101010100011100001001011011010100010101111)))
(assert (= r (fp #b0 #b01010000011 #b1001101110101010100011100001001011011010100010101110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
