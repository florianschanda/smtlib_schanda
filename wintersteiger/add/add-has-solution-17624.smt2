(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8682643149674305060869983208249323070049285888671875p811 {+ 3910314845346419 811 (2.55132e+244)}
; Y = -1.166048873456974721563028651871718466281890869140625p410 {- 747817644626122 410 (-3.08329e+123)}
; 1.8682643149674305060869983208249323070049285888671875p811 + -1.166048873456974721563028651871718466281890869140625p410 == 1.868264314967430284042393395793624222278594970703125p811
; [HW: 1.868264314967430284042393395793624222278594970703125p811] 

; mpf : + 3910314845346418 811
; mpfd: + 3910314845346418 811 (2.55132e+244) class: Pos. norm. non-zero
; hwf : + 3910314845346418 811 (2.55132e+244) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101010 #b1101111001000110100100011111010100010001101001110011)))
(assert (= y (fp #b1 #b10110011001 #b0010101010000010001011011101000100001001000011001010)))
(assert (= r (fp #b0 #b11100101010 #b1101111001000110100100011111010100010001101001110010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
