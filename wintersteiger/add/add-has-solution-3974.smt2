(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7333208685629271084138736114255152642726898193359375p718 {- 3302583590403007 718 (-2.3901e+216)}
; Y = -1.1622650768923186159753413448925130069255828857421875p-998 {- 730776939827491 -998 (-4.3388e-301)}
; -1.7333208685629271084138736114255152642726898193359375p718 + -1.1622650768923186159753413448925130069255828857421875p-998 == -1.7333208685629271084138736114255152642726898193359375p718
; [HW: -1.7333208685629271084138736114255152642726898193359375p718] 

; mpf : - 3302583590403007 718
; mpfd: - 3302583590403007 718 (-2.3901e+216) class: Neg. norm. non-zero
; hwf : - 3302583590403007 718 (-2.3901e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011001101 #b1011101110111010111010101001101111110011101110111111)))
(assert (= y (fp #b1 #b00000011001 #b0010100110001010001101000011111010001001000100100011)))
(assert (= r (fp #b1 #b11011001101 #b1011101110111010111010101001101111110011101110111111)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
