(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4423414788832236155258215148933231830596923828125p-24 {- 1992128919469000 -24 (-8.59703e-008)}
; Y = 1.5742073437271499880552028116653673350811004638671875p606 {+ 2585999979242995 606 (4.18061e+182)}
; -1.4423414788832236155258215148933231830596923828125p-24 + 1.5742073437271499880552028116653673350811004638671875p606 == 1.5742073437271499880552028116653673350811004638671875p606
; [HW: 1.5742073437271499880552028116653673350811004638671875p606] 

; mpf : + 2585999979242995 606
; mpfd: + 2585999979242995 606 (4.18061e+182) class: Pos. norm. non-zero
; hwf : + 2585999979242995 606 (4.18061e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100111 #b0111000100111101010010101000100101110111101111001000)))
(assert (= y (fp #b0 #b11001011101 #b1001001011111111010000001010001001101110010111110011)))
(assert (= r (fp #b0 #b11001011101 #b1001001011111111010000001010001001101110010111110011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
