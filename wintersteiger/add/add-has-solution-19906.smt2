(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8384631722107862561443880622391588985919952392578125p-308 {- 3776102429932381 -308 (-3.52546e-093)}
; Y = -0.455996004436483470811936058453284204006195068359375p-1022 {- 2053623435662582 -1023 (-1.01462e-308)}
; -1.8384631722107862561443880622391588985919952392578125p-308 + -0.455996004436483470811936058453284204006195068359375p-1022 == -1.838463172210786478188992987270466983318328857421875p-308
; [HW: -1.838463172210786478188992987270466983318328857421875p-308] 

; mpf : - 3776102429932382 -308
; mpfd: - 3776102429932382 -308 (-3.52546e-093) class: Neg. norm. non-zero
; hwf : - 3776102429932382 -308 (-3.52546e-093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001011 #b1101011010100101100001011011111110001011101101011101)))
(assert (= y (fp #b1 #b00000000000 #b0111010010111100001001110111011000101001010011110110)))
(assert (= r (fp #b1 #b01011001011 #b1101011010100101100001011011111110001011101101011110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
