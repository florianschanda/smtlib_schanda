(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.242055257764905551454148735501803457736968994140625p808 {- 1090119968673098 808 (-2.1202e+243)}
; Y = -1.665527448829300372068473734543658792972564697265625p690 {- 2997269170552474 690 (-8.55557e+207)}
; -1.242055257764905551454148735501803457736968994140625p808 + -1.665527448829300372068473734543658792972564697265625p690 == -1.242055257764905551454148735501803457736968994140625p808
; [HW: -1.242055257764905551454148735501803457736968994140625p808] 

; mpf : - 1090119968673098 808
; mpfd: - 1090119968673098 808 (-2.1202e+243) class: Neg. norm. non-zero
; hwf : - 1090119968673098 808 (-2.1202e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100100111 #b0011110111110111010101010101011111101100110101001010)))
(assert (= y (fp #b1 #b11010110001 #b1010101001100000000000011100001101001111111010011010)))
(assert (= r (fp #b1 #b11100100111 #b0011110111110111010101010101011111101100110101001010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
