(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7388890558779335204775406964472495019435882568359375p539 {+ 3327660476719999 539 (3.12924e+162)}
; Y = 1.7250201901490893607871157655608840286731719970703125p-827 {+ 3265200658191525 -827 (1.92747e-249)}
; 1.7388890558779335204775406964472495019435882568359375p539 + 1.7250201901490893607871157655608840286731719970703125p-827 == 1.7388890558779335204775406964472495019435882568359375p539
; [HW: 1.7388890558779335204775406964472495019435882568359375p539] 

; mpf : + 3327660476719999 539
; mpfd: + 3327660476719999 539 (3.12924e+162) class: Pos. norm. non-zero
; hwf : + 3327660476719999 539 (3.12924e+162) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011010 #b1011110100100111110101010100101001011110001101111111)))
(assert (= y (fp #b0 #b00011000100 #b1011100110011010111011000101010110100001010010100101)))
(assert (= r (fp #b0 #b11000011010 #b1011110100100111110101010100101001011110001101111111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
