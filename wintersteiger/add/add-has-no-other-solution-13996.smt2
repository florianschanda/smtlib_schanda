(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1244476281340138879016876671812497079372406005859375p-953 {- 560462291691487 -953 (-1.47691e-287)}
; Y = -1.2300095734355356302813788715866394340991973876953125p136 {- 1035871029215925 136 (-1.07149e+041)}
; -1.1244476281340138879016876671812497079372406005859375p-953 + -1.2300095734355356302813788715866394340991973876953125p136 == -1.230009573435535852325983796617947518825531005859375p136
; [HW: -1.230009573435535852325983796617947518825531005859375p136] 

; mpf : - 1035871029215926 136
; mpfd: - 1035871029215926 136 (-1.07149e+041) class: Neg. norm. non-zero
; hwf : - 1035871029215926 136 (-1.07149e+041) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000110 #b0001111111011011110011001011110011100110011111011111)))
(assert (= y (fp #b1 #b10010000111 #b0011101011100001111010000100101110101100001010110101)))
(assert (= r (fp #b1 #b10010000111 #b0011101011100001111010000100101110101100001010110110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
