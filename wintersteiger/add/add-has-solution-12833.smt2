(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6271414926266782874364480449003167450428009033203125p666 {- 2824394192502085 666 (-4.98199e+200)}
; Y = -1.029232255801776574344330583699047565460205078125p73 {- 131650376336080 73 (-9.72082e+021)}
; -1.6271414926266782874364480449003167450428009033203125p666 + -1.029232255801776574344330583699047565460205078125p73 == -1.627141492626678509481052969931624829769134521484375p666
; [HW: -1.627141492626678509481052969931624829769134521484375p666] 

; mpf : - 2824394192502086 666
; mpfd: - 2824394192502086 666 (-4.98199e+200) class: Neg. norm. non-zero
; hwf : - 2824394192502086 666 (-4.98199e+200) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011001 #b1010000010001100010110000100100011001011110101000101)))
(assert (= y (fp #b1 #b10001001000 #b0000011101111011110000111101111010101000001011010000)))
(assert (= r (fp #b1 #b11010011001 #b1010000010001100010110000100100011001011110101000110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
