(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3395609365997922513003004496567882597446441650390625p607 {- 1529246507540401 607 (-7.11492e+182)}
; Y = 1.9614342679933312041384851909242570400238037109375p-282 {+ 4329915011075992 -282 (2.52415e-085)}
; -1.3395609365997922513003004496567882597446441650390625p607 + 1.9614342679933312041384851909242570400238037109375p-282 == -1.3395609365997922513003004496567882597446441650390625p607
; [HW: -1.3395609365997922513003004496567882597446441650390625p607] 

; mpf : - 1529246507540401 607
; mpfd: - 1529246507540401 607 (-7.11492e+182) class: Neg. norm. non-zero
; hwf : - 1529246507540401 607 (-7.11492e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011110 #b0101011011101101011101110010110110110001111110110001)))
(assert (= y (fp #b0 #b01011100101 #b1111011000100000100011100110001001001000111110011000)))
(assert (= r (fp #b1 #b11001011110 #b0101011011101101011101110010110110110001111110110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
