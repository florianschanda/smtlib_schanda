(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8849953047945231521254072504234500229358673095703125p-1002 {- 3985664524897253 -1002 (-4.39799e-302)}
; Y = -1.61455982137921250085810243035666644573211669921875p651 {- 2767731382560300 651 (-1.50863e+196)}
; -1.8849953047945231521254072504234500229358673095703125p-1002 + -1.61455982137921250085810243035666644573211669921875p651 == -1.61455982137921250085810243035666644573211669921875p651
; [HW: -1.61455982137921250085810243035666644573211669921875p651] 

; mpf : - 2767731382560300 651
; mpfd: - 2767731382560300 651 (-1.50863e+196) class: Neg. norm. non-zero
; hwf : - 2767731382560300 651 (-1.50863e+196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000010101 #b1110001010001111000011010110001100110100101111100101)))
(assert (= y (fp #b1 #b11010001010 #b1001110101010011110010101101111001000010011000101100)))
(assert (= r (fp #b1 #b11010001010 #b1001110101010011110010101101111001000010011000101100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
