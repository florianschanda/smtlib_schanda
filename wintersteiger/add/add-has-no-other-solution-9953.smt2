(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.174226656467242779768866967060603201389312744140625p-192 {- 784647105143882 -192 (-1.87065e-058)}
; Y = 1.9095339034469047678754805019707418978214263916015625p328 {+ 4096176548644313 328 (1.04416e+099)}
; -1.174226656467242779768866967060603201389312744140625p-192 + 1.9095339034469047678754805019707418978214263916015625p328 == 1.9095339034469047678754805019707418978214263916015625p328
; [HW: 1.9095339034469047678754805019707418978214263916015625p328] 

; mpf : + 4096176548644313 328
; mpfd: + 4096176548644313 328 (1.04416e+099) class: Pos. norm. non-zero
; hwf : + 4096176548644313 328 (1.04416e+099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111111 #b0010110010011010000111100011111110011110010001001010)))
(assert (= y (fp #b0 #b10101000111 #b1110100011010111001101101100000111101000010111011001)))
(assert (= r (fp #b0 #b10101000111 #b1110100011010111001101101100000111101000010111011001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
