(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.853415771966009373272754601202905178070068359375p-352 {- 3843442952618224 -352 (-2.02029e-106)}
; Y = -1.5889481580360069745694318044115789234638214111328125p-244 {- 2652386705071501 -244 (-5.6207e-074)}
; -1.853415771966009373272754601202905178070068359375p-352 + -1.5889481580360069745694318044115789234638214111328125p-244 == -1.5889481580360069745694318044115789234638214111328125p-244
; [HW: -1.5889481580360069745694318044115789234638214111328125p-244] 

; mpf : - 2652386705071501 -244
; mpfd: - 2652386705071501 -244 (-5.6207e-074) class: Neg. norm. non-zero
; hwf : - 2652386705071501 -244 (-5.6207e-074) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011111 #b1101101001111001011101001011111001111100000011110000)))
(assert (= y (fp #b1 #b01100001011 #b1001011011000101010011100111010111001101110110001101)))
(assert (= r (fp #b1 #b01100001011 #b1001011011000101010011100111010111001101110110001101)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
