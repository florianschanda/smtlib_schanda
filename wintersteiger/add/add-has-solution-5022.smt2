(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6747388562999920846863233236945234239101409912109375p-310 {+ 3038753661805039 -310 (8.02876e-094)}
; Y = 1.6941930815463417392408018713467754423618316650390625p-820 {+ 3126367703375281 -820 (2.42307e-247)}
; 1.6747388562999920846863233236945234239101409912109375p-310 + 1.6941930815463417392408018713467754423618316650390625p-820 == 1.6747388562999920846863233236945234239101409912109375p-310
; [HW: 1.6747388562999920846863233236945234239101409912109375p-310] 

; mpf : + 3038753661805039 -310
; mpfd: + 3038753661805039 -310 (8.02876e-094) class: Pos. norm. non-zero
; hwf : + 3038753661805039 -310 (8.02876e-094) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001001 #b1010110010111011101011111000100100100110000111101111)))
(assert (= y (fp #b0 #b00011001011 #b1011000110110110101000110100011001011001110110110001)))
(assert (= r (fp #b0 #b01011001001 #b1010110010111011101011111000100100100110000111101111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
