(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.448621448533410127623710650368593633174896240234375p566 {- 2020411388445478 566 (-3.49891e+170)}
; Y = 1.8988727695207374690511414883076213300228118896484375p-910 {+ 4048163069867079 -910 (2.19381e-274)}
; -1.448621448533410127623710650368593633174896240234375p566 + 1.8988727695207374690511414883076213300228118896484375p-910 == -1.448621448533410127623710650368593633174896240234375p566
; [HW: -1.448621448533410127623710650368593633174896240234375p566] 

; mpf : - 2020411388445478 566
; mpfd: - 2020411388445478 566 (-3.49891e+170) class: Neg. norm. non-zero
; hwf : - 2020411388445478 566 (-3.49891e+170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110101 #b0111001011011000110110101111000110111100001100100110)))
(assert (= y (fp #b0 #b00001110001 #b1110011000011100100001101001110001011011010001000111)))
(assert (= r (fp #b1 #b11000110101 #b0111001011011000110110101111000110111100001100100110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
