(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.469756678256306514640527893789112567901611328125p-95 {+ 2115596001149904 -95 (3.71019e-029)}
; Y = 1.544902111301408975663207456818781793117523193359375p422 {+ 2454020945410422 422 (1.67324e+127)}
; 1.469756678256306514640527893789112567901611328125p-95 + 1.544902111301408975663207456818781793117523193359375p422 == 1.5449021113014091977078123818500898778438568115234375p422
; [HW: 1.5449021113014091977078123818500898778438568115234375p422] 

; mpf : + 2454020945410423 422
; mpfd: + 2454020945410423 422 (1.67324e+127) class: Pos. norm. non-zero
; hwf : + 2454020945410423 422 (1.67324e+127) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100000 #b0111100001000001111110010100001000110000001111010000)))
(assert (= y (fp #b0 #b10110100101 #b1000101101111110101101000110101110001111100101110110)))
(assert (= r (fp #b0 #b10110100101 #b1000101101111110101101000110101110001111100101110111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
