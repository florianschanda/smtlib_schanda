(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2745917641099364647772063108277507126331329345703125p-609 {+ 1236651366524517 -609 (5.99934e-184)}
; Y = -1.5791252345611008767178873313241638243198394775390625p-440 {- 2608148190570225 -440 (-5.56184e-133)}
; 1.2745917641099364647772063108277507126331329345703125p-609 + -1.5791252345611008767178873313241638243198394775390625p-440 == -1.5791252345611008767178873313241638243198394775390625p-440
; [HW: -1.5791252345611008767178873313241638243198394775390625p-440] 

; mpf : - 2608148190570225 -440
; mpfd: - 2608148190570225 -440 (-5.56184e-133) class: Neg. norm. non-zero
; hwf : - 2608148190570225 -440 (-5.56184e-133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110011110 #b0100011001001011101001010101011010011010011001100101)))
(assert (= y (fp #b1 #b01001000111 #b1001010001000001100011010010011010111010011011110001)))
(assert (= r (fp #b1 #b01001000111 #b1001010001000001100011010010011010111010011011110001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
