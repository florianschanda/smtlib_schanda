(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9128954332913152835971004606108181178569793701171875p-119 {- 4111315533198995 -119 (-2.87821e-036)}
; Y = 1.706348255701984673038396067568100988864898681640625p595 {+ 3181109741173258 595 (2.21266e+179)}
; -1.9128954332913152835971004606108181178569793701171875p-119 + 1.706348255701984673038396067568100988864898681640625p595 == 1.706348255701984673038396067568100988864898681640625p595
; [HW: 1.706348255701984673038396067568100988864898681640625p595] 

; mpf : + 3181109741173258 595
; mpfd: + 3181109741173258 595 (2.21266e+179) class: Pos. norm. non-zero
; hwf : + 3181109741173258 595 (2.21266e+179) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110001000 #b1110100110110011100000111101111010100111011010010011)))
(assert (= y (fp #b0 #b11001010010 #b1011010011010011001111010100000111010011101000001010)))
(assert (= r (fp #b0 #b11001010010 #b1011010011010011001111010100000111010011101000001010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
