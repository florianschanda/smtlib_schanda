(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.928507735380961651827647074242122471332550048828125p-546 {- 4181627091072322 -546 (-8.37228e-165)}
; Y = -1.5203414932731560416101501687080599367618560791015625p397 {- 2343409755210393 397 (-4.90738e+119)}
; -1.928507735380961651827647074242122471332550048828125p-546 + -1.5203414932731560416101501687080599367618560791015625p397 == -1.5203414932731560416101501687080599367618560791015625p397
; [HW: -1.5203414932731560416101501687080599367618560791015625p397] 

; mpf : - 2343409755210393 397
; mpfd: - 2343409755210393 397 (-4.90738e+119) class: Neg. norm. non-zero
; hwf : - 2343409755210393 397 (-4.90738e+119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111011101 #b1110110110110010101011101101010110001011010101000010)))
(assert (= y (fp #b1 #b10110001100 #b1000010100110101000110011010000001011100001010011001)))
(assert (= r (fp #b1 #b10110001100 #b1000010100110101000110011010000001011100001010011001)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
