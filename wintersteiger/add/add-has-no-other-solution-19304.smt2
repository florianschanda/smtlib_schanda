(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.95358681297845304669635879690758883953094482421875p-451 {- 4294573215595180 -451 (-3.35973e-136)}
; Y = -1.0139649118678943917615242753527127206325531005859375p-961 {- 62892371884511 -961 (-5.20232e-290)}
; -1.95358681297845304669635879690758883953094482421875p-451 + -1.0139649118678943917615242753527127206325531005859375p-961 == -1.95358681297845304669635879690758883953094482421875p-451
; [HW: -1.95358681297845304669635879690758883953094482421875p-451] 

; mpf : - 4294573215595180 -451
; mpfd: - 4294573215595180 -451 (-3.35973e-136) class: Neg. norm. non-zero
; hwf : - 4294573215595180 -451 (-3.35973e-136) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000111100 #b1111010000011110010000111110111110100011101010101100)))
(assert (= y (fp #b1 #b00000111110 #b0000001110010011001101000101011111000011100111011111)))
(assert (= r (fp #b1 #b01000111100 #b1111010000011110010000111110111110100011101010101100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
