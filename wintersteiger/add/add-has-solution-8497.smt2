(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6751087916979876535350513222510926425457000732421875p169 {- 3040419702725603 169 (-1.25347e+051)}
; Y = -1.2350393704782696158162025312776677310466766357421875p748 {- 1058523221303331 748 (-1.8286e+225)}
; -1.6751087916979876535350513222510926425457000732421875p169 + -1.2350393704782696158162025312776677310466766357421875p748 == -1.2350393704782696158162025312776677310466766357421875p748
; [HW: -1.2350393704782696158162025312776677310466766357421875p748] 

; mpf : - 1058523221303331 748
; mpfd: - 1058523221303331 748 (-1.8286e+225) class: Neg. norm. non-zero
; hwf : - 1058523221303331 748 (-1.8286e+225) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010101000 #b1010110011010011111011100000010110010101101111100011)))
(assert (= y (fp #b1 #b11011101011 #b0011110000101011100010100100100101111010000000100011)))
(assert (= r (fp #b1 #b11011101011 #b0011110000101011100010100100100101111010000000100011)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
