(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.995101301810234151190570628386922180652618408203125p-736 {- 4481537852028466 -736 (-5.51935e-222)}
; Y = -1.8276010416811125924851921809022314846515655517578125p586 {- 3727183742926493 586 (-4.6287e+176)}
; -1.995101301810234151190570628386922180652618408203125p-736 + -1.8276010416811125924851921809022314846515655517578125p586 == -1.8276010416811125924851921809022314846515655517578125p586
; [HW: -1.8276010416811125924851921809022314846515655517578125p586] 

; mpf : - 3727183742926493 586
; mpfd: - 3727183742926493 586 (-4.6287e+176) class: Neg. norm. non-zero
; hwf : - 3727183742926493 586 (-4.6287e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011111 #b1111111010111110111101010111101101111011011000110010)))
(assert (= y (fp #b1 #b11001001001 #b1101001111011101101010010111000000100111111010011101)))
(assert (= r (fp #b1 #b11001001001 #b1101001111011101101010010111000000100111111010011101)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
