(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.662365972997294161217496366589330136775970458984375p237 {- 2983031149173510 237 (-3.67143e+071)}
; Y = -1.0950452410309221562556558637879788875579833984375p430 {- 428045712090200 430 (-3.0362e+129)}
; -1.662365972997294161217496366589330136775970458984375p237 + -1.0950452410309221562556558637879788875579833984375p430 == -1.0950452410309221562556558637879788875579833984375p430
; [HW: -1.0950452410309221562556558637879788875579833984375p430] 

; mpf : - 428045712090200 430
; mpfd: - 428045712090200 430 (-3.0362e+129) class: Neg. norm. non-zero
; hwf : - 428045712090200 430 (-3.0362e+129) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101100 #b1010100110010000110100010000000000000001101100000110)))
(assert (= y (fp #b1 #b10110101101 #b0001100001010100111000101000100111011110010001011000)))
(assert (= r (fp #b1 #b10110101101 #b0001100001010100111000101000100111011110010001011000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
