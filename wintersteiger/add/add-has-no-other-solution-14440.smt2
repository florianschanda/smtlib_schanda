(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.453946940913556584717980513232760131359100341796875p-486 {- 2044395273944270 -486 (-7.27731e-147)}
; Y = -1.17857448070949377694205395528115332126617431640625p709 {- 804227964781156 709 (-3.17412e+213)}
; -1.453946940913556584717980513232760131359100341796875p-486 + -1.17857448070949377694205395528115332126617431640625p709 == -1.1785744807094939989866588803124614059925079345703125p709
; [HW: -1.1785744807094939989866588803124614059925079345703125p709] 

; mpf : - 804227964781157 709
; mpfd: - 804227964781157 709 (-3.17412e+213) class: Neg. norm. non-zero
; hwf : - 804227964781157 709 (-3.17412e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000011001 #b0111010000110101110111011110000101010111110011001110)))
(assert (= y (fp #b1 #b11011000100 #b0010110110110111000011101010001010001100001001100100)))
(assert (= r (fp #b1 #b11011000100 #b0010110110110111000011101010001010001100001001100101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
