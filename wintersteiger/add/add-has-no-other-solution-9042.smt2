(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8876037728511063651382073658169247210025787353515625p-866 {+ 3997412020664889 -866 (3.83649e-261)}
; Y = 1.4790704516609125551696024558623321354389190673828125p-483 {+ 2157541507584301 -483 (5.92244e-146)}
; 1.8876037728511063651382073658169247210025787353515625p-866 + 1.4790704516609125551696024558623321354389190673828125p-483 == 1.479070451660912777214207380893640220165252685546875p-483
; [HW: 1.479070451660912777214207380893640220165252685546875p-483] 

; mpf : + 2157541507584302 -483
; mpfd: + 2157541507584302 -483 (5.92244e-146) class: Pos. norm. non-zero
; hwf : + 2157541507584302 -483 (5.92244e-146) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010011101 #b1110001100111010000000000011100000110011101000111001)))
(assert (= y (fp #b0 #b01000011100 #b0111101010100100010111000111001001011101000100101101)))
(assert (= r (fp #b0 #b01000011100 #b0111101010100100010111000111001001011101000100101110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
