(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.207716418675699454610139582655392587184906005859375p768 {- 935471585746614 768 (-1.875e+231)}
; Y = -1.1630986423180835753754536199267022311687469482421875p863 {- 734530984768355 863 (-7.15324e+259)}
; -1.207716418675699454610139582655392587184906005859375p768 + -1.1630986423180835753754536199267022311687469482421875p863 == -1.1630986423180835753754536199267022311687469482421875p863
; [HW: -1.1630986423180835753754536199267022311687469482421875p863] 

; mpf : - 734530984768355 863
; mpfd: - 734530984768355 863 (-7.15324e+259) class: Neg. norm. non-zero
; hwf : - 734530984768355 863 (-7.15324e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011111111 #b0011010100101100111001110011100100001101111010110110)))
(assert (= y (fp #b1 #b11101011110 #b0010100111000000110101010010011011000111001101100011)))
(assert (= r (fp #b1 #b11101011110 #b0010100111000000110101010010011011000111001101100011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
