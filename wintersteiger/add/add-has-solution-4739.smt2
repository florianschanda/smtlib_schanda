(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8368399791595069192595701679238118231296539306640625p903 {- 3768792218311489 903 (-1.2421e+272)}
; Y = -1.189531332072890190687530775903724133968353271484375p-540 {- 853573236498502 -540 (-3.30505e-163)}
; -1.8368399791595069192595701679238118231296539306640625p903 + -1.189531332072890190687530775903724133968353271484375p-540 == -1.8368399791595069192595701679238118231296539306640625p903
; [HW: -1.8368399791595069192595701679238118231296539306640625p903] 

; mpf : - 3768792218311489 903
; mpfd: - 3768792218311489 903 (-1.2421e+272) class: Neg. norm. non-zero
; hwf : - 3768792218311489 903 (-1.2421e+272) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110000110 #b1101011000111011001001010001011001111001101101000001)))
(assert (= y (fp #b1 #b00111100011 #b0011000010000101001000000001100011010010000001000110)))
(assert (= r (fp #b1 #b11110000110 #b1101011000111011001001010001011001111001101101000001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
