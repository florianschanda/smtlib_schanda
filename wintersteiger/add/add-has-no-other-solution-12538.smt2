(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.150539556598420443123131917673163115978240966796875p-791 {- 677969891001166 -791 (-8.83436e-239)}
; Y = -1.2186300588762775110041047810227610170841217041015625p693 {- 984622251687193 693 (-5.00794e+208)}
; -1.150539556598420443123131917673163115978240966796875p-791 + -1.2186300588762775110041047810227610170841217041015625p693 == -1.218630058876277733048709706054069101810455322265625p693
; [HW: -1.218630058876277733048709706054069101810455322265625p693] 

; mpf : - 984622251687194 693
; mpfd: - 984622251687194 693 (-5.00794e+208) class: Neg. norm. non-zero
; hwf : - 984622251687194 693 (-5.00794e+208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011101000 #b0010011010001001110000101010100001011000001101001110)))
(assert (= y (fp #b1 #b11010110100 #b0011011111111000001000111011100011001011110100011001)))
(assert (= r (fp #b1 #b11010110100 #b0011011111111000001000111011100011001011110100011010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
