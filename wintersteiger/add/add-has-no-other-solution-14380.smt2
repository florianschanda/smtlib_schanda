(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9306972855876989303425261823576875030994415283203125p281 {- 4191487948567493 281 (-7.50141e+084)}
; Y = -1.7044481325706402063957511927583254873752593994140625p646 {- 3172552347346977 646 (-4.97692e+194)}
; -1.9306972855876989303425261823576875030994415283203125p281 + -1.7044481325706402063957511927583254873752593994140625p646 == -1.7044481325706402063957511927583254873752593994140625p646
; [HW: -1.7044481325706402063957511927583254873752593994140625p646] 

; mpf : - 3172552347346977 646
; mpfd: - 3172552347346977 646 (-4.97692e+194) class: Neg. norm. non-zero
; hwf : - 3172552347346977 646 (-4.97692e+194) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011000 #b1110111001000010001011010110010000010011001111000101)))
(assert (= y (fp #b1 #b11010000101 #b1011010001010110101101100111101100011110100000100001)))
(assert (= r (fp #b1 #b11010000101 #b1011010001010110101101100111101100011110100000100001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
