(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6781558560369280730384389244136400520801544189453125p577 {+ 3054142460547029 577 (8.30118e+173)}
; Y = 1.0423578994612088255422577276476658880710601806640625p700 {+ 190763020229697 700 (5.48294e+210)}
; 1.6781558560369280730384389244136400520801544189453125p577 + 1.0423578994612088255422577276476658880710601806640625p700 == 1.0423578994612088255422577276476658880710601806640625p700
; [HW: 1.0423578994612088255422577276476658880710601806640625p700] 

; mpf : + 190763020229697 700
; mpfd: + 190763020229697 700 (5.48294e+210) class: Pos. norm. non-zero
; hwf : + 190763020229697 700 (5.48294e+210) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000000 #b1010110110011011100111110100011101000100111111010101)))
(assert (= y (fp #b0 #b11010111011 #b0000101011010111111101111010000011101001110001000001)))
(assert (= r (fp #b0 #b11010111011 #b0000101011010111111101111010000011101001110001000001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
