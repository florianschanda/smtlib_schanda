(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2260675848794850839595937941339798271656036376953125p-527 {+ 1018117891023797 -527 (2.79066e-159)}
; Y = -1.4961998703833014889852393025648780167102813720703125p101 {- 2234685551359525 101 (-3.79332e+030)}
; 1.2260675848794850839595937941339798271656036376953125p-527 + -1.4961998703833014889852393025648780167102813720703125p101 == -1.4961998703833014889852393025648780167102813720703125p101
; [HW: -1.4961998703833014889852393025648780167102813720703125p101] 

; mpf : - 2234685551359525 101
; mpfd: - 2234685551359525 101 (-3.79332e+030) class: Neg. norm. non-zero
; hwf : - 2234685551359525 101 (-3.79332e+030) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110000 #b0011100111011111100100001011001110111110001110110101)))
(assert (= y (fp #b1 #b10001100100 #b0111111100000110111101000110011110010011011000100101)))
(assert (= r (fp #b1 #b10001100100 #b0111111100000110111101000110011110010011011000100101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
