(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5195096294321022156736944452859461307525634765625p431 {- 2339663373525800 431 (-8.4262e+129)}
; Y = -1.699122411931459186718029741314239799976348876953125p570 {- 3148567433860882 570 (-6.56632e+171)}
; -1.5195096294321022156736944452859461307525634765625p431 + -1.699122411931459186718029741314239799976348876953125p570 == -1.699122411931459186718029741314239799976348876953125p570
; [HW: -1.699122411931459186718029741314239799976348876953125p570] 

; mpf : - 3148567433860882 570
; mpfd: - 3148567433860882 570 (-6.56632e+171) class: Neg. norm. non-zero
; hwf : - 3148567433860882 570 (-6.56632e+171) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110101110 #b1000010011111110100101010100010001011110001100101000)))
(assert (= y (fp #b1 #b11000111001 #b1011001011111001101011111011011100100101011100010010)))
(assert (= r (fp #b1 #b11000111001 #b1011001011111001101011111011011100100101011100010010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
