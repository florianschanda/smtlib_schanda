(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6184889533638606717858010597410611808300018310546875p-829 {+ 2785426619902251 -829 (4.52109e-250)}
; Y = -1.137209026741314854547226786962710320949554443359375p803 {- 617934521704054 803 (-6.06634e+241)}
; 1.6184889533638606717858010597410611808300018310546875p-829 + -1.137209026741314854547226786962710320949554443359375p803 == -1.137209026741314854547226786962710320949554443359375p803
; [HW: -1.137209026741314854547226786962710320949554443359375p803] 

; mpf : - 617934521704054 803
; mpfd: - 617934521704054 803 (-6.06634e+241) class: Neg. norm. non-zero
; hwf : - 617934521704054 803 (-6.06634e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000010 #b1001111001010101010010101100001110100010100100101011)))
(assert (= y (fp #b1 #b11100100010 #b0010001100100000001000010111101010010001111001110110)))
(assert (= r (fp #b1 #b11100100010 #b0010001100100000001000010111101010010001111001110110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
