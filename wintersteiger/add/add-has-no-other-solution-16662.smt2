(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.84119539721579617008728746441192924976348876953125p578 {+ 3788407277446836 578 (1.82153e+174)}
; Y = 1.310220438516475294221663716598413884639739990234375p-426 {+ 1397108651305510 -426 (7.56077e-129)}
; 1.84119539721579617008728746441192924976348876953125p578 + 1.310220438516475294221663716598413884639739990234375p-426 == 1.84119539721579617008728746441192924976348876953125p578
; [HW: 1.84119539721579617008728746441192924976348876953125p578] 

; mpf : + 3788407277446836 578
; mpfd: + 3788407277446836 578 (1.82153e+174) class: Pos. norm. non-zero
; hwf : + 3788407277446836 578 (1.82153e+174) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000001 #b1101011101011000100101001110000010010110011010110100)))
(assert (= y (fp #b0 #b01001010101 #b0100111101101010100110110100110111111010101000100110)))
(assert (= r (fp #b0 #b11001000001 #b1101011101011000100101001110000010010110011010110100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
