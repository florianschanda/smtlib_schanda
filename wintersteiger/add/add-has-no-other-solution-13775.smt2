(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.754049426985096804543218240723945200443267822265625p263 {- 3395936718389018 263 (-2.59974e+079)}
; Y = -1.23818272931139272685641117277555167675018310546875p371 {- 1072679650972876 371 (-5.95543e+111)}
; -1.754049426985096804543218240723945200443267822265625p263 + -1.23818272931139272685641117277555167675018310546875p371 == -1.23818272931139272685641117277555167675018310546875p371
; [HW: -1.23818272931139272685641117277555167675018310546875p371] 

; mpf : - 1072679650972876 371
; mpfd: - 1072679650972876 371 (-5.95543e+111) class: Neg. norm. non-zero
; hwf : - 1072679650972876 371 (-5.95543e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100000110 #b1100000100001001011000100001110001110111111100011010)))
(assert (= y (fp #b1 #b10101110010 #b0011110011111001100010110001100011011101010011001100)))
(assert (= r (fp #b1 #b10101110010 #b0011110011111001100010110001100011011101010011001100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
