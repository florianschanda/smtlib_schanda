(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.025378743854648444511212801444344222545623779296875p-71 {+ 114295701366926 -71 (4.34265e-022)}
; Y = -1.9173117056516784106889872418832965195178985595703125p802 {- 4131204655755493 802 (-5.11386e+241)}
; 1.025378743854648444511212801444344222545623779296875p-71 + -1.9173117056516784106889872418832965195178985595703125p802 == -1.91731170565167818864438231685198843479156494140625p802
; [HW: -1.91731170565167818864438231685198843479156494140625p802] 

; mpf : - 4131204655755492 802
; mpfd: - 4131204655755492 802 (-5.11386e+241) class: Neg. norm. non-zero
; hwf : - 4131204655755492 802 (-5.11386e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111000 #b0000011001111111001110001010101011011110100010001110)))
(assert (= y (fp #b1 #b11100100001 #b1110101011010100111100001010000000000011000011100101)))
(assert (= r (fp #b1 #b11100100001 #b1110101011010100111100001010000000000011000011100100)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
