(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9485852389434563658454635515226982533931732177734375p-954 {+ 4272048128634903 -954 (1.27969e-287)}
; Y = 1.2915947147215043333545736459200270473957061767578125p-830 {+ 1313225848562973 -830 (1.80397e-250)}
; 1.9485852389434563658454635515226982533931732177734375p-954 + 1.2915947147215043333545736459200270473957061767578125p-830 == 1.2915947147215043333545736459200270473957061767578125p-830
; [HW: 1.2915947147215043333545736459200270473957061767578125p-830] 

; mpf : + 1313225848562973 -830
; mpfd: + 1313225848562973 -830 (1.80397e-250) class: Pos. norm. non-zero
; hwf : + 1313225848562973 -830 (1.80397e-250) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000101 #b1111001011010110011110110111001010111011000000010111)))
(assert (= y (fp #b0 #b00011000001 #b0100101010100101111100111000001101101010010100011101)))
(assert (= r (fp #b0 #b00011000001 #b0100101010100101111100111000001101101010010100011101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
