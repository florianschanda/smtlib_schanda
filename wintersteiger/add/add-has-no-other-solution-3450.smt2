(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1420265283507717857247598658432252705097198486328125p57 {+ 639630620157261 57 (1.64583e+017)}
; Y = 1.6488420376993151439393159307655878365039825439453125p-178 {+ 2922124759204949 -178 (4.30368e-054)}
; 1.1420265283507717857247598658432252705097198486328125p57 + 1.6488420376993151439393159307655878365039825439453125p-178 == 1.1420265283507717857247598658432252705097198486328125p57
; [HW: 1.1420265283507717857247598658432252705097198486328125p57] 

; mpf : + 639630620157261 57
; mpfd: + 639630620157261 57 (1.64583e+017) class: Pos. norm. non-zero
; hwf : + 639630620157261 57 (1.64583e+017) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000111000 #b0010010001011011110110011011111001101110010101001101)))
(assert (= y (fp #b0 #b01101001101 #b1010011000011010100000110000010000110000010001010101)))
(assert (= r (fp #b0 #b10000111000 #b0010010001011011110110011011111001101110010101001101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
