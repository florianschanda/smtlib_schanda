(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.799138988106806724687203313806094229221343994140625p249 {- 3599002049055050 249 (-1.62755e+075)}
; Y = -1.0561545006401129587203513437998481094837188720703125p-215 {- 252897388157989 -215 (-2.00576e-065)}
; -1.799138988106806724687203313806094229221343994140625p249 + -1.0561545006401129587203513437998481094837188720703125p-215 == -1.799138988106806724687203313806094229221343994140625p249
; [HW: -1.799138988106806724687203313806094229221343994140625p249] 

; mpf : - 3599002049055050 249
; mpfd: - 3599002049055050 249 (-1.62755e+075) class: Neg. norm. non-zero
; hwf : - 3599002049055050 249 (-1.62755e+075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111000 #b1100110010010100010111110110101011100000100101001010)))
(assert (= y (fp #b1 #b01100101000 #b0000111001100000001001000010111111000101110000100101)))
(assert (= r (fp #b1 #b10011111000 #b1100110010010100010111110110101011100000100101001010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
