(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.061433972684209248171782746794633567333221435546875p208 {+ 276674016488494 208 (4.36649e+062)}
; Y = 1.9079952867244929226586691584088839590549468994140625p431 {+ 4089247234946593 431 (1.05805e+130)}
; 1.061433972684209248171782746794633567333221435546875p208 + 1.9079952867244929226586691584088839590549468994140625p431 == 1.907995286724493144703274083440192043781280517578125p431
; [HW: 1.907995286724493144703274083440192043781280517578125p431] 

; mpf : + 4089247234946594 431
; mpfd: + 4089247234946594 431 (1.05805e+130) class: Pos. norm. non-zero
; hwf : + 4089247234946594 431 (1.05805e+130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011001111 #b0000111110111010001000110000011110001010110000101110)))
(assert (= y (fp #b0 #b10110101110 #b1110100001110010011000010000110101100111011000100001)))
(assert (= r (fp #b0 #b10110101110 #b1110100001110010011000010000110101100111011000100010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
