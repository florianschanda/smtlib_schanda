(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.141449995705034581305881147272884845733642578125p-991 {+ 637034147948752 -991 (5.4542e-299)}
; Y = 1.25399302648904420465214570867829024791717529296875p303 {+ 1143882899450764 303 (2.04354e+091)}
; 1.141449995705034581305881147272884845733642578125p-991 + 1.25399302648904420465214570867829024791717529296875p303 == 1.2539930264890444266967506337095983326435089111328125p303
; [HW: 1.2539930264890444266967506337095983326435089111328125p303] 

; mpf : + 1143882899450765 303
; mpfd: + 1143882899450765 303 (2.04354e+091) class: Pos. norm. non-zero
; hwf : + 1143882899450765 303 (2.04354e+091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100000 #b0010010000110110000100010010000110010010100011010000)))
(assert (= y (fp #b0 #b10100101110 #b0100000100000101101011111101111000101110101110001100)))
(assert (= r (fp #b0 #b10100101110 #b0100000100000101101011111101111000101110101110001101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
