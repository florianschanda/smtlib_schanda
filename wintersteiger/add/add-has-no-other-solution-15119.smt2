(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7938681158279228267105054328567348420619964599609375p216 {- 3575264150623951 216 (-1.88916e+065)}
; Y = 1.848539041075639044464651306043379008769989013671875p-478 {+ 3821480109197566 -478 (2.36859e-144)}
; -1.7938681158279228267105054328567348420619964599609375p216 + 1.848539041075639044464651306043379008769989013671875p-478 == -1.793868115827922604665900507825426757335662841796875p216
; [HW: -1.793868115827922604665900507825426757335662841796875p216] 

; mpf : - 3575264150623950 216
; mpfd: - 3575264150623950 216 (-1.88916e+065) class: Neg. norm. non-zero
; hwf : - 3575264150623950 216 (-1.88916e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011010111 #b1100101100111010111100001101101011010001011011001111)))
(assert (= y (fp #b0 #b01000100001 #b1101100100111001110110101100011011001100100011111110)))
(assert (= r (fp #b1 #b10011010111 #b1100101100111010111100001101101011010001011011001110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
