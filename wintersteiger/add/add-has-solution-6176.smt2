(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5872455180005891062222644904977641999721527099609375p-998 {- 2644718696042447 -998 (-5.92527e-301)}
; Y = 1.4004565162897169017242049449123442173004150390625p415 {+ 1803495817540456 415 (1.185e+125)}
; -1.5872455180005891062222644904977641999721527099609375p-998 + 1.4004565162897169017242049449123442173004150390625p415 == 1.4004565162897166796796000198810361325740814208984375p415
; [HW: 1.4004565162897166796796000198810361325740814208984375p415] 

; mpf : + 1803495817540455 415
; mpfd: + 1803495817540455 415 (1.185e+125) class: Pos. norm. non-zero
; hwf : + 1803495817540455 415 (1.185e+125) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000011001 #b1001011001010101101110001110011010001000111111001111)))
(assert (= y (fp #b0 #b10110011110 #b0110011010000100010100010111100011101111001101101000)))
(assert (= r (fp #b0 #b10110011110 #b0110011010000100010100010111100011101111001101100111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
