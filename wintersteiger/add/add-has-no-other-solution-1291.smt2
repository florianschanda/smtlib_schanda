(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.00979632973267907658510011970065534114837646484375p-626 {- 44118746933692 -626 (-3.62624e-189)}
; Y = -1.9383338164774104317444880507537163794040679931640625p-39 {- 4225879826236801 -39 (-3.52581e-012)}
; -1.00979632973267907658510011970065534114837646484375p-626 + -1.9383338164774104317444880507537163794040679931640625p-39 == -1.938333816477410653789092975785024464130401611328125p-39
; [HW: -1.938333816477410653789092975785024464130401611328125p-39] 

; mpf : - 4225879826236802 -39
; mpfd: - 4225879826236802 -39 (-3.52581e-012) class: Neg. norm. non-zero
; hwf : - 4225879826236802 -39 (-3.52581e-012) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001101 #b0000001010000010000000110010001111010010100110111100)))
(assert (= y (fp #b1 #b01111011000 #b1111000000110110101001010001111010000000010110000001)))
(assert (= r (fp #b1 #b01111011000 #b1111000000110110101001010001111010000000010110000010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
