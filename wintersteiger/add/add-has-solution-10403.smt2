(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4883786486364185552844219273538328707218170166015625p-585 {- 2199461900014681 -585 (-1.17535e-176)}
; Y = -1.2182022204733942150056691389181651175022125244140625p-469 {- 982695438815393 -469 (-7.99193e-142)}
; -1.4883786486364185552844219273538328707218170166015625p-585 + -1.2182022204733942150056691389181651175022125244140625p-469 == -1.2182022204733942150056691389181651175022125244140625p-469
; [HW: -1.2182022204733942150056691389181651175022125244140625p-469] 

; mpf : - 982695438815393 -469
; mpfd: - 982695438815393 -469 (-7.99193e-142) class: Neg. norm. non-zero
; hwf : - 982695438815393 -469 (-7.99193e-142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110110 #b0111110100000110011000100001001111110101010001011001)))
(assert (= y (fp #b1 #b01000101010 #b0011011111011100000110011100100011011001000010100001)))
(assert (= r (fp #b1 #b01000101010 #b0011011111011100000110011100100011011001000010100001)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
