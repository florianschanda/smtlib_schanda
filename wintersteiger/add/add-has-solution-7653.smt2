(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2412657964082824957330331017146818339824676513671875p926 {- 1086564550801587 926 (-7.0411e+278)}
; Y = -1.2393124655991905047613954593543894588947296142578125p-869 {- 1077767530897629 -869 (-3.14858e-262)}
; -1.2412657964082824957330331017146818339824676513671875p926 + -1.2393124655991905047613954593543894588947296142578125p-869 == -1.24126579640828271777763802674598991870880126953125p926
; [HW: -1.24126579640828271777763802674598991870880126953125p926] 

; mpf : - 1086564550801588 926
; mpfd: - 1086564550801588 926 (-7.0411e+278) class: Neg. norm. non-zero
; hwf : - 1086564550801588 926 (-7.0411e+278) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110011101 #b0011110111000011100110000110000100110111100010110011)))
(assert (= y (fp #b1 #b00010011010 #b0011110101000011100101001110110101000110000011011101)))
(assert (= r (fp #b1 #b11110011101 #b0011110111000011100110000110000100110111100010110100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
