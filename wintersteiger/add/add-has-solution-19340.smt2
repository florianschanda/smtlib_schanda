(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8455390771638935376586232450790703296661376953125p239 {- 3807969472842504 239 (-1.63039e+072)}
; Y = -1.6177961149965096598890568202477879822254180908203125p759 {- 2782306353289221 759 (-4.90558e+228)}
; -1.8455390771638935376586232450790703296661376953125p239 + -1.6177961149965096598890568202477879822254180908203125p759 == -1.617796114996509881933661745279096066951751708984375p759
; [HW: -1.617796114996509881933661745279096066951751708984375p759] 

; mpf : - 2782306353289222 759
; mpfd: - 2782306353289222 759 (-4.90558e+228) class: Neg. norm. non-zero
; hwf : - 2782306353289222 759 (-4.90558e+228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101110 #b1101100001110101001111111011101111101000101100001000)))
(assert (= y (fp #b1 #b11011110110 #b1001111000100111111000101101110110000001100000000101)))
(assert (= r (fp #b1 #b11011110110 #b1001111000100111111000101101110110000001100000000110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
