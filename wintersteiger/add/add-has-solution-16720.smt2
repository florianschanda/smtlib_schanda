(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.96557878116932815970585579634644091129302978515625p-358 {- 4348580239071044 -358 (-3.34774e-108)}
; Y = 1.3024414074186954071166155699756927788257598876953125p-623 {+ 1362075009752245 -623 (3.74172e-188)}
; -1.96557878116932815970585579634644091129302978515625p-358 + 1.3024414074186954071166155699756927788257598876953125p-623 == -1.96557878116932815970585579634644091129302978515625p-358
; [HW: -1.96557878116932815970585579634644091129302978515625p-358] 

; mpf : - 4348580239071044 -358
; mpfd: - 4348580239071044 -358 (-3.34774e-108) class: Neg. norm. non-zero
; hwf : - 4348580239071044 -358 (-3.34774e-108) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011001 #b1111011100110000001010111100011011010101011101000100)))
(assert (= y (fp #b0 #b00110010000 #b0100110101101100110011001101000111010001110010110101)))
(assert (= r (fp #b1 #b01010011001 #b1111011100110000001010111100011011010101011101000100)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
