(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6145955941633018948522249047528021037578582763671875p850 {- 2767892488857395 850 (-1.21216e+256)}
; Y = -1.3540231062138354811708040870144031941890716552734375p-966 {- 1594378329225175 -966 (-2.17095e-291)}
; -1.6145955941633018948522249047528021037578582763671875p850 + -1.3540231062138354811708040870144031941890716552734375p-966 == -1.6145955941633018948522249047528021037578582763671875p850
; [HW: -1.6145955941633018948522249047528021037578582763671875p850] 

; mpf : - 2767892488857395 850
; mpfd: - 2767892488857395 850 (-1.21216e+256) class: Neg. norm. non-zero
; hwf : - 2767892488857395 850 (-1.21216e+256) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101010001 #b1001110101010110001000110000100100110010011100110011)))
(assert (= y (fp #b1 #b00000111001 #b0101101010100001010000100001111100110111011111010111)))
(assert (= r (fp #b1 #b11101010001 #b1001110101010110001000110000100100110010011100110011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
