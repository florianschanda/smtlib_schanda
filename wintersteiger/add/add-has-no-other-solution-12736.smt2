(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.215004701370578477082062818226404488086700439453125p453 {- 968295092975442 453 (-2.82596e+136)}
; Y = 1.81694407086127629469274324947036802768707275390625p-107 {+ 3679189013113380 -107 (1.11978e-032)}
; -1.215004701370578477082062818226404488086700439453125p453 + 1.81694407086127629469274324947036802768707275390625p-107 == -1.215004701370578477082062818226404488086700439453125p453
; [HW: -1.215004701370578477082062818226404488086700439453125p453] 

; mpf : - 968295092975442 453
; mpfd: - 968295092975442 453 (-2.82596e+136) class: Neg. norm. non-zero
; hwf : - 968295092975442 453 (-2.82596e+136) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000100 #b0011011100001010100011000101000011011111011101010010)))
(assert (= y (fp #b0 #b01110010100 #b1101000100100011001111110010001100000010101000100100)))
(assert (= r (fp #b1 #b10111000100 #b0011011100001010100011000101000011011111011101010010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
