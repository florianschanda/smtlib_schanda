(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.35536304650875738531112801865674555301666259765625p339 {- 1600412883838084 339 (-1.51783e+102)}
; Y = 1.84880714772229470810316342976875603199005126953125p-243 {+ 3822687554191540 -243 (1.30798e-073)}
; -1.35536304650875738531112801865674555301666259765625p339 + 1.84880714772229470810316342976875603199005126953125p-243 == -1.3553630465087571632665230936254374682903289794921875p339
; [HW: -1.3553630465087571632665230936254374682903289794921875p339] 

; mpf : - 1600412883838083 339
; mpfd: - 1600412883838083 339 (-1.51783e+102) class: Neg. norm. non-zero
; hwf : - 1600412883838083 339 (-1.51783e+102) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010010 #b0101101011111001000100101001011011110110010010000100)))
(assert (= y (fp #b0 #b01100001100 #b1101100101001011011011001101110000010100000010110100)))
(assert (= r (fp #b1 #b10101010010 #b0101101011111001000100101001011011110110010010000011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
