(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.139229861137797339409871710813604295253753662109375p602 {+ 627035550739030 602 (1.8909e+181)}
; Y = -1.5572895414168701488932811116683296859264373779296875p970 {- 2509808971062491 970 (-1.55405e+292)}
; 1.139229861137797339409871710813604295253753662109375p602 + -1.5572895414168701488932811116683296859264373779296875p970 == -1.557289541416869926848676186637021601200103759765625p970
; [HW: -1.557289541416869926848676186637021601200103759765625p970] 

; mpf : - 2509808971062490 970
; mpfd: - 2509808971062490 970 (-1.55405e+292) class: Neg. norm. non-zero
; hwf : - 2509808971062490 970 (-1.55405e+292) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001011001 #b0010001110100100100100010111010000110110101001010110)))
(assert (= y (fp #b1 #b11111001001 #b1000111010101010100001110000001011001001110011011011)))
(assert (= r (fp #b1 #b11111001001 #b1000111010101010100001110000001011001001110011011010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
