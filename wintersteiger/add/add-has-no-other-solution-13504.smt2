(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5808806674832796002050372408120892941951751708984375p538 {+ 2616053957624423 538 (1.42245e+162)}
; Y = -1.8340563709889050603152327312272973358631134033203125p141 {- 3756255961591621 141 (-5.1126e+042)}
; 1.5808806674832796002050372408120892941951751708984375p538 + -1.8340563709889050603152327312272973358631134033203125p141 == 1.580880667483279378160432315780781209468841552734375p538
; [HW: 1.580880667483279378160432315780781209468841552734375p538] 

; mpf : + 2616053957624422 538
; mpfd: + 2616053957624422 538 (1.42245e+162) class: Pos. norm. non-zero
; hwf : + 2616053957624422 538 (1.42245e+162) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011001 #b1001010010110100100110000110110110111000001001100111)))
(assert (= y (fp #b1 #b10010001100 #b1101010110000100101101111110010001101010111101000101)))
(assert (= r (fp #b0 #b11000011001 #b1001010010110100100110000110110110111000001001100110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
