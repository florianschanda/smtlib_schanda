(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.35055612135875602319856625399552285671234130859375p337 {- 1578764417523740 337 (-3.78113e+101)}
; Y = -1.5396678847177838189708154459367506206035614013671875p-533 {- 2430448084518835 -533 (-5.4757e-161)}
; -1.35055612135875602319856625399552285671234130859375p337 + -1.5396678847177838189708154459367506206035614013671875p-533 == -1.3505561213587562452431711790268309414386749267578125p337
; [HW: -1.3505561213587562452431711790268309414386749267578125p337] 

; mpf : - 1578764417523741 337
; mpfd: - 1578764417523741 337 (-3.78113e+101) class: Neg. norm. non-zero
; hwf : - 1578764417523741 337 (-3.78113e+101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010000 #b0101100110111110000010111100010010100110000000011100)))
(assert (= y (fp #b1 #b00111101010 #b1000101000100111101011001010101110010000011110110011)))
(assert (= r (fp #b1 #b10101010000 #b0101100110111110000010111100010010100110000000011101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
