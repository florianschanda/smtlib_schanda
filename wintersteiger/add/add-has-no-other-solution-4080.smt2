(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.097451555021540681167380171245895326137542724609375p-953 {- 438882786881686 -953 (-1.44145e-287)}
; Y = -1.6313735450643063185083292410126887261867523193359375p602 {- 2843453662283199 602 (-2.70776e+181)}
; -1.097451555021540681167380171245895326137542724609375p-953 + -1.6313735450643063185083292410126887261867523193359375p602 == -1.6313735450643063185083292410126887261867523193359375p602
; [HW: -1.6313735450643063185083292410126887261867523193359375p602] 

; mpf : - 2843453662283199 602
; mpfd: - 2843453662283199 602 (-2.70776e+181) class: Neg. norm. non-zero
; hwf : - 2843453662283199 602 (-2.70776e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000110 #b0001100011110010100101011100100111000011000010010110)))
(assert (= y (fp #b1 #b11001011001 #b1010000110100001101100100101011110011100010110111111)))
(assert (= r (fp #b1 #b11001011001 #b1010000110100001101100100101011110011100010110111111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
