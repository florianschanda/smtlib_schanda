(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.785751266900366118761667166836559772491455078125p921 {- 3538709112818384 921 (-3.16553e+277)}
; Y = -1.2052491859139660146382766470196656882762908935546875p435 {- 924360157200235 435 (-1.06936e+131)}
; -1.785751266900366118761667166836559772491455078125p921 + -1.2052491859139660146382766470196656882762908935546875p435 == -1.785751266900366118761667166836559772491455078125p921
; [HW: -1.785751266900366118761667166836559772491455078125p921] 

; mpf : - 3538709112818384 921
; mpfd: - 3538709112818384 921 (-3.16553e+277) class: Neg. norm. non-zero
; hwf : - 3538709112818384 921 (-3.16553e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110011000 #b1100100100100110111111101011101000100000101011010000)))
(assert (= y (fp #b1 #b10110110010 #b0011010010001011001101011110110100000111111101101011)))
(assert (= r (fp #b1 #b11110011000 #b1100100100100110111111101011101000100000101011010000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
