(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.431259250926245396584590707789175212383270263671875p1019 {- 1942219001771518 1019 (-8.04052e+306)}
; Y = -1.5563286426636633308362434036098420619964599609375p444 {- 2505481467795608 444 (-7.07e+133)}
; -1.431259250926245396584590707789175212383270263671875p1019 + -1.5563286426636633308362434036098420619964599609375p444 == -1.4312592509262456186291956328204832971096038818359375p1019
; [HW: -1.4312592509262456186291956328204832971096038818359375p1019] 

; mpf : - 1942219001771519 1019
; mpfd: - 1942219001771519 1019 (-8.04052e+306) class: Neg. norm. non-zero
; hwf : - 1942219001771519 1019 (-8.04052e+306) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111010 #b0110111001100111000000011001101011010011010111111110)))
(assert (= y (fp #b1 #b10110111011 #b1000111001101011100011011100111000010001100010011000)))
(assert (= r (fp #b1 #b11111111010 #b0110111001100111000000011001101011010011010111111111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
