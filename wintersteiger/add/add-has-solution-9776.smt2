(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4982180802389406526486936854780651628971099853515625p-19 {+ 2243774760513337 -19 (2.85762e-006)}
; Y = -1.7101363847604795775936281643225811421871185302734375p-919 {- 3198169957789527 -919 (-3.85891e-277)}
; 1.4982180802389406526486936854780651628971099853515625p-19 + -1.7101363847604795775936281643225811421871185302734375p-919 == 1.4982180802389404306040887604467570781707763671875p-19
; [HW: 1.4982180802389404306040887604467570781707763671875p-19] 

; mpf : + 2243774760513336 -19
; mpfd: + 2243774760513336 -19 (2.85762e-006) class: Pos. norm. non-zero
; hwf : + 2243774760513336 -19 (2.85762e-006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101100 #b0111111110001011001110000101100011100110111100111001)))
(assert (= y (fp #b1 #b00001101000 #b1011010111001011011111111000010000111110111101010111)))
(assert (= r (fp #b0 #b01111101100 #b0111111110001011001110000101100011100110111100111000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
