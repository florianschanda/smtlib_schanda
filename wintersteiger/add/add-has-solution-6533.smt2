(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.78493525071371283985399713856168091297149658203125p-62 {+ 3535034102624244 -62 (3.87046e-019)}
; Y = -1.282057071304079531870456776232458651065826416015625p609 {- 1270272121222266 609 (-2.7238e+183)}
; 1.78493525071371283985399713856168091297149658203125p-62 + -1.282057071304079531870456776232458651065826416015625p609 == -1.282057071304079531870456776232458651065826416015625p609
; [HW: -1.282057071304079531870456776232458651065826416015625p609] 

; mpf : - 1270272121222266 609
; mpfd: - 1270272121222266 609 (-2.7238e+183) class: Neg. norm. non-zero
; hwf : - 1270272121222266 609 (-2.7238e+183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000001 #b1100100011110001100001000011111101001010111111110100)))
(assert (= y (fp #b1 #b11001100000 #b0100100000110100111001000110100011011011010001111010)))
(assert (= r (fp #b1 #b11001100000 #b0100100000110100111001000110100011011011010001111010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
