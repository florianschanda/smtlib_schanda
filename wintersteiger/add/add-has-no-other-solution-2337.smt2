(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.58678978844665774516897727153263986110687255859375p521 {+ 2642666272593180 521 (1.0893e+157)}
; Y = -1.7363550197775108330233706510625779628753662109375p403 {- 3316248192682392 403 (-3.58696e+121)}
; 1.58678978844665774516897727153263986110687255859375p521 + -1.7363550197775108330233706510625779628753662109375p403 == 1.5867897884466575231243723465013317763805389404296875p521
; [HW: 1.5867897884466575231243723465013317763805389404296875p521] 

; mpf : + 2642666272593179 521
; mpfd: + 2642666272593179 521 (1.0893e+157) class: Pos. norm. non-zero
; hwf : + 2642666272593179 521 (1.0893e+157) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001000 #b1001011000110111110110110000011100000001010100011100)))
(assert (= y (fp #b1 #b10110010010 #b1011110010000001110000110011100000110000100110011000)))
(assert (= r (fp #b0 #b11000001000 #b1001011000110111110110110000011100000001010100011011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
