(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5037518706885293351405152861843816936016082763671875p-271 {- 2268696737120051 -271 (-3.96321e-082)}
; Y = -1.8076854391368331054223972387262620031833648681640625p-358 {- 3637491842729217 -358 (-3.07882e-108)}
; -1.5037518706885293351405152861843816936016082763671875p-271 + -1.8076854391368331054223972387262620031833648681640625p-358 == -1.5037518706885293351405152861843816936016082763671875p-271
; [HW: -1.5037518706885293351405152861843816936016082763671875p-271] 

; mpf : - 2268696737120051 -271
; mpfd: - 2268696737120051 -271 (-3.96321e-082) class: Neg. norm. non-zero
; hwf : - 2268696737120051 -271 (-3.96321e-082) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011110000 #b1000000011110101111000011111000111100111111100110011)))
(assert (= y (fp #b1 #b01010011001 #b1100111011000100011110010001001010001100010100000001)))
(assert (= r (fp #b1 #b01011110000 #b1000000011110101111000011111000111100111111100110011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
