(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1654413681047657291856012307107448577880859375p-178 {+ 745081683748288 -178 (3.04194e-054)}
; Y = -1.5652386980260251103658220017678104341030120849609375p722 {- 2545608789805391 722 (-3.45332e+217)}
; 1.1654413681047657291856012307107448577880859375p-178 + -1.5652386980260251103658220017678104341030120849609375p722 == -1.5652386980260251103658220017678104341030120849609375p722
; [HW: -1.5652386980260251103658220017678104341030120849609375p722] 

; mpf : - 2545608789805391 722
; mpfd: - 2545608789805391 722 (-3.45332e+217) class: Neg. norm. non-zero
; hwf : - 2545608789805391 722 (-3.45332e+217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001101 #b0010101001011010010111011001000101101010010111000000)))
(assert (= y (fp #b1 #b11011010001 #b1001000010110011011110111011101001110100100101001111)))
(assert (= r (fp #b1 #b11011010001 #b1001000010110011011110111011101001110100100101001111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
