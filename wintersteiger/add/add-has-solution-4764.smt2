(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3346846635324407515099665033631026744842529296875p839 {+ 1507285725971320 839 (4.89266e+252)}
; Y = -1.2991565659647605901483302659471519291400909423828125p520 {- 1347281399004333 520 (-4.45922e+156)}
; 1.3346846635324407515099665033631026744842529296875p839 + -1.2991565659647605901483302659471519291400909423828125p520 == 1.3346846635324405294653615783317945897579193115234375p839
; [HW: 1.3346846635324405294653615783317945897579193115234375p839] 

; mpf : + 1507285725971319 839
; mpfd: + 1507285725971319 839 (4.89266e+252) class: Pos. norm. non-zero
; hwf : + 1507285725971319 839 (4.89266e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101000110 #b0101010110101101111001001110010001011000001101111000)))
(assert (= y (fp #b1 #b11000000111 #b0100110010010101100001100101001100110011110010101101)))
(assert (= r (fp #b0 #b11101000110 #b0101010110101101111001001110010001011000001101110111)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
