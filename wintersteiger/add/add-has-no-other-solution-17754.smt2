(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.30525027676782645613684508134610950946807861328125p226 {- 1374725032706324 226 (-1.40758e+068)}
; Y = 1.391628268325913797553994299960322678089141845703125p-426 {+ 1763736923300338 -426 (8.03055e-129)}
; -1.30525027676782645613684508134610950946807861328125p226 + 1.391628268325913797553994299960322678089141845703125p-426 == -1.3052502767678262340922401563148014247417449951171875p226
; [HW: -1.3052502767678262340922401563148014247417449951171875p226] 

; mpf : - 1374725032706323 226
; mpfd: - 1374725032706323 226 (-1.40758e+068) class: Neg. norm. non-zero
; hwf : - 1374725032706323 226 (-1.40758e+068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011100001 #b0100111000100100111000011101001111010000000100010100)))
(assert (= y (fp #b0 #b01001010101 #b0110010001000001110000000000110010100110000111110010)))
(assert (= r (fp #b1 #b10011100001 #b0100111000100100111000011101001111010000000100010011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
