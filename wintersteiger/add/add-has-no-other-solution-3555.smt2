(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.81117618877723796089185270830057561397552490234375p581 {+ 3653212781508988 581 (1.43347e+175)}
; Y = -1.8268373738854608578918714556493796408176422119140625p-532 {- 3723744488926561 -532 (-1.2994e-160)}
; 1.81117618877723796089185270830057561397552490234375p581 + -1.8268373738854608578918714556493796408176422119140625p-532 == 1.8111761887772377388472477832692675292491912841796875p581
; [HW: 1.8111761887772377388472477832692675292491912841796875p581] 

; mpf : + 3653212781508987 581
; mpfd: + 3653212781508987 581 (1.43347e+175) class: Pos. norm. non-zero
; hwf : + 3653212781508987 581 (1.43347e+175) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000100 #b1100111110101001001111100010001000010111100101111100)))
(assert (= y (fp #b1 #b00111101011 #b1101001110101011100111010011011111110010110101100001)))
(assert (= r (fp #b0 #b11001000100 #b1100111110101001001111100010001000010111100101111011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
