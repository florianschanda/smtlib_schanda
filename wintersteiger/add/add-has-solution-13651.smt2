(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2504593752656305571946404597838409245014190673828125p-505 {- 1127968749117741 -505 (-1.19377e-152)}
; Y = 1.015659233431773333933278991025872528553009033203125p-557 {+ 70522917848242 -557 (2.15298e-168)}
; -1.2504593752656305571946404597838409245014190673828125p-505 + 1.015659233431773333933278991025872528553009033203125p-557 == -1.25045937526563033515003553475253283977508544921875p-505
; [HW: -1.25045937526563033515003553475253283977508544921875p-505] 

; mpf : - 1127968749117740 -505
; mpfd: - 1127968749117740 -505 (-1.19377e-152) class: Neg. norm. non-zero
; hwf : - 1127968749117740 -505 (-1.19377e-152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000110 #b0100000000011110000110110000100110111110000100101101)))
(assert (= y (fp #b0 #b00111010010 #b0000010000000010001111100101011101111000010010110010)))
(assert (= r (fp #b1 #b01000000110 #b0100000000011110000110110000100110111110000100101100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
