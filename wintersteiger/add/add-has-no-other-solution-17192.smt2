(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2574667968319441779811995729687623679637908935546875p517 {+ 1159527370272619 517 (5.39516e+155)}
; Y = 1.309743852613991066391463391482830047607421875p-268 {+ 1394962299212672 -268 (2.76152e-081)}
; 1.2574667968319441779811995729687623679637908935546875p517 + 1.309743852613991066391463391482830047607421875p-268 == 1.2574667968319441779811995729687623679637908935546875p517
; [HW: 1.2574667968319441779811995729687623679637908935546875p517] 

; mpf : + 1159527370272619 517
; mpfd: + 1159527370272619 517 (5.39516e+155) class: Pos. norm. non-zero
; hwf : + 1159527370272619 517 (5.39516e+155) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000000100 #b0100000111101001010110000001000000110010111101101011)))
(assert (= y (fp #b0 #b01011110011 #b0100111101001011010111111000010100011101001110000000)))
(assert (= r (fp #b0 #b11000000100 #b0100000111101001010110000001000000110010111101101011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
