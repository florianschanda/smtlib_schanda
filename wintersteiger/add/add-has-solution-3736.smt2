(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9159386759545322664877176066511310636997222900390625p-231 {- 4125021079723057 -231 (-5.55204e-070)}
; Y = -1.0500302214423655744468533157487399876117706298828125p-731 {- 225316086645101 -731 (-9.29555e-221)}
; -1.9159386759545322664877176066511310636997222900390625p-231 + -1.0500302214423655744468533157487399876117706298828125p-731 == -1.9159386759545322664877176066511310636997222900390625p-231
; [HW: -1.9159386759545322664877176066511310636997222900390625p-231] 

; mpf : - 4125021079723057 -231
; mpfd: - 4125021079723057 -231 (-5.55204e-070) class: Neg. norm. non-zero
; hwf : - 4125021079723057 -231 (-5.55204e-070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100011000 #b1110101001111010111101010000001001011101110000110001)))
(assert (= y (fp #b1 #b00100100100 #b0000110011001110110001111101010011101000000101101101)))
(assert (= r (fp #b1 #b01100011000 #b1110101001111010111101010000001001011101110000110001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
