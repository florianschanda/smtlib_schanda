(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.29379548876828120995696735917590558528900146484375p973 {- 1323137253739964 973 (-1.03288e+293)}
; Y = 1.2597850533385719362655663644545711576938629150390625p-789 {+ 1169967869412017 -789 (3.86928e-238)}
; -1.29379548876828120995696735917590558528900146484375p973 + 1.2597850533385719362655663644545711576938629150390625p-789 == -1.29379548876828120995696735917590558528900146484375p973
; [HW: -1.29379548876828120995696735917590558528900146484375p973] 

; mpf : - 1323137253739964 973
; mpfd: - 1323137253739964 973 (-1.03288e+293) class: Neg. norm. non-zero
; hwf : - 1323137253739964 973 (-1.03288e+293) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001100 #b0100101100110110001011100101111111111000110110111100)))
(assert (= y (fp #b0 #b00011101010 #b0100001010000001010001011111010000010100001010110001)))
(assert (= r (fp #b1 #b11111001100 #b0100101100110110001011100101111111111000110110111100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
