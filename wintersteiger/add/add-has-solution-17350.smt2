(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8471851435051835910172712829080410301685333251953125p-502 {+ 3815382696603765 -502 (1.41076e-151)}
; Y = -1.2902162142276798473261578692472539842128753662109375p1010 {- 1307017634252655 1010 (-1.41566e+304)}
; 1.8471851435051835910172712829080410301685333251953125p-502 + -1.2902162142276798473261578692472539842128753662109375p1010 == -1.2902162142276798473261578692472539842128753662109375p1010
; [HW: -1.2902162142276798473261578692472539842128753662109375p1010] 

; mpf : - 1307017634252655 1010
; mpfd: - 1307017634252655 1010 (-1.41566e+304) class: Neg. norm. non-zero
; hwf : - 1307017634252655 1010 (-1.41566e+304) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001001 #b1101100011100001001000000010010100000011000001110101)))
(assert (= y (fp #b1 #b11111110001 #b0100101001001011100111000001110011100000011101101111)))
(assert (= r (fp #b1 #b11111110001 #b0100101001001011100111000001110011100000011101101111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
