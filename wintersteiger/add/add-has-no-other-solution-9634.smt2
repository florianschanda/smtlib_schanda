(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1110541871525307922041747588082216680049896240234375p191 {- 500143595878071 191 (-3.4871e+057)}
; Y = 1.62545415422762484780605518608354032039642333984375p734 {+ 2816795095916860 734 (1.4689e+221)}
; -1.1110541871525307922041747588082216680049896240234375p191 + 1.62545415422762484780605518608354032039642333984375p734 == 1.62545415422762484780605518608354032039642333984375p734
; [HW: 1.62545415422762484780605518608354032039642333984375p734] 

; mpf : + 2816795095916860 734
; mpfd: + 2816795095916860 734 (1.4689e+221) class: Pos. norm. non-zero
; hwf : + 2816795095916860 734 (1.4689e+221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010111110 #b0001110001101110000011000001010111100111011010110111)))
(assert (= y (fp #b0 #b11011011101 #b1010000000011101110000110111000110001110000100111100)))
(assert (= r (fp #b0 #b11011011101 #b1010000000011101110000110111000110001110000100111100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
