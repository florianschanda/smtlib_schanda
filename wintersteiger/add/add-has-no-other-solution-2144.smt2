(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.04958185087609034980005162651650607585906982421875p25 {- 223296805129900 25 (-3.52181e+007)}
; Y = -1.5162339478001201076295956227113492786884307861328125p-212 {- 2324911014948621 -212 (-2.3036e-064)}
; -1.04958185087609034980005162651650607585906982421875p25 + -1.5162339478001201076295956227113492786884307861328125p-212 == -1.04958185087609034980005162651650607585906982421875p25
; [HW: -1.04958185087609034980005162651650607585906982421875p25] 

; mpf : - 223296805129900 25
; mpfd: - 223296805129900 25 (-3.52181e+007) class: Neg. norm. non-zero
; hwf : - 223296805129900 25 (-3.52181e+007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000011000 #b0000110010110001011001010110101111111100111010101100)))
(assert (= y (fp #b1 #b01100101011 #b1000010000100111111010000111001011100010111100001101)))
(assert (= r (fp #b1 #b10000011000 #b0000110010110001011001010110101111111100111010101100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
