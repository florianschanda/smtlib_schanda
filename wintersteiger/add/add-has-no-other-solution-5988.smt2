(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5870955453294206538572552744881249964237213134765625p-647 {+ 2644043279176457 -647 (2.71766e-195)}
; Y = -1.397233077329893990992104590986855328083038330078125p-85 {- 1788978739042146 -85 (-3.61176e-026)}
; 1.5870955453294206538572552744881249964237213134765625p-647 + -1.397233077329893990992104590986855328083038330078125p-85 == -1.397233077329893990992104590986855328083038330078125p-85
; [HW: -1.397233077329893990992104590986855328083038330078125p-85] 

; mpf : - 1788978739042146 -85
; mpfd: - 1788978739042146 -85 (-3.61176e-026) class: Neg. norm. non-zero
; hwf : - 1788978739042146 -85 (-3.61176e-026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101111000 #b1001011001001011111001001100011011010001001100001001)))
(assert (= y (fp #b1 #b01110101010 #b0110010110110001000100010010010000000101011101100010)))
(assert (= r (fp #b1 #b01110101010 #b0110010110110001000100010010010000000101011101100010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
