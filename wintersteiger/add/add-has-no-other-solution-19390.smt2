(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3499494052619425144001752414624206721782684326171875p-584 {+ 1576032011136211 -584 (2.13206e-176)}
; Y = 1.215367779499724409930649926536716520786285400390625p-414 {+ 969930251502570 -414 (2.87269e-125)}
; 1.3499494052619425144001752414624206721782684326171875p-584 + 1.215367779499724409930649926536716520786285400390625p-414 == 1.215367779499724409930649926536716520786285400390625p-414
; [HW: 1.215367779499724409930649926536716520786285400390625p-414] 

; mpf : + 969930251502570 -414
; mpfd: + 969930251502570 -414 (2.87269e-125) class: Pos. norm. non-zero
; hwf : + 969930251502570 -414 (2.87269e-125) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110111 #b0101100110010110010010001100001011011010110011010011)))
(assert (= y (fp #b0 #b01001100001 #b0011011100100010010101111100000110010000001111101010)))
(assert (= r (fp #b0 #b01001100001 #b0011011100100010010101111100000110010000001111101010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
