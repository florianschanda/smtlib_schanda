(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6055459289511191389721034283866174519062042236328125p530 {- 2727136419979981 530 (-5.64313e+159)}
; Y = 1.754064905276629726671444586827419698238372802734375p-975 {+ 3396006426416998 -975 (5.49288e-294)}
; -1.6055459289511191389721034283866174519062042236328125p530 + 1.754064905276629726671444586827419698238372802734375p-975 == -1.6055459289511191389721034283866174519062042236328125p530
; [HW: -1.6055459289511191389721034283866174519062042236328125p530] 

; mpf : - 2727136419979981 530
; mpfd: - 2727136419979981 530 (-5.64313e+159) class: Neg. norm. non-zero
; hwf : - 2727136419979981 530 (-5.64313e+159) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010001 #b1001101100000101000011101101100100010010001011001101)))
(assert (= y (fp #b0 #b00000110000 #b1100000100001010011001011100101100111001011101100110)))
(assert (= r (fp #b1 #b11000010001 #b1001101100000101000011101101100100010010001011001101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
