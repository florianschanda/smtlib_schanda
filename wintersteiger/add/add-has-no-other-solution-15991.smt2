(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2132417075515606885716124452301301062107086181640625p157 {- 960355274669057 157 (-2.21644e+047)}
; Y = -1.94750038309806416947367324610240757465362548828125p554 {- 4267162372253844 554 (-1.14841e+167)}
; -1.2132417075515606885716124452301301062107086181640625p157 + -1.94750038309806416947367324610240757465362548828125p554 == -1.94750038309806416947367324610240757465362548828125p554
; [HW: -1.94750038309806416947367324610240757465362548828125p554] 

; mpf : - 4267162372253844 554
; mpfd: - 4267162372253844 554 (-1.14841e+167) class: Neg. norm. non-zero
; hwf : - 4267162372253844 554 (-1.14841e+167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010011100 #b0011011010010111000000100011000000010011110000000001)))
(assert (= y (fp #b1 #b11000101001 #b1111001010001111011000101001011001011010100010010100)))
(assert (= r (fp #b1 #b11000101001 #b1111001010001111011000101001011001011010100010010100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
