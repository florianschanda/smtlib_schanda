(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9400511612918369674929408574826084077358245849609375p341 {+ 4233614059703119 341 (8.69044e+102)}
; Y = -1.202643920942941146989824119373224675655364990234375p-834 {- 912627086847526 -834 (-1.04983e-251)}
; 1.9400511612918369674929408574826084077358245849609375p341 + -1.202643920942941146989824119373224675655364990234375p-834 == 1.9400511612918369674929408574826084077358245849609375p341
; [HW: 1.9400511612918369674929408574826084077358245849609375p341] 

; mpf : + 4233614059703119 341
; mpfd: + 4233614059703119 341 (8.69044e+102) class: Pos. norm. non-zero
; hwf : + 4233614059703119 341 (8.69044e+102) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101010100 #b1111000010100111001100010110001001010000101101001111)))
(assert (= y (fp #b1 #b00010111101 #b0011001111100000011110001101010100101110111000100110)))
(assert (= r (fp #b0 #b10101010100 #b1111000010100111001100010110001001010000101101001111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
