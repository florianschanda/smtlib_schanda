(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6543658079981329311891613542684353888034820556640625p986 {+ 2947001609064385 986 (1.08195e+297)}
; Y = 1.4776321752715928514732013354660011827945709228515625p-1003 {+ 2151064086573305 -1003 (1.72378e-302)}
; 1.6543658079981329311891613542684353888034820556640625p986 + 1.4776321752715928514732013354660011827945709228515625p-1003 == 1.6543658079981329311891613542684353888034820556640625p986
; [HW: 1.6543658079981329311891613542684353888034820556640625p986] 

; mpf : + 2947001609064385 986
; mpfd: + 2947001609064385 986 (1.08195e+297) class: Pos. norm. non-zero
; hwf : + 2947001609064385 986 (1.08195e+297) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111011001 #b1010011110000100100001001000000011111000111111000001)))
(assert (= y (fp #b0 #b00000010100 #b0111101001000110000110100010110001001111000011111001)))
(assert (= r (fp #b0 #b11111011001 #b1010011110000100100001001000000011111000111111000001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
