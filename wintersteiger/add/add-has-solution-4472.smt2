(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 0.403751597338401158054921324946917593479156494140625p-1022 {+ 1818335543323466 -1023 (8.98377e-309)}
; Y = -1.495492310860082607604226723196916282176971435546875p479 {- 2231498986554414 479 (-2.33428e+144)}
; 0.403751597338401158054921324946917593479156494140625p-1022 + -1.495492310860082607604226723196916282176971435546875p479 == -1.495492310860082607604226723196916282176971435546875p479
; [HW: -1.495492310860082607604226723196916282176971435546875p479] 

; mpf : - 2231498986554414 479
; mpfd: - 2231498986554414 479 (-2.33428e+144) class: Neg. norm. non-zero
; hwf : - 2231498986554414 479 (-2.33428e+144) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0110011101011100010000111100001001000110101101001010)))
(assert (= y (fp #b1 #b10111011110 #b0111111011011000100101011000011010010000010000101110)))
(assert (= r (fp #b1 #b10111011110 #b0111111011011000100101011000011010010000010000101110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
