(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4385325576398571012504135069320909678936004638671875p-399 {- 1974975063176691 -399 (-1.11417e-120)}
; Y = -1.6802772034692272651312805464840494096279144287109375p203 {- 3063696160052655 203 (-2.16008e+061)}
; -1.4385325576398571012504135069320909678936004638671875p-399 + -1.6802772034692272651312805464840494096279144287109375p203 == -1.6802772034692272651312805464840494096279144287109375p203
; [HW: -1.6802772034692272651312805464840494096279144287109375p203] 

; mpf : - 3063696160052655 203
; mpfd: - 3063696160052655 203 (-2.16008e+061) class: Neg. norm. non-zero
; hwf : - 3063696160052655 203 (-2.16008e+061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110000 #b0111000001000011101010110111000101001011010111110011)))
(assert (= y (fp #b1 #b10011001010 #b1010111000100110101001011001010100011101010110101111)))
(assert (= r (fp #b1 #b10011001010 #b1010111000100110101001011001010100011101010110101111)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
