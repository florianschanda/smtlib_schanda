(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7282016473277115320428265476948581635951995849609375p-97 {+ 3279528667555663 -97 (1.09065e-029)}
; Y = -1.4636366150467361446629865895374678075313568115234375p-205 {- 2088033686759799 -205 (-2.84632e-062)}
; 1.7282016473277115320428265476948581635951995849609375p-97 + -1.4636366150467361446629865895374678075313568115234375p-205 == 1.7282016473277115320428265476948581635951995849609375p-97
; [HW: 1.7282016473277115320428265476948581635951995849609375p-97] 

; mpf : + 3279528667555663 -97
; mpfd: + 3279528667555663 -97 (1.09065e-029) class: Pos. norm. non-zero
; hwf : + 3279528667555663 -97 (1.09065e-029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011110 #b1011101001101011011011000101010000101010011101001111)))
(assert (= y (fp #b1 #b01100110010 #b0111011010110000111000111010001011011010100101110111)))
(assert (= r (fp #b0 #b01110011110 #b1011101001101011011011000101010000101010011101001111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
