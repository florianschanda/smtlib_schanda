(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3329522166426459595101050581433810293674468994140625p-869 {- 1499483478804001 -869 (-3.38648e-262)}
; Y = 1.035910288068011109174904049723409116268157958984375p-1005 {+ 161725559961862 -1005 (3.02118e-303)}
; -1.3329522166426459595101050581433810293674468994140625p-869 + 1.035910288068011109174904049723409116268157958984375p-1005 == -1.33295221664264573746550013311207294464111328125p-869
; [HW: -1.33295221664264573746550013311207294464111328125p-869] 

; mpf : - 1499483478804000 -869
; mpfd: - 1499483478804000 -869 (-3.38648e-262) class: Neg. norm. non-zero
; hwf : - 1499483478804000 -869 (-3.38648e-262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011010 #b0101010100111100010110110100000110011100011000100001)))
(assert (= y (fp #b0 #b00000010010 #b0000100100110001011010101010100011010111100100000110)))
(assert (= r (fp #b1 #b00010011010 #b0101010100111100010110110100000110011100011000100000)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
