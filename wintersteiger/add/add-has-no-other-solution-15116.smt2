(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9104690500924192964049552756478078663349151611328125p-146 {+ 4100388074728589 -146 (2.14171e-044)}
; Y = 1.2430804649242552795129768128390423953533172607421875p-401 {+ 1094737091253923 -401 (2.40697e-121)}
; 1.9104690500924192964049552756478078663349151611328125p-146 + 1.2430804649242552795129768128390423953533172607421875p-401 == 1.9104690500924192964049552756478078663349151611328125p-146
; [HW: 1.9104690500924192964049552756478078663349151611328125p-146] 

; mpf : + 4100388074728589 -146
; mpfd: + 4100388074728589 -146 (2.14171e-044) class: Pos. norm. non-zero
; hwf : + 4100388074728589 -146 (2.14171e-044) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101101 #b1110100100010100011111111110101000101010110010001101)))
(assert (= y (fp #b0 #b01001101110 #b0011111000111010100001010111011100100101011010100011)))
(assert (= r (fp #b0 #b01101101101 #b1110100100010100011111111110101000101010110010001101)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
