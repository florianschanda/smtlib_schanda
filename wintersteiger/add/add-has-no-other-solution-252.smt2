(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0021869170705617335670467582531273365020751953125p-844 {- 9848998904072 -844 (-8.54343e-255)}
; Y = -1.3009992837927411013509981785318814218044281005859375p238 {- 1355580262327775 238 (-5.74667e+071)}
; -1.0021869170705617335670467582531273365020751953125p-844 + -1.3009992837927411013509981785318814218044281005859375p238 == -1.3009992837927411013509981785318814218044281005859375p238
; [HW: -1.3009992837927411013509981785318814218044281005859375p238] 

; mpf : - 1355580262327775 238
; mpfd: - 1355580262327775 238 (-5.74667e+071) class: Neg. norm. non-zero
; hwf : - 1355580262327775 238 (-5.74667e+071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110011 #b0000000010001111010100100110000101001100000100001000)))
(assert (= y (fp #b1 #b10011101101 #b0100110100001110010010100000000000000010010111011111)))
(assert (= r (fp #b1 #b10011101101 #b0100110100001110010010100000000000000010010111011111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
