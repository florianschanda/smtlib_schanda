(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.345647042653385749844119345652870833873748779296875p648 {- 1556655892495502 648 (-1.5717e+195)}
; Y = 1.9486182206841775599315269573708064854145050048828125p-101 {+ 4272196665190125 -101 (7.68594e-031)}
; -1.345647042653385749844119345652870833873748779296875p648 + 1.9486182206841775599315269573708064854145050048828125p-101 == -1.345647042653385749844119345652870833873748779296875p648
; [HW: -1.345647042653385749844119345652870833873748779296875p648] 

; mpf : - 1556655892495502 648
; mpfd: - 1556655892495502 648 (-1.5717e+195) class: Neg. norm. non-zero
; hwf : - 1556655892495502 648 (-1.5717e+195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000111 #b0101100001111100010100110001100000100111110010001110)))
(assert (= y (fp #b0 #b01110011010 #b1111001011011000101001001100101000111010011011101101)))
(assert (= r (fp #b1 #b11010000111 #b0101100001111100010100110001100000100111110010001110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
