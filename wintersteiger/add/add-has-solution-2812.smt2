(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.482712704359350208704881879384629428386688232421875p605 {- 2173944755479774 605 (-1.96881e+182)}
; Y = 1.4308974472397733013195875173551030457019805908203125p61 {+ 1940589582823941 61 (3.29942e+018)}
; -1.482712704359350208704881879384629428386688232421875p605 + 1.4308974472397733013195875173551030457019805908203125p61 == -1.4827127043593499866602769543533213436603546142578125p605
; [HW: -1.4827127043593499866602769543533213436603546142578125p605] 

; mpf : - 2173944755479773 605
; mpfd: - 2173944755479773 605 (-1.96881e+182) class: Neg. norm. non-zero
; hwf : - 2173944755479773 605 (-1.96881e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011100 #b0111101110010011000011110100111010010110010011011110)))
(assert (= y (fp #b0 #b10000111100 #b0110111001001111010010111000101111010011001000000101)))
(assert (= r (fp #b1 #b11001011100 #b0111101110010011000011110100111010010110010011011101)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
