(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6583247061970067814939966410747729241847991943359375p-504 {+ 2964830901517631 -504 (3.1663e-152)}
; Y = -1.738370977577268217117989479447714984416961669921875p-693 {- 3325327259478174 -693 (-4.23015e-209)}
; 1.6583247061970067814939966410747729241847991943359375p-504 + -1.738370977577268217117989479447714984416961669921875p-693 == 1.658324706197006559449391716043464839458465576171875p-504
; [HW: 1.658324706197006559449391716043464839458465576171875p-504] 

; mpf : + 2964830901517630 -504
; mpfd: + 2964830901517630 -504 (3.1663e-152) class: Pos. norm. non-zero
; hwf : + 2964830901517630 -504 (3.1663e-152) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000000111 #b1010100010000111111101111100101101000011110100111111)))
(assert (= y (fp #b1 #b00101001010 #b1011110100000101111000010110000100000010100010011110)))
(assert (= r (fp #b0 #b01000000111 #b1010100010000111111101111100101101000011110100111110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
