(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.858888392345357853940868153586052358150482177734375p756 {- 3868089443719398 756 (-7.0458e+227)}
; Y = 1.444669302151951217894065848668105900287628173828125p-135 {+ 2002612503474626 -135 (3.3168e-041)}
; -1.858888392345357853940868153586052358150482177734375p756 + 1.444669302151951217894065848668105900287628173828125p-135 == -1.858888392345357853940868153586052358150482177734375p756
; [HW: -1.858888392345357853940868153586052358150482177734375p756] 

; mpf : - 3868089443719398 756
; mpfd: - 3868089443719398 756 (-7.0458e+227) class: Neg. norm. non-zero
; hwf : - 3868089443719398 756 (-7.0458e+227) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110011 #b1101101111100000000111000001010000001001100011100110)))
(assert (= y (fp #b0 #b01101111000 #b0111000111010101110110001110111001000111000111000010)))
(assert (= r (fp #b1 #b11011110011 #b1101101111100000000111000001010000001001100011100110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
