(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1605831850878238764579464259441010653972625732421875p68 {+ 723202372523491 68 (3.42544e+020)}
; Y = -1.062934495505134524506729576387442648410797119140625p-796 {- 283431770505674 -796 (-2.55053e-240)}
; 1.1605831850878238764579464259441010653972625732421875p68 + -1.062934495505134524506729576387442648410797119140625p-796 == 1.160583185087823654413341500912792980670928955078125p68
; [HW: 1.160583185087823654413341500912792980670928955078125p68] 

; mpf : + 723202372523490 68
; mpfd: + 723202372523490 68 (3.42544e+020) class: Pos. norm. non-zero
; hwf : + 723202372523490 68 (3.42544e+020) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000011 #b0010100100011011111110101100100000111101010111100011)))
(assert (= y (fp #b1 #b00011100011 #b0001000000011100011110011001111111111100000111001010)))
(assert (= r (fp #b0 #b10001000011 #b0010100100011011111110101100100000111101010111100010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
