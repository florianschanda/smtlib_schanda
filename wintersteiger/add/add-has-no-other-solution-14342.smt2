(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7417500130153873438842992982245050370693206787109375p-277 {+ 3340545082218159 -277 (7.17261e-084)}
; Y = 1.7674930390631133914070005630492232739925384521484375p-526 {+ 3456481364734087 -526 (8.046e-159)}
; 1.7417500130153873438842992982245050370693206787109375p-277 + 1.7674930390631133914070005630492232739925384521484375p-526 == 1.7417500130153873438842992982245050370693206787109375p-277
; [HW: 1.7417500130153873438842992982245050370693206787109375p-277] 

; mpf : + 3340545082218159 -277
; mpfd: + 3340545082218159 -277 (7.17261e-084) class: Pos. norm. non-zero
; hwf : + 3340545082218159 -277 (7.17261e-084) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011101010 #b1011110111100011010101000010111110110101011010101111)))
(assert (= y (fp #b0 #b00111110001 #b1100010001111010011011000111111010101111000010000111)))
(assert (= r (fp #b0 #b01011101010 #b1011110111100011010101000010111110110101011010101111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
