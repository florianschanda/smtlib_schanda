(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9086903973111610799406889782403595745563507080078125p556 {- 4092377734725693 556 (-4.50208e+167)}
; Y = -1.684373621358351780230577787733636796474456787109375p712 {- 3082144786131670 712 (-3.62907e+214)}
; -1.9086903973111610799406889782403595745563507080078125p556 + -1.684373621358351780230577787733636796474456787109375p712 == -1.6843736213583520022751827127649448812007904052734375p712
; [HW: -1.6843736213583520022751827127649448812007904052734375p712] 

; mpf : - 3082144786131671 712
; mpfd: - 3082144786131671 712 (-3.62907e+214) class: Neg. norm. non-zero
; hwf : - 3082144786131671 712 (-3.62907e+214) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101011 #b1110100010011111111011110001001010100100000000111101)))
(assert (= y (fp #b1 #b11011000111 #b1010111100110011000111000001000111111010101011010110)))
(assert (= r (fp #b1 #b11011000111 #b1010111100110011000111000001000111111010101011010111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
