(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0295206284541309482705173650174401700496673583984375p446 {+ 132949091305767 446 (1.87074e+134)}
; Y = 1.3754369761946685368769749402417801320552825927734375p225 {+ 1690817826091415 225 (7.41634e+067)}
; 1.0295206284541309482705173650174401700496673583984375p446 + 1.3754369761946685368769749402417801320552825927734375p225 == 1.0295206284541309482705173650174401700496673583984375p446
; [HW: 1.0295206284541309482705173650174401700496673583984375p446] 

; mpf : + 132949091305767 446
; mpfd: + 132949091305767 446 (1.87074e+134) class: Pos. norm. non-zero
; hwf : + 132949091305767 446 (1.87074e+134) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111101 #b0000011110001110101010011111010111000100100100100111)))
(assert (= y (fp #b0 #b10011100000 #b0110000000011100101000110011111001110111000110010111)))
(assert (= r (fp #b0 #b10110111101 #b0000011110001110101010011111010111000100100100100111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
