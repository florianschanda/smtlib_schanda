(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5404106352667581436577393105835653841495513916015625p955 {- 2433793135614425 955 (-4.69118e+287)}
; Y = -1.763239357915977745250302177737466990947723388671875p-626 {- 3437324487904894 -626 (-6.3319e-189)}
; -1.5404106352667581436577393105835653841495513916015625p955 + -1.763239357915977745250302177737466990947723388671875p-626 == -1.540410635266758365702344235614873468875885009765625p955
; [HW: -1.540410635266758365702344235614873468875885009765625p955] 

; mpf : - 2433793135614426 955
; mpfd: - 2433793135614426 955 (-4.69118e+287) class: Neg. norm. non-zero
; hwf : - 2433793135614426 955 (-4.69118e+287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110111010 #b1000101001011000010110011111010011100001100111011001)))
(assert (= y (fp #b1 #b00110001101 #b1100001101100011101001111001000101000100111001111110)))
(assert (= r (fp #b1 #b11110111010 #b1000101001011000010110011111010011100001100111011010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
