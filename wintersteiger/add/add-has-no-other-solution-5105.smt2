(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.834145416723919286283717156038619577884674072265625p710 {- 3756656987930650 710 (-9.8794e+213)}
; Y = -1.3168676599666377935449190772487781941890716552734375p-160 {- 1427045075351511 -160 (-9.01037e-049)}
; -1.834145416723919286283717156038619577884674072265625p710 + -1.3168676599666377935449190772487781941890716552734375p-160 == -1.8341454167239195083283220810699276626110076904296875p710
; [HW: -1.8341454167239195083283220810699276626110076904296875p710] 

; mpf : - 3756656987930651 710
; mpfd: - 3756656987930651 710 (-9.8794e+213) class: Neg. norm. non-zero
; hwf : - 3756656987930651 710 (-9.8794e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011000101 #b1101010110001010100011011101010011110000000000011010)))
(assert (= y (fp #b1 #b01101011111 #b0101000100011110001111010010110010110111011111010111)))
(assert (= r (fp #b1 #b11011000101 #b1101010110001010100011011101010011110000000000011011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
