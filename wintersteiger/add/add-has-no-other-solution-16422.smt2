(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9971935006495111775137729637208394706249237060546875p602 {- 4490960277941419 602 (-3.31495e+181)}
; Y = 1.0921564441875923900937550570233725011348724365234375p359 {+ 415035727703031 359 (1.28249e+108)}
; -1.9971935006495111775137729637208394706249237060546875p602 + 1.0921564441875923900937550570233725011348724365234375p359 == -1.997193500649510955469168038689531385898590087890625p602
; [HW: -1.997193500649510955469168038689531385898590087890625p602] 

; mpf : - 4490960277941418 602
; mpfd: - 4490960277941418 602 (-3.31495e+181) class: Neg. norm. non-zero
; hwf : - 4490960277941418 602 (-3.31495e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011001 #b1111111101001000000100101100000100010010110010101011)))
(assert (= y (fp #b0 #b10101100110 #b0001011110010111100100001001000111100110101111110111)))
(assert (= r (fp #b1 #b11001011001 #b1111111101001000000100101100000100010010110010101010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
