(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.15175485884892392363099133945070207118988037109375p935 {+ 683443125763676 935 (3.34508e+281)}
; Y = -1.1874611757332285133514915287378244102001190185546875p-41 {- 844250081178603 -41 (-5.39995e-013)}
; 1.15175485884892392363099133945070207118988037109375p935 + -1.1874611757332285133514915287378244102001190185546875p-41 == 1.1517548588489237015863864144193939864635467529296875p935
; [HW: 1.1517548588489237015863864144193939864635467529296875p935] 

; mpf : + 683443125763675 935
; mpfd: + 683443125763675 935 (3.34508e+281) class: Pos. norm. non-zero
; hwf : + 683443125763675 935 (3.34508e+281) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100110 #b0010011011011001011010000000101111000011111001011100)))
(assert (= y (fp #b1 #b01111010110 #b0010111111111101011101001010001100001011001111101011)))
(assert (= r (fp #b0 #b11110100110 #b0010011011011001011010000000101111000011111001011011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
