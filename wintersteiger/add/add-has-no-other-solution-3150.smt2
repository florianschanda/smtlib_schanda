(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.55784500804558678765943113830871880054473876953125p-166 {- 2512310570364596 -166 (-1.6655e-050)}
; Y = -1.72240748335691318260387561167590320110321044921875p-979 {- 3253434072855852 -979 (-3.37109e-295)}
; -1.55784500804558678765943113830871880054473876953125p-166 + -1.72240748335691318260387561167590320110321044921875p-979 == -1.5578450080455870097040360633400268852710723876953125p-166
; [HW: -1.5578450080455870097040360633400268852710723876953125p-166] 

; mpf : - 2512310570364597 -166
; mpfd: - 2512310570364597 -166 (-1.6655e-050) class: Neg. norm. non-zero
; hwf : - 2512310570364597 -166 (-1.6655e-050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101011001 #b1000111011001110111011100011000111001010111010110100)))
(assert (= y (fp #b1 #b00000101100 #b1011100011101111101100100110001101100111010100101100)))
(assert (= r (fp #b1 #b01101011001 #b1000111011001110111011100011000111001010111010110101)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
