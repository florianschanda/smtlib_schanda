(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.18896847005858585788473646971397101879119873046875p217 {- 851038331340620 217 (-2.50426e+065)}
; Y = 1.7049566278878971470334136029123328626155853271484375p-516 {+ 3174842406668295 -516 (7.94759e-156)}
; -1.18896847005858585788473646971397101879119873046875p217 + 1.7049566278878971470334136029123328626155853271484375p-516 == -1.1889684700585856358401315446826629340648651123046875p217
; [HW: -1.1889684700585856358401315446826629340648651123046875p217] 

; mpf : - 851038331340619 217
; mpfd: - 851038331340619 217 (-2.50426e+065) class: Neg. norm. non-zero
; hwf : - 851038331340619 217 (-2.50426e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011000 #b0011000001100000001111001101011011100000011101001100)))
(assert (= y (fp #b0 #b00111111011 #b1011010001111000000010011001110111100000100000000111)))
(assert (= r (fp #b1 #b10011011000 #b0011000001100000001111001101011011100000011101001011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
