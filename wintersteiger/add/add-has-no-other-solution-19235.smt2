(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8746933228292050888086350823868997395038604736328125p-303 {- 3939268522757069 -303 (-1.15038e-091)}
; Y = -1.0146340779805023135651254051481373608112335205078125p180 {- 65906028139901 180 (-1.55492e+054)}
; -1.8746933228292050888086350823868997395038604736328125p-303 + -1.0146340779805023135651254051481373608112335205078125p180 == -1.0146340779805023135651254051481373608112335205078125p180
; [HW: -1.0146340779805023135651254051481373608112335205078125p180] 

; mpf : - 65906028139901 180
; mpfd: - 65906028139901 180 (-1.55492e+054) class: Neg. norm. non-zero
; hwf : - 65906028139901 180 (-1.55492e+054) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010000 #b1101111111101011111001101100111110010100101111001101)))
(assert (= y (fp #b1 #b10010110011 #b0000001110111111000011110001011001010101010101111101)))
(assert (= r (fp #b1 #b10010110011 #b0000001110111111000011110001011001010101010101111101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
