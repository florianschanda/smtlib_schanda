(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3441456083833565049445724071119911968708038330078125p-523 {- 1549894033676477 -523 (-4.89507e-158)}
; Y = -1.3715234773397078082979305690969340503215789794921875p277 {- 1673192994106499 277 (-3.33052e+083)}
; -1.3441456083833565049445724071119911968708038330078125p-523 + -1.3715234773397078082979305690969340503215789794921875p277 == -1.3715234773397078082979305690969340503215789794921875p277
; [HW: -1.3715234773397078082979305690969340503215789794921875p277] 

; mpf : - 1673192994106499 277
; mpfd: - 1673192994106499 277 (-3.33052e+083) class: Neg. norm. non-zero
; hwf : - 1673192994106499 277 (-3.33052e+083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110100 #b0101100000011001111011010011010100010001100010111101)))
(assert (= y (fp #b1 #b10100010100 #b0101111100011100001010011010000011011110110010000011)))
(assert (= r (fp #b1 #b10100010100 #b0101111100011100001010011010000011011110110010000011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
