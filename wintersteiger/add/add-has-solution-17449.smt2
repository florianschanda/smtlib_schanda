(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2233221552966779821502996128401719033718109130859375p593 {- 1005753575377695 593 (-3.96578e+178)}
; Y = 1.999998622948088833339852499193511903285980224609375p-85 {+ 4503593425680022 -85 (5.16988e-026)}
; -1.2233221552966779821502996128401719033718109130859375p593 + 1.999998622948088833339852499193511903285980224609375p-85 == -1.2233221552966779821502996128401719033718109130859375p593
; [HW: -1.2233221552966779821502996128401719033718109130859375p593] 

; mpf : - 1005753575377695 593
; mpfd: - 1005753575377695 593 (-3.96578e+178) class: Neg. norm. non-zero
; hwf : - 1005753575377695 593 (-3.96578e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010000 #b0011100100101011101001000000100101111000101100011111)))
(assert (= y (fp #b0 #b01110101010 #b1111111111111111111010001110010110011011011010010110)))
(assert (= r (fp #b1 #b11001010000 #b0011100100101011101001000000100101111000101100011111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
