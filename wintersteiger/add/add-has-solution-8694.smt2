(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.081395996758339084209410430048592388629913330078125p253 {+ 366574980670306 253 (1.56521e+076)}
; Y = 1.9093453626696252900529771068249829113483428955078125p-115 {+ 4095327436470013 -115 (4.59658e-035)}
; 1.081395996758339084209410430048592388629913330078125p253 + 1.9093453626696252900529771068249829113483428955078125p-115 == 1.0813959967583393062540153550799004733562469482421875p253
; [HW: 1.0813959967583393062540153550799004733562469482421875p253] 

; mpf : + 366574980670307 253
; mpfd: + 366574980670307 253 (1.56521e+076) class: Pos. norm. non-zero
; hwf : + 366574980670307 253 (1.56521e+076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011111100 #b0001010011010110010111100011100000011010001101100010)))
(assert (= y (fp #b0 #b01110001100 #b1110100011001010110110111001000101101111011011111101)))
(assert (= r (fp #b0 #b10011111100 #b0001010011010110010111100011100000011010001101100011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
