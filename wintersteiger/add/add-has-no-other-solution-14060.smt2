(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0658492951388012226487944644759409129619598388671875p241 {+ 296558861049715 241 (3.76639e+072)}
; Y = -1.8674581517905171068605341133661568164825439453125p-732 {- 3906684209163272 -732 (-8.26597e-221)}
; 1.0658492951388012226487944644759409129619598388671875p241 + -1.8674581517905171068605341133661568164825439453125p-732 == 1.065849295138801000604189539444632828235626220703125p241
; [HW: 1.065849295138801000604189539444632828235626220703125p241] 

; mpf : + 296558861049714 241
; mpfd: + 296558861049714 241 (3.76639e+072) class: Pos. norm. non-zero
; hwf : + 296558861049714 241 (3.76639e+072) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011110000 #b0001000011011011011111111101100100010101111101110011)))
(assert (= y (fp #b1 #b00100100011 #b1101111000010001101111001100100010010110110000001000)))
(assert (= r (fp #b0 #b10011110000 #b0001000011011011011111111101100100010101111101110010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
