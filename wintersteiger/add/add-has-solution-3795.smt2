(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.371800824115507300149374714237637817859649658203125p-549 {- 1674442052942642 -549 (-7.44429e-166)}
; Y = -1.982096575700118545881878162617795169353485107421875p873 {- 4422969772364894 873 (-1.24828e+263)}
; -1.371800824115507300149374714237637817859649658203125p-549 + -1.982096575700118545881878162617795169353485107421875p873 == -1.982096575700118545881878162617795169353485107421875p873
; [HW: -1.982096575700118545881878162617795169353485107421875p873] 

; mpf : - 4422969772364894 873
; mpfd: - 4422969772364894 873 (-1.24828e+263) class: Neg. norm. non-zero
; hwf : - 4422969772364894 873 (-1.24828e+263) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111011010 #b0101111100101110010101101011110000110011101100110010)))
(assert (= y (fp #b1 #b11101101000 #b1111101101101010101011100110001000100101010001011110)))
(assert (= r (fp #b1 #b11101101000 #b1111101101101010101011100110001000100101010001011110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
