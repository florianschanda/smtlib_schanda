(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.907451846240661108566882830928079783916473388671875p-123 {- 4086799796586110 -123 (-1.79376e-037)}
; Y = 1.6645798744772422050886007127701304852962493896484375p793 {+ 2993001675053639 793 (8.67144e+238)}
; -1.907451846240661108566882830928079783916473388671875p-123 + 1.6645798744772422050886007127701304852962493896484375p793 == 1.664579874477241983043995787738822400569915771484375p793
; [HW: 1.664579874477241983043995787738822400569915771484375p793] 

; mpf : + 2993001675053638 793
; mpfd: + 2993001675053638 793 (8.67144e+238) class: Pos. norm. non-zero
; hwf : + 2993001675053638 793 (8.67144e+238) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000100 #b1110100001001110110000111010001001001100011001111110)))
(assert (= y (fp #b0 #b11100011000 #b1010101000100001111010000001101001110101101001000111)))
(assert (= r (fp #b0 #b11100011000 #b1010101000100001111010000001101001110101101001000110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
