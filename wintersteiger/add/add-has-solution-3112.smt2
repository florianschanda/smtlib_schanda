(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.79834952516313162362848743214271962642669677734375p649 {- 3595446624036092 649 (-4.20089e+195)}
; Y = -1.69977531409235371739896436338312923908233642578125p-711 {- 3151507843789396 -711 (-1.57785e-214)}
; -1.79834952516313162362848743214271962642669677734375p649 + -1.69977531409235371739896436338312923908233642578125p-711 == -1.79834952516313162362848743214271962642669677734375p649
; [HW: -1.79834952516313162362848743214271962642669677734375p649] 

; mpf : - 3595446624036092 649
; mpfd: - 3595446624036092 649 (-4.20089e+195) class: Neg. norm. non-zero
; hwf : - 3595446624036092 649 (-4.20089e+195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001000 #b1100110001100000101000100110110101011010010011111100)))
(assert (= y (fp #b1 #b00100111000 #b1011001100100100011110011001100010010011001001010100)))
(assert (= r (fp #b1 #b11010001000 #b1100110001100000101000100110110101011010010011111100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
