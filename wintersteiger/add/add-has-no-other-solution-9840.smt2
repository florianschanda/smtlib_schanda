(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0524118002772813174061639074352569878101348876953125p-835 {+ 236041764198581 -835 (4.59345e-252)}
; Y = 1.0049136536701073207922263463842682540416717529296875p-204 {+ 22129128837723 -204 (3.9085e-062)}
; 1.0524118002772813174061639074352569878101348876953125p-835 + 1.0049136536701073207922263463842682540416717529296875p-204 == 1.0049136536701073207922263463842682540416717529296875p-204
; [HW: 1.0049136536701073207922263463842682540416717529296875p-204] 

; mpf : + 22129128837723 -204
; mpfd: + 22129128837723 -204 (3.9085e-062) class: Pos. norm. non-zero
; hwf : + 22129128837723 -204 (3.9085e-062) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010111100 #b0000110101101010110111000001100000011101100010110101)))
(assert (= y (fp #b0 #b01100110011 #b0000000101000010000001010110110111010001001001011011)))
(assert (= r (fp #b0 #b01100110011 #b0000000101000010000001010110110111010001001001011011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
