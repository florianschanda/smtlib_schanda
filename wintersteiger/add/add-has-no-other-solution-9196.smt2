(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2381838215260076996315774522372521460056304931640625p637 {- 1072684569870209 637 (-7.06143e+191)}
; Y = -1.8081152523679040466930700858938507735729217529296875p-332 {- 3639427549436507 -332 (-2.06665e-100)}
; -1.2381838215260076996315774522372521460056304931640625p637 + -1.8081152523679040466930700858938507735729217529296875p-332 == -1.238183821526007921676182377268560230731964111328125p637
; [HW: -1.238183821526007921676182377268560230731964111328125p637] 

; mpf : - 1072684569870210 637
; mpfd: - 1072684569870210 637 (-7.06143e+191) class: Neg. norm. non-zero
; hwf : - 1072684569870210 637 (-7.06143e+191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111100 #b0011110011111001100111010110101111100011111110000001)))
(assert (= y (fp #b1 #b01010110011 #b1100111011100000101001000010010001010001101001011011)))
(assert (= r (fp #b1 #b11001111100 #b0011110011111001100111010110101111100011111110000010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
