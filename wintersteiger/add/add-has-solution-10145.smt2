(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.927872488595057998139736810117028653621673583984375p720 {- 4178766193884038 720 (-1.06335e+217)}
; Y = 1.741915438968667739771944980020634829998016357421875p-146 {+ 3341290094479710 -146 (1.95275e-044)}
; -1.927872488595057998139736810117028653621673583984375p720 + 1.741915438968667739771944980020634829998016357421875p-146 == -1.9278724885950577760951318850857205688953399658203125p720
; [HW: -1.9278724885950577760951318850857205688953399658203125p720] 

; mpf : - 4178766193884037 720
; mpfd: - 4178766193884037 720 (-1.06335e+217) class: Neg. norm. non-zero
; hwf : - 4178766193884037 720 (-1.06335e+217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011001111 #b1110110110001001000011010010100101011111101110000110)))
(assert (= y (fp #b0 #b01101101101 #b1011110111101110001010111001001011000100100101011110)))
(assert (= r (fp #b1 #b11011001111 #b1110110110001001000011010010100101011111101110000101)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
