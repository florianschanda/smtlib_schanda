(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7866741762176177044096903046010993421077728271484375p211 {- 3542865526875655 211 (-5.87996e+063)}
; Y = 1.6229639807488036584715018761926330626010894775390625p583 {+ 2805580351565553 583 (5.13803e+175)}
; -1.7866741762176177044096903046010993421077728271484375p211 + 1.6229639807488036584715018761926330626010894775390625p583 == 1.6229639807488036584715018761926330626010894775390625p583
; [HW: 1.6229639807488036584715018761926330626010894775390625p583] 

; mpf : + 2805580351565553 583
; mpfd: + 2805580351565553 583 (5.13803e+175) class: Pos. norm. non-zero
; hwf : + 2805580351565553 583 (5.13803e+175) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011010010 #b1100100101100011011110101001001101110110011000000111)))
(assert (= y (fp #b0 #b11001000110 #b1001111101111010100100010100001111100110111011110001)))
(assert (= r (fp #b0 #b11001000110 #b1001111101111010100100010100001111100110111011110001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
