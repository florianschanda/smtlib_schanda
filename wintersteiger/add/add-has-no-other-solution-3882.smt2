(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.971343418726665408513554211822338402271270751953125p273 {+ 4374541858626194 273 (2.99193e+082)}
; Y = -1.729694670083777641167444016900844871997833251953125p-766 {- 3286252644283538 -766 (-4.45649e-231)}
; 1.971343418726665408513554211822338402271270751953125p273 + -1.729694670083777641167444016900844871997833251953125p-766 == 1.971343418726665408513554211822338402271270751953125p273
; [HW: 1.971343418726665408513554211822338402271270751953125p273] 

; mpf : + 4374541858626194 273
; mpfd: + 4374541858626194 273 (2.99193e+082) class: Pos. norm. non-zero
; hwf : + 4374541858626194 273 (2.99193e+082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010000 #b1111100010101001111101100101100010011101101010010010)))
(assert (= y (fp #b1 #b00100000001 #b1011101011001101010001010001100000010011010010010010)))
(assert (= r (fp #b0 #b10100010000 #b1111100010101001111101100101100010011101101010010010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
