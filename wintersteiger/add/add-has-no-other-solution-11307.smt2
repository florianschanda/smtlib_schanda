(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2366723822030951662753750497358851134777069091796875p-528 {+ 1065877652298747 -528 (1.4074e-159)}
; Y = -1.77831964760223382171488992753438651561737060546875p832 {- 3505240074916556 832 (-5.09291e+250)}
; 1.2366723822030951662753750497358851134777069091796875p-528 + -1.77831964760223382171488992753438651561737060546875p832 == -1.7783196476022335996702850025030784308910369873046875p832
; [HW: -1.7783196476022335996702850025030784308910369873046875p832] 

; mpf : - 3505240074916555 832
; mpfd: - 3505240074916555 832 (-5.09291e+250) class: Neg. norm. non-zero
; hwf : - 3505240074916555 832 (-5.09291e+250) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101111 #b0011110010010110100011111010110101101101101111111011)))
(assert (= y (fp #b1 #b11100111111 #b1100011100111111111101001101100001001001001011001100)))
(assert (= r (fp #b1 #b11100111111 #b1100011100111111111101001101100001001001001011001011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
