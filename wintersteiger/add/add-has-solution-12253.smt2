(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.59667574158267466799543399247340857982635498046875p270 {- 2687188647452748 270 (-3.02911e+081)}
; Y = -1.5716002542325722135529986189794726669788360595703125p-584 {- 2574258691966693 -584 (-2.48213e-176)}
; -1.59667574158267466799543399247340857982635498046875p270 + -1.5716002542325722135529986189794726669788360595703125p-584 == -1.59667574158267466799543399247340857982635498046875p270
; [HW: -1.59667574158267466799543399247340857982635498046875p270] 

; mpf : - 2687188647452748 270
; mpfd: - 2687188647452748 270 (-3.02911e+081) class: Neg. norm. non-zero
; hwf : - 2687188647452748 270 (-3.02911e+081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001101 #b1001100010111111101111011100110001101010000001001100)))
(assert (= y (fp #b1 #b00110110111 #b1001001001010100011001001110111001010000011011100101)))
(assert (= r (fp #b1 #b10100001101 #b1001100010111111101111011100110001101010000001001100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
