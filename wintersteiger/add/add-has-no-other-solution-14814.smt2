(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1056238062475982619758951841504313051700592041015625p-54 {+ 475687334458137 -54 (6.13745e-017)}
; Y = -1.77687380353126567200661156675778329372406005859375p202 {- 3498728572097308 202 (-1.14213e+061)}
; 1.1056238062475982619758951841504313051700592041015625p-54 + -1.77687380353126567200661156675778329372406005859375p202 == -1.77687380353126567200661156675778329372406005859375p202
; [HW: -1.77687380353126567200661156675778329372406005859375p202] 

; mpf : - 3498728572097308 202
; mpfd: - 3498728572097308 202 (-1.14213e+061) class: Neg. norm. non-zero
; hwf : - 3498728572097308 202 (-1.14213e+061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001001 #b0001101100001010001010010110100110000011001100011001)))
(assert (= y (fp #b1 #b10011001001 #b1100011011100001001100111001101101001001001100011100)))
(assert (= r (fp #b1 #b10011001001 #b1100011011100001001100111001101101001001001100011100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
