(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8084650505595483149789970411802642047405242919921875p338 {- 3641002900442051 338 (-1.01263e+102)}
; Y = -1.6627637649806583652889457880519330501556396484375p-294 {- 2984822645001560 -294 (-5.2241e-089)}
; -1.8084650505595483149789970411802642047405242919921875p338 + -1.6627637649806583652889457880519330501556396484375p-294 == -1.8084650505595483149789970411802642047405242919921875p338
; [HW: -1.8084650505595483149789970411802642047405242919921875p338] 

; mpf : - 3641002900442051 338
; mpfd: - 3641002900442051 338 (-1.01263e+102) class: Neg. norm. non-zero
; hwf : - 3641002900442051 338 (-1.01263e+102) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010001 #b1100111011110111100100001100100000011100101111000011)))
(assert (= y (fp #b1 #b01011011001 #b1010100110101010111000101101011110010000110101011000)))
(assert (= r (fp #b1 #b10101010001 #b1100111011110111100100001100100000011100101111000011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
