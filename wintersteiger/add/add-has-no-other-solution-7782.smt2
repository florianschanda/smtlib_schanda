(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.42460990429394041001387449796311557292938232421875p156 {- 1912273006756012 156 (-1.30129e+047)}
; Y = 1.1207005870957640336627036958816461265087127685546875p-824 {+ 543587119067883 -824 (1.00178e-248)}
; -1.42460990429394041001387449796311557292938232421875p156 + 1.1207005870957640336627036958816461265087127685546875p-824 == -1.4246099042939401879692695729318074882030487060546875p156
; [HW: -1.4246099042939401879692695729318074882030487060546875p156] 

; mpf : - 1912273006756011 156
; mpfd: - 1912273006756011 156 (-1.30129e+047) class: Neg. norm. non-zero
; hwf : - 1912273006756011 156 (-1.30129e+047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010011011 #b0110110010110011001111000001010010000000000010101100)))
(assert (= y (fp #b0 #b00011000111 #b0001111011100110001110111101001000101111001011101011)))
(assert (= r (fp #b1 #b10010011011 #b0110110010110011001111000001010010000000000010101011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
