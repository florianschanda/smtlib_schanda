(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0667000434799513985950625283294357359409332275390625p249 {- 300390290961905 249 (-9.64964e+074)}
; Y = -1.3277231643930214044502235992695204913616180419921875p643 {- 1475933921041091 643 (-4.84613e+193)}
; -1.0667000434799513985950625283294357359409332275390625p249 + -1.3277231643930214044502235992695204913616180419921875p643 == -1.3277231643930214044502235992695204913616180419921875p643
; [HW: -1.3277231643930214044502235992695204913616180419921875p643] 

; mpf : - 1475933921041091 643
; mpfd: - 1475933921041091 643 (-4.84613e+193) class: Neg. norm. non-zero
; hwf : - 1475933921041091 643 (-4.84613e+193) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111000 #b0001000100010011010000010000100101100011010111110001)))
(assert (= y (fp #b1 #b11010000010 #b0101001111100101101010100101000100110101101011000011)))
(assert (= r (fp #b1 #b11010000010 #b0101001111100101101010100101000100110101101011000011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
