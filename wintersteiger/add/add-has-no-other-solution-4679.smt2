(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.81418875888218078529234844609163701534271240234375p-1022 {+ 3666780191111036 -1023 (1.81163e-308)}
; Y = 1.6855068353227744548661348744644783437252044677734375p299 {+ 3087248328119575 299 (1.71672e+090)}
; 0.81418875888218078529234844609163701534271240234375p-1022 + 1.6855068353227744548661348744644783437252044677734375p299 == 1.6855068353227746769107397994957864284515380859375p299
; [HW: 1.6855068353227746769107397994957864284515380859375p299] 

; mpf : + 3087248328119576 299
; mpfd: + 3087248328119576 299 (1.71672e+090) class: Pos. norm. non-zero
; hwf : + 3087248328119576 299 (1.71672e+090) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1101000001101110101011001010110000101011011101111100)))
(assert (= y (fp #b0 #b10100101010 #b1010111101111101011000000011111011100101010100010111)))
(assert (= r (fp #b0 #b10100101010 #b1010111101111101011000000011111011100101010100011000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
