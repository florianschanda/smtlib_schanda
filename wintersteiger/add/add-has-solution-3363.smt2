(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.406307581470482404029098688624799251556396484375p1004 {+ 1829846672508272 1004 (2.41099e+302)}
; Y = 1.034630211043539471660324124968610703945159912109375p-200 {+ 155960605551446 -200 (6.43852e-061)}
; 1.406307581470482404029098688624799251556396484375p1004 + 1.034630211043539471660324124968610703945159912109375p-200 == 1.4063075814704826260737036136561073362827301025390625p1004
; [HW: 1.4063075814704826260737036136561073362827301025390625p1004] 

; mpf : + 1829846672508273 1004
; mpfd: + 1829846672508273 1004 (2.41099e+302) class: Pos. norm. non-zero
; hwf : + 1829846672508273 1004 (2.41099e+302) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111101011 #b0110100000000011110001100000111010001000010101110000)))
(assert (= y (fp #b0 #b01100110111 #b0000100011011101100001101000011111100010101101010110)))
(assert (= r (fp #b0 #b11111101011 #b0110100000000011110001100000111010001000010101110001)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
