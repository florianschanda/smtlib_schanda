(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6949847819188896824726953127537854015827178955078125p324 {- 3129933204878077 324 (-5.79274e+097)}
; Y = 1.088785858976785814178356304182671010494232177734375p-503 {+ 399855961403622 -503 (4.15771e-152)}
; -1.6949847819188896824726953127537854015827178955078125p324 + 1.088785858976785814178356304182671010494232177734375p-503 == -1.69498478191888946042809038772247731685638427734375p324
; [HW: -1.69498478191888946042809038772247731685638427734375p324] 

; mpf : - 3129933204878076 324
; mpfd: - 3129933204878076 324 (-5.79274e+097) class: Neg. norm. non-zero
; hwf : - 3129933204878076 324 (-5.79274e+097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000011 #b1011000111101010100001011100110110001111001011111101)))
(assert (= y (fp #b0 #b01000001000 #b0001011010111010101010111000100010100111000011100110)))
(assert (= r (fp #b1 #b10101000011 #b1011000111101010100001011100110110001111001011111100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
