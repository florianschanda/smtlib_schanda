(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4669845408054136282061108431662432849407196044921875p933 {- 2103111403959043 933 (-1.06515e+281)}
; Y = -1.71349161646702885519744086195714771747589111328125p-791 {- 3213280578052884 -791 (-1.3157e-238)}
; -1.4669845408054136282061108431662432849407196044921875p933 + -1.71349161646702885519744086195714771747589111328125p-791 == -1.4669845408054136282061108431662432849407196044921875p933
; [HW: -1.4669845408054136282061108431662432849407196044921875p933] 

; mpf : - 2103111403959043 933
; mpfd: - 2103111403959043 933 (-1.06515e+281) class: Neg. norm. non-zero
; hwf : - 2103111403959043 933 (-1.06515e+281) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110100100 #b0111011110001100010011001000001001111111001100000011)))
(assert (= y (fp #b1 #b00011101000 #b1011011010100111011000101111011010110010001100010100)))
(assert (= r (fp #b1 #b11110100100 #b0111011110001100010011001000001001111111001100000011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
