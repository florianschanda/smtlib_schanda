(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8808375985743028824259681641706265509128570556640625p-1021 {+ 3966939880713153 -1021 (8.37001e-308)}
; Y = -1.9011556435672181120111190466559492051601409912109375p-19 {- 4058444220572143 -19 (-3.62617e-006)}
; 1.8808375985743028824259681641706265509128570556640625p-1021 + -1.9011556435672181120111190466559492051601409912109375p-19 == -1.901155643567217889966514121624641120433807373046875p-19
; [HW: -1.901155643567217889966514121624641120433807373046875p-19] 

; mpf : - 4058444220572142 -19
; mpfd: - 4058444220572142 -19 (-3.62617e-006) class: Neg. norm. non-zero
; hwf : - 4058444220572142 -19 (-3.62617e-006) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000010 #b1110000101111110100100101010011011110110101111000001)))
(assert (= y (fp #b1 #b01111101100 #b1110011010110010001000101110000110111010000111101111)))
(assert (= r (fp #b1 #b01111101100 #b1110011010110010001000101110000110111010000111101110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
