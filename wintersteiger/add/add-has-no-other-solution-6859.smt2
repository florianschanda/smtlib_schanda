(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.552673318979575611820109770633280277252197265625p-715 {- 2489019353414032 -715 (-9.0081e-216)}
; Y = -1.9950341855220539155624237537267617881298065185546875p735 {- 4481235587138027 735 (-3.60576e+221)}
; -1.552673318979575611820109770633280277252197265625p-715 + -1.9950341855220539155624237537267617881298065185546875p735 == -1.99503418552205413760702867875806987285614013671875p735
; [HW: -1.99503418552205413760702867875806987285614013671875p735] 

; mpf : - 4481235587138028 735
; mpfd: - 4481235587138028 735 (-3.60576e+221) class: Neg. norm. non-zero
; hwf : - 4481235587138028 735 (-3.60576e+221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110100 #b1000110101111011111111111010011001100011100110010000)))
(assert (= y (fp #b1 #b11011011110 #b1111111010111010100011110111010100111000000111101011)))
(assert (= r (fp #b1 #b11011011110 #b1111111010111010100011110111010100111000000111101100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
