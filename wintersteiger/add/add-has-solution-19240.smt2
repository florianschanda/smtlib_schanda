(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.10145263028819062611773915705271065235137939453125p-950 {- 456902027961652 -950 (-1.15736e-286)}
; Y = -1.60463895886706442439617603668011724948883056640625p-155 {- 2723051789847396 -155 (-3.5134e-047)}
; -1.10145263028819062611773915705271065235137939453125p-950 + -1.60463895886706442439617603668011724948883056640625p-155 == -1.60463895886706442439617603668011724948883056640625p-155
; [HW: -1.60463895886706442439617603668011724948883056640625p-155] 

; mpf : - 2723051789847396 -155
; mpfd: - 2723051789847396 -155 (-3.5134e-047) class: Neg. norm. non-zero
; hwf : - 2723051789847396 -155 (-3.5134e-047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001001 #b0001100111111000110011001011000100101110010100110100)))
(assert (= y (fp #b1 #b01101100100 #b1001101011001001100111100110101000111000101101100100)))
(assert (= r (fp #b1 #b01101100100 #b1001101011001001100111100110101000111000101101100100)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
