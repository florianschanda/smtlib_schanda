(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0029247108091061679857602939591743052005767822265625p-313 {+ 13171726510057 -313 (6.01007e-095)}
; Y = -1.86620093985443968875870268675498664379119873046875p418 {- 3901022229956428 418 (-1.26327e+126)}
; 1.0029247108091061679857602939591743052005767822265625p-313 + -1.86620093985443968875870268675498664379119873046875p418 == -1.8662009398544394667140977617236785590648651123046875p418
; [HW: -1.8662009398544394667140977617236785590648651123046875p418] 

; mpf : - 3901022229956427 418
; mpfd: - 3901022229956427 418 (-1.26327e+126) class: Neg. norm. non-zero
; hwf : - 3901022229956427 418 (-1.26327e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000110 #b0000000010111111101011001000000101000110011111101001)))
(assert (= y (fp #b1 #b10110100001 #b1101110110111111010110000100010001110000011101001100)))
(assert (= r (fp #b1 #b10110100001 #b1101110110111111010110000100010001110000011101001011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
