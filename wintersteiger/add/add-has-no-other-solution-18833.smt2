(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.48444957841572655610207220888696610927581787109375p548 {- 2181766940832860 548 (-1.36774e+165)}
; Y = 1.5736618647890410205292255341191776096820831298828125p-512 {+ 2583543360500589 -512 (1.17369e-154)}
; -1.48444957841572655610207220888696610927581787109375p548 + 1.5736618647890410205292255341191776096820831298828125p-512 == -1.4844495784157263340574672838556580245494842529296875p548
; [HW: -1.4844495784157263340574672838556580245494842529296875p548] 

; mpf : - 2181766940832859 548
; mpfd: - 2181766940832859 548 (-1.36774e+165) class: Neg. norm. non-zero
; hwf : - 2181766940832859 548 (-1.36774e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100011 #b0111110000000100111000110011011111011011010001011100)))
(assert (= y (fp #b0 #b00111111111 #b1001001011011011100000010000010000111011001101101101)))
(assert (= r (fp #b1 #b11000100011 #b0111110000000100111000110011011111011011010001011011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
