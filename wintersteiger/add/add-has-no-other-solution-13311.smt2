(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.112178291526718876269796965061686933040618896484375p-778 {- 505206111918790 -778 (-6.99581e-235)}
; Y = 1.981925714617774669790151165216229856014251708984375p-258 {+ 4422200282458118 -258 (4.27906e-078)}
; -1.112178291526718876269796965061686933040618896484375p-778 + 1.981925714617774669790151165216229856014251708984375p-258 == 1.981925714617774669790151165216229856014251708984375p-258
; [HW: 1.981925714617774669790151165216229856014251708984375p-258] 

; mpf : + 4422200282458118 -258
; mpfd: + 4422200282458118 -258 (4.27906e-078) class: Pos. norm. non-zero
; hwf : + 4422200282458118 -258 (4.27906e-078) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011110101 #b0001110010110111101101110110110101101101101011000110)))
(assert (= y (fp #b0 #b01011111101 #b1111101101011111011110111100111101100010100000000110)))
(assert (= r (fp #b0 #b01011111101 #b1111101101011111011110111100111101100010100000000110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
