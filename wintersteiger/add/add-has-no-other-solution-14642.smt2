(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9830697863524073820684634483768604695796966552734375p669 {- 4427352723495895 669 (-4.85741e+201)}
; Y = -1.69463092753657118549881488434039056301116943359375p593 {- 3128339586413724 593 (-5.49367e+178)}
; -1.9830697863524073820684634483768604695796966552734375p669 + -1.69463092753657118549881488434039056301116943359375p593 == -1.9830697863524073820684634483768604695796966552734375p669
; [HW: -1.9830697863524073820684634483768604695796966552734375p669] 

; mpf : - 4427352723495895 669
; mpfd: - 4427352723495895 669 (-4.85741e+201) class: Neg. norm. non-zero
; hwf : - 4427352723495895 669 (-4.85741e+201) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011100 #b1111101110101010011101100010011000010001101111010111)))
(assert (= y (fp #b1 #b11001010000 #b1011000111010011010101010001110010001111010010011100)))
(assert (= r (fp #b1 #b11010011100 #b1111101110101010011101100010011000010001101111010111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
