(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7682862967730159642343323866953141987323760986328125p600 {- 3460053879860813 600 (-7.33753e+180)}
; Y = -1.1441763144882652891709540199371986091136932373046875p538 {- 649312396205003 538 (-1.02951e+162)}
; -1.7682862967730159642343323866953141987323760986328125p600 + -1.1441763144882652891709540199371986091136932373046875p538 == -1.768286296773016186278937311726622283458709716796875p600
; [HW: -1.768286296773016186278937311726622283458709716796875p600] 

; mpf : - 3460053879860814 600
; mpfd: - 3460053879860814 600 (-7.33753e+180) class: Neg. norm. non-zero
; hwf : - 3460053879860814 600 (-7.33753e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010111 #b1100010010101110011010010010011010011010111001001101)))
(assert (= y (fp #b1 #b11000011001 #b0010010011101000101111010010101110010101101111001011)))
(assert (= r (fp #b1 #b11001010111 #b1100010010101110011010010010011010011010111001001110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
