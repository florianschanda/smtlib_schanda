(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3600511724565464977132478452404029667377471923828125p547 {- 1621526326109613 547 (-6.2656e+164)}
; Y = -1.9200961395119120478369723059586249291896820068359375p-439 {- 4143744631050879 -439 (-1.35255e-132)}
; -1.3600511724565464977132478452404029667377471923828125p547 + -1.9200961395119120478369723059586249291896820068359375p-439 == -1.3600511724565464977132478452404029667377471923828125p547
; [HW: -1.3600511724565464977132478452404029667377471923828125p547] 

; mpf : - 1621526326109613 547
; mpfd: - 1621526326109613 547 (-6.2656e+164) class: Neg. norm. non-zero
; hwf : - 1621526326109613 547 (-6.2656e+164) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100010 #b0101110000101100010100000100101010010110010110101101)))
(assert (= y (fp #b1 #b01001001000 #b1110101110001011011010111010110001100001001001111111)))
(assert (= r (fp #b1 #b11000100010 #b0101110000101100010100000100101010010110010110101101)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
