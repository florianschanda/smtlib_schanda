(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.077549272460033957798941628425382077693939208984375p574 {- 349250874553862 574 (-6.66277e+172)}
; Y = 1.1892820092754832206338733158190734684467315673828125p-533 {+ 852450386441005 -533 (4.22958e-161)}
; -1.077549272460033957798941628425382077693939208984375p574 + 1.1892820092754832206338733158190734684467315673828125p-533 == -1.0775492724600337357543367033940739929676055908203125p574
; [HW: -1.0775492724600337357543367033940739929676055908203125p574] 

; mpf : - 349250874553861 574
; mpfd: - 349250874553861 574 (-6.66277e+172) class: Neg. norm. non-zero
; hwf : - 349250874553861 574 (-6.66277e+172) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111101 #b0001001111011010010001001110010100001011011000000110)))
(assert (= y (fp #b0 #b00111101010 #b0011000001110100110010010010011110001111001100101101)))
(assert (= r (fp #b1 #b11000111101 #b0001001111011010010001001110010100001011011000000101)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
