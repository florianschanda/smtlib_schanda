(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5757532413130572734871748252771794795989990234375p551 {- 2592962083034840 551 (-1.16149e+166)}
; Y = 1.6300937387759908414608389648492448031902313232421875p167 {+ 2837689927160035 167 (3.04945e+050)}
; -1.5757532413130572734871748252771794795989990234375p551 + 1.6300937387759908414608389648492448031902313232421875p167 == -1.5757532413130572734871748252771794795989990234375p551
; [HW: -1.5757532413130572734871748252771794795989990234375p551] 

; mpf : - 2592962083034840 551
; mpfd: - 2592962083034840 551 (-1.16149e+166) class: Neg. norm. non-zero
; hwf : - 2592962083034840 551 (-1.16149e+166) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100110 #b1001001101100100100100000111111000000001011011011000)))
(assert (= y (fp #b0 #b10010100110 #b1010000101001101110100101100000101110101000011100011)))
(assert (= r (fp #b1 #b11000100110 #b1001001101100100100100000111111000000001011011011000)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
