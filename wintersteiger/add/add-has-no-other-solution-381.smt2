(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.24836708835115217652855790220201015472412109375p789 {- 1118545926549344 789 (-4.06452e+237)}
; Y = -1.7817743727649923979328150380752049386501312255859375p403 {- 3520798773872223 403 (-3.68079e+121)}
; -1.24836708835115217652855790220201015472412109375p789 + -1.7817743727649923979328150380752049386501312255859375p403 == -1.24836708835115217652855790220201015472412109375p789
; [HW: -1.24836708835115217652855790220201015472412109375p789] 

; mpf : - 1118545926549344 789
; mpfd: - 1118545926549344 789 (-4.06452e+237) class: Neg. norm. non-zero
; hwf : - 1118545926549344 789 (-4.06452e+237) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100010100 #b0011111110010100111111000100100111011110111101100000)))
(assert (= y (fp #b1 #b10110010010 #b1100100000100010010111011000001111100000011001011111)))
(assert (= r (fp #b1 #b11100010100 #b0011111110010100111111000100100111011110111101100000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
