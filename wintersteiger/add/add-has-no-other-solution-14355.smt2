(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2719226174308821963876425797934643924236297607421875p95 {+ 1224630598535331 95 (5.0386e+028)}
; Y = -1.88684720853585208288905050721950829029083251953125p457 {- 3994004757896628 457 (-7.02174e+137)}
; 1.2719226174308821963876425797934643924236297607421875p95 + -1.88684720853585208288905050721950829029083251953125p457 == -1.8868472085358518608444455821882002055644989013671875p457
; [HW: -1.8868472085358518608444455821882002055644989013671875p457] 

; mpf : - 3994004757896627 457
; mpfd: - 3994004757896627 457 (-7.02174e+137) class: Neg. norm. non-zero
; hwf : - 3994004757896627 457 (-7.02174e+137) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001011110 #b0100010110011100101110000111110011101000100010100011)))
(assert (= y (fp #b1 #b10111001000 #b1110001100001000011010110010110100110101110110110100)))
(assert (= r (fp #b1 #b10111001000 #b1110001100001000011010110010110100110101110110110011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
