(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.86436675646226746039246791042387485504150390625p568 {+ 3892761802314912 568 (1.80123e+171)}
; Y = -1.651793206267842872847495527821592986583709716796875p539 {- 2935415640870478 539 (-2.97251e+162)}
; 1.86436675646226746039246791042387485504150390625p568 + -1.651793206267842872847495527821592986583709716796875p539 == 1.864366753385562791578422547900117933750152587890625p568
; [HW: 1.864366753385562791578422547900117933750152587890625p568] 

; mpf : + 3892761788458666 568
; mpfd: + 3892761788458666 568 (1.80123e+171) class: Pos. norm. non-zero
; hwf : + 3892761788458666 568 (1.80123e+171) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000110111 #b1101110101000111001000111100011011000001010010100000)))
(assert (= y (fp #b1 #b11000011010 #b1010011011011011111010110110100010101100111001001110)))
(assert (= r (fp #b0 #b11000110111 #b1101110101000111001000111011100110001010011010101010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
