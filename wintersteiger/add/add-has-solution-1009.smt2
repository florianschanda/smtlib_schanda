(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6077164538079948830073817589436657726764678955078125p-827 {- 2736911594916605 -827 (-1.7964e-249)}
; Y = 1.865473363192796885101643056259490549564361572265625p-140 {+ 3897745515974170 -140 (1.33841e-042)}
; -1.6077164538079948830073817589436657726764678955078125p-827 + 1.865473363192796885101643056259490549564361572265625p-140 == 1.865473363192796885101643056259490549564361572265625p-140
; [HW: 1.865473363192796885101643056259490549564361572265625p-140] 

; mpf : + 3897745515974170 -140
; mpfd: + 3897745515974170 -140 (1.33841e-042) class: Pos. norm. non-zero
; hwf : + 3897745515974170 -140 (1.33841e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000100 #b1001101110010011010011100011011001011000101011111101)))
(assert (= y (fp #b0 #b01101110011 #b1101110110001111101010011000111001111000111000011010)))
(assert (= r (fp #b0 #b01101110011 #b1101110110001111101010011000111001111000111000011010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
