(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.693154613266357078060764251858927309513092041015625p-817 {- 3121690858016506 -817 (-1.93727e-246)}
; Y = -1.647030433719649078483371340553276240825653076171875p21 {- 2913966020197182 21 (-3.45407e+006)}
; -1.693154613266357078060764251858927309513092041015625p-817 + -1.647030433719649078483371340553276240825653076171875p21 == -1.647030433719649078483371340553276240825653076171875p21
; [HW: -1.647030433719649078483371340553276240825653076171875p21] 

; mpf : - 2913966020197182 21
; mpfd: - 2913966020197182 21 (-3.45407e+006) class: Neg. norm. non-zero
; hwf : - 2913966020197182 21 (-3.45407e+006) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001110 #b1011000101110010100101001010101100001100111011111010)))
(assert (= y (fp #b1 #b10000010100 #b1010010110100011110010010101100001010111101100111110)))
(assert (= r (fp #b1 #b10000010100 #b1010010110100011110010010101100001010111101100111110)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
