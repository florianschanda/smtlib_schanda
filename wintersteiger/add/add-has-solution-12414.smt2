(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8737031067962293118256411617039702832698822021484375p-255 {- 3934808986199943 -255 (-3.23632e-077)}
; Y = 1.784067049989821018840530086890794336795806884765625p-303 {+ 3531124074167642 -303 (1.09477e-091)}
; -1.8737031067962293118256411617039702832698822021484375p-255 + 1.784067049989821018840530086890794336795806884765625p-303 == -1.873703106796222872532098335796035826206207275390625p-255
; [HW: -1.873703106796222872532098335796035826206207275390625p-255] 

; mpf : - 3934808986199914 -255
; mpfd: - 3934808986199914 -255 (-3.23632e-077) class: Neg. norm. non-zero
; hwf : - 3934808986199914 -255 (-3.23632e-077) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100000000 #b1101111110101011000000011011111000011010011110000111)))
(assert (= y (fp #b0 #b01011010000 #b1100100010111000100111100100000110010011110101011010)))
(assert (= r (fp #b1 #b01100000000 #b1101111110101011000000011011111000011010011101101010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
