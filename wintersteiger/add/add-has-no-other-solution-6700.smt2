(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0312029062122050060423816830734722316265106201171875p-528 {+ 140525396790163 -528 (1.17356e-159)}
; Y = 1.1208914563020144772309549807687290012836456298828125p1015 {+ 544446717554029 1015 (3.93558e+305)}
; 1.0312029062122050060423816830734722316265106201171875p-528 + 1.1208914563020144772309549807687290012836456298828125p1015 == 1.120891456302014699275559905800037086009979248046875p1015
; [HW: 1.120891456302014699275559905800037086009979248046875p1015] 

; mpf : + 544446717554030 1015
; mpfd: + 544446717554030 1015 (3.93558e+305) class: Pos. norm. non-zero
; hwf : + 544446717554030 1015 (3.93558e+305) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101111 #b0000011111111100111010011110010110111000101110010011)))
(assert (= y (fp #b0 #b11111110110 #b0001111011110010101111100001001100101110110101101101)))
(assert (= r (fp #b0 #b11111110110 #b0001111011110010101111100001001100101110110101101110)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
