(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6216479125532572425072430633008480072021484375p-373 {- 2799653307330496 -373 (-8.42885e-113)}
; Y = 1.198088342548370821560865806532092392444610595703125p900 {+ 892110585687282 900 (1.01271e+271)}
; -1.6216479125532572425072430633008480072021484375p-373 + 1.198088342548370821560865806532092392444610595703125p900 == 1.198088342548370821560865806532092392444610595703125p900
; [HW: 1.198088342548370821560865806532092392444610595703125p900] 

; mpf : + 892110585687282 900
; mpfd: + 892110585687282 900 (1.01271e+271) class: Pos. norm. non-zero
; hwf : + 892110585687282 900 (1.01271e+271) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010001010 #b1001111100100100010100010100111000001010111111000000)))
(assert (= y (fp #b0 #b11110000011 #b0011001010110101111010101110100011110110110011110010)))
(assert (= r (fp #b0 #b11110000011 #b0011001010110101111010101110100011110110110011110010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
