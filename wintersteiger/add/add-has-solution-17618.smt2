(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.65532169753346547480532535701058804988861083984375p-688 {- 2951306552819516 -688 (-1.28898e-207)}
; Y = -1.8325831293804650812262480030767619609832763671875p-887 {- 3749621071232824 -887 (-1.77606e-267)}
; -1.65532169753346547480532535701058804988861083984375p-688 + -1.8325831293804650812262480030767619609832763671875p-887 == -1.65532169753346547480532535701058804988861083984375p-688
; [HW: -1.65532169753346547480532535701058804988861083984375p-688] 

; mpf : - 2951306552819516 -688
; mpfd: - 2951306552819516 -688 (-1.28898e-207) class: Neg. norm. non-zero
; hwf : - 2951306552819516 -688 (-1.28898e-207) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001111 #b1010011111000011001010011010101101000011111100111100)))
(assert (= y (fp #b1 #b00010001000 #b1101010100100100001010101111111111100011111100111000)))
(assert (= r (fp #b1 #b00101001111 #b1010011111000011001010011010101101000011111100111100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
