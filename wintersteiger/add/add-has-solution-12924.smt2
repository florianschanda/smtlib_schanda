(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7613807775877046157830818629008717834949493408203125p906 {- 3428954186231045 906 (-9.52861e+272)}
; Y = 1.0280857498963682505888073137612082064151763916015625p696 {+ 126486972767705 696 (3.37992e+209)}
; -1.7613807775877046157830818629008717834949493408203125p906 + 1.0280857498963682505888073137612082064151763916015625p696 == -1.76138077758770439373847693786956369876861572265625p906
; [HW: -1.76138077758770439373847693786956369876861572265625p906] 

; mpf : - 3428954186231044 906
; mpfd: - 3428954186231044 906 (-9.52861e+272) class: Neg. norm. non-zero
; hwf : - 3428954186231044 906 (-9.52861e+272) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001001 #b1100001011101001110110011100001110001010110100000101)))
(assert (= y (fp #b0 #b11010110111 #b0000011100110000101000001011000101001001110111011001)))
(assert (= r (fp #b1 #b11110001001 #b1100001011101001110110011100001110001010110100000100)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
