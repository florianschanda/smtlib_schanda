(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4592023531751532328115672498825006186962127685546875p809 {- 2068063546647275 809 (-4.98175e+243)}
; Y = -1.807748903475636215176791665726341307163238525390625p-775 {- 3637777660701802 -775 (-9.09686e-234)}
; -1.4592023531751532328115672498825006186962127685546875p809 + -1.807748903475636215176791665726341307163238525390625p-775 == -1.4592023531751532328115672498825006186962127685546875p809
; [HW: -1.4592023531751532328115672498825006186962127685546875p809] 

; mpf : - 2068063546647275 809
; mpfd: - 2068063546647275 809 (-4.98175e+243) class: Neg. norm. non-zero
; hwf : - 2068063546647275 809 (-4.98175e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101000 #b0111010110001110010010010001000100100010001011101011)))
(assert (= y (fp #b1 #b00011111000 #b1100111011001000101000011101001111001110110001101010)))
(assert (= r (fp #b1 #b11100101000 #b0111010110001110010010010001000100100010001011101011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
