(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.272893495987780010381129613961093127727508544921875p-762 {- 1229003046842398 -762 (-5.24729e-230)}
; Y = 1.717400292662084826389445879613049328327178955078125p-727 {+ 3230883690708450 -727 (2.43257e-219)}
; -1.272893495987780010381129613961093127727508544921875p-762 + 1.717400292662084826389445879613049328327178955078125p-727 == 1.7174002926250386824591487311408855020999908447265625p-727
; [HW: 1.7174002926250386824591487311408855020999908447265625p-727] 

; mpf : + 3230883690541609 -727
; mpfd: + 3230883690541609 -727 (2.43257e-219) class: Pos. norm. non-zero
; hwf : + 3230883690541609 -727 (2.43257e-219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100000101 #b0100010111011100010110010010000010001111000000011110)))
(assert (= y (fp #b0 #b00100101000 #b1011011110100111100010111010101100011111110111100010)))
(assert (= r (fp #b0 #b00100101000 #b1011011110100111100010111010101011110111001000101001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
