(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3932061985517718571969680851907469332218170166015625p920 {- 1770843289277529 920 (-1.23484e+277)}
; Y = 1.1259584925409373834526149948942475020885467529296875p-143 {+ 567266620071515 -143 (1.00979e-043)}
; -1.3932061985517718571969680851907469332218170166015625p920 + 1.1259584925409373834526149948942475020885467529296875p-143 == -1.3932061985517716351523631601594388484954833984375p920
; [HW: -1.3932061985517716351523631601594388484954833984375p920] 

; mpf : - 1770843289277528 920
; mpfd: - 1770843289277528 920 (-1.23484e+277) class: Neg. norm. non-zero
; hwf : - 1770843289277528 920 (-1.23484e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110010111 #b0110010010101001001010010101001101011101010001011001)))
(assert (= y (fp #b0 #b01101110000 #b0010000000111110110100001101011000011101111001011011)))
(assert (= r (fp #b1 #b11110010111 #b0110010010101001001010010101001101011101010001011000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
