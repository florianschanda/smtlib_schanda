(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0857885327080640802677180545288138091564178466796875p-203 {+ 386357203936699 -203 (8.4461e-062)}
; Y = -1.192961904193149624830994071089662611484527587890625p126 {- 869023159820970 126 (-1.01486e+038)}
; 1.0857885327080640802677180545288138091564178466796875p-203 + -1.192961904193149624830994071089662611484527587890625p126 == -1.192961904193149624830994071089662611484527587890625p126
; [HW: -1.192961904193149624830994071089662611484527587890625p126] 

; mpf : - 869023159820970 126
; mpfd: - 869023159820970 126 (-1.01486e+038) class: Neg. norm. non-zero
; hwf : - 869023159820970 126 (-1.01486e+038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110100 #b0001010111110110001111001011111001011010010110111011)))
(assert (= y (fp #b1 #b10001111101 #b0011000101100101111100111000101111100010001010101010)))
(assert (= r (fp #b1 #b10001111101 #b0011000101100101111100111000101111100010001010101010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
