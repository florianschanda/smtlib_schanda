(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.84649783406621992298823897726833820343017578125p-903 {+ 3812287330070560 -903 (2.73063e-272)}
; Y = -1.5714400496937852569345750453067012131214141845703125p-24 {- 2573537194865509 -24 (-9.36651e-008)}
; 1.84649783406621992298823897726833820343017578125p-903 + -1.5714400496937852569345750453067012131214141845703125p-24 == -1.5714400496937852569345750453067012131214141845703125p-24
; [HW: -1.5714400496937852569345750453067012131214141845703125p-24] 

; mpf : - 2573537194865509 -24
; mpfd: - 2573537194865509 -24 (-9.36651e-008) class: Neg. norm. non-zero
; hwf : - 2573537194865509 -24 (-9.36651e-008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111000 #b1101100010110100000101010000000101110011000000100000)))
(assert (= y (fp #b1 #b01111100111 #b1001001001001001111001010010010100001111001101100101)))
(assert (= r (fp #b1 #b01111100111 #b1001001001001001111001010010010100001111001101100101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
