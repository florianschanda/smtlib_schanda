(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.26667483332002905882518462021835148334503173828125p-873 {- 1200996679969172 -873 (-2.01131e-263)}
; Y = 1.0232196204965873231884643246303312480449676513671875p865 {+ 104571874216115 865 (2.51718e+260)}
; -1.26667483332002905882518462021835148334503173828125p-873 + 1.0232196204965873231884643246303312480449676513671875p865 == 1.0232196204965873231884643246303312480449676513671875p865
; [HW: 1.0232196204965873231884643246303312480449676513671875p865] 

; mpf : + 104571874216115 865
; mpfd: + 104571874216115 865 (2.51718e+260) class: Pos. norm. non-zero
; hwf : + 104571874216115 865 (2.51718e+260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010010110 #b0100010001000100110011010100011111000110100110010100)))
(assert (= y (fp #b0 #b11101100000 #b0000010111110001101110001001011010101000100010110011)))
(assert (= r (fp #b0 #b11101100000 #b0000010111110001101110001001011010101000100010110011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
