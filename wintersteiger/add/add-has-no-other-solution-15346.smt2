(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8517708338834477643786158296279609203338623046875p313 {- 3836034810082552 313 (-3.09012e+094)}
; Y = -1.1476511320212543498797685970203019678592681884765625p-203 {- 664961583151753 -203 (-8.92731e-062)}
; -1.8517708338834477643786158296279609203338623046875p313 + -1.1476511320212543498797685970203019678592681884765625p-203 == -1.8517708338834477643786158296279609203338623046875p313
; [HW: -1.8517708338834477643786158296279609203338623046875p313] 

; mpf : - 3836034810082552 313
; mpfd: - 3836034810082552 313 (-3.09012e+094) class: Neg. norm. non-zero
; hwf : - 3836034810082552 313 (-3.09012e+094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100111000 #b1101101000001101101001110100001100110111010011111000)))
(assert (= y (fp #b1 #b01100110100 #b0010010111001100011101101110111100111111101010001001)))
(assert (= r (fp #b1 #b10100111000 #b1101101000001101101001110100001100110111010011111000)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
