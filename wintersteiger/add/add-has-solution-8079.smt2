(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.30077246756976183661436152760870754718780517578125p-686 {- 1354558772870484 -686 (-4.05158e-207)}
; Y = 1.8639943995433589929433537690783850848674774169921875p635 {+ 3891084855833667 635 (2.65761e+191)}
; -1.30077246756976183661436152760870754718780517578125p-686 + 1.8639943995433589929433537690783850848674774169921875p635 == 1.863994399543358770898748844047077000141143798828125p635
; [HW: 1.863994399543358770898748844047077000141143798828125p635] 

; mpf : + 3891084855833666 635
; mpfd: + 3891084855833666 635 (2.65761e+191) class: Pos. norm. non-zero
; hwf : + 3891084855833666 635 (2.65761e+191) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010001 #b0100110011111111011011001010011110111111110101010100)))
(assert (= y (fp #b0 #b11001111010 #b1101110100101110101111001010100111110111010001000011)))
(assert (= r (fp #b0 #b11001111010 #b1101110100101110101111001010100111110111010001000010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
