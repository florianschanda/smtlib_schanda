(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.32727390033354009091226544114761054515838623046875p-983 {- 1473910615590220 -983 (-1.62358e-296)}
; Y = -1.4088000630209471797371634238515980541706085205078125p-621 {- 1841071811490173 -621 (-1.61891e-187)}
; -1.32727390033354009091226544114761054515838623046875p-983 + -1.4088000630209471797371634238515980541706085205078125p-621 == -1.4088000630209471797371634238515980541706085205078125p-621
; [HW: -1.4088000630209471797371634238515980541706085205078125p-621] 

; mpf : - 1841071811490173 -621
; mpfd: - 1841071811490173 -621 (-1.61891e-187) class: Neg. norm. non-zero
; hwf : - 1841071811490173 -621 (-1.61891e-187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000101000 #b0101001111001000001110001110101011000100010101001100)))
(assert (= y (fp #b1 #b00110010010 #b0110100010100111000111101111010101000111000101111101)))
(assert (= r (fp #b1 #b00110010010 #b0110100010100111000111101111010101000111000101111101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
