(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.870464309125269952716053012409247457981109619140625p23 {+ 3920222738215882 23 (1.56906e+007)}
; Y = 1.651434788244628304454408862511627376079559326171875p688 {+ 2933801469594686 688 (2.12079e+207)}
; 1.870464309125269952716053012409247457981109619140625p23 + 1.651434788244628304454408862511627376079559326171875p688 == 1.651434788244628304454408862511627376079559326171875p688
; [HW: 1.651434788244628304454408862511627376079559326171875p688] 

; mpf : + 2933801469594686 688
; mpfd: + 2933801469594686 688 (2.12079e+207) class: Pos. norm. non-zero
; hwf : + 2933801469594686 688 (2.12079e+207) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000010110 #b1101111011010110101111111011110000000111001111001010)))
(assert (= y (fp #b0 #b11010101111 #b1010011011000100011011100010011011111100110000111110)))
(assert (= r (fp #b0 #b11010101111 #b1010011011000100011011100010011011111100110000111110)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
