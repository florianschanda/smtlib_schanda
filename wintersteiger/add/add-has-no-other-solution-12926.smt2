(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5284818530272634706790313430246897041797637939453125p-492 {+ 2380070676365653 -492 (1.19537e-148)}
; Y = -1.1545190558337694586299448928912170231342315673828125p-142 {- 695891962274605 -142 (-2.07082e-043)}
; 1.5284818530272634706790313430246897041797637939453125p-492 + -1.1545190558337694586299448928912170231342315673828125p-142 == -1.15451905583376923658533996785990893840789794921875p-142
; [HW: -1.15451905583376923658533996785990893840789794921875p-142] 

; mpf : - 695891962274604 -142
; mpfd: - 695891962274604 -142 (-2.07082e-043) class: Neg. norm. non-zero
; hwf : - 695891962274604 -142 (-2.07082e-043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000010011 #b1000011101001010100101100011001101001000000101010101)))
(assert (= y (fp #b1 #b01101110001 #b0010011110001110100011111001001101101010001100101101)))
(assert (= r (fp #b1 #b01101110001 #b0010011110001110100011111001001101101010001100101100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
