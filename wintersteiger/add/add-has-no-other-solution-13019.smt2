(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7458889147822398424381162840290926396846771240234375p-622 {+ 3359185038673079 -622 (1.00313e-187)}
; Y = -1.9058264174599022222622579647577367722988128662109375p-300 {- 4079479516134767 -300 (-9.35588e-091)}
; 1.7458889147822398424381162840290926396846771240234375p-622 + -1.9058264174599022222622579647577367722988128662109375p-300 == -1.9058264174599022222622579647577367722988128662109375p-300
; [HW: -1.9058264174599022222622579647577367722988128662109375p-300] 

; mpf : - 4079479516134767 -300
; mpfd: - 4079479516134767 -300 (-9.35588e-091) class: Neg. norm. non-zero
; hwf : - 4079479516134767 -300 (-9.35588e-091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010001 #b1011111011110010100100110110111101110000010010110111)))
(assert (= y (fp #b1 #b01011010011 #b1110011111100100001111010111011011010111110101101111)))
(assert (= r (fp #b1 #b01011010011 #b1110011111100100001111010111011011010111110101101111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
