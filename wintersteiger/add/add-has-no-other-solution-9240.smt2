(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5488774328750765096884833837975747883319854736328125p-292 {+ 2471924202168269 -292 (1.94652e-088)}
; Y = 1.2166357886863161663626442532404325902462005615234375p-929 {+ 975640857202807 -929 (2.68099e-280)}
; 1.5488774328750765096884833837975747883319854736328125p-292 + 1.2166357886863161663626442532404325902462005615234375p-929 == 1.5488774328750765096884833837975747883319854736328125p-292
; [HW: 1.5488774328750765096884833837975747883319854736328125p-292] 

; mpf : + 2471924202168269 -292
; mpfd: + 2471924202168269 -292 (1.94652e-088) class: Pos. norm. non-zero
; hwf : + 2471924202168269 -292 (1.94652e-088) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011011 #b1000110010000011001110110011111110110101111111001101)))
(assert (= y (fp #b0 #b00001011110 #b0011011101110101011100010110101110001101000001110111)))
(assert (= r (fp #b0 #b01011011011 #b1000110010000011001110110011111110110101111111001101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
