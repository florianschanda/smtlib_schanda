(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.471874887418507693581659623305313289165496826171875p-145 {+ 2125135567143486 -145 (3.30006e-044)}
; Y = -1.465858884407776674407841710490174591541290283203125p843 {- 2098041898226098 843 (-8.59763e+253)}
; 1.471874887418507693581659623305313289165496826171875p-145 + -1.465858884407776674407841710490174591541290283203125p843 == -1.4658588844077764523632367854588665068149566650390625p843
; [HW: -1.4658588844077764523632367854588665068149566650390625p843] 

; mpf : - 2098041898226097 843
; mpfd: - 2098041898226097 843 (-8.59763e+253) class: Neg. norm. non-zero
; hwf : - 2098041898226097 843 (-8.59763e+253) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101110 #b0111100011001100110010101110100101000100001000111110)))
(assert (= y (fp #b1 #b11101001010 #b0111011101000010100001110010000100010101000110110010)))
(assert (= r (fp #b1 #b11101001010 #b0111011101000010100001110010000100010101000110110001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
