(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0983690321422694413655563039355911314487457275390625p536 {- 443014736500721 536 (-2.47073e+161)}
; Y = -1.451234503898488181761194937280379235744476318359375p-282 {- 2032179543613942 -282 (-1.86758e-085)}
; -1.0983690321422694413655563039355911314487457275390625p536 + -1.451234503898488181761194937280379235744476318359375p-282 == -1.0983690321422694413655563039355911314487457275390625p536
; [HW: -1.0983690321422694413655563039355911314487457275390625p536] 

; mpf : - 443014736500721 536
; mpfd: - 443014736500721 536 (-2.47073e+161) class: Neg. norm. non-zero
; hwf : - 443014736500721 536 (-2.47073e+161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010111 #b0001100100101110101101100111111111111101011111110001)))
(assert (= y (fp #b1 #b01011100101 #b0111001110000100000110101011110100010010000111110110)))
(assert (= r (fp #b1 #b11000010111 #b0001100100101110101101100111111111111101011111110001)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
