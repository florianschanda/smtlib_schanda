(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.54698598332476766614718144410289824008941650390625p-433 {+ 2463405870678308 -433 (6.97426e-131)}
; Y = -1.0357756213934521394293142293463461101055145263671875p425 {- 161119075176499 425 (-8.97457e+127)}
; 1.54698598332476766614718144410289824008941650390625p-433 + -1.0357756213934521394293142293463461101055145263671875p425 == -1.035775621393451917384709304315038025379180908203125p425
; [HW: -1.035775621393451917384709304315038025379180908203125p425] 

; mpf : - 161119075176498 425
; mpfd: - 161119075176498 425 (-8.97457e+127) class: Neg. norm. non-zero
; hwf : - 161119075176498 425 (-8.97457e+127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001110 #b1000110000000111010001011111110111000000000100100100)))
(assert (= y (fp #b1 #b10110101000 #b0000100100101000100101110101001111100001000000110011)))
(assert (= r (fp #b1 #b10110101000 #b0000100100101000100101110101001111100001000000110010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
