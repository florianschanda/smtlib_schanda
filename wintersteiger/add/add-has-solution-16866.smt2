(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.917982770439376150051202785107307136058807373046875p-533 {+ 4134226862883310 -533 (6.82114e-161)}
; Y = -1.15672364309406550120229439926333725452423095703125p439 {- 705820540638580 439 (-1.64209e+132)}
; 1.917982770439376150051202785107307136058807373046875p-533 + -1.15672364309406550120229439926333725452423095703125p439 == -1.15672364309406550120229439926333725452423095703125p439
; [HW: -1.15672364309406550120229439926333725452423095703125p439] 

; mpf : - 705820540638580 439
; mpfd: - 705820540638580 439 (-1.64209e+132) class: Neg. norm. non-zero
; hwf : - 705820540638580 439 (-1.64209e+132) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101010 #b1110101100000000111010110011100101010100000111101110)))
(assert (= y (fp #b1 #b10110110110 #b0010100000011111000010100110100110011001010101110100)))
(assert (= r (fp #b1 #b10110110110 #b0010100000011111000010100110100110011001010101110100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
