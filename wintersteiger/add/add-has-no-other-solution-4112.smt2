(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.837738479933634483387550062616355717182159423828125p967 {+ 3772838706063042 967 (2.2924e+291)}
; Y = -1.7130625664187457690701421597623266279697418212890625p-41 {- 3211348308415313 -41 (-7.79011e-013)}
; 1.837738479933634483387550062616355717182159423828125p967 + -1.7130625664187457690701421597623266279697418212890625p-41 == 1.837738479933634483387550062616355717182159423828125p967
; [HW: 1.837738479933634483387550062616355717182159423828125p967] 

; mpf : + 3772838706063042 967
; mpfd: + 3772838706063042 967 (2.2924e+291) class: Pos. norm. non-zero
; hwf : + 3772838706063042 967 (2.2924e+291) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111000110 #b1101011001110110000001110110110111101010011011000010)))
(assert (= y (fp #b1 #b01111010110 #b1011011010001011010001001011001011000101001101010001)))
(assert (= r (fp #b0 #b11111000110 #b1101011001110110000001110110110111101010011011000010)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
