(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0994776537620982725940166346845217049121856689453125p-115 {+ 448007524414677 -115 (2.6469e-035)}
; Y = -1.701348169591537118350288437795825302600860595703125p-423 {- 3158591355229426 -423 (-7.85426e-128)}
; 1.0994776537620982725940166346845217049121856689453125p-115 + -1.701348169591537118350288437795825302600860595703125p-423 == 1.0994776537620982725940166346845217049121856689453125p-115
; [HW: 1.0994776537620982725940166346845217049121856689453125p-115] 

; mpf : + 448007524414677 -115
; mpfd: + 448007524414677 -115 (2.6469e-035) class: Pos. norm. non-zero
; hwf : + 448007524414677 -115 (2.6469e-035) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001100 #b0001100101110111010111100001010110010111010011010101)))
(assert (= y (fp #b1 #b01001011000 #b1011001110001011100011011011101110000001010011110010)))
(assert (= r (fp #b0 #b01110001100 #b0001100101110111010111100001010110010111010011010101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
