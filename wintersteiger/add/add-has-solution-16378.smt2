(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5511397334670593561867235621321015059947967529296875p-1006 {+ 2482112698271323 -1006 (2.26191e-303)}
; Y = 1.82698955702003384971021660021506249904632568359375p-870 {+ 3724429860834716 -870 (2.32081e-262)}
; 1.5511397334670593561867235621321015059947967529296875p-1006 + 1.82698955702003384971021660021506249904632568359375p-870 == 1.82698955702003384971021660021506249904632568359375p-870
; [HW: 1.82698955702003384971021660021506249904632568359375p-870] 

; mpf : + 3724429860834716 -870
; mpfd: + 3724429860834716 -870 (2.32081e-262) class: Pos. norm. non-zero
; hwf : + 3724429860834716 -870 (2.32081e-262) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010001 #b1000110100010111011111100101101011000100011001011011)))
(assert (= y (fp #b0 #b00010011001 #b1101001110110101100101100110110110001000110110011100)))
(assert (= r (fp #b0 #b00010011001 #b1101001110110101100101100110110110001000110110011100)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
