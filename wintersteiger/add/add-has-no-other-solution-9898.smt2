(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.67874777884922199433503919863142073154449462890625p1022 {- 3056808243903908 1022 (-7.54468e+307)}
; Y = 1.4973032431527470986765138150076381862163543701171875p-56 {+ 2239654700552851 -56 (2.07793e-017)}
; -1.67874777884922199433503919863142073154449462890625p1022 + 1.4973032431527470986765138150076381862163543701171875p-56 == -1.6787477788492217722904342736001126468181610107421875p1022
; [HW: -1.6787477788492217722904342736001126468181610107421875p1022] 

; mpf : - 3056808243903907 1022
; mpfd: - 3056808243903907 1022 (-7.54468e+307) class: Neg. norm. non-zero
; hwf : - 3056808243903907 1022 (-7.54468e+307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111101 #b1010110111000010011010100001100001100011110110100100)))
(assert (= y (fp #b0 #b01111000111 #b0111111101001111010000111110110110001001001010010011)))
(assert (= r (fp #b1 #b11111111101 #b1010110111000010011010100001100001100011110110100011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
