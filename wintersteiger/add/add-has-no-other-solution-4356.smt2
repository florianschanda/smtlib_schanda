(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7964114667454811336000375376897864043712615966796875p810 {- 3586718384868539 810 (-1.2266e+244)}
; Y = -1.70304831773070741718356657656840980052947998046875p381 {- 3166248141755468 381 (-8.38794e+114)}
; -1.7964114667454811336000375376897864043712615966796875p810 + -1.70304831773070741718356657656840980052947998046875p381 == -1.7964114667454811336000375376897864043712615966796875p810
; [HW: -1.7964114667454811336000375376897864043712615966796875p810] 

; mpf : - 3586718384868539 810
; mpfd: - 3586718384868539 810 (-1.2266e+244) class: Neg. norm. non-zero
; hwf : - 3586718384868539 810 (-1.2266e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101001 #b1100101111100001100111110011001111010100110010111011)))
(assert (= y (fp #b1 #b10101111100 #b1011001111111010111110010111110000101001010001001100)))
(assert (= r (fp #b1 #b11100101001 #b1100101111100001100111110011001111010100110010111011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
