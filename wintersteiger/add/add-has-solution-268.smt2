(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.707453228928847099865606651292182505130767822265625p-896 {+ 3186086098186010 -896 (3.23201e-270)}
; Y = -1.178272417536414540251143989735282957553863525390625p123 {- 802867593187434 123 (-1.25295e+037)}
; 1.707453228928847099865606651292182505130767822265625p-896 + -1.178272417536414540251143989735282957553863525390625p123 == -1.178272417536414540251143989735282957553863525390625p123
; [HW: -1.178272417536414540251143989735282957553863525390625p123] 

; mpf : - 802867593187434 123
; mpfd: - 802867593187434 123 (-1.25295e+037) class: Neg. norm. non-zero
; hwf : - 802867593187434 123 (-1.25295e+037) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111111 #b1011010100011011101001111010000110110010111100011010)))
(assert (= y (fp #b1 #b10001111010 #b0010110110100011010000101101101100011001000001101010)))
(assert (= r (fp #b1 #b10001111010 #b0010110110100011010000101101101100011001000001101010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
