(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3130753976873152932824950767098926007747650146484375p-606 {- 1409966244363463 -606 (-4.94439e-183)}
; Y = 0.7281051427039895163062510619056411087512969970703125p-1022 {+ 3279094049368229 -1023 (1.62009e-308)}
; -1.3130753976873152932824950767098926007747650146484375p-606 + 0.7281051427039895163062510619056411087512969970703125p-1022 == -1.313075397687315071237890151678584516048431396484375p-606
; [HW: -1.313075397687315071237890151678584516048431396484375p-606] 

; mpf : - 1409966244363462 -606
; mpfd: - 1409966244363462 -606 (-4.94439e-183) class: Neg. norm. non-zero
; hwf : - 1409966244363462 -606 (-4.94439e-183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100001 #b0101000000100101101101011001001000111111110011000111)))
(assert (= y (fp #b0 #b00000000000 #b1011101001100101000110010011111111110110100010100101)))
(assert (= r (fp #b1 #b00110100001 #b0101000000100101101101011001001000111111110011000110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
