(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9561901352936394982151568910921923816204071044921875p462 {+ 4306297537003779 462 (2.32953e+139)}
; Y = 1.9332221924037071847379820610512979328632354736328125p504 {+ 4202859117963213 504 (1.01251e+152)}
; 1.9561901352936394982151568910921923816204071044921875p462 + 1.9332221924037071847379820610512979328632354736328125p504 == 1.9332221924041521621262518237926997244358062744140625p504
; [HW: 1.9332221924041521621262518237926997244358062744140625p504] 

; mpf : + 4202859117965217 504
; mpfd: + 4202859117965217 504 (1.01251e+152) class: Pos. norm. non-zero
; hwf : + 4202859117965217 504 (1.01251e+152) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111001101 #b1111010011001000111000000110111111011000000100000011)))
(assert (= y (fp #b0 #b10111110111 #b1110111011100111101001100100110001000110011111001101)))
(assert (= r (fp #b0 #b10111110111 #b1110111011100111101001100100110001000110111110100001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
