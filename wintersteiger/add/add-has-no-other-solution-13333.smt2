(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.79197479960380423591459475574083626270294189453125p-579 {+ 3566737412382516 -579 (9.05658e-175)}
; Y = -1.6333047888587410856331416653119958937168121337890625p494 {- 2852151211116177 494 (-8.35382e+148)}
; 1.79197479960380423591459475574083626270294189453125p-579 + -1.6333047888587410856331416653119958937168121337890625p494 == -1.6333047888587410856331416653119958937168121337890625p494
; [HW: -1.6333047888587410856331416653119958937168121337890625p494] 

; mpf : - 2852151211116177 494
; mpfd: - 2852151211116177 494 (-8.35382e+148) class: Neg. norm. non-zero
; hwf : - 2852151211116177 494 (-8.35382e+148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111100 #b1100101010111110110111000100011110001101111100110100)))
(assert (= y (fp #b1 #b10111101101 #b1010001000100000010000110011110010001100011010010001)))
(assert (= r (fp #b1 #b10111101101 #b1010001000100000010000110011110010001100011010010001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
