(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7956545577880465014430910741793923079967498779296875p674 {- 3583309569969883 674 (-1.40747e+203)}
; Y = -1.452216385101880558039511015522293746471405029296875p-216 {- 2036601543435662 -216 (-1.37896e-065)}
; -1.7956545577880465014430910741793923079967498779296875p674 + -1.452216385101880558039511015522293746471405029296875p-216 == -1.7956545577880465014430910741793923079967498779296875p674
; [HW: -1.7956545577880465014430910741793923079967498779296875p674] 

; mpf : - 3583309569969883 674
; mpfd: - 3583309569969883 674 (-1.40747e+203) class: Neg. norm. non-zero
; hwf : - 3583309569969883 674 (-1.40747e+203) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010100001 #b1100101110110000000001000110000010011100111011011011)))
(assert (= y (fp #b1 #b01100100111 #b0111001111000100011100111111100010111010010110001110)))
(assert (= r (fp #b1 #b11010100001 #b1100101110110000000001000110000010011100111011011011)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
