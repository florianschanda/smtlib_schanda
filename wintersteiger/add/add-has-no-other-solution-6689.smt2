(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.42777263955634925451931849238462746143341064453125p682 {- 1926516700105268 682 (-2.86494e+205)}
; Y = -1.730402792533855205192594439722597599029541015625p-68 {- 3289441744285840 -68 (-5.86283e-021)}
; -1.42777263955634925451931849238462746143341064453125p682 + -1.730402792533855205192594439722597599029541015625p-68 == -1.42777263955634925451931849238462746143341064453125p682
; [HW: -1.42777263955634925451931849238462746143341064453125p682] 

; mpf : - 1926516700105268 682
; mpfd: - 1926516700105268 682 (-2.86494e+205) class: Neg. norm. non-zero
; hwf : - 1926516700105268 682 (-2.86494e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010101001 #b0110110110000010100000011111100100000100101000110100)))
(assert (= y (fp #b1 #b01110111011 #b1011101011111011101011010110101011010111000010010000)))
(assert (= r (fp #b1 #b11010101001 #b0110110110000010100000011111100100000100101000110100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
