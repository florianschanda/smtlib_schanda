(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.80561193057963720320913125760853290557861328125p-178 {- 3628153590363680 -178 (-4.71287e-054)}
; Y = 1.6512288190114163821675674626021645963191986083984375p668 {+ 2932873866632743 668 (2.02229e+201)}
; -1.80561193057963720320913125760853290557861328125p-178 + 1.6512288190114163821675674626021645963191986083984375p668 == 1.6512288190114163821675674626021645963191986083984375p668
; [HW: 1.6512288190114163821675674626021645963191986083984375p668] 

; mpf : + 2932873866632743 668
; mpfd: + 2932873866632743 668 (2.02229e+201) class: Pos. norm. non-zero
; hwf : + 2932873866632743 668 (2.02229e+201) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001101 #b1100111000111100100101010101111100011011011000100000)))
(assert (= y (fp #b0 #b11010011011 #b1010011010110110111011101000111111011101111000100111)))
(assert (= r (fp #b0 #b11010011011 #b1010011010110110111011101000111111011101111000100111)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
