(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.509192754004369252385231447988189756870269775390625p-527 {+ 2293200297193834 -527 (3.43508e-159)}
; Y = -1.3148377023043271716318258768296800553798675537109375p766 {- 1417902958779951 766 (-5.10327e+230)}
; 1.509192754004369252385231447988189756870269775390625p-527 + -1.3148377023043271716318258768296800553798675537109375p766 == -1.314837702304326949587220951798371970653533935546875p766
; [HW: -1.314837702304326949587220951798371970653533935546875p766] 

; mpf : - 1417902958779950 766
; mpfd: - 1417902958779950 766 (-5.10327e+230) class: Neg. norm. non-zero
; hwf : - 1417902958779950 766 (-5.10327e+230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110000 #b1000001001011010011101001101000111001111000101101010)))
(assert (= y (fp #b1 #b11011111101 #b0101000010011001001101000010001011110001111000101111)))
(assert (= r (fp #b1 #b11011111101 #b0101000010011001001101000010001011110001111000101110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
