(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.318055958098922619825543733895756304264068603515625p1004 {- 1432396694377274 1004 (-2.25969e+302)}
; Y = -1.226206541810533234837521376903168857097625732421875p583 {- 1018743697406686 583 (-3.88196e+175)}
; -1.318055958098922619825543733895756304264068603515625p1004 + -1.226206541810533234837521376903168857097625732421875p583 == -1.318055958098922619825543733895756304264068603515625p1004
; [HW: -1.318055958098922619825543733895756304264068603515625p1004] 

; mpf : - 1432396694377274 1004
; mpfd: - 1432396694377274 1004 (-2.25969e+302) class: Neg. norm. non-zero
; hwf : - 1432396694377274 1004 (-2.25969e+302) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101011 #b0101000101101100000111011000001001010101001100111010)))
(assert (= y (fp #b1 #b11001000110 #b0011100111101000101011000000001100110111101011011110)))
(assert (= r (fp #b1 #b11111101011 #b0101000101101100000111011000001001010101001100111010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
