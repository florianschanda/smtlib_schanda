(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2955248032311492689672149936086498200893402099609375p-1014 {+ 1330925393710543 -1014 (7.37955e-306)}
; Y = 1.58298998784332045630662832991220057010650634765625p-733 {+ 2625553492011908 -733 (3.50341e-221)}
; 1.2955248032311492689672149936086498200893402099609375p-1014 + 1.58298998784332045630662832991220057010650634765625p-733 == 1.58298998784332045630662832991220057010650634765625p-733
; [HW: 1.58298998784332045630662832991220057010650634765625p-733] 

; mpf : + 2625553492011908 -733
; mpfd: + 2625553492011908 -733 (3.50341e-221) class: Pos. norm. non-zero
; hwf : + 2625553492011908 -733 (3.50341e-221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000001001 #b0100101110100111100000110111010100001000110111001111)))
(assert (= y (fp #b0 #b00100100010 #b1001010100111110110101001111001110101110101110000100)))
(assert (= r (fp #b0 #b00100100010 #b1001010100111110110101001111001110101110101110000100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
