(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1709804788628248584103630491881631314754486083984375p-43 {+ 770027620894247 -43 (1.33125e-013)}
; Y = -1.6165358151441420186955610915902070701122283935546875p329 {- 2776630467343723 329 (-1.76788e+099)}
; 1.1709804788628248584103630491881631314754486083984375p-43 + -1.6165358151441420186955610915902070701122283935546875p329 == -1.616535815144141796650956166558898985385894775390625p329
; [HW: -1.616535815144141796650956166558898985385894775390625p329] 

; mpf : - 2776630467343722 329
; mpfd: - 2776630467343722 329 (-1.76788e+099) class: Neg. norm. non-zero
; hwf : - 2776630467343722 329 (-1.76788e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010100 #b0010101111000101011000000110110011111000011000100111)))
(assert (= y (fp #b1 #b10101001000 #b1001110111010101010010101000101011011011010101101011)))
(assert (= r (fp #b1 #b10101001000 #b1001110111010101010010101000101011011011010101101010)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
