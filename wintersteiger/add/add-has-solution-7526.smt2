(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.43708292183378727457920831511728465557098388671875p-967 {- 1968446483900652 -967 (-1.15206e-291)}
; Y = 1.34581736122216799600437298067845404148101806640625p441 {+ 1557422939138404 441 (7.64213e+132)}
; -1.43708292183378727457920831511728465557098388671875p-967 + 1.34581736122216799600437298067845404148101806640625p441 == 1.3458173612221677739597680556471459567546844482421875p441
; [HW: 1.3458173612221677739597680556471459567546844482421875p441] 

; mpf : + 1557422939138403 441
; mpfd: + 1557422939138403 441 (7.64213e+132) class: Pos. norm. non-zero
; hwf : + 1557422939138403 441 (7.64213e+132) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000111000 #b0110111111100100101010101001011011101010100011101100)))
(assert (= y (fp #b0 #b10110111000 #b0101100010000111011111001001000011010110100101100100)))
(assert (= r (fp #b0 #b10110111000 #b0101100010000111011111001001000011010110100101100011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
