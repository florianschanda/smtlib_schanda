(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0251155126104032344613870009197853505611419677734375p-457 {- 113110213233431 -457 (-2.75464e-138)}
; Y = -1.7001233844432166453231047853478230535984039306640625p297 {- 3153075413291841 297 (-4.32902e+089)}
; -1.0251155126104032344613870009197853505611419677734375p-457 + -1.7001233844432166453231047853478230535984039306640625p297 == -1.700123384443216867367709710379131138324737548828125p297
; [HW: -1.700123384443216867367709710379131138324737548828125p297] 

; mpf : - 3153075413291842 297
; mpfd: - 3153075413291842 297 (-4.32902e+089) class: Neg. norm. non-zero
; hwf : - 3153075413291842 297 (-4.32902e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110110 #b0000011001101101111110000110000101001000101100010111)))
(assert (= y (fp #b1 #b10100101000 #b1011001100111011010010010011111101011001001101000001)))
(assert (= r (fp #b1 #b10100101000 #b1011001100111011010010010011111101011001001101000010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
