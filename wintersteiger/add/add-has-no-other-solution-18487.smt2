(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0621730616394502444421732434420846402645111083984375p-577 {+ 280002577231911 -577 (2.14728e-174)}
; Y = -1.131921067399125124808278997079469263553619384765625p732 {- 594119669981018 732 (-2.55725e+220)}
; 1.0621730616394502444421732434420846402645111083984375p-577 + -1.131921067399125124808278997079469263553619384765625p732 == -1.131921067399125124808278997079469263553619384765625p732
; [HW: -1.131921067399125124808278997079469263553619384765625p732] 

; mpf : - 594119669981018 732
; mpfd: - 594119669981018 732 (-2.55725e+220) class: Neg. norm. non-zero
; hwf : - 594119669981018 732 (-2.55725e+220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111110 #b0000111111101010100100101110001001101111000000100111)))
(assert (= y (fp #b1 #b11011011011 #b0010000111000101100101000011111000100001111101011010)))
(assert (= r (fp #b1 #b11011011011 #b0010000111000101100101000011111000100001111101011010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
