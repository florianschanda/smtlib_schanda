(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2819969579447734187027663210756145417690277099609375p-190 {+ 1270001394719695 -190 (8.16936e-058)}
; Y = 1.47713164497325255553050737944431602954864501953125p-844 {+ 2148809898508212 -844 (1.25922e-254)}
; 1.2819969579447734187027663210756145417690277099609375p-190 + 1.47713164497325255553050737944431602954864501953125p-844 == 1.2819969579447734187027663210756145417690277099609375p-190
; [HW: 1.2819969579447734187027663210756145417690277099609375p-190] 

; mpf : + 1270001394719695 -190
; mpfd: + 1270001394719695 -190 (8.16936e-058) class: Pos. norm. non-zero
; hwf : + 1270001394719695 -190 (8.16936e-058) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000001 #b0100100000110000111100111101111111110001101111001111)))
(assert (= y (fp #b0 #b00010110011 #b0111101000100101010011001010101100001011111110110100)))
(assert (= r (fp #b0 #b01101000001 #b0100100000110000111100111101111111110001101111001111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
