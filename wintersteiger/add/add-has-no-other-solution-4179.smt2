(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.872597978293503384605855899280868470668792724609375p759 {+ 3929831929886870 759 (5.67821e+228)}
; Y = 1.1508325990819858741787129474687390029430389404296875p807 {+ 679289637020955 807 (9.82242e+242)}
; 1.872597978293503384605855899280868470668792724609375p759 + 1.1508325990819858741787129474687390029430389404296875p807 == 1.1508325990819925355168606984079815447330474853515625p807
; [HW: 1.1508325990819925355168606984079815447330474853515625p807] 

; mpf : + 679289637020985 807
; mpfd: + 679289637020985 807 (9.82242e+242) class: Pos. norm. non-zero
; hwf : + 679289637020985 807 (9.82242e+242) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011110110 #b1101111101100010100101001100001101010011100010010110)))
(assert (= y (fp #b0 #b11100100110 #b0010011010011100111101110001100000111010010100011011)))
(assert (= r (fp #b0 #b11100100110 #b0010011010011100111101110001100000111010010100111001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
