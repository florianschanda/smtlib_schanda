(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.76938922710363666368493795744143426418304443359375p-327 {- 3465021036486812 -327 (-6.47165e-099)}
; Y = -1.7494809136860383080858127868850715458393096923828125p-435 {- 3375361963597741 -435 (-1.97179e-131)}
; -1.76938922710363666368493795744143426418304443359375p-327 + -1.7494809136860383080858127868850715458393096923828125p-435 == -1.7693892271036368857295428824727423489093780517578125p-327
; [HW: -1.7693892271036368857295428824727423489093780517578125p-327] 

; mpf : - 3465021036486813 -327
; mpfd: - 3465021036486813 -327 (-6.47165e-099) class: Neg. norm. non-zero
; hwf : - 3465021036486813 -327 (-6.47165e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010111000 #b1100010011110110101100010100000001001110000010011100)))
(assert (= y (fp #b1 #b01001001100 #b1011111111011101111110110010110101000001111110101101)))
(assert (= r (fp #b1 #b01010111000 #b1100010011110110101100010100000001001110000010011101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
