(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.901707416430137964624691448989324271678924560546875p651 {- 4060929184631982 651 (-1.77693e+196)}
; Y = 1.32473469728862891514609145815484225749969482421875p532 {+ 1462475061703340 532 (1.86246e+160)}
; -1.901707416430137964624691448989324271678924560546875p651 + 1.32473469728862891514609145815484225749969482421875p532 == -1.901707416430137964624691448989324271678924560546875p651
; [HW: -1.901707416430137964624691448989324271678924560546875p651] 

; mpf : - 4060929184631982 651
; mpfd: - 4060929184631982 651 (-1.77693e+196) class: Neg. norm. non-zero
; hwf : - 4060929184631982 651 (-1.77693e+196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001010 #b1110011011010110010011000001100000100000110010101110)))
(assert (= y (fp #b0 #b11000010011 #b0101001100100001110100000010100010111011001010101100)))
(assert (= r (fp #b1 #b11010001010 #b1110011011010110010011000001100000100000110010101110)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
