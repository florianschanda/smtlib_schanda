(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5442869742946909727976390058756805956363677978515625p-698 {- 2451250614616185 -698 (-1.17433e-210)}
; Y = 1.82686119445447747722255371627397835254669189453125p673 {+ 3723851767232308 673 (7.15966e+202)}
; -1.5442869742946909727976390058756805956363677978515625p-698 + 1.82686119445447747722255371627397835254669189453125p673 == 1.82686119445447747722255371627397835254669189453125p673
; [HW: 1.82686119445447747722255371627397835254669189453125p673] 

; mpf : + 3723851767232308 673
; mpfd: + 3723851767232308 673 (7.15966e+202) class: Pos. norm. non-zero
; hwf : + 3723851767232308 673 (7.15966e+202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000101 #b1000101101010110011001000010001000111100000001111001)))
(assert (= y (fp #b0 #b11010100000 #b1101001110101101001011001101110010000011011100110100)))
(assert (= r (fp #b0 #b11010100000 #b1101001110101101001011001101110010000011011100110100)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
