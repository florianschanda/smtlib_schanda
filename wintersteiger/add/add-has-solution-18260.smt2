(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7377883023114664151620445409207604825496673583984375p-355 {- 3322703123368231 -355 (-2.36782e-107)}
; Y = -1.978179137605869275517989080981351435184478759765625p-797 {- 4405327199623386 -797 (-2.37334e-240)}
; -1.7377883023114664151620445409207604825496673583984375p-355 + -1.978179137605869275517989080981351435184478759765625p-797 == -1.7377883023114664151620445409207604825496673583984375p-355
; [HW: -1.7377883023114664151620445409207604825496673583984375p-355] 

; mpf : - 3322703123368231 -355
; mpfd: - 3322703123368231 -355 (-2.36782e-107) class: Neg. norm. non-zero
; hwf : - 3322703123368231 -355 (-2.36782e-107) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011100 #b1011110011011111101100011011010111001100100100100111)))
(assert (= y (fp #b1 #b00011100010 #b1111101001101001111100101010110110100101100011011010)))
(assert (= r (fp #b1 #b01010011100 #b1011110011011111101100011011010111001100100100100111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
