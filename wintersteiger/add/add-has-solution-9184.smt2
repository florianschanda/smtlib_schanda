(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3546126425386442182485779994749464094638824462890625p-804 {- 1597033364797905 -804 (-1.26969e-242)}
; Y = -1.783128437670738808407122633070684969425201416015625p671 {- 3526896940077178 671 (-1.74707e+202)}
; -1.3546126425386442182485779994749464094638824462890625p-804 + -1.783128437670738808407122633070684969425201416015625p671 == -1.783128437670738808407122633070684969425201416015625p671
; [HW: -1.783128437670738808407122633070684969425201416015625p671] 

; mpf : - 3526896940077178 671
; mpfd: - 3526896940077178 671 (-1.74707e+202) class: Neg. norm. non-zero
; hwf : - 3526896940077178 671 (-1.74707e+202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011011011 #b0101101011000111111001001110011001110011100111010001)))
(assert (= y (fp #b1 #b11010011110 #b1100100001111011000110101111010001011101000001111010)))
(assert (= r (fp #b1 #b11010011110 #b1100100001111011000110101111010001011101000001111010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
