(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3993003890542710099254009037395007908344268798828125p-172 {- 1798289083353709 -172 (-2.3375e-052)}
; Y = -1.74929187297482702234674434293992817401885986328125p-766 {- 3374510599921172 -766 (-4.50698e-231)}
; -1.3993003890542710099254009037395007908344268798828125p-172 + -1.74929187297482702234674434293992817401885986328125p-766 == -1.3993003890542710099254009037395007908344268798828125p-172
; [HW: -1.3993003890542710099254009037395007908344268798828125p-172] 

; mpf : - 1798289083353709 -172
; mpfd: - 1798289083353709 -172 (-2.3375e-052) class: Neg. norm. non-zero
; hwf : - 1798289083353709 -172 (-2.3375e-052) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010011 #b0110011000111000100011001110000001000100101001101101)))
(assert (= y (fp #b1 #b00100000001 #b1011111111010001100101111001100110010101111000010100)))
(assert (= r (fp #b1 #b01101010011 #b0110011000111000100011001110000001000100101001101101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
