(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1833457077529396794801641590311191976070404052734375p-732 {- 825715661116119 -732 (-5.23787e-221)}
; Y = -1.201715740452457215070580787141807377338409423828125p859 {- 908446933536450 859 (-4.61921e+258)}
; -1.1833457077529396794801641590311191976070404052734375p-732 + -1.201715740452457215070580787141807377338409423828125p859 == -1.2017157404524574371151857121731154620647430419921875p859
; [HW: -1.2017157404524574371151857121731154620647430419921875p859] 

; mpf : - 908446933536451 859
; mpfd: - 908446933536451 859 (-4.61921e+258) class: Neg. norm. non-zero
; hwf : - 908446933536451 859 (-4.61921e+258) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100011 #b0010111011101111101111101000101010101001001011010111)))
(assert (= y (fp #b1 #b11101011010 #b0011001110100011101001001000110001010100111011000010)))
(assert (= r (fp #b1 #b11101011010 #b0011001110100011101001001000110001010100111011000011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
