(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.756859760978032536371529204188846051692962646484375p373 {+ 3408593337512390 373 (3.38007e+112)}
; Y = -1.25514166758215850450142170302569866180419921875p992 {- 1149055919049696 992 (-5.2535e+298)}
; 1.756859760978032536371529204188846051692962646484375p373 + -1.25514166758215850450142170302569866180419921875p992 == -1.25514166758215850450142170302569866180419921875p992
; [HW: -1.25514166758215850450142170302569866180419921875p992] 

; mpf : - 1149055919049696 992
; mpfd: - 1149055919049696 992 (-5.2535e+298) class: Neg. norm. non-zero
; hwf : - 1149055919049696 992 (-5.2535e+298) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110100 #b1100000111000001100011111011000100001111000111000110)))
(assert (= y (fp #b1 #b11111011111 #b0100000101010000111101101101111000011100101111100000)))
(assert (= r (fp #b1 #b11111011111 #b0100000101010000111101101101111000011100101111100000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
