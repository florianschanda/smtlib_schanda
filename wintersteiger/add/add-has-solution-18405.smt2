(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0480783814334546644175816254573874175548553466796875p210 {+ 216525780708283 210 (1.72462e+063)}
; Y = -1.19127672718195665169105268432758748531341552734375p834 {- 861433797261308 834 (-1.36467e+251)}
; 1.0480783814334546644175816254573874175548553466796875p210 + -1.19127672718195665169105268432758748531341552734375p834 == -1.1912767271819564296464477592962794005870819091796875p834
; [HW: -1.1912767271819564296464477592962794005870819091796875p834] 

; mpf : - 861433797261307 834
; mpfd: - 861433797261307 834 (-1.36467e+251) class: Neg. norm. non-zero
; hwf : - 861433797261307 834 (-1.36467e+251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011010001 #b0000110001001110110111010110001111100110101110111011)))
(assert (= y (fp #b1 #b11101000001 #b0011000011110111100000101111011110111011011111111100)))
(assert (= r (fp #b1 #b11101000001 #b0011000011110111100000101111011110111011011111111011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
