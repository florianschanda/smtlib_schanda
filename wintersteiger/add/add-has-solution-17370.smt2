(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.223339788099953029387734204647131264209747314453125p20 {+ 1005832986463954 20 (1.28276e+006)}
; Y = 1.28936952851137842657180954120121896266937255859375p-629 {+ 1303204500776220 -629 (5.78775e-190)}
; 1.223339788099953029387734204647131264209747314453125p20 + 1.28936952851137842657180954120121896266937255859375p-629 == 1.223339788099953029387734204647131264209747314453125p20
; [HW: 1.223339788099953029387734204647131264209747314453125p20] 

; mpf : + 1005832986463954 20
; mpfd: + 1005832986463954 20 (1.28276e+006) class: Pos. norm. non-zero
; hwf : + 1005832986463954 20 (1.28276e+006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000010011 #b0011100100101100110010111101110111001000111011010010)))
(assert (= y (fp #b0 #b00110001010 #b0100101000010100000111110001010101101010010100011100)))
(assert (= r (fp #b0 #b10000010011 #b0011100100101100110010111101110111001000111011010010)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
