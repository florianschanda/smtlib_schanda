(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.376730610333168680625703927944414317607879638671875p48 {- 1696643836315518 48 (-3.87515e+014)}
; Y = -1.942039550949696380399700501584447920322418212890625p-730 {- 4242568970625322 -730 (-3.43844e-220)}
; -1.376730610333168680625703927944414317607879638671875p48 + -1.942039550949696380399700501584447920322418212890625p-730 == -1.376730610333168680625703927944414317607879638671875p48
; [HW: -1.376730610333168680625703927944414317607879638671875p48] 

; mpf : - 1696643836315518 48
; mpfd: - 1696643836315518 48 (-3.87515e+014) class: Neg. norm. non-zero
; hwf : - 1696643836315518 48 (-3.87515e+014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000101111 #b0110000001110001011010101101001011001000011101111110)))
(assert (= y (fp #b1 #b00100100101 #b1111000100101001100000010000011011011110000100101010)))
(assert (= r (fp #b1 #b10000101111 #b0110000001110001011010101101001011001000011101111110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
