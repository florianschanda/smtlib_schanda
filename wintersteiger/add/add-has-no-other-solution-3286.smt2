(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.091534993311596313247946454794146120548248291015625p-718 {- 412236961769466 -718 (-7.91591e-217)}
; Y = -1.2043201243953431944788690088898874819278717041015625p-310 {- 920176036091161 -310 (-5.77355e-094)}
; -1.091534993311596313247946454794146120548248291015625p-718 + -1.2043201243953431944788690088898874819278717041015625p-310 == -1.2043201243953431944788690088898874819278717041015625p-310
; [HW: -1.2043201243953431944788690088898874819278717041015625p-310] 

; mpf : - 920176036091161 -310
; mpfd: - 920176036091161 -310 (-5.77355e-094) class: Neg. norm. non-zero
; hwf : - 920176036091161 -310 (-5.77355e-094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110001 #b0001011101101110110101100101101010110110011111111010)))
(assert (= y (fp #b1 #b01011001001 #b0011010001001110010100101101110000110001010100011001)))
(assert (= r (fp #b1 #b01011001001 #b0011010001001110010100101101110000110001010100011001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
