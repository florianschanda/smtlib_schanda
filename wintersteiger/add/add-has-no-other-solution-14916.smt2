(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5314416673142938751794872587197460234165191650390625p-214 {+ 2393400494885809 -214 (5.81676e-065)}
; Y = 1.76067143706842710315640943008475005626678466796875p765 {+ 3425759600532748 765 (3.41684e+230)}
; 1.5314416673142938751794872587197460234165191650390625p-214 + 1.76067143706842710315640943008475005626678466796875p765 == 1.7606714370684273252010143551160581409931182861328125p765
; [HW: 1.7606714370684273252010143551160581409931182861328125p765] 

; mpf : + 3425759600532749 765
; mpfd: + 3425759600532749 765 (3.41684e+230) class: Pos. norm. non-zero
; hwf : + 3425759600532749 765 (3.41684e+230) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101001 #b1000100000001100100011111010010011011000101110110001)))
(assert (= y (fp #b0 #b11011111100 #b1100001010111011010111010000000100110101110100001100)))
(assert (= r (fp #b0 #b11011111100 #b1100001010111011010111010000000100110101110100001101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
