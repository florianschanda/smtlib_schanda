(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7928050994176130128465729285380803048610687255859375p-950 {- 3570476750314591 -950 (-1.88381e-286)}
; Y = 1.058898027153111431886145510361529886722564697265625p170 {+ 265253133139610 170 (1.58472e+051)}
; -1.7928050994176130128465729285380803048610687255859375p-950 + 1.058898027153111431886145510361529886722564697265625p170 == 1.0588980271531112098415405853302218019962310791015625p170
; [HW: 1.0588980271531112098415405853302218019962310791015625p170] 

; mpf : + 265253133139609 170
; mpfd: + 265253133139609 170 (1.58472e+051) class: Pos. norm. non-zero
; hwf : + 265253133139609 170 (1.58472e+051) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001001 #b1100101011110101010001100110011000011001110001011111)))
(assert (= y (fp #b0 #b10010101001 #b0000111100010011111100001110110001101011111010011010)))
(assert (= r (fp #b0 #b10010101001 #b0000111100010011111100001110110001101011111010011001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
