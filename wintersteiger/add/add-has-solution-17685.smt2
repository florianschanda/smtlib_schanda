(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.459638738012098979623942796024493873119354248046875p-930 {- 2070028849236334 -930 (-1.60823e-280)}
; Y = -1.06339169990087345496476700645871460437774658203125p268 {- 285490836051956 268 (-5.0435e+080)}
; -1.459638738012098979623942796024493873119354248046875p-930 + -1.06339169990087345496476700645871460437774658203125p268 == -1.06339169990087345496476700645871460437774658203125p268
; [HW: -1.06339169990087345496476700645871460437774658203125p268] 

; mpf : - 285490836051956 268
; mpfd: - 285490836051956 268 (-5.0435e+080) class: Neg. norm. non-zero
; hwf : - 285490836051956 268 (-5.0435e+080) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011101 #b0111010110101010111000100110001110111100100101101110)))
(assert (= y (fp #b1 #b10100001011 #b0001000000111010011100000011110111101001011111110100)))
(assert (= r (fp #b1 #b10100001011 #b0001000000111010011100000011110111101001011111110100)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
