(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8884979995675148511935503847780637443065643310546875p-95 {+ 4001439259771691 -95 (4.76724e-029)}
; Y = -1.3178045780778731010940418855170719325542449951171875p-958 {- 1431264579408147 -958 (-5.40898e-289)}
; 1.8884979995675148511935503847780637443065643310546875p-95 + -1.3178045780778731010940418855170719325542449951171875p-958 == 1.8884979995675148511935503847780637443065643310546875p-95
; [HW: 1.8884979995675148511935503847780637443065643310546875p-95] 

; mpf : + 4001439259771691 -95
; mpfd: + 4001439259771691 -95 (4.76724e-029) class: Pos. norm. non-zero
; hwf : + 4001439259771691 -95 (4.76724e-029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100000 #b1110001101110100100110101101101010110100001100101011)))
(assert (= y (fp #b1 #b00001000001 #b0101000101011011101001000000110101011101000100010011)))
(assert (= r (fp #b0 #b01110100000 #b1110001101110100100110101101101010110100001100101011)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
