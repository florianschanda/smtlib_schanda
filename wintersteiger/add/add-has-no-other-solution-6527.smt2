(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4733162481507970920091565858456306159496307373046875p-960 {+ 2131626878800331 -960 (1.51182e-289)}
; Y = -1.418924557736616964831455334206111729145050048828125p-701 {- 1886668482118978 -701 (-1.34875e-211)}
; 1.4733162481507970920091565858456306159496307373046875p-960 + -1.418924557736616964831455334206111729145050048828125p-701 == -1.4189245577366167427868504091748036444187164306640625p-701
; [HW: -1.4189245577366167427868504091748036444187164306640625p-701] 

; mpf : - 1886668482118977 -701
; mpfd: - 1886668482118977 -701 (-1.34875e-211) class: Neg. norm. non-zero
; hwf : - 1886668482118977 -701 (-1.34875e-211) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111111 #b0111100100101011010000001110111001111001000111001011)))
(assert (= y (fp #b1 #b00101000010 #b0110101100111110101000111100101011111000010101000010)))
(assert (= r (fp #b1 #b00101000010 #b0110101100111110101000111100101011111000010101000001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
