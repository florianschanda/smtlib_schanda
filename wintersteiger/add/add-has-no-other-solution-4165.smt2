(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9195140649560473722345932401367463171482086181640625p735 {+ 4141123200297985 735 (3.46927e+221)}
; Y = 1.249167373688020887811944703571498394012451171875p455 {+ 1122150091294256 455 (1.16217e+137)}
; 1.9195140649560473722345932401367463171482086181640625p735 + 1.249167373688020887811944703571498394012451171875p455 == 1.9195140649560473722345932401367463171482086181640625p735
; [HW: 1.9195140649560473722345932401367463171482086181640625p735] 

; mpf : + 4141123200297985 735
; mpfd: + 4141123200297985 735 (3.46927e+221) class: Pos. norm. non-zero
; hwf : + 4141123200297985 735 (3.46927e+221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011011110 #b1110101101100101010001100001010100110010110000000001)))
(assert (= y (fp #b0 #b10111000110 #b0011111111001001011011101101100100111000011000110000)))
(assert (= r (fp #b0 #b11011011110 #b1110101101100101010001100001010100110010110000000001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
