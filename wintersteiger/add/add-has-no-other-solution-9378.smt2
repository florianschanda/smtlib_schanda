(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.568836233693050363768861643620766699314117431640625p147 {+ 2561810650094858 147 (2.7989e+044)}
; Y = -1.3771634460893837914596815608092583715915679931640625p646 {- 1698593155265921 646 (-4.02126e+194)}
; 1.568836233693050363768861643620766699314117431640625p147 + -1.3771634460893837914596815608092583715915679931640625p646 == -1.3771634460893837914596815608092583715915679931640625p646
; [HW: -1.3771634460893837914596815608092583715915679931640625p646] 

; mpf : - 1698593155265921 646
; mpfd: - 1698593155265921 646 (-4.02126e+194) class: Neg. norm. non-zero
; hwf : - 1698593155265921 646 (-4.02126e+194) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010010010 #b1001000110011111010000000101110001111101110100001010)))
(assert (= y (fp #b1 #b11010000101 #b0110000010001101110010001001101000110011010110000001)))
(assert (= r (fp #b1 #b11010000101 #b0110000010001101110010001001101000110011010110000001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
