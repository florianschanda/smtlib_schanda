(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0740736981186238541141619862173683941364288330078125p-102 {- 333598279244989 -102 (-2.11824e-031)}
; Y = -1.777065936966687242914986200048588216304779052734375p-292 {- 3499593864165478 -292 (-2.23329e-088)}
; -1.0740736981186238541141619862173683941364288330078125p-102 + -1.777065936966687242914986200048588216304779052734375p-292 == -1.074073698118624076158766911248676478862762451171875p-102
; [HW: -1.074073698118624076158766911248676478862762451171875p-102] 

; mpf : - 333598279244990 -102
; mpfd: - 333598279244990 -102 (-2.11824e-031) class: Neg. norm. non-zero
; hwf : - 333598279244990 -102 (-2.11824e-031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110011001 #b0001001011110110011111100110111011101001110010111101)))
(assert (= y (fp #b1 #b01011011011 #b1100011011101101110010110001001000011011100001100110)))
(assert (= r (fp #b1 #b01110011001 #b0001001011110110011111100110111011101001110010111110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
