(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8185426323861804132064889927278272807598114013671875p-650 {- 3686388294201267 -650 (-3.89248e-196)}
; Y = 1.187722749376836528512058066553436219692230224609375p-765 {+ 845428104142486 -765 (6.12024e-231)}
; -1.8185426323861804132064889927278272807598114013671875p-650 + 1.187722749376836528512058066553436219692230224609375p-765 == -1.818542632386180191161884067696519196033477783203125p-650
; [HW: -1.818542632386180191161884067696519196033477783203125p-650] 

; mpf : - 3686388294201266 -650
; mpfd: - 3686388294201266 -650 (-3.89248e-196) class: Neg. norm. non-zero
; hwf : - 3686388294201266 -650 (-3.89248e-196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101110101 #b1101000110001100000000101000110001111010111110110011)))
(assert (= y (fp #b0 #b00100000010 #b0011000000001110100110010001110101001001111010010110)))
(assert (= r (fp #b1 #b00101110101 #b1101000110001100000000101000110001111010111110110010)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
