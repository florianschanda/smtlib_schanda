(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.74773917211408313931997327017597854137420654296875p951 {+ 3367517856903308 951 (3.32661e+286)}
; Y = 1.1388978024188902704594283932237885892391204833984375p-204 {+ 625540091216295 -204 (4.42961e-062)}
; 1.74773917211408313931997327017597854137420654296875p951 + 1.1388978024188902704594283932237885892391204833984375p-204 == 1.74773917211408313931997327017597854137420654296875p951
; [HW: 1.74773917211408313931997327017597854137420654296875p951] 

; mpf : + 3367517856903308 951
; mpfd: + 3367517856903308 951 (3.32661e+286) class: Pos. norm. non-zero
; hwf : + 3367517856903308 951 (3.32661e+286) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110110 #b1011111101101011110101011001101000101011000010001100)))
(assert (= y (fp #b0 #b01100110011 #b0010001110001110110011100110111011100000000110100111)))
(assert (= r (fp #b0 #b11110110110 #b1011111101101011110101011001101000101011000010001100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
