(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6715241154781670385176539639360271394252777099609375p-7 {+ 3024275756237775 -7 (0.0130588)}
; Y = 1.0745260187985359312534683340345509350299835205078125p-955 {+ 335635350490493 -955 (3.52835e-288)}
; 1.6715241154781670385176539639360271394252777099609375p-7 + 1.0745260187985359312534683340345509350299835205078125p-955 == 1.671524115478167260562258888967335224151611328125p-7
; [HW: 1.671524115478167260562258888967335224151611328125p-7] 

; mpf : + 3024275756237776 -7
; mpfd: + 3024275756237776 -7 (0.0130588) class: Pos. norm. non-zero
; hwf : + 3024275756237776 -7 (0.0130588) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111111000 #b1010101111101001000000010010001001110100001111001111)))
(assert (= y (fp #b0 #b00001000100 #b0001001100010100001000110001110101110000110101111101)))
(assert (= r (fp #b0 #b01111111000 #b1010101111101001000000010010001001110100001111010000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
