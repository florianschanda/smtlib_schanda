(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.04987077357510383279759480501525104045867919921875p95 {- 224597997289516 95 (-4.15897e+028)}
; Y = -1.1252168506912030299105254016467370092868804931640625p654 {- 563926562113409 654 (-8.41111e+196)}
; -1.04987077357510383279759480501525104045867919921875p95 + -1.1252168506912030299105254016467370092868804931640625p654 == -1.125216850691203251955130326678045094013214111328125p654
; [HW: -1.125216850691203251955130326678045094013214111328125p654] 

; mpf : - 563926562113410 654
; mpfd: - 563926562113410 654 (-8.41111e+196) class: Neg. norm. non-zero
; hwf : - 563926562113410 654 (-8.41111e+196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011110 #b0000110011000100010101001011110110001000000000101100)))
(assert (= y (fp #b1 #b11010001101 #b0010000000001110001101100010011010100000011110000001)))
(assert (= r (fp #b1 #b11010001101 #b0010000000001110001101100010011010100000011110000010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
