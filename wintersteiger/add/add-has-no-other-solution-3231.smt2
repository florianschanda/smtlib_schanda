(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1237819632519256973779420150094665586948394775390625p-221 {+ 557464403576561 -221 (3.33467e-067)}
; Y = -1.0800566751276594601449687615968286991119384765625p-960 {- 360543212273448 -960 (-1.10828e-289)}
; 1.1237819632519256973779420150094665586948394775390625p-221 + -1.0800566751276594601449687615968286991119384765625p-960 == 1.1237819632519256973779420150094665586948394775390625p-221
; [HW: 1.1237819632519256973779420150094665586948394775390625p-221] 

; mpf : + 557464403576561 -221
; mpfd: + 557464403576561 -221 (3.33467e-067) class: Pos. norm. non-zero
; hwf : + 557464403576561 -221 (3.33467e-067) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100100010 #b0001111110110000001011001011110000000000011011110001)))
(assert (= y (fp #b1 #b00000111111 #b0001010001111110100110000010000101111111111100101000)))
(assert (= r (fp #b0 #b01100100010 #b0001111110110000001011001011110000000000011011110001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
