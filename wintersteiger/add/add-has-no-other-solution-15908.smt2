(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.82305747298262499356269472627900540828704833984375p431 {+ 3706721328629052 431 (1.01095e+130)}
; Y = -1.8390272447433730906851678810198791325092315673828125p19 {- 3778642786779949 19 (-964180)}
; 1.82305747298262499356269472627900540828704833984375p431 + -1.8390272447433730906851678810198791325092315673828125p19 == 1.8230574729826247715180898012476973235607147216796875p431
; [HW: 1.8230574729826247715180898012476973235607147216796875p431] 

; mpf : + 3706721328629051 431
; mpfd: + 3706721328629051 431 (1.01095e+130) class: Pos. norm. non-zero
; hwf : + 3706721328629051 431 (1.01095e+130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110101110 #b1101001010110011111001010000000100110000010100111100)))
(assert (= y (fp #b1 #b10000010010 #b1101011011001010011111010101000010100000001100101101)))
(assert (= r (fp #b0 #b10110101110 #b1101001010110011111001010000000100110000010100111011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
