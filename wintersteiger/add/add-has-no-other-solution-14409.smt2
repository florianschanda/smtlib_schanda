(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.52912637375742743728324057883583009243011474609375p-549 {+ 2382973339685852 -549 (8.29804e-166)}
; Y = 1.235116576574886604333869399852119386196136474609375p738 {+ 1058870926651286 738 (1.78585e+222)}
; 1.52912637375742743728324057883583009243011474609375p-549 + 1.235116576574886604333869399852119386196136474609375p738 == 1.235116576574886604333869399852119386196136474609375p738
; [HW: 1.235116576574886604333869399852119386196136474609375p738] 

; mpf : + 1058870926651286 738
; mpfd: + 1058870926651286 738 (1.78585e+222) class: Pos. norm. non-zero
; hwf : + 1058870926651286 738 (1.78585e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111011010 #b1000011101110100110100110111011010111101001111011100)))
(assert (= y (fp #b0 #b11011100001 #b0011110000110000100110011001011100100010111110010110)))
(assert (= r (fp #b0 #b11011100001 #b0011110000110000100110011001011100100010111110010110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
