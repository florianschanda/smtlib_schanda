(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.66920662981963108251193261821754276752471923828125p331 {+ 3013838728689556 331 (7.30195e+099)}
; Y = -1.528168131577987143288055449374951422214508056640625p298 {- 2378657800563594 298 (-7.78233e+089)}
; 1.66920662981963108251193261821754276752471923828125p331 + -1.528168131577987143288055449374951422214508056640625p298 == 1.6692066296417287230013926091487519443035125732421875p331
; [HW: 1.6692066296417287230013926091487519443035125732421875p331] 

; mpf : + 3013838727888355 331
; mpfd: + 3013838727888355 331 (7.30195e+099) class: Pos. norm. non-zero
; hwf : + 3013838727888355 331 (7.30195e+099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101001010 #b1010101101010001001000000010110101010111011110010100)))
(assert (= y (fp #b1 #b10100101001 #b1000011100110110000001101101001111101010101110001010)))
(assert (= r (fp #b0 #b10101001010 #b1010101101010001001000000010110010010011110111100011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
