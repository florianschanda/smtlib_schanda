(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2915762681483149432182244709110818803310394287109375p364 {- 1313142772582831 364 (-4.85331e+109)}
; Y = 1.374827294833388169337240469758398830890655517578125p-436 {+ 1688072065339938 -436 (7.74765e-132)}
; -1.2915762681483149432182244709110818803310394287109375p364 + 1.374827294833388169337240469758398830890655517578125p-436 == -1.291576268148314721173619545879773795604705810546875p364
; [HW: -1.291576268148314721173619545879773795604705810546875p364] 

; mpf : - 1313142772582830 364
; mpfd: - 1313142772582830 364 (-4.85331e+109) class: Neg. norm. non-zero
; hwf : - 1313142772582830 364 (-4.85331e+109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101011 #b0100101010100100101111100000011111111100100110101111)))
(assert (= y (fp #b0 #b01001001011 #b0101111111110100101011100111110011110101001000100010)))
(assert (= r (fp #b1 #b10101101011 #b0100101010100100101111100000011111111100100110101110)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
