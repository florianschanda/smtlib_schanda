(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.885340133411090857151748423348180949687957763671875p-183 {- 3987217494926334 -183 (-1.5378e-055)}
; Y = 1.44200782193737442327119424589909613132476806640625p-62 {+ 1990626262172004 -62 (3.12686e-019)}
; -1.885340133411090857151748423348180949687957763671875p-183 + 1.44200782193737442327119424589909613132476806640625p-62 == 1.44200782193737442327119424589909613132476806640625p-62
; [HW: 1.44200782193737442327119424589909613132476806640625p-62] 

; mpf : + 1990626262172004 -62
; mpfd: + 1990626262172004 -62 (3.12686e-019) class: Pos. norm. non-zero
; hwf : + 1990626262172004 -62 (3.12686e-019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001000 #b1110001010100101101001101010011011010110001111111110)))
(assert (= y (fp #b0 #b01111000001 #b0111000100100111011011001011001111001100000101100100)))
(assert (= r (fp #b0 #b01111000001 #b0111000100100111011011001011001111001100000101100100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
