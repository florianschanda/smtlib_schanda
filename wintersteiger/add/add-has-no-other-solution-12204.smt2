(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7587414281135853588722284257528372108936309814453125p570 {- 3417067612922901 570 (-6.79672e+171)}
; Y = -1.626469879531229789648705263971351087093353271484375p358 {- 2821369516015686 358 (-9.54958e+107)}
; -1.7587414281135853588722284257528372108936309814453125p570 + -1.626469879531229789648705263971351087093353271484375p358 == -1.7587414281135853588722284257528372108936309814453125p570
; [HW: -1.7587414281135853588722284257528372108936309814453125p570] 

; mpf : - 3417067612922901 570
; mpfd: - 3417067612922901 570 (-6.79672e+171) class: Neg. norm. non-zero
; hwf : - 3417067612922901 570 (-6.79672e+171) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111001 #b1100001000111100111000001101001111011110010000010101)))
(assert (= y (fp #b1 #b10101100101 #b1010000001100000010101000111110010000100000001000110)))
(assert (= r (fp #b1 #b11000111001 #b1100001000111100111000001101001111011110010000010101)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
