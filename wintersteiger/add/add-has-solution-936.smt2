(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -0.9789439396006687221785114161320962011814117431640625p-1022 {- 4408771561602177 -1023 (-2.17822e-308)}
; Y = -1.3961045971344889782272957745590247213840484619140625p693 {- 1783896516054625 693 (-5.73727e+208)}
; -0.9789439396006687221785114161320962011814117431640625p-1022 + -1.3961045971344889782272957745590247213840484619140625p693 == -1.3961045971344889782272957745590247213840484619140625p693
; [HW: -1.3961045971344889782272957745590247213840484619140625p693] 

; mpf : - 1783896516054625 693
; mpfd: - 1783896516054625 693 (-5.73727e+208) class: Neg. norm. non-zero
; hwf : - 1783896516054625 693 (-5.73727e+208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1111101010011100000100011110110100110011110010000001)))
(assert (= y (fp #b1 #b11010110100 #b0110010101100111000111000110001001111100111001100001)))
(assert (= r (fp #b1 #b11010110100 #b0110010101100111000111000110001001111100111001100001)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
