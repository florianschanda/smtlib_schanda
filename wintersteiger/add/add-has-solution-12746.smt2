(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6692707908307167219419397952151484787464141845703125p-704 {+ 3014127684195173 -704 (1.9834e-212)}
; Y = 1.7418048050006473825845887404284439980983734130859375p-1015 {+ 3340791843382559 -1015 (4.96082e-306)}
; 1.6692707908307167219419397952151484787464141845703125p-704 + 1.7418048050006473825845887404284439980983734130859375p-1015 == 1.6692707908307167219419397952151484787464141845703125p-704
; [HW: 1.6692707908307167219419397952151484787464141845703125p-704] 

; mpf : + 3014127684195173 -704
; mpfd: + 3014127684195173 -704 (1.9834e-212) class: Pos. norm. non-zero
; hwf : + 3014127684195173 -704 (1.9834e-212) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111111 #b1010101101010101010101001001111011001001001101100101)))
(assert (= y (fp #b0 #b00000001000 #b1011110111100110111010110111000101111110010100011111)))
(assert (= r (fp #b0 #b00100111111 #b1010101101010101010101001001111011001001001101100101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
