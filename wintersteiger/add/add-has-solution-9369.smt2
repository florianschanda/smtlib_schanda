(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.6948232169490122789312636086833663284778594970703125p-1022 {+ 3129205580939941 -1023 (1.54603e-308)}
; Y = 1.1127350526702655120203644401044584810733795166015625p-849 {+ 507713541197401 -849 (2.96432e-256)}
; 0.6948232169490122789312636086833663284778594970703125p-1022 + 1.1127350526702655120203644401044584810733795166015625p-849 == 1.1127350526702655120203644401044584810733795166015625p-849
; [HW: 1.1127350526702655120203644401044584810733795166015625p-849] 

; mpf : + 507713541197401 -849
; mpfd: + 507713541197401 -849 (2.96432e-256) class: Pos. norm. non-zero
; hwf : + 507713541197401 -849 (2.96432e-256) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1011000111011111111011110011000101001100001010100101)))
(assert (= y (fp #b0 #b00010101110 #b0001110011011100001101000101010001010100111001011001)))
(assert (= r (fp #b0 #b00010101110 #b0001110011011100001101000101010001010100111001011001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
