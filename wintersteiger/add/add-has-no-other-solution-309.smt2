(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3117535462683822533591637693461962044239044189453125p-182 {- 1404013154805717 -182 (-2.1399e-055)}
; Y = 1.8856126357160347684072121410281397402286529541015625p211 {+ 3988444736205337 211 (6.20557e+063)}
; -1.3117535462683822533591637693461962044239044189453125p-182 + 1.8856126357160347684072121410281397402286529541015625p211 == 1.8856126357160347684072121410281397402286529541015625p211
; [HW: 1.8856126357160347684072121410281397402286529541015625p211] 

; mpf : + 3988444736205337 211
; mpfd: + 3988444736205337 211 (6.20557e+063) class: Pos. norm. non-zero
; hwf : + 3988444736205337 211 (6.20557e+063) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001001 #b0100111111001111000101001001010110100010011111010101)))
(assert (= y (fp #b0 #b10011010010 #b1110001010110111100000100111101101010011001000011001)))
(assert (= r (fp #b0 #b10011010010 #b1110001010110111100000100111101101010011001000011001)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
