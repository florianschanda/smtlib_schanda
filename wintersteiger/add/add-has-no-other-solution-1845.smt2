(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.144330854121543783463721410953439772129058837890625p129 {+ 650008380839850 129 (7.78791e+038)}
; Y = -1.8469592537498893403125066470238380134105682373046875p901 {- 3814365379585995 901 (-3.12236e+271)}
; 1.144330854121543783463721410953439772129058837890625p129 + -1.8469592537498893403125066470238380134105682373046875p901 == -1.8469592537498893403125066470238380134105682373046875p901
; [HW: -1.8469592537498893403125066470238380134105682373046875p901] 

; mpf : - 3814365379585995 901
; mpfd: - 3814365379585995 901 (-3.12236e+271) class: Neg. norm. non-zero
; hwf : - 3814365379585995 901 (-3.12236e+271) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000000 #b0010010011110010110111011110101001000001011110101010)))
(assert (= y (fp #b1 #b11110000100 #b1101100011010010010100100101011111100110011111001011)))
(assert (= r (fp #b1 #b11110000100 #b1101100011010010010100100101011111100110011111001011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
