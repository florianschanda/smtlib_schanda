(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6126414060728031518721081738476641476154327392578125p273 {- 2759091608101213 273 (-2.44752e+082)}
; Y = -1.63499932636618705572573162498883903026580810546875p644 {- 2859782729603276 644 (-1.19353e+194)}
; -1.6126414060728031518721081738476641476154327392578125p273 + -1.63499932636618705572573162498883903026580810546875p644 == -1.63499932636618705572573162498883903026580810546875p644
; [HW: -1.63499932636618705572573162498883903026580810546875p644] 

; mpf : - 2859782729603276 644
; mpfd: - 2859782729603276 644 (-1.19353e+194) class: Neg. norm. non-zero
; hwf : - 2859782729603276 644 (-1.19353e+194) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010000 #b1001110011010110000100010011001101000010000101011101)))
(assert (= y (fp #b1 #b11010000011 #b1010001010001111010100001101101110111001100011001100)))
(assert (= r (fp #b1 #b11010000011 #b1010001010001111010100001101101110111001100011001100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
