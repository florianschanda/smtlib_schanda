(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9094954302111781796469358596368692815303802490234375p-258 {+ 4096003280594231 -258 (4.12268e-078)}
; Y = -1.7606865046201629620981066182139329612255096435546875p-560 {- 3425827458753131 -560 (-4.66535e-169)}
; 1.9094954302111781796469358596368692815303802490234375p-258 + -1.7606865046201629620981066182139329612255096435546875p-560 == 1.9094954302111781796469358596368692815303802490234375p-258
; [HW: 1.9094954302111781796469358596368692815303802490234375p-258] 

; mpf : + 4096003280594231 -258
; mpfd: + 4096003280594231 -258 (4.12268e-078) class: Pos. norm. non-zero
; hwf : + 4096003280594231 -258 (4.12268e-078) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011111101 #b1110100011010100101100010100100010011110010100110111)))
(assert (= y (fp #b1 #b00111001111 #b1100001010111100010110011100101111011010001001101011)))
(assert (= r (fp #b0 #b01011111101 #b1110100011010100101100010100100010011110010100110111)))
(assert (= (fp.add roundTowardPositive x y) r))
(check-sat)
(exit)
