(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5934808326185734284052841758239082992076873779296875p-36 {+ 2672800056632539 -36 (2.31882e-011)}
; Y = -1.912928138511267750487832017824985086917877197265625p335 {- 4111462824415386 335 (-1.3389e+101)}
; 1.5934808326185734284052841758239082992076873779296875p-36 + -1.912928138511267750487832017824985086917877197265625p335 == -1.9129281385112675284432270927936770021915435791015625p335
; [HW: -1.9129281385112675284432270927936770021915435791015625p335] 

; mpf : - 4111462824415385 335
; mpfd: - 4111462824415385 335 (-1.3389e+101) class: Neg. norm. non-zero
; hwf : - 4111462824415385 335 (-1.3389e+101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011011 #b1001011111101110010111000001111011100110010011011011)))
(assert (= y (fp #b1 #b10101001110 #b1110100110110101101010001001001010000001000010011010)))
(assert (= r (fp #b1 #b10101001110 #b1110100110110101101010001001001010000001000010011001)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
