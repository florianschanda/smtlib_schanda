(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.340314841858840200217173332930542528629302978515625p-525 {+ 1532641794984122 -525 (1.22028e-158)}
; Y = -1.65240642961668271482267300598323345184326171875p-877 {- 2938177353315808 -877 (-1.63987e-264)}
; 1.340314841858840200217173332930542528629302978515625p-525 + -1.65240642961668271482267300598323345184326171875p-877 == 1.3403148418588399781725684078992344439029693603515625p-525
; [HW: 1.3403148418588399781725684078992344439029693603515625p-525] 

; mpf : + 1532641794984121 -525
; mpfd: + 1532641794984121 -525 (1.22028e-158) class: Pos. norm. non-zero
; hwf : + 1532641794984121 -525 (1.22028e-158) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110010 #b0101011100011110110111111001110000100000100010111010)))
(assert (= y (fp #b1 #b00010010010 #b1010011100000100000110111001011011100111010111100000)))
(assert (= r (fp #b0 #b00111110010 #b0101011100011110110111111001110000100000100010111001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
