(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.898161939616267002151062115444801747798919677734375p-358 {+ 4044961776574182 -358 (3.23292e-108)}
; Y = -1.56420496117210117148488279781304299831390380859375p-292 {- 2540953252895260 -292 (-1.96578e-088)}
; 1.898161939616267002151062115444801747798919677734375p-358 + -1.56420496117210117148488279781304299831390380859375p-292 == -1.5642049611721009494402778727817349135875701904296875p-292
; [HW: -1.5642049611721009494402778727817349135875701904296875p-292] 

; mpf : - 2540953252895259 -292
; mpfd: - 2540953252895259 -292 (-1.96578e-088) class: Neg. norm. non-zero
; hwf : - 2540953252895259 -292 (-1.96578e-088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010011001 #b1110010111101101111100001101110100101001111011100110)))
(assert (= y (fp #b1 #b01011011011 #b1001000001101111101111001000000001111001101000011100)))
(assert (= r (fp #b1 #b01011011011 #b1001000001101111101111001000000001111001101000011011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
