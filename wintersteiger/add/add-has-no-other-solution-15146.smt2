(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.455373615584239388454079744406044483184814453125p528 {+ 2050820445459536 528 (1.27883e+159)}
; Y = 1.4723264373140583227694833112764172255992889404296875p-82 {+ 2127169167084827 -82 (3.0447e-025)}
; 1.455373615584239388454079744406044483184814453125p528 + 1.4723264373140583227694833112764172255992889404296875p-82 == 1.455373615584239388454079744406044483184814453125p528
; [HW: 1.455373615584239388454079744406044483184814453125p528] 

; mpf : + 2050820445459536 528
; mpfd: + 2050820445459536 528 (1.27883e+159) class: Pos. norm. non-zero
; hwf : + 2050820445459536 528 (1.27883e+159) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001111 #b0111010010010011010111011000001001100101010001010000)))
(assert (= y (fp #b0 #b01110101101 #b0111100011101010011000101010100101001100110100011011)))
(assert (= r (fp #b0 #b11000001111 #b0111010010010011010111011000001001100101010001010000)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
