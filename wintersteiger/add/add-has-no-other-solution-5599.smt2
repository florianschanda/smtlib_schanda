(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6974686687868298928805188552360050380229949951171875p995 {- 3141119636850963 995 (-5.68391e+299)}
; Y = -1.0288360351508349932458941111690364778041839599609375p302 {- 129865957160143 302 (-8.3831e+090)}
; -1.6974686687868298928805188552360050380229949951171875p995 + -1.0288360351508349932458941111690364778041839599609375p302 == -1.6974686687868298928805188552360050380229949951171875p995
; [HW: -1.6974686687868298928805188552360050380229949951171875p995] 

; mpf : - 3141119636850963 995
; mpfd: - 3141119636850963 995 (-5.68391e+299) class: Neg. norm. non-zero
; hwf : - 3141119636850963 995 (-5.68391e+299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100010 #b1011001010001101010011101000001001101100100100010011)))
(assert (= y (fp #b1 #b10100101101 #b0000011101100001110011000110001111101011010011001111)))
(assert (= r (fp #b1 #b11111100010 #b1011001010001101010011101000001001101100100100010011)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
