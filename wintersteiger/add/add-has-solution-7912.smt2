(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.862633025239729622768436456681229174137115478515625p-929 {+ 3884953771027130 -929 (4.10451e-280)}
; Y = -1.317782257016528735249494275194592773914337158203125p-196 {- 1431164054284594 -196 (-1.31209e-059)}
; 1.862633025239729622768436456681229174137115478515625p-929 + -1.317782257016528735249494275194592773914337158203125p-196 == -1.317782257016528735249494275194592773914337158203125p-196
; [HW: -1.317782257016528735249494275194592773914337158203125p-196] 

; mpf : - 1431164054284594 -196
; mpfd: - 1431164054284594 -196 (-1.31209e-059) class: Neg. norm. non-zero
; hwf : - 1431164054284594 -196 (-1.31209e-059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011110 #b1101110011010101100001001001011111011010101010111010)))
(assert (= y (fp #b1 #b01100111011 #b0101000101011010001011011001000100100010100100110010)))
(assert (= r (fp #b1 #b01100111011 #b0101000101011010001011011001000100100010100100110010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
