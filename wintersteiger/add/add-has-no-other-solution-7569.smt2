(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7493521170971264577786996596842072904109954833984375p797 {+ 3374781915327911 797 (1.45809e+240)}
; Y = -1.4782980730999943919101724532083608210086822509765625p-687 {- 2154063023785161 -687 (-2.30226e-207)}
; 1.7493521170971264577786996596842072904109954833984375p797 + -1.4782980730999943919101724532083608210086822509765625p-687 == 1.7493521170971264577786996596842072904109954833984375p797
; [HW: 1.7493521170971264577786996596842072904109954833984375p797] 

; mpf : + 3374781915327911 797
; mpfd: + 3374781915327911 797 (1.45809e+240) class: Pos. norm. non-zero
; hwf : + 3374781915327911 797 (1.45809e+240) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100011100 #b1011111111010101100010100101010000011110110110100111)))
(assert (= y (fp #b1 #b00101010000 #b0111101001110001101111100001010110110100010011001001)))
(assert (= r (fp #b0 #b11100011100 #b1011111111010101100010100101010000011110110110100111)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
