(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.056006765675939984561182427569292485713958740234375p-87 {- 252232049028390 -87 (-6.82428e-027)}
; Y = -1.551419989497589302374080943991430103778839111328125p659 {- 2483374859225986 659 (-3.71105e+198)}
; -1.056006765675939984561182427569292485713958740234375p-87 + -1.551419989497589302374080943991430103778839111328125p659 == -1.551419989497589302374080943991430103778839111328125p659
; [HW: -1.551419989497589302374080943991430103778839111328125p659] 

; mpf : - 2483374859225986 659
; mpfd: - 2483374859225986 659 (-3.71105e+198) class: Neg. norm. non-zero
; hwf : - 2483374859225986 659 (-3.71105e+198) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101000 #b0000111001010110011101011001101011101110110100100110)))
(assert (= y (fp #b1 #b11010010010 #b1000110100101001110111000100010101000000101110000010)))
(assert (= r (fp #b1 #b11010010010 #b1000110100101001110111000100010101000000101110000010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
