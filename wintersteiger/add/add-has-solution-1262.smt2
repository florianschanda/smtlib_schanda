(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3170794290373095680735104906489141285419464111328125p-937 {+ 1427998798459277 -937 (1.13372e-282)}
; Y = -1.0207374993143896180214369451277889311313629150390625p-435 {- 93393394184881 -435 (-1.15045e-131)}
; 1.3170794290373095680735104906489141285419464111328125p-937 + -1.0207374993143896180214369451277889311313629150390625p-435 == -1.0207374993143896180214369451277889311313629150390625p-435
; [HW: -1.0207374993143896180214369451277889311313629150390625p-435] 

; mpf : - 93393394184881 -435
; mpfd: - 93393394184881 -435 (-1.15045e-131) class: Neg. norm. non-zero
; hwf : - 93393394184881 -435 (-1.15045e-131) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010110 #b0101000100101100000111100001000111110011000110001101)))
(assert (= y (fp #b1 #b01001001100 #b0000010101001111000011011000000101011011001010110001)))
(assert (= r (fp #b1 #b01001001100 #b0000010101001111000011011000000101011011001010110001)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
