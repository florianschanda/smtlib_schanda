(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7266209390308475679631783350487239658832550048828125p311 {+ 3272409790258925 311 (7.2032e+093)}
; Y = 1.8953715274750726482722029686556197702884674072265625p876 {+ 4032394877494889 876 (9.54928e+263)}
; 1.7266209390308475679631783350487239658832550048828125p311 + 1.8953715274750726482722029686556197702884674072265625p876 == 1.8953715274750726482722029686556197702884674072265625p876
; [HW: 1.8953715274750726482722029686556197702884674072265625p876] 

; mpf : + 4032394877494889 876
; mpfd: + 4032394877494889 876 (9.54928e+263) class: Pos. norm. non-zero
; hwf : + 4032394877494889 876 (9.54928e+263) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100110110 #b1011101000000011110101000111000110111001111011101101)))
(assert (= y (fp #b0 #b11101101011 #b1110010100110111000100011000010001000110011001101001)))
(assert (= r (fp #b0 #b11101101011 #b1110010100110111000100011000010001000110011001101001)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
