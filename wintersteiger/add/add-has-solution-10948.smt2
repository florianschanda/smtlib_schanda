(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2696791064337276111473329365253448486328125p-641 {- 1214526723244544 -641 (-1.39145e-193)}
; Y = 1.26219530329689799685866091749630868434906005859375p-322 {+ 1180822670226204 -322 (1.4773e-097)}
; -1.2696791064337276111473329365253448486328125p-641 + 1.26219530329689799685866091749630868434906005859375p-322 == 1.2621953032968977748140559924650005996227264404296875p-322
; [HW: 1.2621953032968977748140559924650005996227264404296875p-322] 

; mpf : + 1180822670226203 -322
; mpfd: + 1180822670226203 -322 (1.4773e-097) class: Pos. norm. non-zero
; hwf : + 1180822670226203 -322 (1.4773e-097) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111110 #b0100010100001001101100001001111010001100001000000000)))
(assert (= y (fp #b0 #b01010111101 #b0100001100011111001110110011110011010011001100011100)))
(assert (= r (fp #b0 #b01010111101 #b0100001100011111001110110011110011010011001100011011)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
