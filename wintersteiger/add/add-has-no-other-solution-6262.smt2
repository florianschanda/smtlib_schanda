(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6446629687102733985426539220497943460941314697265625p91 {- 2903303905663145 91 (-4.07199e+027)}
; Y = -1.3597486478909066587306142537272535264492034912109375p-550 {- 1620163876588527 -550 (-3.68944e-166)}
; -1.6446629687102733985426539220497943460941314697265625p91 + -1.3597486478909066587306142537272535264492034912109375p-550 == -1.644662968710273620587258847081102430820465087890625p91
; [HW: -1.644662968710273620587258847081102430820465087890625p91] 

; mpf : - 2903303905663146 91
; mpfd: - 2903303905663146 91 (-4.07199e+027) class: Neg. norm. non-zero
; hwf : - 2903303905663146 91 (-4.07199e+027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011010 #b1010010100001000101000011101111110001101100010101001)))
(assert (= y (fp #b1 #b00111011001 #b0101110000011000011111001100010101111000101111101111)))
(assert (= r (fp #b1 #b10001011010 #b1010010100001000101000011101111110001101100010101010)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
