(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.93795251231658394175383364199660718441009521484375p1022 {- 4224162584960188 1022 (-8.70961e+307)}
; Y = -1.823053180085189683978796892915852367877960205078125p-930 {- 3706701995137762 -930 (-2.00865e-280)}
; -1.93795251231658394175383364199660718441009521484375p1022 + -1.823053180085189683978796892915852367877960205078125p-930 == -1.93795251231658394175383364199660718441009521484375p1022
; [HW: -1.93795251231658394175383364199660718441009521484375p1022] 

; mpf : - 4224162584960188 1022
; mpfd: - 4224162584960188 1022 (-8.70961e+307) class: Neg. norm. non-zero
; hwf : - 4224162584960188 1022 (-8.70961e+307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111101 #b1111000000011101101001111110010110011001110010111100)))
(assert (= y (fp #b1 #b00001011101 #b1101001010110011100111001111101101010101101011100010)))
(assert (= r (fp #b1 #b11111111101 #b1111000000011101101001111110010110011001110010111100)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
