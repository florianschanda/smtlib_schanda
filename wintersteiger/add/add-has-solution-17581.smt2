(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.054261380571583028853410723968409001827239990234375p764 {+ 244371533322790 764 (1.02297e+230)}
; Y = -1.2267350983027345279197106719948351383209228515625p-958 {- 1021124104228008 -958 (-5.03518e-289)}
; 1.054261380571583028853410723968409001827239990234375p764 + -1.2267350983027345279197106719948351383209228515625p-958 == 1.0542613805715828068088057989371009171009063720703125p764
; [HW: 1.0542613805715828068088057989371009171009063720703125p764] 

; mpf : + 244371533322789 764
; mpfd: + 244371533322789 764 (1.02297e+230) class: Pos. norm. non-zero
; hwf : + 244371533322789 764 (1.02297e+230) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011111011 #b0000110111100100000100101110011011111101101000100110)))
(assert (= y (fp #b1 #b00001000001 #b0011101000001011010011111011100000010000110010101000)))
(assert (= r (fp #b0 #b11011111011 #b0000110111100100000100101110011011111101101000100101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
