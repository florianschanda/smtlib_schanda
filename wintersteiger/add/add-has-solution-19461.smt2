(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0248142143041558682625691290013492107391357421875p-652 {+ 111753286293688 -652 (5.48388e-197)}
; Y = -1.17437240901273742821331325103528797626495361328125p-873 {- 785303516253460 -873 (-1.86475e-263)}
; 1.0248142143041558682625691290013492107391357421875p-652 + -1.17437240901273742821331325103528797626495361328125p-873 == 1.0248142143041556462179642039700411260128021240234375p-652
; [HW: 1.0248142143041556462179642039700411260128021240234375p-652] 

; mpf : + 111753286293687 -652
; mpfd: + 111753286293687 -652 (5.48388e-197) class: Pos. norm. non-zero
; hwf : + 111753286293687 -652 (5.48388e-197) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101110011 #b0000011001011010001110010110111011101001100010111000)))
(assert (= y (fp #b1 #b00010010110 #b0010110010100011101010111001001000001000110100010100)))
(assert (= r (fp #b0 #b00101110011 #b0000011001011010001110010110111011101001100010110111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
