(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.22281612081619872611781829618848860263824462890625p740 {- 1003474598679972 740 (-7.07226e+222)}
; Y = -1.932674784143868951247213772148825228214263916015625p-972 {- 4200393810328186 -972 (-4.84176e-293)}
; -1.22281612081619872611781829618848860263824462890625p740 + -1.932674784143868951247213772148825228214263916015625p-972 == -1.2228161208161989481624232212197966873645782470703125p740
; [HW: -1.2228161208161989481624232212197966873645782470703125p740] 

; mpf : - 1003474598679973 740
; mpfd: - 1003474598679973 740 (-7.07226e+222) class: Neg. norm. non-zero
; hwf : - 1003474598679973 740 (-7.07226e+222) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011100011 #b0011100100001010011110100010111111101101010110100100)))
(assert (= y (fp #b1 #b00000110011 #b1110111011000011110001100100111110110011101001111010)))
(assert (= r (fp #b1 #b11011100011 #b0011100100001010011110100010111111101101010110100101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
