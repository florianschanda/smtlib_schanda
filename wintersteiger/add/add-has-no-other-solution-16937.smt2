(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.432519140678316649228918322478421032428741455078125p-1022 {+ 1947893040789474 -1023 (9.62387e-309)}
; Y = 1.86957342005646598437351713073439896106719970703125p87 {+ 3916210530537588 87 (2.89302e+026)}
; 0.432519140678316649228918322478421032428741455078125p-1022 + 1.86957342005646598437351713073439896106719970703125p87 == 1.8695734200564662064181220557657070457935333251953125p87
; [HW: 1.8695734200564662064181220557657070457935333251953125p87] 

; mpf : + 3916210530537589 87
; mpfd: + 3916210530537589 87 (2.89302e+026) class: Pos. norm. non-zero
; hwf : + 3916210530537589 87 (2.89302e+026) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0110111010111001100100110000110000011011011111100010)))
(assert (= y (fp #b0 #b10001010110 #b1101111010011100010111010001100010011101000001110100)))
(assert (= r (fp #b0 #b10001010110 #b1101111010011100010111010001100010011101000001110101)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
