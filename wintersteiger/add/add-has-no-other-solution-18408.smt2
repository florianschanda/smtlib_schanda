(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.860565407170053475738313863985240459442138671875p124 {+ 3875642047058992 124 (3.95699e+037)}
; Y = -1.236596767264974250366549313184805214405059814453125p-314 {- 1065537112891602 -314 (-3.70518e-095)}
; 1.860565407170053475738313863985240459442138671875p124 + -1.236596767264974250366549313184805214405059814453125p-314 == 1.860565407170053475738313863985240459442138671875p124
; [HW: 1.860565407170053475738313863985240459442138671875p124] 

; mpf : + 3875642047058992 124
; mpfd: + 3875642047058992 124 (3.95699e+037) class: Pos. norm. non-zero
; hwf : + 3875642047058992 124 (3.95699e+037) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111011 #b1101110001001110000000111011011111011101010000110000)))
(assert (= y (fp #b1 #b01011000101 #b0011110010010001100110110001000110111110000011010010)))
(assert (= r (fp #b0 #b10001111011 #b1101110001001110000000111011011111011101010000110000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
