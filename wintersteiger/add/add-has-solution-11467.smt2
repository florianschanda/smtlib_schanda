(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.043103435680687862685545042040757834911346435546875p790 {- 194120616869934 790 (-6.79241e+237)}
; Y = -1.0592826169725275686772647532052360475063323974609375p133 {- 266985171707023 133 (-1.15346e+040)}
; -1.043103435680687862685545042040757834911346435546875p790 + -1.0592826169725275686772647532052360475063323974609375p133 == -1.0431034356806880847301499670720659196376800537109375p790
; [HW: -1.0431034356806880847301499670720659196376800537109375p790] 

; mpf : - 194120616869935 790
; mpfd: - 194120616869935 790 (-6.79241e+237) class: Neg. norm. non-zero
; hwf : - 194120616869935 790 (-6.79241e+237) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100010101 #b0000101100001000110100111010011010011000000000101110)))
(assert (= y (fp #b1 #b10010000100 #b0000111100101101001001010100010100011110010010001111)))
(assert (= r (fp #b1 #b11100010101 #b0000101100001000110100111010011010011000000000101111)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
