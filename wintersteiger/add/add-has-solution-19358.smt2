(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.271046504623132289424347618478350341320037841796875p-667 {- 1220684937220814 -667 (-2.07565e-201)}
; Y = 1.23929077541936738526828776230104267597198486328125p-404 {+ 1077669847011860 -404 (2.99954e-122)}
; -1.271046504623132289424347618478350341320037841796875p-667 + 1.23929077541936738526828776230104267597198486328125p-404 == 1.2392907754193671632236828372697345912456512451171875p-404
; [HW: 1.2392907754193671632236828372697345912456512451171875p-404] 

; mpf : + 1077669847011859 -404
; mpfd: + 1077669847011859 -404 (2.99954e-122) class: Pos. norm. non-zero
; hwf : + 1077669847011859 -404 (2.99954e-122) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101100100 #b0100010101100011010011011100000100001101001011001110)))
(assert (= y (fp #b0 #b01001101011 #b0011110101000010001010010000011010101001001000010100)))
(assert (= r (fp #b0 #b01001101011 #b0011110101000010001010010000011010101001001000010011)))
(assert (= (fp.add roundTowardZero x y) r))
(check-sat)
(exit)
