(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.26123442395488805090053574531339108943939208984375p275 {- 1176495254379580 275 (-7.65675e+082)}
; Y = 1.263826829592442191341206125798635184764862060546875p682 {+ 1188170411442862 682 (2.53597e+205)}
; -1.26123442395488805090053574531339108943939208984375p275 + 1.263826829592442191341206125798635184764862060546875p682 == 1.263826829592442191341206125798635184764862060546875p682
; [HW: 1.263826829592442191341206125798635184764862060546875p682] 

; mpf : + 1188170411442862 682
; mpfd: + 1188170411442862 682 (2.53597e+205) class: Pos. norm. non-zero
; hwf : + 1188170411442862 682 (2.53597e+205) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010010 #b0100001011100000010000100101101101111001110000111100)))
(assert (= y (fp #b0 #b11010101001 #b0100001110001010001001111011010011101000001010101110)))
(assert (= r (fp #b0 #b11010101001 #b0100001110001010001001111011010011101000001010101110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
