(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9142949592107909584370872835279442369937896728515625p-250 {- 4117618437608441 -250 (-1.05806e-075)}
; Y = -1.9573325948812756447381389079964719712734222412109375p344 {- 4311442717576943 344 (-7.01428e+103)}
; -1.9142949592107909584370872835279442369937896728515625p-250 + -1.9573325948812756447381389079964719712734222412109375p344 == -1.9573325948812756447381389079964719712734222412109375p344
; [HW: -1.9573325948812756447381389079964719712734222412109375p344] 

; mpf : - 4311442717576943 344
; mpfd: - 4311442717576943 344 (-7.01428e+103) class: Neg. norm. non-zero
; hwf : - 4311442717576943 344 (-7.01428e+103) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100000101 #b1110101000001111001111000000010010110101001111111001)))
(assert (= y (fp #b1 #b10101010111 #b1111010100010011101111111011101001101000111011101111)))
(assert (= r (fp #b1 #b10101010111 #b1111010100010011101111111011101001101000111011101111)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
