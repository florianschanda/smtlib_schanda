(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7935387146570203054096737105282954871654510498046875p-551 {- 3573780659633419 -551 (-2.43323e-166)}
; Y = -1.630454186353125667352514938102103769779205322265625p791 {- 2839313238734106 791 (-2.12342e+238)}
; -1.7935387146570203054096737105282954871654510498046875p-551 + -1.630454186353125667352514938102103769779205322265625p791 == -1.630454186353125667352514938102103769779205322265625p791
; [HW: -1.630454186353125667352514938102103769779205322265625p791] 

; mpf : - 2839313238734106 791
; mpfd: - 2839313238734106 791 (-2.12342e+238) class: Neg. norm. non-zero
; hwf : - 2839313238734106 791 (-2.12342e+238) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111011000 #b1100101100100101010110100110101110001111110100001011)))
(assert (= y (fp #b1 #b11100010110 #b1010000101100101011100100001000000000011010100011010)))
(assert (= r (fp #b1 #b11100010110 #b1010000101100101011100100001000000000011010100011010)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
