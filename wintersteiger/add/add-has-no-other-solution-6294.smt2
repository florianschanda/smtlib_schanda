(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.339303148656271869043621336459182202816009521484375p632 {+ 1528085533854022 632 (2.38691e+190)}
; Y = -1.49734295546686535516300864401273429393768310546875p814 {- 2239833548915916 814 (-1.63583e+245)}
; 1.339303148656271869043621336459182202816009521484375p632 + -1.49734295546686535516300864401273429393768310546875p814 == -1.49734295546686535516300864401273429393768310546875p814
; [HW: -1.49734295546686535516300864401273429393768310546875p814] 

; mpf : - 2239833548915916 814
; mpfd: - 2239833548915916 814 (-1.63583e+245) class: Neg. norm. non-zero
; hwf : - 2239833548915916 814 (-1.63583e+245) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110111 #b0101011011011100100100100011011011101000100101000110)))
(assert (= y (fp #b1 #b11100101101 #b0111111101010001110111100011000010100000010011001100)))
(assert (= r (fp #b1 #b11100101101 #b0111111101010001110111100011000010100000010011001100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
