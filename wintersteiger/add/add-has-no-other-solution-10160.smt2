(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9119863249872077748392484863870777189731597900390625p932 {- 4107221273379377 932 (-6.9413e+280)}
; Y = 1.31549147683112810369721046299673616886138916015625p415 {+ 1420847297495236 415 (1.11311e+125)}
; -1.9119863249872077748392484863870777189731597900390625p932 + 1.31549147683112810369721046299673616886138916015625p415 == -1.9119863249872077748392484863870777189731597900390625p932
; [HW: -1.9119863249872077748392484863870777189731597900390625p932] 

; mpf : - 4107221273379377 932
; mpfd: - 4107221273379377 932 (-6.9413e+280) class: Neg. norm. non-zero
; hwf : - 4107221273379377 932 (-6.9413e+280) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110100011 #b1110100101110111111011111001000000111000001000110001)))
(assert (= y (fp #b0 #b10110011110 #b0101000011000100000011001010011100101000000011000100)))
(assert (= r (fp #b1 #b11110100011 #b1110100101110111111011111001000000111000001000110001)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
