(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.64600640035297995922292102477513253688812255859375p941 {- 2909354183908636 941 (-3.05955e+283)}
; Y = -1.6534452321441006628077730056247673928737640380859375p-316 {- 2942855703991199 -316 (-1.23854e-095)}
; -1.64600640035297995922292102477513253688812255859375p941 + -1.6534452321441006628077730056247673928737640380859375p-316 == -1.64600640035297995922292102477513253688812255859375p941
; [HW: -1.64600640035297995922292102477513253688812255859375p941] 

; mpf : - 2909354183908636 941
; mpfd: - 2909354183908636 941 (-3.05955e+283) class: Neg. norm. non-zero
; hwf : - 2909354183908636 941 (-3.05955e+283) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110101100 #b1010010101100000101011001110101010000101110100011100)))
(assert (= y (fp #b1 #b01011000011 #b1010011101001000001011111100110111001001001110011111)))
(assert (= r (fp #b1 #b11110101100 #b1010010101100000101011001110101010000101110100011100)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
