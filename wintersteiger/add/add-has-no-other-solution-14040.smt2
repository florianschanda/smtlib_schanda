(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.793126188927790298777154021081514656543731689453125p-279 {- 3571922808912978 -279 (-1.84604e-084)}
; Y = -1.134730799297602121811223696568049490451812744140625p-661 {- 606773577512010 -661 (-1.18595e-199)}
; -1.793126188927790298777154021081514656543731689453125p-279 + -1.134730799297602121811223696568049490451812744140625p-661 == -1.7931261889277905208217589461128227412700653076171875p-279
; [HW: -1.7931261889277905208217589461128227412700653076171875p-279] 

; mpf : - 3571922808912979 -279
; mpfd: - 3571922808912979 -279 (-1.84604e-084) class: Neg. norm. non-zero
; hwf : - 3571922808912979 -279 (-1.84604e-084) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011101000 #b1100101100001010010100010110001100001011110001010010)))
(assert (= y (fp #b1 #b00101101010 #b0010001001111101101101111011100010111111010001001010)))
(assert (= r (fp #b1 #b01011101000 #b1100101100001010010100010110001100001011110001010011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
