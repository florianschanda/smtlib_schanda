(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9093920580946726062165907933376729488372802734375p-770 {+ 4095537733968856 -770 (3.07467e-232)}
; Y = -1.41811723776195464097327203489840030670166015625p680 {- 1883032636181920 680 (-7.11392e+204)}
; 1.9093920580946726062165907933376729488372802734375p-770 + -1.41811723776195464097327203489840030670166015625p680 == -1.41811723776195464097327203489840030670166015625p680
; [HW: -1.41811723776195464097327203489840030670166015625p680] 

; mpf : - 1883032636181920 680
; mpfd: - 1883032636181920 680 (-7.11392e+204) class: Neg. norm. non-zero
; hwf : - 1883032636181920 680 (-7.11392e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011111101 #b1110100011001101111010101111110011000010001111011000)))
(assert (= y (fp #b1 #b11010100111 #b0110101100001001101110110011011000010100110110100000)))
(assert (= r (fp #b1 #b11010100111 #b0110101100001001101110110011011000010100110110100000)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
