(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8932029381848416438316462517832405865192413330078125p-533 {- 4022628419575485 -533 (-6.73301e-161)}
; Y = 1.4169418723460125431046208177576772868633270263671875p-301 {+ 1877739260932659 -301 (3.47795e-091)}
; -1.8932029381848416438316462517832405865192413330078125p-533 + 1.4169418723460125431046208177576772868633270263671875p-301 == 1.4169418723460125431046208177576772868633270263671875p-301
; [HW: 1.4169418723460125431046208177576772868633270263671875p-301] 

; mpf : + 1877739260932659 -301
; mpfd: + 1877739260932659 -301 (3.47795e-091) class: Pos. norm. non-zero
; hwf : + 1877739260932659 -301 (3.47795e-091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101010 #b1110010010101000111100101010000000110001111010111101)))
(assert (= y (fp #b0 #b01011010010 #b0110101010111100101100111101101000001111001000110011)))
(assert (= r (fp #b0 #b01011010010 #b0110101010111100101100111101101000001111001000110011)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
