(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3943278902190516799208808151888661086559295654296875p-375 {- 1775894939452315 -375 (-1.81183e-113)}
; Y = -1.32162338571160820066552332718856632709503173828125p-306 {- 1448462960044436 -306 (-1.01375e-092)}
; -1.3943278902190516799208808151888661086559295654296875p-375 + -1.32162338571160820066552332718856632709503173828125p-306 == -1.3216233857116084227101282522198744118213653564453125p-306
; [HW: -1.3216233857116084227101282522198744118213653564453125p-306] 

; mpf : - 1448462960044437 -306
; mpfd: - 1448462960044437 -306 (-1.01375e-092) class: Neg. norm. non-zero
; hwf : - 1448462960044437 -306 (-1.01375e-092) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010001000 #b0110010011110010101011000011000001100100001110011011)))
(assert (= y (fp #b1 #b01011001101 #b0101001001010101111010010000001101000010100110010100)))
(assert (= r (fp #b1 #b01011001101 #b0101001001010101111010010000001101000010100110010101)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
