(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.03786560994934529134070544387213885784149169921875p801 {- 170531546858028 801 (-1.3841e+241)}
; Y = -1.8745317413591588984189684197190217673778533935546875p-532 {- 3938540824508779 -532 (-1.33332e-160)}
; -1.03786560994934529134070544387213885784149169921875p801 + -1.8745317413591588984189684197190217673778533935546875p-532 == -1.03786560994934529134070544387213885784149169921875p801
; [HW: -1.03786560994934529134070544387213885784149169921875p801] 

; mpf : - 170531546858028 801
; mpfd: - 170531546858028 801 (-1.3841e+241) class: Neg. norm. non-zero
; hwf : - 170531546858028 801 (-1.3841e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100100000 #b0000100110110001100011111000010001100000001000101100)))
(assert (= y (fp #b1 #b00111101011 #b1101111111100001010011111110110001110011100101101011)))
(assert (= r (fp #b1 #b11100100000 #b0000100110110001100011111000010001100000001000101100)))
(assert  (not (= (fp.add roundTowardZero x y) r)))
(check-sat)
(exit)
