(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5788002029538519277451769085018895566463470458984375p61 {- 2606684378344935 61 (-3.64047e+018)}
; Y = 1.592213342151733712626082706265151500701904296875p437 {+ 2667091787038384 437 (5.65079e+131)}
; -1.5788002029538519277451769085018895566463470458984375p61 + 1.592213342151733712626082706265151500701904296875p437 == 1.592213342151733712626082706265151500701904296875p437
; [HW: 1.592213342151733712626082706265151500701904296875p437] 

; mpf : + 2667091787038384 437
; mpfd: + 2667091787038384 437 (5.65079e+131) class: Pos. norm. non-zero
; hwf : + 2667091787038384 437 (5.65079e+131) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111100 #b1001010000101100010000000000011010011010110111100111)))
(assert (= y (fp #b0 #b10110110100 #b1001011110011011010010110010100011001011111010110000)))
(assert (= r (fp #b0 #b10110110100 #b1001011110011011010010110010100011001011111010110000)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
