(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.67173537981170650112971998169086873531341552734375p1020 {- 3025227206211580 1020 (-1.87829e+307)}
; Y = 1.5458947313381230515005881898105144500732421875p-42 {+ 2458491308637888 -42 (3.51496e-013)}
; -1.67173537981170650112971998169086873531341552734375p1020 + 1.5458947313381230515005881898105144500732421875p-42 == -1.67173537981170650112971998169086873531341552734375p1020
; [HW: -1.67173537981170650112971998169086873531341552734375p1020] 

; mpf : - 3025227206211580 1020
; mpfd: - 3025227206211580 1020 (-1.87829e+307) class: Neg. norm. non-zero
; hwf : - 3025227206211580 1020 (-1.87829e+307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111011 #b1010101111110110110110011000111111011011011111111100)))
(assert (= y (fp #b0 #b01111010101 #b1000101110111111110000011101001000100111111011000000)))
(assert (= r (fp #b1 #b11111111011 #b1010101111110110110110011000111111011011011111111100)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
