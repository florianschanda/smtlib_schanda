(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3384551717126929037959826018777675926685333251953125p562 {+ 1524266585206901 562 (2.02051e+169)}
; Y = 1.72786302613993303367578846518881618976593017578125p986 {+ 3278003653300564 986 (1.13002e+297)}
; 1.3384551717126929037959826018777675926685333251953125p562 + 1.72786302613993303367578846518881618976593017578125p986 == 1.72786302613993303367578846518881618976593017578125p986
; [HW: 1.72786302613993303367578846518881618976593017578125p986] 

; mpf : + 3278003653300564 986
; mpfd: + 3278003653300564 986 (1.13002e+297) class: Pos. norm. non-zero
; hwf : + 3278003653300564 986 (1.13002e+297) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000110001 #b0101011010100100111111111000010110101011000001110101)))
(assert (= y (fp #b0 #b11111011001 #b1011101001010101001110110011010100111101000101010100)))
(assert (= r (fp #b0 #b11111011001 #b1011101001010101001110110011010100111101000101010100)))
(assert (= (fp.add roundTowardNegative x y) r))
(check-sat)
(exit)
