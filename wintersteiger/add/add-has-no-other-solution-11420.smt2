(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.330921158407188276129318182938732206821441650390625p-719 {+ 1490336405691626 -719 (4.82598e-217)}
; Y = -1.5479443929887117814558905593003146350383758544921875p143 {- 2467722164083715 143 (-1.72602e+043)}
; 1.330921158407188276129318182938732206821441650390625p-719 + -1.5479443929887117814558905593003146350383758544921875p143 == -1.5479443929887117814558905593003146350383758544921875p143
; [HW: -1.5479443929887117814558905593003146350383758544921875p143] 

; mpf : - 2467722164083715 143
; mpfd: - 2467722164083715 143 (-1.72602e+043) class: Neg. norm. non-zero
; hwf : - 2467722164083715 143 (-1.72602e+043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110000 #b0101010010110111001111111100000011101001110011101010)))
(assert (= y (fp #b1 #b10010001110 #b1000110001000110000101010110111111101001110000000011)))
(assert (= r (fp #b1 #b10010001110 #b1000110001000110000101010110111111101001110000000011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
