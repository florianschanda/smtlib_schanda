(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1789274583436923915513716565328650176525115966796875p585 {- 805817634723003 585 (-1.49291e+176)}
; Y = -1.783040956131708210108399725868366658687591552734375p824 {- 3526502958250598 824 (-1.9947e+248)}
; -1.1789274583436923915513716565328650176525115966796875p585 + -1.783040956131708210108399725868366658687591552734375p824 == -1.7830409561317084321530046508996747434139251708984375p824
; [HW: -1.7830409561317084321530046508996747434139251708984375p824] 

; mpf : - 3526502958250599 824
; mpfd: - 3526502958250599 824 (-1.9947e+248) class: Neg. norm. non-zero
; hwf : - 3526502958250599 824 (-1.9947e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001000 #b0010110111001110001100001001110111110001010010111011)))
(assert (= y (fp #b1 #b11100110111 #b1100100001110101010111110100001000000011101001100110)))
(assert (= r (fp #b1 #b11100110111 #b1100100001110101010111110100001000000011101001100111)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
