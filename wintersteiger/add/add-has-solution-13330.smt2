(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.87255163254369083603023682371713221073150634765625p-535 {- 3929623207185284 -535 (-1.66489e-161)}
; Y = 1.173701021332039573508154717274010181427001953125p-540 {+ 782279854944848 -540 (3.26107e-163)}
; -1.87255163254369083603023682371713221073150634765625p-535 + 1.173701021332039573508154717274010181427001953125p-540 == -1.835873475627064710380409451317973434925079345703125p-535
; [HW: -1.835873475627064710380409451317973434925079345703125p-535] 

; mpf : - 3764439473362930 -535
; mpfd: - 3764439473362930 -535 (-1.63228e-161) class: Neg. norm. non-zero
; hwf : - 3764439473362930 -535 (-1.63228e-161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101000 #b1101111101011111100010110011010111011000101110000100)))
(assert (= y (fp #b0 #b00111100011 #b0010110001110111101010111000110111100111001001010000)))
(assert (= r (fp #b1 #b00111101000 #b1101010111111011110011011101100101101001011111110010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
