(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3009199645561289049311426424537785351276397705078125p212 {- 1355223040243325 212 (-8.56268e+063)}
; Y = 1.9842764160291206376740547057124786078929901123046875p-308 {+ 4432786900458315 -308 (3.80508e-093)}
; -1.3009199645561289049311426424537785351276397705078125p212 + 1.9842764160291206376740547057124786078929901123046875p-308 == -1.30091996455612868288653771742247045040130615234375p212
; [HW: -1.30091996455612868288653771742247045040130615234375p212] 

; mpf : - 1355223040243324 212
; mpfd: - 1355223040243324 212 (-8.56268e+063) class: Neg. norm. non-zero
; hwf : - 1355223040243324 212 (-8.56268e+063) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011010011 #b0100110100001001000101110011111001111011011001111101)))
(assert (= y (fp #b0 #b01011001011 #b1111101111111001100010100000100100010001101101001011)))
(assert (= r (fp #b1 #b10011010011 #b0100110100001001000101110011111001111011011001111100)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
