(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6313044793315560898605554029927588999271392822265625p926 {+ 2843142617874921 926 (9.25361e+278)}
; Y = -1.7188313334544249588731190669932402670383453369140625p-750 {- 3237328525487585 -750 (-2.90226e-226)}
; 1.6313044793315560898605554029927588999271392822265625p926 + -1.7188313334544249588731190669932402670383453369140625p-750 == 1.6313044793315560898605554029927588999271392822265625p926
; [HW: 1.6313044793315560898605554029927588999271392822265625p926] 

; mpf : + 2843142617874921 926
; mpfd: + 2843142617874921 926 (9.25361e+278) class: Pos. norm. non-zero
; hwf : + 2843142617874921 926 (9.25361e+278) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110011101 #b1010000110011101001010111001110010001100000111101001)))
(assert (= y (fp #b1 #b00100010001 #b1011100000000101010101001000110010000110110111100001)))
(assert (= r (fp #b0 #b11110011101 #b1010000110011101001010111001110010001100000111101001)))
(assert  (not (= (fp.add roundTowardPositive x y) r)))
(check-sat)
(exit)
