(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0551335105229482369537663544178940355777740478515625p503 {- 248299257446777 503 (-2.76309e+151)}
; Y = -1.920344944139662946014368571923114359378814697265625p924 {- 4144865147479706 924 (-2.7233e+278)}
; -1.0551335105229482369537663544178940355777740478515625p503 + -1.920344944139662946014368571923114359378814697265625p924 == -1.9203449441396631680589734969544224441051483154296875p924
; [HW: -1.9203449441396631680589734969544224441051483154296875p924] 

; mpf : - 4144865147479707 924
; mpfd: - 4144865147479707 924 (-2.7233e+278) class: Neg. norm. non-zero
; hwf : - 4144865147479707 924 (-2.7233e+278) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110110 #b0000111000011101001110101101000010011100000101111001)))
(assert (= y (fp #b1 #b11110011011 #b1110101110011011101110011110110000011110011010011010)))
(assert (= r (fp #b1 #b11110011011 #b1110101110011011101110011110110000011110011010011011)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
