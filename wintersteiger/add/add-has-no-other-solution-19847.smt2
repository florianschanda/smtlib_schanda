(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.645321697327694732138070321525447070598602294921875p822 {- 2906270555619102 822 (-4.60158e+247)}
; Y = 1.3447430705460965416619956158683635294437408447265625p-459 {+ 1552584764049961 -459 (9.03382e-139)}
; -1.645321697327694732138070321525447070598602294921875p822 + 1.3447430705460965416619956158683635294437408447265625p-459 == -1.645321697327694732138070321525447070598602294921875p822
; [HW: -1.645321697327694732138070321525447070598602294921875p822] 

; mpf : - 2906270555619102 822
; mpfd: - 2906270555619102 822 (-4.60158e+247) class: Neg. norm. non-zero
; hwf : - 2906270555619102 822 (-4.60158e+247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110101 #b1010010100110011110011011000000101101011111100011110)))
(assert (= y (fp #b0 #b01000110100 #b0101100001000001000101001111010110000100101000101001)))
(assert (= r (fp #b1 #b11100110101 #b1010010100110011110011011000000101101011111100011110)))
(assert  (not (= (fp.add roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
