(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.966894063902080436179176103905774652957916259765625p85 {- 4354503745896154 85 (-7.60905e+025)}
; Y = 1.7723257052636240960197255844832397997379302978515625p-852 {+ 3478245758433913 -852 (5.90184e-257)}
; -1.966894063902080436179176103905774652957916259765625p85 + 1.7723257052636240960197255844832397997379302978515625p-852 == -1.966894063902080436179176103905774652957916259765625p85
; [HW: -1.966894063902080436179176103905774652957916259765625p85] 

; mpf : - 4354503745896154 85
; mpfd: - 4354503745896154 85 (-7.60905e+025) class: Neg. norm. non-zero
; hwf : - 4354503745896154 85 (-7.60905e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010100 #b1111011110000110010111101000111100100111111011011010)))
(assert (= y (fp #b0 #b00010101011 #b1100010110110111001000110010110111110111101001111001)))
(assert (= r (fp #b1 #b10001010100 #b1111011110000110010111101000111100100111111011011010)))
(assert (= (fp.add roundNearestTiesToEven x y) r))
(check-sat)
(exit)
