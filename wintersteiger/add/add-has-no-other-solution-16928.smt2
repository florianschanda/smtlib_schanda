(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7700681500671906487553997067152522504329681396484375p609 {+ 3468078633692487 609 (3.7606e+183)}
; Y = -1.0158192353389232653881890655611641705036163330078125p-100 {- 71243502377661 -100 (-8.0134e-031)}
; 1.7700681500671906487553997067152522504329681396484375p609 + -1.0158192353389232653881890655611641705036163330078125p-100 == 1.770068150067190426710794781683944165706634521484375p609
; [HW: 1.770068150067190426710794781683944165706634521484375p609] 

; mpf : + 3468078633692486 609
; mpfd: + 3468078633692486 609 (3.7606e+183) class: Pos. norm. non-zero
; hwf : + 3468078633692486 609 (3.7606e+183) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001100000 #b1100010100100011001011111011000000111010110101000111)))
(assert (= y (fp #b1 #b01110011011 #b0000010000001100101110101011101001101101101010111101)))
(assert (= r (fp #b0 #b11001100000 #b1100010100100011001011111011000000111010110101000110)))
(assert  (not (= (fp.add roundTowardNegative x y) r)))
(check-sat)
(exit)
