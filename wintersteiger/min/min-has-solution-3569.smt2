(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6894758064683947917927753223921172320842742919921875p-646 {- 3105122985092035 -646 (-5.78595e-195)}
; Y = 1.83405194381064351460963735007680952548980712890625p-857 {+ 3756236023353252 -857 (1.90856e-258)}
; -1.6894758064683947917927753223921172320842742919921875p-646 m 1.83405194381064351460963735007680952548980712890625p-857 == -1.6894758064683947917927753223921172320842742919921875p-646
; [HW: -1.6894758064683947917927753223921172320842742919921875p-646] 

; mpf : - 3105122985092035 -646
; mpfd: - 3105122985092035 -646 (-5.78595e-195) class: Neg. norm. non-zero
; hwf : - 3105122985092035 -646 (-5.78595e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111001 #b1011000010000001011111001000100000101010001111000011)))
(assert (= y (fp #b0 #b00010100110 #b1101010110000100011011011001110111010100111110100100)))
(assert (= r (fp #b1 #b00101111001 #b1011000010000001011111001000100000101010001111000011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
