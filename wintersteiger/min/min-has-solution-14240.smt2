(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7946740780236958290316806596820242702960968017578125p-938 {+ 3578893881668509 -938 (7.72413e-283)}
; Y = -1.04518339519207525967203764594160020351409912109375p742 {- 203487921750364 742 (-2.41796e+223)}
; 1.7946740780236958290316806596820242702960968017578125p-938 m -1.04518339519207525967203764594160020351409912109375p742 == -1.04518339519207525967203764594160020351409912109375p742
; [HW: -1.04518339519207525967203764594160020351409912109375p742] 

; mpf : - 203487921750364 742
; mpfd: - 203487921750364 742 (-2.41796e+223) class: Neg. norm. non-zero
; hwf : - 203487921750364 742 (-2.41796e+223) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010101 #b1100101101101111110000101010100000010111001110011101)))
(assert (= y (fp #b1 #b11011100101 #b0000101110010001001000111001010010101100000101011100)))
(assert (= r (fp #b1 #b11011100101 #b0000101110010001001000111001010010101100000101011100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
