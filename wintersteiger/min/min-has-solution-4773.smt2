(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4813049030822023066633619237109087407588958740234375p-929 {- 2167604582172599 -929 (-3.26421e-280)}
; Y = 1.7286221063700664135609486038447357714176177978515625p-8 {+ 3281422246742137 -8 (0.00675243)}
; -1.4813049030822023066633619237109087407588958740234375p-929 m 1.7286221063700664135609486038447357714176177978515625p-8 == -1.4813049030822023066633619237109087407588958740234375p-929
; [HW: -1.4813049030822023066633619237109087407588958740234375p-929] 

; mpf : - 2167604582172599 -929
; mpfd: - 2167604582172599 -929 (-3.26421e-280) class: Neg. norm. non-zero
; hwf : - 2167604582172599 -929 (-3.26421e-280) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011110 #b0111101100110110110011000101001000100100011110110111)))
(assert (= y (fp #b0 #b01111110111 #b1011101010000110111110100111011000000000100001111001)))
(assert (= r (fp #b1 #b00001011110 #b0111101100110110110011000101001000100100011110110111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
