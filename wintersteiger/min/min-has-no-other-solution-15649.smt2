(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.95637360573444585298830133979208767414093017578125p105 {+ 4307123814412628 105 (7.93599e+031)}
; Y = -1.1792138666952391989894977086805738508701324462890625p44 {- 807107503268305 44 (-2.07449e+013)}
; 1.95637360573444585298830133979208767414093017578125p105 m -1.1792138666952391989894977086805738508701324462890625p44 == -1.1792138666952391989894977086805738508701324462890625p44
; [HW: -1.1792138666952391989894977086805738508701324462890625p44] 

; mpf : - 807107503268305 44
; mpfd: - 807107503268305 44 (-2.07449e+013) class: Neg. norm. non-zero
; hwf : - 807107503268305 44 (-2.07449e+013) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001101000 #b1111010011010100111001101000111101100011000101010100)))
(assert (= y (fp #b1 #b10000101011 #b0010110111100000111101011100000001110010000111010001)))
(assert (= r (fp #b1 #b10000101011 #b0010110111100000111101011100000001110010000111010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
