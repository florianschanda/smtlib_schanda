(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1805961339015567101995429766247980296611785888671875p-137 {+ 813332681343603 -137 (6.77629e-042)}
; Y = 1.4015731818888290671765162187512032687664031982421875p100 {+ 1808524832316515 100 (1.77671e+030)}
; 1.1805961339015567101995429766247980296611785888671875p-137 m 1.4015731818888290671765162187512032687664031982421875p100 == 1.1805961339015567101995429766247980296611785888671875p-137
; [HW: 1.1805961339015567101995429766247980296611785888671875p-137] 

; mpf : + 813332681343603 -137
; mpfd: + 813332681343603 -137 (6.77629e-042) class: Pos. norm. non-zero
; hwf : + 813332681343603 -137 (6.77629e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101110110 #b0010111000111011100011000101100011100100001001110011)))
(assert (= y (fp #b0 #b10001100011 #b0110011011001101100000000000001100101001110001100011)))
(assert (= r (fp #b0 #b01101110110 #b0010111000111011100011000101100011100100001001110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
