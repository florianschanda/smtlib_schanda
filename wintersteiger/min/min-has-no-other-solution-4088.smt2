(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8090637736529926460349315675557591021060943603515625p-470 {- 3643699309542585 -470 (-5.93411e-142)}
; Y = 1.894010739092198303268332892912440001964569091796875p331 {+ 4026266431440846 331 (8.28535e+099)}
; -1.8090637736529926460349315675557591021060943603515625p-470 m 1.894010739092198303268332892912440001964569091796875p331 == -1.8090637736529926460349315675557591021060943603515625p-470
; [HW: -1.8090637736529926460349315675557591021060943603515625p-470] 

; mpf : - 3643699309542585 -470
; mpfd: - 3643699309542585 -470 (-5.93411e-142) class: Neg. norm. non-zero
; hwf : - 3643699309542585 -470 (-5.93411e-142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101001 #b1100111100011110110011011011000000110111110010111001)))
(assert (= y (fp #b0 #b10101001010 #b1110010011011101111000110100011010101100011111001110)))
(assert (= r (fp #b1 #b01000101001 #b1100111100011110110011011011000000110111110010111001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
