(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8079352176049521272460651744040660560131072998046875p505 {- 3638616744945163 505 (-1.89379e+152)}
; Y = -1.6967136770840516302172318319207988679409027099609375p-596 {- 3137719456499663 -596 (-6.54231e-180)}
; -1.8079352176049521272460651744040660560131072998046875p505 m -1.6967136770840516302172318319207988679409027099609375p-596 == -1.8079352176049521272460651744040660560131072998046875p505
; [HW: -1.8079352176049521272460651744040660560131072998046875p505] 

; mpf : - 3638616744945163 505
; mpfd: - 3638616744945163 505 (-1.89379e+152) class: Neg. norm. non-zero
; hwf : - 3638616744945163 505 (-1.89379e+152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111111000 #b1100111011010100110101111010100011100110011000001011)))
(assert (= y (fp #b1 #b00110101011 #b1011001001011011110100111101100111000000011111001111)))
(assert (= r (fp #b1 #b10111111000 #b1100111011010100110101111010100011100110011000001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
