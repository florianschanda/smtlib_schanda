(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3861270413209594298820093172253109514713287353515625p186 {- 1738961599410745 186 (-1.35951e+056)}
; Y = 1.7061740307158237417439750061021186411380767822265625p863 {+ 3180325101590505 863 (1.04932e+260)}
; -1.3861270413209594298820093172253109514713287353515625p186 m 1.7061740307158237417439750061021186411380767822265625p863 == -1.3861270413209594298820093172253109514713287353515625p186
; [HW: -1.3861270413209594298820093172253109514713287353515625p186] 

; mpf : - 1738961599410745 186
; mpfd: - 1738961599410745 186 (-1.35951e+056) class: Neg. norm. non-zero
; hwf : - 1738961599410745 186 (-1.35951e+056) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010111001 #b0110001011011001001110001100011010010011001000111001)))
(assert (= y (fp #b0 #b11101011110 #b1011010011000111110100100011111100110101011111101001)))
(assert (= r (fp #b1 #b10010111001 #b0110001011011001001110001100011010010011001000111001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
