(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.03749957443329687833966090693138539791107177734375p517 {+ 168883069444348 517 (4.45139e+155)}
; Y = -1.9690930787084577335832591415964998304843902587890625p491 {- 4364407228158737 491 (-1.25891e+148)}
; 1.03749957443329687833966090693138539791107177734375p517 m -1.9690930787084577335832591415964998304843902587890625p491 == -1.9690930787084577335832591415964998304843902587890625p491
; [HW: -1.9690930787084577335832591415964998304843902587890625p491] 

; mpf : - 4364407228158737 491
; mpfd: - 4364407228158737 491 (-1.25891e+148) class: Neg. norm. non-zero
; hwf : - 4364407228158737 491 (-1.25891e+148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000000100 #b0000100110011001100100100111010111001110000011111100)))
(assert (= y (fp #b1 #b10111101010 #b1111100000010110011110111110011111010101001100010001)))
(assert (= r (fp #b1 #b10111101010 #b1111100000010110011110111110011111010101001100010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
