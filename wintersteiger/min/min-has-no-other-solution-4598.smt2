(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6351745413993874489477775568957440555095672607421875p-974 {- 2860571827961507 -974 (-1.02411e-293)}
; Y = -1.10281993057051419526715108077041804790496826171875p-723 {- 463059801003628 -723 (-2.4993e-218)}
; -1.6351745413993874489477775568957440555095672607421875p-974 m -1.10281993057051419526715108077041804790496826171875p-723 == -1.10281993057051419526715108077041804790496826171875p-723
; [HW: -1.10281993057051419526715108077041804790496826171875p-723] 

; mpf : - 463059801003628 -723
; mpfd: - 463059801003628 -723 (-2.4993e-218) class: Neg. norm. non-zero
; hwf : - 463059801003628 -723 (-2.4993e-218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000110001 #b1010001010011010110011000111101010001111111010100011)))
(assert (= y (fp #b1 #b00100101100 #b0001101001010010011010000010111100101101011001101100)))
(assert (= r (fp #b1 #b00100101100 #b0001101001010010011010000010111100101101011001101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
