(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1407750874248929751075820604455657303333282470703125p930 {+ 633994631269797 930 (1.03537e+280)}
; Y = -1.4139054829001997948267899118945933878421783447265625p-379 {- 1864064578555945 -379 (-1.14829e-114)}
; 1.1407750874248929751075820604455657303333282470703125p930 m -1.4139054829001997948267899118945933878421783447265625p-379 == -1.4139054829001997948267899118945933878421783447265625p-379
; [HW: -1.4139054829001997948267899118945933878421783447265625p-379] 

; mpf : - 1864064578555945 -379
; mpfd: - 1864064578555945 -379 (-1.14829e-114) class: Neg. norm. non-zero
; hwf : - 1864064578555945 -379 (-1.14829e-114) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100001 #b0010010000001001110101100000110010010100110110100101)))
(assert (= y (fp #b1 #b01010000100 #b0110100111110101101101011011000010110001000000101001)))
(assert (= r (fp #b1 #b01010000100 #b0110100111110101101101011011000010110001000000101001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
