(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1963190630014406412584548888844437897205352783203125p-871 {- 884142458979013 -871 (-7.59838e-263)}
; Y = 1.27423200144734227734488740679807960987091064453125p-797 {+ 1235031139531316 -797 (1.52877e-240)}
; -1.1963190630014406412584548888844437897205352783203125p-871 m 1.27423200144734227734488740679807960987091064453125p-797 == -1.1963190630014406412584548888844437897205352783203125p-871
; [HW: -1.1963190630014406412584548888844437897205352783203125p-871] 

; mpf : - 884142458979013 -871
; mpfd: - 884142458979013 -871 (-7.59838e-263) class: Neg. norm. non-zero
; hwf : - 884142458979013 -871 (-7.59838e-263) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011000 #b0011001001000001111101110101001100101100001011000101)))
(assert (= y (fp #b0 #b00011100010 #b0100011000110100000100011000010110111011101000110100)))
(assert (= r (fp #b1 #b00010011000 #b0011001001000001111101110101001100101100001011000101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
