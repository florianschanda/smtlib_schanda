(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9484650634179547790125752726453356444835662841796875p456 {- 4271506906183035 456 (-3.62552e+137)}
; Y = 1.22254451386051332661963897407986223697662353515625p-829 {+ 1002251389695556 -829 (3.41506e-250)}
; -1.9484650634179547790125752726453356444835662841796875p456 m 1.22254451386051332661963897407986223697662353515625p-829 == -1.9484650634179547790125752726453356444835662841796875p456
; [HW: -1.9484650634179547790125752726453356444835662841796875p456] 

; mpf : - 4271506906183035 456
; mpfd: - 4271506906183035 456 (-3.62552e+137) class: Neg. norm. non-zero
; hwf : - 4271506906183035 456 (-3.62552e+137) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000111 #b1111001011001110100110110011110011000111010101111011)))
(assert (= y (fp #b0 #b00011000010 #b0011100011111000101011010110000011101111011001000100)))
(assert (= r (fp #b1 #b10111000111 #b1111001011001110100110110011110011000111010101111011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
