(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8331876631426775592359490474336780607700347900390625p550 {- 3752343649259057 550 (-6.75623e+165)}
; Y = 1.004566280531334232506424086750485002994537353515625p-500 {+ 20564699299386 -500 (3.06889e-151)}
; -1.8331876631426775592359490474336780607700347900390625p550 m 1.004566280531334232506424086750485002994537353515625p-500 == -1.8331876631426775592359490474336780607700347900390625p550
; [HW: -1.8331876631426775592359490474336780607700347900390625p550] 

; mpf : - 3752343649259057 550
; mpfd: - 3752343649259057 550 (-6.75623e+165) class: Neg. norm. non-zero
; hwf : - 3752343649259057 550 (-6.75623e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100101 #b1101010101001011110010010110010010100000111000110001)))
(assert (= y (fp #b0 #b01000001011 #b0000000100101011010000010111100110001011111000111010)))
(assert (= r (fp #b1 #b11000100101 #b1101010101001011110010010110010010100000111000110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
