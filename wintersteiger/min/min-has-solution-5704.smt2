(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.891258363309457291023818470421247184276580810546875p637 {- 4013870832891310 637 (-1.07859e+192)}
; Y = -1.2194900740826692953078236314468085765838623046875p837 {- 988495415850232 837 (-1.1176e+252)}
; -1.891258363309457291023818470421247184276580810546875p637 m -1.2194900740826692953078236314468085765838623046875p837 == -1.2194900740826692953078236314468085765838623046875p837
; [HW: -1.2194900740826692953078236314468085765838623046875p837] 

; mpf : - 988495415850232 837
; mpfd: - 988495415850232 837 (-1.1176e+252) class: Neg. norm. non-zero
; hwf : - 988495415850232 837 (-1.1176e+252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111100 #b1110010000101001100000100001001010110011010110101110)))
(assert (= y (fp #b1 #b11101000100 #b0011100000110000100000000110000111111011010011111000)))
(assert (= r (fp #b1 #b11101000100 #b0011100000110000100000000110000111111011010011111000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
