(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0164876718357322982200230399030260741710662841796875p-560 {+ 74253872735611 -560 (2.69342e-169)}
; Y = 1.7830484822803744915376000790274702012538909912109375p-80 {+ 3526536853010927 -80 (1.4749e-024)}
; 1.0164876718357322982200230399030260741710662841796875p-560 m 1.7830484822803744915376000790274702012538909912109375p-80 == 1.0164876718357322982200230399030260741710662841796875p-560
; [HW: 1.0164876718357322982200230399030260741710662841796875p-560] 

; mpf : + 74253872735611 -560
; mpfd: + 74253872735611 -560 (2.69342e-169) class: Pos. norm. non-zero
; hwf : + 74253872735611 -560 (2.69342e-169) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001111 #b0000010000111000100010010011101101010010010101111011)))
(assert (= y (fp #b0 #b01110101111 #b1100100001110101110111011000011010010011100111101111)))
(assert (= r (fp #b0 #b00111001111 #b0000010000111000100010010011101101010010010101111011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
