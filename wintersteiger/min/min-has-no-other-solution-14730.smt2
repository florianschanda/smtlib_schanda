(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1039141074260510055893291792017407715320587158203125p-751 {+ 467987535482501 -751 (9.31984e-227)}
; Y = -1.638828070333570696703873181832022964954376220703125p284 {- 2877025859508082 284 (-5.09392e+085)}
; 1.1039141074260510055893291792017407715320587158203125p-751 m -1.638828070333570696703873181832022964954376220703125p284 == -1.638828070333570696703873181832022964954376220703125p284
; [HW: -1.638828070333570696703873181832022964954376220703125p284] 

; mpf : - 2877025859508082 284
; mpfd: - 2877025859508082 284 (-5.09392e+085) class: Neg. norm. non-zero
; hwf : - 2877025859508082 284 (-5.09392e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100010000 #b0001101010011010000111010110110011111100111010000101)))
(assert (= y (fp #b1 #b10100011011 #b1010001110001010001111001000010111011001011101110010)))
(assert (= r (fp #b1 #b10100011011 #b1010001110001010001111001000010111011001011101110010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
