(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4667636670072885518578686969703994691371917724609375p-590 {- 2102116676804111 -590 (-3.61962e-178)}
; Y = -1.1546156498902038212150955587276257574558258056640625p-637 {- 696326983231169 -637 (-2.02456e-192)}
; -1.4667636670072885518578686969703994691371917724609375p-590 m -1.1546156498902038212150955587276257574558258056640625p-637 == -1.4667636670072885518578686969703994691371917724609375p-590
; [HW: -1.4667636670072885518578686969703994691371917724609375p-590] 

; mpf : - 2102116676804111 -590
; mpfd: - 2102116676804111 -590 (-3.61962e-178) class: Neg. norm. non-zero
; hwf : - 2102116676804111 -590 (-3.61962e-178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110001 #b0111011101111101110100101101110011000001111000001111)))
(assert (= y (fp #b1 #b00110000010 #b0010011110010100111001000010011110111010011011000001)))
(assert (= r (fp #b1 #b00110110001 #b0111011101111101110100101101110011000001111000001111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
