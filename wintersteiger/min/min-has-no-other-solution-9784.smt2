(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.620804551683295624542324731010012328624725341796875p155 {+ 2795855147630798 155 (7.40253e+046)}
; Y = -1.1225939042536492440405027082306332886219024658203125p-29 {- 552113861514629 -29 (-2.09099e-009)}
; 1.620804551683295624542324731010012328624725341796875p155 m -1.1225939042536492440405027082306332886219024658203125p-29 == -1.1225939042536492440405027082306332886219024658203125p-29
; [HW: -1.1225939042536492440405027082306332886219024658203125p-29] 

; mpf : - 552113861514629 -29
; mpfd: - 552113861514629 -29 (-2.09099e-009) class: Neg. norm. non-zero
; hwf : - 552113861514629 -29 (-2.09099e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011010 #b1001111011101101000011000000111010110000000011001110)))
(assert (= y (fp #b1 #b01111100010 #b0001111101100010010100000110100101110101010110000101)))
(assert (= r (fp #b1 #b01111100010 #b0001111101100010010100000110100101110101010110000101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
