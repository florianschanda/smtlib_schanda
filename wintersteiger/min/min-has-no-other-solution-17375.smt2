(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0413522465203655098520130195538513362407684326171875p-198 {- 186233962020051 -198 (-2.59214e-060)}
; Y = 1.8021107712294350822190835970104672014713287353515625p105 {+ 3612385770418745 105 (7.31023e+031)}
; -1.0413522465203655098520130195538513362407684326171875p-198 m 1.8021107712294350822190835970104672014713287353515625p105 == -1.0413522465203655098520130195538513362407684326171875p-198
; [HW: -1.0413522465203655098520130195538513362407684326171875p-198] 

; mpf : - 186233962020051 -198
; mpfd: - 186233962020051 -198 (-2.59214e-060) class: Neg. norm. non-zero
; hwf : - 186233962020051 -198 (-2.59214e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111001 #b0000101010010110000011111001001001101011110011010011)))
(assert (= y (fp #b0 #b10001101000 #b1100110101010111001000011010101000110011001000111001)))
(assert (= r (fp #b1 #b01100111001 #b0000101010010110000011111001001001101011110011010011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
