(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1136306155459168021337745813070796430110931396484375p-150 {- 511746797830471 -150 (-7.80264e-046)}
; Y = 1.185405375600810717884314726688899099826812744140625p-964 {+ 834991580468298 -964 (7.60241e-291)}
; -1.1136306155459168021337745813070796430110931396484375p-150 m 1.185405375600810717884314726688899099826812744140625p-964 == -1.1136306155459168021337745813070796430110931396484375p-150
; [HW: -1.1136306155459168021337745813070796430110931396484375p-150] 

; mpf : - 511746797830471 -150
; mpfd: - 511746797830471 -150 (-7.80264e-046) class: Neg. norm. non-zero
; hwf : - 511746797830471 -150 (-7.80264e-046) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101001 #b0001110100010110111001010110000110011000000101000111)))
(assert (= y (fp #b0 #b00000111011 #b0010111101110110101110100000100010110101010001001010)))
(assert (= r (fp #b1 #b01101101001 #b0001110100010110111001010110000110011000000101000111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
