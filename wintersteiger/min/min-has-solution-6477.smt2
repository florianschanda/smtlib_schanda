(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.48497319687052975467622673022560775279998779296875p-546 {- 2184125108710796 -546 (-6.44675e-165)}
; Y = 1.511029223003097943234251943067647516727447509765625p-526 {+ 2301471018292186 -526 (6.87852e-159)}
; -1.48497319687052975467622673022560775279998779296875p-546 m 1.511029223003097943234251943067647516727447509765625p-526 == -1.48497319687052975467622673022560775279998779296875p-546
; [HW: -1.48497319687052975467622673022560775279998779296875p-546] 

; mpf : - 2184125108710796 -546
; mpfd: - 2184125108710796 -546 (-6.44675e-165) class: Neg. norm. non-zero
; hwf : - 2184125108710796 -546 (-6.44675e-165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111011101 #b0111110000100111001101000001001111111110110110001100)))
(assert (= y (fp #b0 #b00111110001 #b1000001011010010110011111010100000011001001111011010)))
(assert (= r (fp #b1 #b00111011101 #b0111110000100111001101000001001111111110110110001100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
