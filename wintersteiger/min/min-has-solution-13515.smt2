(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1344424350015638314204124981188215315341949462890625p809 {- 605474900175825 809 (-3.87301e+243)}
; Y = 1.7109536730062251397299633026705123484134674072265625p468 {+ 3201850696828521 468 (1.304e+141)}
; -1.1344424350015638314204124981188215315341949462890625p809 m 1.7109536730062251397299633026705123484134674072265625p468 == -1.1344424350015638314204124981188215315341949462890625p809
; [HW: -1.1344424350015638314204124981188215315341949462890625p809] 

; mpf : - 605474900175825 809
; mpfd: - 605474900175825 809 (-3.87301e+243) class: Neg. norm. non-zero
; hwf : - 605474900175825 809 (-3.87301e+243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101000 #b0010001001101010110100011100010110000110101111010001)))
(assert (= y (fp #b0 #b10111010011 #b1011011000000001000011110101011010001000011001101001)))
(assert (= r (fp #b1 #b11100101000 #b0010001001101010110100011100010110000110101111010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
