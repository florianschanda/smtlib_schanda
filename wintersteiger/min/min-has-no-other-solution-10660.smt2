(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4692525175954840310765803224057890474796295166015625p-320 {+ 2113325463385689 -320 (6.87856e-097)}
; Y = -1.5197228854941815523460491021978668868541717529296875p-861 {- 2340623793447515 -861 (-9.88412e-260)}
; 1.4692525175954840310765803224057890474796295166015625p-320 m -1.5197228854941815523460491021978668868541717529296875p-861 == -1.5197228854941815523460491021978668868541717529296875p-861
; [HW: -1.5197228854941815523460491021978668868541717529296875p-861] 

; mpf : - 2340623793447515 -861
; mpfd: - 2340623793447515 -861 (-9.88412e-260) class: Neg. norm. non-zero
; hwf : - 2340623793447515 -861 (-9.88412e-260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010111111 #b0111100000100000111011101101100010100011011001011001)))
(assert (= y (fp #b1 #b00010100010 #b1000010100001100100011110001110000101110001001011011)))
(assert (= r (fp #b1 #b00010100010 #b1000010100001100100011110001110000101110001001011011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
