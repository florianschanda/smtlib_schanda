(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0549516052183440795175783932791091501712799072265625p-465 {- 247480028784745 -465 (-1.10735e-140)}
; Y = -1.3193158051586546530842269930872134864330291748046875p-282 {- 1438070541126027 -282 (-1.69781e-085)}
; -1.0549516052183440795175783932791091501712799072265625p-465 m -1.3193158051586546530842269930872134864330291748046875p-282 == -1.3193158051586546530842269930872134864330291748046875p-282
; [HW: -1.3193158051586546530842269930872134864330291748046875p-282] 

; mpf : - 1438070541126027 -282
; mpfd: - 1438070541126027 -282 (-1.69781e-085) class: Neg. norm. non-zero
; hwf : - 1438070541126027 -282 (-1.69781e-085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101110 #b0000111000010001010011101111001101000110100001101001)))
(assert (= y (fp #b1 #b01011100101 #b0101000110111110101011100011110001000000100110001011)))
(assert (= r (fp #b1 #b01011100101 #b0101000110111110101011100011110001000000100110001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
