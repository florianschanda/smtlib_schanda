(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9184052690587198863880757926381193101406097412109375p-828 {+ 4136129627507951 -828 (1.07178e-249)}
; Y = -1.2066105383479455159800863839336670935153961181640625p-942 {- 930491143514625 -942 (-3.24572e-284)}
; 1.9184052690587198863880757926381193101406097412109375p-828 m -1.2066105383479455159800863839336670935153961181640625p-942 == -1.2066105383479455159800863839336670935153961181640625p-942
; [HW: -1.2066105383479455159800863839336670935153961181640625p-942] 

; mpf : - 930491143514625 -942
; mpfd: - 930491143514625 -942 (-3.24572e-284) class: Neg. norm. non-zero
; hwf : - 930491143514625 -942 (-3.24572e-284) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000011 #b1110101100011100100110111001001100010100110011101111)))
(assert (= y (fp #b1 #b00001010001 #b0011010011100100011011011010000100110110101000000001)))
(assert (= r (fp #b1 #b00001010001 #b0011010011100100011011011010000100110110101000000001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
