(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.003303939602528505048439910751767456531524658203125p399 {- 14879621162802 399 (-1.29539e+120)}
; Y = 1.3761329229992877998256517457775771617889404296875p-323 {+ 1693952091861368 -323 (8.05326e-098)}
; -1.003303939602528505048439910751767456531524658203125p399 m 1.3761329229992877998256517457775771617889404296875p-323 == -1.003303939602528505048439910751767456531524658203125p399
; [HW: -1.003303939602528505048439910751767456531524658203125p399] 

; mpf : - 14879621162802 399
; mpfd: - 14879621162802 399 (-1.29539e+120) class: Neg. norm. non-zero
; hwf : - 14879621162802 399 (-1.29539e+120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001110 #b0000000011011000100001101110100010001010011100110010)))
(assert (= y (fp #b0 #b01010111100 #b0110000001001010001111110100101100111011000101111000)))
(assert (= r (fp #b1 #b10110001110 #b0000000011011000100001101110100010001010011100110010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
