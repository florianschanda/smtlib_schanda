(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2608759145280961089241600348032079637050628662109375p-862 {- 1174880671458671 -862 (-4.1003e-260)}
; Y = 1.2088697590248276281243988705682568252086639404296875p-115 {+ 940665768913179 -115 (2.91025e-035)}
; -1.2608759145280961089241600348032079637050628662109375p-862 m 1.2088697590248276281243988705682568252086639404296875p-115 == -1.2608759145280961089241600348032079637050628662109375p-862
; [HW: -1.2608759145280961089241600348032079637050628662109375p-862] 

; mpf : - 1174880671458671 -862
; mpfd: - 1174880671458671 -862 (-4.1003e-260) class: Neg. norm. non-zero
; hwf : - 1174880671458671 -862 (-4.1003e-260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010100001 #b0100001011001000110000111001000100110110010101101111)))
(assert (= y (fp #b0 #b01110001100 #b0011010101111000011111010001000000100010100100011011)))
(assert (= r (fp #b1 #b00010100001 #b0100001011001000110000111001000100110110010101101111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
