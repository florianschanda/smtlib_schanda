(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.982466602274765232749587084981612861156463623046875p257 {+ 4424636223908590 257 (4.59108e+077)}
; Y = -1.964732683363802134834941170993261039257049560546875p173 {- 4344769753309358 173 (-2.3523e+052)}
; 1.982466602274765232749587084981612861156463623046875p257 m -1.964732683363802134834941170993261039257049560546875p173 == -1.964732683363802134834941170993261039257049560546875p173
; [HW: -1.964732683363802134834941170993261039257049560546875p173] 

; mpf : - 4344769753309358 173
; mpfd: - 4344769753309358 173 (-2.3523e+052) class: Neg. norm. non-zero
; hwf : - 4344769753309358 173 (-2.3523e+052) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000000 #b1111101110000010111011100110011000101110101011101110)))
(assert (= y (fp #b1 #b10010101100 #b1111011011111000101110001001110001101110000010101110)))
(assert (= r (fp #b1 #b10010101100 #b1111011011111000101110001001110001101110000010101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
