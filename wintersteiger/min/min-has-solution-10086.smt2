(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9456064992659178880529680100153200328350067138671875p-522 {- 4258633077733107 -522 (-1.41709e-157)}
; Y = 1.8143099231031794005275514791719615459442138671875p892 {+ 3667325866251576 892 (5.99056e+268)}
; -1.9456064992659178880529680100153200328350067138671875p-522 m 1.8143099231031794005275514791719615459442138671875p892 == -1.9456064992659178880529680100153200328350067138671875p-522
; [HW: -1.9456064992659178880529680100153200328350067138671875p-522] 

; mpf : - 4258633077733107 -522
; mpfd: - 4258633077733107 -522 (-1.41709e-157) class: Neg. norm. non-zero
; hwf : - 4258633077733107 -522 (-1.41709e-157) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110101 #b1111001000010011010001000111110100111011011011110011)))
(assert (= y (fp #b0 #b11101111011 #b1101000001110110100111010111100010001001010100111000)))
(assert (= r (fp #b1 #b00111110101 #b1111001000010011010001000111110100111011011011110011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
