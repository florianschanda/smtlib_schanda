(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7900922203742182237107272158027626574039459228515625p-621 {+ 3558259029265657 -621 (2.05707e-187)}
; Y = -1.4502613697977173590203392450348474085330963134765625p-607 {- 2027796937240329 -607 (-2.73048e-183)}
; 1.7900922203742182237107272158027626574039459228515625p-621 m -1.4502613697977173590203392450348474085330963134765625p-607 == -1.4502613697977173590203392450348474085330963134765625p-607
; [HW: -1.4502613697977173590203392450348474085330963134765625p-607] 

; mpf : - 2027796937240329 -607
; mpfd: - 2027796937240329 -607 (-2.73048e-183) class: Neg. norm. non-zero
; hwf : - 2027796937240329 -607 (-2.73048e-183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010010 #b1100101001000011011110111101011101010100110011111001)))
(assert (= y (fp #b1 #b00110100000 #b0111001101000100010101000100000111101110111100001001)))
(assert (= r (fp #b1 #b00110100000 #b0111001101000100010101000100000111101110111100001001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
