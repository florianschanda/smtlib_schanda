(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.059297322858020695690584034309722483158111572265625p144 {- 267051401127450 144 (-2.36231e+043)}
; Y = 1.592736624609196294244384262128733098506927490234375p725 {+ 2669448441718822 725 (2.81119e+218)}
; -1.059297322858020695690584034309722483158111572265625p144 m 1.592736624609196294244384262128733098506927490234375p725 == -1.059297322858020695690584034309722483158111572265625p144
; [HW: -1.059297322858020695690584034309722483158111572265625p144] 

; mpf : - 267051401127450 144
; mpfd: - 267051401127450 144 (-2.36231e+043) class: Neg. norm. non-zero
; hwf : - 267051401127450 144 (-2.36231e+043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001111 #b0000111100101110000110111111111001101010011000011010)))
(assert (= y (fp #b0 #b11011010100 #b1001011110111101100101100110000111010110100000100110)))
(assert (= r (fp #b1 #b10010001111 #b0000111100101110000110111111111001101010011000011010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
