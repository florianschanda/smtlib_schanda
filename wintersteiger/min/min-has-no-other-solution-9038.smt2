(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.60513123544783997687090959516353905200958251953125p89 {+ 2725268806473140 89 (9.93528e+026)}
; Y = 1.6955279990455862648701668149442411959171295166015625p-712 {+ 3132379637327449 -712 (7.86952e-215)}
; 1.60513123544783997687090959516353905200958251953125p89 m 1.6955279990455862648701668149442411959171295166015625p-712 == 1.6955279990455862648701668149442411959171295166015625p-712
; [HW: 1.6955279990455862648701668149442411959171295166015625p-712] 

; mpf : + 3132379637327449 -712
; mpfd: + 3132379637327449 -712 (7.86952e-215) class: Pos. norm. non-zero
; hwf : + 3132379637327449 -712 (7.86952e-215) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001011000 #b1001101011101001111000010111001000001001010110110100)))
(assert (= y (fp #b0 #b00100110111 #b1011001000001110000111110111100101011010011001011001)))
(assert (= r (fp #b0 #b00100110111 #b1011001000001110000111110111100101011010011001011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
