(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2421629541907701632652560874703340232372283935546875p-1014 {- 1090604990256491 -1014 (-7.0756e-306)}
; Y = -1.8316211260080661471505436566076241433620452880859375p372 {- 3745288593203359 372 (-1.76195e+112)}
; -1.2421629541907701632652560874703340232372283935546875p-1014 m -1.8316211260080661471505436566076241433620452880859375p372 == -1.8316211260080661471505436566076241433620452880859375p372
; [HW: -1.8316211260080661471505436566076241433620452880859375p372] 

; mpf : - 3745288593203359 372
; mpfd: - 3745288593203359 372 (-1.76195e+112) class: Neg. norm. non-zero
; hwf : - 3745288593203359 372 (-1.76195e+112) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001001 #b0011110111111110011001000011000010001101010101101011)))
(assert (= y (fp #b1 #b10101110011 #b1101010011100101000111110100001011011110000010011111)))
(assert (= r (fp #b1 #b10101110011 #b1101010011100101000111110100001011011110000010011111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
