(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.846749567349922127590389209217391908168792724609375p-22 {+ 3813421035993238 -22 (4.40299e-007)}
; Y = 1.4266791539957719425757431963575072586536407470703125p-829 {+ 1921592078942117 -829 (3.98529e-250)}
; 1.846749567349922127590389209217391908168792724609375p-22 m 1.4266791539957719425757431963575072586536407470703125p-829 == 1.4266791539957719425757431963575072586536407470703125p-829
; [HW: 1.4266791539957719425757431963575072586536407470703125p-829] 

; mpf : + 1921592078942117 -829
; mpfd: + 1921592078942117 -829 (3.98529e-250) class: Pos. norm. non-zero
; hwf : + 1921592078942117 -829 (3.98529e-250) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101001 #b1101100011000100100101000110001110101011100010010110)))
(assert (= y (fp #b0 #b00011000010 #b0110110100111010110110000101010001001011111110100101)))
(assert (= r (fp #b0 #b00011000010 #b0110110100111010110110000101010001001011111110100101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
