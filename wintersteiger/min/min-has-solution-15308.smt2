(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8476631447677591690847975769429467618465423583984375p-391 {+ 3817535422911783 -391 (3.66349e-118)}
; Y = 1.9682345943140671096216465230099856853485107421875p232 {+ 4360540958160056 232 (1.35843e+070)}
; 1.8476631447677591690847975769429467618465423583984375p-391 m 1.9682345943140671096216465230099856853485107421875p232 == 1.8476631447677591690847975769429467618465423583984375p-391
; [HW: 1.8476631447677591690847975769429467618465423583984375p-391] 

; mpf : + 3817535422911783 -391
; mpfd: + 3817535422911783 -391 (3.66349e-118) class: Pos. norm. non-zero
; hwf : + 3817535422911783 -391 (3.66349e-118) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111000 #b1101100100000000011100111010110011001101010100100111)))
(assert (= y (fp #b0 #b10011100111 #b1111011111011110001110001110110101101111010010111000)))
(assert (= r (fp #b0 #b01001111000 #b1101100100000000011100111010110011001101010100100111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
