(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.113906637750370354211781886988319456577301025390625p-1011 {- 512989891327594 -1011 (-5.07602e-305)}
; Y = 1.563030187220815658832862027338705956935882568359375p-999 {+ 2535662541366006 -999 (2.91744e-301)}
; -1.113906637750370354211781886988319456577301025390625p-1011 m 1.563030187220815658832862027338705956935882568359375p-999 == -1.113906637750370354211781886988319456577301025390625p-1011
; [HW: -1.113906637750370354211781886988319456577301025390625p-1011] 

; mpf : - 512989891327594 -1011
; mpfd: - 512989891327594 -1011 (-5.07602e-305) class: Neg. norm. non-zero
; hwf : - 512989891327594 -1011 (-5.07602e-305) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001100 #b0001110100101000111111000100001111101111011001101010)))
(assert (= y (fp #b0 #b00000011000 #b1001000000100010101111110001000011000110001011110110)))
(assert (= r (fp #b1 #b00000001100 #b0001110100101000111111000100001111101111011001101010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
