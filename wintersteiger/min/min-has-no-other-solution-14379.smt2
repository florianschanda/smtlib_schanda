(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.649982481886947294213996428879909217357635498046875p-969 {+ 2927260863223406 -969 (3.30684e-292)}
; Y = -1.2708565617630735999910029931925237178802490234375p-616 {- 1219829510627032 -616 (-4.67325e-186)}
; 1.649982481886947294213996428879909217357635498046875p-969 m -1.2708565617630735999910029931925237178802490234375p-616 == -1.2708565617630735999910029931925237178802490234375p-616
; [HW: -1.2708565617630735999910029931925237178802490234375p-616] 

; mpf : - 1219829510627032 -616
; mpfd: - 1219829510627032 -616 (-4.67325e-186) class: Neg. norm. non-zero
; hwf : - 1219829510627032 -616 (-4.67325e-186) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000110110 #b1010011001100101010000000111111010101101011001101110)))
(assert (= y (fp #b1 #b00110010111 #b0100010101010110110110110000101010101101111011011000)))
(assert (= r (fp #b1 #b00110010111 #b0100010101010110110110110000101010101101111011011000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
