(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.460687488871504680076895965612493455410003662109375p-53 {+ 2074752003215958 -53 (1.62169e-016)}
; Y = -1.590699469010157240944636214408092200756072998046875p-281 {- 2660273908522094 -281 (-4.09411e-085)}
; 1.460687488871504680076895965612493455410003662109375p-53 m -1.590699469010157240944636214408092200756072998046875p-281 == -1.590699469010157240944636214408092200756072998046875p-281
; [HW: -1.590699469010157240944636214408092200756072998046875p-281] 

; mpf : - 2660273908522094 -281
; mpfd: - 2660273908522094 -281 (-4.09411e-085) class: Neg. norm. non-zero
; hwf : - 2660273908522094 -281 (-4.09411e-085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001010 #b0111010111101111100111011000001001100001001001010110)))
(assert (= y (fp #b1 #b01011100110 #b1001011100111000000101001001010100101001110001101110)))
(assert (= r (fp #b1 #b01011100110 #b1001011100111000000101001001010100101001110001101110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
