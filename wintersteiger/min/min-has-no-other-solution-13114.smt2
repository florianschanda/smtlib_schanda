(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.670568159391222717857772295246832072734832763671875p324 {- 3019970512760830 324 (-5.7093e+097)}
; Y = 1.92047768873041579951177482143975794315338134765625p595 {+ 4145462975969156 595 (2.49033e+179)}
; -1.670568159391222717857772295246832072734832763671875p324 m 1.92047768873041579951177482143975794315338134765625p595 == -1.670568159391222717857772295246832072734832763671875p324
; [HW: -1.670568159391222717857772295246832072734832763671875p324] 

; mpf : - 3019970512760830 324
; mpfd: - 3019970512760830 324 (-5.7093e+097) class: Neg. norm. non-zero
; hwf : - 3019970512760830 324 (-5.7093e+097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000011 #b1010101110101010010110101101101001010010111111111110)))
(assert (= y (fp #b0 #b11001010010 #b1110101110100100011011010000000111001011011110000100)))
(assert (= r (fp #b1 #b10101000011 #b1010101110101010010110101101101001010010111111111110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
