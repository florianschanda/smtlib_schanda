(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.16009696384153482284773417632095515727996826171875p-81 {- 721012626699884 -81 (-4.79805e-025)}
; Y = 1.7870477440869085850039255092269740998744964599609375p614 {+ 3544547926992591 614 (1.21494e+185)}
; -1.16009696384153482284773417632095515727996826171875p-81 m 1.7870477440869085850039255092269740998744964599609375p614 == -1.16009696384153482284773417632095515727996826171875p-81
; [HW: -1.16009696384153482284773417632095515727996826171875p-81] 

; mpf : - 721012626699884 -81
; mpfd: - 721012626699884 -81 (-4.79805e-025) class: Neg. norm. non-zero
; hwf : - 721012626699884 -81 (-4.79805e-025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101110 #b0010100011111100000111010101011111100011011001101100)))
(assert (= y (fp #b0 #b11001100101 #b1100100101111011111101100000000100111110011011001111)))
(assert (= r (fp #b1 #b01110101110 #b0010100011111100000111010101011111100011011001101100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
