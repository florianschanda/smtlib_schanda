(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.40975399550123992042927056900225579738616943359375p298 {+ 1845367941452956 298 (7.1793e+089)}
; Y = 1.539825666614225152528661055839620530605316162109375p402 {+ 2431158671008854 402 (1.59049e+121)}
; 1.40975399550123992042927056900225579738616943359375p298 m 1.539825666614225152528661055839620530605316162109375p402 == 1.40975399550123992042927056900225579738616943359375p298
; [HW: 1.40975399550123992042927056900225579738616943359375p298] 

; mpf : + 1845367941452956 298
; mpfd: + 1845367941452956 298 (7.1793e+089) class: Pos. norm. non-zero
; hwf : + 1845367941452956 298 (7.1793e+089) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101001 #b0110100011100101101000110100101000010101010010011100)))
(assert (= y (fp #b0 #b10110010001 #b1000101000110010000000111100111110100110010001010110)))
(assert (= r (fp #b0 #b10100101001 #b0110100011100101101000110100101000010101010010011100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
