(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.536200663403843424958949981373734772205352783203125p-483 {+ 2414833107901362 -483 (6.1512e-146)}
; Y = -1.494823463670722052398787127458490431308746337890625p802 {- 2228486766601642 802 (-3.987e+241)}
; 1.536200663403843424958949981373734772205352783203125p-483 m -1.494823463670722052398787127458490431308746337890625p802 == -1.494823463670722052398787127458490431308746337890625p802
; [HW: -1.494823463670722052398787127458490431308746337890625p802] 

; mpf : - 2228486766601642 802
; mpfd: - 2228486766601642 802 (-3.987e+241) class: Neg. norm. non-zero
; hwf : - 2228486766601642 802 (-3.987e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011100 #b1000100101000100011100100101100101101001101110110010)))
(assert (= y (fp #b1 #b11100100001 #b0111111010101100110000000010000111000010010110101010)))
(assert (= r (fp #b1 #b11100100001 #b0111111010101100110000000010000111000010010110101010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
