(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2155574251446379374641537651768885552883148193359375p626 {+ 970784339558335 626 (3.38495e+188)}
; Y = 1.4443852265999357342707298812456429004669189453125p725 {+ 2001333140924424 725 (2.54935e+218)}
; 1.2155574251446379374641537651768885552883148193359375p626 m 1.4443852265999357342707298812456429004669189453125p725 == 1.2155574251446379374641537651768885552883148193359375p626
; [HW: 1.2155574251446379374641537651768885552883148193359375p626] 

; mpf : + 970784339558335 626
; mpfd: + 970784339558335 626 (3.38495e+188) class: Pos. norm. non-zero
; hwf : + 970784339558335 626 (3.38495e+188) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110001 #b0011011100101110110001010111101101100111111110111111)))
(assert (= y (fp #b0 #b11011010100 #b0111000111000011001110101110111100010010100000001000)))
(assert (= r (fp #b0 #b11001110001 #b0011011100101110110001010111101101100111111110111111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
