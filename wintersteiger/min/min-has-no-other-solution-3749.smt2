(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.118556488206322807599235602538101375102996826171875p817 {+ 533930956108350 817 (9.77607e+245)}
; Y = -1.6340712599139035621220727989566512405872344970703125p571 {- 2855603089874597 571 (-1.26299e+172)}
; 1.118556488206322807599235602538101375102996826171875p817 m -1.6340712599139035621220727989566512405872344970703125p571 == -1.6340712599139035621220727989566512405872344970703125p571
; [HW: -1.6340712599139035621220727989566512405872344970703125p571] 

; mpf : - 2855603089874597 571
; mpfd: - 2855603089874597 571 (-1.26299e+172) class: Neg. norm. non-zero
; hwf : - 2855603089874597 571 (-1.26299e+172) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100110000 #b0001111001011001101101111100111110010011001000111110)))
(assert (= y (fp #b1 #b11000111010 #b1010001001010010011111100111110010101001111010100101)))
(assert (= r (fp #b1 #b11000111010 #b1010001001010010011111100111110010101001111010100101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
