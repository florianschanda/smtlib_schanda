(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.347945535955380247372659141547046601772308349609375p294 {+ 1567007386073878 294 (4.29033e+088)}
; Y = -1.60802055380852859656215514405630528926849365234375p657 {- 2738281139565692 657 (-9.6161e+197)}
; 1.347945535955380247372659141547046601772308349609375p294 m -1.60802055380852859656215514405630528926849365234375p657 == -1.60802055380852859656215514405630528926849365234375p657
; [HW: -1.60802055380852859656215514405630528926849365234375p657] 

; mpf : - 2738281139565692 657
; mpfd: - 2738281139565692 657 (-9.6161e+197) class: Neg. norm. non-zero
; hwf : - 2738281139565692 657 (-9.6161e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100101 #b0101100100010010111101010110100110110111101100010110)))
(assert (= y (fp #b1 #b11010010000 #b1001101110100111001111000010100111100111010001111100)))
(assert (= r (fp #b1 #b11010010000 #b1001101110100111001111000010100111100111010001111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
