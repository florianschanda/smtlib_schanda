(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8466247547334848633227011305280029773712158203125p-764 {- 3812858929940360 -764 (-1.9031e-230)}
; Y = 1.276777166756225323496209966833703219890594482421875p-894 {+ 1246493545067998 -894 (9.66716e-270)}
; -1.8466247547334848633227011305280029773712158203125p-764 m 1.276777166756225323496209966833703219890594482421875p-894 == -1.8466247547334848633227011305280029773712158203125p-764
; [HW: -1.8466247547334848633227011305280029773712158203125p-764] 

; mpf : - 3812858929940360 -764
; mpfd: - 3812858929940360 -764 (-1.9031e-230) class: Neg. norm. non-zero
; hwf : - 3812858929940360 -764 (-1.9031e-230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100000011 #b1101100010111100011001100110000110010000011110001000)))
(assert (= y (fp #b0 #b00010000001 #b0100011011011010110111100100111101111111010111011110)))
(assert (= r (fp #b1 #b00100000011 #b1101100010111100011001100110000110010000011110001000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
