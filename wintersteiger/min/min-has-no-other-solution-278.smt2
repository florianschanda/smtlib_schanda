(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.991931095038328880519884478417225182056427001953125p321 {- 4467260509991826 321 (-8.50948e+096)}
; Y = 1.3676688104180450000768587415223009884357452392578125p-273 {+ 1655833117594461 -273 (9.0114e-083)}
; -1.991931095038328880519884478417225182056427001953125p321 m 1.3676688104180450000768587415223009884357452392578125p-273 == -1.991931095038328880519884478417225182056427001953125p321
; [HW: -1.991931095038328880519884478417225182056427001953125p321] 

; mpf : - 4467260509991826 321
; mpfd: - 4467260509991826 321 (-8.50948e+096) class: Neg. norm. non-zero
; hwf : - 4467260509991826 321 (-8.50948e+096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000000 #b1111110111101111001100100011110100010011001110010010)))
(assert (= y (fp #b0 #b01011101110 #b0101111000011111100010110000110010000001001101011101)))
(assert (= r (fp #b1 #b10101000000 #b1111110111101111001100100011110100010011001110010010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
