(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5047479072964102808640518560423515737056732177734375p724 {- 2273182487216151 724 (-1.32795e+218)}
; Y = -1.344670001122194147313848588964901864528656005859375p-279 {- 1552255688619702 -279 (-1.38435e-084)}
; -1.5047479072964102808640518560423515737056732177734375p724 m -1.344670001122194147313848588964901864528656005859375p-279 == -1.5047479072964102808640518560423515737056732177734375p724
; [HW: -1.5047479072964102808640518560423515737056732177734375p724] 

; mpf : - 2273182487216151 724
; mpfd: - 2273182487216151 724 (-1.32795e+218) class: Neg. norm. non-zero
; hwf : - 2273182487216151 724 (-1.32795e+218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010011 #b1000000100110111001010001010101010010000000000010111)))
(assert (= y (fp #b1 #b01011101000 #b0101100000111100010010110000111010111011011010110110)))
(assert (= r (fp #b1 #b11011010011 #b1000000100110111001010001010101010010000000000010111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
