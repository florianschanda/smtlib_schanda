(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.471142976862476192678741426789201796054840087890625p838 {- 2121839335036074 838 (-2.69644e+252)}
; Y = 1.00494576258501666643496719188988208770751953125p386 {+ 22273734534944 386 (1.58388e+116)}
; -1.471142976862476192678741426789201796054840087890625p838 m 1.00494576258501666643496719188988208770751953125p386 == -1.471142976862476192678741426789201796054840087890625p838
; [HW: -1.471142976862476192678741426789201796054840087890625p838] 

; mpf : - 2121839335036074 838
; mpfd: - 2121839335036074 838 (-2.69644e+252) class: Neg. norm. non-zero
; hwf : - 2121839335036074 838 (-2.69644e+252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000101 #b0111100010011100110100110111110101011101010010101010)))
(assert (= y (fp #b0 #b10110000001 #b0000000101000100001000000010000010001110011100100000)))
(assert (= r (fp #b1 #b11101000101 #b0111100010011100110100110111110101011101010010101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
