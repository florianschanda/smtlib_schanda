(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3925834763711673058850237794104032218456268310546875p-946 {- 1768038797897003 -946 (-2.34124e-285)}
; Y = -1.4525079067878750027631440389086492359638214111328125p-375 {- 2037914440392077 -375 (-1.88743e-113)}
; -1.3925834763711673058850237794104032218456268310546875p-946 m -1.4525079067878750027631440389086492359638214111328125p-375 == -1.4525079067878750027631440389086492359638214111328125p-375
; [HW: -1.4525079067878750027631440389086492359638214111328125p-375] 

; mpf : - 2037914440392077 -375
; mpfd: - 2037914440392077 -375 (-1.88743e-113) class: Neg. norm. non-zero
; hwf : - 2037914440392077 -375 (-1.88743e-113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001101 #b0110010010000000010110011100011111110110110100101011)))
(assert (= y (fp #b1 #b01010001000 #b0111001111010111100011101110010011010101110110001101)))
(assert (= r (fp #b1 #b01010001000 #b0111001111010111100011101110010011010101110110001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
