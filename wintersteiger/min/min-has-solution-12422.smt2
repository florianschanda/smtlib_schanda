(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.272364931486260619664108162396587431430816650390625p-295 {+ 1226622603950314 -295 (1.99877e-089)}
; Y = -1.3782874648440099907276135127176530659198760986328125p29 {- 1703655285710413 29 (-7.39962e+008)}
; 1.272364931486260619664108162396587431430816650390625p-295 m -1.3782874648440099907276135127176530659198760986328125p29 == -1.3782874648440099907276135127176530659198760986328125p29
; [HW: -1.3782874648440099907276135127176530659198760986328125p29] 

; mpf : - 1703655285710413 29
; mpfd: - 1703655285710413 29 (-7.39962e+008) class: Neg. norm. non-zero
; hwf : - 1703655285710413 29 (-7.39962e+008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011000 #b0100010110111001101101010100100101001111100011101010)))
(assert (= y (fp #b1 #b10000011100 #b0110000011010111011100101000000111111101111001001101)))
(assert (= r (fp #b1 #b10000011100 #b0110000011010111011100101000000111111101111001001101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
