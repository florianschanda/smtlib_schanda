(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2131334685619330482353461775346659123897552490234375p692 {+ 959867809595703 692 (2.49267e+208)}
; Y = 1.731262520856545084058097927481867372989654541015625p64 {+ 3293313616439546 64 (3.19362e+019)}
; 1.2131334685619330482353461775346659123897552490234375p692 m 1.731262520856545084058097927481867372989654541015625p64 == 1.731262520856545084058097927481867372989654541015625p64
; [HW: 1.731262520856545084058097927481867372989654541015625p64] 

; mpf : + 3293313616439546 64
; mpfd: + 3293313616439546 64 (3.19362e+019) class: Pos. norm. non-zero
; hwf : + 3293313616439546 64 (3.19362e+019) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010110011 #b0011011010001111111010100011110100101000000100110111)))
(assert (= y (fp #b0 #b10000111111 #b1011101100110100000001010100001111011110100011111010)))
(assert (= r (fp #b0 #b10000111111 #b1011101100110100000001010100001111011110100011111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
