(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2197731578882520242501641405397094786167144775390625p-875 {- 989770311971569 -875 (-4.84209e-264)}
; Y = -1.30424124120713003094351734034717082977294921875p-190 {- 1370180740531168 -190 (-8.3111e-058)}
; -1.2197731578882520242501641405397094786167144775390625p-875 m -1.30424124120713003094351734034717082977294921875p-190 == -1.30424124120713003094351734034717082977294921875p-190
; [HW: -1.30424124120713003094351734034717082977294921875p-190] 

; mpf : - 1370180740531168 -190
; mpfd: - 1370180740531168 -190 (-8.3111e-058) class: Neg. norm. non-zero
; hwf : - 1370180740531168 -190 (-8.3111e-058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010010100 #b0011100001000011000011011011110110101011001011110001)))
(assert (= y (fp #b1 #b01101000001 #b0100110111100010110000010000010100010100001111100000)))
(assert (= r (fp #b1 #b01101000001 #b0100110111100010110000010000010100010100001111100000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
