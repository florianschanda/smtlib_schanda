(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.838826219409343654120903011062182486057281494140625p-195 {- 3777737449160522 -195 (-3.66177e-059)}
; Y = -1.9415113436689594994533081262488849461078643798828125p-470 {- 4240190136512621 -470 (-6.36857e-142)}
; -1.838826219409343654120903011062182486057281494140625p-195 m -1.9415113436689594994533081262488849461078643798828125p-470 == -1.838826219409343654120903011062182486057281494140625p-195
; [HW: -1.838826219409343654120903011062182486057281494140625p-195] 

; mpf : - 3777737449160522 -195
; mpfd: - 3777737449160522 -195 (-3.66177e-059) class: Neg. norm. non-zero
; hwf : - 3777737449160522 -195 (-3.66177e-059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111100 #b1101011010111101010100001010101101100011111101001010)))
(assert (= y (fp #b1 #b01000101001 #b1111000100000110111000110010110111011111000001101101)))
(assert (= r (fp #b1 #b01100111100 #b1101011010111101010100001010101101100011111101001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
