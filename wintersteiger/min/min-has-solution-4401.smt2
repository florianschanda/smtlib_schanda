(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5827499499160608831260788065264932811260223388671875p-848 {+ 2624472457292147 -848 (8.43288e-256)}
; Y = -1.2802327902785537450114361490705050528049468994140625p-146 {- 1262056289875489 -146 (-1.43519e-044)}
; 1.5827499499160608831260788065264932811260223388671875p-848 m -1.2802327902785537450114361490705050528049468994140625p-146 == -1.2802327902785537450114361490705050528049468994140625p-146
; [HW: -1.2802327902785537450114361490705050528049468994140625p-146] 

; mpf : - 1262056289875489 -146
; mpfd: - 1262056289875489 -146 (-1.43519e-044) class: Neg. norm. non-zero
; hwf : - 1262056289875489 -146 (-1.43519e-044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101111 #b1001010100101111000110011100100010100010100101110011)))
(assert (= y (fp #b1 #b01101101101 #b0100011110111101010101100000110110000011011000100001)))
(assert (= r (fp #b1 #b01101101101 #b0100011110111101010101100000110110000011011000100001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
