(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.320145280271148191530983240227214992046356201171875p-748 {- 1441806164933566 -748 (-8.91631e-226)}
; Y = 1.3803979067735994146204347998718731105327606201171875p374 {+ 1713159871198099 374 (5.31157e+112)}
; -1.320145280271148191530983240227214992046356201171875p-748 m 1.3803979067735994146204347998718731105327606201171875p374 == -1.320145280271148191530983240227214992046356201171875p-748
; [HW: -1.320145280271148191530983240227214992046356201171875p-748] 

; mpf : - 1441806164933566 -748
; mpfd: - 1441806164933566 -748 (-8.91631e-226) class: Neg. norm. non-zero
; hwf : - 1441806164933566 -748 (-8.91631e-226) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100010011 #b0101000111110101000010101000010010111011101110111110)))
(assert (= y (fp #b0 #b10101110101 #b0110000101100001110000011101100100001111001110010011)))
(assert (= r (fp #b1 #b00100010011 #b0101000111110101000010101000010010111011101110111110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
