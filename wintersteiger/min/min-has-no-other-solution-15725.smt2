(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6006949720965633066072086876374669373035430908203125p197 {+ 2705289652497413 197 (3.21527e+059)}
; Y = -1.2872718109222784921286120152217335999011993408203125p584 {- 1293757220623621 584 (-8.15057e+175)}
; 1.6006949720965633066072086876374669373035430908203125p197 m -1.2872718109222784921286120152217335999011993408203125p584 == -1.2872718109222784921286120152217335999011993408203125p584
; [HW: -1.2872718109222784921286120152217335999011993408203125p584] 

; mpf : - 1293757220623621 584
; mpfd: - 1293757220623621 584 (-8.15057e+175) class: Neg. norm. non-zero
; hwf : - 1293757220623621 584 (-8.15057e+175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011000100 #b1001100111000111001001010100110000000110110000000101)))
(assert (= y (fp #b1 #b11001000111 #b0100100110001010101001010011100011111001010100000101)))
(assert (= r (fp #b1 #b11001000111 #b0100100110001010101001010011100011111001010100000101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
