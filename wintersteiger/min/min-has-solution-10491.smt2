(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0288388264367036573077029970590956509113311767578125p696 {- 129878527994141 696 (-3.3824e+209)}
; Y = 1.781334624850346326496719484566710889339447021484375p-454 {+ 3518818325327686 -454 (3.82937e-137)}
; -1.0288388264367036573077029970590956509113311767578125p696 m 1.781334624850346326496719484566710889339447021484375p-454 == -1.0288388264367036573077029970590956509113311767578125p696
; [HW: -1.0288388264367036573077029970590956509113311767578125p696] 

; mpf : - 129878527994141 696
; mpfd: - 129878527994141 696 (-3.3824e+209) class: Neg. norm. non-zero
; hwf : - 129878527994141 696 (-3.3824e+209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110111 #b0000011101100001111110110011100001100110100100011101)))
(assert (= y (fp #b0 #b01000111001 #b1100100000000101100010111100010011110110111101000110)))
(assert (= r (fp #b1 #b11010110111 #b0000011101100001111110110011100001100110100100011101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
