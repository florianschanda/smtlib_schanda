(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.21457575337031098428042241721414029598236083984375p334 {- 966363282921276 334 (-4.25053e+100)}
; Y = 1.2949807646826752005608796025626361370086669921875p512 {+ 1328475261906360 512 (1.73629e+154)}
; -1.21457575337031098428042241721414029598236083984375p334 m 1.2949807646826752005608796025626361370086669921875p512 == -1.21457575337031098428042241721414029598236083984375p334
; [HW: -1.21457575337031098428042241721414029598236083984375p334] 

; mpf : - 966363282921276 334
; mpfd: - 966363282921276 334 (-4.25053e+100) class: Neg. norm. non-zero
; hwf : - 966363282921276 334 (-4.25053e+100) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101001101 #b0011011011101110011011111100001100111101011100111100)))
(assert (= y (fp #b0 #b10111111111 #b0100101110000011110111000000000101000010110110111000)))
(assert (= r (fp #b1 #b10101001101 #b0011011011101110011011111100001100111101011100111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
