(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2471525383998780522887273036758415400981903076171875p-928 {- 1113076079841363 -928 (-5.49647e-280)}
; Y = -1.5612558230600150910305501383845694363117218017578125p529 {- 2527671515592605 529 (-2.74373e+159)}
; -1.2471525383998780522887273036758415400981903076171875p-928 m -1.5612558230600150910305501383845694363117218017578125p529 == -1.5612558230600150910305501383845694363117218017578125p529
; [HW: -1.5612558230600150910305501383845694363117218017578125p529] 

; mpf : - 2527671515592605 529
; mpfd: - 2527671515592605 529 (-2.74373e+159) class: Neg. norm. non-zero
; hwf : - 2527671515592605 529 (-2.74373e+159) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011111 #b0011111101000101011000111000010110001101000001010011)))
(assert (= y (fp #b1 #b11000010000 #b1000111110101110011101100010110010111011011110011101)))
(assert (= r (fp #b1 #b11000010000 #b1000111110101110011101100010110010111011011110011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
