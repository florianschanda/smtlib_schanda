(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9188052396404227106785356227192096412181854248046875p-367 {- 4137930934870667 -367 (-6.38297e-111)}
; Y = -1.98535215233784168020747529226355254650115966796875p-552 {- 4437631586097420 -552 (-1.34673e-166)}
; -1.9188052396404227106785356227192096412181854248046875p-367 m -1.98535215233784168020747529226355254650115966796875p-552 == -1.9188052396404227106785356227192096412181854248046875p-367
; [HW: -1.9188052396404227106785356227192096412181854248046875p-367] 

; mpf : - 4137930934870667 -367
; mpfd: - 4137930934870667 -367 (-6.38297e-111) class: Neg. norm. non-zero
; hwf : - 4137930934870667 -367 (-6.38297e-111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010000 #b1110101100110110110100011111011110100110001010001011)))
(assert (= y (fp #b1 #b00111010111 #b1111110001000000000010011110010101010101100100001100)))
(assert (= r (fp #b1 #b01010010000 #b1110101100110110110100011111011110100110001010001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
