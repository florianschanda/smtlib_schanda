(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4929184714358088026386894853203557431697845458984375p415 {+ 2219907444282343 415 (1.26324e+125)}
; Y = -1.8534528929037301647753110955818556249141693115234375p-945 {- 3843610130459511 -945 (-6.23212e-285)}
; 1.4929184714358088026386894853203557431697845458984375p415 m -1.8534528929037301647753110955818556249141693115234375p-945 == -1.8534528929037301647753110955818556249141693115234375p-945
; [HW: -1.8534528929037301647753110955818556249141693115234375p-945] 

; mpf : - 3843610130459511 -945
; mpfd: - 3843610130459511 -945 (-6.23212e-285) class: Neg. norm. non-zero
; hwf : - 3843610130459511 -945 (-6.23212e-285) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011110 #b0111111000101111111001111010101001101001001111100111)))
(assert (= y (fp #b1 #b00001001110 #b1101101001111011111000111000011110110010101101110111)))
(assert (= r (fp #b1 #b00001001110 #b1101101001111011111000111000011110110010101101110111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
