(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.938668367020536020817189637455157935619354248046875p769 {- 4227386507938158 769 (-6.01964e+231)}
; Y = 1.515427398194317820667720297933556139469146728515625p868 {+ 2321278638444474 868 (2.98244e+261)}
; -1.938668367020536020817189637455157935619354248046875p769 m 1.515427398194317820667720297933556139469146728515625p868 == -1.938668367020536020817189637455157935619354248046875p769
; [HW: -1.938668367020536020817189637455157935619354248046875p769] 

; mpf : - 4227386507938158 769
; mpfd: - 4227386507938158 769 (-6.01964e+231) class: Neg. norm. non-zero
; hwf : - 4227386507938158 769 (-6.01964e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000000 #b1111000001001100100100011111001000100100100101101110)))
(assert (= y (fp #b0 #b11101100011 #b1000001111110011000011001100101010110100111110111010)))
(assert (= r (fp #b1 #b11100000000 #b1111000001001100100100011111001000100100100101101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
