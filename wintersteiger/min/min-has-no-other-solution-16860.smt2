(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.181472792793744730488469940610229969024658203125p783 {+ 817280802003792 783 (6.0105e+235)}
; Y = -1.8198695763257946023117028744309209287166595458984375p-434 {- 3692364318433255 -434 (-4.10225e-131)}
; 1.181472792793744730488469940610229969024658203125p783 m -1.8198695763257946023117028744309209287166595458984375p-434 == -1.8198695763257946023117028744309209287166595458984375p-434
; [HW: -1.8198695763257946023117028744309209287166595458984375p-434] 

; mpf : - 3692364318433255 -434
; mpfd: - 3692364318433255 -434 (-4.10225e-131) class: Neg. norm. non-zero
; hwf : - 3692364318433255 -434 (-4.10225e-131) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100001110 #b0010111001110101000000000011111000101001101101010000)))
(assert (= y (fp #b1 #b01001001101 #b1101000111100010111110001111100101001101111111100111)))
(assert (= r (fp #b1 #b01001001101 #b1101000111100010111110001111100101001101111111100111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
