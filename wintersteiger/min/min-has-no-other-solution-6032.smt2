(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4085769241229193493580851281876675784587860107421875p-786 {+ 1840066883232163 -786 (3.46102e-237)}
; Y = -1.159011387291217776152052465477026998996734619140625p156 {- 716123624552394 156 (-1.05869e+047)}
; 1.4085769241229193493580851281876675784587860107421875p-786 m -1.159011387291217776152052465477026998996734619140625p156 == -1.159011387291217776152052465477026998996734619140625p156
; [HW: -1.159011387291217776152052465477026998996734619140625p156] 

; mpf : - 716123624552394 156
; mpfd: - 716123624552394 156 (-1.05869e+047) class: Neg. norm. non-zero
; hwf : - 716123624552394 156 (-1.05869e+047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101101 #b0110100010011000011111110100111100000010000110100011)))
(assert (= y (fp #b1 #b10010011011 #b0010100010110100111110000110010000011011011111001010)))
(assert (= r (fp #b1 #b10010011011 #b0010100010110100111110000110010000011011011111001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
