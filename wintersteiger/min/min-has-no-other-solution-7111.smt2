(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6021075409991791804742433669161982834339141845703125p219 {- 2711651297280869 219 (-1.34977e+066)}
; Y = -1.094305219760280056817691729520447552204132080078125p683 {- 424712952571490 683 (-4.39163e+205)}
; -1.6021075409991791804742433669161982834339141845703125p219 m -1.094305219760280056817691729520447552204132080078125p683 == -1.094305219760280056817691729520447552204132080078125p683
; [HW: -1.094305219760280056817691729520447552204132080078125p683] 

; mpf : - 424712952571490 683
; mpfd: - 424712952571490 683 (-4.39163e+205) class: Neg. norm. non-zero
; hwf : - 424712952571490 683 (-4.39163e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011010 #b1001101000100011101110000100010101000100001101100101)))
(assert (= y (fp #b1 #b11010101010 #b0001100000100100011000110000101010110110011001100010)))
(assert (= r (fp #b1 #b11010101010 #b0001100000100100011000110000101010110110011001100010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
