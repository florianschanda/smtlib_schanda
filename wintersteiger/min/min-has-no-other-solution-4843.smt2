(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.671431772556957628950158323277719318866729736328125p501 {- 3023859880692226 501 (-1.09425e+151)}
; Y = 1.85130391596843235646474568056873977184295654296875p519 {+ 3833931998734476 519 (3.17721e+156)}
; -1.671431772556957628950158323277719318866729736328125p501 m 1.85130391596843235646474568056873977184295654296875p519 == -1.671431772556957628950158323277719318866729736328125p501
; [HW: -1.671431772556957628950158323277719318866729736328125p501] 

; mpf : - 3023859880692226 501
; mpfd: - 3023859880692226 501 (-1.09425e+151) class: Neg. norm. non-zero
; hwf : - 3023859880692226 501 (-1.09425e+151) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110100 #b1010101111100010111100111110000010100000101000000010)))
(assert (= y (fp #b0 #b11000000110 #b1101100111101111000011011010111000001010100010001100)))
(assert (= r (fp #b1 #b10111110100 #b1010101111100010111100111110000010100000101000000010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
