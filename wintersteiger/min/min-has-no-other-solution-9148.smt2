(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.411510669664576500537123138201422989368438720703125p-1000 {+ 1853279298560370 -1000 (1.31731e-301)}
; Y = -1.9616818948310810188928599018254317343235015869140625p-930 {- 4331030223210209 -930 (-2.16139e-280)}
; 1.411510669664576500537123138201422989368438720703125p-1000 m -1.9616818948310810188928599018254317343235015869140625p-930 == -1.9616818948310810188928599018254317343235015869140625p-930
; [HW: -1.9616818948310810188928599018254317343235015869140625p-930] 

; mpf : - 4331030223210209 -930
; mpfd: - 4331030223210209 -930 (-2.16139e-280) class: Neg. norm. non-zero
; hwf : - 4331030223210209 -930 (-2.16139e-280) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010111 #b0110100101011000110000110110010000101010000101110010)))
(assert (= y (fp #b1 #b00001011101 #b1111011000110000110010001101111101110100011011100001)))
(assert (= r (fp #b1 #b00001011101 #b1111011000110000110010001101111101110100011011100001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
