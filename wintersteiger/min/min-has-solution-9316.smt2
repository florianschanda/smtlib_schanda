(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.335911204650574557462050506728701293468475341796875p-404 {- 1512809576093902 -404 (-3.2334e-122)}
; Y = -1.5828901174286098552101975656114518642425537109375p-753 {- 2625103715649432 -753 (-3.3409e-227)}
; -1.335911204650574557462050506728701293468475341796875p-404 m -1.5828901174286098552101975656114518642425537109375p-753 == -1.335911204650574557462050506728701293468475341796875p-404
; [HW: -1.335911204650574557462050506728701293468475341796875p-404] 

; mpf : - 1512809576093902 -404
; mpfd: - 1512809576093902 -404 (-3.2334e-122) class: Neg. norm. non-zero
; hwf : - 1512809576093902 -404 (-3.2334e-122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001101011 #b0101010111111110010001101101011001010101100011001110)))
(assert (= y (fp #b1 #b00100001110 #b1001010100111000010010010110011110000100011110011000)))
(assert (= r (fp #b1 #b01001101011 #b0101010111111110010001101101011001010101100011001110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
