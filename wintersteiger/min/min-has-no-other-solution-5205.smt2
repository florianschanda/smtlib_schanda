(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0633281917573362829187999523128382861614227294921875p287 {- 285204820800387 287 (-2.64409e+086)}
; Y = -1.7796405372776380460209111333824694156646728515625p625 {- 3511188833166504 625 (-2.47788e+188)}
; -1.0633281917573362829187999523128382861614227294921875p287 m -1.7796405372776380460209111333824694156646728515625p625 == -1.7796405372776380460209111333824694156646728515625p625
; [HW: -1.7796405372776380460209111333824694156646728515625p625] 

; mpf : - 3511188833166504 625
; mpfd: - 3511188833166504 625 (-2.47788e+188) class: Neg. norm. non-zero
; hwf : - 3511188833166504 625 (-2.47788e+188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011110 #b0001000000110110010001101100000010000011001110000011)))
(assert (= y (fp #b1 #b11001110000 #b1100011110010110100001011011001000111110010010101000)))
(assert (= r (fp #b1 #b11001110000 #b1100011110010110100001011011001000111110010010101000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
