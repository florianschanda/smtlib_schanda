(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1401392431956878237286900912295095622539520263671875p-817 {+ 631131043436083 -817 (1.30452e-246)}
; Y = 1.369062647803645393906890603830106556415557861328125p86 {+ 1662110403124866 86 (1.05926e+026)}
; 1.1401392431956878237286900912295095622539520263671875p-817 m 1.369062647803645393906890603830106556415557861328125p86 == 1.1401392431956878237286900912295095622539520263671875p-817
; [HW: 1.1401392431956878237286900912295095622539520263671875p-817] 

; mpf : + 631131043436083 -817
; mpfd: + 631131043436083 -817 (1.30452e-246) class: Pos. norm. non-zero
; hwf : + 631131043436083 -817 (1.30452e-246) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001110 #b0010001111100000001010100101101001101001011000110011)))
(assert (= y (fp #b0 #b10001010101 #b0101111001111010111000111100001001111101111010000010)))
(assert (= r (fp #b0 #b00011001110 #b0010001111100000001010100101101001101001011000110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
