(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2556381344193312532553363780607469379901885986328125p-400 {- 1151291806912589 -400 (-4.86257e-121)}
; Y = 1.9389630745928643218434217487811110913753509521484375p-160 {+ 4228713752851079 -160 (1.32669e-048)}
; -1.2556381344193312532553363780607469379901885986328125p-400 m 1.9389630745928643218434217487811110913753509521484375p-160 == -1.2556381344193312532553363780607469379901885986328125p-400
; [HW: -1.2556381344193312532553363780607469379901885986328125p-400] 

; mpf : - 1151291806912589 -400
; mpfd: - 1151291806912589 -400 (-4.86257e-121) class: Neg. norm. non-zero
; hwf : - 1151291806912589 -400 (-4.86257e-121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001101111 #b0100000101110001100000000011001011110001000001001101)))
(assert (= y (fp #b0 #b01101011111 #b1111000001011111111000100101000110000111001010000111)))
(assert (= r (fp #b1 #b01001101111 #b0100000101110001100000000011001011110001000001001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
