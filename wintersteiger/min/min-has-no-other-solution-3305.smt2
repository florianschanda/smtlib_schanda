(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.666102430318896931993322141352109611034393310546875p731 {- 2999858656974766 731 (-1.88204e+220)}
; Y = 1.2152677014806119171197451578336767852306365966796875p558 {+ 969479540172987 558 (1.14659e+168)}
; -1.666102430318896931993322141352109611034393310546875p731 m 1.2152677014806119171197451578336767852306365966796875p558 == -1.666102430318896931993322141352109611034393310546875p731
; [HW: -1.666102430318896931993322141352109611034393310546875p731] 

; mpf : - 2999858656974766 731
; mpfd: - 2999858656974766 731 (-1.88204e+220) class: Neg. norm. non-zero
; hwf : - 2999858656974766 731 (-1.88204e+220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011011010 #b1010101010000101101100000101101000000001011110101110)))
(assert (= y (fp #b0 #b11000101101 #b0011011100011011110010001011100110111110100010111011)))
(assert (= r (fp #b1 #b11011011010 #b1010101010000101101100000101101000000001011110101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
