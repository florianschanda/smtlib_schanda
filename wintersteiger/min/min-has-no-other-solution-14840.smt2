(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.978749879657807131394520183675922453403472900390625p-439 {+ 4407897593315818 -439 (1.39387e-132)}
; Y = -1.0379430894674979146685700470698066055774688720703125p-346 {- 170880483587109 -346 (-7.24094e-105)}
; 1.978749879657807131394520183675922453403472900390625p-439 m -1.0379430894674979146685700470698066055774688720703125p-346 == -1.0379430894674979146685700470698066055774688720703125p-346
; [HW: -1.0379430894674979146685700470698066055774688720703125p-346] 

; mpf : - 170880483587109 -346
; mpfd: - 170880483587109 -346 (-7.24094e-105) class: Neg. norm. non-zero
; hwf : - 170880483587109 -346 (-7.24094e-105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001000 #b1111101010001111010110100010010000011000000111101010)))
(assert (= y (fp #b1 #b01010100101 #b0000100110110110101000110110100001011111010000100101)))
(assert (= r (fp #b1 #b01010100101 #b0000100110110110101000110110100001011111010000100101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
