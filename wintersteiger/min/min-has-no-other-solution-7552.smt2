(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4566813173561536931543969330959953367710113525390625p812 {- 2056709810672241 812 (-3.97852e+244)}
; Y = 1.021672294931789348737538603018037974834442138671875p321 {+ 97603339379070 321 (4.36456e+096)}
; -1.4566813173561536931543969330959953367710113525390625p812 m 1.021672294931789348737538603018037974834442138671875p321 == -1.4566813173561536931543969330959953367710113525390625p812
; [HW: -1.4566813173561536931543969330959953367710113525390625p812] 

; mpf : - 2056709810672241 812
; mpfd: - 2056709810672241 812 (-3.97852e+244) class: Neg. norm. non-zero
; hwf : - 2056709810672241 812 (-3.97852e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100101011 #b0111010011101001000100010001101010111101001001110001)))
(assert (= y (fp #b0 #b10101000000 #b0000010110001100010100001100010111110110000101111110)))
(assert (= r (fp #b1 #b11100101011 #b0111010011101001000100010001101010111101001001110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
