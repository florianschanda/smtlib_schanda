(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5375652522478102657288445698213763535022735595703125p-592 {+ 2420978669710565 -592 (9.48585e-179)}
; Y = -1.8035806886943965832159619822050444781780242919921875p680 {- 3619005690166211 680 (-9.04758e+204)}
; 1.5375652522478102657288445698213763535022735595703125p-592 m -1.8035806886943965832159619822050444781780242919921875p680 == -1.8035806886943965832159619822050444781780242919921875p680
; [HW: -1.8035806886943965832159619822050444781780242919921875p680] 

; mpf : - 3619005690166211 680
; mpfd: - 3619005690166211 680 (-9.04758e+204) class: Neg. norm. non-zero
; hwf : - 3619005690166211 680 (-9.04758e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101111 #b1000100110011101111000000101100111011110110011100101)))
(assert (= y (fp #b1 #b11010100111 #b1100110110110111011101101100100110100011101111000011)))
(assert (= r (fp #b1 #b11010100111 #b1100110110110111011101101100100110100011101111000011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
