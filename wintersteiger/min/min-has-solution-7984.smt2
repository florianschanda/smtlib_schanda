(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6101732286021193107927729215589351952075958251953125p-590 {+ 2747975924963957 -590 (3.97352e-178)}
; Y = 1.8799196430544302671705736429430544376373291015625p-227 {+ 3962805776575912 -227 (8.71626e-069)}
; 1.6101732286021193107927729215589351952075958251953125p-590 m 1.8799196430544302671705736429430544376373291015625p-227 == 1.6101732286021193107927729215589351952075958251953125p-590
; [HW: 1.6101732286021193107927729215589351952075958251953125p-590] 

; mpf : + 2747975924963957 -590
; mpfd: + 2747975924963957 -590 (3.97352e-178) class: Pos. norm. non-zero
; hwf : + 2747975924963957 -590 (3.97352e-178) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110001 #b1001110000110100010100000000110110111101101001110101)))
(assert (= y (fp #b0 #b01100011100 #b1110000101000010011010011110101000000110110110101000)))
(assert (= r (fp #b0 #b00110110001 #b1001110000110100010100000000110110111101101001110101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
