(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6087991876313940675657931933528743684291839599609375p601 {- 2741787794560207 601 (-1.33515e+181)}
; Y = 0.2389125195971291137908565360703505575656890869140625p-1022 {+ 1075966334231777 -1023 (5.31598e-309)}
; -1.6087991876313940675657931933528743684291839599609375p601 m 0.2389125195971291137908565360703505575656890869140625p-1022 == -1.6087991876313940675657931933528743684291839599609375p601
; [HW: -1.6087991876313940675657931933528743684291839599609375p601] 

; mpf : - 2741787794560207 601
; mpfd: - 2741787794560207 601 (-1.33515e+181) class: Neg. norm. non-zero
; hwf : - 2741787794560207 601 (-1.33515e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011000 #b1001101111011010010000110111100010110101010011001111)))
(assert (= y (fp #b0 #b00000000000 #b0011110100101001010111101111001001000110010011100001)))
(assert (= r (fp #b1 #b11001011000 #b1001101111011010010000110111100010110101010011001111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
