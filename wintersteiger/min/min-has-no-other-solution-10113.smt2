(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.702368670651619897427053729188628494739532470703125p-800 {+ 3163187283423346 -800 (2.55304e-241)}
; Y = -1.140595818124552796035686696995981037616729736328125p-122 {- 633187274115586 -122 (-2.14522e-037)}
; 1.702368670651619897427053729188628494739532470703125p-800 m -1.140595818124552796035686696995981037616729736328125p-122 == -1.140595818124552796035686696995981037616729736328125p-122
; [HW: -1.140595818124552796035686696995981037616729736328125p-122] 

; mpf : - 633187274115586 -122
; mpfd: - 633187274115586 -122 (-2.14522e-037) class: Neg. norm. non-zero
; hwf : - 633187274115586 -122 (-2.14522e-037) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011111 #b1011001111001110011011101110011000101111000001110010)))
(assert (= y (fp #b1 #b01110000101 #b0010001111111110000101100110100011001100101000000010)))
(assert (= r (fp #b1 #b01110000101 #b0010001111111110000101100110100011001100101000000010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
