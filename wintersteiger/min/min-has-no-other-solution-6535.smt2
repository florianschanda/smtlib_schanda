(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3694327466675251248062750164535827934741973876953125p-880 {- 1663777180230325 -880 (-1.69881e-265)}
; Y = 1.309466872128268288832941834698431193828582763671875p527 {+ 1393714890000382 527 (5.7531e+158)}
; -1.3694327466675251248062750164535827934741973876953125p-880 m 1.309466872128268288832941834698431193828582763671875p527 == -1.3694327466675251248062750164535827934741973876953125p-880
; [HW: -1.3694327466675251248062750164535827934741973876953125p-880] 

; mpf : - 1663777180230325 -880
; mpfd: - 1663777180230325 -880 (-1.69881e-265) class: Neg. norm. non-zero
; hwf : - 1663777180230325 -880 (-1.69881e-265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001111 #b0101111010010011001001001111110100000010001010110101)))
(assert (= y (fp #b0 #b11000001110 #b0100111100111001001110001000111011111100011111111110)))
(assert (= r (fp #b1 #b00010001111 #b0101111010010011001001001111110100000010001010110101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
