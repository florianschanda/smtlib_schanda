(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.911994378038201602976187132298946380615234375p-603 {- 4107257541096832 -603 (-5.75969e-182)}
; Y = 1.6960014463902435277731228779884986579418182373046875p-827 {+ 3134511854612427 -827 (1.89505e-249)}
; -1.911994378038201602976187132298946380615234375p-603 m 1.6960014463902435277731228779884986579418182373046875p-827 == -1.911994378038201602976187132298946380615234375p-603
; [HW: -1.911994378038201602976187132298946380615234375p-603] 

; mpf : - 4107257541096832 -603
; mpfd: - 4107257541096832 -603 (-5.75969e-182) class: Neg. norm. non-zero
; hwf : - 4107257541096832 -603 (-5.75969e-182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100100 #b1110100101111000011101101010101111001111010110000000)))
(assert (= y (fp #b0 #b00011000100 #b1011001000101101001001101001101000110110111111001011)))
(assert (= r (fp #b1 #b00110100100 #b1110100101111000011101101010101111001111010110000000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
