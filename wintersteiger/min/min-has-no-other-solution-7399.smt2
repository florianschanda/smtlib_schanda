(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3094301073054139816775887084077112376689910888671875p527 {- 1393549315957875 527 (-5.75294e+158)}
; Y = -1.3589062129174906967676861313520930707454681396484375p-846 {- 1616369886756167 -846 (-2.8961e-255)}
; -1.3094301073054139816775887084077112376689910888671875p527 m -1.3589062129174906967676861313520930707454681396484375p-846 == -1.3094301073054139816775887084077112376689910888671875p527
; [HW: -1.3094301073054139816775887084077112376689910888671875p527] 

; mpf : - 1393549315957875 527
; mpfd: - 1393549315957875 527 (-5.75294e+158) class: Neg. norm. non-zero
; hwf : - 1393549315957875 527 (-5.75294e+158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001110 #b0100111100110110110011111011111101000110010001110011)))
(assert (= y (fp #b1 #b00010110001 #b0101101111100001010001110000111011001111110101000111)))
(assert (= r (fp #b1 #b11000001110 #b0100111100110110110011111011111101000110010001110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
