(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.104060219244969776042353259981609880924224853515625p-540 {- 468645564615738 -540 (-3.06757e-163)}
; Y = 1.84320752409727806053751919534988701343536376953125p449 {+ 3797469091320500 449 (2.67943e+135)}
; -1.104060219244969776042353259981609880924224853515625p-540 m 1.84320752409727806053751919534988701343536376953125p449 == -1.104060219244969776042353259981609880924224853515625p-540
; [HW: -1.104060219244969776042353259981609880924224853515625p-540] 

; mpf : - 468645564615738 -540
; mpfd: - 468645564615738 -540 (-3.06757e-163) class: Neg. norm. non-zero
; hwf : - 468645564615738 -540 (-3.06757e-163) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100011 #b0001101010100011101100001100011001111000110000111010)))
(assert (= y (fp #b0 #b10111000000 #b1101011111011100011100101100001110111101001010110100)))
(assert (= r (fp #b1 #b00111100011 #b0001101010100011101100001100011001111000110000111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
