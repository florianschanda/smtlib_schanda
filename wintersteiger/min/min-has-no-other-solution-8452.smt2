(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8145271684104471443532702323864214122295379638671875p696 {- 3668304252136435 696 (-5.96541e+209)}
; Y = -1.79573407593197043041755023295991122722625732421875p-857 {- 3583667687853228 -857 (-1.86868e-258)}
; -1.8145271684104471443532702323864214122295379638671875p696 m -1.79573407593197043041755023295991122722625732421875p-857 == -1.8145271684104471443532702323864214122295379638671875p696
; [HW: -1.8145271684104471443532702323864214122295379638671875p696] 

; mpf : - 3668304252136435 696
; mpfd: - 3668304252136435 696 (-5.96541e+209) class: Neg. norm. non-zero
; hwf : - 3668304252136435 696 (-5.96541e+209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110111 #b1101000010000100110110100011111000000110101111110011)))
(assert (= y (fp #b1 #b00010100110 #b1100101110110101001110100111100001110000110010101100)))
(assert (= r (fp #b1 #b11010110111 #b1101000010000100110110100011111000000110101111110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
