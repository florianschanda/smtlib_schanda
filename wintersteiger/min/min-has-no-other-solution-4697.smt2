(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7361395364614278236103928065858781337738037109375p713 {+ 3315277742100376 713 (7.4812e+214)}
; Y = -1.7782392277132845759268775509553961455821990966796875p-632 {- 3504877895934651 -632 (-9.97776e-191)}
; 1.7361395364614278236103928065858781337738037109375p713 m -1.7782392277132845759268775509553961455821990966796875p-632 == -1.7782392277132845759268775509553961455821990966796875p-632
; [HW: -1.7782392277132845759268775509553961455821990966796875p-632] 

; mpf : - 3504877895934651 -632
; mpfd: - 3504877895934651 -632 (-9.97776e-191) class: Neg. norm. non-zero
; hwf : - 3504877895934651 -632 (-9.97776e-191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001000 #b1011110001110011101001000000001001100100111110011000)))
(assert (= y (fp #b1 #b00110000111 #b1100011100111010101011111001111101111110001010111011)))
(assert (= r (fp #b1 #b00110000111 #b1100011100111010101011111001111101111110001010111011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
