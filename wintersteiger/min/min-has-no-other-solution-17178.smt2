(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3242470589570098926657237825565971434116363525390625p726 {+ 1460278933894769 726 (4.67462e+218)}
; Y = -1.8506769473445709994763319627963937819004058837890625p608 {- 3831108383073681 608 (-1.96593e+183)}
; 1.3242470589570098926657237825565971434116363525390625p726 m -1.8506769473445709994763319627963937819004058837890625p608 == -1.8506769473445709994763319627963937819004058837890625p608
; [HW: -1.8506769473445709994763319627963937819004058837890625p608] 

; mpf : - 3831108383073681 608
; mpfd: - 3831108383073681 608 (-1.96593e+183) class: Neg. norm. non-zero
; hwf : - 3831108383073681 608 (-1.96593e+183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011010101 #b0101001100000001110110101111001000001011011001110001)))
(assert (= y (fp #b1 #b11001011111 #b1101100111000101111101101110010001001110010110010001)))
(assert (= r (fp #b1 #b11001011111 #b1101100111000101111101101110010001001110010110010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
