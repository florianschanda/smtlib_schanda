(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.330060343883354700977861284627579152584075927734375p854 {+ 1486459641722854 854 (1.59767e+257)}
; Y = 1.912813245214306956398786496720276772975921630859375p-673 {+ 4110945391006006 -673 (4.88074e-203)}
; 1.330060343883354700977861284627579152584075927734375p854 m 1.912813245214306956398786496720276772975921630859375p-673 == 1.912813245214306956398786496720276772975921630859375p-673
; [HW: 1.912813245214306956398786496720276772975921630859375p-673] 

; mpf : + 4110945391006006 -673
; mpfd: + 4110945391006006 -673 (4.88074e-203) class: Pos. norm. non-zero
; hwf : + 4110945391006006 -673 (4.88074e-203) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010101 #b0101010001111110110101011010111010101111011111100110)))
(assert (= y (fp #b0 #b00101011110 #b1110100110101110001000001111101110001101000100110110)))
(assert (= r (fp #b0 #b00101011110 #b1110100110101110001000001111101110001101000100110110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
