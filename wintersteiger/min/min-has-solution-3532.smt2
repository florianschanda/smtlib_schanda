(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.898515259216418282761651425971649587154388427734375p875 {+ 4046552986593766 875 (4.78256e+263)}
; Y = -1.3328008135843354420302375729079358279705047607421875p-937 {- 1498801620047011 -937 (-1.14725e-282)}
; 1.898515259216418282761651425971649587154388427734375p875 m -1.3328008135843354420302375729079358279705047607421875p-937 == -1.3328008135843354420302375729079358279705047607421875p-937
; [HW: -1.3328008135843354420302375729079358279705047607421875p-937] 

; mpf : - 1498801620047011 -937
; mpfd: - 1498801620047011 -937 (-1.14725e-282) class: Neg. norm. non-zero
; hwf : - 1498801620047011 -937 (-1.14725e-282) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101101010 #b1110011000000101000110001001010101001010100111100110)))
(assert (= y (fp #b1 #b00001010110 #b0101010100110010011011110010001001101101010010100011)))
(assert (= r (fp #b1 #b00001010110 #b0101010100110010011011110010001001101101010010100011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
