(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9610781389921692063893488011672161519527435302734375p501 {- 4328311148639063 501 (-1.28387e+151)}
; Y = -1.6867911705627403051721557858400046825408935546875p580 {- 3093032459827704 580 (-6.67512e+174)}
; -1.9610781389921692063893488011672161519527435302734375p501 m -1.6867911705627403051721557858400046825408935546875p580 == -1.6867911705627403051721557858400046825408935546875p580
; [HW: -1.6867911705627403051721557858400046825408935546875p580] 

; mpf : - 3093032459827704 580
; mpfd: - 3093032459827704 580 (-6.67512e+174) class: Neg. norm. non-zero
; hwf : - 3093032459827704 580 (-6.67512e+174) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110100 #b1111011000001001001101111000011111011111001101010111)))
(assert (= y (fp #b1 #b11001000011 #b1010111111010001100010111101000010111111100111111000)))
(assert (= r (fp #b1 #b11001000011 #b1010111111010001100010111101000010111111100111111000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
