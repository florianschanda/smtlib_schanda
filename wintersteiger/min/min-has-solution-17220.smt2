(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.518624887885035246171128164860419929027557373046875p695 {- 2335678851824110 695 (-2.4963e+209)}
; Y = 1.288279225855159193514509752276353538036346435546875p-452 {+ 1298294214139950 -452 (1.10778e-136)}
; -1.518624887885035246171128164860419929027557373046875p695 m 1.288279225855159193514509752276353538036346435546875p-452 == -1.518624887885035246171128164860419929027557373046875p695
; [HW: -1.518624887885035246171128164860419929027557373046875p695] 

; mpf : - 2335678851824110 695
; mpfd: - 2335678851824110 695 (-2.4963e+209) class: Neg. norm. non-zero
; hwf : - 2335678851824110 695 (-2.4963e+209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110110 #b1000010011000100100110011100010001011011100111101110)))
(assert (= y (fp #b0 #b01000111011 #b0100100111001100101010101101011100101010000000101110)))
(assert (= r (fp #b1 #b11010110110 #b1000010011000100100110011100010001011011100111101110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
