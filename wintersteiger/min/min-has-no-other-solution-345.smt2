(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.99623646544319743867390570812858641147613525390625p331 {- 4486650174542884 331 (-8.73254e+099)}
; Y = -1.3423639713173527443501598099828697741031646728515625p34 {- 1541870253649913 34 (-2.30616e+010)}
; -1.99623646544319743867390570812858641147613525390625p331 m -1.3423639713173527443501598099828697741031646728515625p34 == -1.99623646544319743867390570812858641147613525390625p331
; [HW: -1.99623646544319743867390570812858641147613525390625p331] 

; mpf : - 4486650174542884 331
; mpfd: - 4486650174542884 331 (-8.73254e+099) class: Neg. norm. non-zero
; hwf : - 4486650174542884 331 (-8.73254e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101001010 #b1111111100001001010110100101111000101001010000100100)))
(assert (= y (fp #b1 #b10000100001 #b0101011110100101001010100100110000100010111111111001)))
(assert (= r (fp #b1 #b10101001010 #b1111111100001001010110100101111000101001010000100100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
