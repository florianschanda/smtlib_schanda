(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.507006566882608478152860698173753917217254638671875p-807 {+ 2283354585686910 -807 (1.76567e-243)}
; Y = -1.507039264554684176999899136717431247234344482421875p-759 {- 2283501842910686 -759 (-4.97002e-229)}
; 1.507006566882608478152860698173753917217254638671875p-807 m -1.507039264554684176999899136717431247234344482421875p-759 == -1.507039264554684176999899136717431247234344482421875p-759
; [HW: -1.507039264554684176999899136717431247234344482421875p-759] 

; mpf : - 2283501842910686 -759
; mpfd: - 2283501842910686 -759 (-4.97002e-229) class: Neg. norm. non-zero
; hwf : - 2283501842910686 -759 (-4.97002e-229) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011000 #b1000000111001011001011101010111110011110001101111110)))
(assert (= y (fp #b1 #b00100001000 #b1000000111001101010100110100001100001100110111011110)))
(assert (= r (fp #b1 #b00100001000 #b1000000111001101010100110100001100001100110111011110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
