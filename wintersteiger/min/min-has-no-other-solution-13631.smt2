(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.125097179714031003783247797400690615177154541015625p-839 {+ 563387611945210 -839 (3.06919e-253)}
; Y = 1.8206793927488218454158186432323418557643890380859375p-509 {+ 3696011407374239 -509 (1.08634e-153)}
; 1.125097179714031003783247797400690615177154541015625p-839 m 1.8206793927488218454158186432323418557643890380859375p-509 == 1.125097179714031003783247797400690615177154541015625p-839
; [HW: 1.125097179714031003783247797400690615177154541015625p-839] 

; mpf : + 563387611945210 -839
; mpfd: + 563387611945210 -839 (3.06919e-253) class: Pos. norm. non-zero
; hwf : + 563387611945210 -839 (3.06919e-253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010111000 #b0010000000000110010111100110011110110001100011111010)))
(assert (= y (fp #b0 #b01000000010 #b1101001000011000000010110111000001011011011110011111)))
(assert (= r (fp #b0 #b00010111000 #b0010000000000110010111100110011110110001100011111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
