(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.628767805062512064040447512525133788585662841796875p-662 {- 2831718452582094 -662 (-8.51142e-200)}
; Y = -1.911080022231899544493671783129684627056121826171875p327 {- 4103139648628286 327 (-5.22501e+098)}
; -1.628767805062512064040447512525133788585662841796875p-662 m -1.911080022231899544493671783129684627056121826171875p327 == -1.911080022231899544493671783129684627056121826171875p327
; [HW: -1.911080022231899544493671783129684627056121826171875p327] 

; mpf : - 4103139648628286 327
; mpfd: - 4103139648628286 327 (-5.22501e+098) class: Neg. norm. non-zero
; hwf : - 4103139648628286 327 (-5.22501e+098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101001 #b1010000011110110111011010100011110000101011011001110)))
(assert (= y (fp #b1 #b10101000110 #b1110100100111100100010100101001110000110011000111110)))
(assert (= r (fp #b1 #b10101000110 #b1110100100111100100010100101001110000110011000111110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
