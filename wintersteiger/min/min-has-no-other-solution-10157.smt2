(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5767550959004543731367675718502141535282135009765625p-945 {- 2597474034981321 -945 (-5.30174e-285)}
; Y = -1.6889341925518330800315425221924670040607452392578125p-179 {- 3102683772859229 -179 (-2.20416e-054)}
; -1.5767550959004543731367675718502141535282135009765625p-945 m -1.6889341925518330800315425221924670040607452392578125p-179 == -1.6889341925518330800315425221924670040607452392578125p-179
; [HW: -1.6889341925518330800315425221924670040607452392578125p-179] 

; mpf : - 3102683772859229 -179
; mpfd: - 3102683772859229 -179 (-2.20416e-054) class: Neg. norm. non-zero
; hwf : - 3102683772859229 -179 (-2.20416e-054) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001110 #b1001001110100110001110001101001010110001100111001001)))
(assert (= y (fp #b1 #b01101001100 #b1011000001011101111111011100001000011011001101011101)))
(assert (= r (fp #b1 #b01101001100 #b1011000001011101111111011100001000011011001101011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
