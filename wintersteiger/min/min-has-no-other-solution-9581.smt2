(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.87945690358778083606239306391216814517974853515625p-376 {+ 3960721783286340 -376 (1.22111e-113)}
; Y = 1.187193171660981594328632127144373953342437744140625p725 {+ 843043098138698 725 (2.09541e+218)}
; 1.87945690358778083606239306391216814517974853515625p-376 m 1.187193171660981594328632127144373953342437744140625p725 == 1.87945690358778083606239306391216814517974853515625p-376
; [HW: 1.87945690358778083606239306391216814517974853515625p-376] 

; mpf : + 3960721783286340 -376
; mpfd: + 3960721783286340 -376 (1.22111e-113) class: Pos. norm. non-zero
; hwf : + 3960721783286340 -376 (1.22111e-113) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010000111 #b1110000100100100000101100110111100100110101001000100)))
(assert (= y (fp #b0 #b11011010100 #b0010111111101011111001000100011001010001100001001010)))
(assert (= r (fp #b0 #b01010000111 #b1110000100100100000101100110111100100110101001000100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
