(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0325664757625043765898453784757293760776519775390625p-201 {+ 146666368108785 -201 (3.21284e-061)}
; Y = -1.6957414075193228963911451501189731061458587646484375p-680 {- 3133340743650247 -680 (-3.38036e-205)}
; 1.0325664757625043765898453784757293760776519775390625p-201 m -1.6957414075193228963911451501189731061458587646484375p-680 == -1.6957414075193228963911451501189731061458587646484375p-680
; [HW: -1.6957414075193228963911451501189731061458587646484375p-680] 

; mpf : - 3133340743650247 -680
; mpfd: - 3133340743650247 -680 (-3.38036e-205) class: Neg. norm. non-zero
; hwf : - 3133340743650247 -680 (-3.38036e-205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110110 #b0000100001010110010001101100110001011000100011110001)))
(assert (= y (fp #b1 #b00101010111 #b1011001000011100000110111101111111000100101111000111)))
(assert (= r (fp #b1 #b00101010111 #b1011001000011100000110111101111111000100101111000111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
