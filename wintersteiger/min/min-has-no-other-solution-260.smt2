(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6618325807986373821023562413756735622882843017578125p131 {- 2980628964266397 131 (-4.52394e+039)}
; Y = -1.9297138144085572708519293883000500500202178955078125p-990 {- 4187058788131581 -990 (-1.84415e-298)}
; -1.6618325807986373821023562413756735622882843017578125p131 m -1.9297138144085572708519293883000500500202178955078125p-990 == -1.6618325807986373821023562413756735622882843017578125p131
; [HW: -1.6618325807986373821023562413756735622882843017578125p131] 

; mpf : - 2980628964266397 131
; mpfd: - 2980628964266397 131 (-4.52394e+039) class: Neg. norm. non-zero
; hwf : - 2980628964266397 131 (-4.52394e+039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000010 #b1010100101101101110111000010100111110101000110011101)))
(assert (= y (fp #b1 #b00000100001 #b1110111000000001101110010111101110000110001011111101)))
(assert (= r (fp #b1 #b10010000010 #b1010100101101101110111000010100111110101000110011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
