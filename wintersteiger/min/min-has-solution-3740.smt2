(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5597584425448876022102240312960930168628692626953125p697 {- 2520927913262645 697 (-1.02557e+210)}
; Y = -1.1947482512789380226791990935453213751316070556640625p376 {- 877068151890881 376 (-1.83889e+113)}
; -1.5597584425448876022102240312960930168628692626953125p697 m -1.1947482512789380226791990935453213751316070556640625p376 == -1.5597584425448876022102240312960930168628692626953125p697
; [HW: -1.5597584425448876022102240312960930168628692626953125p697] 

; mpf : - 2520927913262645 697
; mpfd: - 2520927913262645 697 (-1.02557e+210) class: Neg. norm. non-zero
; hwf : - 2520927913262645 697 (-1.02557e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010111000 #b1000111101001100010101000100110001100011111000110101)))
(assert (= y (fp #b1 #b10101110111 #b0011000111011011000001010111101000110010001111000001)))
(assert (= r (fp #b1 #b11010111000 #b1000111101001100010101000100110001100011111000110101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
