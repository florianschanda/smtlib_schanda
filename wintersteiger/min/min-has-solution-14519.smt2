(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7950833508258006165902997963712550699710845947265625p933 {+ 3580737082507561 933 (1.30338e+281)}
; Y = -1.7316806962264494895720190470456145703792572021484375p-844 {- 3295196910879623 -844 (-1.47622e-254)}
; 1.7950833508258006165902997963712550699710845947265625p933 m -1.7316806962264494895720190470456145703792572021484375p-844 == -1.7316806962264494895720190470456145703792572021484375p-844
; [HW: -1.7316806962264494895720190470456145703792572021484375p-844] 

; mpf : - 3295196910879623 -844
; mpfd: - 3295196910879623 -844 (-1.47622e-254) class: Neg. norm. non-zero
; hwf : - 3295196910879623 -844 (-1.47622e-254) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100100 #b1100101110001010100101010001110101100100000100101001)))
(assert (= y (fp #b1 #b00010110011 #b1011101101001111011011010001010101101000001110000111)))
(assert (= r (fp #b1 #b00010110011 #b1011101101001111011011010001010101101000001110000111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
