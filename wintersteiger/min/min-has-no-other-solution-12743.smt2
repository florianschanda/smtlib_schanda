(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.848203211395226919222523065400309860706329345703125p-715 {+ 3819967666774002 -715 (1.07227e-215)}
; Y = 1.3200566167435614506331376105663366615772247314453125p-431 {+ 1441406859903765 -431 (2.38048e-130)}
; 1.848203211395226919222523065400309860706329345703125p-715 m 1.3200566167435614506331376105663366615772247314453125p-431 == 1.848203211395226919222523065400309860706329345703125p-715
; [HW: 1.848203211395226919222523065400309860706329345703125p-715] 

; mpf : + 3819967666774002 -715
; mpfd: + 3819967666774002 -715 (1.07227e-215) class: Pos. norm. non-zero
; hwf : + 3819967666774002 -715 (1.07227e-215) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110100 #b1101100100100011110110000111110101001101111111110010)))
(assert (= y (fp #b0 #b01001010000 #b0101000111101111001110101111110111001000001100010101)))
(assert (= r (fp #b0 #b00100110100 #b1101100100100011110110000111110101001101111111110010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
