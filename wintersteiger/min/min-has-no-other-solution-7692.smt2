(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9147014540245475000546093724551610648632049560546875p-58 {+ 4119449127500203 -58 (6.64296e-018)}
; Y = 1.8747337431120232320580498708295635879039764404296875p895 {+ 3939450559527707 895 (4.95206e+269)}
; 1.9147014540245475000546093724551610648632049560546875p-58 m 1.8747337431120232320580498708295635879039764404296875p895 == 1.9147014540245475000546093724551610648632049560546875p-58
; [HW: 1.9147014540245475000546093724551610648632049560546875p-58] 

; mpf : + 4119449127500203 -58
; mpfd: + 4119449127500203 -58 (6.64296e-018) class: Pos. norm. non-zero
; hwf : + 4119449127500203 -58 (6.64296e-018) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000101 #b1110101000101001110111111101111010100011100110101011)))
(assert (= y (fp #b0 #b11101111110 #b1101111111101110100011001111001101011111101100011011)))
(assert (= r (fp #b0 #b01111000101 #b1110101000101001110111111101111010100011100110101011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
