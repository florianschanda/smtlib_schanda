(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.50974666970318960323993451311253011226654052734375p-289 {- 2295694911728636 -289 (-1.51787e-087)}
; Y = -1.1820677352242487945233051505056209862232208251953125p-684 {- 819960184512117 -684 (-1.47274e-206)}
; -1.50974666970318960323993451311253011226654052734375p-289 m -1.1820677352242487945233051505056209862232208251953125p-684 == -1.50974666970318960323993451311253011226654052734375p-289
; [HW: -1.50974666970318960323993451311253011226654052734375p-289] 

; mpf : - 2295694911728636 -289
; mpfd: - 2295694911728636 -289 (-1.51787e-087) class: Neg. norm. non-zero
; hwf : - 2295694911728636 -289 (-1.51787e-087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011110 #b1000001001111110110000011111101110011110101111111100)))
(assert (= y (fp #b1 #b00101010011 #b0010111010011011111111011011100001110001111001110101)))
(assert (= r (fp #b1 #b01011011110 #b1000001001111110110000011111101110011110101111111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
