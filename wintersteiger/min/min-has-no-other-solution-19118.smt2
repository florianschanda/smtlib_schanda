(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.911682396589138743792091190698556602001190185546875p-487 {+ 4105852501559086 -487 (4.78418e-147)}
; Y = -1.8518106757278383067699678576900623738765716552734375p951 {- 3836214241798103 951 (-3.5247e+286)}
; 1.911682396589138743792091190698556602001190185546875p-487 m -1.8518106757278383067699678576900623738765716552734375p951 == -1.8518106757278383067699678576900623738765716552734375p951
; [HW: -1.8518106757278383067699678576900623738765716552734375p951] 

; mpf : - 3836214241798103 951
; mpfd: - 3836214241798103 951 (-3.5247e+286) class: Neg. norm. non-zero
; hwf : - 3836214241798103 951 (-3.5247e+286) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011000 #b1110100101100100000001000111110110110000011100101110)))
(assert (= y (fp #b1 #b11110110110 #b1101101000010000010000111011001010100010011111010111)))
(assert (= r (fp #b1 #b11110110110 #b1101101000010000010000111011001010100010011111010111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
