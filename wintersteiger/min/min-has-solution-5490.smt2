(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7290728609244363500607732930802740156650543212890625p-738 {- 3283452264785233 -738 (-1.19585e-222)}
; Y = 1.98197654544528756304089256445877254009246826171875p536 {+ 4422429204153964 536 (4.45837e+161)}
; -1.7290728609244363500607732930802740156650543212890625p-738 m 1.98197654544528756304089256445877254009246826171875p536 == -1.7290728609244363500607732930802740156650543212890625p-738
; [HW: -1.7290728609244363500607732930802740156650543212890625p-738] 

; mpf : - 3283452264785233 -738
; mpfd: - 3283452264785233 -738 (-1.19585e-222) class: Neg. norm. non-zero
; hwf : - 3283452264785233 -738 (-1.19585e-222) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011101 #b1011101010100100100001001101111000010010010101010001)))
(assert (= y (fp #b0 #b11000010111 #b1111101101100010110100001001110000100000011001101100)))
(assert (= r (fp #b1 #b00100011101 #b1011101010100100100001001101111000010010010101010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
