(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.761623572229982226389211064088158309459686279296875p-471 {+ 3430047636091534 -471 (2.88925e-142)}
; Y = -1.65308126111496900279007604694925248622894287109375p-554 {- 2941216524200028 -554 (-2.80335e-167)}
; 1.761623572229982226389211064088158309459686279296875p-471 m -1.65308126111496900279007604694925248622894287109375p-554 == -1.65308126111496900279007604694925248622894287109375p-554
; [HW: -1.65308126111496900279007604694925248622894287109375p-554] 

; mpf : - 2941216524200028 -554
; mpfd: - 2941216524200028 -554 (-2.80335e-167) class: Neg. norm. non-zero
; hwf : - 2941216524200028 -554 (-2.80335e-167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000101000 #b1100001011111001110000110010111010010111001010001110)))
(assert (= y (fp #b1 #b00111010101 #b1010011100110000010101010110001000011110100001011100)))
(assert (= r (fp #b1 #b00111010101 #b1010011100110000010101010110001000011110100001011100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
