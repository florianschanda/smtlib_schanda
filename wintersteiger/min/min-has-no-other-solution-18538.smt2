(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5935691747671312246126262834877707064151763916015625p461 {- 2673197914299865 461 (-9.48853e+138)}
; Y = -1.299176845001406288560019675060175359249114990234375p373 {- 1347372727666214 373 (-2.49952e+112)}
; -1.5935691747671312246126262834877707064151763916015625p461 m -1.299176845001406288560019675060175359249114990234375p373 == -1.5935691747671312246126262834877707064151763916015625p461
; [HW: -1.5935691747671312246126262834877707064151763916015625p461] 

; mpf : - 2673197914299865 461
; mpfd: - 2673197914299865 461 (-9.48853e+138) class: Neg. norm. non-zero
; hwf : - 2673197914299865 461 (-9.48853e+138) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111001100 #b1001011111110100001001100100000110001001110111011001)))
(assert (= y (fp #b1 #b10101110100 #b0100110010010110110110101000110100000000011000100110)))
(assert (= r (fp #b1 #b10111001100 #b1001011111110100001001100100000110001001110111011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
