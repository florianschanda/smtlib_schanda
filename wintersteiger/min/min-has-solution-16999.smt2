(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.243230194073090988382546129287220537662506103515625p1017 {- 1095411411392826 1017 (-1.74605e+306)}
; Y = 1.59949607099269552890064005623571574687957763671875p966 {+ 2699890281932780 966 (9.97606e+290)}
; -1.243230194073090988382546129287220537662506103515625p1017 m 1.59949607099269552890064005623571574687957763671875p966 == -1.243230194073090988382546129287220537662506103515625p1017
; [HW: -1.243230194073090988382546129287220537662506103515625p1017] 

; mpf : - 1095411411392826 1017
; mpfd: - 1095411411392826 1017 (-1.74605e+306) class: Neg. norm. non-zero
; hwf : - 1095411411392826 1017 (-1.74605e+306) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111000 #b0011111001000100010101011000000011110001100100111010)))
(assert (= y (fp #b0 #b11111000101 #b1001100101111000100100110001001011111110011111101100)))
(assert (= r (fp #b1 #b11111111000 #b0011111001000100010101011000000011110001100100111010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
