(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5790599151800217558871963774436153471469879150390625p-294 {- 2607854018229937 -294 (-4.96112e-089)}
; Y = 1.804368739569142565670745170791633427143096923828125p599 {+ 3622554755792066 599 (3.74363e+180)}
; -1.5790599151800217558871963774436153471469879150390625p-294 m 1.804368739569142565670745170791633427143096923828125p599 == -1.5790599151800217558871963774436153471469879150390625p-294
; [HW: -1.5790599151800217558871963774436153471469879150390625p-294] 

; mpf : - 2607854018229937 -294
; mpfd: - 2607854018229937 -294 (-4.96112e-089) class: Neg. norm. non-zero
; hwf : - 2607854018229937 -294 (-4.96112e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011001 #b1001010000111101010001010100011000011111011010110001)))
(assert (= y (fp #b0 #b11001010110 #b1100110111101011000111000001011001011111110011000010)))
(assert (= r (fp #b1 #b01011011001 #b1001010000111101010001010100011000011111011010110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
