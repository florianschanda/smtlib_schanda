(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0867136540100810204734216313227079808712005615234375p918 {+ 390523579887735 918 (2.40797e+276)}
; Y = -1.515150240724629338018303315038792788982391357421875p679 {- 2320030432167262 679 (-3.80034e+204)}
; 1.0867136540100810204734216313227079808712005615234375p918 m -1.515150240724629338018303315038792788982391357421875p679 == -1.515150240724629338018303315038792788982391357421875p679
; [HW: -1.515150240724629338018303315038792788982391357421875p679] 

; mpf : - 2320030432167262 679
; mpfd: - 2320030432167262 679 (-3.80034e+204) class: Neg. norm. non-zero
; hwf : - 2320030432167262 679 (-3.80034e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110010101 #b0001011000110010110111011011010000010111000001110111)))
(assert (= y (fp #b1 #b11010100110 #b1000001111100000111000101101110001110000010101011110)))
(assert (= r (fp #b1 #b11010100110 #b1000001111100000111000101101110001110000010101011110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
