(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0281966083934992450821255260962061583995819091796875p106 {- 126986235054075 106 (-8.34172e+031)}
; Y = 1.5053480141212143283979685293161310255527496337890625p-551 {+ 2275885128088721 -551 (2.04225e-166)}
; -1.0281966083934992450821255260962061583995819091796875p106 m 1.5053480141212143283979685293161310255527496337890625p-551 == -1.0281966083934992450821255260962061583995819091796875p106
; [HW: -1.0281966083934992450821255260962061583995819091796875p106] 

; mpf : - 126986235054075 106
; mpfd: - 126986235054075 106 (-8.34172e+031) class: Neg. norm. non-zero
; hwf : - 126986235054075 106 (-8.34172e+031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001101001 #b0000011100110111111001001001011011101000011111111011)))
(assert (= y (fp #b0 #b00111011000 #b1000000101011110011111001100100110111111110010010001)))
(assert (= r (fp #b1 #b10001101001 #b0000011100110111111001001001011011101000011111111011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
