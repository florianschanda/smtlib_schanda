(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1829368810083240592945230673649348318576812744140625p856 {+ 823874469141409 856 (5.68379e+257)}
; Y = -1.7279647482636562028091020692954771220684051513671875p743 {- 3278461769019059 743 (-7.99506e+223)}
; 1.1829368810083240592945230673649348318576812744140625p856 m -1.7279647482636562028091020692954771220684051513671875p743 == -1.7279647482636562028091020692954771220684051513671875p743
; [HW: -1.7279647482636562028091020692954771220684051513671875p743] 

; mpf : - 3278461769019059 743
; mpfd: - 3278461769019059 743 (-7.99506e+223) class: Neg. norm. non-zero
; hwf : - 3278461769019059 743 (-7.99506e+223) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010111 #b0010111011010100111100111001000100101001101110100001)))
(assert (= y (fp #b1 #b11011100110 #b1011101001011011111001011101001001101110111010110011)))
(assert (= r (fp #b1 #b11011100110 #b1011101001011011111001011101001001101110111010110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
