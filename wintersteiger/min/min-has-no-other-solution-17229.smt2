(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2324803561526123107938701650709845125675201416015625p232 {- 1046998445339865 232 (-8.50627e+069)}
; Y = 1.77019305842595375821701964014209806919097900390625p-437 {+ 3468641170930468 -437 (4.98784e-132)}
; -1.2324803561526123107938701650709845125675201416015625p232 m 1.77019305842595375821701964014209806919097900390625p-437 == -1.2324803561526123107938701650709845125675201416015625p232
; [HW: -1.2324803561526123107938701650709845125675201416015625p232] 

; mpf : - 1046998445339865 232
; mpfd: - 1046998445339865 232 (-8.50627e+069) class: Neg. norm. non-zero
; hwf : - 1046998445339865 232 (-8.50627e+069) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011100111 #b0011101110000011110101010010011010100011010011011001)))
(assert (= y (fp #b0 #b01001001010 #b1100010100101011010111110100110110001011101100100100)))
(assert (= r (fp #b1 #b10011100111 #b0011101110000011110101010010011010100011010011011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
