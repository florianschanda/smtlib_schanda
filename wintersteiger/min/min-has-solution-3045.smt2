(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2489914254329776976959465173422358930110931396484375p369 {+ 1121357690798407 369 (1.50185e+111)}
; Y = -1.665761145178668467536908792681060731410980224609375p418 {- 2998321645344406 418 (-1.12759e+126)}
; 1.2489914254329776976959465173422358930110931396484375p369 m -1.665761145178668467536908792681060731410980224609375p418 == -1.665761145178668467536908792681060731410980224609375p418
; [HW: -1.665761145178668467536908792681060731410980224609375p418] 

; mpf : - 2998321645344406 418
; mpfd: - 2998321645344406 418 (-1.12759e+126) class: Neg. norm. non-zero
; hwf : - 2998321645344406 418 (-1.12759e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110000 #b0011111110111101111001101110110100111000000101000111)))
(assert (= y (fp #b1 #b10110100001 #b1010101001101111010100101000100101111101011010010110)))
(assert (= r (fp #b1 #b10110100001 #b1010101001101111010100101000100101111101011010010110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
