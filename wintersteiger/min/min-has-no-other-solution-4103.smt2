(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.966694396949653533823720863438211381435394287109375p127 {- 4353604525883606 127 (-3.34616e+038)}
; Y = 1.93507355631745081581129852565936744213104248046875p728 {+ 4211196919795276 728 (2.73234e+219)}
; -1.966694396949653533823720863438211381435394287109375p127 m 1.93507355631745081581129852565936744213104248046875p728 == -1.966694396949653533823720863438211381435394287109375p127
; [HW: -1.966694396949653533823720863438211381435394287109375p127] 

; mpf : - 4353604525883606 127
; mpfd: - 4353604525883606 127 (-3.34616e+038) class: Neg. norm. non-zero
; hwf : - 4353604525883606 127 (-3.34616e+038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001111110 #b1111011101111001010010001011010000100000000011010110)))
(assert (= y (fp #b0 #b11011010111 #b1110111101100000111110110000011110111100111001001100)))
(assert (= r (fp #b1 #b10001111110 #b1111011101111001010010001011010000100000000011010110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
