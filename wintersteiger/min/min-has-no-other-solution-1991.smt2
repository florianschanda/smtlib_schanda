(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.514343149435730229157570647657848894596099853515625p524 {+ 2316395616139322 524 (8.31653e+157)}
; Y = 1.2115556106193405838666876661591231822967529296875p329 {+ 952761769153400 329 (1.32499e+099)}
; 1.514343149435730229157570647657848894596099853515625p524 m 1.2115556106193405838666876661591231822967529296875p329 == 1.2115556106193405838666876661591231822967529296875p329
; [HW: 1.2115556106193405838666876661591231822967529296875p329] 

; mpf : + 952761769153400 329
; mpfd: + 952761769153400 329 (1.32499e+099) class: Pos. norm. non-zero
; hwf : + 952761769153400 329 (1.32499e+099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001011 #b1000001110101011111111100001110110111111100000111010)))
(assert (= y (fp #b0 #b10101001000 #b0011011000101000100000100010110011100101001101111000)))
(assert (= r (fp #b0 #b10101001000 #b0011011000101000100000100010110011100101001101111000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
