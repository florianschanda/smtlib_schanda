(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6452406545181867958405064200633205473423004150390625p-554 {+ 2905905571252401 -554 (2.79005e-167)}
; Y = 1.017568632958697261159386471263132989406585693359375p371 {+ 79122088846198 371 (4.89432e+111)}
; 1.6452406545181867958405064200633205473423004150390625p-554 m 1.017568632958697261159386471263132989406585693359375p371 == 1.6452406545181867958405064200633205473423004150390625p-554
; [HW: 1.6452406545181867958405064200633205473423004150390625p-554] 

; mpf : + 2905905571252401 -554
; mpfd: + 2905905571252401 -554 (2.79005e-167) class: Pos. norm. non-zero
; hwf : + 2905905571252401 -554 (2.79005e-167) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111010101 #b1010010100101110011111011101010100110100100010110001)))
(assert (= y (fp #b0 #b10101110010 #b0000010001111111011000001011111111111110001101110110)))
(assert (= r (fp #b0 #b00111010101 #b1010010100101110011111011101010100110100100010110001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
