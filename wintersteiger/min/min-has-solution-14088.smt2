(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2503537099359640638596147255157120525836944580078125p525 {- 1127492874778429 525 (-1.37335e+158)}
; Y = -1.73716066390606282965336504275910556316375732421875p-830 {- 3319876491279532 -830 (-2.42629e-250)}
; -1.2503537099359640638596147255157120525836944580078125p525 m -1.73716066390606282965336504275910556316375732421875p-830 == -1.2503537099359640638596147255157120525836944580078125p525
; [HW: -1.2503537099359640638596147255157120525836944580078125p525] 

; mpf : - 1127492874778429 525
; mpfd: - 1127492874778429 525 (-1.37335e+158) class: Neg. norm. non-zero
; hwf : - 1127492874778429 525 (-1.37335e+158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001100 #b0100000000010111001011100100010010011011011100111101)))
(assert (= y (fp #b1 #b00011000001 #b1011110010110110100011111010111101011111110010101100)))
(assert (= r (fp #b1 #b11000001100 #b0100000000010111001011100100010010011011011100111101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
