(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.79014964042099666841068028588779270648956298828125p-520 {+ 3558517626166932 -520 (5.21545e-157)}
; Y = -1.678310070497297079583631784771569073200225830078125p-220 {- 3054836980733282 -220 (-9.96032e-067)}
; 1.79014964042099666841068028588779270648956298828125p-520 m -1.678310070497297079583631784771569073200225830078125p-220 == -1.678310070497297079583631784771569073200225830078125p-220
; [HW: -1.678310070497297079583631784771569073200225830078125p-220] 

; mpf : - 3054836980733282 -220
; mpfd: - 3054836980733282 -220 (-9.96032e-067) class: Neg. norm. non-zero
; hwf : - 3054836980733282 -220 (-9.96032e-067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110111 #b1100101001000111001111110011000010001101111010010100)))
(assert (= y (fp #b1 #b01100100011 #b1010110110100101101110101001000101010101010101100010)))
(assert (= r (fp #b1 #b01100100011 #b1010110110100101101110101001000101010101010101100010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
