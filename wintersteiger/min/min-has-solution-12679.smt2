(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9299737539093673177603704971261322498321533203125p-166 {+ 4188229451570568 -166 (2.06335e-050)}
; Y = -1.8271996935861556377034276010817848145961761474609375p-434 {- 3725376231795599 -434 (-4.11877e-131)}
; 1.9299737539093673177603704971261322498321533203125p-166 m -1.8271996935861556377034276010817848145961761474609375p-434 == -1.8271996935861556377034276010817848145961761474609375p-434
; [HW: -1.8271996935861556377034276010817848145961761474609375p-434] 

; mpf : - 3725376231795599 -434
; mpfd: - 3725376231795599 -434 (-4.11877e-131) class: Neg. norm. non-zero
; hwf : - 3725376231795599 -434 (-4.11877e-131) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011001 #b1110111000010010110000101000101100101101110110001000)))
(assert (= y (fp #b1 #b01001001101 #b1101001111000011010110111110111100110110101110001111)))
(assert (= r (fp #b1 #b01001001101 #b1101001111000011010110111110111100110110101110001111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
