(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.06794740773318341808817422133870422840118408203125p629 {+ 306007920147956 629 (2.37912e+189)}
; Y = 1.0584900084366675176994476714753545820713043212890625p782 {+ 263415580200273 782 (2.69242e+235)}
; 1.06794740773318341808817422133870422840118408203125p629 m 1.0584900084366675176994476714753545820713043212890625p782 == 1.06794740773318341808817422133870422840118408203125p629
; [HW: 1.06794740773318341808817422133870422840118408203125p629] 

; mpf : + 306007920147956 629
; mpfd: + 306007920147956 629 (2.37912e+189) class: Pos. norm. non-zero
; hwf : + 306007920147956 629 (2.37912e+189) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110100 #b0001000101100101000000000101011000001111110111110100)))
(assert (= y (fp #b0 #b11100001101 #b0000111011111001001100111000000101100000110101010001)))
(assert (= r (fp #b0 #b11001110100 #b0001000101100101000000000101011000001111110111110100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
