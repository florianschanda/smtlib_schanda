(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7153143454669741441165342621388845145702362060546875p953 {+ 3221489419697835 953 (1.30596e+287)}
; Y = 1.5620660507580141906913695493130944669246673583984375p-179 {+ 2531320456751399 -179 (2.03859e-054)}
; 1.7153143454669741441165342621388845145702362060546875p953 m 1.5620660507580141906913695493130944669246673583984375p-179 == 1.5620660507580141906913695493130944669246673583984375p-179
; [HW: 1.5620660507580141906913695493130944669246673583984375p-179] 

; mpf : + 2531320456751399 -179
; mpfd: + 2531320456751399 -179 (2.03859e-054) class: Pos. norm. non-zero
; hwf : + 2531320456751399 -179 (2.03859e-054) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110111000 #b1011011100011110110101110100100000100011111010101011)))
(assert (= y (fp #b0 #b01101001100 #b1000111111100011100011111000101000110010100100100111)))
(assert (= r (fp #b0 #b01101001100 #b1000111111100011100011111000101000110010100100100111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
