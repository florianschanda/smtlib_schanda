(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5630592322973344554526420324691571295261383056640625p385 {- 2535793348761793 385 (-1.23175e+116)}
; Y = -1.264765234477680078128969398676417768001556396484375p-963 {- 1192396611334342 -963 (-1.62227e-290)}
; -1.5630592322973344554526420324691571295261383056640625p385 m -1.264765234477680078128969398676417768001556396484375p-963 == -1.5630592322973344554526420324691571295261383056640625p385
; [HW: -1.5630592322973344554526420324691571295261383056640625p385] 

; mpf : - 2535793348761793 385
; mpfd: - 2535793348761793 385 (-1.23175e+116) class: Neg. norm. non-zero
; hwf : - 2535793348761793 385 (-1.23175e+116) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110000000 #b1001000000100100101001100101110001101101100011000001)))
(assert (= y (fp #b1 #b00000111100 #b0100001111000111101001111000011100110011000011000110)))
(assert (= r (fp #b1 #b10110000000 #b1001000000100100101001100101110001101101100011000001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
