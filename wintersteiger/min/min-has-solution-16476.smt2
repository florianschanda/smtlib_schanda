(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.56775510588688593571760065970011055469512939453125p739 {- 2556941683309876 739 (-4.53362e+222)}
; Y = -1.3265089421860192242519360661390237510204315185546875p-481 {- 1470465550362091 -481 (-2.12462e-145)}
; -1.56775510588688593571760065970011055469512939453125p739 m -1.3265089421860192242519360661390237510204315185546875p-481 == -1.56775510588688593571760065970011055469512939453125p739
; [HW: -1.56775510588688593571760065970011055469512939453125p739] 

; mpf : - 2556941683309876 739
; mpfd: - 2556941683309876 739 (-4.53362e+222) class: Neg. norm. non-zero
; hwf : - 2556941683309876 739 (-4.53362e+222) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011100010 #b1001000101011000011001100000101111101011110100110100)))
(assert (= y (fp #b1 #b01000011110 #b0101001110010110000101110000110010001010010111101011)))
(assert (= r (fp #b1 #b11011100010 #b1001000101011000011001100000101111101011110100110100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
