(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7521664540789780861729241223656572401523590087890625p-663 {+ 3387456562310673 -663 (4.57813e-200)}
; Y = -1.192528296780461349868573961430229246616363525390625p393 {- 867070365638762 393 (-2.40579e+118)}
; 1.7521664540789780861729241223656572401523590087890625p-663 m -1.192528296780461349868573961430229246616363525390625p393 == -1.192528296780461349868573961430229246616363525390625p393
; [HW: -1.192528296780461349868573961430229246616363525390625p393] 

; mpf : - 867070365638762 393
; mpfd: - 867070365638762 393 (-2.40579e+118) class: Neg. norm. non-zero
; hwf : - 867070365638762 393 (-2.40579e+118) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101101000 #b1100000010001101111110110001000101101010111000010001)))
(assert (= y (fp #b1 #b10110001000 #b0011000101001001100010001101001000111010000001101010)))
(assert (= r (fp #b1 #b10110001000 #b0011000101001001100010001101001000111010000001101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
