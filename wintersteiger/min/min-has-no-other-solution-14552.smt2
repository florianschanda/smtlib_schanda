(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.885695327530718667929932053084485232830047607421875p344 {+ 3988817147031134 344 (6.75756e+103)}
; Y = -1.53930985457085878209682050510309636592864990234375p194 {- 2428835660082556 194 (-3.86496e+058)}
; 1.885695327530718667929932053084485232830047607421875p344 m -1.53930985457085878209682050510309636592864990234375p194 == -1.53930985457085878209682050510309636592864990234375p194
; [HW: -1.53930985457085878209682050510309636592864990234375p194] 

; mpf : - 2428835660082556 194
; mpfd: - 2428835660082556 194 (-3.86496e+058) class: Neg. norm. non-zero
; hwf : - 2428835660082556 194 (-3.86496e+058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101010111 #b1110001010111100111011011101000111110110111001011110)))
(assert (= y (fp #b1 #b10011000001 #b1000101000010000001101011110101111001010110101111100)))
(assert (= r (fp #b1 #b10011000001 #b1000101000010000001101011110101111001010110101111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
