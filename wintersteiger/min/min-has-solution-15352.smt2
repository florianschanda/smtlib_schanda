(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.39404821903238929081680907984264194965362548828125p-123 {- 1774635412400276 -123 (-1.31096e-037)}
; Y = -1.05479200003073270153208795818500220775604248046875p-501 {- 246761230921292 -501 (-1.61116e-151)}
; -1.39404821903238929081680907984264194965362548828125p-123 m -1.05479200003073270153208795818500220775604248046875p-501 == -1.39404821903238929081680907984264194965362548828125p-123
; [HW: -1.39404821903238929081680907984264194965362548828125p-123] 

; mpf : - 1774635412400276 -123
; mpfd: - 1774635412400276 -123 (-1.31096e-037) class: Neg. norm. non-zero
; hwf : - 1774635412400276 -123 (-1.31096e-037) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000100 #b0110010011100000010110000001010111001010100010010100)))
(assert (= y (fp #b1 #b01000001010 #b0000111000000110110110010011100000110110111001001100)))
(assert (= r (fp #b1 #b01110000100 #b0110010011100000010110000001010111001010100010010100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
