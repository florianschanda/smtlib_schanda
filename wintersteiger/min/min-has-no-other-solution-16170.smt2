(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.67174589813868568199950459529645740985870361328125p-611 {- 3025274576545044 -611 (-1.96717e-184)}
; Y = 1.940603481805669883186737934011034667491912841796875p888 {+ 4236101490163406 888 (4.00473e+267)}
; -1.67174589813868568199950459529645740985870361328125p-611 m 1.940603481805669883186737934011034667491912841796875p888 == -1.67174589813868568199950459529645740985870361328125p-611
; [HW: -1.67174589813868568199950459529645740985870361328125p-611] 

; mpf : - 3025274576545044 -611
; mpfd: - 3025274576545044 -611 (-1.96717e-184) class: Neg. norm. non-zero
; hwf : - 3025274576545044 -611 (-1.96717e-184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011100 #b1010101111110111100010100000011110111010010100010100)))
(assert (= y (fp #b0 #b11101110111 #b1111000011001011011000111100100011011011111011001110)))
(assert (= r (fp #b1 #b00110011100 #b1010101111110111100010100000011110111010010100010100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
