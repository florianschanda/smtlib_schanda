(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9059701658725358708323938117246143519878387451171875p-707 {+ 4080126901432339 -707 (2.8308e-213)}
; Y = -1.8779964287781665266408026582212187349796295166015625p-880 {- 3954144389477977 -880 (-2.32969e-265)}
; 1.9059701658725358708323938117246143519878387451171875p-707 m -1.8779964287781665266408026582212187349796295166015625p-880 == -1.8779964287781665266408026582212187349796295166015625p-880
; [HW: -1.8779964287781665266408026582212187349796295166015625p-880] 

; mpf : - 3954144389477977 -880
; mpfd: - 3954144389477977 -880 (-2.32969e-265) class: Neg. norm. non-zero
; hwf : - 3954144389477977 -880 (-2.32969e-265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111100 #b1110011111101101101010010010100110010011000000010011)))
(assert (= y (fp #b1 #b00010001111 #b1110000011000100010111111011101110011011011001011001)))
(assert (= r (fp #b1 #b00010001111 #b1110000011000100010111111011101110011011011001011001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
