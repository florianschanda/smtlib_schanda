(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 0.34285009264815169416351636755280196666717529296875p-1022 {+ 1544059549494156 -1023 (7.62867e-309)}
; Y = 1.54089338023492583573670344776473939418792724609375p-389 {+ 2435967225673180 -389 (1.22209e-117)}
; 0.34285009264815169416351636755280196666717529296875p-1022 m 1.54089338023492583573670344776473939418792724609375p-389 == 0.34285009264815169416351636755280196666717529296875p-1022
; [HW: 0.34285009264815169416351636755280196666717529296875p-1022] 

; mpf : + 1544059549494156 -1023
; mpfd: + 1544059549494156 -1023 (7.62867e-309) class: Pos. denorm.
; hwf : + 1544059549494156 -1023 (7.62867e-309) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0101011111000101000001100000111101011010101110001100)))
(assert (= y (fp #b0 #b01001111010 #b1000101001110111111111010001001010111011010111011100)))
(assert (= r (fp #b0 #b00000000000 #b0101011111000101000001100000111101011010101110001100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
