(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0148364401894252040392530034296214580535888671875p-11 {- 66817386508600 -11 (-0.000495526)}
; Y = -1.785605042565517219799176018568687140941619873046875p196 {- 3538050576958446 196 (-1.79335e+059)}
; -1.0148364401894252040392530034296214580535888671875p-11 m -1.785605042565517219799176018568687140941619873046875p196 == -1.785605042565517219799176018568687140941619873046875p196
; [HW: -1.785605042565517219799176018568687140941619873046875p196] 

; mpf : - 3538050576958446 196
; mpfd: - 3538050576958446 196 (-1.79335e+059) class: Neg. norm. non-zero
; hwf : - 3538050576958446 196 (-1.79335e+059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111110100 #b0000001111001100010100100010100101100111000100111000)))
(assert (= y (fp #b1 #b10011000011 #b1100100100011101011010010111110101100100001111101110)))
(assert (= r (fp #b1 #b10011000011 #b1100100100011101011010010111110101100100001111101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
