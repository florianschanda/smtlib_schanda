(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.948676189313560680460568619309924542903900146484375p-124 {- 4272457732687814 -124 (-9.16263e-038)}
; Y = 1.7314590250852435193706924110301770269870758056640625p-213 {+ 3294198592810689 -213 (1.31529e-064)}
; -1.948676189313560680460568619309924542903900146484375p-124 m 1.7314590250852435193706924110301770269870758056640625p-213 == -1.948676189313560680460568619309924542903900146484375p-124
; [HW: -1.948676189313560680460568619309924542903900146484375p-124] 

; mpf : - 4272457732687814 -124
; mpfd: - 4272457732687814 -124 (-9.16263e-038) class: Neg. norm. non-zero
; hwf : - 4272457732687814 -124 (-9.16263e-038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000011 #b1111001011011100011100010101011110011000011111000110)))
(assert (= y (fp #b0 #b01100101010 #b1011101101000000111001100000111100011010111011000001)))
(assert (= r (fp #b1 #b01110000011 #b1111001011011100011100010101011110011000011111000110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
