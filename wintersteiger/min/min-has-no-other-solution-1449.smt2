(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2910900816069876828606766139273531734943389892578125p-845 {- 1310953183056477 -845 (-5.50314e-255)}
; Y = 1.3616763108552951688778875904972665011882781982421875p508 {+ 1628845298796643 508 (1.14107e+153)}
; -1.2910900816069876828606766139273531734943389892578125p-845 m 1.3616763108552951688778875904972665011882781982421875p508 == -1.2910900816069876828606766139273531734943389892578125p-845
; [HW: -1.2910900816069876828606766139273531734943389892578125p-845] 

; mpf : - 1310953183056477 -845
; mpfd: - 1310953183056477 -845 (-5.50314e-255) class: Neg. norm. non-zero
; hwf : - 1310953183056477 -845 (-5.50314e-255) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110010 #b0100101010000100111000010010110010110001001001011101)))
(assert (= y (fp #b0 #b10111111011 #b0101110010010110110100011001011011011100100001100011)))
(assert (= r (fp #b1 #b00010110010 #b0100101010000100111000010010110010110001001001011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
