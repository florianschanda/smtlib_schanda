(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3784872876507427985615095167304389178752899169921875p233 {+ 1704555207628355 233 (1.90279e+070)}
; Y = -1.2241631497204459311234359120135195553302764892578125p-91 {- 1009541077551197 -91 (-4.94436e-028)}
; 1.3784872876507427985615095167304389178752899169921875p233 m -1.2241631497204459311234359120135195553302764892578125p-91 == -1.2241631497204459311234359120135195553302764892578125p-91
; [HW: -1.2241631497204459311234359120135195553302764892578125p-91] 

; mpf : - 1009541077551197 -91
; mpfd: - 1009541077551197 -91 (-4.94436e-028) class: Neg. norm. non-zero
; hwf : - 1009541077551197 -91 (-4.94436e-028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011101000 #b0110000011100100100010101111101001101001011001000011)))
(assert (= y (fp #b1 #b01110100100 #b0011100101100010110000011001010100000100100001011101)))
(assert (= r (fp #b1 #b01110100100 #b0011100101100010110000011001010100000100100001011101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
