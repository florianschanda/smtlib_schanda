(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.965468806742290741595979852718301117420196533203125p160 {+ 4348084958282418 160 (2.87254e+048)}
; Y = -1.6501157686390339751625333519768901169300079345703125p-730 {- 2927861133390437 -730 (-2.92158e-220)}
; 1.965468806742290741595979852718301117420196533203125p160 m -1.6501157686390339751625333519768901169300079345703125p-730 == -1.6501157686390339751625333519768901169300079345703125p-730
; [HW: -1.6501157686390339751625333519768901169300079345703125p-730] 

; mpf : - 2927861133390437 -730
; mpfd: - 2927861133390437 -730 (-2.92158e-220) class: Neg. norm. non-zero
; hwf : - 2927861133390437 -730 (-2.92158e-220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011111 #b1111011100101000111101101011011001000100001010110010)))
(assert (= y (fp #b1 #b00100100101 #b1010011001101101111111001010110011101011001001100101)))
(assert (= r (fp #b1 #b00100100101 #b1010011001101101111111001010110011101011001001100101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
