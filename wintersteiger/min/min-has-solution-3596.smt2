(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3853785375419824799081425226177088916301727294921875p432 {+ 1735590638070659 432 (1.53648e+130)}
; Y = -1.64391677804773284066186533891595900058746337890625p-748 {- 2899943361673380 -748 (-1.11031e-225)}
; 1.3853785375419824799081425226177088916301727294921875p432 m -1.64391677804773284066186533891595900058746337890625p-748 == -1.64391677804773284066186533891595900058746337890625p-748
; [HW: -1.64391677804773284066186533891595900058746337890625p-748] 

; mpf : - 2899943361673380 -748
; mpfd: - 2899943361673380 -748 (-1.11031e-225) class: Neg. norm. non-zero
; hwf : - 2899943361673380 -748 (-1.11031e-225) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110101111 #b0110001010101000001010101111011101010010101110000011)))
(assert (= y (fp #b1 #b00100010011 #b1010010011010111101110101101111100001111100010100100)))
(assert (= r (fp #b1 #b00100010011 #b1010010011010111101110101101111100001111100010100100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
