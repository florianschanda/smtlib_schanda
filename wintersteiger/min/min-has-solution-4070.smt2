(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6354457287132986298416881254524923861026763916015625p717 {- 2861793147047385 717 (-1.12757e+216)}
; Y = -1.290058246750418913251223784754984080791473388671875p-419 {- 1306306211980926 -419 (-9.52886e-127)}
; -1.6354457287132986298416881254524923861026763916015625p717 m -1.290058246750418913251223784754984080791473388671875p-419 == -1.6354457287132986298416881254524923861026763916015625p717
; [HW: -1.6354457287132986298416881254524923861026763916015625p717] 

; mpf : - 2861793147047385 717
; mpfd: - 2861793147047385 717 (-1.12757e+216) class: Neg. norm. non-zero
; hwf : - 2861793147047385 717 (-1.12757e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011001100 #b1010001010101100100100100011111100110100110111011001)))
(assert (= y (fp #b1 #b01001011100 #b0100101001000001010000011101101110111010011001111110)))
(assert (= r (fp #b1 #b11011001100 #b1010001010101100100100100011111100110100110111011001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
