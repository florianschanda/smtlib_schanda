(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.639883869228124790851097714039497077465057373046875p773 {- 2881780755016174 773 (-8.14704e+232)}
; Y = 1.1039527191622473534238224601722322404384613037109375p-656 {+ 468161427283247 -656 (3.6921e-198)}
; -1.639883869228124790851097714039497077465057373046875p773 m 1.1039527191622473534238224601722322404384613037109375p-656 == -1.639883869228124790851097714039497077465057373046875p773
; [HW: -1.639883869228124790851097714039497077465057373046875p773] 

; mpf : - 2881780755016174 773
; mpfd: - 2881780755016174 773 (-8.14704e+232) class: Neg. norm. non-zero
; hwf : - 2881780755016174 773 (-8.14704e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000100 #b1010001111001111011011011110001110010010100111101110)))
(assert (= y (fp #b0 #b00101101111 #b0001101010011100101001010011100100100001110100101111)))
(assert (= r (fp #b1 #b11100000100 #b1010001111001111011011011110001110010010100111101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
