(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6572509644160244857147290531429462134838104248046875p8 {- 2959995198432907 8 (-424.256)}
; Y = 1.2892433342460647427429876188398338854312896728515625p909 {+ 1302636172329977 909 (5.57957e+273)}
; -1.6572509644160244857147290531429462134838104248046875p8 m 1.2892433342460647427429876188398338854312896728515625p909 == -1.6572509644160244857147290531429462134838104248046875p8
; [HW: -1.6572509644160244857147290531429462134838104248046875p8] 

; mpf : - 2959995198432907 8
; mpfd: - 2959995198432907 8 (-424.256) class: Neg. norm. non-zero
; hwf : - 2959995198432907 8 (-424.256) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000000111 #b1010100001000001100110010110010101101110011010001011)))
(assert (= y (fp #b0 #b11110001100 #b0100101000001011110110011110010100101100001111111001)))
(assert (= r (fp #b1 #b10000000111 #b1010100001000001100110010110010101101110011010001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
