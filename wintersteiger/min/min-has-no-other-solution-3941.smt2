(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.165406816847078363963419178617186844348907470703125p-676 {- 744926078717042 -676 (-3.71707e-204)}
; Y = 1.0450442340839860566603647384908981621265411376953125p165 {+ 202861195835829 165 (4.88747e+049)}
; -1.165406816847078363963419178617186844348907470703125p-676 m 1.0450442340839860566603647384908981621265411376953125p165 == -1.165406816847078363963419178617186844348907470703125p-676
; [HW: -1.165406816847078363963419178617186844348907470703125p-676] 

; mpf : - 744926078717042 -676
; mpfd: - 744926078717042 -676 (-3.71707e-204) class: Neg. norm. non-zero
; hwf : - 744926078717042 -676 (-3.71707e-204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101011011 #b0010101001011000000110011110010011100100110001110010)))
(assert (= y (fp #b0 #b10010100100 #b0000101110001000000001001101100001000011100110110101)))
(assert (= r (fp #b1 #b00101011011 #b0010101001011000000110011110010011100100110001110010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
