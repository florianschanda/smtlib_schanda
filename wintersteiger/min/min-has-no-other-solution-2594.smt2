(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.631654191647382123875331672024913132190704345703125p900 {+ 2844717582130162 900 (1.37919e+271)}
; Y = 1.009838501308545577472841614508070051670074462890625p-489 {+ 44308670827050 -489 (6.31806e-148)}
; 1.631654191647382123875331672024913132190704345703125p900 m 1.009838501308545577472841614508070051670074462890625p-489 == 1.009838501308545577472841614508070051670074462890625p-489
; [HW: 1.009838501308545577472841614508070051670074462890625p-489] 

; mpf : + 44308670827050 -489
; mpfd: + 44308670827050 -489 (6.31806e-148) class: Pos. norm. non-zero
; hwf : + 44308670827050 -489 (6.31806e-148) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000011 #b1010000110110100000101101100111110000001101111110010)))
(assert (= y (fp #b0 #b01000010110 #b0000001010000100110001101010100101011100101000101010)))
(assert (= r (fp #b0 #b01000010110 #b0000001010000100110001101010100101011100101000101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
