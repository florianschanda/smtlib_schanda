(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9018516291666507367352778601343743503093719482421875p-143 {- 4061578661058403 -143 (-1.70564e-043)}
; Y = 1.8827032458987915664039292096276767551898956298828125p-436 {+ 3975342009308525 -436 (1.06097e-131)}
; -1.9018516291666507367352778601343743503093719482421875p-143 m 1.8827032458987915664039292096276767551898956298828125p-436 == -1.9018516291666507367352778601343743503093719482421875p-143
; [HW: -1.9018516291666507367352778601343743503093719482421875p-143] 

; mpf : - 4061578661058403 -143
; mpfd: - 4061578661058403 -143 (-1.70564e-043) class: Neg. norm. non-zero
; hwf : - 4061578661058403 -143 (-1.70564e-043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110000 #b1110011011011111101111111001010100011101011101100011)))
(assert (= y (fp #b0 #b01001001011 #b1110000111111000110101110000010100110101010101101101)))
(assert (= r (fp #b1 #b01101110000 #b1110011011011111101111111001010100011101011101100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
