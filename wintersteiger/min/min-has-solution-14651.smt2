(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8524637867549296199598529710783623158931732177734375p389 {+ 3839155592376343 389 (2.33571e+117)}
; Y = 1.5899395694483307028832541618612594902515411376953125p28 {+ 2656851625138613 28 (4.26796e+008)}
; 1.8524637867549296199598529710783623158931732177734375p389 m 1.5899395694483307028832541618612594902515411376953125p28 == 1.5899395694483307028832541618612594902515411376953125p28
; [HW: 1.5899395694483307028832541618612594902515411376953125p28] 

; mpf : + 2656851625138613 28
; mpfd: + 2656851625138613 28 (4.26796e+008) class: Pos. norm. non-zero
; hwf : + 2656851625138613 28 (4.26796e+008) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110000100 #b1101101000111011000100010001010100100011000000010111)))
(assert (= y (fp #b0 #b10000011011 #b1001011100000110010001111001010101100101100110110101)))
(assert (= r (fp #b0 #b10000011011 #b1001011100000110010001111001010101100101100110110101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
