(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7068710276879606180244763891096226871013641357421875p999 {+ 3183464096894499 999 (9.14463e+300)}
; Y = -1.1683785320699062726390593525138683617115020751953125p500 {- 758309494287221 500 (-3.82456e+150)}
; 1.7068710276879606180244763891096226871013641357421875p999 m -1.1683785320699062726390593525138683617115020751953125p500 == -1.1683785320699062726390593525138683617115020751953125p500
; [HW: -1.1683785320699062726390593525138683617115020751953125p500] 

; mpf : - 758309494287221 500
; mpfd: - 758309494287221 500 (-3.82456e+150) class: Neg. norm. non-zero
; hwf : - 758309494287221 500 (-3.82456e+150) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100110 #b1011010011110101011111111110101001101000111000100011)))
(assert (= y (fp #b1 #b10111110011 #b0010101100011010110110110000000010010110101101110101)))
(assert (= r (fp #b1 #b10111110011 #b0010101100011010110110110000000010010110101101110101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
