(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.229345542877631647371572398697026073932647705078125p-295 {- 1032880501442786 -295 (-1.93119e-089)}
; Y = 1.8358852612095135636849363436340354382991790771484375p-530 {+ 3764492550907655 -530 (5.22333e-160)}
; -1.229345542877631647371572398697026073932647705078125p-295 m 1.8358852612095135636849363436340354382991790771484375p-530 == -1.229345542877631647371572398697026073932647705078125p-295
; [HW: -1.229345542877631647371572398697026073932647705078125p-295] 

; mpf : - 1032880501442786 -295
; mpfd: - 1032880501442786 -295 (-1.93119e-089) class: Neg. norm. non-zero
; hwf : - 1032880501442786 -295 (-1.93119e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011000 #b0011101010110110011000111011011000100100100011100010)))
(assert (= y (fp #b0 #b00111101101 #b1101010111111100100100111001010000011010011100000111)))
(assert (= r (fp #b1 #b01011011000 #b0011101010110110011000111011011000100100100011100010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
