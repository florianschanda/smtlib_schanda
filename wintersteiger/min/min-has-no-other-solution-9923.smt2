(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.78430271488838343429961241781711578369140625p160 {+ 3532185414516992 160 (2.60776e+048)}
; Y = 1.900537176974717024080518967821262776851654052734375p-951 {+ 4055658894656614 -951 (9.98506e-287)}
; 1.78430271488838343429961241781711578369140625p160 m 1.900537176974717024080518967821262776851654052734375p-951 == 1.900537176974717024080518967821262776851654052734375p-951
; [HW: 1.900537176974717024080518967821262776851654052734375p-951] 

; mpf : + 4055658894656614 -951
; mpfd: + 4055658894656614 -951 (9.98506e-287) class: Pos. norm. non-zero
; hwf : + 4055658894656614 -951 (9.98506e-287) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011111 #b1100100011001000000100000000111010011100000100000000)))
(assert (= y (fp #b0 #b00001001000 #b1110011010001001100110101011101111110000010001100110)))
(assert (= r (fp #b0 #b00001001000 #b1110011010001001100110101011101111110000010001100110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
