(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0356832804743703047023473118315450847148895263671875p36 {+ 160703208647731 36 (7.11716e+010)}
; Y = 1.3610635771839685315143242405611090362071990966796875p588 {+ 1626085791662779 588 (1.37885e+177)}
; 1.0356832804743703047023473118315450847148895263671875p36 m 1.3610635771839685315143242405611090362071990966796875p588 == 1.0356832804743703047023473118315450847148895263671875p36
; [HW: 1.0356832804743703047023473118315450847148895263671875p36] 

; mpf : + 160703208647731 36
; mpfd: + 160703208647731 36 (7.11716e+010) class: Pos. norm. non-zero
; hwf : + 160703208647731 36 (7.11716e+010) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000100011 #b0000100100100010100010100001101010100110110000110011)))
(assert (= y (fp #b0 #b11001001011 #b0101110001101110101010011001111111001000001010111011)))
(assert (= r (fp #b0 #b10000100011 #b0000100100100010100010100001101010100110110000110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
