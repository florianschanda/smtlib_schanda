(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0299367875277625206109632927109487354755401611328125p148 {- 134823305154701 148 (-3.67494e+044)}
; Y = -1.0940658978631707665130079476512037217617034912109375p585 {- 423635142564847 585 (-1.38545e+176)}
; -1.0299367875277625206109632927109487354755401611328125p148 m -1.0940658978631707665130079476512037217617034912109375p585 == -1.0940658978631707665130079476512037217617034912109375p585
; [HW: -1.0940658978631707665130079476512037217617034912109375p585] 

; mpf : - 423635142564847 585
; mpfd: - 423635142564847 585 (-1.38545e+176) class: Neg. norm. non-zero
; hwf : - 423635142564847 585 (-1.38545e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010010011 #b0000011110101001111011111111001101100001000010001101)))
(assert (= y (fp #b1 #b11001001000 #b0001100000010100101100111110001011111101101111101111)))
(assert (= r (fp #b1 #b11001001000 #b0001100000010100101100111110001011111101101111101111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
