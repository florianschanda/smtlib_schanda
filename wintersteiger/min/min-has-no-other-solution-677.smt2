(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.051805847024556594959676658618263900279998779296875p299 {- 233312793355406 299 (-1.07128e+090)}
; Y = -1.444497696782736984033590488252229988574981689453125p-201 {- 2001839661597778 -201 (-4.49457e-061)}
; -1.051805847024556594959676658618263900279998779296875p299 m -1.444497696782736984033590488252229988574981689453125p-201 == -1.051805847024556594959676658618263900279998779296875p299
; [HW: -1.051805847024556594959676658618263900279998779296875p299] 

; mpf : - 233312793355406 299
; mpfd: - 233312793355406 299 (-1.07128e+090) class: Neg. norm. non-zero
; hwf : - 233312793355406 299 (-1.07128e+090) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101010 #b0000110101000011001001011110001010110110010010001110)))
(assert (= y (fp #b1 #b01100110110 #b0111000111001010100110011101111011010100010001010010)))
(assert (= r (fp #b1 #b10100101010 #b0000110101000011001001011110001010110110010010001110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
