(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.328170483268144241861818954930640757083892822265625p-566 {+ 1477948466160410 -566 (5.49891e-171)}
; Y = 1.0517529597925256990009756918880157172679901123046875p-314 {+ 233074610436939 -314 (3.15134e-095)}
; 1.328170483268144241861818954930640757083892822265625p-566 m 1.0517529597925256990009756918880157172679901123046875p-314 == 1.328170483268144241861818954930640757083892822265625p-566
; [HW: 1.328170483268144241861818954930640757083892822265625p-566] 

; mpf : + 1477948466160410 -566
; mpfd: + 1477948466160410 -566 (5.49891e-171) class: Pos. norm. non-zero
; hwf : + 1477948466160410 -566 (5.49891e-171) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001001 #b0101010000000010111110110001010100100110001100011010)))
(assert (= y (fp #b0 #b01011000101 #b0000110100111111101011101001010111000111101101001011)))
(assert (= r (fp #b0 #b00111001001 #b0101010000000010111110110001010100100110001100011010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
