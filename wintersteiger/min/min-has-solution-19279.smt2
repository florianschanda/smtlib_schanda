(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2516590830511582499440237370436079800128936767578125p414 {+ 1133371752653597 414 (5.29547e+124)}
; Y = -1.5910677530692283188074043209780938923358917236328125p59 {- 2661932512473293 59 (-9.17188e+017)}
; 1.2516590830511582499440237370436079800128936767578125p414 m -1.5910677530692283188074043209780938923358917236328125p59 == -1.5910677530692283188074043209780938923358917236328125p59
; [HW: -1.5910677530692283188074043209780938923358917236328125p59] 

; mpf : - 2661932512473293 59
; mpfd: - 2661932512473293 59 (-9.17188e+017) class: Neg. norm. non-zero
; hwf : - 2661932512473293 59 (-9.17188e+017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011101 #b0100000001101100101110101100101101110010001100011101)))
(assert (= y (fp #b1 #b10000111010 #b1001011101010000001101110101110100100111000011001101)))
(assert (= r (fp #b1 #b10000111010 #b1001011101010000001101110101110100100111000011001101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
