(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1870422872487467191859877857496030628681182861328125p-48 {+ 842363575155981 -48 (4.21722e-015)}
; Y = -1.483797261864127303709892657934688031673431396484375p-196 {- 2178829168254150 -196 (-1.47739e-059)}
; 1.1870422872487467191859877857496030628681182861328125p-48 m -1.483797261864127303709892657934688031673431396484375p-196 == -1.483797261864127303709892657934688031673431396484375p-196
; [HW: -1.483797261864127303709892657934688031673431396484375p-196] 

; mpf : - 2178829168254150 -196
; mpfd: - 2178829168254150 -196 (-1.47739e-059) class: Neg. norm. non-zero
; hwf : - 2178829168254150 -196 (-1.47739e-059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001111 #b0010111111100010000000001101101010110011110100001101)))
(assert (= y (fp #b1 #b01100111011 #b0111101111011010001000110010100110011001110011000110)))
(assert (= r (fp #b1 #b01100111011 #b0111101111011010001000110010100110011001110011000110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
