(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5771178843123010437921038828790187835693359375p-261 {- 2599107888737728 -261 (-4.25633e-079)}
; Y = 1.7223767623130765702654798587900586426258087158203125p-64 {+ 3253295717574277 -64 (9.33702e-020)}
; -1.5771178843123010437921038828790187835693359375p-261 m 1.7223767623130765702654798587900586426258087158203125p-64 == -1.5771178843123010437921038828790187835693359375p-261
; [HW: -1.5771178843123010437921038828790187835693359375p-261] 

; mpf : - 2599107888737728 -261
; mpfd: - 2599107888737728 -261 (-4.25633e-079) class: Neg. norm. non-zero
; hwf : - 2599107888737728 -261 (-4.25633e-079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111010 #b1001001110111101111111110110011100001110110111000000)))
(assert (= y (fp #b0 #b01110111111 #b1011100011101101101011101111100110000110011010000101)))
(assert (= r (fp #b1 #b01011111010 #b1001001110111101111111110110011100001110110111000000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
