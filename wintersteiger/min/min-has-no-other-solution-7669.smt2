(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.71139287105187509752113328431732952594757080078125p-36 {- 3203828668983252 -36 (-2.4904e-011)}
; Y = -1.42734151794628072451587286195717751979827880859375p312 {- 1924575100982812 312 (-1.19093e+094)}
; -1.71139287105187509752113328431732952594757080078125p-36 m -1.42734151794628072451587286195717751979827880859375p312 == -1.42734151794628072451587286195717751979827880859375p312
; [HW: -1.42734151794628072451587286195717751979827880859375p312] 

; mpf : - 1924575100982812 312
; mpfd: - 1924575100982812 312 (-1.19093e+094) class: Neg. norm. non-zero
; hwf : - 1924575100982812 312 (-1.19093e+094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011011 #b1011011000011101110101111101101111000110011111010100)))
(assert (= y (fp #b1 #b10100110111 #b0110110101100110010000001111001111001101011000011100)))
(assert (= r (fp #b1 #b10100110111 #b0110110101100110010000001111001111001101011000011100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
