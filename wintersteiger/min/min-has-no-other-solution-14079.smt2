(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2238284164808852505501590712810866534709930419921875p523 {+ 1008033573058243 523 (3.36053e+157)}
; Y = 1.50230190530971530193937724106945097446441650390625p-150 {+ 2262166673580324 -150 (1.05259e-045)}
; 1.2238284164808852505501590712810866534709930419921875p523 m 1.50230190530971530193937724106945097446441650390625p-150 == 1.50230190530971530193937724106945097446441650390625p-150
; [HW: 1.50230190530971530193937724106945097446441650390625p-150] 

; mpf : + 2262166673580324 -150
; mpfd: + 2262166673580324 -150 (1.05259e-045) class: Pos. norm. non-zero
; hwf : + 2262166673580324 -150 (1.05259e-045) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001010 #b0011100101001100110100011011000010110011011011000011)))
(assert (= y (fp #b0 #b01101101001 #b1000000010010110110110111001000000000110000100100100)))
(assert (= r (fp #b0 #b01101101001 #b1000000010010110110110111001000000000110000100100100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
