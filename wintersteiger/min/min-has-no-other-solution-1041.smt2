(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9257114241050488079309843669761903584003448486328125p-978 {+ 4169033624652109 -978 (7.53799e-295)}
; Y = 1.02728528126029328149115826818160712718963623046875p634 {+ 122881982516556 634 (7.32333e+190)}
; 1.9257114241050488079309843669761903584003448486328125p-978 m 1.02728528126029328149115826818160712718963623046875p634 == 1.9257114241050488079309843669761903584003448486328125p-978
; [HW: 1.9257114241050488079309843669761903584003448486328125p-978] 

; mpf : + 4169033624652109 -978
; mpfd: + 4169033624652109 -978 (7.53799e-295) class: Pos. norm. non-zero
; hwf : + 4169033624652109 -978 (7.53799e-295) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101101 #b1110110011111011011011001000010000010000100101001101)))
(assert (= y (fp #b0 #b11001111001 #b0000011011111100001010110000111010101100110101001100)))
(assert (= r (fp #b0 #b00000101101 #b1110110011111011011011001000010000010000100101001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
