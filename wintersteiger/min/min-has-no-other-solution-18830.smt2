(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.699608583616236234803409388405270874500274658203125p-35 {+ 3150756956479282 -35 (4.94651e-011)}
; Y = -1.9528713340527279473946009602514095604419708251953125p-667 {- 4291350984971893 -667 (-3.18909e-201)}
; 1.699608583616236234803409388405270874500274658203125p-35 m -1.9528713340527279473946009602514095604419708251953125p-667 == -1.9528713340527279473946009602514095604419708251953125p-667
; [HW: -1.9528713340527279473946009602514095604419708251953125p-667] 

; mpf : - 4291350984971893 -667
; mpfd: - 4291350984971893 -667 (-3.18909e-201) class: Neg. norm. non-zero
; hwf : - 4291350984971893 -667 (-3.18909e-201) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011100 #b1011001100011001100011000101001010100001111100110010)))
(assert (= y (fp #b1 #b00101100100 #b1111001111101111011000000011000100001101011001110101)))
(assert (= r (fp #b1 #b00101100100 #b1111001111101111011000000011000100001101011001110101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
