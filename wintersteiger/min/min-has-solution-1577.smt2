(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.14066685926410205098591177375055849552154541015625p-304 {+ 633507214965188 -304 (3.49978e-092)}
; Y = -1.28313603181440338829588654334656894207000732421875p686 {- 1275131327374508 686 (-4.11955e+206)}
; 1.14066685926410205098591177375055849552154541015625p-304 m -1.28313603181440338829588654334656894207000732421875p686 == -1.28313603181440338829588654334656894207000732421875p686
; [HW: -1.28313603181440338829588654334656894207000732421875p686] 

; mpf : - 1275131327374508 686
; mpfd: - 1275131327374508 686 (-4.11955e+206) class: Neg. norm. non-zero
; hwf : - 1275131327374508 686 (-4.11955e+206) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001111 #b0010010000000010101111100100100000101011100111000100)))
(assert (= y (fp #b1 #b11010101101 #b0100100001111011100110100101110011110110010010101100)))
(assert (= r (fp #b1 #b11010101101 #b0100100001111011100110100101110011110110010010101100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
