(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3102414817959975312788856172119267284870147705078125p815 {+ 1397203421811325 815 (2.86284e+245)}
; Y = -1.26973388807285036961047808290459215641021728515625p-278 {- 1214773437814084 -278 (-2.61441e-084)}
; 1.3102414817959975312788856172119267284870147705078125p815 m -1.26973388807285036961047808290459215641021728515625p-278 == -1.26973388807285036961047808290459215641021728515625p-278
; [HW: -1.26973388807285036961047808290459215641021728515625p-278] 

; mpf : - 1214773437814084 -278
; mpfd: - 1214773437814084 -278 (-2.61441e-084) class: Neg. norm. non-zero
; hwf : - 1214773437814084 -278 (-2.61441e-084) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101110 #b0100111101101011111111000101101000101101001001111101)))
(assert (= y (fp #b1 #b01011101001 #b0100010100001101010001111011001111100101010101000100)))
(assert (= r (fp #b1 #b01011101001 #b0100010100001101010001111011001111100101010101000100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
