(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8270999410798169915182143085985444486141204833984375p-353 {+ 3724926986445223 -353 (9.95804e-107)}
; Y = 1.3035893219488505767600372564629651606082916259765625p52 {+ 1367244757202505 52 (5.87084e+015)}
; 1.8270999410798169915182143085985444486141204833984375p-353 m 1.3035893219488505767600372564629651606082916259765625p52 == 1.8270999410798169915182143085985444486141204833984375p-353
; [HW: 1.8270999410798169915182143085985444486141204833984375p-353] 

; mpf : + 3724926986445223 -353
; mpfd: + 3724926986445223 -353 (9.95804e-107) class: Pos. norm. non-zero
; hwf : + 3724926986445223 -353 (9.95804e-107) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010011110 #b1101001110111100110100100101110101110110000110100111)))
(assert (= y (fp #b0 #b10000110011 #b0100110110111000000001111010000100101111011001001001)))
(assert (= r (fp #b0 #b01010011110 #b1101001110111100110100100101110101110110000110100111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
