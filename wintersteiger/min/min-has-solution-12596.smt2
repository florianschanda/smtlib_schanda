(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.498510172091677805639164944295771420001983642578125p308 {+ 2245090225272482 308 (7.81445e+092)}
; Y = 1.732813272513144209341362511622719466686248779296875p296 {+ 3300297581022350 296 (2.20613e+089)}
; 1.498510172091677805639164944295771420001983642578125p308 m 1.732813272513144209341362511622719466686248779296875p296 == 1.732813272513144209341362511622719466686248779296875p296
; [HW: 1.732813272513144209341362511622719466686248779296875p296] 

; mpf : + 3300297581022350 296
; mpfd: + 3300297581022350 296 (2.20613e+089) class: Pos. norm. non-zero
; hwf : + 3300297581022350 296 (2.20613e+089) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100110011 #b0111111110011110010111001101010111011011011010100010)))
(assert (= y (fp #b0 #b10100100111 #b1011101110011001101001101000111110000100110010001110)))
(assert (= r (fp #b0 #b10100100111 #b1011101110011001101001101000111110000100110010001110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
