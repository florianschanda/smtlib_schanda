(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.174092198599868464015116842347197234630584716796875p-39 {- 784041560742478 -39 (-2.13566e-012)}
; Y = -1.1984415031242614535500479178153909742832183837890625p402 {- 893701079525265 402 (-1.23787e+121)}
; -1.174092198599868464015116842347197234630584716796875p-39 m -1.1984415031242614535500479178153909742832183837890625p402 == -1.1984415031242614535500479178153909742832183837890625p402
; [HW: -1.1984415031242614535500479178153909742832183837890625p402] 

; mpf : - 893701079525265 402
; mpfd: - 893701079525265 402 (-1.23787e+121) class: Neg. norm. non-zero
; hwf : - 893701079525265 402 (-1.23787e+121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011000 #b0010110010010001010011100110101101111001101001001110)))
(assert (= y (fp #b1 #b10110010001 #b0011001011001101000011111111011000010110011110010001)))
(assert (= r (fp #b1 #b10110010001 #b0011001011001101000011111111011000010110011110010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
