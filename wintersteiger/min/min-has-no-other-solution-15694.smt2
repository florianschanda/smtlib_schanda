(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4514387128324324205408402121975086629390716552734375p-762 {- 2033099218892759 -762 (-5.98332e-230)}
; Y = 1.9326738348084984142616349345189519226551055908203125p-758 {+ 4200389534901765 -758 (1.27474e-228)}
; -1.4514387128324324205408402121975086629390716552734375p-762 m 1.9326738348084984142616349345189519226551055908203125p-758 == -1.4514387128324324205408402121975086629390716552734375p-762
; [HW: -1.4514387128324324205408402121975086629390716552734375p-762] 

; mpf : - 2033099218892759 -762
; mpfd: - 2033099218892759 -762 (-5.98332e-230) class: Neg. norm. non-zero
; hwf : - 2033099218892759 -762 (-5.98332e-230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100000101 #b0111001110010001011111001100101111000011011111010111)))
(assert (= y (fp #b0 #b00100001001 #b1110111011000011101101100110001001010110011000000101)))
(assert (= r (fp #b1 #b00100000101 #b0111001110010001011111001100101111000011011111010111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
