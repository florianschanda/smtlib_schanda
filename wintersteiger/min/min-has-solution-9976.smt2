(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9010422636549424435514765718835406005382537841796875p934 {+ 4057933602841467 934 (2.76063e+281)}
; Y = -1.115502276225020406030807862407527863979339599609375p896 {- 520176008167446 896 (-5.89314e+269)}
; 1.9010422636549424435514765718835406005382537841796875p934 m -1.115502276225020406030807862407527863979339599609375p896 == -1.115502276225020406030807862407527863979339599609375p896
; [HW: -1.115502276225020406030807862407527863979339599609375p896] 

; mpf : - 520176008167446 896
; mpfd: - 520176008167446 896 (-5.89314e+269) class: Neg. norm. non-zero
; hwf : - 520176008167446 896 (-5.89314e+269) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100101 #b1110011010101010101101001010111010110110001101111011)))
(assert (= y (fp #b1 #b11101111111 #b0001110110010001100011101010001100000000000000010110)))
(assert (= r (fp #b1 #b11101111111 #b0001110110010001100011101010001100000000000000010110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
