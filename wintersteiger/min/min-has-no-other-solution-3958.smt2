(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.735656442693346956929190127993933856487274169921875p676 {- 3313102081186462 676 (-5.44178e+203)}
; Y = 1.9384932973224753283147947513498365879058837890625p588 {+ 4226598064111208 588 (1.96382e+177)}
; -1.735656442693346956929190127993933856487274169921875p676 m 1.9384932973224753283147947513498365879058837890625p588 == -1.735656442693346956929190127993933856487274169921875p676
; [HW: -1.735656442693346956929190127993933856487274169921875p676] 

; mpf : - 3313102081186462 676
; mpfd: - 3313102081186462 676 (-5.44178e+203) class: Neg. norm. non-zero
; hwf : - 3313102081186462 676 (-5.44178e+203) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010100011 #b1011110001010011111110110000101001110101101010011110)))
(assert (= y (fp #b0 #b11001001011 #b1111000001000001000110001100001110000011111001101000)))
(assert (= r (fp #b1 #b11010100011 #b1011110001010011111110110000101001110101101010011110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
