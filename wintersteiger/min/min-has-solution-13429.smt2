(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9814000088857401937758595522609539330005645751953125p-102 {+ 4419832714319221 -102 (3.90762e-031)}
; Y = 1.596040339043778732985856549930758774280548095703125p-322 {+ 2684327048815346 -322 (1.86804e-097)}
; 1.9814000088857401937758595522609539330005645751953125p-102 m 1.596040339043778732985856549930758774280548095703125p-322 == 1.596040339043778732985856549930758774280548095703125p-322
; [HW: 1.596040339043778732985856549930758774280548095703125p-322] 

; mpf : + 2684327048815346 -322
; mpfd: + 2684327048815346 -322 (1.86804e-097) class: Pos. norm. non-zero
; hwf : + 2684327048815346 -322 (1.86804e-097) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011001 #b1111101100111101000001111110111001110101010101110101)))
(assert (= y (fp #b0 #b01010111101 #b1001100010010110000110011000001101001010001011110010)))
(assert (= r (fp #b0 #b01010111101 #b1001100010010110000110011000001101001010001011110010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
