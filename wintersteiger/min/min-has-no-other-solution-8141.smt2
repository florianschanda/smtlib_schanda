(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0714931146275412654489400665624998509883880615234375p-565 {+ 321976364396151 -565 (8.87241e-171)}
; Y = -1.82776602659273645912207939545623958110809326171875p-720 {- 3727926768913004 -720 (-3.31378e-217)}
; 1.0714931146275412654489400665624998509883880615234375p-565 m -1.82776602659273645912207939545623958110809326171875p-720 == -1.82776602659273645912207939545623958110809326171875p-720
; [HW: -1.82776602659273645912207939545623958110809326171875p-720] 

; mpf : - 3727926768913004 -720
; mpfd: - 3727926768913004 -720 (-3.31378e-217) class: Neg. norm. non-zero
; hwf : - 3727926768913004 -720 (-3.31378e-217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001010 #b0001001001001101010111110110110100110110111001110111)))
(assert (= y (fp #b1 #b00100101111 #b1101001111101000011110010110110011110100101001101100)))
(assert (= r (fp #b1 #b00100101111 #b1101001111101000011110010110110011110100101001101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
