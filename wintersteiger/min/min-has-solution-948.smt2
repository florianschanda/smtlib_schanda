(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0497905574703445541473456614767201244831085205078125p-573 {- 224236736070013 -573 (-3.39559e-173)}
; Y = -1.7860307213306747531333940059994347393512725830078125p821 {- 3539967663686589 821 (-2.49756e+247)}
; -1.0497905574703445541473456614767201244831085205078125p-573 m -1.7860307213306747531333940059994347393512725830078125p821 == -1.7860307213306747531333940059994347393512725830078125p821
; [HW: -1.7860307213306747531333940059994347393512725830078125p821] 

; mpf : - 3539967663686589 821
; mpfd: - 3539967663686589 821 (-2.49756e+247) class: Neg. norm. non-zero
; hwf : - 3539967663686589 821 (-2.49756e+247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111000010 #b0000110010111111000100101110111111111100000101111101)))
(assert (= y (fp #b1 #b11100110100 #b1100100100111001010011110011000111000100001110111101)))
(assert (= r (fp #b1 #b11100110100 #b1100100100111001010011110011000111000100001110111101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
