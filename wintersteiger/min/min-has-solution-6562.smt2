(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6161003654955290453898442137870006263256072998046875p-295 {+ 2774669376468491 -295 (2.53875e-089)}
; Y = 1.91862863247923609577583192731253802776336669921875p-74 {+ 4137135566925356 -74 (1.01571e-022)}
; 1.6161003654955290453898442137870006263256072998046875p-295 m 1.91862863247923609577583192731253802776336669921875p-74 == 1.6161003654955290453898442137870006263256072998046875p-295
; [HW: 1.6161003654955290453898442137870006263256072998046875p-295] 

; mpf : + 2774669376468491 -295
; mpfd: + 2774669376468491 -295 (2.53875e-089) class: Pos. norm. non-zero
; hwf : + 2774669376468491 -295 (2.53875e-089) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011000 #b1001110110111000110000001110100011011011011000001011)))
(assert (= y (fp #b0 #b01110110101 #b1110101100101011001111101111110110101010111000101100)))
(assert (= r (fp #b0 #b01011011000 #b1001110110111000110000001110100011011011011000001011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
