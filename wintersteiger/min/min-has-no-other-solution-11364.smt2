(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.333731196411477082364172019879333674907684326171875p-31 {+ 1502991691800638 -31 (6.21067e-010)}
; Y = -1.6872543913618132105369795681326650083065032958984375p-403 {- 3095118620845799 -403 (-8.16756e-122)}
; 1.333731196411477082364172019879333674907684326171875p-31 m -1.6872543913618132105369795681326650083065032958984375p-403 == -1.6872543913618132105369795681326650083065032958984375p-403
; [HW: -1.6872543913618132105369795681326650083065032958984375p-403] 

; mpf : - 3095118620845799 -403
; mpfd: - 3095118620845799 -403 (-8.16756e-122) class: Neg. norm. non-zero
; hwf : - 3095118620845799 -403 (-8.16756e-122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111100000 #b0101010101101111011010000101111000111110000000111110)))
(assert (= y (fp #b1 #b01001101100 #b1010111111101111111001110101111011101110011011100111)))
(assert (= r (fp #b1 #b01001101100 #b1010111111101111111001110101111011101110011011100111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
