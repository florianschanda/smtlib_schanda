(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9931405397255321787497450713999569416046142578125p630 {- 4472707364634440 630 (-8.88045e+189)}
; Y = -1.5505598238738820260351758406613953411579132080078125p-371 {- 2479501017643581 -371 (-3.22374e-112)}
; -1.9931405397255321787497450713999569416046142578125p630 m -1.5505598238738820260351758406613953411579132080078125p-371 == -1.9931405397255321787497450713999569416046142578125p630
; [HW: -1.9931405397255321787497450713999569416046142578125p630] 

; mpf : - 4472707364634440 630
; mpfd: - 4472707364634440 630 (-8.88045e+189) class: Neg. norm. non-zero
; hwf : - 4472707364634440 630 (-8.88045e+189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110101 #b1111111000111110011101010101101001110011111101001000)))
(assert (= y (fp #b1 #b01010001100 #b1000110011110001011111010001011000000111101000111101)))
(assert (= r (fp #b1 #b11001110101 #b1111111000111110011101010101101001110011111101001000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
