(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7116711036528482470231438128394074738025665283203125p-832 {- 3205081717221317 -832 (-5.97673e-251)}
; Y = 1.779336703100931504906156987999565899372100830078125p-304 {+ 3509820485681506 -304 (5.45933e-092)}
; -1.7116711036528482470231438128394074738025665283203125p-832 m 1.779336703100931504906156987999565899372100830078125p-304 == -1.7116711036528482470231438128394074738025665283203125p-832
; [HW: -1.7116711036528482470231438128394074738025665283203125p-832] 

; mpf : - 3205081717221317 -832
; mpfd: - 3205081717221317 -832 (-5.97673e-251) class: Neg. norm. non-zero
; hwf : - 3205081717221317 -832 (-5.97673e-251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111111 #b1011011000110000000100111101001110110010011111000101)))
(assert (= y (fp #b0 #b01011001111 #b1100011110000010100111000011010001100100000101100010)))
(assert (= r (fp #b1 #b00010111111 #b1011011000110000000100111101001110110010011111000101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
