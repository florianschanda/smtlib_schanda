(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3735315811862072177262916738982312381267547607421875p-456 {- 1682236689841315 -456 (-7.38177e-138)}
; Y = -1.7240077155153341603721628416678868234157562255859375p-697 {- 3260640877808223 -697 (-2.622e-210)}
; -1.3735315811862072177262916738982312381267547607421875p-456 m -1.7240077155153341603721628416678868234157562255859375p-697 == -1.3735315811862072177262916738982312381267547607421875p-456
; [HW: -1.3735315811862072177262916738982312381267547607421875p-456] 

; mpf : - 1682236689841315 -456
; mpfd: - 1682236689841315 -456 (-7.38177e-138) class: Neg. norm. non-zero
; hwf : - 1682236689841315 -456 (-7.38177e-138) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110111 #b0101111110011111110001000000010100110111110010100011)))
(assert (= y (fp #b1 #b00101000110 #b1011100101011000100100011101010000110000101001011111)))
(assert (= r (fp #b1 #b01000110111 #b0101111110011111110001000000010100110111110010100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
