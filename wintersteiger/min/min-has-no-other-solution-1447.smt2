(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3978979353408373942357911801082082092761993408203125p492 {+ 1791972993332485 492 (1.78745e+148)}
; Y = 1.6056745947621176018316191402846015989780426025390625p-133 {+ 2727715879278449 -133 (1.47458e-040)}
; 1.3978979353408373942357911801082082092761993408203125p492 m 1.6056745947621176018316191402846015989780426025390625p-133 == 1.6056745947621176018316191402846015989780426025390625p-133
; [HW: 1.6056745947621176018316191402846015989780426025390625p-133] 

; mpf : + 2727715879278449 -133
; mpfd: + 2727715879278449 -133 (1.47458e-040) class: Pos. norm. non-zero
; hwf : + 2727715879278449 -133 (1.47458e-040) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111101011 #b0110010111011100101000111001101101101111010100000101)))
(assert (= y (fp #b0 #b01101111010 #b1001101100001101011111011000000010000101011101110001)))
(assert (= r (fp #b0 #b01101111010 #b1001101100001101011111011000000010000101011101110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
