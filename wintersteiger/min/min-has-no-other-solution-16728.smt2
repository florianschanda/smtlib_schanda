(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9551874985961805730738660713541321456432342529296875p-68 {+ 4301782062746715 -68 (6.62443e-021)}
; Y = -1.9467791456823835272160749809700064361095428466796875p-999 {- 4263914207697339 -999 (-3.63372e-301)}
; 1.9551874985961805730738660713541321456432342529296875p-68 m -1.9467791456823835272160749809700064361095428466796875p-999 == -1.9467791456823835272160749809700064361095428466796875p-999
; [HW: -1.9467791456823835272160749809700064361095428466796875p-999] 

; mpf : - 4263914207697339 -999
; mpfd: - 4263914207697339 -999 (-3.63372e-301) class: Neg. norm. non-zero
; hwf : - 4263914207697339 -999 (-3.63372e-301) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111011 #b1111010010000111001010101111110000000100110001011011)))
(assert (= y (fp #b1 #b00000011000 #b1111001001100000000111100011101100111101100110111011)))
(assert (= r (fp #b1 #b00000011000 #b1111001001100000000111100011101100111101100110111011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
