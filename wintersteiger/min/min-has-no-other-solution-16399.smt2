(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.243683860500259807935208300477825105190277099609375p884 {- 1097454543345174 884 (-1.60408e+266)}
; Y = -1.33647558108561081979814844089560210704803466796875p-812 {- 1515351301596428 -812 (-4.89333e-245)}
; -1.243683860500259807935208300477825105190277099609375p884 m -1.33647558108561081979814844089560210704803466796875p-812 == -1.243683860500259807935208300477825105190277099609375p884
; [HW: -1.243683860500259807935208300477825105190277099609375p884] 

; mpf : - 1097454543345174 884
; mpfd: - 1097454543345174 884 (-1.60408e+266) class: Neg. norm. non-zero
; hwf : - 1097454543345174 884 (-1.60408e+266) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110011 #b0011111001100010000100001100001101101001011000010110)))
(assert (= y (fp #b1 #b00011010011 #b0101011000100011010000111000000010101010010100001100)))
(assert (= r (fp #b1 #b11101110011 #b0011111001100010000100001100001101101001011000010110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
