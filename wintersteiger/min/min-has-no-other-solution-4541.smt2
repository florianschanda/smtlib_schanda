(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1947364116380112530890755806467495858669281005859375p-203 {- 877014830888415 -203 (-9.29358e-062)}
; Y = 1.43136493749091986416033250861801207065582275390625p-171 {+ 1942694971744804 -171 (4.78213e-052)}
; -1.1947364116380112530890755806467495858669281005859375p-203 m 1.43136493749091986416033250861801207065582275390625p-171 == -1.1947364116380112530890755806467495858669281005859375p-203
; [HW: -1.1947364116380112530890755806467495858669281005859375p-203] 

; mpf : - 877014830888415 -203
; mpfd: - 877014830888415 -203 (-9.29358e-062) class: Neg. norm. non-zero
; hwf : - 877014830888415 -203 (-9.29358e-062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110100 #b0011000111011010001111101101011101010011010111011111)))
(assert (= y (fp #b0 #b01101010100 #b0110111001101101111011101011101100101010001000100100)))
(assert (= r (fp #b1 #b01100110100 #b0011000111011010001111101101011101010011010111011111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
