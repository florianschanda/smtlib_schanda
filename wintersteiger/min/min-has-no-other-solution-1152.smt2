(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5236947964720986004039104955154471099376678466796875p270 {+ 2358511690247611 270 (2.89066e+081)}
; Y = -1.42615157244496604249661686480976641178131103515625p596 {- 1919216062866500 596 (-3.69865e+179)}
; 1.5236947964720986004039104955154471099376678466796875p270 m -1.42615157244496604249661686480976641178131103515625p596 == -1.42615157244496604249661686480976641178131103515625p596
; [HW: -1.42615157244496604249661686480976641178131103515625p596] 

; mpf : - 1919216062866500 596
; mpfd: - 1919216062866500 596 (-3.69865e+179) class: Neg. norm. non-zero
; hwf : - 1919216062866500 596 (-3.69865e+179) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100001101 #b1000011000010000110111001011011111101110110110111011)))
(assert (= y (fp #b1 #b11001010011 #b0110110100011000010001001111101011001010010001000100)))
(assert (= r (fp #b1 #b11001010011 #b0110110100011000010001001111101011001010010001000100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
