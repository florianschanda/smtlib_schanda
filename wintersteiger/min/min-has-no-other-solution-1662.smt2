(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.336985316877773666277562369941733777523040771484375p-309 {- 1517646947520070 -309 (-1.28191e-093)}
; Y = -1.7936193003980231974736625488731078803539276123046875p621 {- 3574143585546571 621 (-1.56084e+187)}
; -1.336985316877773666277562369941733777523040771484375p-309 m -1.7936193003980231974736625488731078803539276123046875p621 == -1.7936193003980231974736625488731078803539276123046875p621
; [HW: -1.7936193003980231974736625488731078803539276123046875p621] 

; mpf : - 3574143585546571 621
; mpfd: - 3574143585546571 621 (-1.56084e+187) class: Neg. norm. non-zero
; hwf : - 3574143585546571 621 (-1.56084e+187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001010 #b0101011001000100101010110111001100111000111001000110)))
(assert (= y (fp #b1 #b11001101100 #b1100101100101010101000100110110010101111000101001011)))
(assert (= r (fp #b1 #b11001101100 #b1100101100101010101000100110110010101111000101001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
