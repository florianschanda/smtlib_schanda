(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7409215670668487518923939205706119537353515625p-681 {- 3336814093353024 -681 (-1.73521e-205)}
; Y = 1.1440070534029487259175539293210022151470184326171875p-545 {+ 648550112044243 -545 (9.93301e-165)}
; -1.7409215670668487518923939205706119537353515625p-681 m 1.1440070534029487259175539293210022151470184326171875p-545 == -1.7409215670668487518923939205706119537353515625p-681
; [HW: -1.7409215670668487518923939205706119537353515625p-681] 

; mpf : - 3336814093353024 -681
; mpfd: - 3336814093353024 -681 (-1.73521e-205) class: Neg. norm. non-zero
; hwf : - 3336814093353024 -681 (-1.73521e-205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010110 #b1011110110101101000010010010101101110100000001000000)))
(assert (= y (fp #b0 #b00111011110 #b0010010011011101101001010111000011000010010011010011)))
(assert (= r (fp #b1 #b00101010110 #b1011110110101101000010010010101101110100000001000000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
