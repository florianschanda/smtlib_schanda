(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.402988452458469925687722934526391327381134033203125p616 {+ 1814898644326578 616 (3.81532e+185)}
; Y = 1.5551513420819127464511666403268463909626007080078125p-435 {+ 2500179377334333 -435 (1.75277e-131)}
; 1.402988452458469925687722934526391327381134033203125p616 m 1.5551513420819127464511666403268463909626007080078125p-435 == 1.5551513420819127464511666403268463909626007080078125p-435
; [HW: 1.5551513420819127464511666403268463909626007080078125p-435] 

; mpf : + 2500179377334333 -435
; mpfd: + 2500179377334333 -435 (1.75277e-131) class: Pos. norm. non-zero
; hwf : + 2500179377334333 -435 (1.75277e-131) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001100111 #b0110011100101010010000000100111111111001100010110010)))
(assert (= y (fp #b0 #b01001001100 #b1000111000011110011001011111101010010010100000111101)))
(assert (= r (fp #b0 #b01001001100 #b1000111000011110011001011111101010010010100000111101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
