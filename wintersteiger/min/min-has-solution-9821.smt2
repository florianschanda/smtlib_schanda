(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9097094162263335004325881527620367705821990966796875p283 {+ 4096966987932347 283 (2.96795e+085)}
; Y = -1.8598797596571452483971143010421656072139739990234375p-191 {- 3872554165175351 -191 (-5.92592e-058)}
; 1.9097094162263335004325881527620367705821990966796875p283 m -1.8598797596571452483971143010421656072139739990234375p-191 == -1.8598797596571452483971143010421656072139739990234375p-191
; [HW: -1.8598797596571452483971143010421656072139739990234375p-191] 

; mpf : - 3872554165175351 -191
; mpfd: - 3872554165175351 -191 (-5.92592e-058) class: Neg. norm. non-zero
; hwf : - 3872554165175351 -191 (-5.92592e-058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011010 #b1110100011100010101101110101111110001110001010111011)))
(assert (= y (fp #b1 #b01101000000 #b1101110000100001000101000111011000111000010000110111)))
(assert (= r (fp #b1 #b01101000000 #b1101110000100001000101000111011000111000010000110111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
