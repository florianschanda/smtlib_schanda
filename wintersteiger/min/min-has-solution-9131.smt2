(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6226718811219456028993590734899044036865234375p-485 {+ 2804264851794880 -485 (1.62436e-146)}
; Y = -1.9984878021103058554075460051535628736019134521484375p504 {- 4496789293517959 504 (-1.04669e+152)}
; 1.6226718811219456028993590734899044036865234375p-485 m -1.9984878021103058554075460051535628736019134521484375p504 == -1.9984878021103058554075460051535628736019134521484375p504
; [HW: -1.9984878021103058554075460051535628736019134521484375p504] 

; mpf : - 4496789293517959 504
; mpfd: - 4496789293517959 504 (-1.04669e+152) class: Neg. norm. non-zero
; hwf : - 4496789293517959 504 (-1.04669e+152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011010 #b1001111101100111011011001010010110001110101111000000)))
(assert (= y (fp #b1 #b10111110111 #b1111111110011100111001011000011110000100110010000111)))
(assert (= r (fp #b1 #b10111110111 #b1111111110011100111001011000011110000100110010000111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
