(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.679634395089762310959713431657291948795318603515625p437 {+ 3060801208474426 437 (5.96105e+131)}
; Y = 1.5938936801964007639043074959772638976573944091796875p258 {+ 2674659356830203 258 (7.38241e+077)}
; 1.679634395089762310959713431657291948795318603515625p437 m 1.5938936801964007639043074959772638976573944091796875p258 == 1.5938936801964007639043074959772638976573944091796875p258
; [HW: 1.5938936801964007639043074959772638976573944091796875p258] 

; mpf : + 2674659356830203 258
; mpfd: + 2674659356830203 258 (7.38241e+077) class: Pos. norm. non-zero
; hwf : + 2674659356830203 258 (7.38241e+077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110110100 #b1010110111111100100001010000110000100101101100111010)))
(assert (= y (fp #b0 #b10100000001 #b1001100000001001011010101000110110111110100111111011)))
(assert (= r (fp #b0 #b10100000001 #b1001100000001001011010101000110110111110100111111011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
