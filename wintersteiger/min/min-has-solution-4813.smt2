(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7827299611623896868906058443826623260974884033203125p769 {+ 3525102361422661 769 (5.53544e+231)}
; Y = 1.8747099573905601221923689081449992954730987548828125p348 {+ 3939343438161389 348 (1.07491e+105)}
; 1.7827299611623896868906058443826623260974884033203125p769 m 1.8747099573905601221923689081449992954730987548828125p348 == 1.8747099573905601221923689081449992954730987548828125p348
; [HW: 1.8747099573905601221923689081449992954730987548828125p348] 

; mpf : + 3939343438161389 348
; mpfd: + 3939343438161389 348 (1.07491e+105) class: Pos. norm. non-zero
; hwf : + 3939343438161389 348 (1.07491e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100000000 #b1100100001100000111111011010000011001010101101000101)))
(assert (= y (fp #b0 #b10101011011 #b1101111111101100111111011110010001111010010111101101)))
(assert (= r (fp #b0 #b10101011011 #b1101111111101100111111011110010001111010010111101101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
