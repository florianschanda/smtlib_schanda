(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.776636995584053746455310829333029687404632568359375p-3 {- 3497662083914486 -3 (-0.22208)}
; Y = 1.6769996322958335976949229007004760205745697021484375p114 {+ 3048935291737479 114 (3.48299e+034)}
; -1.776636995584053746455310829333029687404632568359375p-3 m 1.6769996322958335976949229007004760205745697021484375p114 == -1.776636995584053746455310829333029687404632568359375p-3
; [HW: -1.776636995584053746455310829333029687404632568359375p-3] 

; mpf : - 3497662083914486 -3
; mpfd: - 3497662083914486 -3 (-0.22208) class: Neg. norm. non-zero
; hwf : - 3497662083914486 -3 (-0.22208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111111100 #b1100011011010001101011101010000011100101101011110110)))
(assert (= y (fp #b0 #b10001110001 #b1010110101001111110110010001000000011101010110000111)))
(assert (= r (fp #b1 #b01111111100 #b1100011011010001101011101010000011100101101011110110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
