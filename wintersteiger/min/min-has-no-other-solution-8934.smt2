(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.87077587367717601551930783898569643497467041015625p795 {- 3921625900215748 795 (-3.89824e+239)}
; Y = 1.53203559104634035037406647461466491222381591796875p34 {+ 2396075289584140 34 (2.63202e+010)}
; -1.87077587367717601551930783898569643497467041015625p795 m 1.53203559104634035037406647461466491222381591796875p34 == -1.87077587367717601551930783898569643497467041015625p795
; [HW: -1.87077587367717601551930783898569643497467041015625p795] 

; mpf : - 3921625900215748 795
; mpfd: - 3921625900215748 795 (-3.89824e+239) class: Neg. norm. non-zero
; hwf : - 3921625900215748 795 (-3.89824e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100011010 #b1101111011101011001010101110101110010110110111000100)))
(assert (= y (fp #b0 #b10000100001 #b1000100000110011011111000000011111011010001000001100)))
(assert (= r (fp #b1 #b11100011010 #b1101111011101011001010101110101110010110110111000100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
