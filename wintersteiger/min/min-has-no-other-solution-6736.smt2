(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.030028130280135290064436048851348459720611572265625p378 {- 135234676340250 378 (-6.34143e+113)}
; Y = 1.5362738511430376053823465554160065948963165283203125p156 {+ 2415162716176325 156 (1.40329e+047)}
; -1.030028130280135290064436048851348459720611572265625p378 m 1.5362738511430376053823465554160065948963165283203125p156 == -1.030028130280135290064436048851348459720611572265625p378
; [HW: -1.030028130280135290064436048851348459720611572265625p378] 

; mpf : - 135234676340250 378
; mpfd: - 135234676340250 378 (-6.34143e+113) class: Neg. norm. non-zero
; hwf : - 135234676340250 378 (-6.34143e+113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101111001 #b0000011110101111111011000110110110000011011000011010)))
(assert (= y (fp #b0 #b10010011011 #b1000100101001001001111100011110001011011111111000101)))
(assert (= r (fp #b1 #b10101111001 #b0000011110101111111011000110110110000011011000011010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
