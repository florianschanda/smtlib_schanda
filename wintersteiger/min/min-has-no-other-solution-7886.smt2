(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.94583907000074507465114947990514338016510009765625p-564 {- 4259680483207812 -564 (-3.22247e-170)}
; Y = 1.992111938935084314294954310753382742404937744140625p942 {+ 4468074958497866 942 (7.40576e+283)}
; -1.94583907000074507465114947990514338016510009765625p-564 m 1.992111938935084314294954310753382742404937744140625p942 == -1.94583907000074507465114947990514338016510009765625p-564
; [HW: -1.94583907000074507465114947990514338016510009765625p-564] 

; mpf : - 4259680483207812 -564
; mpfd: - 4259680483207812 -564 (-3.22247e-170) class: Neg. norm. non-zero
; hwf : - 4259680483207812 -564 (-3.22247e-170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111001011 #b1111001000100010100000100110000011101110101010000100)))
(assert (= y (fp #b0 #b11110101101 #b1111110111111011000011000100101110110010100001001010)))
(assert (= r (fp #b1 #b00111001011 #b1111001000100010100000100110000011101110101010000100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
