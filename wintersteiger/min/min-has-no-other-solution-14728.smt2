(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.688217822242965571177819583681412041187286376953125p-397 {+ 3099457527803154 -397 (5.23022e-120)}
; Y = 1.5761416339142433340470006442046724259853363037109375p-983 {+ 2594711247808815 -983 (1.92801e-296)}
; 1.688217822242965571177819583681412041187286376953125p-397 m 1.5761416339142433340470006442046724259853363037109375p-983 == 1.5761416339142433340470006442046724259853363037109375p-983
; [HW: 1.5761416339142433340470006442046724259853363037109375p-983] 

; mpf : + 2594711247808815 -983
; mpfd: + 2594711247808815 -983 (1.92801e-296) class: Pos. norm. non-zero
; hwf : + 2594711247808815 -983 (1.92801e-296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001110010 #b1011000000101111000010110000111100001110110100010010)))
(assert (= y (fp #b0 #b00000101000 #b1001001101111110000001001010001110000110100100101111)))
(assert (= r (fp #b0 #b00000101000 #b1001001101111110000001001010001110000110100100101111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
