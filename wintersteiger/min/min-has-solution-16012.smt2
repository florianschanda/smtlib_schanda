(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.36761571526290648392887305817566812038421630859375p444 {+ 1655593998273564 444 (6.21273e+133)}
; Y = 1.5424632203367354410517009455361403524875640869140625p349 {+ 2443037156970721 349 (1.76882e+105)}
; 1.36761571526290648392887305817566812038421630859375p444 m 1.5424632203367354410517009455361403524875640869140625p349 == 1.5424632203367354410517009455361403524875640869140625p349
; [HW: 1.5424632203367354410517009455361403524875640869140625p349] 

; mpf : + 2443037156970721 349
; mpfd: + 2443037156970721 349 (1.76882e+105) class: Pos. norm. non-zero
; hwf : + 2443037156970721 349 (1.76882e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111011 #b0101111000011100000100000100001010001100110000011100)))
(assert (= y (fp #b0 #b10101011100 #b1000101011011110110111101001111010100001000011100001)))
(assert (= r (fp #b0 #b10101011100 #b1000101011011110110111101001111010100001000011100001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
