(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.87782495104084201642535845167003571987152099609375p-951 {- 3953372122404060 -951 (-9.86573e-287)}
; Y = -1.7990805366278739274576992102083750069141387939453125p-413 {- 3598738806996309 -413 (-8.50477e-125)}
; -1.87782495104084201642535845167003571987152099609375p-951 m -1.7990805366278739274576992102083750069141387939453125p-413 == -1.7990805366278739274576992102083750069141387939453125p-413
; [HW: -1.7990805366278739274576992102083750069141387939453125p-413] 

; mpf : - 3598738806996309 -413
; mpfd: - 3598738806996309 -413 (-8.50477e-125) class: Neg. norm. non-zero
; hwf : - 3598738806996309 -413 (-8.50477e-125) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001000 #b1110000010111001001000101101000001010101010011011100)))
(assert (= y (fp #b1 #b01001100010 #b1100110010010000100010101100001110101111110101010101)))
(assert (= r (fp #b1 #b01001100010 #b1100110010010000100010101100001110101111110101010101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
