(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7427931307858257614640251631499268114566802978515625p-177 {+ 3345242867020409 -177 (9.0978e-054)}
; Y = -1.083572777766468764326646123663522303104400634765625p735 {- 376378330807386 735 (-1.95842e+221)}
; 1.7427931307858257614640251631499268114566802978515625p-177 m -1.083572777766468764326646123663522303104400634765625p735 == -1.083572777766468764326646123663522303104400634765625p735
; [HW: -1.083572777766468764326646123663522303104400634765625p735] 

; mpf : - 376378330807386 735
; mpfd: - 376378330807386 735 (-1.95842e+221) class: Neg. norm. non-zero
; hwf : - 376378330807386 735 (-1.95842e+221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001110 #b1011111000100111101100001100110001101011001001111001)))
(assert (= y (fp #b1 #b11011011110 #b0001010101100101000001101000101101010111110001011010)))
(assert (= r (fp #b1 #b11011011110 #b0001010101100101000001101000101101010111110001011010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
