(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3999578327858703818975527610746212303638458251953125p772 {+ 1801249946698357 772 (3.47754e+232)}
; Y = 1.5878769320066223880161260240129195153713226318359375p212 {+ 2647562331924735 212 (1.04514e+064)}
; 1.3999578327858703818975527610746212303638458251953125p772 m 1.5878769320066223880161260240129195153713226318359375p212 == 1.5878769320066223880161260240129195153713226318359375p212
; [HW: 1.5878769320066223880161260240129195153713226318359375p212] 

; mpf : + 2647562331924735 212
; mpfd: + 2647562331924735 212 (1.04514e+064) class: Pos. norm. non-zero
; hwf : + 2647562331924735 212 (1.04514e+064) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100000011 #b0110011001100011101000101111001110011000001001110101)))
(assert (= y (fp #b0 #b10011010011 #b1001011001111111000110100100010100001010100011111111)))
(assert (= r (fp #b0 #b10011010011 #b1001011001111111000110100100010100001010100011111111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
