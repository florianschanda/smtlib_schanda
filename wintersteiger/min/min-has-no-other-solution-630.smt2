(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.634062149932153484854779890156351029872894287109375p-703 {- 2855562062164182 -703 (-3.88313e-212)}
; Y = 1.4578696536940676242721792732481844723224639892578125p-927 {+ 2062061601760861 -927 (1.28503e-279)}
; -1.634062149932153484854779890156351029872894287109375p-703 m 1.4578696536940676242721792732481844723224639892578125p-927 == -1.634062149932153484854779890156351029872894287109375p-703
; [HW: -1.634062149932153484854779890156351029872894287109375p-703] 

; mpf : - 2855562062164182 -703
; mpfd: - 2855562062164182 -703 (-3.88313e-212) class: Neg. norm. non-zero
; hwf : - 2855562062164182 -703 (-3.88313e-212) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000000 #b1010001001010001111001011010010110010111000011010110)))
(assert (= y (fp #b0 #b00001100000 #b0111010100110110111100100001010001110010011001011101)))
(assert (= r (fp #b1 #b00101000000 #b1010001001010001111001011010010110010111000011010110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
