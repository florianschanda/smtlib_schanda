(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3180784279602810737941354091162793338298797607421875p-586 {+ 1432497889636515 -586 (5.20432e-177)}
; Y = -1.209894983679286273314801292144693434238433837890625p-689 {- 945282970284970 -689 (-4.71065e-208)}
; 1.3180784279602810737941354091162793338298797607421875p-586 m -1.209894983679286273314801292144693434238433837890625p-689 == -1.209894983679286273314801292144693434238433837890625p-689
; [HW: -1.209894983679286273314801292144693434238433837890625p-689] 

; mpf : - 945282970284970 -689
; mpfd: - 945282970284970 -689 (-4.71065e-208) class: Neg. norm. non-zero
; hwf : - 945282970284970 -689 (-4.71065e-208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110101 #b0101000101101101100101100111110110100111000010100011)))
(assert (= y (fp #b1 #b00101001110 #b0011010110111011101011010111101001111111001110101010)))
(assert (= r (fp #b1 #b00101001110 #b0011010110111011101011010111101001111111001110101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
