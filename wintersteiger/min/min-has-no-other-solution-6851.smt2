(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.106152080791363179201880484470166265964508056640625p696 {- 478066471496586 696 (-3.63657e+209)}
; Y = 1.8890671515844357220004212649655528366565704345703125p-890 {+ 4004002492583013 -890 (2.2885e-268)}
; -1.106152080791363179201880484470166265964508056640625p696 m 1.8890671515844357220004212649655528366565704345703125p-890 == -1.106152080791363179201880484470166265964508056640625p696
; [HW: -1.106152080791363179201880484470166265964508056640625p696] 

; mpf : - 478066471496586 696
; mpfd: - 478066471496586 696 (-3.63657e+209) class: Neg. norm. non-zero
; hwf : - 478066471496586 696 (-3.63657e+209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010110111 #b0001101100101100110010000110001101100110101110001010)))
(assert (= y (fp #b0 #b00010000101 #b1110001110011001111001111010010000000000110001100101)))
(assert (= r (fp #b1 #b11010110111 #b0001101100101100110010000110001101100110101110001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
