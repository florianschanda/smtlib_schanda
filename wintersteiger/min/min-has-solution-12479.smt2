(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.52021801066573569727324866107665002346038818359375p558 {- 2342853638985628 558 (-1.43431e+168)}
; Y = 1.7508045137057919315992648989777080714702606201171875p-691 {+ 3381322928153491 -691 (1.70416e-208)}
; -1.52021801066573569727324866107665002346038818359375p558 m 1.7508045137057919315992648989777080714702606201171875p-691 == -1.52021801066573569727324866107665002346038818359375p558
; [HW: -1.52021801066573569727324866107665002346038818359375p558] 

; mpf : - 2342853638985628 558
; mpfd: - 2342853638985628 558 (-1.43431e+168) class: Neg. norm. non-zero
; hwf : - 2342853638985628 558 (-1.43431e+168) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101101 #b1000010100101101000000011110111010011001011110011100)))
(assert (= y (fp #b0 #b00101001100 #b1100000000110100101110011000000000001110001110010011)))
(assert (= r (fp #b1 #b11000101101 #b1000010100101101000000011110111010011001011110011100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
