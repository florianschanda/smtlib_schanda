(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.775525206808450828788181752315722405910491943359375p-506 {- 3492655032398966 -506 (-8.47518e-153)}
; Y = 1.160051438944008861398060616920702159404754638671875p-922 {+ 720807600788350 -922 (3.27206e-278)}
; -1.775525206808450828788181752315722405910491943359375p-506 m 1.160051438944008861398060616920702159404754638671875p-922 == -1.775525206808450828788181752315722405910491943359375p-506
; [HW: -1.775525206808450828788181752315722405910491943359375p-506] 

; mpf : - 3492655032398966 -506
; mpfd: - 3492655032398966 -506 (-8.47518e-153) class: Neg. norm. non-zero
; hwf : - 3492655032398966 -506 (-8.47518e-153) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000101 #b1100011010001000110100011110100001110111010001110110)))
(assert (= y (fp #b0 #b00001100101 #b0010100011111001001000011000111111110001001101111110)))
(assert (= r (fp #b1 #b01000000101 #b1100011010001000110100011110100001110111010001110110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
