(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.64121668141820631348082315525971353054046630859375p26 {- 2887783207498780 26 (-1.1014e+008)}
; Y = 1.0879058297218808792905520022031851112842559814453125p-48 {+ 395892661979157 -48 (3.86502e-015)}
; -1.64121668141820631348082315525971353054046630859375p26 m 1.0879058297218808792905520022031851112842559814453125p-48 == -1.64121668141820631348082315525971353054046630859375p26
; [HW: -1.64121668141820631348082315525971353054046630859375p26] 

; mpf : - 2887783207498780 26
; mpfd: - 2887783207498780 26 (-1.1014e+008) class: Neg. norm. non-zero
; hwf : - 2887783207498780 26 (-1.1014e+008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000011001 #b1010010000100110110001101100010001010111010000011100)))
(assert (= y (fp #b0 #b01111001111 #b0001011010000000111111110001011111001000100000010101)))
(assert (= r (fp #b1 #b10000011001 #b1010010000100110110001101100010001010111010000011100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
