(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.049975733171661484988135271123610436916351318359375p221 {- 225070693289462 221 (-3.53841e+066)}
; Y = 1.7164017557666271240890409899293445050716400146484375p-849 {+ 3226386680318151 -849 (4.57249e-256)}
; -1.049975733171661484988135271123610436916351318359375p221 m 1.7164017557666271240890409899293445050716400146484375p-849 == -1.049975733171661484988135271123610436916351318359375p221
; [HW: -1.049975733171661484988135271123610436916351318359375p221] 

; mpf : - 225070693289462 221
; mpfd: - 225070693289462 221 (-3.53841e+066) class: Neg. norm. non-zero
; hwf : - 225070693289462 221 (-3.53841e+066) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011100 #b0000110011001011001101011010101110010000110111110110)))
(assert (= y (fp #b0 #b00010101110 #b1011011101100110000110101111111111010000100011000111)))
(assert (= r (fp #b1 #b10011011100 #b0000110011001011001101011010101110010000110111110110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
