(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9778881790809357266169854483450762927532196044921875p771 {- 4404016838918915 771 (-2.45657e+232)}
; Y = 1.1261404165115187492318682416225783526897430419921875p-254 {+ 568085932797635 -254 (3.89022e-077)}
; -1.9778881790809357266169854483450762927532196044921875p771 m 1.1261404165115187492318682416225783526897430419921875p-254 == -1.9778881790809357266169854483450762927532196044921875p771
; [HW: -1.9778881790809357266169854483450762927532196044921875p771] 

; mpf : - 4404016838918915 771
; mpfd: - 4404016838918915 771 (-2.45657e+232) class: Neg. norm. non-zero
; hwf : - 4404016838918915 771 (-2.45657e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000010 #b1111101001010110111000010011010001001100001100000011)))
(assert (= y (fp #b0 #b01100000001 #b0010000001001010101111010000001110011110111011000011)))
(assert (= r (fp #b1 #b11100000010 #b1111101001010110111000010011010001001100001100000011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
