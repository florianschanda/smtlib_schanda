(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5359376191340909922899982120725326240062713623046875p291 {+ 2413648461826123 291 (6.11086e+087)}
; Y = 1.3016404014733826688399176418897695839405059814453125p385 {+ 1358467599675413 385 (1.02574e+116)}
; 1.5359376191340909922899982120725326240062713623046875p291 m 1.3016404014733826688399176418897695839405059814453125p385 == 1.5359376191340909922899982120725326240062713623046875p291
; [HW: 1.5359376191340909922899982120725326240062713623046875p291] 

; mpf : + 2413648461826123 291
; mpfd: + 2413648461826123 291 (6.11086e+087) class: Pos. norm. non-zero
; hwf : + 2413648461826123 291 (6.11086e+087) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100010 #b1000100100110011001101010011001011100000100001001011)))
(assert (= y (fp #b0 #b10110000000 #b0100110100111000010011100010101101111011000000010101)))
(assert (= r (fp #b0 #b10100100010 #b1000100100110011001101010011001011100000100001001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
