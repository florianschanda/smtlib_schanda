(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.404716687804725250288129245745949447154998779296875p75 {+ 1822681924387982 75 (5.30687e+022)}
; Y = -1.2826121337954841106210324142011813819408416748046875p-206 {- 1272771900451723 -206 (-1.24714e-062)}
; 1.404716687804725250288129245745949447154998779296875p75 m -1.2826121337954841106210324142011813819408416748046875p-206 == -1.2826121337954841106210324142011813819408416748046875p-206
; [HW: -1.2826121337954841106210324142011813819408416748046875p-206] 

; mpf : - 1272771900451723 -206
; mpfd: - 1272771900451723 -206 (-1.24714e-062) class: Neg. norm. non-zero
; hwf : - 1272771900451723 -206 (-1.24714e-062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001010 #b0110011110011011100000110100101001000100010010001110)))
(assert (= y (fp #b1 #b01100110001 #b0100100001011001010001001101000000011010101110001011)))
(assert (= r (fp #b1 #b01100110001 #b0100100001011001010001001101000000011010101110001011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
