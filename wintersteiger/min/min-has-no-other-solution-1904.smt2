(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6619677723066532681883700206526555120944976806640625p-981 {+ 2981237812691521 -981 (8.13199e-296)}
; Y = -1.009318273564918655438304995186626911163330078125p351 {- 41965773354704 351 (-4.62974e+105)}
; 1.6619677723066532681883700206526555120944976806640625p-981 m -1.009318273564918655438304995186626911163330078125p351 == -1.009318273564918655438304995186626911163330078125p351
; [HW: -1.009318273564918655438304995186626911163330078125p351] 

; mpf : - 41965773354704 351
; mpfd: - 41965773354704 351 (-4.62974e+105) class: Neg. norm. non-zero
; hwf : - 41965773354704 351 (-4.62974e+105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101010 #b1010100101110110101110000100110100010000001001000001)))
(assert (= y (fp #b1 #b10101011110 #b0000001001100010101011101011000000110111011011010000)))
(assert (= r (fp #b1 #b10101011110 #b0000001001100010101011101011000000110111011011010000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
