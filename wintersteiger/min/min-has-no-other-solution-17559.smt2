(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1728447971547046879692288712249137461185455322265625p-412 {- 778423764058857 -412 (-1.10887e-124)}
; Y = -1.4208988868868714927629071098635904490947723388671875p837 {- 1895560070144371 837 (-1.30218e+252)}
; -1.1728447971547046879692288712249137461185455322265625p-412 m -1.4208988868868714927629071098635904490947723388671875p837 == -1.4208988868868714927629071098635904490947723388671875p837
; [HW: -1.4208988868868714927629071098635904490947723388671875p837] 

; mpf : - 1895560070144371 837
; mpfd: - 1895560070144371 837 (-1.30218e+252) class: Neg. norm. non-zero
; hwf : - 1895560070144371 837 (-1.30218e+252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001100011 #b0010110000111111100011100111111100010000001011101001)))
(assert (= y (fp #b1 #b11101000100 #b0110101111000000000001111000101000011010000101110011)))
(assert (= r (fp #b1 #b11101000100 #b0110101111000000000001111000101000011010000101110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
