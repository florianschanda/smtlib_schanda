(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.173207021758031487479456700384616851806640625p-855 {+ 780055078647424 -855 (4.88347e-258)}
; Y = -1.303892539746311474146978071075864136219024658203125p274 {- 1368610328762162 274 (-3.95786e+082)}
; 1.173207021758031487479456700384616851806640625p-855 m -1.303892539746311474146978071075864136219024658203125p274 == -1.303892539746311474146978071075864136219024658203125p274
; [HW: -1.303892539746311474146978071075864136219024658203125p274] 

; mpf : - 1368610328762162 274
; mpfd: - 1368610328762162 274 (-3.95786e+082) class: Neg. norm. non-zero
; hwf : - 1368610328762162 274 (-3.95786e+082) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101000 #b0010110001010111010010111001110111100011011010000000)))
(assert (= y (fp #b1 #b10100010001 #b0100110111001011111001101100011110110101011100110010)))
(assert (= r (fp #b1 #b10100010001 #b0100110111001011111001101100011110110101011100110010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
