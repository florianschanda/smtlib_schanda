(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.06769709774384846667771853390149772167205810546875p-907 {- 304880624173260 -907 (-9.86829e-274)}
; Y = 1.3120534338984641831160615765838883817195892333984375p998 {+ 1405363728624807 998 (3.51469e+300)}
; -1.06769709774384846667771853390149772167205810546875p-907 m 1.3120534338984641831160615765838883817195892333984375p998 == -1.06769709774384846667771853390149772167205810546875p-907
; [HW: -1.06769709774384846667771853390149772167205810546875p-907] 

; mpf : - 304880624173260 -907
; mpfd: - 304880624173260 -907 (-9.86829e-274) class: Neg. norm. non-zero
; hwf : - 304880624173260 -907 (-9.86829e-274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001110100 #b0001000101010100100110001101010011011000000011001100)))
(assert (= y (fp #b0 #b11111100101 #b0100111111100010101110111101110100110010110010100111)))
(assert (= r (fp #b1 #b00001110100 #b0001000101010100100110001101010011011000000011001100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
