(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.178535343717744598990293525275774300098419189453125p911 {+ 804051707439698 911 (2.04018e+274)}
; Y = 1.5618056550712697827520969440229237079620361328125p894 {+ 2530147738833608 894 (2.06273e+269)}
; 1.178535343717744598990293525275774300098419189453125p911 m 1.5618056550712697827520969440229237079620361328125p894 == 1.5618056550712697827520969440229237079620361328125p894
; [HW: 1.5618056550712697827520969440229237079620361328125p894] 

; mpf : + 2530147738833608 894
; mpfd: + 2530147738833608 894 (2.06273e+269) class: Pos. norm. non-zero
; hwf : + 2530147738833608 894 (2.06273e+269) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110001110 #b0010110110110100011111100000011001110010101001010010)))
(assert (= y (fp #b0 #b11101111101 #b1000111111010010011111101101001100111101001011001000)))
(assert (= r (fp #b0 #b11101111101 #b1000111111010010011111101101001100111101001011001000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
