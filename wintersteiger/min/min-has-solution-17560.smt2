(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.894004350664605151877140087890438735485076904296875p6 {+ 4026237660520718 6 (121.216)}
; Y = -1.21547181344792232238205542671494185924530029296875p870 {- 970398778752908 870 (-9.56844e+261)}
; 1.894004350664605151877140087890438735485076904296875p6 m -1.21547181344792232238205542671494185924530029296875p870 == -1.21547181344792232238205542671494185924530029296875p870
; [HW: -1.21547181344792232238205542671494185924530029296875p870] 

; mpf : - 970398778752908 870
; mpfd: - 970398778752908 870 (-9.56844e+261) class: Neg. norm. non-zero
; hwf : - 970398778752908 870 (-9.56844e+261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000000101 #b1110010011011101011110000001100010010110000100001110)))
(assert (= y (fp #b1 #b11101100101 #b0011011100101001001010010010011111110111111110001100)))
(assert (= r (fp #b1 #b11101100101 #b0011011100101001001010010010011111110111111110001100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
