(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.56694966037817362547457378241233527660369873046875p-581 {+ 2553314279216972 -581 (1.97983e-175)}
; Y = -1.93800977561943721383386218803934752941131591796875p826 {- 4224420475949580 826 (-8.67226e+248)}
; 1.56694966037817362547457378241233527660369873046875p-581 m -1.93800977561943721383386218803934752941131591796875p826 == -1.93800977561943721383386218803934752941131591796875p826
; [HW: -1.93800977561943721383386218803934752941131591796875p826] 

; mpf : - 4224420475949580 826
; mpfd: - 4224420475949580 826 (-8.67226e+248) class: Neg. norm. non-zero
; hwf : - 4224420475949580 826 (-8.67226e+248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111010 #b1001000100100011100111001110100111001101011101001100)))
(assert (= y (fp #b1 #b11100111001 #b1111000000100001011010001001110110011101001000001100)))
(assert (= r (fp #b1 #b11100111001 #b1111000000100001011010001001110110011101001000001100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
