(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1784805775818349982131394426687620580196380615234375p33 {+ 803805062690423 33 (1.01231e+010)}
; Y = -1.9464630914234859471179106549243442714214324951171875p-527 {- 4262490825854739 -527 (-4.43035e-159)}
; 1.1784805775818349982131394426687620580196380615234375p33 m -1.9464630914234859471179106549243442714214324951171875p-527 == -1.9464630914234859471179106549243442714214324951171875p-527
; [HW: -1.9464630914234859471179106549243442714214324951171875p-527] 

; mpf : - 4262490825854739 -527
; mpfd: - 4262490825854739 -527 (-4.43035e-159) class: Neg. norm. non-zero
; hwf : - 4262490825854739 -527 (-4.43035e-159) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000100000 #b0010110110110000111001110011001110101111011001110111)))
(assert (= y (fp #b1 #b00111110000 #b1111001001001011011001111011100010001000111100010011)))
(assert (= r (fp #b1 #b00111110000 #b1111001001001011011001111011100010001000111100010011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
