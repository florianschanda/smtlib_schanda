(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5604322276682578429785053231171332299709320068359375p-510 {- 2523962371693183 -510 (-4.65529e-154)}
; Y = -1.4544116632695895940940999935264699161052703857421875p-451 {- 2046488197373731 -451 (-2.50126e-136)}
; -1.5604322276682578429785053231171332299709320068359375p-510 m -1.4544116632695895940940999935264699161052703857421875p-451 == -1.4544116632695895940940999935264699161052703857421875p-451
; [HW: -1.4544116632695895940940999935264699161052703857421875p-451] 

; mpf : - 2046488197373731 -451
; mpfd: - 2046488197373731 -451 (-2.50126e-136) class: Neg. norm. non-zero
; hwf : - 2046488197373731 -451 (-2.50126e-136) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000001 #b1000111101111000011111001000100101110101101001111111)))
(assert (= y (fp #b1 #b01000111100 #b0111010001010100010100101010000010101001111100100011)))
(assert (= r (fp #b1 #b01000111100 #b0111010001010100010100101010000010101001111100100011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
