(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.853013901430272003523214152664877474308013916015625p179 {- 3841633088623226 179 (-1.41987e+054)}
; Y = 1.5201930027977816894946272441302426159381866455078125p593 {+ 2342741013560829 593 (4.92818e+178)}
; -1.853013901430272003523214152664877474308013916015625p179 m 1.5201930027977816894946272441302426159381866455078125p593 == -1.853013901430272003523214152664877474308013916015625p179
; [HW: -1.853013901430272003523214152664877474308013916015625p179] 

; mpf : - 3841633088623226 179
; mpfd: - 3841633088623226 179 (-1.41987e+054) class: Neg. norm. non-zero
; hwf : - 3841633088623226 179 (-1.41987e+054) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010110010 #b1101101001011111000111100111100110101101001001111010)))
(assert (= y (fp #b0 #b11001010000 #b1000010100101011010111100101111010011111110111111101)))
(assert (= r (fp #b1 #b10010110010 #b1101101001011111000111100111100110101101001001111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
