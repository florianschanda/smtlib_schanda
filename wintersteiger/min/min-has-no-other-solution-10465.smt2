(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.04035968668616174426233556005172431468963623046875p916 {- 181763869920588 916 (-5.76314e+275)}
; Y = 1.9291122988534035176400038835708983242511749267578125p424 {+ 4184349802901533 424 (8.35749e+127)}
; -1.04035968668616174426233556005172431468963623046875p916 m 1.9291122988534035176400038835708983242511749267578125p424 == -1.04035968668616174426233556005172431468963623046875p916
; [HW: -1.04035968668616174426233556005172431468963623046875p916] 

; mpf : - 181763869920588 916
; mpfd: - 181763869920588 916 (-5.76314e+275) class: Neg. norm. non-zero
; hwf : - 181763869920588 916 (-5.76314e+275) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110010011 #b0000101001010101000000110010111001100100110101001100)))
(assert (= y (fp #b0 #b10110100111 #b1110110111011010010011011011100111100011000000011101)))
(assert (= r (fp #b1 #b11110010011 #b0000101001010101000000110010111001100100110101001100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
