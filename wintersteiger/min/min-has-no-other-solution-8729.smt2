(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9746232629943298864105827306048013269901275634765625p80 {- 4389312964047881 80 (-2.38717e+024)}
; Y = 1.4834936189995249211648342679836787283420562744140625p-990 {+ 2177461682362273 -990 (1.41772e-298)}
; -1.9746232629943298864105827306048013269901275634765625p80 m 1.4834936189995249211648342679836787283420562744140625p-990 == -1.9746232629943298864105827306048013269901275634765625p80
; [HW: -1.9746232629943298864105827306048013269901275634765625p80] 

; mpf : - 4389312964047881 80
; mpfd: - 4389312964047881 80 (-2.38717e+024) class: Neg. norm. non-zero
; hwf : - 4389312964047881 80 (-2.38717e+024) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001001111 #b1111100110000000111010010000000001111011010000001001)))
(assert (= y (fp #b0 #b00000100001 #b0111101111000110001111001110000101101101011110100001)))
(assert (= r (fp #b1 #b10001001111 #b1111100110000000111010010000000001111011010000001001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
