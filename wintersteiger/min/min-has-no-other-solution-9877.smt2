(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2921476073934370365492441123933531343936920166015625p639 {+ 1315715855794265 639 (2.94767e+192)}
; Y = -1.40638298381646098533792610396631062030792236328125p-468 {- 1830186254485524 -468 (-1.84529e-141)}
; 1.2921476073934370365492441123933531343936920166015625p639 m -1.40638298381646098533792610396631062030792236328125p-468 == -1.40638298381646098533792610396631062030792236328125p-468
; [HW: -1.40638298381646098533792610396631062030792236328125p-468] 

; mpf : - 1830186254485524 -468
; mpfd: - 1830186254485524 -468 (-1.84529e-141) class: Neg. norm. non-zero
; hwf : - 1830186254485524 -468 (-1.84529e-141) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001111110 #b0100101011001010001011111000001101011100000001011001)))
(assert (= y (fp #b1 #b01000101011 #b0110100000001000101101110001100100100100100000010100)))
(assert (= r (fp #b1 #b01000101011 #b0110100000001000101101110001100100100100100000010100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
