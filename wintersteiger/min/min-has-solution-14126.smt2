(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1884535270069254142555337239173240959644317626953125p-878 {+ 848719234005045 -878 (5.8972e-265)}
; Y = -1.4463028845732652793998340712278150022029876708984375p405 {- 2009969504658535 405 (-1.19511e+122)}
; 1.1884535270069254142555337239173240959644317626953125p-878 m -1.4463028845732652793998340712278150022029876708984375p405 == -1.4463028845732652793998340712278150022029876708984375p405
; [HW: -1.4463028845732652793998340712278150022029876708984375p405] 

; mpf : - 2009969504658535 405
; mpfd: - 2009969504658535 405 (-1.19511e+122) class: Neg. norm. non-zero
; hwf : - 2009969504658535 405 (-1.19511e+122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010001 #b0011000000111110011111011000011101001111100000110101)))
(assert (= y (fp #b1 #b10110010100 #b0111001001000000111001111110010101011010010001100111)))
(assert (= r (fp #b1 #b10110010100 #b0111001001000000111001111110010101011010010001100111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
