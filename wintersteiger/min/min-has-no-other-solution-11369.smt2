(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2168820792992460777526275705895386636257171630859375p593 {- 976750051515423 593 (-3.9449e+178)}
; Y = 1.698115728538422075644120923243463039398193359375p-940 {+ 3144033734907120 -940 (1.82714e-283)}
; -1.2168820792992460777526275705895386636257171630859375p593 m 1.698115728538422075644120923243463039398193359375p-940 == -1.2168820792992460777526275705895386636257171630859375p593
; [HW: -1.2168820792992460777526275705895386636257171630859375p593] 

; mpf : - 976750051515423 593
; mpfd: - 976750051515423 593 (-3.9449e+178) class: Neg. norm. non-zero
; hwf : - 976750051515423 593 (-3.9449e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010000 #b0011011110000101100101010111110110101101110000011111)))
(assert (= y (fp #b0 #b00001010011 #b1011001010110111101101100101111011100101010011110000)))
(assert (= r (fp #b1 #b11001010000 #b0011011110000101100101010111110110101101110000011111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
