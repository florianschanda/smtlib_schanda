(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.90830444056186987467071958235464990139007568359375p-20 {- 4090639540053404 -20 (-1.8199e-006)}
; Y = 1.988343181116871694058545472216792404651641845703125p-558 {+ 4451101982192114 -558 (2.10743e-168)}
; -1.90830444056186987467071958235464990139007568359375p-20 m 1.988343181116871694058545472216792404651641845703125p-558 == -1.90830444056186987467071958235464990139007568359375p-20
; [HW: -1.90830444056186987467071958235464990139007568359375p-20] 

; mpf : - 4090639540053404 -20
; mpfd: - 4090639540053404 -20 (-1.8199e-006) class: Neg. norm. non-zero
; hwf : - 4090639540053404 -20 (-1.8199e-006) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111101011 #b1110100010000110101000111100101100000110010110011100)))
(assert (= y (fp #b0 #b00111010001 #b1111110100000100000011110000100000011111000111110010)))
(assert (= r (fp #b1 #b01111101011 #b1110100010000110101000111100101100000110010110011100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
