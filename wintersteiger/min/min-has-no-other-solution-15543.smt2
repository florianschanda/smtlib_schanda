(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2419812026313461483795208550873212516307830810546875p774 {- 1089786454001195 774 (-1.23405e+233)}
; Y = -1.3554161878555668341306272850488312542438507080078125p-873 {- 1600652211187773 -873 (-2.15222e-263)}
; -1.2419812026313461483795208550873212516307830810546875p774 m -1.3554161878555668341306272850488312542438507080078125p-873 == -1.2419812026313461483795208550873212516307830810546875p774
; [HW: -1.2419812026313461483795208550873212516307830810546875p774] 

; mpf : - 1089786454001195 774
; mpfd: - 1089786454001195 774 (-1.23405e+233) class: Neg. norm. non-zero
; hwf : - 1089786454001195 774 (-1.23405e+233) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000101 #b0011110111110010011110101110011110001100011000101011)))
(assert (= y (fp #b1 #b00010010110 #b0101101011111100100011100010011101001111000000111101)))
(assert (= r (fp #b1 #b11100000101 #b0011110111110010011110101110011110001100011000101011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
