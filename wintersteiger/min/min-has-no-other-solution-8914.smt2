(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8498955942903574367619512486271560192108154296875p920 {- 3827589481749880 920 (-1.63962e+277)}
; Y = -1.574297241245806500131720895296894013881683349609375p650 {- 2586404841674518 650 (-7.35502e+195)}
; -1.8498955942903574367619512486271560192108154296875p920 m -1.574297241245806500131720895296894013881683349609375p650 == -1.8498955942903574367619512486271560192108154296875p920
; [HW: -1.8498955942903574367619512486271560192108154296875p920] 

; mpf : - 3827589481749880 920
; mpfd: - 3827589481749880 920 (-1.63962e+277) class: Neg. norm. non-zero
; hwf : - 3827589481749880 920 (-1.63962e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110010111 #b1101100110010010110000011111011001111101110101111000)))
(assert (= y (fp #b1 #b11010001001 #b1001001100000101001001001101110101010101011100010110)))
(assert (= r (fp #b1 #b11110010111 #b1101100110010010110000011111011001111101110101111000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
