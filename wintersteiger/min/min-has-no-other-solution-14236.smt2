(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.099495947442580945363488353905268013477325439453125p-632 {+ 448089911827282 -632 (6.16931e-191)}
; Y = -1.4061779962047296077543023784528486430644989013671875p-249 {- 1829263072353715 -249 (-1.55443e-075)}
; 1.099495947442580945363488353905268013477325439453125p-632 m -1.4061779962047296077543023784528486430644989013671875p-249 == -1.4061779962047296077543023784528486430644989013671875p-249
; [HW: -1.4061779962047296077543023784528486430644989013671875p-249] 

; mpf : - 1829263072353715 -249
; mpfd: - 1829263072353715 -249 (-1.55443e-075) class: Neg. norm. non-zero
; hwf : - 1829263072353715 -249 (-1.55443e-075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110000111 #b0001100101111000100100010000000001011001101101010010)))
(assert (= y (fp #b1 #b01100000110 #b0110011111111011010001111111101000001101110110110011)))
(assert (= r (fp #b1 #b01100000110 #b0110011111111011010001111111101000001101110110110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
