(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.813611802329057720584160051657818257808685302734375p-296 {+ 3664181809793382 -296 (1.42451e-089)}
; Y = -1.034504027294693262462033089832402765750885009765625p622 {- 155392324467162 622 (-1.80048e+187)}
; 1.813611802329057720584160051657818257808685302734375p-296 m -1.034504027294693262462033089832402765750885009765625p622 == -1.034504027294693262462033089832402765750885009765625p622
; [HW: -1.034504027294693262462033089832402765750885009765625p622] 

; mpf : - 155392324467162 622
; mpfd: - 155392324467162 622 (-1.80048e+187) class: Neg. norm. non-zero
; hwf : - 155392324467162 622 (-1.80048e+187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011010111 #b1101000001001000110111001111001010100100100101100110)))
(assert (= y (fp #b1 #b11001101101 #b0000100011010101010000011000010011001111100111011010)))
(assert (= r (fp #b1 #b11001101101 #b0000100011010101010000011000010011001111100111011010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
