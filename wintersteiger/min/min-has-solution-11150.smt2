(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.296734364479018797311482558143325150012969970703125p10 {- 1336372773295730 10 (-1327.86)}
; Y = 1.844020980795591402312538775731809437274932861328125p-297 {+ 3801132574603906 -297 (7.24198e-090)}
; -1.296734364479018797311482558143325150012969970703125p10 m 1.844020980795591402312538775731809437274932861328125p-297 == -1.296734364479018797311482558143325150012969970703125p10
; [HW: -1.296734364479018797311482558143325150012969970703125p10] 

; mpf : - 1336372773295730 10
; mpfd: - 1336372773295730 10 (-1327.86) class: Neg. norm. non-zero
; hwf : - 1336372773295730 10 (-1327.86) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000001001 #b0100101111110110110010001000011100001001011001110010)))
(assert (= y (fp #b0 #b01011010110 #b1101100000010001110000100100110110100111101010000010)))
(assert (= r (fp #b1 #b10000001001 #b0100101111110110110010001000011100001001011001110010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
