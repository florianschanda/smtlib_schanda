(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.202931900858639213680589818977750837802886962890625p-630 {+ 913924033088554 -630 (2.69988e-190)}
; Y = -1.5423899314827809181593920584418810904026031494140625p578 {- 2442707093315361 578 (-1.52592e+174)}
; 1.202931900858639213680589818977750837802886962890625p-630 m -1.5423899314827809181593920584418810904026031494140625p578 == -1.5423899314827809181593920584418810904026031494140625p578
; [HW: -1.5423899314827809181593920584418810904026031494140625p578] 

; mpf : - 2442707093315361 578
; mpfd: - 2442707093315361 578 (-1.52592e+174) class: Neg. norm. non-zero
; hwf : - 2442707093315361 578 (-1.52592e+174) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110001001 #b0011001111110011010110000101010110000000110000101010)))
(assert (= y (fp #b1 #b11001000001 #b1000101011011010000100010000100101100101111100100001)))
(assert (= r (fp #b1 #b11001000001 #b1000101011011010000100010000100101100101111100100001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
