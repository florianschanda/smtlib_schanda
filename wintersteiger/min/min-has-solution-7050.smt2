(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5476513099791822103412641808972693979740142822265625p781 {+ 2466402235551209 781 (1.96834e+235)}
; Y = -1.9669411919442205682884150519385002553462982177734375p409 {- 4354715991729175 409 (-2.60052e+123)}
; 1.5476513099791822103412641808972693979740142822265625p781 m -1.9669411919442205682884150519385002553462982177734375p409 == -1.9669411919442205682884150519385002553462982177734375p409
; [HW: -1.9669411919442205682884150519385002553462982177734375p409] 

; mpf : - 4354715991729175 409
; mpfd: - 4354715991729175 409 (-2.60052e+123) class: Neg. norm. non-zero
; hwf : - 4354715991729175 409 (-2.60052e+123) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100001100 #b1000110000110010111000000101000111111000110111101001)))
(assert (= y (fp #b1 #b10110011000 #b1111011110001001011101010011110010001110010000010111)))
(assert (= r (fp #b1 #b10110011000 #b1111011110001001011101010011110010001110010000010111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
