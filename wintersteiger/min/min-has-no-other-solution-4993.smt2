(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.601268215110234649500853265635669231414794921875p681 {- 2707871309520176 681 (-1.60654e+205)}
; Y = -1.3993031326036609041096880901022814214229583740234375p233 {- 1798301439201719 233 (-1.93153e+070)}
; -1.601268215110234649500853265635669231414794921875p681 m -1.3993031326036609041096880901022814214229583740234375p233 == -1.601268215110234649500853265635669231414794921875p681
; [HW: -1.601268215110234649500853265635669231414794921875p681] 

; mpf : - 2707871309520176 681
; mpfd: - 2707871309520176 681 (-1.60654e+205) class: Neg. norm. non-zero
; hwf : - 2707871309520176 681 (-1.60654e+205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010101000 #b1001100111101100101101101011100000000101110100110000)))
(assert (= y (fp #b1 #b10011101000 #b0110011000111000101110101110011110111001000110110111)))
(assert (= r (fp #b1 #b11010101000 #b1001100111101100101101101011100000000101110100110000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
