(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.793620344829397250663305385387502610683441162109375p949 {+ 3574148289247318 949 (8.53486e+285)}
; Y = -1.9232301903751600757885853454354219138622283935546875p-534 {- 4157859141350763 -534 (-3.4199e-161)}
; 1.793620344829397250663305385387502610683441162109375p949 m -1.9232301903751600757885853454354219138622283935546875p-534 == -1.9232301903751600757885853454354219138622283935546875p-534
; [HW: -1.9232301903751600757885853454354219138622283935546875p-534] 

; mpf : - 4157859141350763 -534
; mpfd: - 4157859141350763 -534 (-3.4199e-161) class: Neg. norm. non-zero
; hwf : - 4157859141350763 -534 (-3.4199e-161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110100 #b1100101100101010101100111111001001111011100001010110)))
(assert (= y (fp #b1 #b00111101001 #b1110110001011000110100000101001001010111010101101011)))
(assert (= r (fp #b1 #b00111101001 #b1110110001011000110100000101001001010111010101101011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
