(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8242088815561465775516580833937041461467742919921875p-580 {- 3711906811851715 -580 (-4.60975e-175)}
; Y = -1.293929050182299977933553236653096973896026611328125p-438 {- 1323738760874370 -438 (-1.82294e-132)}
; -1.8242088815561465775516580833937041461467742919921875p-580 m -1.293929050182299977933553236653096973896026611328125p-438 == -1.293929050182299977933553236653096973896026611328125p-438
; [HW: -1.293929050182299977933553236653096973896026611328125p-438] 

; mpf : - 1323738760874370 -438
; mpfd: - 1323738760874370 -438 (-1.82294e-132) class: Neg. norm. non-zero
; hwf : - 1323738760874370 -438 (-1.82294e-132) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111011 #b1101001011111111010110100110111101011011001111000011)))
(assert (= y (fp #b1 #b01001001001 #b0100101100111110111011110010100111100000100110000010)))
(assert (= r (fp #b1 #b01001001001 #b0100101100111110111011110010100111100000100110000010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
