(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.613044391114133890852144759264774620532989501953125p284 {- 2760906491383186 284 (-5.01378e+085)}
; Y = -1.702610723471561282593711439403705298900604248046875p-628 {- 3164277392413038 -628 (-1.52854e-189)}
; -1.613044391114133890852144759264774620532989501953125p284 m -1.702610723471561282593711439403705298900604248046875p-628 == -1.613044391114133890852144759264774620532989501953125p284
; [HW: -1.613044391114133890852144759264774620532989501953125p284] 

; mpf : - 2760906491383186 284
; mpfd: - 2760906491383186 284 (-5.01378e+085) class: Neg. norm. non-zero
; hwf : - 2760906491383186 284 (-5.01378e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011011 #b1001110011110000011110100010101011010100110110010010)))
(assert (= y (fp #b1 #b00110001011 #b1011001111011110010010111101111100100001000101101110)))
(assert (= r (fp #b1 #b10100011011 #b1001110011110000011110100010101011010100110110010010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
