(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6026318103301750994660324067808687686920166015625p-994 {- 2714012396444584 -994 (-9.57234e-300)}
; Y = -1.648898878560229430689787477604113519191741943359375p-791 {- 2922380747684982 -791 (-1.2661e-238)}
; -1.6026318103301750994660324067808687686920166015625p-994 m -1.648898878560229430689787477604113519191741943359375p-791 == -1.648898878560229430689787477604113519191741943359375p-791
; [HW: -1.648898878560229430689787477604113519191741943359375p-791] 

; mpf : - 2922380747684982 -791
; mpfd: - 2922380747684982 -791 (-1.2661e-238) class: Neg. norm. non-zero
; hwf : - 2922380747684982 -791 (-1.2661e-238) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000011101 #b1001101001000110000101000000110011100101101110101000)))
(assert (= y (fp #b1 #b00011101000 #b1010011000011110001111001010010111010011110001110110)))
(assert (= r (fp #b1 #b00011101000 #b1010011000011110001111001010010111010011110001110110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
