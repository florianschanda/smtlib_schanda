(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.576244049671051694616608074284158647060394287109375p666 {- 2595172487373014 666 (-4.82615e+200)}
; Y = -1.9181238781769789358833122605574317276477813720703125p-62 {- 4134862355637797 -62 (-4.15927e-019)}
; -1.576244049671051694616608074284158647060394287109375p666 m -1.9181238781769789358833122605574317276477813720703125p-62 == -1.576244049671051694616608074284158647060394287109375p666
; [HW: -1.576244049671051694616608074284158647060394287109375p666] 

; mpf : - 2595172487373014 666
; mpfd: - 2595172487373014 666 (-4.82615e+200) class: Neg. norm. non-zero
; hwf : - 2595172487373014 666 (-4.82615e+200) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011001 #b1001001110000100101110101110001111011010000011010110)))
(assert (= y (fp #b1 #b01111000001 #b1110101100001010001010101001111001110010011000100101)))
(assert (= r (fp #b1 #b11010011001 #b1001001110000100101110101110001111011010000011010110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
