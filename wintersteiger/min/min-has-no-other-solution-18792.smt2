(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.32613770513956819030454425956122577190399169921875p-1000 {- 1468793647338028 -1000 (-1.23764e-301)}
; Y = -1.0035382371236727383490006104693748056888580322265625p-417 {- 15934803391721 -417 (-2.96501e-126)}
; -1.32613770513956819030454425956122577190399169921875p-1000 m -1.0035382371236727383490006104693748056888580322265625p-417 == -1.0035382371236727383490006104693748056888580322265625p-417
; [HW: -1.0035382371236727383490006104693748056888580322265625p-417] 

; mpf : - 15934803391721 -417
; mpfd: - 15934803391721 -417 (-2.96501e-126) class: Neg. norm. non-zero
; hwf : - 15934803391721 -417 (-2.96501e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000010111 #b0101001101111101110000101011100110010001001000101100)))
(assert (= y (fp #b1 #b01001011110 #b0000000011100111111000011100010010111011010011101001)))
(assert (= r (fp #b1 #b01001011110 #b0000000011100111111000011100010010111011010011101001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
