(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2968473188056621747676899758516810834407806396484375p-795 {- 1336881474359111 -795 (-6.22361e-240)}
; Y = -1.66927905823805478036092608817853033542633056640625p-164 {- 3014164917287780 -164 (-7.13854e-050)}
; -1.2968473188056621747676899758516810834407806396484375p-795 m -1.66927905823805478036092608817853033542633056640625p-164 == -1.66927905823805478036092608817853033542633056640625p-164
; [HW: -1.66927905823805478036092608817853033542633056640625p-164] 

; mpf : - 3014164917287780 -164
; mpfd: - 3014164917287780 -164 (-7.13854e-050) class: Neg. norm. non-zero
; hwf : - 3014164917287780 -164 (-7.13854e-050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011100100 #b0100101111111110001011111001011000101100111101000111)))
(assert (= y (fp #b1 #b01101011011 #b1010101101010101110111110101001100000111101101100100)))
(assert (= r (fp #b1 #b01101011011 #b1010101101010101110111110101001100000111101101100100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
