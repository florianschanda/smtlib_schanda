(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.74265756898765555860109088825993239879608154296875p713 {+ 3344632350956684 713 (7.50929e+214)}
; Y = -1.5994078478613247273898423372884280979633331298828125p953 {- 2699492960271213 953 (-1.21771e+287)}
; 1.74265756898765555860109088825993239879608154296875p713 m -1.5994078478613247273898423372884280979633331298828125p953 == -1.5994078478613247273898423372884280979633331298828125p953
; [HW: -1.5994078478613247273898423372884280979633331298828125p953] 

; mpf : - 2699492960271213 953
; mpfd: - 2699492960271213 953 (-1.21771e+287) class: Neg. norm. non-zero
; hwf : - 2699492960271213 953 (-1.21771e+287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011001000 #b1011111000011110110011100111001011101101110010001100)))
(assert (= y (fp #b1 #b11110111000 #b1001100101110010110010101110111110000111101101101101)))
(assert (= r (fp #b1 #b11110111000 #b1001100101110010110010101110111110000111101101101101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
