(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4416573648533714813169126500724814832210540771484375p-352 {+ 1989047943779079 -352 (1.57146e-106)}
; Y = -1.517637796337462763318626457476057112216949462890625p-783 {- 2331233386698282 -783 (-2.98319e-236)}
; 1.4416573648533714813169126500724814832210540771484375p-352 m -1.517637796337462763318626457476057112216949462890625p-783 == -1.517637796337462763318626457476057112216949462890625p-783
; [HW: -1.517637796337462763318626457476057112216949462890625p-783] 

; mpf : - 2331233386698282 -783
; mpfd: - 2331233386698282 -783 (-2.98319e-236) class: Neg. norm. non-zero
; hwf : - 2331233386698282 -783 (-2.98319e-236) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010011111 #b0111000100010000011101010000001000010101001100000111)))
(assert (= y (fp #b1 #b00011110000 #b1000010010000011111010010001111001110001011000101010)))
(assert (= r (fp #b1 #b00011110000 #b1000010010000011111010010001111001110001011000101010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
