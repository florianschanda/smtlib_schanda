(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4044638333604109181607100254041142761707305908203125p-990 {- 1821543169206789 -990 (-1.34219e-298)}
; Y = 1.993808355115675556845644678105600178241729736328125p310 {+ 4475714937776642 310 (4.15893e+093)}
; -1.4044638333604109181607100254041142761707305908203125p-990 m 1.993808355115675556845644678105600178241729736328125p310 == -1.4044638333604109181607100254041142761707305908203125p-990
; [HW: -1.4044638333604109181607100254041142761707305908203125p-990] 

; mpf : - 1821543169206789 -990
; mpfd: - 1821543169206789 -990 (-1.34219e-298) class: Neg. norm. non-zero
; hwf : - 1821543169206789 -990 (-1.34219e-298) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100001 #b0110011110001010111100010001100010110010101000000101)))
(assert (= y (fp #b0 #b10100110101 #b1111111001101010001110010110111110110110101000000010)))
(assert (= r (fp #b1 #b00000100001 #b0110011110001010111100010001100010110010101000000101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
