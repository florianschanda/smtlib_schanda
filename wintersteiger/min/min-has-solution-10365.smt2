(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.363913832474790144289045201730914413928985595703125p675 {+ 1638922200328434 675 (2.13813e+203)}
; Y = 1.39981154213068492708771373145282268524169921875p-962 {+ 1800591112158176 -962 (3.59099e-290)}
; 1.363913832474790144289045201730914413928985595703125p675 m 1.39981154213068492708771373145282268524169921875p-962 == 1.39981154213068492708771373145282268524169921875p-962
; [HW: 1.39981154213068492708771373145282268524169921875p-962] 

; mpf : + 1800591112158176 -962
; mpfd: + 1800591112158176 -962 (3.59099e-290) class: Pos. norm. non-zero
; hwf : + 1800591112158176 -962 (3.59099e-290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010100010 #b0101110100101001011101001111100100001010100011110010)))
(assert (= y (fp #b0 #b00000111101 #b0110011001011010000011001001101000000011101111100000)))
(assert (= r (fp #b0 #b00000111101 #b0110011001011010000011001001101000000011101111100000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
