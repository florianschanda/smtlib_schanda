(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4373874735112923683999497370678000152111053466796875p-200 {- 1969818062721979 -200 (-8.94488e-061)}
; Y = 1.1077018076637494825575913637294434010982513427734375p7 {+ 485045820861591 7 (141.786)}
; -1.4373874735112923683999497370678000152111053466796875p-200 m 1.1077018076637494825575913637294434010982513427734375p7 == -1.4373874735112923683999497370678000152111053466796875p-200
; [HW: -1.4373874735112923683999497370678000152111053466796875p-200] 

; mpf : - 1969818062721979 -200
; mpfd: - 1969818062721979 -200 (-8.94488e-061) class: Neg. norm. non-zero
; hwf : - 1969818062721979 -200 (-8.94488e-061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110111 #b0110111111111000101000000001111001101001001110111011)))
(assert (= y (fp #b0 #b10000000110 #b0001101110010010010110000111110110100010110010010111)))
(assert (= r (fp #b1 #b01100110111 #b0110111111111000101000000001111001101001001110111011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
