(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5644341186289245637652811637963168323040008544921875p-639 {+ 2541985286332419 -639 (6.85788e-193)}
; Y = -1.1148196533550509546017792672500945627689361572265625p691 {- 517101748064617 691 (-1.14533e+208)}
; 1.5644341186289245637652811637963168323040008544921875p-639 m -1.1148196533550509546017792672500945627689361572265625p691 == -1.1148196533550509546017792672500945627689361572265625p691
; [HW: -1.1148196533550509546017792672500945627689361572265625p691] 

; mpf : - 517101748064617 691
; mpfd: - 517101748064617 691 (-1.14533e+208) class: Neg. norm. non-zero
; hwf : - 517101748064617 691 (-1.14533e+208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110000000 #b1001000001111110110000010010000001000010000000000011)))
(assert (= y (fp #b1 #b11010110010 #b0001110101100100110100100010000000011001000101101001)))
(assert (= r (fp #b1 #b11010110010 #b0001110101100100110100100010000000011001000101101001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
