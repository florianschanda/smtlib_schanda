(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3710105085746924213907504963572137057781219482421875p274 {- 1670882788167523 274 (-4.16159e+082)}
; Y = 1.9617263910392226389234338057576678693294525146484375p114 {+ 4331230616316615 114 (4.07435e+034)}
; -1.3710105085746924213907504963572137057781219482421875p274 m 1.9617263910392226389234338057576678693294525146484375p114 == -1.3710105085746924213907504963572137057781219482421875p274
; [HW: -1.3710105085746924213907504963572137057781219482421875p274] 

; mpf : - 1670882788167523 274
; mpfd: - 1670882788167523 274 (-4.16159e+082) class: Neg. norm. non-zero
; hwf : - 1670882788167523 274 (-4.16159e+082) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010001 #b0101111011111010100010110111000011001100111101100011)))
(assert (= y (fp #b0 #b10001110001 #b1111011000110011101100110110010100110110101011000111)))
(assert (= r (fp #b1 #b10100010001 #b0101111011111010100010110111000011001100111101100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
