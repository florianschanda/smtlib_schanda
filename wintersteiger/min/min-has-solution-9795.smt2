(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1521281763517194907109342238982208073139190673828125p318 {+ 685124398330157 318 (6.15233e+095)}
; Y = -1.3446835432155384015828758492716588079929351806640625p197 {- 1552316676786241 197 (-2.70103e+059)}
; 1.1521281763517194907109342238982208073139190673828125p318 m -1.3446835432155384015828758492716588079929351806640625p197 == -1.3446835432155384015828758492716588079929351806640625p197
; [HW: -1.3446835432155384015828758492716588079929351806640625p197] 

; mpf : - 1552316676786241 197
; mpfd: - 1552316676786241 197 (-2.70103e+059) class: Neg. norm. non-zero
; hwf : - 1552316676786241 197 (-2.70103e+059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100111101 #b0010011011110001110111110100011000111011000100101101)))
(assert (= y (fp #b1 #b10011000100 #b0101100000111101001011100100000110010100100001000001)))
(assert (= r (fp #b1 #b10011000100 #b0101100000111101001011100100000110010100100001000001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
