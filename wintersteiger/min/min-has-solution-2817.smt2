(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.457028428375548134710015801829285919666290283203125p-190 {+ 2058273059729842 -190 (9.28472e-058)}
; Y = 1.699581186078878314305029562092386186122894287109375p-434 {+ 3150633568940246 -434 (3.8311e-131)}
; 1.457028428375548134710015801829285919666290283203125p-190 m 1.699581186078878314305029562092386186122894287109375p-434 == 1.699581186078878314305029562092386186122894287109375p-434
; [HW: 1.699581186078878314305029562092386186122894287109375p-434] 

; mpf : + 3150633568940246 -434
; mpfd: + 3150633568940246 -434 (3.8311e-131) class: Pos. norm. non-zero
; hwf : + 3150633568940246 -434 (3.8311e-131) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000001 #b0111010011111111110100001010100100110111000110110010)))
(assert (= y (fp #b0 #b01001001101 #b1011001100010111110000001010101100011011000011010110)))
(assert (= r (fp #b0 #b01001001101 #b1011001100010111110000001010101100011011000011010110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
