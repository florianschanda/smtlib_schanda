(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9656583068087105647947510078665800392627716064453125p617 {+ 4348938390710933 617 (1.06909e+186)}
; Y = 1.7603475421617045260092027092468924820423126220703125p882 {+ 3424300907551525 882 (5.67616e+265)}
; 1.9656583068087105647947510078665800392627716064453125p617 m 1.7603475421617045260092027092468924820423126220703125p882 == 1.9656583068087105647947510078665800392627716064453125p617
; [HW: 1.9656583068087105647947510078665800392627716064453125p617] 

; mpf : + 4348938390710933 617
; mpfd: + 4348938390710933 617 (1.06909e+186) class: Pos. norm. non-zero
; hwf : + 4348938390710933 617 (1.06909e+186) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001101000 #b1111011100110101011000011111111011011010101010010101)))
(assert (= y (fp #b0 #b11101110001 #b1100001010100110001000101111001100101101101100100101)))
(assert (= r (fp #b0 #b11001101000 #b1111011100110101011000011111111011011010101010010101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
