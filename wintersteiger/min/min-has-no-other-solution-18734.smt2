(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0800671215213271114663484695483930408954620361328125p-758 {- 360590258648077 -758 (-7.12384e-229)}
; Y = -1.8946893690909849539139031548984348773956298828125p670 {- 4029322709250504 670 (-9.28186e+201)}
; -1.0800671215213271114663484695483930408954620361328125p-758 m -1.8946893690909849539139031548984348773956298828125p670 == -1.8946893690909849539139031548984348773956298828125p670
; [HW: -1.8946893690909849539139031548984348773956298828125p670] 

; mpf : - 4029322709250504 670
; mpfd: - 4029322709250504 670 (-9.28186e+201) class: Neg. norm. non-zero
; hwf : - 4029322709250504 670 (-9.28186e+201) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100001001 #b0001010001111111010001110110010001101011010000001101)))
(assert (= y (fp #b1 #b11010011101 #b1110010100001010010111001100110001010011000111001000)))
(assert (= r (fp #b1 #b11010011101 #b1110010100001010010111001100110001010011000111001000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
