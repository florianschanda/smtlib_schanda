(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.60820562692551760619608103297650814056396484375p450 {+ 2739114634786400 450 (4.67562e+135)}
; Y = -1.6323894141257191403582282873685471713542938232421875p757 {- 2848028729809635 757 (-1.23746e+228)}
; 1.60820562692551760619608103297650814056396484375p450 m -1.6323894141257191403582282873685471713542938232421875p757 == -1.6323894141257191403582282873685471713542938232421875p757
; [HW: -1.6323894141257191403582282873685471713542938232421875p757] 

; mpf : - 2848028729809635 757
; mpfd: - 2848028729809635 757 (-1.23746e+228) class: Neg. norm. non-zero
; hwf : - 2848028729809635 757 (-1.23746e+228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111000001 #b1001101110110011010111010010110011100011011001100000)))
(assert (= y (fp #b1 #b11011110100 #b1010000111100100010001011100110000000001101011100011)))
(assert (= r (fp #b1 #b11011110100 #b1010000111100100010001011100110000000001101011100011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
