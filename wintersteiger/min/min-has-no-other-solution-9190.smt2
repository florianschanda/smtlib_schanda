(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.939201929585012695866907961317338049411773681640625p-596 {- 4229789460104714 -596 (-7.47731e-180)}
; Y = -1.6821267165519813158169881717185489833354949951171875p742 {- 3072025626482963 742 (-3.89149e+223)}
; -1.939201929585012695866907961317338049411773681640625p-596 m -1.6821267165519813158169881717185489833354949951171875p742 == -1.6821267165519813158169881717185489833354949951171875p742
; [HW: -1.6821267165519813158169881717185489833354949951171875p742] 

; mpf : - 3072025626482963 742
; mpfd: - 3072025626482963 742 (-3.89149e+223) class: Neg. norm. non-zero
; hwf : - 3072025626482963 742 (-3.89149e+223) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101011 #b1111000001101111100010011010001111101000011000001010)))
(assert (= y (fp #b1 #b11011100101 #b1010111010011111110110110100001101010001100100010011)))
(assert (= r (fp #b1 #b11011100101 #b1010111010011111110110110100001101010001100100010011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
