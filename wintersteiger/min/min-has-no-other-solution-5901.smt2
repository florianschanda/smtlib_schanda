(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.18158435744499978881094648386351764202117919921875p470 {- 817783244525612 470 (-3.60216e+141)}
; Y = 1.6522319518039816355070570352836512029170989990234375p650 {+ 2937391575103543 650 (7.71913e+195)}
; -1.18158435744499978881094648386351764202117919921875p470 m 1.6522319518039816355070570352836512029170989990234375p650 == -1.18158435744499978881094648386351764202117919921875p470
; [HW: -1.18158435744499978881094648386351764202117919921875p470] 

; mpf : - 817783244525612 470
; mpfd: - 817783244525612 470 (-3.60216e+141) class: Neg. norm. non-zero
; hwf : - 817783244525612 470 (-3.60216e+141) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111010101 #b0010111001111100010011111111110010110001000000101100)))
(assert (= y (fp #b0 #b11010001001 #b1010011011111000101011000101011001100111100000110111)))
(assert (= r (fp #b1 #b10111010101 #b0010111001111100010011111111110010110001000000101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
