(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8838311501238569345417772638029418885707855224609375p43 {- 3980421638356239 43 (-1.65704e+013)}
; Y = -1.2711373050375314175397534199873916804790496826171875p657 {- 1221093865933267 657 (-7.60151e+197)}
; -1.8838311501238569345417772638029418885707855224609375p43 m -1.2711373050375314175397534199873916804790496826171875p657 == -1.2711373050375314175397534199873916804790496826171875p657
; [HW: -1.2711373050375314175397534199873916804790496826171875p657] 

; mpf : - 1221093865933267 657
; mpfd: - 1221093865933267 657 (-7.60151e+197) class: Neg. norm. non-zero
; hwf : - 1221093865933267 657 (-7.60151e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000101010 #b1110001001000010110000100001110011110111110100001111)))
(assert (= y (fp #b1 #b11010010000 #b0100010101101001010000010010000111011100100111010011)))
(assert (= r (fp #b1 #b11010010000 #b0100010101101001010000010010000111011100100111010011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
