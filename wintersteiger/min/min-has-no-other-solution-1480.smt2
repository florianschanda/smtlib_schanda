(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9245363181836812049851914707687683403491973876953125p-815 {+ 4163741418062517 -815 (8.80805e-246)}
; Y = -1.5887224666010000273530522463261149823665618896484375p372 {- 2651370281208903 372 (-1.52829e+112)}
; 1.9245363181836812049851914707687683403491973876953125p-815 m -1.5887224666010000273530522463261149823665618896484375p372 == -1.5887224666010000273530522463261149823665618896484375p372
; [HW: -1.5887224666010000273530522463261149823665618896484375p372] 

; mpf : - 2651370281208903 372
; mpfd: - 2651370281208903 372 (-1.52829e+112) class: Neg. norm. non-zero
; hwf : - 2651370281208903 372 (-1.52829e+112) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011010000 #b1110110010101110011010011000001010010000001010110101)))
(assert (= y (fp #b1 #b10101110011 #b1001011010110110100000111111110001111000110001000111)))
(assert (= r (fp #b1 #b10101110011 #b1001011010110110100000111111110001111000110001000111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
