(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1649994606602998015176808621617965400218963623046875p374 {+ 743091509546059 374 (4.48275e+112)}
; Y = -1.88147101247928727474345578229986131191253662109375p-671 {- 3969792523339612 -671 (-1.92031e-202)}
; 1.1649994606602998015176808621617965400218963623046875p374 m -1.88147101247928727474345578229986131191253662109375p-671 == -1.88147101247928727474345578229986131191253662109375p-671
; [HW: -1.88147101247928727474345578229986131191253662109375p-671] 

; mpf : - 3969792523339612 -671
; mpfd: - 3969792523339612 -671 (-1.92031e-202) class: Neg. norm. non-zero
; hwf : - 3969792523339612 -671 (-1.92031e-202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110101 #b0010101000111101011001111001011101100100110001001011)))
(assert (= y (fp #b1 #b00101100000 #b1110000110101000000101011001001011111000011101011100)))
(assert (= r (fp #b1 #b00101100000 #b1110000110101000000101011001001011111000011101011100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
