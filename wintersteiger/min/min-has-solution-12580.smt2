(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1403504825100576614005376541172154247760772705078125p-117 {+ 632082380733565 -117 (6.86323e-036)}
; Y = -1.09578873376093799407726692152209579944610595703125p-734 {- 431394105672052 -734 (-1.21258e-221)}
; 1.1403504825100576614005376541172154247760772705078125p-117 m -1.09578873376093799407726692152209579944610595703125p-734 == -1.09578873376093799407726692152209579944610595703125p-734
; [HW: -1.09578873376093799407726692152209579944610595703125p-734] 

; mpf : - 431394105672052 -734
; mpfd: - 431394105672052 -734 (-1.21258e-221) class: Neg. norm. non-zero
; hwf : - 431394105672052 -734 (-1.21258e-221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001010 #b0010001111101110000000100101110001011011110001111101)))
(assert (= y (fp #b1 #b00100100001 #b0001100010000101100111000100011011010100000101110100)))
(assert (= r (fp #b1 #b00100100001 #b0001100010000101100111000100011011010100000101110100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
