(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.883801821032049073068037614575587213039398193359375p-150 {+ 3980289551869302 -150 (1.31988e-045)}
; Y = 1.2929130017310301870026023607351817190647125244140625p-65 {+ 1319162885447841 -65 (3.50445e-020)}
; 1.883801821032049073068037614575587213039398193359375p-150 m 1.2929130017310301870026023607351817190647125244140625p-65 == 1.883801821032049073068037614575587213039398193359375p-150
; [HW: 1.883801821032049073068037614575587213039398193359375p-150] 

; mpf : + 3980289551869302 -150
; mpfd: + 3980289551869302 -150 (1.31988e-045) class: Pos. norm. non-zero
; hwf : + 3980289551869302 -150 (1.31988e-045) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101001 #b1110001001000000110101100000110101111010010101110110)))
(assert (= y (fp #b0 #b01110111110 #b0100101011111100010110001011001100000010000010100001)))
(assert (= r (fp #b0 #b01101101001 #b1110001001000000110101100000110101111010010101110110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
