(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0599149426956124830923045010422356426715850830078125p-295 {- 269832913597885 -295 (-1.66503e-089)}
; Y = -1.3754496479646596274193370845750905573368072509765625p156 {- 1690874894670025 156 (-1.25639e+047)}
; -1.0599149426956124830923045010422356426715850830078125p-295 m -1.3754496479646596274193370845750905573368072509765625p156 == -1.3754496479646596274193370845750905573368072509765625p156
; [HW: -1.3754496479646596274193370845750905573368072509765625p156] 

; mpf : - 1690874894670025 156
; mpfd: - 1690874894670025 156 (-1.25639e+047) class: Neg. norm. non-zero
; hwf : - 1690874894670025 156 (-1.25639e+047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011000 #b0000111101010110100101011110111101101011010110111101)))
(assert (= y (fp #b1 #b10010011011 #b0110000000011101011101111101011101001101100011001001)))
(assert (= r (fp #b1 #b10010011011 #b0110000000011101011101111101011101001101100011001001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
