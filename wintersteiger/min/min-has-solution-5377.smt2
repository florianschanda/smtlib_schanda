(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1755905312666452555703244797769002616405487060546875p832 {- 790789451182251 832 (-3.36676e+250)}
; Y = 1.6635527518661870072236297346535138785839080810546875p-586 {+ 2988375926045227 -586 (6.56839e-177)}
; -1.1755905312666452555703244797769002616405487060546875p832 m 1.6635527518661870072236297346535138785839080810546875p-586 == -1.1755905312666452555703244797769002616405487060546875p832
; [HW: -1.1755905312666452555703244797769002616405487060546875p832] 

; mpf : - 790789451182251 832
; mpfd: - 790789451182251 832 (-3.36676e+250) class: Neg. norm. non-zero
; hwf : - 790789451182251 832 (-3.36676e+250) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100111111 #b0010110011110011100000000100010101000111000010101011)))
(assert (= y (fp #b0 #b00110110101 #b1010100111011110100101111101100001101111101000101011)))
(assert (= r (fp #b1 #b11100111111 #b0010110011110011100000000100010101000111000010101011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
