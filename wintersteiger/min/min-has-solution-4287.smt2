(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.943799565041399279863298943382687866687774658203125p238 {- 4250495369432882 238 (-8.58599e+071)}
; Y = -1.2610860960015426446290121020865626633167266845703125p359 {- 1175827244664165 359 (-1.48086e+108)}
; -1.943799565041399279863298943382687866687774658203125p238 m -1.2610860960015426446290121020865626633167266845703125p359 == -1.2610860960015426446290121020865626633167266845703125p359
; [HW: -1.2610860960015426446290121020865626633167266845703125p359] 

; mpf : - 1175827244664165 359
; mpfd: - 1175827244664165 359 (-1.48086e+108) class: Neg. norm. non-zero
; hwf : - 1175827244664165 359 (-1.48086e+108) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011101101 #b1111000110011100110110010010100111010100111100110010)))
(assert (= y (fp #b1 #b10101100110 #b0100001011010110100010011101001111000100010101100101)))
(assert (= r (fp #b1 #b10101100110 #b0100001011010110100010011101001111000100010101100101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
