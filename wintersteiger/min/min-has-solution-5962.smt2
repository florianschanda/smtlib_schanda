(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9257495107567617065313925195368938148021697998046875p-201 {+ 4169205151682571 -201 (5.99198e-061)}
; Y = -1.7155874077146702205709516420029103755950927734375p-724 {- 3222719182734808 -724 (-1.944e-218)}
; 1.9257495107567617065313925195368938148021697998046875p-201 m -1.7155874077146702205709516420029103755950927734375p-724 == -1.7155874077146702205709516420029103755950927734375p-724
; [HW: -1.7155874077146702205709516420029103755950927734375p-724] 

; mpf : - 3222719182734808 -724
; mpfd: - 3222719182734808 -724 (-1.944e-218) class: Neg. norm. non-zero
; hwf : - 3222719182734808 -724 (-1.944e-218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110110 #b1110110011111101111010111000000011111101000000001011)))
(assert (= y (fp #b1 #b00100101011 #b1011011100110000101111001000000110010000010111011000)))
(assert (= r (fp #b1 #b00100101011 #b1011011100110000101111001000000110010000010111011000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
