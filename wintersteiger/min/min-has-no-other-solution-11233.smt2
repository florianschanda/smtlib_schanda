(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.998430547881436591950432557496242225170135498046875p877 {- 4496531443394158 877 (-2.0137e+264)}
; Y = -1.258314501769401960729055645060725510120391845703125p-991 {- 1163345093913074 -991 (-6.01262e-299)}
; -1.998430547881436591950432557496242225170135498046875p877 m -1.258314501769401960729055645060725510120391845703125p-991 == -1.998430547881436591950432557496242225170135498046875p877
; [HW: -1.998430547881436591950432557496242225170135498046875p877] 

; mpf : - 4496531443394158 877
; mpfd: - 4496531443394158 877 (-2.0137e+264) class: Neg. norm. non-zero
; hwf : - 4496531443394158 877 (-2.0137e+264) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101100 #b1111111110011001001001001111011001111010011001101110)))
(assert (= y (fp #b1 #b00000100000 #b0100001000100000111001100011000100101110100111110010)))
(assert (= r (fp #b1 #b11101101100 #b1111111110011001001001001111011001111010011001101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
