(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2796215195696858391016803579987026751041412353515625p-960 {+ 1259303371338809 -960 (1.31306e-289)}
; Y = -1.7380187627665824035005925907171331346035003662109375p770 {- 3323741024988015 770 (-1.07932e+232)}
; 1.2796215195696858391016803579987026751041412353515625p-960 m -1.7380187627665824035005925907171331346035003662109375p770 == -1.7380187627665824035005925907171331346035003662109375p770
; [HW: -1.7380187627665824035005925907171331346035003662109375p770] 

; mpf : - 3323741024988015 770
; mpfd: - 3323741024988015 770 (-1.07932e+232) class: Neg. norm. non-zero
; hwf : - 3323741024988015 770 (-1.07932e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111111 #b0100011110010101010001101010000111001111010000111001)))
(assert (= y (fp #b1 #b11100000001 #b1011110011101110110011000011000111101010101101101111)))
(assert (= r (fp #b1 #b11100000001 #b1011110011101110110011000011000111101010101101101111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
