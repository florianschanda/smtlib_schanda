(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6534592787428206150934784091077744960784912109375p-644 {- 2942918964247960 -644 (-2.26504e-194)}
; Y = 1.745140982949469954377264002687297761440277099609375p928 {+ 3355816653149718 928 (3.95974e+279)}
; -1.6534592787428206150934784091077744960784912109375p-644 m 1.745140982949469954377264002687297761440277099609375p928 == -1.6534592787428206150934784091077744960784912109375p-644
; [HW: -1.6534592787428206150934784091077744960784912109375p-644] 

; mpf : - 2942918964247960 -644
; mpfd: - 2942918964247960 -644 (-2.26504e-194) class: Neg. norm. non-zero
; hwf : - 2942918964247960 -644 (-2.26504e-194) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111011 #b1010011101001001000110110111011101110111110110011000)))
(assert (= y (fp #b0 #b11110011111 #b1011111011000001100011110011100010101101011000010110)))
(assert (= r (fp #b1 #b00101111011 #b1010011101001001000110110111011101110111110110011000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
