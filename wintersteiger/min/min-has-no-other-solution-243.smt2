(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.85419548028293235120145254768431186676025390625p937 {- 3846954446703776 937 (-2.15408e+282)}
; Y = -1.9580748600112702906272943437215872108936309814453125p941 {- 4314785582539797 941 (-3.63961e+283)}
; -1.85419548028293235120145254768431186676025390625p937 m -1.9580748600112702906272943437215872108936309814453125p941 == -1.9580748600112702906272943437215872108936309814453125p941
; [HW: -1.9580748600112702906272943437215872108936309814453125p941] 

; mpf : - 4314785582539797 941
; mpfd: - 4314785582539797 941 (-3.63961e+283) class: Neg. norm. non-zero
; hwf : - 4314785582539797 941 (-3.63961e+283) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110101000 #b1101101010101100100011100001010000110100110010100000)))
(assert (= y (fp #b1 #b11110101100 #b1111010101000100011001001101111011011110010000010101)))
(assert (= r (fp #b1 #b11110101100 #b1111010101000100011001001101111011011110010000010101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
