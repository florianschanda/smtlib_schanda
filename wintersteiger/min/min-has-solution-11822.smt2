(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0437186976160399698443370652967132627964019775390625p-960 {- 196891510292721 -960 (-1.071e-289)}
; Y = -1.3948179379095078100903037920943461358547210693359375p-779 {- 1778101918048447 -779 (-4.38683e-235)}
; -1.0437186976160399698443370652967132627964019775390625p-960 m -1.3948179379095078100903037920943461358547210693359375p-779 == -1.3948179379095078100903037920943461358547210693359375p-779
; [HW: -1.3948179379095078100903037920943461358547210693359375p-779] 

; mpf : - 1778101918048447 -779
; mpfd: - 1778101918048447 -779 (-4.38683e-235) class: Neg. norm. non-zero
; hwf : - 1778101918048447 -779 (-4.38683e-235) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000111111 #b0000101100110001001001100000100001111100000011110001)))
(assert (= y (fp #b1 #b00011110100 #b0110010100010010110010011101001100110010000010111111)))
(assert (= r (fp #b1 #b00011110100 #b0110010100010010110010011101001100110010000010111111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
