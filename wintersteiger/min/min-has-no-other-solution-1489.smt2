(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6615990618392724176288766102516092360019683837890625p772 {- 2979577288368017 772 (-4.12746e+232)}
; Y = 1.8940950408871908283714446952217258512973785400390625p-26 {+ 4026646092973361 -26 (2.82242e-008)}
; -1.6615990618392724176288766102516092360019683837890625p772 m 1.8940950408871908283714446952217258512973785400390625p-26 == -1.6615990618392724176288766102516092360019683837890625p772
; [HW: -1.6615990618392724176288766102516092360019683837890625p772] 

; mpf : - 2979577288368017 772
; mpfd: - 2979577288368017 772 (-4.12746e+232) class: Neg. norm. non-zero
; hwf : - 2979577288368017 772 (-4.12746e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000011 #b1010100101011110100011100101110110101001111110010001)))
(assert (= y (fp #b0 #b01111100101 #b1110010011100011011010011010000000100000010100110001)))
(assert (= r (fp #b1 #b11100000011 #b1010100101011110100011100101110110101001111110010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
