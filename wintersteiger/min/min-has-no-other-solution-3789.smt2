(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.057368963046045440279385729809291660785675048828125p-681 {- 258366840596802 -681 (-1.0539e-205)}
; Y = 1.7996752791510954860854099024436436593532562255859375p-811 {+ 3601417289202271 -811 (1.31786e-244)}
; -1.057368963046045440279385729809291660785675048828125p-681 m 1.7996752791510954860854099024436436593532562255859375p-811 == -1.057368963046045440279385729809291660785675048828125p-681
; [HW: -1.057368963046045440279385729809291660785675048828125p-681] 

; mpf : - 258366840596802 -681
; mpfd: - 258366840596802 -681 (-1.0539e-205) class: Neg. norm. non-zero
; hwf : - 258366840596802 -681 (-1.0539e-205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010110 #b0000111010101111101110110111110000010110100101000010)))
(assert (= y (fp #b0 #b00011010100 #b1100110010110111100001001110001101011111101001011111)))
(assert (= r (fp #b1 #b00101010110 #b0000111010101111101110110111110000010110100101000010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
