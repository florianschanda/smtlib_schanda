(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.442188157321618202644231132580898702144622802734375p-172 {- 1991438420541286 -172 (-2.40914e-052)}
; Y = 1.8538194019838505344210943803773261606693267822265625p-486 {+ 3845260740616169 -486 (9.27875e-147)}
; -1.442188157321618202644231132580898702144622802734375p-172 m 1.8538194019838505344210943803773261606693267822265625p-486 == -1.442188157321618202644231132580898702144622802734375p-172
; [HW: -1.442188157321618202644231132580898702144622802734375p-172] 

; mpf : - 1991438420541286 -172
; mpfd: - 1991438420541286 -172 (-2.40914e-052) class: Neg. norm. non-zero
; hwf : - 1991438420541286 -172 (-2.40914e-052) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010011 #b0111000100110011001111100011101001011111111101100110)))
(assert (= y (fp #b0 #b01000011001 #b1101101010010011111010001000100000110101111111101001)))
(assert (= r (fp #b1 #b01101010011 #b0111000100110011001111100011101001011111111101100110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
