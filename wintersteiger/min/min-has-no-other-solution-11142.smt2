(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3086178209162790953001831439905799925327301025390625p-555 {+ 1389891103278449 -555 (1.1096e-167)}
; Y = 1.139559111937066493425163571373559534549713134765625p431 {+ 628518364515930 431 (6.31924e+129)}
; 1.3086178209162790953001831439905799925327301025390625p-555 m 1.139559111937066493425163571373559534549713134765625p431 == 1.3086178209162790953001831439905799925327301025390625p-555
; [HW: 1.3086178209162790953001831439905799925327301025390625p-555] 

; mpf : + 1389891103278449 -555
; mpfd: + 1389891103278449 -555 (1.1096e-167) class: Pos. norm. non-zero
; hwf : + 1389891103278449 -555 (1.1096e-167) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111010100 #b0100111100000001100100111101011111001100010101110001)))
(assert (= y (fp #b0 #b10110101110 #b0010001110111010001001010101110110100000111001011010)))
(assert (= r (fp #b0 #b00111010100 #b0100111100000001100100111101011111001100010101110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
