(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0946655561485292285084369723335839807987213134765625p-537 {+ 426335763395337 -537 (2.43318e-162)}
; Y = 1.6253197891759756377183521180995739996433258056640625p-4 {+ 2816189969520321 -4 (0.101582)}
; 1.0946655561485292285084369723335839807987213134765625p-537 m 1.6253197891759756377183521180995739996433258056640625p-4 == 1.0946655561485292285084369723335839807987213134765625p-537
; [HW: 1.0946655561485292285084369723335839807987213134765625p-537] 

; mpf : + 426335763395337 -537
; mpfd: + 426335763395337 -537 (2.43318e-162) class: Pos. norm. non-zero
; hwf : + 426335763395337 -537 (2.43318e-162) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111100110 #b0001100000111100000000000111101110110111001100001001)))
(assert (= y (fp #b0 #b01111111011 #b1010000000010100111101010010110000001101011011000001)))
(assert (= r (fp #b0 #b00111100110 #b0001100000111100000000000111101110110111001100001001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
