(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6860121670916938807494034335832111537456512451171875p132 {- 3089524140085779 132 (-9.17952e+039)}
; Y = -1.3445145243678402469100774396792985498905181884765625p-43 {- 1551555483566729 -43 (-1.52854e-013)}
; -1.6860121670916938807494034335832111537456512451171875p132 m -1.3445145243678402469100774396792985498905181884765625p-43 == -1.6860121670916938807494034335832111537456512451171875p132
; [HW: -1.6860121670916938807494034335832111537456512451171875p132] 

; mpf : - 3089524140085779 132
; mpfd: - 3089524140085779 132 (-9.17952e+039) class: Neg. norm. non-zero
; hwf : - 3089524140085779 132 (-9.17952e+039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000011 #b1010111110011110011111100100111001010001001000010011)))
(assert (= y (fp #b1 #b01111010100 #b0101100000110010000110101001011100101000001010001001)))
(assert (= r (fp #b1 #b10010000011 #b1010111110011110011111100100111001010001001000010011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
