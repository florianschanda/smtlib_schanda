(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1264545882298266921139884289004839956760406494140625p953 {- 569500836431137 953 (-8.57629e+286)}
; Y = 1.010087630177399997677412102348171174526214599609375p-786 {+ 45430647507990 -786 (2.48189e-237)}
; -1.1264545882298266921139884289004839956760406494140625p953 m 1.010087630177399997677412102348171174526214599609375p-786 == -1.1264545882298266921139884289004839956760406494140625p953
; [HW: -1.1264545882298266921139884289004839956760406494140625p953] 

; mpf : - 569500836431137 953
; mpfd: - 569500836431137 953 (-8.57629e+286) class: Neg. norm. non-zero
; hwf : - 569500836431137 953 (-8.57629e+286) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110111000 #b0010000001011111010100111111000011100000010100100001)))
(assert (= y (fp #b0 #b00011101101 #b0000001010010101000110100101100110110100110000010110)))
(assert (= r (fp #b1 #b11110111000 #b0010000001011111010100111111000011100000010100100001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
