(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.479584591537890236878638461348600685596466064453125p-871 {+ 2159856987742674 -871 (9.39753e-263)}
; Y = 1.2181239268516588225566010805778205394744873046875p528 {+ 982342835689720 528 (1.07036e+159)}
; 1.479584591537890236878638461348600685596466064453125p-871 m 1.2181239268516588225566010805778205394744873046875p528 == 1.479584591537890236878638461348600685596466064453125p-871
; [HW: 1.479584591537890236878638461348600685596466064453125p-871] 

; mpf : + 2159856987742674 -871
; mpfd: + 2159856987742674 -871 (9.39753e-263) class: Pos. norm. non-zero
; hwf : + 2159856987742674 -871 (9.39753e-263) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010011000 #b0111101011000110000011100100100001010010000111010010)))
(assert (= y (fp #b0 #b11000001111 #b0011011111010110111110000011110001001101100011111000)))
(assert (= r (fp #b0 #b00010011000 #b0111101011000110000011100100100001010010000111010010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
