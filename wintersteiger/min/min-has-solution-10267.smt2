(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5660837343274762734068872305215336382389068603515625p661 {- 2549414494977721 661 (-1.49845e+199)}
; Y = 1.9010831986646243851879489739076234400272369384765625p504 {+ 4058117957735817 504 (9.95678e+151)}
; -1.5660837343274762734068872305215336382389068603515625p661 m 1.9010831986646243851879489739076234400272369384765625p504 == -1.5660837343274762734068872305215336382389068603515625p661
; [HW: -1.5660837343274762734068872305215336382389068603515625p661] 

; mpf : - 2549414494977721 661
; mpfd: - 2549414494977721 661 (-1.49845e+199) class: Neg. norm. non-zero
; hwf : - 2549414494977721 661 (-1.49845e+199) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010100 #b1001000011101010110111010001010110111011111010111001)))
(assert (= y (fp #b0 #b10111110111 #b1110011010101101011000110111010100111101010110001001)))
(assert (= r (fp #b1 #b11010010100 #b1001000011101010110111010001010110111011111010111001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
