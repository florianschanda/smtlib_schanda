(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.026353911729550372200492347474209964275360107421875p-435 {- 118687467044958 -435 (-1.15678e-131)}
; Y = -1.2386955675340598492795152196777053177356719970703125p-56 {- 1074989269001381 -56 (-1.71904e-017)}
; -1.026353911729550372200492347474209964275360107421875p-435 m -1.2386955675340598492795152196777053177356719970703125p-56 == -1.2386955675340598492795152196777053177356719970703125p-56
; [HW: -1.2386955675340598492795152196777053177356719970703125p-56] 

; mpf : - 1074989269001381 -56
; mpfd: - 1074989269001381 -56 (-1.71904e-017) class: Neg. norm. non-zero
; hwf : - 1074989269001381 -56 (-1.71904e-017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001100 #b0000011010111111001000010100010100000000000001011110)))
(assert (= y (fp #b1 #b01111000111 #b0011110100011011001001110001100001000010010010100101)))
(assert (= r (fp #b1 #b01111000111 #b0011110100011011001001110001100001000010010010100101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
