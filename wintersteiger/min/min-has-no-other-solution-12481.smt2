(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2403779620922608106781126480200327932834625244140625p19 {- 1082566100506785 19 (-650315)}
; Y = -0.66750046065647605786352869472466409206390380859375p-1022 {- 3006154825882140 -1023 (-1.48524e-308)}
; -1.2403779620922608106781126480200327932834625244140625p19 m -0.66750046065647605786352869472466409206390380859375p-1022 == -1.2403779620922608106781126480200327932834625244140625p19
; [HW: -1.2403779620922608106781126480200327932834625244140625p19] 

; mpf : - 1082566100506785 19
; mpfd: - 1082566100506785 19 (-650315) class: Neg. norm. non-zero
; hwf : - 1082566100506785 19 (-650315) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000010010 #b0011110110001001011010001111110111011101100010100001)))
(assert (= y (fp #b1 #b00000000000 #b1010101011100001010011110110100010010101101000011100)))
(assert (= r (fp #b1 #b10000010010 #b0011110110001001011010001111110111011101100010100001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
