(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1706525845722526302239430151530541479587554931640625p-868 {+ 768550916289409 -868 (5.94829e-262)}
; Y = -1.399650846139211868290885831811465322971343994140625p119 {- 1799867401750858 119 (-9.30228e+035)}
; 1.1706525845722526302239430151530541479587554931640625p-868 m -1.399650846139211868290885831811465322971343994140625p119 == -1.399650846139211868290885831811465322971343994140625p119
; [HW: -1.399650846139211868290885831811465322971343994140625p119] 

; mpf : - 1799867401750858 119
; mpfd: - 1799867401750858 119 (-9.30228e+035) class: Neg. norm. non-zero
; hwf : - 1799867401750858 119 (-9.30228e+035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010011011 #b0010101110101111111000110100010110110111001110000001)))
(assert (= y (fp #b1 #b10001110110 #b0110011001001111100001001001000111111100100101001010)))
(assert (= r (fp #b1 #b10001110110 #b0110011001001111100001001001000111111100100101001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
