(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4885170575012496296807285034446977078914642333984375p-70 {- 2200085238126759 -70 (-1.26082e-021)}
; Y = -1.3469406328647777204565727515728212893009185791015625p-364 {- 1562481704889497 -364 (-3.58451e-110)}
; -1.4885170575012496296807285034446977078914642333984375p-70 m -1.3469406328647777204565727515728212893009185791015625p-364 == -1.4885170575012496296807285034446977078914642333984375p-70
; [HW: -1.4885170575012496296807285034446977078914642333984375p-70] 

; mpf : - 2200085238126759 -70
; mpfd: - 2200085238126759 -70 (-1.26082e-021) class: Neg. norm. non-zero
; hwf : - 2200085238126759 -70 (-1.26082e-021) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110111001 #b0111110100001111011101000011000110000001100010100111)))
(assert (= y (fp #b1 #b01010010011 #b0101100011010001000110011110111111001110110010011001)))
(assert (= r (fp #b1 #b01110111001 #b0111110100001111011101000011000110000001100010100111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
