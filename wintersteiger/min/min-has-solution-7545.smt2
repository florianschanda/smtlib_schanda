(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9374015555753472117572755450964905321598052978515625p-395 {- 4221681296385657 -395 (-2.40088e-119)}
; Y = 1.2444413621641683409535517057520337402820587158203125p782 {+ 1100866027556485 782 (3.16542e+235)}
; -1.9374015555753472117572755450964905321598052978515625p-395 m 1.2444413621641683409535517057520337402820587158203125p782 == -1.9374015555753472117572755450964905321598052978515625p-395
; [HW: -1.9374015555753472117572755450964905321598052978515625p-395] 

; mpf : - 4221681296385657 -395
; mpfd: - 4221681296385657 -395 (-2.40088e-119) class: Neg. norm. non-zero
; hwf : - 4221681296385657 -395 (-2.40088e-119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110100 #b1110111111111001100011000110000001101010011001111001)))
(assert (= y (fp #b0 #b11100001101 #b0011111010010011101101011000100001001000111010000101)))
(assert (= r (fp #b1 #b01001110100 #b1110111111111001100011000110000001101010011001111001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
