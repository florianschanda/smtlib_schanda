(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3335977992952570136964141056523658335208892822265625p37 {- 1502390924597737 37 (-1.83288e+011)}
; Y = 1.2619414203179839528701222661766223609447479248046875p536 {+ 1179679282936971 536 (2.83868e+161)}
; -1.3335977992952570136964141056523658335208892822265625p37 m 1.2619414203179839528701222661766223609447479248046875p536 == -1.3335977992952570136964141056523658335208892822265625p37
; [HW: -1.3335977992952570136964141056523658335208892822265625p37] 

; mpf : - 1502390924597737 37
; mpfd: - 1502390924597737 37 (-1.83288e+011) class: Neg. norm. non-zero
; hwf : - 1502390924597737 37 (-1.83288e+011) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000100100 #b0101010101100110101010100101010111111101100111101001)))
(assert (= y (fp #b0 #b11000010111 #b0100001100001110100101111100100110111011110010001011)))
(assert (= r (fp #b1 #b10000100100 #b0101010101100110101010100101010111111101100111101001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
