(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7510862754999940715805450963671319186687469482421875p-183 {+ 3382591870464867 -183 (1.4283e-055)}
; Y = 1.643906374048500484974510982283391058444976806640625p115 {+ 2899896506226314 115 (6.82852e+034)}
; 1.7510862754999940715805450963671319186687469482421875p-183 m 1.643906374048500484974510982283391058444976806640625p115 == 1.7510862754999940715805450963671319186687469482421875p-183
; [HW: 1.7510862754999940715805450963671319186687469482421875p-183] 

; mpf : + 3382591870464867 -183
; mpfd: + 3382591870464867 -183 (1.4283e-055) class: Pos. norm. non-zero
; hwf : + 3382591870464867 -183 (1.4283e-055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001000 #b1100000001000111001100001010110110111111001101100011)))
(assert (= y (fp #b0 #b10001110010 #b1010010011010111000011000101001000111001011010001010)))
(assert (= r (fp #b0 #b01101001000 #b1100000001000111001100001010110110111111001101100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
