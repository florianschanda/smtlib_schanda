(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.08397870099914772623606040724553167819976806640625p-940 {+ 378206446526820 -940 (1.16634e-283)}
; Y = -1.6457035236524013566139501563156954944133758544921875p-25 {- 2907990148512771 -25 (-4.90458e-008)}
; 1.08397870099914772623606040724553167819976806640625p-940 m -1.6457035236524013566139501563156954944133758544921875p-25 == -1.6457035236524013566139501563156954944133758544921875p-25
; [HW: -1.6457035236524013566139501563156954944133758544921875p-25] 

; mpf : - 2907990148512771 -25
; mpfd: - 2907990148512771 -25 (-4.90458e-008) class: Neg. norm. non-zero
; hwf : - 2907990148512771 -25 (-4.90458e-008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010011 #b0001010101111111101000001100111001011010000101100100)))
(assert (= y (fp #b1 #b01111100110 #b1010010101001100110100110111110011111111110000000011)))
(assert (= r (fp #b1 #b01111100110 #b1010010101001100110100110111110011111111110000000011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
