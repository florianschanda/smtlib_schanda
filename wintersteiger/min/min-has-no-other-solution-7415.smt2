(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3021354622713534610056740348227322101593017578125p-51 {+ 1360697155300680 -51 (5.78264e-016)}
; Y = -1.4894885889821782853914555744268000125885009765625p54 {- 2204460626942248 54 (-2.68322e+016)}
; 1.3021354622713534610056740348227322101593017578125p-51 m -1.4894885889821782853914555744268000125885009765625p54 == -1.4894885889821782853914555744268000125885009765625p54
; [HW: -1.4894885889821782853914555744268000125885009765625p54] 

; mpf : - 2204460626942248 54
; mpfd: - 2204460626942248 54 (-2.68322e+016) class: Neg. norm. non-zero
; hwf : - 2204460626942248 54 (-2.68322e+016) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001100 #b0100110101011000101111111110100101101010110101001000)))
(assert (= y (fp #b1 #b10000110101 #b0111110101001111000111111100100101110001100100101000)))
(assert (= r (fp #b1 #b10000110101 #b0111110101001111000111111100100101110001100100101000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
