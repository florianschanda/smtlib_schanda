(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2663705775129481256868757554912008345127105712890625p-68 {+ 1199626433629777 -68 (4.29063e-021)}
; Y = -1.4261893861498846636237658458412624895572662353515625p-205 {- 1919386360653881 -205 (-2.7735e-062)}
; 1.2663705775129481256868757554912008345127105712890625p-68 m -1.4261893861498846636237658458412624895572662353515625p-205 == -1.4261893861498846636237658458412624895572662353515625p-205
; [HW: -1.4261893861498846636237658458412624895572662353515625p-205] 

; mpf : - 1919386360653881 -205
; mpfd: - 1919386360653881 -205 (-2.7735e-062) class: Neg. norm. non-zero
; hwf : - 1919386360653881 -205 (-2.7735e-062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111011 #b0100010000110000110111001011011100001000111001010001)))
(assert (= y (fp #b1 #b01100110010 #b0110110100011010101111110110001101101010100000111001)))
(assert (= r (fp #b1 #b01100110010 #b0110110100011010101111110110001101101010100000111001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
