(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7039042549695349038074709824286401271820068359375p294 {+ 3170102940385304 294 (5.4233e+088)}
; Y = -1.296993459984772556481402716599404811859130859375p766 {- 1337539635718896 766 (-5.03401e+230)}
; 1.7039042549695349038074709824286401271820068359375p294 m -1.296993459984772556481402716599404811859130859375p766 == -1.296993459984772556481402716599404811859130859375p766
; [HW: -1.296993459984772556481402716599404811859130859375p766] 

; mpf : - 1337539635718896 766
; mpfd: - 1337539635718896 766 (-5.03401e+230) class: Neg. norm. non-zero
; hwf : - 1337539635718896 766 (-5.03401e+230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100101 #b1011010000110011000100011011101010011100000000011000)))
(assert (= y (fp #b1 #b11011111101 #b0100110000000111110000110110110111000010101011110000)))
(assert (= r (fp #b1 #b11011111101 #b0100110000000111110000110110110111000010101011110000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
