(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.238615178835394292633509394363500177860260009765625p596 {- 1074627230488026 596 (-3.21228e+179)}
; Y = -1.771024709081558512480114586651325225830078125p550 {- 3472386592513152 550 (-6.52713e+165)}
; -1.238615178835394292633509394363500177860260009765625p596 m -1.771024709081558512480114586651325225830078125p550 == -1.238615178835394292633509394363500177860260009765625p596
; [HW: -1.238615178835394292633509394363500177860260009765625p596] 

; mpf : - 1074627230488026 596
; mpfd: - 1074627230488026 596 (-3.21228e+179) class: Neg. norm. non-zero
; hwf : - 1074627230488026 596 (-3.21228e+179) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010011 #b0011110100010101111000100110010101101101010111011010)))
(assert (= y (fp #b1 #b11000100101 #b1100010101100001111000000001010111101001110010000000)))
(assert (= r (fp #b1 #b11001010011 #b0011110100010101111000100110010101101101010111011010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
