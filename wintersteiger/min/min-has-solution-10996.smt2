(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1035642869754866968179385366966016590595245361328125p-983 {+ 466412084231693 -983 (1.34993e-296)}
; Y = 1.13781037619927172244160828995518386363983154296875p681 {+ 620642758898828 681 (1.14156e+205)}
; 1.1035642869754866968179385366966016590595245361328125p-983 m 1.13781037619927172244160828995518386363983154296875p681 == 1.1035642869754866968179385366966016590595245361328125p-983
; [HW: 1.1035642869754866968179385366966016590595245361328125p-983] 

; mpf : + 466412084231693 -983
; mpfd: + 466412084231693 -983 (1.34993e-296) class: Pos. norm. non-zero
; hwf : + 466412084231693 -983 (1.34993e-296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101000 #b0001101010000011001100000110100110010111111000001101)))
(assert (= y (fp #b0 #b11010101000 #b0010001101000111100010100111001011010011010010001100)))
(assert (= r (fp #b0 #b00000101000 #b0001101010000011001100000110100110010111111000001101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
