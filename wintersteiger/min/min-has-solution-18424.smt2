(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8395761566651460672261464424082078039646148681640625p-535 {- 3781114866306305 -535 (-1.63557e-161)}
; Y = 1.267875335801296188265041564591228961944580078125p-928 {+ 1206403262496464 -928 (5.5878e-280)}
; -1.8395761566651460672261464424082078039646148681640625p-535 m 1.267875335801296188265041564591228961944580078125p-928 == -1.8395761566651460672261464424082078039646148681640625p-535
; [HW: -1.8395761566651460672261464424082078039646148681640625p-535] 

; mpf : - 3781114866306305 -535
; mpfd: - 3781114866306305 -535 (-1.63557e-161) class: Neg. norm. non-zero
; hwf : - 3781114866306305 -535 (-1.63557e-161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101000 #b1101011011101110011101101000011101100000110100000001)))
(assert (= y (fp #b0 #b00001011111 #b0100010010010011011110100101111010101011111011010000)))
(assert (= r (fp #b1 #b00111101000 #b1101011011101110011101101000011101100000110100000001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
