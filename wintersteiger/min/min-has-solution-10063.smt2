(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3126951438654164139308022640761919319629669189453125p-524 {- 1408253733392853 -524 (-2.39027e-158)}
; Y = 1.870737752118044827653875472606159746646881103515625p-589 {+ 3921454215976250 -589 (9.23306e-178)}
; -1.3126951438654164139308022640761919319629669189453125p-524 m 1.870737752118044827653875472606159746646881103515625p-589 == -1.3126951438654164139308022640761919319629669189453125p-524
; [HW: -1.3126951438654164139308022640761919319629669189453125p-524] 

; mpf : - 1408253733392853 -524
; mpfd: - 1408253733392853 -524 (-2.39027e-158) class: Neg. norm. non-zero
; hwf : - 1408253733392853 -524 (-2.39027e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110011 #b0101000000001100110010011111100010000101000111010101)))
(assert (= y (fp #b0 #b00110110010 #b1101111011101000101010110101100010111101010100111010)))
(assert (= r (fp #b1 #b00111110011 #b0101000000001100110010011111100010000101000111010101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
