(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.051604542014810572680971745285205543041229248046875p250 {- 232406196188526 250 (-1.90262e+075)}
; Y = -1.65212776791102111673126273672096431255340576171875p-139 {- 2936922372562028 -139 (-2.37069e-042)}
; -1.051604542014810572680971745285205543041229248046875p250 m -1.65212776791102111673126273672096431255340576171875p-139 == -1.051604542014810572680971745285205543041229248046875p250
; [HW: -1.051604542014810572680971745285205543041229248046875p250] 

; mpf : - 232406196188526 250
; mpfd: - 232406196188526 250 (-1.90262e+075) class: Neg. norm. non-zero
; hwf : - 232406196188526 250 (-1.90262e+075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011111001 #b0000110100110101111101001000110001000111010101101110)))
(assert (= y (fp #b1 #b01101110100 #b1010011011110001110110000110101111111101110001101100)))
(assert (= r (fp #b1 #b10011111001 #b0000110100110101111101001000110001000111010101101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
