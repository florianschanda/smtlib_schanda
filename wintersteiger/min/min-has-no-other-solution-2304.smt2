(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.99043315469745163426296130637638270854949951171875p949 {- 4460514386430828 949 (-9.47138e+285)}
; Y = 1.5484122879618935630929854596615768969058990478515625p-641 {+ 2469829375710585 -641 (1.69691e-193)}
; -1.99043315469745163426296130637638270854949951171875p949 m 1.5484122879618935630929854596615768969058990478515625p-641 == -1.99043315469745163426296130637638270854949951171875p949
; [HW: -1.99043315469745163426296130637638270854949951171875p949] 

; mpf : - 4460514386430828 949
; mpfd: - 4460514386430828 949 (-9.47138e+285) class: Neg. norm. non-zero
; hwf : - 4460514386430828 949 (-9.47138e+285) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110110100 #b1111110110001101000001101111100001001100101101101100)))
(assert (= y (fp #b0 #b00101111110 #b1000110001100100101111110110100110000101010101111001)))
(assert (= r (fp #b1 #b11110110100 #b1111110110001101000001101111100001001100101101101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
