(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.829708556934823260320399640477262437343597412109375p516 {+ 3736675147837782 516 (3.92518e+155)}
; Y = -1.144807802532643137283230316825211048126220703125p-547 {- 652156365526352 -547 (-2.48499e-165)}
; 1.829708556934823260320399640477262437343597412109375p516 m -1.144807802532643137283230316825211048126220703125p-547 == -1.144807802532643137283230316825211048126220703125p-547
; [HW: -1.144807802532643137283230316825211048126220703125p-547] 

; mpf : - 652156365526352 -547
; mpfd: - 652156365526352 -547 (-2.48499e-165) class: Neg. norm. non-zero
; hwf : - 652156365526352 -547 (-2.48499e-165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000000011 #b1101010001100111110001111010110100111111000101010110)))
(assert (= y (fp #b1 #b00111011100 #b0010010100010010000111111100100000010101010101010000)))
(assert (= r (fp #b1 #b00111011100 #b0010010100010010000111111100100000010101010101010000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
