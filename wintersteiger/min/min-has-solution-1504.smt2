(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.680374875996321737403604856808669865131378173828125p592 {- 3064136038009282 592 (-2.72373e+178)}
; Y = 1.0273493796958865775792446584091521799564361572265625p-156 {+ 123170656207209 -156 (1.12471e-047)}
; -1.680374875996321737403604856808669865131378173828125p592 m 1.0273493796958865775792446584091521799564361572265625p-156 == -1.680374875996321737403604856808669865131378173828125p592
; [HW: -1.680374875996321737403604856808669865131378173828125p592] 

; mpf : - 3064136038009282 592
; mpfd: - 3064136038009282 592 (-2.72373e+178) class: Neg. norm. non-zero
; hwf : - 3064136038009282 592 (-2.72373e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001111 #b1010111000101101000011000100000101101100100111000010)))
(assert (= y (fp #b0 #b01101100011 #b0000011100000000010111100111001101011100000101101001)))
(assert (= r (fp #b1 #b11001001111 #b1010111000101101000011000100000101101100100111000010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
