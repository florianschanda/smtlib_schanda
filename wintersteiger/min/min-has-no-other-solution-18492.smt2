(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3924076888850056565871682323631830513477325439453125p801 {+ 1767247121439829 801 (1.85692e+241)}
; Y = -1.6856920320136719038117689706268720328807830810546875p-115 {- 3088082379867691 -115 (-4.05816e-035)}
; 1.3924076888850056565871682323631830513477325439453125p801 m -1.6856920320136719038117689706268720328807830810546875p-115 == -1.6856920320136719038117689706268720328807830810546875p-115
; [HW: -1.6856920320136719038117689706268720328807830810546875p-115] 

; mpf : - 3088082379867691 -115
; mpfd: - 3088082379867691 -115 (-4.05816e-035) class: Neg. norm. non-zero
; hwf : - 3088082379867691 -115 (-4.05816e-035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100000 #b0110010001110100110101001000111001110101110001010101)))
(assert (= y (fp #b1 #b01110001100 #b1010111110001001100000110101010010100000011000101011)))
(assert (= r (fp #b1 #b01110001100 #b1010111110001001100000110101010010100000011000101011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
