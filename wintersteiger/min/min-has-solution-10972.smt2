(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.072331337242272031318179870140738785266876220703125p-573 {- 325751383451506 -573 (-3.4685e-173)}
; Y = -1.679859787483765298787830033688805997371673583984375p861 {- 3061816285576070 861 (-2.58285e+259)}
; -1.072331337242272031318179870140738785266876220703125p-573 m -1.679859787483765298787830033688805997371673583984375p861 == -1.679859787483765298787830033688805997371673583984375p861
; [HW: -1.679859787483765298787830033688805997371673583984375p861] 

; mpf : - 3061816285576070 861
; mpfd: - 3061816285576070 861 (-2.58285e+259) class: Neg. norm. non-zero
; hwf : - 3061816285576070 861 (-2.58285e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111000010 #b0001001010000100010011100111011111101110011101110010)))
(assert (= y (fp #b1 #b11101011100 #b1010111000001011010010101000000100011011101110000110)))
(assert (= r (fp #b1 #b11101011100 #b1010111000001011010010101000000100011011101110000110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
