(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.326555915014064890300460319849662482738494873046875p-685 {- 1470677097172974 -685 (-8.26378e-207)}
; Y = 1.9901454464397396737496137575362809002399444580078125p-495 {+ 4459218663628605 -495 (1.94553e-149)}
; -1.326555915014064890300460319849662482738494873046875p-685 m 1.9901454464397396737496137575362809002399444580078125p-495 == -1.326555915014064890300460319849662482738494873046875p-685
; [HW: -1.326555915014064890300460319849662482738494873046875p-685] 

; mpf : - 1470677097172974 -685
; mpfd: - 1470677097172974 -685 (-8.26378e-207) class: Neg. norm. non-zero
; hwf : - 1470677097172974 -685 (-8.26378e-207) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010010 #b0101001110011001001010110001111101001100111111101110)))
(assert (= y (fp #b0 #b01000010000 #b1111110101111010001011000000011010111101111100111101)))
(assert (= r (fp #b1 #b00101010010 #b0101001110011001001010110001111101001100111111101110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
