(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.66765290639861252230957688880153000354766845703125p564 {- 3006841380469620 564 (-1.00699e+170)}
; Y = 1.079000652765703893720683481660671532154083251953125p622 {+ 355787310357650 622 (1.87793e+187)}
; -1.66765290639861252230957688880153000354766845703125p564 m 1.079000652765703893720683481660671532154083251953125p622 == -1.66765290639861252230957688880153000354766845703125p564
; [HW: -1.66765290639861252230957688880153000354766845703125p564] 

; mpf : - 3006841380469620 564
; mpfd: - 3006841380469620 564 (-1.00699e+170) class: Neg. norm. non-zero
; hwf : - 3006841380469620 564 (-1.00699e+170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110011 #b1010101011101011010011010000011000001111101101110100)))
(assert (= y (fp #b0 #b11001101101 #b0001010000111001011000110000001111111101110010010010)))
(assert (= r (fp #b1 #b11000110011 #b1010101011101011010011010000011000001111101101110100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
