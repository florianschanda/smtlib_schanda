(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.68704246121142542591542223817668855190277099609375p-407 {+ 3094164172299484 -407 (5.10408e-123)}
; Y = -1.3842509457930025629224246586090885102748870849609375p-653 {- 1730512416290127 -653 (-3.70363e-197)}
; 1.68704246121142542591542223817668855190277099609375p-407 m -1.3842509457930025629224246586090885102748870849609375p-653 == -1.3842509457930025629224246586090885102748870849609375p-653
; [HW: -1.3842509457930025629224246586090885102748870849609375p-653] 

; mpf : - 1730512416290127 -653
; mpfd: - 1730512416290127 -653 (-3.70363e-197) class: Neg. norm. non-zero
; hwf : - 1730512416290127 -653 (-3.70363e-197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001101000 #b1010111111100010000000111100010111011101110011011100)))
(assert (= y (fp #b1 #b00101110010 #b0110001001011110010001010001110110100011010101001111)))
(assert (= r (fp #b1 #b00101110010 #b0110001001011110010001010001110110100011010101001111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
