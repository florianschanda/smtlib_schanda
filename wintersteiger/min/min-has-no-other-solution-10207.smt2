(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9331320188921805591775182620040141046047210693359375p-656 {+ 4202453012570303 -656 (6.46524e-198)}
; Y = 1.5727342872269198803536482955678366124629974365234375p739 {+ 2579365922537463 739 (4.54802e+222)}
; 1.9331320188921805591775182620040141046047210693359375p-656 m 1.5727342872269198803536482955678366124629974365234375p739 == 1.9331320188921805591775182620040141046047210693359375p-656
; [HW: 1.9331320188921805591775182620040141046047210693359375p-656] 

; mpf : + 4202453012570303 -656
; mpfd: + 4202453012570303 -656 (6.46524e-198) class: Pos. norm. non-zero
; hwf : + 4202453012570303 -656 (6.46524e-198) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101101111 #b1110111011100001101111010110111111111110000010111111)))
(assert (= y (fp #b0 #b11011100010 #b1001001010011110101101101101100011101111111111110111)))
(assert (= r (fp #b0 #b00101101111 #b1110111011100001101111010110111111111110000010111111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
