(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.484532335258529567312280050828121602535247802734375p206 {- 2182139644519270 206 (-1.52675e+062)}
; Y = -1.1673967387125434580497085335082374513149261474609375p-482 {- 753887890088847 -482 (-9.3489e-146)}
; -1.484532335258529567312280050828121602535247802734375p206 m -1.1673967387125434580497085335082374513149261474609375p-482 == -1.484532335258529567312280050828121602535247802734375p206
; [HW: -1.484532335258529567312280050828121602535247802734375p206] 

; mpf : - 2182139644519270 206
; mpfd: - 2182139644519270 206 (-1.52675e+062) class: Neg. norm. non-zero
; hwf : - 2182139644519270 206 (-1.52675e+062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011001101 #b0111110000001010010011111010010111001010001101100110)))
(assert (= y (fp #b1 #b01000011101 #b0010101011011010100000110011111000111010001110001111)))
(assert (= r (fp #b1 #b10011001101 #b0111110000001010010011111010010111001010001101100110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
