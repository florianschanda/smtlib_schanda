(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 0.279164271717204481859653242281638085842132568359375p-1022 {+ 1257244110080758 -1023 (6.21161e-309)}
; Y = -1.67388004829871217538084238185547292232513427734375p810 {- 3034885934410492 810 (-1.14293e+244)}
; 0.279164271717204481859653242281638085842132568359375p-1022 m -1.67388004829871217538084238185547292232513427734375p810 == -1.67388004829871217538084238185547292232513427734375p810
; [HW: -1.67388004829871217538084238185547292232513427734375p810] 

; mpf : - 3034885934410492 810
; mpfd: - 3034885934410492 810 (-1.14293e+244) class: Neg. norm. non-zero
; hwf : - 3034885934410492 810 (-1.14293e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0100011101110111010011110100100100111100101011110110)))
(assert (= y (fp #b1 #b11100101001 #b1010110010000011011001110010000011011110101011111100)))
(assert (= r (fp #b1 #b11100101001 #b1010110010000011011001110010000011011110101011111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
