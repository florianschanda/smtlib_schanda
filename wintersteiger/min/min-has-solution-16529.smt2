(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.37668717687441510832968560862354934215545654296875p69 {+ 1696448229406860 69 (8.12653e+020)}
; Y = 1.1918530620256715391036550499848090112209320068359375p442 {+ 864029378648703 442 (1.35357e+133)}
; 1.37668717687441510832968560862354934215545654296875p69 m 1.1918530620256715391036550499848090112209320068359375p442 == 1.37668717687441510832968560862354934215545654296875p69
; [HW: 1.37668717687441510832968560862354934215545654296875p69] 

; mpf : + 1696448229406860 69
; mpfd: + 1696448229406860 69 (8.12653e+020) class: Pos. norm. non-zero
; hwf : + 1696448229406860 69 (8.12653e+020) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000100 #b0110000001101110100100100010000101111111100010001100)))
(assert (= y (fp #b0 #b10110111001 #b0011000100011101010010000100001100001001101001111111)))
(assert (= r (fp #b0 #b10001000100 #b0110000001101110100100100010000101111111100010001100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
