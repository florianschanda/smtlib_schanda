(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7934600531322366645525789863313548266887664794921875p45 {+ 3573426399619715 45 (6.31018e+013)}
; Y = -1.2085079938802383292539843751001171767711639404296875p353 {- 939036523542811 353 (-2.21737e+106)}
; 1.7934600531322366645525789863313548266887664794921875p45 m -1.2085079938802383292539843751001171767711639404296875p353 == -1.2085079938802383292539843751001171767711639404296875p353
; [HW: -1.2085079938802383292539843751001171767711639404296875p353] 

; mpf : - 939036523542811 353
; mpfd: - 939036523542811 353 (-2.21737e+106) class: Neg. norm. non-zero
; hwf : - 939036523542811 353 (-2.21737e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000101100 #b1100101100100000001100101011001011100010101010000011)))
(assert (= y (fp #b1 #b10101100000 #b0011010101100000110001111010011010101011100100011011)))
(assert (= r (fp #b1 #b10101100000 #b0011010101100000110001111010011010101011100100011011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
