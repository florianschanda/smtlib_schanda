(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9467753438307713320654102062690071761608123779296875p498 {- 4263897085679835 498 (-1.59314e+150)}
; Y = 1.80550632783518327784122448065318167209625244140625p608 {+ 3627677997883108 608 (1.91795e+183)}
; -1.9467753438307713320654102062690071761608123779296875p498 m 1.80550632783518327784122448065318167209625244140625p608 == -1.9467753438307713320654102062690071761608123779296875p498
; [HW: -1.9467753438307713320654102062690071761608123779296875p498] 

; mpf : - 4263897085679835 498
; mpfd: - 4263897085679835 498 (-1.59314e+150) class: Neg. norm. non-zero
; hwf : - 4263897085679835 498 (-1.59314e+150) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110001 #b1111001001011111110111100111001001101001100011011011)))
(assert (= y (fp #b0 #b11001011111 #b1100111000110101101010011010011011000101111011100100)))
(assert (= r (fp #b1 #b10111110001 #b1111001001011111110111100111001001101001100011011011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
