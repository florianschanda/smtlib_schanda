(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.498084878860249435916784932487644255161285400390625p389 {- 2243174874833898 389 (-1.88888e+117)}
; Y = -1.8911013025897289718812999126384966075420379638671875p131 {- 4013163494292467 131 (-5.14807e+039)}
; -1.498084878860249435916784932487644255161285400390625p389 m -1.8911013025897289718812999126384966075420379638671875p131 == -1.498084878860249435916784932487644255161285400390625p389
; [HW: -1.498084878860249435916784932487644255161285400390625p389] 

; mpf : - 2243174874833898 389
; mpfd: - 2243174874833898 389 (-1.88888e+117) class: Neg. norm. non-zero
; hwf : - 2243174874833898 389 (-1.88888e+117) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110000100 #b0111111110000010011111011001100101010110001111101010)))
(assert (= y (fp #b1 #b10010000010 #b1110010000011111001101110000100000001011101111110011)))
(assert (= r (fp #b1 #b10110000100 #b0111111110000010011111011001100101010110001111101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
