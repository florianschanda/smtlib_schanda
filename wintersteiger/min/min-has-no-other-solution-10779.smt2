(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8216589319009506287017075010226108133792877197265625p725 {+ 3700422859534761 725 (3.21524e+218)}
; Y = 1.206687057468086354816705352277494966983795166015625p-439 {+ 930835754995578 -439 (8.50015e-133)}
; 1.8216589319009506287017075010226108133792877197265625p725 m 1.206687057468086354816705352277494966983795166015625p-439 == 1.206687057468086354816705352277494966983795166015625p-439
; [HW: 1.206687057468086354816705352277494966983795166015625p-439] 

; mpf : + 930835754995578 -439
; mpfd: + 930835754995578 -439 (8.50015e-133) class: Pos. norm. non-zero
; hwf : + 930835754995578 -439 (8.50015e-133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011010100 #b1101001001011000001111010110000011111011000110101001)))
(assert (= y (fp #b0 #b01001001000 #b0011010011101001011100010110100001010100111101111010)))
(assert (= r (fp #b0 #b01001001000 #b0011010011101001011100010110100001010100111101111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
