(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3688597771340320630173437166376970708370208740234375p-505 {- 1661196754852791 -505 (-1.30681e-152)}
; Y = 1.2606976198288604162911497041932307183742523193359375p-752 {+ 1174077703517631 -752 (5.32175e-227)}
; -1.3688597771340320630173437166376970708370208740234375p-505 m 1.2606976198288604162911497041932307183742523193359375p-752 == -1.3688597771340320630173437166376970708370208740234375p-505
; [HW: -1.3688597771340320630173437166376970708370208740234375p-505] 

; mpf : - 1661196754852791 -505
; mpfd: - 1661196754852791 -505 (-1.30681e-152) class: Neg. norm. non-zero
; hwf : - 1661196754852791 -505 (-1.30681e-152) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000110 #b0101111001101101100110000010011110011001101110110111)))
(assert (= y (fp #b0 #b00100001111 #b0100001010111101000101000100011101001111010110111111)))
(assert (= r (fp #b1 #b01000000110 #b0101111001101101100110000010011110011001101110110111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
