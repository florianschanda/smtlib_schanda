(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.861769281760534244796190250781364738941192626953125p845 {+ 3881063816216082 845 (4.3679e+254)}
; Y = -1.0766102550062000009489793228567577898502349853515625p668 {- 345021915898681 668 (-1.31855e+201)}
; 1.861769281760534244796190250781364738941192626953125p845 m -1.0766102550062000009489793228567577898502349853515625p668 == -1.0766102550062000009489793228567577898502349853515625p668
; [HW: -1.0766102550062000009489793228567577898502349853515625p668] 

; mpf : - 345021915898681 668
; mpfd: - 345021915898681 668 (-1.31855e+201) class: Neg. norm. non-zero
; hwf : - 345021915898681 668 (-1.31855e+201) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001100 #b1101110010011100111010010110000111011011111000010010)))
(assert (= y (fp #b1 #b11010011011 #b0001001110011100101110101100101111001010001100111001)))
(assert (= r (fp #b1 #b11010011011 #b0001001110011100101110101100101111001010001100111001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
