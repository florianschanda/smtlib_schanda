(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9329041671789237710754605359397828578948974609375p-295 {- 4201426859679384 -295 (-3.03642e-089)}
; Y = 1.935404100771631608068901186925359070301055908203125p-477 {+ 4212685559675954 -477 (4.95979e-144)}
; -1.9329041671789237710754605359397828578948974609375p-295 m 1.935404100771631608068901186925359070301055908203125p-477 == -1.9329041671789237710754605359397828578948974609375p-295
; [HW: -1.9329041671789237710754605359397828578948974609375p-295] 

; mpf : - 4201426859679384 -295
; mpfd: - 4201426859679384 -295 (-3.03642e-089) class: Neg. norm. non-zero
; hwf : - 4201426859679384 -295 (-3.03642e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011000 #b1110111011010010110011101011100001010101111010011000)))
(assert (= y (fp #b0 #b01000100010 #b1110111101110110101001001010010101011011110000110010)))
(assert (= r (fp #b1 #b01011011000 #b1110111011010010110011101011100001010101111010011000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
