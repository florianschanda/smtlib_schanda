(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4625078468045489277216120171942748129367828369140625p229 {+ 2082950166524897 229 (1.26173e+069)}
; Y = -1.4712755567607034290489309569238685071468353271484375p-914 {- 2122436421816327 -914 (-1.06238e-275)}
; 1.4625078468045489277216120171942748129367828369140625p229 m -1.4712755567607034290489309569238685071468353271484375p-914 == -1.4712755567607034290489309569238685071468353271484375p-914
; [HW: -1.4712755567607034290489309569238685071468353271484375p-914] 

; mpf : - 2122436421816327 -914
; mpfd: - 2122436421816327 -914 (-1.06238e-275) class: Neg. norm. non-zero
; hwf : - 2122436421816327 -914 (-1.06238e-275) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100100 #b0111011001100110111010100000110000101011001111100001)))
(assert (= y (fp #b1 #b00001101101 #b0111100010100101100000111100111110110001000000000111)))
(assert (= r (fp #b1 #b00001101101 #b0111100010100101100000111100111110110001000000000111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
