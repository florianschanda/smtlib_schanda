(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2388422638487426308273597896913997828960418701171875p-922 {+ 1075649930469523 -922 (3.4943e-278)}
; Y = -1.4976112937332459740247259105672128498554229736328125p663 {- 2241042037032397 663 (-5.73174e+199)}
; 1.2388422638487426308273597896913997828960418701171875p-922 m -1.4976112937332459740247259105672128498554229736328125p663 == -1.4976112937332459740247259105672128498554229736328125p663
; [HW: -1.4976112937332459740247259105672128498554229736328125p663] 

; mpf : - 2241042037032397 663
; mpfd: - 2241042037032397 663 (-5.73174e+199) class: Neg. norm. non-zero
; hwf : - 2241042037032397 663 (-5.73174e+199) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100101 #b0011110100100100110001000100000000100010000010010011)))
(assert (= y (fp #b1 #b11010010110 #b0111111101100011011101000010100010110100010111001101)))
(assert (= r (fp #b1 #b11010010110 #b0111111101100011011101000010100010110100010111001101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
