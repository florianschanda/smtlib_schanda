(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.907739564435913859341553688864223659038543701171875p-499 {+ 4088095564143038 -499 (1.1656e-150)}
; Y = -1.66116125107079160017065078136511147022247314453125p963 {- 2977605563954228 963 (-1.29508e+290)}
; 1.907739564435913859341553688864223659038543701171875p-499 m -1.66116125107079160017065078136511147022247314453125p963 == -1.66116125107079160017065078136511147022247314453125p963
; [HW: -1.66116125107079160017065078136511147022247314453125p963] 

; mpf : - 2977605563954228 963
; mpfd: - 2977605563954228 963 (-1.29508e+290) class: Neg. norm. non-zero
; hwf : - 2977605563954228 963 (-1.29508e+290) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001100 #b1110100001100001100111101011111010001001100110111110)))
(assert (= y (fp #b1 #b11111000010 #b1010100101000001110111010001111010111011010000110100)))
(assert (= r (fp #b1 #b11111000010 #b1010100101000001110111010001111010111011010000110100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
