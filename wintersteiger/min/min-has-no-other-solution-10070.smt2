(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.747623139455271257247659377753734588623046875p-542 {- 3366995292264320 -542 (-1.21392e-163)}
; Y = 1.800726816202881774842126105795614421367645263671875p-178 {+ 3606152991076862 -178 (4.70012e-054)}
; -1.747623139455271257247659377753734588623046875p-542 m 1.800726816202881774842126105795614421367645263671875p-178 == -1.747623139455271257247659377753734588623046875p-542
; [HW: -1.747623139455271257247659377753734588623046875p-542] 

; mpf : - 3366995292264320 -542
; mpfd: - 3366995292264320 -542 (-1.21392e-163) class: Neg. norm. non-zero
; hwf : - 3366995292264320 -542 (-1.21392e-163) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100001 #b1011111101100100001110101110010110110001011110000000)))
(assert (= y (fp #b0 #b01101001101 #b1100110011111100011011101100000010011111000111111110)))
(assert (= r (fp #b1 #b00111100001 #b1011111101100100001110101110010110110001011110000000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
