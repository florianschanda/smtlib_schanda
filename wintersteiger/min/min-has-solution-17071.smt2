(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6295172304547189678913809984805993735790252685546875p-220 {- 2835093564499179 -220 (-9.67074e-067)}
; Y = 1.0102230059811232454336504815728403627872467041015625p-840 {+ 46040325927193 -840 (1.37791e-253)}
; -1.6295172304547189678913809984805993735790252685546875p-220 m 1.0102230059811232454336504815728403627872467041015625p-840 == -1.6295172304547189678913809984805993735790252685546875p-220
; [HW: -1.6295172304547189678913809984805993735790252685546875p-220] 

; mpf : - 2835093564499179 -220
; mpfd: - 2835093564499179 -220 (-9.67074e-067) class: Neg. norm. non-zero
; hwf : - 2835093564499179 -220 (-9.67074e-067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100011 #b1010000100101000000010101000110100010010010011101011)))
(assert (= y (fp #b0 #b00010110111 #b0000001010011101111110011001010001011011000100011001)))
(assert (= r (fp #b1 #b01100100011 #b1010000100101000000010101000110100010010010011101011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
