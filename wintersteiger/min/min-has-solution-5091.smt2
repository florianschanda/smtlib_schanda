(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.633340076047609112919190010870806872844696044921875p-582 {- 2852310130486814 -582 (-1.03186e-175)}
; Y = 1.302778497808825708403901444398798048496246337890625p458 {+ 1363593129907626 458 (9.69636e+137)}
; -1.633340076047609112919190010870806872844696044921875p-582 m 1.302778497808825708403901444398798048496246337890625p458 == -1.633340076047609112919190010870806872844696044921875p-582
; [HW: -1.633340076047609112919190010870806872844696044921875p-582] 

; mpf : - 2852310130486814 -582
; mpfd: - 2852310130486814 -582 (-1.03186e-175) class: Neg. norm. non-zero
; hwf : - 2852310130486814 -582 (-1.03186e-175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111001 #b1010001000100010100100110100000111011110111000011110)))
(assert (= y (fp #b0 #b10111001001 #b0100110110000010111001000100001000000101010110101010)))
(assert (= r (fp #b1 #b00110111001 #b1010001000100010100100110100000111011110111000011110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
