(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5930511799313620269202829149435274302959442138671875p-611 {- 2670865072950515 -611 (-1.87457e-184)}
; Y = -1.7042643571311886230290610910742543637752532958984375p-695 {- 3171724696346343 -695 (-1.03679e-209)}
; -1.5930511799313620269202829149435274302959442138671875p-611 m -1.7042643571311886230290610910742543637752532958984375p-695 == -1.5930511799313620269202829149435274302959442138671875p-611
; [HW: -1.5930511799313620269202829149435274302959442138671875p-611] 

; mpf : - 2670865072950515 -611
; mpfd: - 2670865072950515 -611 (-1.87457e-184) class: Neg. norm. non-zero
; hwf : - 2670865072950515 -611 (-1.87457e-184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011100 #b1001011111010010001100111011111010101000110011110011)))
(assert (= y (fp #b1 #b00101001000 #b1011010001001010101010110011110110011101111011100111)))
(assert (= r (fp #b1 #b00110011100 #b1001011111010010001100111011111010101000110011110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
