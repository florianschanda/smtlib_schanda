(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.783021645844102831546251763938926160335540771484375p-169 {+ 3526415992446534 -169 (2.3828e-051)}
; Y = 1.662193700133636209415044504567049443721771240234375p-293 {+ 2982255301168934 -293 (1.04446e-088)}
; 1.783021645844102831546251763938926160335540771484375p-169 m 1.662193700133636209415044504567049443721771240234375p-293 == 1.662193700133636209415044504567049443721771240234375p-293
; [HW: 1.662193700133636209415044504567049443721771240234375p-293] 

; mpf : + 2982255301168934 -293
; mpfd: + 2982255301168934 -293 (1.04446e-088) class: Pos. norm. non-zero
; hwf : + 2982255301168934 -293 (1.04446e-088) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010110 #b1100100001110100000110110100100011110101111001000110)))
(assert (= y (fp #b0 #b01011011010 #b1010100110000101100001101011110110110000111100100110)))
(assert (= r (fp #b0 #b01011011010 #b1010100110000101100001101011110110110000111100100110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
