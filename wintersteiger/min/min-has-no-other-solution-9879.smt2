(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0335898681844406521435075774206779897212982177734375p559 {- 151275317838871 559 (-1.95036e+168)}
; Y = -1.6865177338249137672931965425959788262844085693359375p115 {- 3091801010237119 115 (-7.00552e+034)}
; -1.0335898681844406521435075774206779897212982177734375p559 m -1.6865177338249137672931965425959788262844085693359375p115 == -1.0335898681844406521435075774206779897212982177734375p559
; [HW: -1.0335898681844406521435075774206779897212982177734375p559] 

; mpf : - 151275317838871 559
; mpfd: - 151275317838871 559 (-1.95036e+168) class: Neg. norm. non-zero
; hwf : - 151275317838871 559 (-1.95036e+168) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101110 #b0000100010011001010110000111100101010100010000010111)))
(assert (= y (fp #b1 #b10001110010 #b1010111110111111101000000100111011100110111010111111)))
(assert (= r (fp #b1 #b11000101110 #b0000100010011001010110000111100101010100010000010111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
