(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0126892774644924433147252784692682325839996337890625p377 {+ 57147425260689 377 (3.11734e+113)}
; Y = 1.1525697349789363332916991566889919340610504150390625p-282 {+ 687113001599153 -282 (1.48323e-085)}
; 1.0126892774644924433147252784692682325839996337890625p377 m 1.1525697349789363332916991566889919340610504150390625p-282 == 1.1525697349789363332916991566889919340610504150390625p-282
; [HW: 1.1525697349789363332916991566889919340610504150390625p-282] 

; mpf : + 687113001599153 -282
; mpfd: + 687113001599153 -282 (1.48323e-085) class: Pos. norm. non-zero
; hwf : + 687113001599153 -282 (1.48323e-085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101111000 #b0000001100111111100110101011111110111000010010010001)))
(assert (= y (fp #b0 #b01011100101 #b0010011100001110110011110110011000011000000010110001)))
(assert (= r (fp #b0 #b01011100101 #b0010011100001110110011110110011000011000000010110001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
