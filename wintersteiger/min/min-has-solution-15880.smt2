(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7651377905759366715443547946051694452762603759765625p39 {+ 3445874268524873 39 (9.70395e+011)}
; Y = -1.0366236646105770891068686978542245924472808837890625p-493 {- 164938322293137 -493 (-4.05353e-149)}
; 1.7651377905759366715443547946051694452762603759765625p39 m -1.0366236646105770891068686978542245924472808837890625p-493 == -1.0366236646105770891068686978542245924472808837890625p-493
; [HW: -1.0366236646105770891068686978542245924472808837890625p-493] 

; mpf : - 164938322293137 -493
; mpfd: - 164938322293137 -493 (-4.05353e-149) class: Neg. norm. non-zero
; hwf : - 164938322293137 -493 (-4.05353e-149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000100110 #b1100001111100000000100011111101101110101000101001001)))
(assert (= y (fp #b1 #b01000010010 #b0000100101100000001010110010000111000011000110010001)))
(assert (= r (fp #b1 #b01000010010 #b0000100101100000001010110010000111000011000110010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
