(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.97302760744123784064640858559869229793548583984375p1019 {- 4382126770293564 1019 (-1.10841e+307)}
; Y = 1.207611137246714871906760890851728618144989013671875p791 {+ 934997440342270 791 (1.57273e+238)}
; -1.97302760744123784064640858559869229793548583984375p1019 m 1.207611137246714871906760890851728618144989013671875p791 == -1.97302760744123784064640858559869229793548583984375p1019
; [HW: -1.97302760744123784064640858559869229793548583984375p1019] 

; mpf : - 4382126770293564 1019
; mpfd: - 4382126770293564 1019 (-1.10841e+307) class: Neg. norm. non-zero
; hwf : - 4382126770293564 1019 (-1.10841e+307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111010 #b1111100100011000010101100101100000010000101100111100)))
(assert (= y (fp #b0 #b11100010110 #b0011010100100110000000001110010011000010100011111110)))
(assert (= r (fp #b1 #b11111111010 #b1111100100011000010101100101100000010000101100111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
