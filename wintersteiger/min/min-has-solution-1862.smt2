(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0854526946090847783210620036697946488857269287109375p-900 {- 384844723599279 -900 (-1.28415e-271)}
; Y = 1.16261856171823740879744946141727268695831298828125p940 {+ 732368893957780 940 (1.08052e+283)}
; -1.0854526946090847783210620036697946488857269287109375p-900 m 1.16261856171823740879744946141727268695831298828125p940 == -1.0854526946090847783210620036697946488857269287109375p-900
; [HW: -1.0854526946090847783210620036697946488857269287109375p-900] 

; mpf : - 384844723599279 -900
; mpfd: - 384844723599279 -900 (-1.28415e-271) class: Neg. norm. non-zero
; hwf : - 384844723599279 -900 (-1.28415e-271) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001111011 #b0001010111100000001110100101000010110011011110101111)))
(assert (= y (fp #b0 #b11110101011 #b0010100110100001010111101011110001001101011010010100)))
(assert (= r (fp #b1 #b00001111011 #b0001010111100000001110100101000010110011011110101111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
