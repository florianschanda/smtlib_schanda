(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7955021501170873587938103810301981866359710693359375p424 {+ 3582623186839743 424 (7.77865e+127)}
; Y = -1.1871462884440215912462690539541654288768768310546875p115 {- 842831954900267 115 (-4.93121e+034)}
; 1.7955021501170873587938103810301981866359710693359375p424 m -1.1871462884440215912462690539541654288768768310546875p115 == -1.1871462884440215912462690539541654288768768310546875p115
; [HW: -1.1871462884440215912462690539541654288768768310546875p115] 

; mpf : - 842831954900267 115
; mpfd: - 842831954900267 115 (-4.93121e+034) class: Neg. norm. non-zero
; hwf : - 842831954900267 115 (-4.93121e+034) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110100111 #b1100101110100110000001110110011010100110100010111111)))
(assert (= y (fp #b1 #b10001110010 #b0010111111101000110100011011010001101111010100101011)))
(assert (= r (fp #b1 #b10001110010 #b0010111111101000110100011011010001101111010100101011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
