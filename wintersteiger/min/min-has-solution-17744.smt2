(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7817534422678298344777658712700940668582916259765625p-610 {- 3520704511293001 -610 (-4.19325e-184)}
; Y = -1.8245451236726228927409465541131794452667236328125p-102 {- 3713421111722184 -102 (-3.59828e-031)}
; -1.7817534422678298344777658712700940668582916259765625p-610 m -1.8245451236726228927409465541131794452667236328125p-102 == -1.8245451236726228927409465541131794452667236328125p-102
; [HW: -1.8245451236726228927409465541131794452667236328125p-102] 

; mpf : - 3713421111722184 -102
; mpfd: - 3713421111722184 -102 (-3.59828e-031) class: Neg. norm. non-zero
; hwf : - 3713421111722184 -102 (-3.59828e-031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011101 #b1100100000100000111111100101110000010011011001001001)))
(assert (= y (fp #b1 #b01110011001 #b1101001100010101011000111010010001000000000011001000)))
(assert (= r (fp #b1 #b01110011001 #b1101001100010101011000111010010001000000000011001000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
