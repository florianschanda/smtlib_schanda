(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.876146302825416167792127453139983117580413818359375p843 {+ 3945812162926582 843 (1.10041e+254)}
; Y = 1.4860695006207602641978837709757499396800994873046875p892 {+ 2189062421871819 892 (4.90676e+268)}
; 1.876146302825416167792127453139983117580413818359375p843 m 1.4860695006207602641978837709757499396800994873046875p892 == 1.876146302825416167792127453139983117580413818359375p843
; [HW: 1.876146302825416167792127453139983117580413818359375p843] 

; mpf : + 3945812162926582 843
; mpfd: + 3945812162926582 843 (1.10041e+254) class: Pos. norm. non-zero
; hwf : + 3945812162926582 843 (1.10041e+254) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001010 #b1110000001001011000111111100010100100101011111110110)))
(assert (= y (fp #b0 #b11101111011 #b0111110001101111000011010000000010111111110011001011)))
(assert (= r (fp #b0 #b11101001010 #b1110000001001011000111111100010100100101011111110110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
