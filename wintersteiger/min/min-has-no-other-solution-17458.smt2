(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1956679910148846346373829874210059642791748046875p25 {+ 881210291422968 25 (4.012e+007)}
; Y = -1.1635644172933516937717968176002614200115203857421875p-697 {- 736628648773411 -697 (-1.76963e-210)}
; 1.1956679910148846346373829874210059642791748046875p25 m -1.1635644172933516937717968176002614200115203857421875p-697 == -1.1635644172933516937717968176002614200115203857421875p-697
; [HW: -1.1635644172933516937717968176002614200115203857421875p-697] 

; mpf : - 736628648773411 -697
; mpfd: - 736628648773411 -697 (-1.76963e-210) class: Neg. norm. non-zero
; hwf : - 736628648773411 -697 (-1.76963e-210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011000 #b0011001000010111010011000010011001001000011011111000)))
(assert (= y (fp #b1 #b00101000110 #b0010100111011111010110111000111100010000011100100011)))
(assert (= r (fp #b1 #b00101000110 #b0010100111011111010110111000111100010000011100100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
