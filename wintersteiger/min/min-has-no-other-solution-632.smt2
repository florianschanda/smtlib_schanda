(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1519689516020756858694085167371667921543121337890625p352 {- 684407313806993 352 (-1.05682e+106)}
; Y = 1.9235723420484991397216845143702812492847442626953125p-877 {+ 4159400055499317 -877 (1.90898e-264)}
; -1.1519689516020756858694085167371667921543121337890625p352 m 1.9235723420484991397216845143702812492847442626953125p-877 == -1.1519689516020756858694085167371667921543121337890625p352
; [HW: -1.1519689516020756858694085167371667921543121337890625p352] 

; mpf : - 684407313806993 352
; mpfd: - 684407313806993 352 (-1.05682e+106) class: Neg. norm. non-zero
; hwf : - 684407313806993 352 (-1.05682e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101011111 #b0010011011100111011011111110110100100011011010010001)))
(assert (= y (fp #b0 #b00010010010 #b1110110001101111001111001010110010010110101000110101)))
(assert (= r (fp #b1 #b10101011111 #b0010011011100111011011111110110100100011011010010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
