(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.722745847102304050935117629705928266048431396484375p-59 {- 3254957927693510 -59 (-2.98849e-018)}
; Y = -1.357677478116605218616541606024838984012603759765625p638 {- 1610836157164762 638 (-1.54858e+192)}
; -1.722745847102304050935117629705928266048431396484375p-59 m -1.357677478116605218616541606024838984012603759765625p638 == -1.357677478116605218616541606024838984012603759765625p638
; [HW: -1.357677478116605218616541606024838984012603759765625p638] 

; mpf : - 1610836157164762 638
; mpfd: - 1610836157164762 638 (-1.54858e+192) class: Neg. norm. non-zero
; hwf : - 1610836157164762 638 (-1.54858e+192) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000100 #b1011100100000101110111110011000010011111110011000110)))
(assert (= y (fp #b1 #b11001111101 #b0101101110010000110000000100111100000110110011011010)))
(assert (= r (fp #b1 #b11001111101 #b0101101110010000110000000100111100000110110011011010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
