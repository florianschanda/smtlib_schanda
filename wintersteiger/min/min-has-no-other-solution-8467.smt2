(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7736642854691673232281345917726866900920867919921875p581 {+ 3484274187748803 581 (1.40378e+175)}
; Y = 1.5613723459896753364972710187430493533611297607421875p454 {+ 2528196288215203 454 (7.26314e+136)}
; 1.7736642854691673232281345917726866900920867919921875p581 m 1.5613723459896753364972710187430493533611297607421875p454 == 1.5613723459896753364972710187430493533611297607421875p454
; [HW: 1.5613723459896753364972710187430493533611297607421875p454] 

; mpf : + 2528196288215203 454
; mpfd: + 2528196288215203 454 (7.26314e+136) class: Pos. norm. non-zero
; hwf : + 2528196288215203 454 (7.26314e+136) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000100 #b1100011000001110110111001101010000101100010111000011)))
(assert (= y (fp #b0 #b10111000101 #b1000111110110110000110010001101011100111100010100011)))
(assert (= r (fp #b0 #b10111000101 #b1000111110110110000110010001101011100111100010100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
