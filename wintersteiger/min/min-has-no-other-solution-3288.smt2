(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.093870035335110291185856112861074507236480712890625p845 {- 422753056156458 845 (-2.56633e+254)}
; Y = 1.155544165212617269133943409542553126811981201171875p52 {+ 700508644491198 52 (5.20411e+015)}
; -1.093870035335110291185856112861074507236480712890625p845 m 1.155544165212617269133943409542553126811981201171875p52 == -1.093870035335110291185856112861074507236480712890625p845
; [HW: -1.093870035335110291185856112861074507236480712890625p845] 

; mpf : - 422753056156458 845
; mpfd: - 422753056156458 845 (-2.56633e+254) class: Neg. norm. non-zero
; hwf : - 422753056156458 845 (-2.56633e+254) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101001100 #b0001100000000111110111011101101111010110101100101010)))
(assert (= y (fp #b0 #b10000110011 #b0010011111010001101111100000111010101011111110111110)))
(assert (= r (fp #b1 #b11101001100 #b0001100000000111110111011101101111010110101100101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
