(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3359472503925131636748346863896586000919342041015625p39 {- 1512971911683865 39 (-7.34445e+011)}
; Y = 1.0886518516742154094600891767186112701892852783203125p-119 {+ 399252446165701 -119 (1.63802e-036)}
; -1.3359472503925131636748346863896586000919342041015625p39 m 1.0886518516742154094600891767186112701892852783203125p-119 == -1.3359472503925131636748346863896586000919342041015625p39
; [HW: -1.3359472503925131636748346863896586000919342041015625p39] 

; mpf : - 1512971911683865 39
; mpfd: - 1512971911683865 39 (-7.34445e+011) class: Neg. norm. non-zero
; hwf : - 1512971911683865 39 (-7.34445e+011) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000100110 #b0101011000000000101000111001010110011101111100011001)))
(assert (= y (fp #b0 #b01110001000 #b0001011010110001111000110100001110101011101011000101)))
(assert (= r (fp #b1 #b10000100110 #b0101011000000000101000111001010110011101111100011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
