(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2264011686476188334182779726688750088214874267578125p-192 {- 1019620218757661 -192 (-1.95377e-058)}
; Y = 1.568167073071328854183548173750750720500946044921875p362 {+ 2558797018568222 362 (1.47316e+109)}
; -1.2264011686476188334182779726688750088214874267578125p-192 m 1.568167073071328854183548173750750720500946044921875p362 == -1.2264011686476188334182779726688750088214874267578125p-192
; [HW: -1.2264011686476188334182779726688750088214874267578125p-192] 

; mpf : - 1019620218757661 -192
; mpfd: - 1019620218757661 -192 (-1.95377e-058) class: Neg. norm. non-zero
; hwf : - 1019620218757661 -192 (-1.95377e-058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111111 #b0011100111110101011011010100111100011110001000011101)))
(assert (= y (fp #b0 #b10101101001 #b1001000101110011011001011011010110000001011000011110)))
(assert (= r (fp #b1 #b01100111111 #b0011100111110101011011010100111100011110001000011101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
