(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3418032950293279359499365455121733248233795166015625p758 {- 1539345192128089 758 (-2.03435e+228)}
; Y = -1.896912557316428493692228585132397711277008056640625p-231 {- 4039335058914186 -231 (-5.49691e-070)}
; -1.3418032950293279359499365455121733248233795166015625p758 m -1.896912557316428493692228585132397711277008056640625p-231 == -1.3418032950293279359499365455121733248233795166015625p758
; [HW: -1.3418032950293279359499365455121733248233795166015625p758] 

; mpf : - 1539345192128089 758
; mpfd: - 1539345192128089 758 (-2.03435e+228) class: Neg. norm. non-zero
; hwf : - 1539345192128089 758 (-2.03435e+228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110101 #b0101011110000000011010111011010111010000111001011001)))
(assert (= y (fp #b1 #b01100011000 #b1110010110011100000011111011010100001011101110001010)))
(assert (= r (fp #b1 #b11011110101 #b0101011110000000011010111011010111010000111001011001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
