(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.91283863156704025954013559385202825069427490234375p-360 {- 4111059720974716 -360 (-8.14479e-109)}
; Y = 1.272633193697475295635967995622195303440093994140625p699 {+ 1227830749544778 699 (3.34711e+210)}
; -1.91283863156704025954013559385202825069427490234375p-360 m 1.272633193697475295635967995622195303440093994140625p699 == -1.91283863156704025954013559385202825069427490234375p-360
; [HW: -1.91283863156704025954013559385202825069427490234375p-360] 

; mpf : - 4111059720974716 -360
; mpfd: - 4111059720974716 -360 (-8.14479e-109) class: Neg. norm. non-zero
; hwf : - 4111059720974716 -360 (-8.14479e-109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010111 #b1110100110101111110010101110010100011011000101111100)))
(assert (= y (fp #b0 #b11010111010 #b0100010111001011010010011111101010111100000101001010)))
(assert (= r (fp #b1 #b01010010111 #b1110100110101111110010101110010100011011000101111100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
