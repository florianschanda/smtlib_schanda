(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.014287295834259250426612197770737111568450927734375p826 {+ 64344260195302 826 (4.53876e+248)}
; Y = 1.3109210224199030481173622320056892931461334228515625p-869 {+ 1400263800711929 -869 (3.33051e-262)}
; 1.014287295834259250426612197770737111568450927734375p826 m 1.3109210224199030481173622320056892931461334228515625p-869 == 1.3109210224199030481173622320056892931461334228515625p-869
; [HW: 1.3109210224199030481173622320056892931461334228515625p-869] 

; mpf : + 1400263800711929 -869
; mpfd: + 1400263800711929 -869 (3.33051e-262) class: Pos. norm. non-zero
; hwf : + 1400263800711929 -869 (3.33051e-262) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100111001 #b0000001110101000010101010000110001011011001111100110)))
(assert (= y (fp #b0 #b00010011010 #b0100111110011000100001010010011011101110101011111001)))
(assert (= r (fp #b0 #b00010011010 #b0100111110011000100001010010011011101110101011111001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
