(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.838839390993991518286065911524929106235504150390625p-274 {+ 3777796768704234 -274 (6.05794e-083)}
; Y = 1.0187925463893374722346152339014224708080291748046875p487 {+ 84634104916363 487 (4.07093e+146)}
; 1.838839390993991518286065911524929106235504150390625p-274 m 1.0187925463893374722346152339014224708080291748046875p487 == 1.838839390993991518286065911524929106235504150390625p-274
; [HW: 1.838839390993991518286065911524929106235504150390625p-274] 

; mpf : + 3777796768704234 -274
; mpfd: + 3777796768704234 -274 (6.05794e-083) class: Pos. norm. non-zero
; hwf : + 3777796768704234 -274 (6.05794e-083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011101101 #b1101011010111110001011011010011011101010011011101010)))
(assert (= y (fp #b0 #b10111100110 #b0000010011001111100101101001110000100110100110001011)))
(assert (= r (fp #b0 #b01011101101 #b1101011010111110001011011010011011101010011011101010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
