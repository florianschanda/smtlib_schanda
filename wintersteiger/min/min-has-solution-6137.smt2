(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1620106405928340986832836279063485562801361083984375p291 {+ 729631060603943 291 (4.62316e+087)}
; Y = -1.570206905429852639599630492739379405975341796875p-617 {- 2567983606817968 -617 (-2.88702e-186)}
; 1.1620106405928340986832836279063485562801361083984375p291 m -1.570206905429852639599630492739379405975341796875p-617 == -1.570206905429852639599630492739379405975341796875p-617
; [HW: -1.570206905429852639599630492739379405975341796875p-617] 

; mpf : - 2567983606817968 -617
; mpfd: - 2567983606817968 -617 (-2.88702e-186) class: Neg. norm. non-zero
; hwf : - 2567983606817968 -617 (-2.88702e-186) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100100010 #b0010100101111001100001111000001011110011010000100111)))
(assert (= y (fp #b1 #b00110010110 #b1001000111111001000101000110101011000110010010110000)))
(assert (= r (fp #b1 #b00110010110 #b1001000111111001000101000110101011000110010010110000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
