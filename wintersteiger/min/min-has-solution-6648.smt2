(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8192683165161362968120783989434130489826202392578125p871 {+ 3689656484978525 871 (2.86433e+262)}
; Y = -1.17747417814066945851436685188673436641693115234375p-569 {- 799272642542204 -569 (-6.09374e-172)}
; 1.8192683165161362968120783989434130489826202392578125p871 m -1.17747417814066945851436685188673436641693115234375p-569 == -1.17747417814066945851436685188673436641693115234375p-569
; [HW: -1.17747417814066945851436685188673436641693115234375p-569] 

; mpf : - 799272642542204 -569
; mpfd: - 799272642542204 -569 (-6.09374e-172) class: Neg. norm. non-zero
; hwf : - 799272642542204 -569 (-6.09374e-172) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101100110 #b1101000110111011100100011000001000010101111101011101)))
(assert (= y (fp #b1 #b00111000110 #b0010110101101110111100101001111011111111101001111100)))
(assert (= r (fp #b1 #b00111000110 #b0010110101101110111100101001111011111111101001111100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
