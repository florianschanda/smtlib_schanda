(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7969716728047731013617749340482987463474273681640625p-269 {- 3589241328668417 -269 (-1.8944e-081)}
; Y = 1.9097295123196953436917056023958139121532440185546875p511 {+ 4097057492690923 511 (1.28026e+154)}
; -1.7969716728047731013617749340482987463474273681640625p-269 m 1.9097295123196953436917056023958139121532440185546875p511 == -1.7969716728047731013617749340482987463474273681640625p-269
; [HW: -1.7969716728047731013617749340482987463474273681640625p-269] 

; mpf : - 3589241328668417 -269
; mpfd: - 3589241328668417 -269 (-1.8944e-081) class: Neg. norm. non-zero
; hwf : - 3589241328668417 -269 (-1.8944e-081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011110010 #b1100110000000110010101011110011010001000111100000001)))
(assert (= y (fp #b0 #b10111111110 #b1110100011100100000010001000011110011110011111101011)))
(assert (= r (fp #b1 #b01011110010 #b1100110000000110010101011110011010001000111100000001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
