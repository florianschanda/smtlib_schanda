(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7632914912701398435501687345094978809356689453125p259 {- 3437559275659272 259 (-1.6334e+078)}
; Y = 1.516204610477326131245945362024940550327301025390625p236 {+ 2324778891392618 236 (1.67431e+071)}
; -1.7632914912701398435501687345094978809356689453125p259 m 1.516204610477326131245945362024940550327301025390625p236 == -1.7632914912701398435501687345094978809356689453125p259
; [HW: -1.7632914912701398435501687345094978809356689453125p259] 

; mpf : - 3437559275659272 259
; mpfd: - 3437559275659272 259 (-1.6334e+078) class: Neg. norm. non-zero
; hwf : - 3437559275659272 259 (-1.6334e+078) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100000010 #b1100001101100111000100100011100001010010000000001000)))
(assert (= y (fp #b0 #b10011101011 #b1000010000100101111111000100000000001011011001101010)))
(assert (= r (fp #b1 #b10100000010 #b1100001101100111000100100011100001010010000000001000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
