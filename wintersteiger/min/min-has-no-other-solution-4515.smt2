(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.50616365454041112315053396741859614849090576171875p-432 {+ 2279558445976684 -432 (1.35804e-130)}
; Y = 1.36427372117713563426377731957472860813140869140625p425 {+ 1640542994954212 425 (1.18209e+128)}
; 1.50616365454041112315053396741859614849090576171875p-432 m 1.36427372117713563426377731957472860813140869140625p425 == 1.50616365454041112315053396741859614849090576171875p-432
; [HW: 1.50616365454041112315053396741859614849090576171875p-432] 

; mpf : + 2279558445976684 -432
; mpfd: + 2279558445976684 -432 (1.35804e-130) class: Pos. norm. non-zero
; hwf : + 2279558445976684 -432 (1.35804e-130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001111 #b1000000110010011111100001111011010101100110001101100)))
(assert (= y (fp #b0 #b10110101000 #b0101110101000001000010101110011100111111011111100100)))
(assert (= r (fp #b0 #b01001001111 #b1000000110010011111100001111011010101100110001101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
