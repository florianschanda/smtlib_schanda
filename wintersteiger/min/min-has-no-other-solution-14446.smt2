(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0654174284202932998510959805571474134922027587890625p833 {+ 294613906257169 833 (6.10248e+250)}
; Y = 1.25106401038206360709637010586448013782501220703125p398 {+ 1130691783602804 398 (8.0764e+119)}
; 1.0654174284202932998510959805571474134922027587890625p833 m 1.25106401038206360709637010586448013782501220703125p398 == 1.25106401038206360709637010586448013782501220703125p398
; [HW: 1.25106401038206360709637010586448013782501220703125p398] 

; mpf : + 1130691783602804 398
; mpfd: + 1130691783602804 398 (8.0764e+119) class: Pos. norm. non-zero
; hwf : + 1130691783602804 398 (8.0764e+119) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101000000 #b0001000010111111001100100101001110100111010100010001)))
(assert (= y (fp #b0 #b10110001101 #b0100000001000101101110110010000111001011001001110100)))
(assert (= r (fp #b0 #b10110001101 #b0100000001000101101110110010000111001011001001110100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
