(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0001779393971712561750564418616704642772674560546875p-862 {+ 801367802795 -862 (3.25253e-260)}
; Y = -1.1521850346198838632716388019616715610027313232421875p-323 {- 685380465205475 -323 (-6.7427e-098)}
; 1.0001779393971712561750564418616704642772674560546875p-862 m -1.1521850346198838632716388019616715610027313232421875p-323 == -1.1521850346198838632716388019616715610027313232421875p-323
; [HW: -1.1521850346198838632716388019616715610027313232421875p-323] 

; mpf : - 685380465205475 -323
; mpfd: - 685380465205475 -323 (-6.7427e-098) class: Neg. norm. non-zero
; hwf : - 685380465205475 -323 (-6.7427e-098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010100001 #b0000000000001011101010010101001111100100001110101011)))
(assert (= y (fp #b1 #b01010111100 #b0010011011110101100110010011001010100010000011100011)))
(assert (= r (fp #b1 #b01010111100 #b0010011011110101100110010011001010100010000011100011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
