(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.065746704378413678426795740961097180843353271484375p92 {- 296096833339462 92 (-5.27732e+027)}
; Y = -1.809471513453063895582317854859866201877593994140625p747 {- 3645535606354250 747 (-1.33955e+225)}
; -1.065746704378413678426795740961097180843353271484375p92 m -1.809471513453063895582317854859866201877593994140625p747 == -1.809471513453063895582317854859866201877593994140625p747
; [HW: -1.809471513453063895582317854859866201877593994140625p747] 

; mpf : - 3645535606354250 747
; mpfd: - 3645535606354250 747 (-1.33955e+225) class: Neg. norm. non-zero
; hwf : - 3645535606354250 747 (-1.33955e+225) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011011 #b0001000011010100110001101010100100100000000001000110)))
(assert (= y (fp #b1 #b11011101010 #b1100111100111001100001100110110101010011000101001010)))
(assert (= r (fp #b1 #b11011101010 #b1100111100111001100001100110110101010011000101001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
