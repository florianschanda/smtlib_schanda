(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4821559749723665078136036754585802555084228515625p-201 {- 2171437469220008 -201 (-4.61174e-061)}
; Y = -1.1754076153818591166100304690189659595489501953125p-294 {- 789965671271688 -294 (-3.69292e-089)}
; -1.4821559749723665078136036754585802555084228515625p-201 m -1.1754076153818591166100304690189659595489501953125p-294 == -1.4821559749723665078136036754585802555084228515625p-201
; [HW: -1.4821559749723665078136036754585802555084228515625p-201] 

; mpf : - 2171437469220008 -201
; mpfd: - 2171437469220008 -201 (-4.61174e-061) class: Neg. norm. non-zero
; hwf : - 2171437469220008 -201 (-4.61174e-061) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110110 #b0111101101101110100100101111000000010011110010101000)))
(assert (= y (fp #b1 #b01011011001 #b0010110011100111100000110111001110001000110100001000)))
(assert (= r (fp #b1 #b01100110110 #b0111101101101110100100101111000000010011110010101000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
