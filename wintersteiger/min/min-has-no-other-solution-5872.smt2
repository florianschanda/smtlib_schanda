(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.453697338495920643453018783475272357463836669921875p-364 {- 2043271164589214 -364 (-3.86862e-110)}
; Y = -1.9092394376611558914902389005874283611774444580078125p-615 {- 4094850392641341 -615 (-1.40415e-185)}
; -1.453697338495920643453018783475272357463836669921875p-364 m -1.9092394376611558914902389005874283611774444580078125p-615 == -1.453697338495920643453018783475272357463836669921875p-364
; [HW: -1.453697338495920643453018783475272357463836669921875p-364] 

; mpf : - 2043271164589214 -364
; mpfd: - 2043271164589214 -364 (-3.86862e-110) class: Neg. norm. non-zero
; hwf : - 2043271164589214 -364 (-3.86862e-110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010011 #b0111010000100101100000100011111100011111010010011110)))
(assert (= y (fp #b1 #b00110011000 #b1110100011000011111010100111000011111100111100111101)))
(assert (= r (fp #b1 #b01010010011 #b0111010000100101100000100011111100011111010010011110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
