(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2857170293822710593900637832120992243289947509765625p-993 {+ 1286755107059401 -993 (1.53589e-299)}
; Y = -1.76468837774233211490582107217051088809967041015625p-46 {- 3443850293054916 -46 (-2.50777e-014)}
; 1.2857170293822710593900637832120992243289947509765625p-993 m -1.76468837774233211490582107217051088809967041015625p-46 == -1.76468837774233211490582107217051088809967041015625p-46
; [HW: -1.76468837774233211490582107217051088809967041015625p-46] 

; mpf : - 3443850293054916 -46
; mpfd: - 3443850293054916 -46 (-2.50777e-014) class: Neg. norm. non-zero
; hwf : - 3443850293054916 -46 (-2.50777e-014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000011110 #b0100100100100100110000000101000100011011011011001001)))
(assert (= y (fp #b1 #b01111010001 #b1100001111000010100111100001011000001000110111000100)))
(assert (= r (fp #b1 #b01111010001 #b1100001111000010100111100001011000001000110111000100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
