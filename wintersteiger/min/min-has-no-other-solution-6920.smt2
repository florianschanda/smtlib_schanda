(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0119418273670017782706054276786744594573974609375p-535 {- 53781209280152 -535 (-8.99721e-162)}
; Y = 1.7247797807231102229508223899756558239459991455078125p63 {+ 3264117950390269 63 (1.59083e+019)}
; -1.0119418273670017782706054276786744594573974609375p-535 m 1.7247797807231102229508223899756558239459991455078125p63 == -1.0119418273670017782706054276786744594573974609375p-535
; [HW: -1.0119418273670017782706054276786744594573974609375p-535] 

; mpf : - 53781209280152 -535
; mpfd: - 53781209280152 -535 (-8.99721e-162) class: Neg. norm. non-zero
; hwf : - 53781209280152 -535 (-8.99721e-162) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101000 #b0000001100001110100111101001110111111110111010011000)))
(assert (= y (fp #b0 #b10000111110 #b1011100110001011001010101110111100000001111111111101)))
(assert (= r (fp #b1 #b00111101000 #b0000001100001110100111101001110111111110111010011000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
