(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.721942210415323248895447250106371939182281494140625p7 {+ 3251338669809482 7 (220.409)}
; Y = 1.9961434848733625724293005987419746816158294677734375p-990 {+ 4486231427283223 -990 (1.90764e-298)}
; 1.721942210415323248895447250106371939182281494140625p7 m 1.9961434848733625724293005987419746816158294677734375p-990 == 1.9961434848733625724293005987419746816158294677734375p-990
; [HW: 1.9961434848733625724293005987419746816158294677734375p-990] 

; mpf : + 4486231427283223 -990
; mpfd: + 4486231427283223 -990 (1.90764e-298) class: Pos. norm. non-zero
; hwf : + 4486231427283223 -990 (1.90764e-298) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000000110 #b1011100011010001001101000110011101010101111101001010)))
(assert (= y (fp #b0 #b00000100001 #b1111111100000011010000100110100110100111100100010111)))
(assert (= r (fp #b0 #b00000100001 #b1111111100000011010000100110100110100111100100010111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
