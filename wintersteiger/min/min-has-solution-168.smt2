(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.264330564265629508469146458082832396030426025390625p337 {- 1190439030729322 337 (-3.53972e+101)}
; Y = 1.5449051574087260263468124321661889553070068359375p707 {+ 2454034663858200 707 (1.04018e+213)}
; -1.264330564265629508469146458082832396030426025390625p337 m 1.5449051574087260263468124321661889553070068359375p707 == -1.264330564265629508469146458082832396030426025390625p337
; [HW: -1.264330564265629508469146458082832396030426025390625p337] 

; mpf : - 1190439030729322 337
; mpfd: - 1190439030729322 337 (-3.53972e+101) class: Neg. norm. non-zero
; hwf : - 1190439030729322 337 (-3.53972e+101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010000 #b0100001110101011001010101111100011011010101001101010)))
(assert (= y (fp #b0 #b11011000010 #b1000101101111110111001111000011001111110000000011000)))
(assert (= r (fp #b1 #b10101010000 #b0100001110101011001010101111100011011010101001101010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
