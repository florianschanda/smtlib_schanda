(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.669421244554594618847431775066070258617401123046875p-422 {- 3014805267529966 -422 (-1.54137e-127)}
; Y = 1.2904071492861763914561379351653158664703369140625p429 {+ 1307877529310952 429 (1.78894e+129)}
; -1.669421244554594618847431775066070258617401123046875p-422 m 1.2904071492861763914561379351653158664703369140625p429 == -1.669421244554594618847431775066070258617401123046875p-422
; [HW: -1.669421244554594618847431775066070258617401123046875p-422] 

; mpf : - 3014805267529966 -422
; mpfd: - 3014805267529966 -422 (-1.54137e-127) class: Neg. norm. non-zero
; hwf : - 3014805267529966 -422 (-1.54137e-127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001011001 #b1010101101011111001100001101000010011100000011101110)))
(assert (= y (fp #b0 #b10110101100 #b0100101001011000000111110111100010110101011011101000)))
(assert (= r (fp #b1 #b01001011001 #b1010101101011111001100001101000010011100000011101110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
