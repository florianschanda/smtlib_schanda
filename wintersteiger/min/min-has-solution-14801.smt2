(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4984694883949611909912391638499684631824493408203125p424 {+ 2244907002191109 424 (6.49181e+127)}
; Y = -1.648751826359397210097768038394860923290252685546875p1000 {- 2921718483448110 1000 (-1.76665e+301)}
; 1.4984694883949611909912391638499684631824493408203125p424 m -1.648751826359397210097768038394860923290252685546875p1000 == -1.648751826359397210097768038394860923290252685546875p1000
; [HW: -1.648751826359397210097768038394860923290252685546875p1000] 

; mpf : - 2921718483448110 1000
; mpfd: - 2921718483448110 1000 (-1.76665e+301) class: Neg. norm. non-zero
; hwf : - 2921718483448110 1000 (-1.76665e+301) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110100111 #b0111111110011011101100100100011010110101110100000101)))
(assert (= y (fp #b1 #b11111100111 #b1010011000010100100110011000010101101111000100101110)))
(assert (= r (fp #b1 #b11111100111 #b1010011000010100100110011000010101101111000100101110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
