(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2267355127928614155763398230192251503467559814453125p381 {- 1021125970925589 381 (-6.04198e+114)}
; Y = -1.8302821031848133248587373600457794964313507080078125p-167 {- 3739258170515517 -167 (-9.78383e-051)}
; -1.2267355127928614155763398230192251503467559814453125p381 m -1.8302821031848133248587373600457794964313507080078125p-167 == -1.2267355127928614155763398230192251503467559814453125p381
; [HW: -1.2267355127928614155763398230192251503467559814453125p381] 

; mpf : - 1021125970925589 381
; mpfd: - 1021125970925589 381 (-6.04198e+114) class: Neg. norm. non-zero
; hwf : - 1021125970925589 381 (-6.04198e+114) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101111100 #b0011101000001011010101101010110001001001100000010101)))
(assert (= y (fp #b1 #b01101011000 #b1101010010001101010111100010111110100010000000111101)))
(assert (= r (fp #b1 #b10101111100 #b0011101000001011010101101010110001001001100000010101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
