(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7165006910009632523639311330043710768222808837890625p-515 {- 3226832245002641 -515 (-1.60028e-155)}
; Y = -1.958520745004978635961379040963947772979736328125p-893 {- 4316793670031312 -893 (-2.9658e-269)}
; -1.7165006910009632523639311330043710768222808837890625p-515 m -1.958520745004978635961379040963947772979736328125p-893 == -1.7165006910009632523639311330043710768222808837890625p-515
; [HW: -1.7165006910009632523639311330043710768222808837890625p-515] 

; mpf : - 3226832245002641 -515
; mpfd: - 3226832245002641 -515 (-1.60028e-155) class: Neg. norm. non-zero
; hwf : - 3226832245002641 -515 (-1.60028e-155) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111111100 #b1011011101101100100101101101101101101001000110010001)))
(assert (= y (fp #b1 #b00010000010 #b1111010101100001100111011001010001010101011111010000)))
(assert (= r (fp #b1 #b00111111100 #b1011011101101100100101101101101101101001000110010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
