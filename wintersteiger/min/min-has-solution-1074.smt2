(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5952931451164371612350123541546054184436798095703125p89 {- 2680961986522597 89 (-9.87439e+026)}
; Y = 1.9938574016647485631636982361669652163982391357421875p713 {+ 4475935823796771 713 (8.59174e+214)}
; -1.5952931451164371612350123541546054184436798095703125p89 m 1.9938574016647485631636982361669652163982391357421875p713 == -1.5952931451164371612350123541546054184436798095703125p89
; [HW: -1.5952931451164371612350123541546054184436798095703125p89] 

; mpf : - 2680961986522597 89
; mpfd: - 2680961986522597 89 (-9.87439e+026) class: Neg. norm. non-zero
; hwf : - 2680961986522597 89 (-9.87439e+026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011000 #b1001100001100101001000011010110111001110110111100101)))
(assert (= y (fp #b0 #b11011001000 #b1111111001101101011100000100110100001001101000100011)))
(assert (= r (fp #b1 #b10001011000 #b1001100001100101001000011010110111001110110111100101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
