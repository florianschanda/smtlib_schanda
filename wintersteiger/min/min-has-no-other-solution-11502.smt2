(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3737708283263081465719324114616028964519500732421875p223 {+ 1683314163172323 223 (1.85184e+067)}
; Y = -1.23515978065820331011082089389674365520477294921875p539 {- 1059065500544812 539 (-2.22275e+162)}
; 1.3737708283263081465719324114616028964519500732421875p223 m -1.23515978065820331011082089389674365520477294921875p539 == -1.23515978065820331011082089389674365520477294921875p539
; [HW: -1.23515978065820331011082089389674365520477294921875p539] 

; mpf : - 1059065500544812 539
; mpfd: - 1059065500544812 539 (-2.22275e+162) class: Neg. norm. non-zero
; hwf : - 1059065500544812 539 (-2.22275e+162) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011011110 #b0101111110101111011100011110101111011100001111100011)))
(assert (= y (fp #b1 #b11000011010 #b0011110000110011011011100110111101000010111100101100)))
(assert (= r (fp #b1 #b11000011010 #b0011110000110011011011100110111101000010111100101100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
