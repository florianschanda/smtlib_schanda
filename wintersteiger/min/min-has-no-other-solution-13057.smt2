(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2719280109720159099850889106164686381816864013671875p132 {+ 1224654888885171 132 (6.92503e+039)}
; Y = -1.2206168310640828078561526126577518880367279052734375p-347 {- 993569878171863 -347 (-4.25766e-105)}
; 1.2719280109720159099850889106164686381816864013671875p132 m -1.2206168310640828078561526126577518880367279052734375p-347 == -1.2206168310640828078561526126577518880367279052734375p-347
; [HW: -1.2206168310640828078561526126577518880367279052734375p-347] 

; mpf : - 993569878171863 -347
; mpfd: - 993569878171863 -347 (-4.25766e-105) class: Neg. norm. non-zero
; hwf : - 993569878171863 -347 (-4.25766e-105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000011 #b0100010110011101000100101111100111111101101110110011)))
(assert (= y (fp #b1 #b01010100100 #b0011100001111010010110000011101001011110000011010111)))
(assert (= r (fp #b1 #b01010100100 #b0011100001111010010110000011101001011110000011010111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
