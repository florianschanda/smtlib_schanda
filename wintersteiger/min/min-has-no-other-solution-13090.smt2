(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5409980250577834937075749621726572513580322265625p244 {+ 2436438504058408 244 (4.35633e+073)}
; Y = 1.3453512858506873062225395187851972877979278564453125p-440 {+ 1555323922269077 -440 (4.73846e-133)}
; 1.5409980250577834937075749621726572513580322265625p244 m 1.3453512858506873062225395187851972877979278564453125p-440 == 1.3453512858506873062225395187851972877979278564453125p-440
; [HW: 1.3453512858506873062225395187851972877979278564453125p-440] 

; mpf : + 1555323922269077 -440
; mpfd: + 1555323922269077 -440 (4.73846e-133) class: Pos. norm. non-zero
; hwf : + 1555323922269077 -440 (4.73846e-133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011110011 #b1000101001111110110110001011100011010010111000101000)))
(assert (= y (fp #b0 #b01001000111 #b0101100001101000111100010001111001011100001110010101)))
(assert (= r (fp #b0 #b01001000111 #b0101100001101000111100010001111001011100001110010101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
