(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8006423739173709197558537198347039520740509033203125p-480 {- 3605772696831301 -480 (-5.76806e-145)}
; Y = 1.1324085559995495930962761121918447315692901611328125p-682 {+ 596315123460237 -682 (5.64347e-206)}
; -1.8006423739173709197558537198347039520740509033203125p-480 m 1.1324085559995495930962761121918447315692901611328125p-682 == -1.8006423739173709197558537198347039520740509033203125p-480
; [HW: -1.8006423739173709197558537198347039520740509033203125p-480] 

; mpf : - 3605772696831301 -480
; mpfd: - 3605772696831301 -480 (-5.76806e-145) class: Neg. norm. non-zero
; hwf : - 3605772696831301 -480 (-5.76806e-145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000011111 #b1100110011110110111001100000101111000100010101000101)))
(assert (= y (fp #b0 #b00101010101 #b0010000111100101100001101111000110111010100010001101)))
(assert (= r (fp #b1 #b01000011111 #b1100110011110110111001100000101111000100010101000101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
