(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1707393094735898397829032546724192798137664794921875p-5 {- 768941490522755 -5 (-0.0365856)}
; Y = -1.7143912534422327542671382616390474140644073486328125p322 {- 3217332182799181 322 (-1.46477e+097)}
; -1.1707393094735898397829032546724192798137664794921875p-5 m -1.7143912534422327542671382616390474140644073486328125p322 == -1.7143912534422327542671382616390474140644073486328125p322
; [HW: -1.7143912534422327542671382616390474140644073486328125p322] 

; mpf : - 3217332182799181 322
; mpfd: - 3217332182799181 322 (-1.46477e+097) class: Neg. norm. non-zero
; hwf : - 3217332182799181 322 (-1.46477e+097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111111010 #b0010101110110101100100100100011001010100101010000011)))
(assert (= y (fp #b1 #b10101000001 #b1011011011100010010110000101111000010101001101001101)))
(assert (= r (fp #b1 #b10101000001 #b1011011011100010010110000101111000010101001101001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
