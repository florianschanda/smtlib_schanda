(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.884846544637767795649097024579532444477081298828125p-464 {- 3984994568710722 -464 (-3.95693e-140)}
; Y = -1.0213268232712824357122372020967304706573486328125p850 {- 96047473337544 850 (-7.66763e+255)}
; -1.884846544637767795649097024579532444477081298828125p-464 m -1.0213268232712824357122372020967304706573486328125p850 == -1.0213268232712824357122372020967304706573486328125p850
; [HW: -1.0213268232712824357122372020967304706573486328125p850] 

; mpf : - 96047473337544 850
; mpfd: - 96047473337544 850 (-7.66763e+255) class: Neg. norm. non-zero
; hwf : - 96047473337544 850 (-7.66763e+255) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101111 #b1110001010000101010011011001101100110010101001000010)))
(assert (= y (fp #b1 #b11101010001 #b0000010101110101101011001011100001111010010011001000)))
(assert (= r (fp #b1 #b11101010001 #b0000010101110101101011001011100001111010010011001000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
