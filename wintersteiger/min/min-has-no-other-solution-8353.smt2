(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5596307955531847344587959014461375772953033447265625p-457 {- 2520353042318377 -457 (-4.19096e-138)}
; Y = -1.631895906074691371401286232867278158664703369140625p585 {- 2845806167134922 585 (-2.06652e+176)}
; -1.5596307955531847344587959014461375772953033447265625p-457 m -1.631895906074691371401286232867278158664703369140625p585 == -1.631895906074691371401286232867278158664703369140625p585
; [HW: -1.631895906074691371401286232867278158664703369140625p585] 

; mpf : - 2845806167134922 585
; mpfd: - 2845806167134922 585 (-2.06652e+176) class: Neg. norm. non-zero
; hwf : - 2845806167134922 585 (-2.06652e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110110 #b1000111101000011111101101011110010111100010000101001)))
(assert (= y (fp #b1 #b11001001000 #b1010000111000011111011100001101100010001001011001010)))
(assert (= r (fp #b1 #b11001001000 #b1010000111000011111011100001101100010001001011001010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
