(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.53039072810957410553100999095477163791656494140625p836 {+ 2388667485475044 836 (7.01259e+251)}
; Y = 1.6465338160270637235527146913227625191211700439453125p-906 {+ 2911729452941909 -906 (3.04365e-273)}
; 1.53039072810957410553100999095477163791656494140625p836 m 1.6465338160270637235527146913227625191211700439453125p-906 == 1.6465338160270637235527146913227625191211700439453125p-906
; [HW: 1.6465338160270637235527146913227625191211700439453125p-906] 

; mpf : + 2911729452941909 -906
; mpfd: + 2911729452941909 -906 (3.04365e-273) class: Pos. norm. non-zero
; hwf : + 2911729452941909 -906 (3.04365e-273) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101000011 #b1000011111000111101011111100111101010101000011100100)))
(assert (= y (fp #b0 #b00001110101 #b1010010110000011001111010111101110011000001001010101)))
(assert (= r (fp #b0 #b00001110101 #b1010010110000011001111010111101110011000001001010101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
