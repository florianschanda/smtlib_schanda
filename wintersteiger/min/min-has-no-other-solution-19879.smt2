(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.534125027086691961386577531811781227588653564453125p229 {+ 2405485272956882 229 (1.32352e+069)}
; Y = 1.8624732658823981434892402830882929265499114990234375p991 {+ 3884234278844983 991 (3.89777e+298)}
; 1.534125027086691961386577531811781227588653564453125p229 m 1.8624732658823981434892402830882929265499114990234375p991 == 1.534125027086691961386577531811781227588653564453125p229
; [HW: 1.534125027086691961386577531811781227588653564453125p229] 

; mpf : + 2405485272956882 229
; mpfd: + 2405485272956882 229 (1.32352e+069) class: Pos. norm. non-zero
; hwf : + 2405485272956882 229 (1.32352e+069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100100 #b1000100010111100011010101111001101001111111111010010)))
(assert (= y (fp #b0 #b11111011110 #b1101110011001011000011000100011010100011101000110111)))
(assert (= r (fp #b0 #b10011100100 #b1000100010111100011010101111001101001111111111010010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
