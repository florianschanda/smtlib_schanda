(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4022600505159614758809993873001076281070709228515625p-602 {+ 1811618213609721 -602 (8.44834e-182)}
; Y = 1.23058953859886432979919845820404589176177978515625p179 {+ 1038482960109380 179 (9.42936e+053)}
; 1.4022600505159614758809993873001076281070709228515625p-602 m 1.23058953859886432979919845820404589176177978515625p179 == 1.4022600505159614758809993873001076281070709228515625p-602
; [HW: 1.4022600505159614758809993873001076281070709228515625p-602] 

; mpf : + 1811618213609721 -602
; mpfd: + 1811618213609721 -602 (8.44834e-182) class: Pos. norm. non-zero
; hwf : + 1811618213609721 -602 (8.44834e-182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110100101 #b0110011011111010100000111100000101110100000011111001)))
(assert (= y (fp #b0 #b10010110010 #b0011101100000111111010100111111100010100111101000100)))
(assert (= r (fp #b0 #b00110100101 #b0110011011111010100000111100000101110100000011111001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
