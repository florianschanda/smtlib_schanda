(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2826108457024936182477858892525546252727508544921875p85 {- 1272766099396611 85 (-4.96186e+025)}
; Y = 1.3392738841495874790865627801395021378993988037109375p-703 {+ 1527953738232623 -703 (3.1826e-212)}
; -1.2826108457024936182477858892525546252727508544921875p85 m 1.3392738841495874790865627801395021378993988037109375p-703 == -1.2826108457024936182477858892525546252727508544921875p85
; [HW: -1.2826108457024936182477858892525546252727508544921875p85] 

; mpf : - 1272766099396611 85
; mpfd: - 1272766099396611 85 (-4.96186e+025) class: Neg. norm. non-zero
; hwf : - 1272766099396611 85 (-4.96186e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010100 #b0100100001011001001011110011001111001001100000000011)))
(assert (= y (fp #b0 #b00101000000 #b0101011011011010101001110011110011001111001100101111)))
(assert (= r (fp #b1 #b10001010100 #b0100100001011001001011110011001111001001100000000011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
