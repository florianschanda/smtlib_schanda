(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.2474264648875299510422109960927627980709075927734375p911 {- 1114309735069079 911 (-2.15944e+274)}
; Y = 1.0426502397134982391690982694854028522968292236328125p-438 {+ 192079603680973 -438 (1.46893e-132)}
; -1.2474264648875299510422109960927627980709075927734375p911 m 1.0426502397134982391690982694854028522968292236328125p-438 == -1.2474264648875299510422109960927627980709075927734375p911
; [HW: -1.2474264648875299510422109960927627980709075927734375p911] 

; mpf : - 1114309735069079 911
; mpfd: - 1114309735069079 911 (-2.15944e+274) class: Neg. norm. non-zero
; hwf : - 1114309735069079 911 (-2.15944e+274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110001110 #b0011111101010111010101110011111011011011010110010111)))
(assert (= y (fp #b0 #b01001001001 #b0000101011101011001000000100100010111100011011001101)))
(assert (= r (fp #b1 #b11110001110 #b0011111101010111010101110011111011011011010110010111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
