(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8719137974276642832904826718731783330440521240234375p855 {+ 3926750653194423 855 (4.4971e+257)}
; Y = 1.225268842032345428805228948476724326610565185546875p22 {+ 1014520673035054 22 (5.13915e+006)}
; 1.8719137974276642832904826718731783330440521240234375p855 m 1.225268842032345428805228948476724326610565185546875p22 == 1.225268842032345428805228948476724326610565185546875p22
; [HW: 1.225268842032345428805228948476724326610565185546875p22] 

; mpf : + 1014520673035054 22
; mpfd: + 1014520673035054 22 (5.13915e+006) class: Pos. norm. non-zero
; hwf : + 1014520673035054 22 (5.13915e+006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010110 #b1101111100110101101111100001110011100010000010110111)))
(assert (= y (fp #b0 #b10000010101 #b0011100110101011001110000000010101010110001100101110)))
(assert (= r (fp #b0 #b10000010101 #b0011100110101011001110000000010101010110001100101110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
