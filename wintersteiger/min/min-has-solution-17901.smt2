(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.285217524804583622000109244254417717456817626953125p625 {- 1284505538429458 625 (-1.78947e+188)}
; Y = -1.9142741075486366941760252302628941833972930908203125p-360 {- 4117524530070533 -360 (-8.1509e-109)}
; -1.285217524804583622000109244254417717456817626953125p625 m -1.9142741075486366941760252302628941833972930908203125p-360 == -1.285217524804583622000109244254417717456817626953125p625
; [HW: -1.285217524804583622000109244254417717456817626953125p625] 

; mpf : - 1284505538429458 625
; mpfd: - 1284505538429458 625 (-1.78947e+188) class: Neg. norm. non-zero
; hwf : - 1284505538429458 625 (-1.78947e+188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110000 #b0100100100000100000001000000010101001000001000010010)))
(assert (= y (fp #b1 #b01010010111 #b1110101000001101110111100010111110000000010000000101)))
(assert (= r (fp #b1 #b11001110000 #b0100100100000100000001000000010101001000001000010010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
