(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.726061903213452541905326143023557960987091064453125p947 {+ 3269892116760018 947 (2.05335e+285)}
; Y = 1.4012060590002572979528849828056991100311279296875p-859 {+ 1806871457812344 -859 (3.64532e-259)}
; 1.726061903213452541905326143023557960987091064453125p947 m 1.4012060590002572979528849828056991100311279296875p-859 == 1.4012060590002572979528849828056991100311279296875p-859
; [HW: 1.4012060590002572979528849828056991100311279296875p-859] 

; mpf : + 1806871457812344 -859
; mpfd: + 1806871457812344 -859 (3.64532e-259) class: Pos. norm. non-zero
; hwf : + 1806871457812344 -859 (3.64532e-259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110010 #b1011100111011111001100010110000100101100010111010010)))
(assert (= y (fp #b0 #b00010100100 #b0110011010110101011100001011011001011100111101111000)))
(assert (= r (fp #b0 #b00010100100 #b0110011010110101011100001011011001011100111101111000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
