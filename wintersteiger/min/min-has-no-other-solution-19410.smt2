(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.70032301571833688313972743344493210315704345703125p32 {+ 3153974472628084 32 (7.30283e+009)}
; Y = -1.8229740711093300742362544042407535016536712646484375p970 {- 3706345719983559 970 (-1.81918e+292)}
; 1.70032301571833688313972743344493210315704345703125p32 m -1.8229740711093300742362544042407535016536712646484375p970 == -1.8229740711093300742362544042407535016536712646484375p970
; [HW: -1.8229740711093300742362544042407535016536712646484375p970] 

; mpf : - 3706345719983559 970
; mpfd: - 3706345719983559 970 (-1.81918e+292) class: Neg. norm. non-zero
; hwf : - 3706345719983559 970 (-1.81918e+292) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011111 #b1011001101001000010111101000000100100101011101110100)))
(assert (= y (fp #b1 #b11111001001 #b1101001010101110011011011100000011011110110111000111)))
(assert (= r (fp #b1 #b11111001001 #b1101001010101110011011011100000011011110110111000111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
