(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2770940039692624257128272802219726145267486572265625p-570 {+ 1247920453022569 -570 (3.30465e-172)}
; Y = 1.01465785989287926582846921519376337528228759765625p-475 {+ 66013132351620 -475 (1.04009e-143)}
; 1.2770940039692624257128272802219726145267486572265625p-570 m 1.01465785989287926582846921519376337528228759765625p-475 == 1.2770940039692624257128272802219726145267486572265625p-570
; [HW: 1.2770940039692624257128272802219726145267486572265625p-570] 

; mpf : + 1247920453022569 -570
; mpfd: + 1247920453022569 -570 (3.30465e-172) class: Pos. norm. non-zero
; hwf : + 1247920453022569 -570 (3.30465e-172) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111000101 #b0100011011101111101000011111010011110111001101101001)))
(assert (= y (fp #b0 #b01000100100 #b0000001111000000100111100001010011011110100010000100)))
(assert (= r (fp #b0 #b00111000101 #b0100011011101111101000011111010011110111001101101001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
