(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.940426996940782800038505229167640209197998046875p-510 {- 4235306672991664 -510 (-5.78895e-154)}
; Y = 1.2973540148852513720356682824785821139812469482421875p-503 {+ 1339163430634339 -503 (4.95417e-152)}
; -1.940426996940782800038505229167640209197998046875p-510 m 1.2973540148852513720356682824785821139812469482421875p-503 == -1.940426996940782800038505229167640209197998046875p-510
; [HW: -1.940426996940782800038505229167640209197998046875p-510] 

; mpf : - 4235306672991664 -510
; mpfd: - 4235306672991664 -510 (-5.78895e-154) class: Neg. norm. non-zero
; hwf : - 4235306672991664 -510 (-5.78895e-154) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000001 #b1111000010111111110100101101110000100010110110110000)))
(assert (= y (fp #b0 #b01000001000 #b0100110000011111011001001000100101000100001101100011)))
(assert (= r (fp #b1 #b01000000001 #b1111000010111111110100101101110000100010110110110000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
