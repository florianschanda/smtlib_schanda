(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.067240952346883542389832655317150056362152099609375p-111 {+ 302826327933462 -111 (4.11086e-034)}
; Y = 1.6849751578540497209957038649008609354496002197265625p190 {+ 3084853865669545 190 (2.64419e+057)}
; 1.067240952346883542389832655317150056362152099609375p-111 m 1.6849751578540497209957038649008609354496002197265625p190 == 1.067240952346883542389832655317150056362152099609375p-111
; [HW: 1.067240952346883542389832655317150056362152099609375p-111] 

; mpf : + 302826327933462 -111
; mpfd: + 302826327933462 -111 (4.11086e-034) class: Pos. norm. non-zero
; hwf : + 302826327933462 -111 (4.11086e-034) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010000 #b0001000100110110101100111111101101001000001000010110)))
(assert (= y (fp #b0 #b10010111101 #b1010111101011010100010000010110110001110001110101001)))
(assert (= r (fp #b0 #b01110010000 #b0001000100110110101100111111101101001000001000010110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
