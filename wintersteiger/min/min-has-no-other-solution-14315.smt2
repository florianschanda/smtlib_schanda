(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3490590570231082434560221372521482408046722412109375p-669 {+ 1572022239139567 -669 (5.50762e-202)}
; Y = 1.7008196716390997504930737704853527247905731201171875p-661 {+ 3156211212047763 -661 (1.77759e-199)}
; 1.3490590570231082434560221372521482408046722412109375p-669 m 1.7008196716390997504930737704853527247905731201171875p-661 == 1.3490590570231082434560221372521482408046722412109375p-669
; [HW: 1.3490590570231082434560221372521482408046722412109375p-669] 

; mpf : + 1572022239139567 -669
; mpfd: + 1572022239139567 -669 (5.50762e-202) class: Pos. norm. non-zero
; hwf : + 1572022239139567 -669 (5.50762e-202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100010 #b0101100101011011111011110011001001001001011011101111)))
(assert (= y (fp #b0 #b00101101010 #b1011001101101000111010110000001000010101010110010011)))
(assert (= r (fp #b0 #b00101100010 #b0101100101011011111011110011001001001001011011101111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
