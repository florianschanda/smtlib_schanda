(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8430838056918708023346198388026095926761627197265625p-925 {- 3796911913156009 -925 (-6.49829e-279)}
; Y = 1.5274955455327832165579593493021093308925628662109375p-790 {+ 2375628742301039 -790 (2.34576e-238)}
; -1.8430838056918708023346198388026095926761627197265625p-925 m 1.5274955455327832165579593493021093308925628662109375p-790 == -1.8430838056918708023346198388026095926761627197265625p-925
; [HW: -1.8430838056918708023346198388026095926761627197265625p-925] 

; mpf : - 3796911913156009 -925
; mpfd: - 3796911913156009 -925 (-6.49829e-279) class: Neg. norm. non-zero
; hwf : - 3796911913156009 -925 (-6.49829e-279) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001100010 #b1101011111010100010101110001110100111011110110101001)))
(assert (= y (fp #b0 #b00011101001 #b1000011100001001111100101011010011011001010101101111)))
(assert (= r (fp #b1 #b00001100010 #b1101011111010100010101110001110100111011110110101001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
