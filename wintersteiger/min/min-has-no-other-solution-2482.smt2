(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.48249223357249970689508700161240994930267333984375p-290 {+ 2172951843326268 -290 (7.45236e-088)}
; Y = -1.4564851627517498844355259279836900532245635986328125p-807 {- 2055826408868941 -807 (-1.70647e-243)}
; 1.48249223357249970689508700161240994930267333984375p-290 m -1.4564851627517498844355259279836900532245635986328125p-807 == -1.4564851627517498844355259279836900532245635986328125p-807
; [HW: -1.4564851627517498844355259279836900532245635986328125p-807] 

; mpf : - 2055826408868941 -807
; mpfd: - 2055826408868941 -807 (-1.70647e-243) class: Neg. norm. non-zero
; hwf : - 2055826408868941 -807 (-1.70647e-243) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011101 #b0111101110000100100111000110101111000100100100111100)))
(assert (= y (fp #b1 #b00011011000 #b0111010011011100001101100010110100100000110001001101)))
(assert (= r (fp #b1 #b00011011000 #b0111010011011100001101100010110100100000110001001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
