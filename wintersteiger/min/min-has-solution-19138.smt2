(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.278591040755967522812852621427737176418304443359375p-149 {- 1254662507337334 -149 (-1.79169e-045)}
; Y = 1.890880780699191188176655487040989100933074951171875p-522 {+ 4012170351988414 -522 (1.37723e-157)}
; -1.278591040755967522812852621427737176418304443359375p-149 m 1.890880780699191188176655487040989100933074951171875p-522 == -1.278591040755967522812852621427737176418304443359375p-149
; [HW: -1.278591040755967522812852621427737176418304443359375p-149] 

; mpf : - 1254662507337334 -149
; mpfd: - 1254662507337334 -149 (-1.79169e-045) class: Neg. norm. non-zero
; hwf : - 1254662507337334 -149 (-1.79169e-045) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101010 #b0100011101010001101111100001000100000001011001110110)))
(assert (= y (fp #b0 #b00111110101 #b1110010000010000110000110100100110111100111010111110)))
(assert (= r (fp #b1 #b01101101010 #b0100011101010001101111100001000100000001011001110110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
