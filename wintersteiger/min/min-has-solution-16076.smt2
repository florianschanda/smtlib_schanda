(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8734910247198113264488483764580450952053070068359375p-201 {+ 3933853853439615 -201 (5.82938e-061)}
; Y = -1.1223904974533673861714078157092444598674774169921875p-552 {- 551197798724675 -552 (-7.61354e-167)}
; 1.8734910247198113264488483764580450952053070068359375p-201 m -1.1223904974533673861714078157092444598674774169921875p-552 == -1.1223904974533673861714078157092444598674774169921875p-552
; [HW: -1.1223904974533673861714078157092444598674774169921875p-552] 

; mpf : - 551197798724675 -552
; mpfd: - 551197798724675 -552 (-7.61354e-167) class: Neg. norm. non-zero
; hwf : - 551197798724675 -552 (-7.61354e-167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110110 #b1101111110011101000110111001100010000101011001111111)))
(assert (= y (fp #b1 #b00111010111 #b0001111101010100111110111100111111100111010001000011)))
(assert (= r (fp #b1 #b00111010111 #b0001111101010100111110111100111111100111010001000011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
