(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.887440604265453014676268139737658202648162841796875p951 {- 3996677174683342 951 (-3.59252e+286)}
; Y = 1.9405152672635654909072400187142193317413330078125p-330 {+ 4235704207184456 -330 (8.87194e-100)}
; -1.887440604265453014676268139737658202648162841796875p951 m 1.9405152672635654909072400187142193317413330078125p-330 == -1.887440604265453014676268139737658202648162841796875p951
; [HW: -1.887440604265453014676268139737658202648162841796875p951] 

; mpf : - 3996677174683342 951
; mpfd: - 3996677174683342 951 (-3.59252e+286) class: Neg. norm. non-zero
; hwf : - 3996677174683342 951 (-3.59252e+286) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110110110 #b1110001100101111010011101011010001110110011011001110)))
(assert (= y (fp #b0 #b01010110101 #b1111000011000101100110111100101001001001001001001000)))
(assert (= r (fp #b1 #b11110110110 #b1110001100101111010011101011010001110110011011001110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
