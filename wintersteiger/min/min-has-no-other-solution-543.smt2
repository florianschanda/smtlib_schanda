(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0495609345182066451940272600040771067142486572265625p-888 {+ 223202606228329 -888 (5.08594e-268)}
; Y = -1.2389296020965512301614808166050352156162261962890625p-940 {- 1076043266969809 -940 (-1.33306e-283)}
; 1.0495609345182066451940272600040771067142486572265625p-888 m -1.2389296020965512301614808166050352156162261962890625p-940 == -1.2389296020965512301614808166050352156162261962890625p-940
; [HW: -1.2389296020965512301614808166050352156162261962890625p-940] 

; mpf : - 1076043266969809 -940
; mpfd: - 1076043266969809 -940 (-1.33306e-283) class: Neg. norm. non-zero
; hwf : - 1076043266969809 -940 (-1.33306e-283) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000111 #b0000110010110000000001101000000011101010001101101001)))
(assert (= y (fp #b1 #b00001010011 #b0011110100101010011111011000101100001101000011010001)))
(assert (= r (fp #b1 #b00001010011 #b0011110100101010011111011000101100001101000011010001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
