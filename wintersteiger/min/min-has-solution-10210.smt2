(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0906540700623856832152114293421618640422821044921875p297 {+ 408269636152579 297 (2.77713e+089)}
; Y = -1.6834076972990796861040507792495191097259521484375p-728 {- 3077794650898264 -728 (-1.19221e-219)}
; 1.0906540700623856832152114293421618640422821044921875p297 m -1.6834076972990796861040507792495191097259521484375p-728 == -1.6834076972990796861040507792495191097259521484375p-728
; [HW: -1.6834076972990796861040507792495191097259521484375p-728] 

; mpf : - 3077794650898264 -728
; mpfd: - 3077794650898264 -728 (-1.19221e-219) class: Neg. norm. non-zero
; hwf : - 3077794650898264 -728 (-1.19221e-219) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101000 #b0001011100110101000110101110101000101010110100000011)))
(assert (= y (fp #b1 #b00100100111 #b1010111011110011110011101000110110111011111101011000)))
(assert (= r (fp #b1 #b00100100111 #b1010111011110011110011101000110110111011111101011000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
