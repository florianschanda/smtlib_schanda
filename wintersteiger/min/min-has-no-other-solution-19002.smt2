(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3218852756458734365452301062759943306446075439453125p-434 {- 1449642407454805 -434 (-2.97972e-131)}
; Y = -1.1617142298657954224694321965216659009456634521484375p-392 {- 728296145364103 -392 (-1.1517e-118)}
; -1.3218852756458734365452301062759943306446075439453125p-434 m -1.1617142298657954224694321965216659009456634521484375p-392 == -1.1617142298657954224694321965216659009456634521484375p-392
; [HW: -1.1617142298657954224694321965216659009456634521484375p-392] 

; mpf : - 728296145364103 -392
; mpfd: - 728296145364103 -392 (-1.1517e-118) class: Neg. norm. non-zero
; hwf : - 728296145364103 -392 (-1.1517e-118) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001101 #b0101001001100111000100101100101111110110100001010101)))
(assert (= y (fp #b1 #b01001110111 #b0010100101100110000110101001000010010010010010000111)))
(assert (= r (fp #b1 #b01001110111 #b0010100101100110000110101001000010010010010010000111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
