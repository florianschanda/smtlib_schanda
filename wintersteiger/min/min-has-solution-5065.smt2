(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8790633603296857945252895660814829170703887939453125p-367 {+ 3958949422015829 -367 (6.25076e-111)}
; Y = -1.492926410915558665948310590465553104877471923828125p-198 {- 2219943200520386 -198 (-3.7162e-060)}
; 1.8790633603296857945252895660814829170703887939453125p-367 m -1.492926410915558665948310590465553104877471923828125p-198 == -1.492926410915558665948310590465553104877471923828125p-198
; [HW: -1.492926410915558665948310590465553104877471923828125p-198] 

; mpf : - 2219943200520386 -198
; mpfd: - 2219943200520386 -198 (-3.7162e-060) class: Neg. norm. non-zero
; hwf : - 2219943200520386 -198 (-3.7162e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010000 #b1110000100001010010010111101111110111010010101010101)))
(assert (= y (fp #b1 #b01100111001 #b0111111000110000011011001101111000110111100011000010)))
(assert (= r (fp #b1 #b01100111001 #b0111111000110000011011001101111000110111100011000010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
