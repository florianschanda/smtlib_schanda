(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.88139116635791214804385163006372749805450439453125p-65 {+ 3969432928377140 -65 (5.09952e-020)}
; Y = -1.9674783095561643175841481934185139834880828857421875p-556 {- 4357134954406179 -556 (-8.34127e-168)}
; 1.88139116635791214804385163006372749805450439453125p-65 m -1.9674783095561643175841481934185139834880828857421875p-556 == -1.9674783095561643175841481934185139834880828857421875p-556
; [HW: -1.9674783095561643175841481934185139834880828857421875p-556] 

; mpf : - 4357134954406179 -556
; mpfd: - 4357134954406179 -556 (-8.34127e-168) class: Neg. norm. non-zero
; hwf : - 4357134954406179 -556 (-8.34127e-168) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111110 #b1110000110100010110110011111101001111101100100110100)))
(assert (= y (fp #b1 #b00111010011 #b1111011110101100101010001001001100100010000100100011)))
(assert (= r (fp #b1 #b00111010011 #b1111011110101100101010001001001100100010000100100011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
