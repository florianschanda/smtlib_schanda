(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.28316416990643489270951249636709690093994140625p814 {+ 1275258050075296 814 (1.40184e+245)}
; Y = -1.0242070995235905694897837747703306376934051513671875p156 {- 109019084394163 156 (-9.3555e+046)}
; 1.28316416990643489270951249636709690093994140625p814 m -1.0242070995235905694897837747703306376934051513671875p156 == -1.0242070995235905694897837747703306376934051513671875p156
; [HW: -1.0242070995235905694897837747703306376934051513671875p156] 

; mpf : - 109019084394163 156
; mpfd: - 109019084394163 156 (-9.3555e+046) class: Neg. norm. non-zero
; hwf : - 109019084394163 156 (-9.3555e+046) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101101 #b0100100001111101011100100111000100100101101010100000)))
(assert (= y (fp #b1 #b10010011011 #b0000011000110010011011111011110011001000111010110011)))
(assert (= r (fp #b1 #b10010011011 #b0000011000110010011011111011110011001000111010110011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
