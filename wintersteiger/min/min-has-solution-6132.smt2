(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5044379680607935512171025038696825504302978515625p610 {- 2271786644990120 610 (-6.39251e+183)}
; Y = -1.5433480283820009137940587606863118708133697509765625p-570 {- 2447021978153673 -570 (-3.99362e-172)}
; -1.5044379680607935512171025038696825504302978515625p610 m -1.5433480283820009137940587606863118708133697509765625p-570 == -1.5044379680607935512171025038696825504302978515625p610
; [HW: -1.5044379680607935512171025038696825504302978515625p610] 

; mpf : - 2271786644990120 610
; mpfd: - 2271786644990120 610 (-6.39251e+183) class: Neg. norm. non-zero
; hwf : - 2271786644990120 610 (-6.39251e+183) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001100001 #b1000000100100010110110001011111110101110100010101000)))
(assert (= y (fp #b1 #b00111000101 #b1000101100011000110110110011110000111111001011001001)))
(assert (= r (fp #b1 #b11001100001 #b1000000100100010110110001011111110101110100010101000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
