(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7010155443961816335018966128700412809848785400390625p-411 {+ 3157093344523569 -411 (3.21647e-124)}
; Y = -1.9368609399996048470171672306605614721775054931640625p616 {- 4219246580280193 616 (-5.26715e+185)}
; 1.7010155443961816335018966128700412809848785400390625p-411 m -1.9368609399996048470171672306605614721775054931640625p616 == -1.9368609399996048470171672306605614721775054931640625p616
; [HW: -1.9368609399996048470171672306605614721775054931640625p616] 

; mpf : - 4219246580280193 616
; mpfd: - 4219246580280193 616 (-5.26715e+185) class: Neg. norm. non-zero
; hwf : - 4219246580280193 616 (-5.26715e+185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100100 #b1011001101110101110000010011010100101011010100110001)))
(assert (= y (fp #b1 #b11001100111 #b1110111111010110000111100101101000110010101110000001)))
(assert (= r (fp #b1 #b11001100111 #b1110111111010110000111100101101000110010101110000001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
