(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3188726566464021860980437850230373442173004150390625p884 {- 1436074777651377 884 (-1.70106e+266)}
; Y = -1.5248164905887933162631497907568700611591339111328125p793 {- 2363563351453581 793 (-7.94336e+238)}
; -1.3188726566464021860980437850230373442173004150390625p884 m -1.5248164905887933162631497907568700611591339111328125p793 == -1.3188726566464021860980437850230373442173004150390625p884
; [HW: -1.3188726566464021860980437850230373442173004150390625p884] 

; mpf : - 1436074777651377 884
; mpfd: - 1436074777651377 884 (-1.70106e+266) class: Neg. norm. non-zero
; hwf : - 1436074777651377 884 (-1.70106e+266) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110011 #b0101000110100001101000110110111111100010100010110001)))
(assert (= y (fp #b1 #b11100011000 #b1000011001011010010111111001111101111010111110001101)))
(assert (= r (fp #b1 #b11101110011 #b0101000110100001101000110110111111100010100010110001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
