(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5511018330882568871942339683300815522670745849609375p-288 {+ 2481942010139471 -288 (3.1189e-087)}
; Y = 0.58034900488659335593411014997400343418121337890625p-1022 {+ 2613659562152100 -1023 (1.29132e-308)}
; 1.5511018330882568871942339683300815522670745849609375p-288 m 0.58034900488659335593411014997400343418121337890625p-1022 == 0.58034900488659335593411014997400343418121337890625p-1022
; [HW: 0.58034900488659335593411014997400343418121337890625p-1022] 

; mpf : + 2613659562152100 -1023
; mpfd: + 2613659562152100 -1023 (1.29132e-308) class: Pos. denorm.
; hwf : + 2613659562152100 -1023 (1.29132e-308) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011111 #b1000110100010101000000100111110111100001001101001111)))
(assert (= y (fp #b0 #b00000000000 #b1001010010010001110000001001110001000001000010100100)))
(assert (= r (fp #b0 #b00000000000 #b1001010010010001110000001001110001000001000010100100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
