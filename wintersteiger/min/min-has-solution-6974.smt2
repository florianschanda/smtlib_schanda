(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.23242062494041437759051405009813606739044189453125p371 {- 1046729439874868 371 (-5.92772e+111)}
; Y = -1.5130371472354287032402453405666165053844451904296875p984 {- 2310513905116699 984 (-2.4738e+296)}
; -1.23242062494041437759051405009813606739044189453125p371 m -1.5130371472354287032402453405666165053844451904296875p984 == -1.5130371472354287032402453405666165053844451904296875p984
; [HW: -1.5130371472354287032402453405666165053844451904296875p984] 

; mpf : - 2310513905116699 984
; mpfd: - 2310513905116699 984 (-2.4738e+296) class: Neg. norm. non-zero
; hwf : - 2310513905116699 984 (-2.4738e+296) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101110010 #b0011101101111111111010110000011100001000111100110100)))
(assert (= y (fp #b1 #b11111010111 #b1000001101010110011001110000100100000010011000011011)))
(assert (= r (fp #b1 #b11111010111 #b1000001101010110011001110000100100000010011000011011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
