(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1692169960575891085596822449588216841220855712890625p-50 {- 762085600389713 -50 (-1.03847e-015)}
; Y = 1.9067679356379423349920898544951342046260833740234375p-601 {+ 4083719737050551 -601 (2.29758e-181)}
; -1.1692169960575891085596822449588216841220855712890625p-50 m 1.9067679356379423349920898544951342046260833740234375p-601 == -1.1692169960575891085596822449588216841220855712890625p-50
; [HW: -1.1692169960575891085596822449588216841220855712890625p-50] 

; mpf : - 762085600389713 -50
; mpfd: - 762085600389713 -50 (-1.03847e-015) class: Neg. norm. non-zero
; hwf : - 762085600389713 -50 (-1.03847e-015) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111001101 #b0010101101010001110011100001011111111110101001010001)))
(assert (= y (fp #b0 #b00110100110 #b1110100000100001111100011000010010100000010110110111)))
(assert (= r (fp #b1 #b01111001101 #b0010101101010001110011100001011111111110101001010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
