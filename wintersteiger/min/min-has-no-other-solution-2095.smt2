(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.30873115456815281021363261970691382884979248046875p372 {+ 1390401512670796 372 (1.25895e+112)}
; Y = 1.021394532075968530904219733201898634433746337890625p90 {+ 96352406685098 90 (1.26443e+027)}
; 1.30873115456815281021363261970691382884979248046875p372 m 1.021394532075968530904219733201898634433746337890625p90 == 1.021394532075968530904219733201898634433746337890625p90
; [HW: 1.021394532075968530904219733201898634433746337890625p90] 

; mpf : + 96352406685098 90
; mpfd: + 96352406685098 90 (1.26443e+027) class: Pos. norm. non-zero
; hwf : + 96352406685098 90 (1.26443e+027) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110011 #b0100111100001001000000010100010000100000011001001100)))
(assert (= y (fp #b0 #b10001011001 #b0000010101111010000111001010111110010100010110101010)))
(assert (= r (fp #b0 #b10001011001 #b0000010101111010000111001010111110010100010110101010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
