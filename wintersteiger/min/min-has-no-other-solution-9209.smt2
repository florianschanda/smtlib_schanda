(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0460040416228586490632324057514779269695281982421875p-959 {+ 207183784710243 -959 (2.14668e-289)}
; Y = 1.0779790597184153444487719752942211925983428955078125p-981 {+ 351186464290557 -981 (5.27454e-296)}
; 1.0460040416228586490632324057514779269695281982421875p-959 m 1.0779790597184153444487719752942211925983428955078125p-981 == 1.0779790597184153444487719752942211925983428955078125p-981
; [HW: 1.0779790597184153444487719752942211925983428955078125p-981] 

; mpf : + 351186464290557 -981
; mpfd: + 351186464290557 -981 (5.27454e-296) class: Pos. norm. non-zero
; hwf : + 351186464290557 -981 (5.27454e-296) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000000 #b0000101111000110111010111011111001000001000001100011)))
(assert (= y (fp #b0 #b00000101010 #b0001001111110110011011111000011101000011011011111101)))
(assert (= r (fp #b0 #b00000101010 #b0001001111110110011011111000011101000011011011111101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
