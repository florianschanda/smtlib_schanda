(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2666566557297063155829164315946400165557861328125p-1022 {+ 1200914815380168 -1022 (2.8184e-308)}
; Y = -1.823376123235501466979258111678063869476318359375p680 {- 3708156401789168 680 (-9.14689e+204)}
; 1.2666566557297063155829164315946400165557861328125p-1022 m -1.823376123235501466979258111678063869476318359375p680 == -1.823376123235501466979258111678063869476318359375p680
; [HW: -1.823376123235501466979258111678063869476318359375p680] 

; mpf : - 3708156401789168 680
; mpfd: - 3708156401789168 680 (-9.14689e+204) class: Neg. norm. non-zero
; hwf : - 3708156401789168 680 (-9.14689e+204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000001 #b0100010001000011100111000100111110011110101011001000)))
(assert (= y (fp #b1 #b11010100111 #b1101001011001000110001110001000110011010100011110000)))
(assert (= r (fp #b1 #b11010100111 #b1101001011001000110001110001000110011010100011110000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
