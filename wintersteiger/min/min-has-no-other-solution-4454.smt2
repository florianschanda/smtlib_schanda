(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.655498988098033752436322174617089331150054931640625p401 {+ 2952104998540042 401 (8.54982e+120)}
; Y = -1.810106279889005964633952316944487392902374267578125p562 {- 3648394340238626 562 (-2.73251e+169)}
; 1.655498988098033752436322174617089331150054931640625p401 m -1.810106279889005964633952316944487392902374267578125p562 == -1.810106279889005964633952316944487392902374267578125p562
; [HW: -1.810106279889005964633952316944487392902374267578125p562] 

; mpf : - 3648394340238626 562
; mpfd: - 3648394340238626 562 (-2.73251e+169) class: Neg. norm. non-zero
; hwf : - 3648394340238626 562 (-2.73251e+169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110010000 #b1010011111001110110010000001110001110001001100001010)))
(assert (= y (fp #b1 #b11000110001 #b1100111101100011001000000000101001101000010100100010)))
(assert (= r (fp #b1 #b11000110001 #b1100111101100011001000000000101001101000010100100010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
