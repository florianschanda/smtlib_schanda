(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7246531836048590857757289995788596570491790771484375p644 {- 3263547807655687 644 (-1.25898e+194)}
; Y = 1.523017098662248880458491839817725121974945068359375p-149 {+ 2355459610643702 -149 (2.1342e-045)}
; -1.7246531836048590857757289995788596570491790771484375p644 m 1.523017098662248880458491839817725121974945068359375p-149 == -1.7246531836048590857757289995788596570491790771484375p644
; [HW: -1.7246531836048590857757289995788596570491790771484375p644] 

; mpf : - 3263547807655687 644
; mpfd: - 3263547807655687 644 (-1.25898e+194) class: Neg. norm. non-zero
; hwf : - 3263547807655687 644 (-1.25898e+194) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000011 #b1011100110000010110111101111110010000110011100000111)))
(assert (= y (fp #b0 #b01101101010 #b1000010111100100011100101101011000000000110011110110)))
(assert (= r (fp #b1 #b11010000011 #b1011100110000010110111101111110010000110011100000111)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
