(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.09528142721306753770704744965769350528717041015625p-991 {- 429109400092100 -991 (-5.23359e-299)}
; Y = -0.87689075661045112752844943315722048282623291015625p-1022 {- 3949164884715460 -1023 (-1.95115e-308)}
; -1.09528142721306753770704744965769350528717041015625p-991 m -0.87689075661045112752844943315722048282623291015625p-1022 == -1.09528142721306753770704744965769350528717041015625p-991
; [HW: -1.09528142721306753770704744965769350528717041015625p-991] 

; mpf : - 429109400092100 -991
; mpfd: - 429109400092100 -991 (-5.23359e-299) class: Neg. norm. non-zero
; hwf : - 429109400092100 -991 (-5.23359e-299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100000 #b0001100001100100010111010001010111001011110111000100)))
(assert (= y (fp #b1 #b00000000000 #b1110000001111011111010011010000111001110011111000100)))
(assert (= r (fp #b1 #b00000100000 #b0001100001100100010111010001010111001011110111000100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
