(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6646322022396720097248135061818175017833709716796875p-748 {- 2993237338345019 -748 (-1.1243e-225)}
; Y = 1.5194224361004071699454698318731971085071563720703125p-735 {+ 2339270689669669 -735 (8.40682e-222)}
; -1.6646322022396720097248135061818175017833709716796875p-748 m 1.5194224361004071699454698318731971085071563720703125p-735 == -1.6646322022396720097248135061818175017833709716796875p-748
; [HW: -1.6646322022396720097248135061818175017833709716796875p-748] 

; mpf : - 2993237338345019 -748
; mpfd: - 2993237338345019 -748 (-1.1243e-225) class: Neg. norm. non-zero
; hwf : - 2993237338345019 -748 (-1.1243e-225) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100010011 #b1010101000100101010101100000010001111100111000111011)))
(assert (= y (fp #b0 #b00100100000 #b1000010011111000110111100110011111011100001000100101)))
(assert (= r (fp #b1 #b00100010011 #b1010101000100101010101100000010001111100111000111011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
