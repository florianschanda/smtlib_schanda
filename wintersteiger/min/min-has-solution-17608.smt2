(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.5400778639221688326443882033345289528369903564453125p-1022 {+ 2432294466710933 -1023 (1.20171e-308)}
; Y = 1.214371259841923400557561762980185449123382568359375p903 {+ 965442325943030 903 (8.21178e+271)}
; 0.5400778639221688326443882033345289528369903564453125p-1022 m 1.214371259841923400557561762980185449123382568359375p903 == 0.5400778639221688326443882033345289528369903564453125p-1022
; [HW: 0.5400778639221688326443882033345289528369903564453125p-1022] 

; mpf : + 2432294466710933 -1023
; mpfd: + 2432294466710933 -1023 (1.20171e-308) class: Pos. denorm.
; hwf : + 2432294466710933 -1023 (1.20171e-308) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1000101001000010100010101111101011010110110110010101)))
(assert (= y (fp #b0 #b11110000110 #b0011011011100001000010001110111000111001001011110110)))
(assert (= r (fp #b0 #b00000000000 #b1000101001000010100010101111101011010110110110010101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
