(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1073602072263251105965764509164728224277496337890625p-952 {- 483507389258897 -952 (-2.90893e-287)}
; Y = 1.81545086826104551391836139373481273651123046875p424 {+ 3672464226439392 424 (7.86507e+127)}
; -1.1073602072263251105965764509164728224277496337890625p-952 m 1.81545086826104551391836139373481273651123046875p424 == -1.1073602072263251105965764509164728224277496337890625p-952
; [HW: -1.1073602072263251105965764509164728224277496337890625p-952] 

; mpf : - 483507389258897 -952
; mpfd: - 483507389258897 -952 (-2.90893e-287) class: Neg. norm. non-zero
; hwf : - 483507389258897 -952 (-2.90893e-287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000111 #b0001101101111011111101010110001011101101110010010001)))
(assert (= y (fp #b0 #b10110100111 #b1101000011000001011000110101101010101101000011100000)))
(assert (= r (fp #b1 #b00001000111 #b0001101101111011111101010110001011101101110010010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
