(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8896448924732356378086706172325648367404937744140625p-190 {- 4006604406234529 -190 (-1.20415e-057)}
; Y = -1.707163531819818391710441574105061590671539306640625p-867 {- 3184781418393738 -867 (-1.73488e-261)}
; -1.8896448924732356378086706172325648367404937744140625p-190 m -1.707163531819818391710441574105061590671539306640625p-867 == -1.8896448924732356378086706172325648367404937744140625p-190
; [HW: -1.8896448924732356378086706172325648367404937744140625p-190] 

; mpf : - 4006604406234529 -190
; mpfd: - 4006604406234529 -190 (-1.20415e-057) class: Neg. norm. non-zero
; hwf : - 4006604406234529 -190 (-1.20415e-057) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101000001 #b1110001110111111110001001000011000111001110110100001)))
(assert (= y (fp #b1 #b00010011100 #b1011010100001000101010110101001000010111000010001010)))
(assert (= r (fp #b1 #b01101000001 #b1110001110111111110001001000011000111001110110100001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
