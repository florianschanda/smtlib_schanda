(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0618987985532213347283914117724634706974029541015625p-804 {+ 278767406098969 -804 (9.95329e-243)}
; Y = 1.718300890208869446951212012208998203277587890625p-164 {+ 3234939621484560 -164 (7.34818e-050)}
; 1.0618987985532213347283914117724634706974029541015625p-804 m 1.718300890208869446951212012208998203277587890625p-164 == 1.0618987985532213347283914117724634706974029541015625p-804
; [HW: 1.0618987985532213347283914117724634706974029541015625p-804] 

; mpf : + 278767406098969 -804
; mpfd: + 278767406098969 -804 (9.95329e-243) class: Pos. norm. non-zero
; hwf : + 278767406098969 -804 (9.95329e-243) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011011 #b0000111111011000100110011000001101110010101000011001)))
(assert (= y (fp #b0 #b01101011011 #b1011011111100010100100010011000000100010100000010000)))
(assert (= r (fp #b0 #b00011011011 #b0000111111011000100110011000001101110010101000011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
