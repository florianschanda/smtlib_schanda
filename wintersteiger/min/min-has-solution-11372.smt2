(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9758933518558114972307748757884837687015533447265625p147 {- 4395032935771177 147 (-3.52511e+044)}
; Y = 1.3788583887183103460216671010130085051059722900390625p962 {+ 1706226498257969 962 (5.37496e+289)}
; -1.9758933518558114972307748757884837687015533447265625p147 m 1.3788583887183103460216671010130085051059722900390625p962 == -1.9758933518558114972307748757884837687015533447265625p147
; [HW: -1.9758933518558114972307748757884837687015533447265625p147] 

; mpf : - 4395032935771177 147
; mpfd: - 4395032935771177 147 (-3.52511e+044) class: Neg. norm. non-zero
; hwf : - 4395032935771177 147 (-3.52511e+044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010010010 #b1111100111010100001001011000111010011010110000101001)))
(assert (= y (fp #b0 #b11111000001 #b0110000011111100110111010000010101011100010000110001)))
(assert (= r (fp #b1 #b10010010010 #b1111100111010100001001011000111010011010110000101001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
