(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.361667504689102248249810145352967083454132080078125p-116 {+ 1628805639349858 -116 (1.63905e-035)}
; Y = 1.88296879707243025592333651729859411716461181640625p939 {+ 3976537945475172 939 (8.75002e+282)}
; 1.361667504689102248249810145352967083454132080078125p-116 m 1.88296879707243025592333651729859411716461181640625p939 == 1.361667504689102248249810145352967083454132080078125p-116
; [HW: 1.361667504689102248249810145352967083454132080078125p-116] 

; mpf : + 1628805639349858 -116
; mpfd: + 1628805639349858 -116 (1.63905e-035) class: Pos. norm. non-zero
; hwf : + 1628805639349858 -116 (1.63905e-035) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001011 #b0101110010010110001111011101100010101010011001100010)))
(assert (= y (fp #b0 #b11110101010 #b1110001000001010001111100011101011010000100001100100)))
(assert (= r (fp #b0 #b01110001011 #b0101110010010110001111011101100010101010011001100010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
