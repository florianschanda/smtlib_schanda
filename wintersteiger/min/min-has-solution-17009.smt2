(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.28665798176734202939996976056136190891265869140625p526 {+ 1290992779870180 526 (2.82645e+158)}
; Y = -1.2108982640251315654467134663718752562999725341796875p-1022 {- 949801343276667 -1022 (-2.69434e-308)}
; 1.28665798176734202939996976056136190891265869140625p526 m -1.2108982640251315654467134663718752562999725341796875p-1022 == -1.2108982640251315654467134663718752562999725341796875p-1022
; [HW: -1.2108982640251315654467134663718752562999725341796875p-1022] 

; mpf : - 949801343276667 -1022
; mpfd: - 949801343276667 -1022 (-2.69434e-308) class: Neg. norm. non-zero
; hwf : - 949801343276667 -1022 (-2.69434e-308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001101 #b0100100101100010011010101110000011010011111111100100)))
(assert (= y (fp #b1 #b00000000001 #b0011010111111101011011011011101011000101011001111011)))
(assert (= r (fp #b1 #b00000000001 #b0011010111111101011011011011101011000101011001111011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
