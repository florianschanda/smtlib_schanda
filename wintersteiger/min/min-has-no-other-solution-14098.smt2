(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.449494070164757175689373980276286602020263671875p118 {- 2024341326899248 118 (-4.81677e+035)}
; Y = -1.7200425968747989902141171114635653793811798095703125p-109 {- 3242783570976229 -109 (-2.65015e-033)}
; -1.449494070164757175689373980276286602020263671875p118 m -1.7200425968747989902141171114635653793811798095703125p-109 == -1.449494070164757175689373980276286602020263671875p118
; [HW: -1.449494070164757175689373980276286602020263671875p118] 

; mpf : - 2024341326899248 118
; mpfd: - 2024341326899248 118 (-4.81677e+035) class: Neg. norm. non-zero
; hwf : - 2024341326899248 118 (-4.81677e+035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001110101 #b0111001100010010000010110001101100011010100000110000)))
(assert (= y (fp #b1 #b01110010010 #b1011100001010100101101100010110101001101110111100101)))
(assert (= r (fp #b1 #b10001110101 #b0111001100010010000010110001101100011010100000110000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
