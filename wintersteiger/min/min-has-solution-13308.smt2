(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5460075545911931005349515544367022812366485595703125p949 {+ 2458999419398373 949 (7.35661e+285)}
; Y = -1.6101898694936622735696118979831226170063018798828125p-352 {- 2748050868876909 -352 (-1.75517e-106)}
; 1.5460075545911931005349515544367022812366485595703125p949 m -1.6101898694936622735696118979831226170063018798828125p-352 == -1.6101898694936622735696118979831226170063018798828125p-352
; [HW: -1.6101898694936622735696118979831226170063018798828125p-352] 

; mpf : - 2748050868876909 -352
; mpfd: - 2748050868876909 -352 (-1.75517e-106) class: Neg. norm. non-zero
; hwf : - 2748050868876909 -352 (-1.75517e-106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110100 #b1000101111000111001001101010111001010110100011100101)))
(assert (= y (fp #b1 #b01010011111 #b1001110000110101011001110011110111010011011001101101)))
(assert (= r (fp #b1 #b01010011111 #b1001110000110101011001110011110111010011011001101101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
