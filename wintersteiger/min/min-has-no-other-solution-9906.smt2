(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8549883116961274343026389033184386789798736572265625p495 {- 3850525041960809 495 (-1.89753e+149)}
; Y = -1.6992375181685550611376811502850614488124847412109375p-490 {- 3149085826267375 -490 (-5.31565e-148)}
; -1.8549883116961274343026389033184386789798736572265625p495 m -1.6992375181685550611376811502850614488124847412109375p-490 == -1.8549883116961274343026389033184386789798736572265625p495
; [HW: -1.8549883116961274343026389033184386789798736572265625p495] 

; mpf : - 3850525041960809 495
; mpfd: - 3850525041960809 495 (-1.89753e+149) class: Neg. norm. non-zero
; hwf : - 3850525041960809 495 (-1.89753e+149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101110 #b1101101011100000100000111001010100110010011101101001)))
(assert (= y (fp #b1 #b01000010101 #b1011001100000001001110101110000010101011100011101111)))
(assert (= r (fp #b1 #b10111101110 #b1101101011100000100000111001010100110010011101101001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
