(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.769997162026038406423822380020283162593841552734375p-348 {+ 3467758931976806 -348 (3.08698e-105)}
; Y = -1.2043367175037875682619414874352514743804931640625p-10 {- 920250764808168 -10 (-0.00117611)}
; 1.769997162026038406423822380020283162593841552734375p-348 m -1.2043367175037875682619414874352514743804931640625p-10 == -1.2043367175037875682619414874352514743804931640625p-10
; [HW: -1.2043367175037875682619414874352514743804931640625p-10] 

; mpf : - 920250764808168 -10
; mpfd: - 920250764808168 -10 (-0.00117611) class: Neg. norm. non-zero
; hwf : - 920250764808168 -10 (-0.00117611) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100011 #b1100010100011110100010001011010011101010001001100110)))
(assert (= y (fp #b1 #b01111110101 #b0011010001001111011010010011111100001100111111101000)))
(assert (= r (fp #b1 #b01111110101 #b0011010001001111011010010011111100001100111111101000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
