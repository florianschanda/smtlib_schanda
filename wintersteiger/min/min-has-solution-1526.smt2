(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0712229880601800147132962592877447605133056640625p-293 {- 320759822488040 -293 (-6.73118e-089)}
; Y = 1.926368176719834846011281115352176129817962646484375p-159 {+ 4171991375483334 -159 (2.63615e-048)}
; -1.0712229880601800147132962592877447605133056640625p-293 m 1.926368176719834846011281115352176129817962646484375p-159 == -1.0712229880601800147132962592877447605133056640625p-293
; [HW: -1.0712229880601800147132962592877447605133056640625p-293] 

; mpf : - 320759822488040 -293
; mpfd: - 320759822488040 -293 (-6.73118e-089) class: Neg. norm. non-zero
; hwf : - 320759822488040 -293 (-6.73118e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011010 #b0001001000111011101010110111010001110001000111101000)))
(assert (= y (fp #b0 #b01101100000 #b1110110100100110011101101111111100010001000111000110)))
(assert (= r (fp #b1 #b01011011010 #b0001001000111011101010110111010001110001000111101000)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
