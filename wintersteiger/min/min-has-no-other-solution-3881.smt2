(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7004903130931119381585858718608506023883819580078125p-29 {- 3154727913022781 -29 (-3.16741e-009)}
; Y = 1.2921836940210125188599477041861973702907562255859375p330 {+ 1315878375516767 330 (2.82633e+099)}
; -1.7004903130931119381585858718608506023883819580078125p-29 m 1.2921836940210125188599477041861973702907562255859375p330 == -1.7004903130931119381585858718608506023883819580078125p-29
; [HW: -1.7004903130931119381585858718608506023883819580078125p-29] 

; mpf : - 3154727913022781 -29
; mpfd: - 3154727913022781 -29 (-3.16741e-009) class: Neg. norm. non-zero
; hwf : - 3154727913022781 -29 (-3.16741e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100010 #b1011001101010011010101010100100111100110010100111101)))
(assert (= y (fp #b0 #b10101001001 #b0100101011001100100011001111001000111110101001011111)))
(assert (= r (fp #b1 #b01111100010 #b1011001101010011010101010100100111100110010100111101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
