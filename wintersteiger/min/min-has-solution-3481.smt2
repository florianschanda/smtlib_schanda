(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9103715328486632341054018979775719344615936279296875p-58 {- 4099948896105947 -58 (-6.62793e-018)}
; Y = -1.252999763187489623561532425810582935810089111328125p-267 {- 1139409639216002 -267 (-5.28375e-081)}
; -1.9103715328486632341054018979775719344615936279296875p-58 m -1.252999763187489623561532425810582935810089111328125p-267 == -1.9103715328486632341054018979775719344615936279296875p-58
; [HW: -1.9103715328486632341054018979775719344615936279296875p-58] 

; mpf : - 4099948896105947 -58
; mpfd: - 4099948896105947 -58 (-6.62793e-018) class: Neg. norm. non-zero
; hwf : - 4099948896105947 -58 (-6.62793e-018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000101 #b1110100100001110000110111101100011001011010111011011)))
(assert (= y (fp #b1 #b01011110100 #b0100000011000100100101111010110011001001001110000010)))
(assert (= r (fp #b1 #b01111000101 #b1110100100001110000110111101100011001011010111011011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
