(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1558344680077003996387929873890243470668792724609375p347 {+ 701816052050959 347 (3.31363e+104)}
; Y = -1.5595322803653826060354958826792426407337188720703125p-195 {- 2519909369355301 -195 (-3.1056e-059)}
; 1.1558344680077003996387929873890243470668792724609375p347 m -1.5595322803653826060354958826792426407337188720703125p-195 == -1.5595322803653826060354958826792426407337188720703125p-195
; [HW: -1.5595322803653826060354958826792426407337188720703125p-195] 

; mpf : - 2519909369355301 -195
; mpfd: - 2519909369355301 -195 (-3.1056e-059) class: Neg. norm. non-zero
; hwf : - 2519909369355301 -195 (-3.1056e-059) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011010 #b0010011111100100110001001000011110101110110000001111)))
(assert (= y (fp #b1 #b01100111100 #b1000111100111101100000011110110100111001110000100101)))
(assert (= r (fp #b1 #b01100111100 #b1000111100111101100000011110110100111001110000100101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
