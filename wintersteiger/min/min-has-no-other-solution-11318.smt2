(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6536027369491457239547571589355356991291046142578125p-882 {+ 2943565042572509 -882 (5.12832e-266)}
; Y = 1.69449907535713606421268195845186710357666015625p646 {+ 3127745776987552 646 (4.94787e+194)}
; 1.6536027369491457239547571589355356991291046142578125p-882 m 1.69449907535713606421268195845186710357666015625p646 == 1.6536027369491457239547571589355356991291046142578125p-882
; [HW: 1.6536027369491457239547571589355356991291046142578125p-882] 

; mpf : + 2943565042572509 -882
; mpfd: + 2943565042572509 -882 (5.12832e-266) class: Pos. norm. non-zero
; hwf : + 2943565042572509 -882 (5.12832e-266) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010001101 #b1010011101010010100000100100101111000101110011011101)))
(assert (= y (fp #b0 #b11010000101 #b1011000111001010101100001111111111000010110110100000)))
(assert (= r (fp #b0 #b00010001101 #b1010011101010010100000100100101111000101110011011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
