(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0081008068749934825092395840329118072986602783203125p495 {- 36482790823621 495 (-1.03122e+149)}
; Y = 1.665771295693073028587605222128331661224365234375p-952 {+ 2998367359197296 -952 (4.37582e-287)}
; -1.0081008068749934825092395840329118072986602783203125p495 m 1.665771295693073028587605222128331661224365234375p-952 == -1.0081008068749934825092395840329118072986602783203125p495
; [HW: -1.0081008068749934825092395840329118072986602783203125p495] 

; mpf : - 36482790823621 495
; mpfd: - 36482790823621 495 (-1.03122e+149) class: Neg. norm. non-zero
; hwf : - 36482790823621 495 (-1.03122e+149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101110 #b0000001000010010111001001111110010011001011011000101)))
(assert (= y (fp #b0 #b00001000111 #b1010101001101111111111001101010110011110000001110000)))
(assert (= r (fp #b1 #b10111101110 #b0000001000010010111001001111110010011001011011000101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
