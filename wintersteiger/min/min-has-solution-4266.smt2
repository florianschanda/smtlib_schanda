(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0710860743837404829292836438980884850025177001953125p850 {- 320143218105845 850 (-8.0412e+255)}
; Y = -1.069789120372600876862634322606027126312255859375p-938 {- 314302256504560 -938 (-4.60429e-283)}
; -1.0710860743837404829292836438980884850025177001953125p850 m -1.069789120372600876862634322606027126312255859375p-938 == -1.0710860743837404829292836438980884850025177001953125p850
; [HW: -1.0710860743837404829292836438980884850025177001953125p850] 

; mpf : - 320143218105845 850
; mpfd: - 320143218105845 850 (-8.0412e+255) class: Neg. norm. non-zero
; hwf : - 320143218105845 850 (-8.0412e+255) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101010001 #b0001001000110010101100100110110010101101110111110101)))
(assert (= y (fp #b1 #b00001010101 #b0001000111011101101100110010010110011101111011110000)))
(assert (= r (fp #b1 #b11101010001 #b0001001000110010101100100110110010101101110111110101)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
