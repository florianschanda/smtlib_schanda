(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0003897643702988062841541250236332416534423828125p-192 {- 1755342672840 -192 (-1.59371e-058)}
; Y = -1.9137047759342580288688395739882253110408782958984375p-703 {- 4114960488424167 -703 (-4.54766e-212)}
; -1.0003897643702988062841541250236332416534423828125p-192 m -1.9137047759342580288688395739882253110408782958984375p-703 == -1.0003897643702988062841541250236332416534423828125p-192
; [HW: -1.0003897643702988062841541250236332416534423828125p-192] 

; mpf : - 1755342672840 -192
; mpfd: - 1755342672840 -192 (-1.59371e-058) class: Neg. norm. non-zero
; hwf : - 1755342672840 -192 (-1.59371e-058) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111111 #b0000000000011001100010110010100100111001001111001000)))
(assert (= y (fp #b1 #b00101000000 #b1110100111101000100011100110001011010110001011100111)))
(assert (= r (fp #b1 #b01100111111 #b0000000000011001100010110010100100111001001111001000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
