(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.994583021103437214804898758302442729473114013671875p-617 {+ 4479203723230462 -617 (3.66729e-186)}
; Y = -1.153854906035077565462643178761936724185943603515625p657 {- 692900897488698 657 (-6.90015e+197)}
; 1.994583021103437214804898758302442729473114013671875p-617 m -1.153854906035077565462643178761936724185943603515625p657 == -1.153854906035077565462643178761936724185943603515625p657
; [HW: -1.153854906035077565462643178761936724185943603515625p657] 

; mpf : - 692900897488698 657
; mpfd: - 692900897488698 657 (-6.90015e+197) class: Neg. norm. non-zero
; hwf : - 692900897488698 657 (-6.90015e+197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010110 #b1111111010011100111111100010110011001011110011111110)))
(assert (= y (fp #b1 #b11010010000 #b0010011101100011000010001111110110111111111100111010)))
(assert (= r (fp #b1 #b11010010000 #b0010011101100011000010001111110110111111111100111010)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
