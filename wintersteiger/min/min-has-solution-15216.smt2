(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8077033475862929190469685636344365775585174560546875p-584 {- 3637572495215531 -584 (-2.85502e-176)}
; Y = -1.05804794097925469742449422483332455158233642578125p-345 {- 261424685363796 -345 (-1.47624e-104)}
; -1.8077033475862929190469685636344365775585174560546875p-584 m -1.05804794097925469742449422483332455158233642578125p-345 == -1.05804794097925469742449422483332455158233642578125p-345
; [HW: -1.05804794097925469742449422483332455158233642578125p-345] 

; mpf : - 261424685363796 -345
; mpfd: - 261424685363796 -345 (-1.47624e-104) class: Neg. norm. non-zero
; hwf : - 261424685363796 -345 (-1.47624e-104) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110111 #b1100111011000101101001011000011011000000101110101011)))
(assert (= y (fp #b1 #b01010100110 #b0000111011011100001110101101100000011011001001010100)))
(assert (= r (fp #b1 #b01010100110 #b0000111011011100001110101101100000011011001001010100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
