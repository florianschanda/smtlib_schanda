(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0473296982294526547008217676193453371524810791015625p-298 {- 213154011309721 -298 (-2.05658e-090)}
; Y = -0.08719877470295767096786221372894942760467529296875p-1022 {- 392708369259404 -1023 (-1.94024e-309)}
; -1.0473296982294526547008217676193453371524810791015625p-298 m -0.08719877470295767096786221372894942760467529296875p-1022 == -1.0473296982294526547008217676193453371524810791015625p-298
; [HW: -1.0473296982294526547008217676193453371524810791015625p-298] 

; mpf : - 213154011309721 -298
; mpfd: - 213154011309721 -298 (-2.05658e-090) class: Neg. norm. non-zero
; hwf : - 213154011309721 -298 (-2.05658e-090) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010101 #b0000110000011101110011001001001000000110011010011001)))
(assert (= y (fp #b1 #b00000000000 #b0001011001010010101010001010110110011001101110001100)))
(assert (= r (fp #b1 #b01011010101 #b0000110000011101110011001001001000000110011010011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
