(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5680643120750825669773576009902171790599822998046875p-466 {- 2558334224183819 -466 (-8.22974e-141)}
; Y = 1.3330551760866395927251915054512210190296173095703125p-931 {+ 1499947166917605 -931 (7.34382e-281)}
; -1.5680643120750825669773576009902171790599822998046875p-466 m 1.3330551760866395927251915054512210190296173095703125p-931 == -1.5680643120750825669773576009902171790599822998046875p-466
; [HW: -1.5680643120750825669773576009902171790599822998046875p-466] 

; mpf : - 2558334224183819 -466
; mpfd: - 2558334224183819 -466 (-8.22974e-141) class: Neg. norm. non-zero
; hwf : - 2558334224183819 -466 (-8.22974e-141) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101101 #b1001000101101100101010011010101001100011001000001011)))
(assert (= y (fp #b0 #b00001011100 #b0101010101000011000110101010000100001110001111100101)))
(assert (= r (fp #b1 #b01000101101 #b1001000101101100101010011010101001100011001000001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
