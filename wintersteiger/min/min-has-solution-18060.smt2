(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9150001326432410930777905377908609807491302490234375p-193 {+ 4120794256416055 -193 (1.52539e-058)}
; Y = -1.3312975353447027426767590441158972680568695068359375p994 {- 1492031456727167 994 (-2.2289e+299)}
; 1.9150001326432410930777905377908609807491302490234375p-193 m -1.3312975353447027426767590441158972680568695068359375p994 == -1.3312975353447027426767590441158972680568695068359375p994
; [HW: -1.3312975353447027426767590441158972680568695068359375p994] 

; mpf : - 1492031456727167 994
; mpfd: - 1492031456727167 994 (-2.2289e+299) class: Neg. norm. non-zero
; hwf : - 1492031456727167 994 (-2.2289e+299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111110 #b1110101000111101011100101101110110001001110100110111)))
(assert (= y (fp #b1 #b11111100001 #b0101010011001111111010100100111110001101000001111111)))
(assert (= r (fp #b1 #b11111100001 #b0101010011001111111010100100111110001101000001111111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
