(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.161356132996417045433190651237964630126953125p656 {+ 726683420436608 656 (3.4725e+197)}
; Y = -1.989771129021890683219453421770595014095306396484375p-140 {- 4457532887845062 -140 (-1.42759e-042)}
; 1.161356132996417045433190651237964630126953125p656 m -1.989771129021890683219453421770595014095306396484375p-140 == -1.989771129021890683219453421770595014095306396484375p-140
; [HW: -1.989771129021890683219453421770595014095306396484375p-140] 

; mpf : - 4457532887845062 -140
; mpfd: - 4457532887845062 -140 (-1.42759e-042) class: Neg. norm. non-zero
; hwf : - 4457532887845062 -140 (-1.42759e-042) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010001111 #b0010100101001110101000101011001000111010100010000000)))
(assert (= y (fp #b1 #b01101110011 #b1111110101100001101001000000010110101100100011000110)))
(assert (= r (fp #b1 #b01101110011 #b1111110101100001101001000000010110101100100011000110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
