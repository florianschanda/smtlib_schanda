(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3208193588731467205121816732571460306644439697265625p-203 {+ 1444841945074345 -203 (1.02743e-061)}
; Y = 1.587607091435647266308706093695946037769317626953125p-271 {+ 2646347078029842 -271 (4.18422e-082)}
; 1.3208193588731467205121816732571460306644439697265625p-203 m 1.587607091435647266308706093695946037769317626953125p-271 == 1.587607091435647266308706093695946037769317626953125p-271
; [HW: 1.587607091435647266308706093695946037769317626953125p-271] 

; mpf : + 2646347078029842 -271
; mpfd: + 2646347078029842 -271 (4.18422e-082) class: Pos. norm. non-zero
; hwf : + 2646347078029842 -271 (4.18422e-082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110100 #b0101001000100001001101111010111001001000101010101001)))
(assert (= y (fp #b0 #b01011110000 #b1001011001101101011010110001100010011101001000010010)))
(assert (= r (fp #b0 #b01011110000 #b1001011001101101011010110001100010011101001000010010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
