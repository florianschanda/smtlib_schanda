(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2565115182959747386348681175149977207183837890625p-610 {- 1155225178213992 -610 (-2.95712e-184)}
; Y = -1.9502502108498618316190231780637986958026885986328125p-150 {- 4279546495492173 -150 (-1.36644e-045)}
; -1.2565115182959747386348681175149977207183837890625p-610 m -1.9502502108498618316190231780637986958026885986328125p-150 == -1.9502502108498618316190231780637986958026885986328125p-150
; [HW: -1.9502502108498618316190231780637986958026885986328125p-150] 

; mpf : - 4279546495492173 -150
; mpfd: - 4279546495492173 -150 (-1.36644e-045) class: Neg. norm. non-zero
; hwf : - 4279546495492173 -150 (-1.36644e-045) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011101 #b0100000110101010101111010010011000100000111001101000)))
(assert (= y (fp #b1 #b01101101001 #b1111001101000011100110010000101010011110000001001101)))
(assert (= r (fp #b1 #b01101101001 #b1111001101000011100110010000101010011110000001001101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
