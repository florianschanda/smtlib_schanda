(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8367896092026516630113519568112678825855255126953125p5 {- 3768565372192565 5 (-58.7773)}
; Y = -1.5609174162125809548484767219633795320987701416015625p924 {- 2526147466640601 924 (-2.21358e+278)}
; -1.8367896092026516630113519568112678825855255126953125p5 m -1.5609174162125809548484767219633795320987701416015625p924 == -1.5609174162125809548484767219633795320987701416015625p924
; [HW: -1.5609174162125809548484767219633795320987701416015625p924] 

; mpf : - 2526147466640601 924
; mpfd: - 2526147466640601 924 (-2.21358e+278) class: Neg. norm. non-zero
; hwf : - 2526147466640601 924 (-2.21358e+278) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000000100 #b1101011000110111110110000000010100101000011100110101)))
(assert (= y (fp #b1 #b11110011011 #b1000111110011000010010001010011001100011110011011001)))
(assert (= r (fp #b1 #b11110011011 #b1000111110011000010010001010011001100011110011011001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
