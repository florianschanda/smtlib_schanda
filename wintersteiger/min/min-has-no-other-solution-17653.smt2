(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.77558199835225760665480265743099153041839599609375p-827 {+ 3492910798774492 -827 (1.98397e-249)}
; Y = 1.438462291248709501445546266040764749050140380859375p454 {+ 1974658611483702 454 (6.69139e+136)}
; 1.77558199835225760665480265743099153041839599609375p-827 m 1.438462291248709501445546266040764749050140380859375p454 == 1.77558199835225760665480265743099153041839599609375p-827
; [HW: 1.77558199835225760665480265743099153041839599609375p-827] 

; mpf : + 3492910798774492 -827
; mpfd: + 3492910798774492 -827 (1.98397e-249) class: Pos. norm. non-zero
; hwf : + 3492910798774492 -827 (1.98397e-249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000100 #b1100011010001100100010101011011001001010000011011100)))
(assert (= y (fp #b0 #b10111000101 #b0111000000111111000100001001000101110001010000110110)))
(assert (= r (fp #b0 #b00011000100 #b1100011010001100100010101011011001001010000011011100)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
