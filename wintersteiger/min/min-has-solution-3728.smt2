(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1185366975164512393092763886670581996440887451171875p957 {+ 533841826764819 957 (1.36256e+288)}
; Y = -1.867324728756613705371592004667036235332489013671875p290 {- 3906083325237502 290 (-3.71466e+087)}
; 1.1185366975164512393092763886670581996440887451171875p957 m -1.867324728756613705371592004667036235332489013671875p290 == -1.867324728756613705371592004667036235332489013671875p290
; [HW: -1.867324728756613705371592004667036235332489013671875p290] 

; mpf : - 3906083325237502 290
; mpfd: - 3906083325237502 290 (-3.71466e+087) class: Neg. norm. non-zero
; hwf : - 3906083325237502 290 (-3.71466e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110111100 #b0001111001011000011010111100011100110101100000010011)))
(assert (= y (fp #b1 #b10100100001 #b1101111000001000111111100101000100000101100011111110)))
(assert (= r (fp #b1 #b10100100001 #b1101111000001000111111100101000100000101100011111110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
