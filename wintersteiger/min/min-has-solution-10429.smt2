(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.507862275209712610291035161935724318027496337890625p308 {+ 2287208353389994 308 (7.86322e+092)}
; Y = 1.1045733945758107186208007988170720636844635009765625p84 {+ 470956700844489 84 (2.13656e+025)}
; 1.507862275209712610291035161935724318027496337890625p308 m 1.1045733945758107186208007988170720636844635009765625p84 == 1.1045733945758107186208007988170720636844635009765625p84
; [HW: 1.1045733945758107186208007988170720636844635009765625p84] 

; mpf : + 470956700844489 84
; mpfd: + 470956700844489 84 (2.13656e+025) class: Pos. norm. non-zero
; hwf : + 470956700844489 84 (2.13656e+025) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100110011 #b1000001000000011010000110001011011100101110110101010)))
(assert (= y (fp #b0 #b10001010011 #b0001101011000101010100100110110110111100000111001001)))
(assert (= r (fp #b0 #b10001010011 #b0001101011000101010100100110110110111100000111001001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
