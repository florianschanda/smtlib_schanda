(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2271210129982506042978229743312112987041473388671875p-679 {+ 1022862109506931 -679 (4.89238e-205)}
; Y = 1.7960252496849917758225956276874057948589324951171875p-1013 {+ 3584979017858835 -1013 (2.0461e-305)}
; 1.2271210129982506042978229743312112987041473388671875p-679 m 1.7960252496849917758225956276874057948589324951171875p-1013 == 1.7960252496849917758225956276874057948589324951171875p-1013
; [HW: 1.7960252496849917758225956276874057948589324951171875p-1013] 

; mpf : + 3584979017858835 -1013
; mpfd: + 3584979017858835 -1013 (2.0461e-305) class: Pos. norm. non-zero
; hwf : + 3584979017858835 -1013 (2.0461e-305) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101011000 #b0011101000100100100110100100101100001111110101110011)))
(assert (= y (fp #b0 #b00000001010 #b1100101111001000010011111000111000101111111100010011)))
(assert (= r (fp #b0 #b00000001010 #b1100101111001000010011111000111000101111111100010011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
