(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.19933588050307360362012332188896834850311279296875p345 {+ 897728997155212 345 (8.59586e+103)}
; Y = 1.5012099627809478707973767086514271795749664306640625p-115 {+ 2257249001614657 -115 (3.61403e-035)}
; 1.19933588050307360362012332188896834850311279296875p345 m 1.5012099627809478707973767086514271795749664306640625p-115 == 1.5012099627809478707973767086514271795749664306640625p-115
; [HW: 1.5012099627809478707973767086514271795749664306640625p-115] 

; mpf : + 2257249001614657 -115
; mpfd: + 2257249001614657 -115 (3.61403e-035) class: Pos. norm. non-zero
; hwf : + 2257249001614657 -115 (3.61403e-035) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011000 #b0011001100000111101011010001111110101110000110001100)))
(assert (= y (fp #b0 #b01110001100 #b1000000001001111010010111100111010010010110101000001)))
(assert (= r (fp #b0 #b01110001100 #b1000000001001111010010111100111010010010110101000001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
