(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1945014586846360860050708652124740183353424072265625p-85 {+ 875956696855145 -85 (3.08771e-026)}
; Y = 1.3483041608198143013197523032431490719318389892578125p-1000 {+ 1568622488879709 -1000 (1.25832e-301)}
; 1.1945014586846360860050708652124740183353424072265625p-85 m 1.3483041608198143013197523032431490719318389892578125p-1000 == 1.3483041608198143013197523032431490719318389892578125p-1000
; [HW: 1.3483041608198143013197523032431490719318389892578125p-1000] 

; mpf : + 1568622488879709 -1000
; mpfd: + 1568622488879709 -1000 (1.25832e-301) class: Pos. norm. non-zero
; hwf : + 1568622488879709 -1000 (1.25832e-301) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101010 #b0011000111001010110110001111110000010011001001101001)))
(assert (= y (fp #b0 #b00000010111 #b0101100100101010011101100010001111001000001001011101)))
(assert (= r (fp #b0 #b00000010111 #b0101100100101010011101100010001111001000001001011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
