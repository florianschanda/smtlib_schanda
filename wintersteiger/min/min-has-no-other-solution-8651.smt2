(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.913572554194216568390629618079401552677154541015625p-491 {- 4114365014644986 -491 (-2.99307e-148)}
; Y = 1.3810430257911823215266622355557046830654144287109375p619 {+ 1716065228965295 619 (3.00452e+186)}
; -1.913572554194216568390629618079401552677154541015625p-491 m 1.3810430257911823215266622355557046830654144287109375p619 == -1.913572554194216568390629618079401552677154541015625p-491
; [HW: -1.913572554194216568390629618079401552677154541015625p-491] 

; mpf : - 4114365014644986 -491
; mpfd: - 4114365014644986 -491 (-2.99307e-148) class: Neg. norm. non-zero
; hwf : - 4114365014644986 -491 (-2.99307e-148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010100 #b1110100111011111111001000001001011001001100011111010)))
(assert (= y (fp #b0 #b11001101010 #b0110000110001100000010010010011000100100010110101111)))
(assert (= r (fp #b1 #b01000010100 #b1110100111011111111001000001001011001001100011111010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
