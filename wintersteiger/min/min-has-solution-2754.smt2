(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7159270175989973505892294269870035350322723388671875p-494 {- 3224248649683315 -494 (-3.35491e-149)}
; Y = 1.5102868063426242439817315243999473750591278076171875p-347 {+ 2298127470896723 -347 (5.26806e-105)}
; -1.7159270175989973505892294269870035350322723388671875p-494 m 1.5102868063426242439817315243999473750591278076171875p-347 == -1.7159270175989973505892294269870035350322723388671875p-494
; [HW: -1.7159270175989973505892294269870035350322723388671875p-494] 

; mpf : - 3224248649683315 -494
; mpfd: - 3224248649683315 -494 (-3.35491e-149) class: Neg. norm. non-zero
; hwf : - 3224248649683315 -494 (-3.35491e-149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010001 #b1011011101000110111111100011011011101001000101110011)))
(assert (= y (fp #b0 #b01010100100 #b1000001010100010001001111111100011010010011001010011)))
(assert (= r (fp #b1 #b01000010001 #b1011011101000110111111100011011011101001000101110011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
