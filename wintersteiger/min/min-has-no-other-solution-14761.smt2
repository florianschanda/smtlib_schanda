(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.226637328459393216917305835522711277008056640625p723 {+ 1020683787997968 723 (5.41256e+217)}
; Y = -1.2707562010139834551836202081176452338695526123046875p983 {- 1219377525994827 983 (-1.03884e+296)}
; 1.226637328459393216917305835522711277008056640625p723 m -1.2707562010139834551836202081176452338695526123046875p983 == -1.2707562010139834551836202081176452338695526123046875p983
; [HW: -1.2707562010139834551836202081176452338695526123046875p983] 

; mpf : - 1219377525994827 983
; mpfd: - 1219377525994827 983 (-1.03884e+296) class: Neg. norm. non-zero
; hwf : - 1219377525994827 983 (-1.03884e+296) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011010010 #b0011101000000100111001110110100111001001001100010000)))
(assert (= y (fp #b1 #b11111010110 #b0100010101010000010001110100010010001011010101001011)))
(assert (= r (fp #b1 #b11111010110 #b0100010101010000010001110100010010001011010101001011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
