(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.773208129017860290588259886135347187519073486328125p764 {- 3482219841724674 764 (-1.72059e+230)}
; Y = 1.1354482602363076271245745374471880495548248291015625p-611 {+ 610004734328217 -611 (1.3361e-184)}
; -1.773208129017860290588259886135347187519073486328125p764 m 1.1354482602363076271245745374471880495548248291015625p-611 == -1.773208129017860290588259886135347187519073486328125p764
; [HW: -1.773208129017860290588259886135347187519073486328125p764] 

; mpf : - 3482219841724674 764
; mpfd: - 3482219841724674 764 (-1.72059e+230) class: Neg. norm. non-zero
; hwf : - 3482219841724674 764 (-1.72059e+230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011111011 #b1100010111110000111101111100101100100010000100000010)))
(assert (= y (fp #b0 #b00110011100 #b0010001010101100101111001011100000000011110110011001)))
(assert (= r (fp #b1 #b11011111011 #b1100010111110000111101111100101100100010000100000010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
