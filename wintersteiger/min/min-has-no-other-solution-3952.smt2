(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2873095883672700523447929299436509609222412109375p-209 {+ 1293927355110808 -209 (1.56464e-063)}
; Y = 1.0767037126040150951666873879730701446533203125p-962 {+ 345442811501376 -962 (2.76211e-290)}
; 1.2873095883672700523447929299436509609222412109375p-209 m 1.0767037126040150951666873879730701446533203125p-962 == 1.0767037126040150951666873879730701446533203125p-962
; [HW: 1.0767037126040150951666873879730701446533203125p-962] 

; mpf : + 345442811501376 -962
; mpfd: + 345442811501376 -962 (2.76211e-290) class: Pos. norm. non-zero
; hwf : + 345442811501376 -962 (2.76211e-290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101110 #b0100100110001101000111110000010111011101010110011000)))
(assert (= y (fp #b0 #b00000111101 #b0001001110100010110110101100000100011101101101000000)))
(assert (= r (fp #b0 #b00000111101 #b0001001110100010110110101100000100011101101101000000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
