(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8463232613307158924698114788043312728404998779296875p466 {- 3811501124363995 466 (-3.51792e+140)}
; Y = 1.074912504840841886988300757366232573986053466796875p858 {+ 337375928886606 858 (2.0659e+258)}
; -1.8463232613307158924698114788043312728404998779296875p466 m 1.074912504840841886988300757366232573986053466796875p858 == -1.8463232613307158924698114788043312728404998779296875p466
; [HW: -1.8463232613307158924698114788043312728404998779296875p466] 

; mpf : - 3811501124363995 466
; mpfd: - 3811501124363995 466 (-3.51792e+140) class: Neg. norm. non-zero
; hwf : - 3811501124363995 466 (-3.51792e+140) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111010001 #b1101100010101000101001000010100101000010011011011011)))
(assert (= y (fp #b0 #b11101011001 #b0001001100101101011101110100011001011010010101001110)))
(assert (= r (fp #b1 #b10111010001 #b1101100010101000101001000010100101000010011011011011)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
