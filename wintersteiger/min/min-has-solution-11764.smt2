(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3816543721851692883006990086869336664676666259765625p853 {+ 1718818488357449 853 (8.29823e+256)}
; Y = -1.0455129587841478500109815286123193800449371337890625p961 {- 204972144220817 961 (-2.03777e+289)}
; 1.3816543721851692883006990086869336664676666259765625p853 m -1.0455129587841478500109815286123193800449371337890625p961 == -1.0455129587841478500109815286123193800449371337890625p961
; [HW: -1.0455129587841478500109815286123193800449371337890625p961] 

; mpf : - 204972144220817 961
; mpfd: - 204972144220817 961 (-2.03777e+289) class: Neg. norm. non-zero
; hwf : - 204972144220817 961 (-2.03777e+289) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010100 #b0110000110110100000110011101011011101001001001001001)))
(assert (= y (fp #b1 #b11111000000 #b0000101110100110101111001011110110000101101010010001)))
(assert (= r (fp #b1 #b11111000000 #b0000101110100110101111001011110110000101101010010001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
