(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2150705144261786383452772497548721730709075927734375p-777 {+ 968591488628119 -777 (1.5286e-234)}
; Y = -1.931403788342249239207149003050290048122406005859375p-474 {- 4194669754109622 -474 (-3.95963e-143)}
; 1.2150705144261786383452772497548721730709075927734375p-777 m -1.931403788342249239207149003050290048122406005859375p-474 == -1.931403788342249239207149003050290048122406005859375p-474
; [HW: -1.931403788342249239207149003050290048122406005859375p-474] 

; mpf : - 4194669754109622 -474
; mpfd: - 4194669754109622 -474 (-3.95963e-143) class: Neg. norm. non-zero
; hwf : - 4194669754109622 -474 (-3.95963e-143) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011110110 #b0011011100001110110111000111100111001011010110010111)))
(assert (= y (fp #b1 #b01000100101 #b1110111001110000011110101000101001001100111010110110)))
(assert (= r (fp #b1 #b01000100101 #b1110111001110000011110101000101001001100111010110110)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
