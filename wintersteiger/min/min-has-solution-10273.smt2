(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6460668335664865313816562775173224508762359619140625p-892 {+ 2909626350906465 -892 (4.9853e-269)}
; Y = 1.3100353111919049720057728336541913449764251708984375p535 {+ 1396274911955559 535 (1.47343e+161)}
; 1.6460668335664865313816562775173224508762359619140625p-892 m 1.3100353111919049720057728336541913449764251708984375p535 == 1.6460668335664865313816562775173224508762359619140625p-892
; [HW: 1.6460668335664865313816562775173224508762359619140625p-892] 

; mpf : + 2909626350906465 -892
; mpfd: + 2909626350906465 -892 (4.9853e-269) class: Pos. norm. non-zero
; hwf : + 2909626350906465 -892 (4.9853e-269) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000011 #b1010010101100100101000101101000100110010110001100001)))
(assert (= y (fp #b0 #b11000010110 #b0100111101011110011110010110001000101100101001100111)))
(assert (= r (fp #b0 #b00010000011 #b1010010101100100101000101101000100110010110001100001)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
