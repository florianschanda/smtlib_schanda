(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.68947758595642216761234521982260048389434814453125p103 {- 3105130999193652 103 (-1.71333e+031)}
; Y = 1.2548807433627382490470836273743771016597747802734375p443 {+ 1147880820832343 443 (2.8503e+133)}
; -1.68947758595642216761234521982260048389434814453125p103 m 1.2548807433627382490470836273743771016597747802734375p443 == -1.68947758595642216761234521982260048389434814453125p103
; [HW: -1.68947758595642216761234521982260048389434814453125p103] 

; mpf : - 3105130999193652 103
; mpfd: - 3105130999193652 103 (-1.71333e+031) class: Neg. norm. non-zero
; hwf : - 3105130999193652 103 (-1.71333e+031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100110 #b1011000010000001100110100110001100000010000000110100)))
(assert (= y (fp #b0 #b10110111010 #b0100000100111111110111010100100100011111100001010111)))
(assert (= r (fp #b1 #b10001100110 #b1011000010000001100110100110001100000010000000110100)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
