(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7320971645157268170578390709124505519866943359375p428 {+ 3297072517312024 428 (1.20063e+129)}
; Y = -1.578656637076303326239212765358388423919677734375p-624 {- 2606037815112304 -624 (-2.26762e-188)}
; 1.7320971645157268170578390709124505519866943359375p428 m -1.578656637076303326239212765358388423919677734375p-624 == -1.578656637076303326239212765358388423919677734375p-624
; [HW: -1.578656637076303326239212765358388423919677734375p-624] 

; mpf : - 2606037815112304 -624
; mpfd: - 2606037815112304 -624 (-2.26762e-188) class: Neg. norm. non-zero
; hwf : - 2606037815112304 -624 (-2.26762e-188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110101011 #b1011101101101010101110000100001100010110111000011000)))
(assert (= y (fp #b1 #b00110001111 #b1001010000100010110101110110001111011011001001110000)))
(assert (= r (fp #b1 #b00110001111 #b1001010000100010110101110110001111011011001001110000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
