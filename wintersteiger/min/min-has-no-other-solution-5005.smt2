(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8390806389420450983607224770821630954742431640625p310 {- 3778883252873192 310 (-3.83618e+093)}
; Y = 1.665096044148309584187472864869050681591033935546875p177 {+ 2995326296591918 177 (3.18969e+053)}
; -1.8390806389420450983607224770821630954742431640625p310 m 1.665096044148309584187472864869050681591033935546875p177 == -1.8390806389420450983607224770821630954742431640625p310
; [HW: -1.8390806389420450983607224770821630954742431640625p310] 

; mpf : - 3778883252873192 310
; mpfd: - 3778883252873192 310 (-3.83618e+093) class: Neg. norm. non-zero
; hwf : - 3778883252873192 310 (-3.83618e+093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110101 #b1101011011001101111111010001111011110110011111101000)))
(assert (= y (fp #b0 #b10010110000 #b1010101001000011101110111111111001010000111000101110)))
(assert (= r (fp #b1 #b10100110101 #b1101011011001101111111010001111011110110011111101000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
