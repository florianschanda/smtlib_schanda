(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.254220111452645891603197014774195849895477294921875p884 {+ 1144905599208222 884 (1.61767e+266)}
; Y = -1.649792126469446618131087234360165894031524658203125p993 {- 2926403578636082 993 (-1.38107e+299)}
; 1.254220111452645891603197014774195849895477294921875p884 m -1.649792126469446618131087234360165894031524658203125p993 == -1.649792126469446618131087234360165894031524658203125p993
; [HW: -1.649792126469446618131087234360165894031524658203125p993] 

; mpf : - 2926403578636082 993
; mpfd: - 2926403578636082 993 (-1.38107e+299) class: Neg. norm. non-zero
; hwf : - 2926403578636082 993 (-1.38107e+299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101110011 #b0100000100010100100100011011100010101100101100011110)))
(assert (= y (fp #b1 #b11111100000 #b1010011001011000110001101101110001100010011100110010)))
(assert (= r (fp #b1 #b11111100000 #b1010011001011000110001101101110001100010011100110010)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
