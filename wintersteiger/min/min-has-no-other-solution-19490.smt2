(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.588271442490265084046541232964955270290374755859375p-706 {+ 2649339049191862 -706 (4.71789e-213)}
; Y = -1.918028469280474990199536478030495345592498779296875p420 {- 4134432672167054 420 (-5.19342e+126)}
; 1.588271442490265084046541232964955270290374755859375p-706 m -1.918028469280474990199536478030495345592498779296875p420 == -1.918028469280474990199536478030495345592498779296875p420
; [HW: -1.918028469280474990199536478030495345592498779296875p420] 

; mpf : - 4134432672167054 420
; mpfd: - 4134432672167054 420 (-5.19342e+126) class: Neg. norm. non-zero
; hwf : - 4134432672167054 420 (-5.19342e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111101 #b1001011010011000111101010000111010101010100110110110)))
(assert (= y (fp #b1 #b10110100011 #b1110101100000011111010011110110001011011010010001110)))
(assert (= r (fp #b1 #b10110100011 #b1110101100000011111010011110110001011011010010001110)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
