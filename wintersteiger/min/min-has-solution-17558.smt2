(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.12059921998303746448755191522650420665740966796875p490 {+ 543130602176780 490 (3.58219e+147)}
; Y = 1.2829126615479340411951625355868600308895111083984375p-809 {+ 1274125357125671 -809 (3.75777e-244)}
; 1.12059921998303746448755191522650420665740966796875p490 m 1.2829126615479340411951625355868600308895111083984375p-809 == 1.2829126615479340411951625355868600308895111083984375p-809
; [HW: 1.2829126615479340411951625355868600308895111083984375p-809] 

; mpf : + 1274125357125671 -809
; mpfd: + 1274125357125671 -809 (3.75777e-244) class: Pos. norm. non-zero
; hwf : + 1274125357125671 -809 (3.75777e-244) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111101001 #b0001111011011111100101110010100111000000000100001100)))
(assert (= y (fp #b0 #b00011010110 #b0100100001101100111101101101010011111001000000100111)))
(assert (= r (fp #b0 #b00011010110 #b0100100001101100111101101101010011111001000000100111)))
(assert (= (fp.min x y) r))
(check-sat)
(exit)
