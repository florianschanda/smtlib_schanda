(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.178739518508930661511158177745528519153594970703125p-22 {+ 804971228953202 -22 (2.81033e-007)}
; Y = 1.3164537885483957868615334518835879862308502197265625p-660 {+ 1425181164186537 -660 (2.75175e-199)}
; 1.178739518508930661511158177745528519153594970703125p-22 m 1.3164537885483957868615334518835879862308502197265625p-660 == 1.3164537885483957868615334518835879862308502197265625p-660
; [HW: 1.3164537885483957868615334518835879862308502197265625p-660] 

; mpf : + 1425181164186537 -660
; mpfd: + 1425181164186537 -660 (2.75175e-199) class: Pos. norm. non-zero
; hwf : + 1425181164186537 -660 (2.75175e-199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101001 #b0010110111000001110111111000001001111111101001110010)))
(assert (= y (fp #b0 #b00101101011 #b0101000100000011000111011001000010000010101110101001)))
(assert (= r (fp #b0 #b00101101011 #b0101000100000011000111011001000010000010101110101001)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
