(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6867822736786657333851735529606230556964874267578125p-329 {+ 3092992391823901 -329 (1.54238e-099)}
; Y = 1.2076713407344608075533187729888595640659332275390625p57 {+ 935268572747249 57 (1.74044e+017)}
; 1.6867822736786657333851735529606230556964874267578125p-329 m 1.2076713407344608075533187729888595640659332275390625p57 == 1.6867822736786657333851735529606230556964874267578125p-329
; [HW: 1.6867822736786657333851735529606230556964874267578125p-329] 

; mpf : + 3092992391823901 -329
; mpfd: + 3092992391823901 -329 (1.54238e-099) class: Pos. norm. non-zero
; hwf : + 3092992391823901 -329 (1.54238e-099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110110 #b1010111111010000111101101000110011101100001000011101)))
(assert (= y (fp #b0 #b10000111000 #b0011010100101001111100101111000011000101010111110001)))
(assert (= r (fp #b0 #b01010110110 #b1010111111010000111101101000110011101100001000011101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
