(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5900481294604109638868294496205635368824005126953125p-43 {+ 2657340535968565 -43 (1.80768e-013)}
; Y = 1.6741554424834348413497764340718276798725128173828125p-600 {+ 3036126199558189 -600 (4.03458e-181)}
; 1.5900481294604109638868294496205635368824005126953125p-43 m 1.6741554424834348413497764340718276798725128173828125p-600 == 1.6741554424834348413497764340718276798725128173828125p-600
; [HW: 1.6741554424834348413497764340718276798725128173828125p-600] 

; mpf : + 3036126199558189 -600
; mpfd: + 3036126199558189 -600 (4.03458e-181) class: Pos. norm. non-zero
; hwf : + 3036126199558189 -600 (4.03458e-181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010100 #b1001011100001101011001001110101100011001001100110101)))
(assert (= y (fp #b0 #b00110100111 #b1010110010010101011100110111100111100011000000101101)))
(assert (= r (fp #b0 #b00110100111 #b1010110010010101011100110111100111100011000000101101)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
