(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1631767347003194590371322192368097603321075439453125p217 {+ 734882681591893 217 (2.44994e+065)}
; Y = 1.7549019301747399435242869003559462726116180419921875p-637 {+ 3399776051436227 -637 (3.07713e-192)}
; 1.1631767347003194590371322192368097603321075439453125p217 m 1.7549019301747399435242869003559462726116180419921875p-637 == 1.7549019301747399435242869003559462726116180419921875p-637
; [HW: 1.7549019301747399435242869003559462726116180419921875p-637] 

; mpf : + 3399776051436227 -637
; mpfd: + 3399776051436227 -637 (3.07713e-192) class: Pos. norm. non-zero
; hwf : + 3399776051436227 -637 (3.07713e-192) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011011000 #b0010100111000101111100110101001100000001100001010101)))
(assert (= y (fp #b0 #b00110000010 #b1100000101000001010000001011110111001001101011000011)))
(assert (= r (fp #b0 #b00110000010 #b1100000101000001010000001011110111001001101011000011)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
