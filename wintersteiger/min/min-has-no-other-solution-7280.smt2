(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.87890497592430705253718770109117031097412109375p-142 {- 3958236122066784 -142 (-3.37012e-043)}
; Y = 1.579245103925871251959733854164369404315948486328125p215 {+ 2608688034196738 215 (8.3157e+064)}
; -1.87890497592430705253718770109117031097412109375p-142 m 1.579245103925871251959733854164369404315948486328125p215 == -1.87890497592430705253718770109117031097412109375p-142
; [HW: -1.87890497592430705253718770109117031097412109375p-142] 

; mpf : - 3958236122066784 -142
; mpfd: - 3958236122066784 -142 (-3.37012e-043) class: Neg. norm. non-zero
; hwf : - 3958236122066784 -142 (-3.37012e-043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110001 #b1110000011111111111010101001111111100010111101100000)))
(assert (= y (fp #b0 #b10011010110 #b1001010001001001011010000011100110111010110100000010)))
(assert (= r (fp #b1 #b01101110001 #b1110000011111111111010101001111111100010111101100000)))
(assert  (not (= (fp.min x y) r)))
(check-sat)
(exit)
