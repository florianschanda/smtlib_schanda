(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.070587561601919812659389208420179784297943115234375p-828 {- 317898116127398 -828 (-5.98117e-250)}
; Y = 1.4887179446368625779228977989987470209598541259765625p918 {+ 2200989953355849 918 (3.29874e+276)}
; -1.070587561601919812659389208420179784297943115234375p-828 * 1.4887179446368625779228977989987470209598541259765625p918 == -1.5938029142618004296849676393321715295314788818359375p90
; [HW: -1.5938029142618004296849676393321715295314788818359375p90] 

; mpf : - 2674250583400959 90
; mpfd: - 2674250583400959 90 (-1.97303e+027) class: Neg. norm. non-zero
; hwf : - 2674250583400959 90 (-1.97303e+027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000011 #b0001001000010010000001101100010010010101101010100110)))
(assert (= y (fp #b0 #b11110010101 #b0111110100011100100111101000010100101111000001001001)))
(assert (= r (fp #b1 #b10001011001 #b1001100000000011011101111100000100000110000111111111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
