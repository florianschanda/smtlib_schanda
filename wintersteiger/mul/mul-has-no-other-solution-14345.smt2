(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.107784828043960612120599762420170009136199951171875p297 {- 485419711414974 297 (-2.82075e+089)}
; Y = -1.723549742978226273493191911256872117519378662109375p23 {- 3258578352860758 23 (-1.44582e+007)}
; -1.107784828043960612120599762420170009136199951171875p297 * -1.723549742978226273493191911256872117519378662109375p23 == 1.9093222556503468556599045768962241709232330322265625p320
; [HW: 1.9093222556503468556599045768962241709232330322265625p320] 

; mpf : + 4095223371706601 320
; mpfd: + 4095223371706601 320 (4.07829e+096) class: Pos. norm. non-zero
; hwf : + 4095223371706601 320 (4.07829e+096) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101000 #b0001101110010111110010010101011101110100001010111110)))
(assert (= y (fp #b1 #b10000010110 #b1011100100111010100011100101001100011110111001010110)))
(assert (= r (fp #b0 #b10100111111 #b1110100011001001010101111110010110001011000011101001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
