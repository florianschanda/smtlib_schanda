(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1869987359428773032732351566664874553680419921875p535 {+ 842167437511096 535 (1.33505e+161)}
; Y = 1.9413886519645064954175950333592481911182403564453125p-437 {+ 4239637582198165 -437 (5.47021e-132)}
; 1.1869987359428773032732351566664874553680419921875p535 * 1.9413886519645064954175950333592481911182403564453125p-437 == 1.1522129379278578387157949691754765808582305908203125p99
; [HW: 1.1522129379278578387157949691754765808582305908203125p99] 

; mpf : + 685506130532869 99
; mpfd: + 685506130532869 99 (7.30302e+029) class: Pos. norm. non-zero
; hwf : + 685506130532869 99 (7.30302e+029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000010110 #b0010111111011111001001100010111101000100100110111000)))
(assert (= y (fp #b0 #b01001001010 #b1111000011111110110110001100000100000011010110010101)))
(assert (= r (fp #b0 #b10001100010 #b0010011011110111011011010101011001101101101000000101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
