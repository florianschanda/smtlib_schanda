(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.60593745286990685627870334428735077381134033203125p-456 {+ 2728899686954740 -456 (8.63079e-138)}
; Y = -1.64617445289534014563059827196411788463592529296875p43 {- 2910111025275788 43 (-1.44799e+013)}
; 1.60593745286990685627870334428735077381134033203125p-456 * -1.64617445289534014563059827196411788463592529296875p43 == -1.321826603931127497304487405926920473575592041015625p-412
; [HW: -1.321826603931127497304487405926920473575592041015625p-412] 

; mpf : - 1449378173542138 -412
; mpfd: - 1449378173542138 -412 (-1.24973e-124) class: Neg. norm. non-zero
; hwf : - 1449378173542138 -412 (-1.24973e-124) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110111 #b1001101100011110101101111000011101111111011011110100)))
(assert (= y (fp #b1 #b10000101010 #b1010010101101011101100000101111010110010001110001100)))
(assert (= r (fp #b1 #b01001100011 #b0101001001100011001110100111001011011101111011111010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
