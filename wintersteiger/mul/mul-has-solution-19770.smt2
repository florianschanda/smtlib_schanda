(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.918066579261486825913607390248216688632965087890625p-139 {- 4134604304263338 -139 (-2.75229e-042)}
; Y = -1.454087388633786392944102772162295877933502197265625p-736 {- 2045027794244762 -736 (-4.02266e-222)}
; -1.918066579261486825913607390248216688632965087890625p-139 * -1.454087388633786392944102772162295877933502197265625p-736 == 1.3945182117320376047331365043646655976772308349609375p-874
; [HW: 1.3945182117320376047331365043646655976772308349609375p-874] 

; mpf : + 1776752071347279 -874
; mpfd: + 1776752071347279 -874 (1.10715e-263) class: Pos. norm. non-zero
; hwf : + 1776752071347279 -874 (1.10715e-263) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110100 #b1110101100000110011010010100110101111010100010101010)))
(assert (= y (fp #b1 #b00100011111 #b0111010000111111000100100011001110110101010010011010)))
(assert (= r (fp #b0 #b00010010101 #b0110010011111111001001010100000100010000110001001111)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
