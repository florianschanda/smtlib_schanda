(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8972464421190535777128616246045567095279693603515625p215 {+ 4040838742386873 215 (9.99017e+064)}
; Y = 1.13555754944652509408342666574753820896148681640625p-513 {+ 610496929174628 -513 (4.23469e-155)}
; 1.8972464421190535777128616246045567095279693603515625p215 * 1.13555754944652509408342666574753820896148681640625p-513 == 1.077216260254425517217669039382599294185638427734375p-297
; [HW: 1.077216260254425517217669039382599294185638427734375p-297] 

; mpf : + 347751120908774 -297
; mpfd: + 347751120908774 -297 (4.23052e-090) class: Pos. norm. non-zero
; hwf : + 347751120908774 -297 (4.23052e-090) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011010110 #b1110010110110001111100010101110101011010100010111001)))
(assert (= y (fp #b0 #b00111111110 #b0010001010110011111001100100100110011001010001100100)))
(assert (= r (fp #b0 #b01011010110 #b0001001111000100011100011110000010000011000111100110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
