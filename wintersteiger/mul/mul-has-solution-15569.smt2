(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9863816371977007779747737004072405397891998291015625p-936 {- 4442267973728665 -936 (-3.41969e-282)}
; Y = 1.712757665520368899336745016626082360744476318359375p474 {+ 3209975156842998 474 (8.35437e+142)}
; -1.9863816371977007779747737004072405397891998291015625p-936 * 1.712757665520368899336745016626082360744476318359375p474 == -1.7010951878796312097819054542924277484416961669921875p-461
; [HW: -1.7010951878796312097819054542924277484416961669921875p-461] 

; mpf : - 3157452026885955 -461
; mpfd: - 3157452026885955 -461 (-2.85694e-139) class: Neg. norm. non-zero
; hwf : - 3157452026885955 -461 (-2.85694e-139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001010111 #b1111110010000011100000011100100100100011100110011001)))
(assert (= y (fp #b0 #b10111011001 #b1011011001110111010010010100111101100010000111110110)))
(assert (= r (fp #b1 #b01000110010 #b1011001101111010111110010110011101010011011101000011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
