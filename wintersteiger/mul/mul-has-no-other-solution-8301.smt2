(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.030701077536364973497029495774768292903900146484375p-537 {- 138265361352646 -537 (-2.291e-162)}
; Y = -1.008459439291425230322829520446248352527618408203125p-392 {- 38097927640626 -392 (-9.9977e-119)}
; -1.030701077536364973497029495774768292903900146484375p-537 * -1.008459439291425230322829520446248352527618408203125p-392 == 1.039420230729390492996344619314186275005340576171875p-929
; [HW: 1.039420230729390492996344619314186275005340576171875p-929] 

; mpf : + 177532936423742 -929
; mpfd: + 177532936423742 -929 (2.29047e-280) class: Pos. norm. non-zero
; hwf : + 177532936423742 -929 (2.29047e-280) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100110 #b0000011111011100000001101001101111111000011111000110)))
(assert (= y (fp #b1 #b01001110111 #b0000001000101010011001011101011100011001011000110010)))
(assert (= r (fp #b0 #b00001011110 #b0000101000010111011100011011100111001000100100111110)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
