(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2234841827777349632100367671228013932704925537109375p237 {+ 1006483282281007 237 (2.70214e+071)}
; Y = -1.8649517716708328141095307728392072021961212158203125p-476 {- 3895396476590213 -476 (-9.5585e-144)}
; 1.2234841827777349632100367671228013932704925537109375p237 * -1.8649517716708328141095307728392072021961212158203125p-476 == -1.140869497141288935182501518283970654010772705078125p-238
; [HW: -1.140869497141288935182501518283970654010772705078125p-238] 

; mpf : - 634419814833378 -238
; mpfd: - 634419814833378 -238 (-2.58284e-072) class: Neg. norm. non-zero
; hwf : - 634419814833378 -238 (-2.58284e-072) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011101100 #b0011100100110110010000100110100000110100001000101111)))
(assert (= y (fp #b1 #b01000100011 #b1101110101101101011110101011001111110001100010000101)))
(assert (= r (fp #b1 #b01100010001 #b0010010000010000000001011111101100111001110011100010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
