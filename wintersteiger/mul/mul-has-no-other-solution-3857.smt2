(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6239397238944806023397404715069569647312164306640625p-704 {- 2809974708032833 -704 (-1.92954e-212)}
; Y = -1.4465037802948479406239812306012026965618133544921875p188 {- 2010874258555395 188 (-5.67491e+056)}
; -1.6239397238944806023397404715069569647312164306640625p-704 * -1.4465037802948479406239812306012026965618133544921875p188 == 1.17451747479216894731735010282136499881744384765625p-515
; [HW: 1.17451747479216894731735010282136499881744384765625p-515] 

; mpf : + 785956834443652 -515
; mpfd: + 785956834443652 -515 (1.09499e-155) class: Pos. norm. non-zero
; hwf : + 785956834443652 -515 (1.09499e-155) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111111 #b1001111110111010100000111000010011001101010101000001)))
(assert (= y (fp #b1 #b10010111011 #b0111001001001110000100100101110111101000001000000011)))
(assert (= r (fp #b0 #b00111111100 #b0010110010101101001011010101111011010000000110000100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
