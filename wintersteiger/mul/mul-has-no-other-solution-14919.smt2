(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0519457346859144575290656575816683471202850341796875p175 {+ 233942791374971 175 (5.03782e+052)}
; Y = -1.5360744576012905771023042689193971455097198486328125p395 {- 2414264727496013 395 (-1.23954e+119)}
; 1.0519457346859144575290656575816683471202850341796875p175 * -1.5360744576012905771023042689193971455097198486328125p395 == -1.6158669738336570720349527618964202702045440673828125p570
; [HW: -1.6158669738336570720349527618964202702045440673828125p570] 

; mpf : - 2773618273867053 570
; mpfd: - 2773618273867053 570 (-6.24458e+171) class: Neg. norm. non-zero
; hwf : - 2773618273867053 570 (-6.24458e+171) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010101110 #b0000110101001100010100001100111110100100100001111011)))
(assert (= y (fp #b1 #b10110001010 #b1000100100111100001011001111011110011110010101001101)))
(assert (= r (fp #b1 #b11000111001 #b1001110110101001011101010011111101001101010100101101)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
