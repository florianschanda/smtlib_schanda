(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6525844609750424130112378406920470297336578369140625p989 {- 2938979135274977 989 (-8.64628e+297)}
; Y = 1.399237087067507712134784014779143035411834716796875p-252 {+ 1798003996549710 -252 (1.93345e-076)}
; -1.6525844609750424130112378406920470297336578369140625p989 * 1.399237087067507712134784014779143035411834716796875p-252 == -1.156178733653872914288740503252483904361724853515625p738
; [HW: -1.156178733653872914288740503252483904361724853515625p738] 

; mpf : - 703366486686778 738
; mpfd: - 703366486686778 738 (-1.67171e+222) class: Neg. norm. non-zero
; hwf : - 703366486686778 738 (-1.67171e+222) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111011100 #b1010011100001111110001100111010111000011111111100001)))
(assert (= y (fp #b0 #b01100000011 #b0110011000110100011001101101100001001110001001001110)))
(assert (= r (fp #b1 #b11011100001 #b0010011111111011010101000101100101011111110000111010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
