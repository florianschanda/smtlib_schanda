(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2466337340098012642641833735979162156581878662109375p-794 {- 1110739592583535 -794 (-1.19653e-239)}
; Y = 1.930604444385244367055065595195628702640533447265625p568 {+ 4191069828962714 568 (1.86522e+171)}
; -1.2466337340098012642641833735979162156581878662109375p-794 * 1.930604444385244367055065595195628702640533447265625p568 == -1.2033783136999474105977014914969913661479949951171875p-225
; [HW: -1.2033783136999474105977014914969913661479949951171875p-225] 

; mpf : - 915934497794323 -225
; mpfd: - 915934497794323 -225 (-2.23179e-068) class: Neg. norm. non-zero
; hwf : - 915934497794323 -225 (-2.23179e-068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011100101 #b0011111100100011011000110110110110101001100101101111)))
(assert (= y (fp #b0 #b11000110111 #b1110111000111100000101111100011000100101100110011010)))
(assert (= r (fp #b1 #b01100011110 #b0011010000010000100110011110011000001110100100010011)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
