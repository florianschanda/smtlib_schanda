(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.664804099150367644455172921880148351192474365234375p-132 {+ 2994011493207974 -132 (3.05776e-040)}
; Y = 1.1625627748332447719548099485109560191631317138671875p-657 {+ 732117652163315 -657 (1.94406e-198)}
; 1.664804099150367644455172921880148351192474365234375p-132 * 1.1625627748332447719548099485109560191631317138671875p-657 == 1.9354392730620115781192680515232495963573455810546875p-789
; [HW: 1.9354392730620115781192680515232495963573455810546875p-789] 

; mpf : + 4212843961589803 -789
; mpfd: + 4212843961589803 -789 (5.94447e-238) class: Pos. norm. non-zero
; hwf : + 4212843961589803 -789 (5.94447e-238) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101111011 #b1010101000110000100110011111100000011000111110100110)))
(assert (= y (fp #b0 #b00101101110 #b0010100110011101101101101100100101110100101011110011)))
(assert (= r (fp #b0 #b00011101010 #b1110111101111000111100101011110100110010000000101011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
