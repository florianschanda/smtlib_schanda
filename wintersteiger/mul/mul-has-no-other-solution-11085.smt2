(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5581919182175083538055559984059073030948638916015625p-99 {+ 2513872914885593 -99 (2.45839e-030)}
; Y = -1.1433395430728783281892901868559420108795166015625p-627 {- 645543912770472 -627 (-2.0529e-189)}
; 1.5581919182175083538055559984059073030948638916015625p-99 * -1.1433395430728783281892901868559420108795166015625p-627 == -1.781542435794657652792238877736963331699371337890625p-726
; [HW: -1.781542435794657652792238877736963331699371337890625p-726] 

; mpf : - 3519754222619050 -726
; mpfd: - 3519754222619050 -726 (-5.04684e-219) class: Neg. norm. non-zero
; hwf : - 3519754222619050 -726 (-5.04684e-219) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011100 #b1000111011100101101010100110000110100010101111011001)))
(assert (= y (fp #b1 #b00110001100 #b0010010010110001111001100111100110111000101110101000)))
(assert (= r (fp #b1 #b00100101001 #b1100100000010011001010100100001000101100100110101010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
