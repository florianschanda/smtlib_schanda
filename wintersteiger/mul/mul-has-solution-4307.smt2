(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2932932110491119903628032261622138321399688720703125p501 {- 1320875195991077 501 (-8.46691e+150)}
; Y = 1.4313499110299205963059421264915727078914642333984375p21 {+ 1942627298580647 21 (3.00176e+006)}
; -1.2932932110491119903628032261622138321399688720703125p501 * 1.4313499110299205963059421264915727078914642333984375p21 == -1.8511551225707465473391266641556285321712493896484375p522
; [HW: -1.8511551225707465473391266641556285321712493896484375p522] 

; mpf : - 3833261892844103 522
; mpfd: - 3833261892844103 522 (-2.54156e+157) class: Neg. norm. non-zero
; hwf : - 3833261892844103 522 (-2.54156e+157) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110100 #b0100101100010101010000111000110110011000010000100101)))
(assert (= y (fp #b0 #b10000010100 #b0110111001101100111100101010000100000001100010100111)))
(assert (= r (fp #b1 #b11000001001 #b1101100111100101010011010101011101000011101001000111)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
