(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.393348649927649063329226919449865818023681640625p-985 {- 1771484833240848 -985 (-4.26102e-297)}
; Y = 1.713439288590610676266123846289701759815216064453125p852 {+ 3213044914248146 852 (5.14547e+256)}
; -1.393348649927649063329226919449865818023681640625p-985 * 1.713439288590610676266123846289701759815216064453125p852 == -1.1937091597453595159805672665243037045001983642578125p-132
; [HW: -1.1937091597453595159805672665243037045001983642578125p-132] 

; mpf : - 872388499647453 -132
; mpfd: - 872388499647453 -132 (-2.1925e-040) class: Neg. norm. non-zero
; hwf : - 872388499647453 -132 (-2.1925e-040) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100110 #b0110010010110010011111110100001101011101011100010000)))
(assert (= y (fp #b0 #b11101010011 #b1011011010100011111101010000110000101101100111010010)))
(assert (= r (fp #b1 #b01101111011 #b0011000110010110111011000110101000001010101111011101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
