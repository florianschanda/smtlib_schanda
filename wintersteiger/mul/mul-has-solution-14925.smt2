(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4030405703831523300806338738766498863697052001953125p631 {- 1815133362592757 631 (-1.25025e+190)}
; Y = 1.7823145857939142189252379466779530048370361328125p-570 {+ 3523231677067976 -570 (4.61197e-172)}
; -1.4030405703831523300806338738766498863697052001953125p631 * 1.7823145857939142189252379466779530048370361328125p-570 == -1.2503298365272528247515992916305549442768096923828125p62
; [HW: -1.2503298365272528247515992916305549442768096923828125p62] 

; mpf : - 1127385358503853 62
; mpfd: - 1127385358503853 62 (-5.76613e+018) class: Neg. norm. non-zero
; hwf : - 1127385358503853 62 (-5.76613e+018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110110 #b0110011100101101101010101011010011000001101111110101)))
(assert (= y (fp #b0 #b00111000101 #b1100100001000101110001001100100100101011001011001000)))
(assert (= r (fp #b1 #b10000111101 #b0100000000010101100111011011110100011000111110101101)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
