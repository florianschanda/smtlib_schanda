(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0217193557751149679546642801142297685146331787109375p-416 {+ 97815282575535 -416 (6.03745e-126)}
; Y = -1.5358029205974788045097056965460069477558135986328125p653 {- 2413041833546829 653 (-5.74014e+196)}
; 1.0217193557751149679546642801142297685146331787109375p-416 * -1.5358029205974788045097056965460069477558135986328125p653 == -1.5691595706303960167105060463654808700084686279296875p237
; [HW: -1.5691595706303960167105060463654808700084686279296875p237] 

; mpf : - 2563266830205403 237
; mpfd: - 2563266830205403 237 (-3.46558e+071) class: Neg. norm. non-zero
; hwf : - 2563266830205403 237 (-3.46558e+071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001011111 #b0000010110001111011001100101001010111110100010101111)))
(assert (= y (fp #b1 #b11010001100 #b1000100100101010011000010101010100010001010001001101)))
(assert (= r (fp #b1 #b10011101100 #b1001000110110100011100010000111000010000000111011011)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
