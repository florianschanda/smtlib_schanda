(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7297349917576181344003316553425975143909454345703125p-315 {- 3286434236958821 -315 (-2.59138e-095)}
; Y = 1.1804559962691125729605801097932271659374237060546875p-315 {+ 812701557554347 -315 (1.76848e-095)}
; -1.7297349917576181344003316553425975143909454345703125p-315 * 1.1804559962691125729605801097932271659374237060546875p-315 == -1.020938021488392077884554964839480817317962646484375p-629
; [HW: -1.020938021488392077884554964839480817317962646484375p-629] 

; mpf : - 94296465772998 -629
; mpfd: - 94296465772998 -629 (-4.58281e-190) class: Neg. norm. non-zero
; hwf : - 94296465772998 -629 (-4.58281e-190) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011000100 #b1011101011001111111010011001010001011000100001100101)))
(assert (= y (fp #b0 #b01011000100 #b0010111000110010010111010011101001010111110010101011)))
(assert (= r (fp #b1 #b00110001010 #b0000010101011100001100011011010110001001000111000110)))
(assert (= (fp.mul roundTowardZero x y) r))
(check-sat)
(exit)
