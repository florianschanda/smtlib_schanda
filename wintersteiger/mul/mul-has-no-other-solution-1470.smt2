(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.23033410470355430987865474889986217021942138671875p363 {- 1037332588113644 363 (-2.31159e+109)}
; Y = -1.6616982052095183863826832748600281774997711181640625p-604 {- 2980023790413313 -604 (-2.50285e-182)}
; -1.23033410470355430987865474889986217021942138671875p363 * -1.6616982052095183863826832748600281774997711181640625p-604 == 1.022221986796977954981002767453901469707489013671875p-240
; [HW: 1.022221986796977954981002767453901469707489013671875p-240] 

; mpf : + 100078931458302 -240
; mpfd: + 100078931458302 -240 (5.78557e-073) class: Pos. norm. non-zero
; hwf : + 100078931458302 -240 (5.78557e-073) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101010 #b0011101011110111001011010000011011011010111011101100)))
(assert (= y (fp #b1 #b00110100011 #b1010100101100101000011011011011100110010011000000001)))
(assert (= r (fp #b0 #b01100001111 #b0000010110110000010101110001001010001011100011111110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
