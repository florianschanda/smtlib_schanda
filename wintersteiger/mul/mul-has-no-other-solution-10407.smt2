(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6281481568338815879570802280795760452747344970703125p-662 {+ 2828927805050533 -662 (8.50818e-200)}
; Y = -1.6742234304461980354261640968616120517253875732421875p-93 {- 3036432390121955 -93 (-1.69053e-028)}
; 1.6281481568338815879570802280795760452747344970703125p-662 * -1.6742234304461980354261640968616120517253875732421875p-93 == -1.362941896204537872705486734048463404178619384765625p-754
; [HW: -1.362941896204537872705486734048463404178619384765625p-754] 

; mpf : - 1634544988503898 -754
; mpfd: - 1634544988503898 -754 (-1.43834e-227) class: Neg. norm. non-zero
; hwf : - 1634544988503898 -754 (-1.43834e-227) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101101001 #b1010000011001110010100010100111010100100111010100101)))
(assert (= y (fp #b1 #b01110100010 #b1010110010011001111010000001111111110110100111100011)))
(assert (= r (fp #b1 #b00100001101 #b0101110011101001110000101001011010001011111101011010)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
