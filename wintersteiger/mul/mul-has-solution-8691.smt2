(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.337073116001384232021109710331074893474578857421875p-431 {+ 1518042359620446 -431 (2.41117e-130)}
; Y = 1.556661723462930968508999285404570400714874267578125p-694 {+ 2506981530359074 -694 (1.89399e-209)}
; 1.337073116001384232021109710331074893474578857421875p-431 * 1.556661723462930968508999285404570400714874267578125p-694 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b0101011001001010011011000111100110010110001101011110)))
(assert (= y (fp #b0 #b00101001001 #b1000111010000001011000011111100100110101010100100010)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
