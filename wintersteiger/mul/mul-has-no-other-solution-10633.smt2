(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6101546073418966376067373857949860394001007080078125p-282 {+ 2747892062263357 -282 (2.07209e-085)}
; Y = -1.684699313388102748234587124898098409175872802734375p-398 {- 3083611572635494 -398 (-2.60966e-120)}
; 1.6101546073418966376067373857949860394001007080078125p-282 * -1.684699313388102748234587124898098409175872802734375p-398 == -1.356313180718791588930116631672717630863189697265625p-679
; [HW: -1.356313180718791588930116631672717630863189697265625p-679] 

; mpf : - 1604691907912346 -679
; mpfd: - 1604691907912346 -679 (-5.40746e-205) class: Neg. norm. non-zero
; hwf : - 1604691907912346 -679 (-5.40746e-205) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100101 #b1001110000110011000101111010010000001001100000111101)))
(assert (= y (fp #b1 #b01001110001 #b1010111101001000011101000100011010011000011101100110)))
(assert (= r (fp #b1 #b00101011000 #b0101101100110111010101110011001001010010001010011010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
