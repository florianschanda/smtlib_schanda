(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7431772642959957320130115476786158978939056396484375p-802 {- 3346972850553671 -802 (-6.53559e-242)}
; Y = 1.444021780002599175674049547524191439151763916015625p87 {+ 1999696322964090 87 (2.23452e+026)}
; -1.7431772642959957320130115476786158978939056396484375p-802 * 1.444021780002599175674049547524191439151763916015625p87 == -1.2585929680243823636232036733417771756649017333984375p-714
; [HW: -1.2585929680243823636232036733417771756649017333984375p-714] 

; mpf : - 1164599194435239 -714
; mpfd: - 1164599194435239 -714 (-1.46039e-215) class: Neg. norm. non-zero
; hwf : - 1164599194435239 -714 (-1.46039e-215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011011101 #b1011111001000000110111010111110101001000001101000111)))
(assert (= y (fp #b0 #b10001010110 #b0111000110101011011010010100111111010010101001111010)))
(assert (= r (fp #b1 #b00100110101 #b0100001000110011001001100001010010100011111010100111)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
