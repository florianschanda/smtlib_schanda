(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.24877221361170764879489070153795182704925537109375p214 {+ 1120370448521820 214 (3.28778e+064)}
; Y = -1.3033887677103790370125580011517740786075592041015625p244 {- 1366341541208857 244 (-3.68462e+073)}
; 1.24877221361170764879489070153795182704925537109375p214 * -1.3033887677103790370125580011517740786075592041015625p244 == -1.6276356766503259354550436910358257591724395751953125p458
; [HW: -1.6276356766503259354550436910358257591724395751953125p458] 

; mpf : - 2826619799486837 458
; mpfd: - 2826619799486837 458 (-1.21142e+138) class: Neg. norm. non-zero
; hwf : - 2826619799486837 458 (-1.21142e+138) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011010101 #b0011111110101111100010010010100110011101101001011100)))
(assert (= y (fp #b1 #b10011110011 #b0100110110101010111000101110001101001010001100011001)))
(assert (= r (fp #b1 #b10111001001 #b1010000010101100101110110101000100000100000101110101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
