(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1777995689061035999856130729313008487224578857421875p-76 {+ 800738072272163 -76 (1.5588e-023)}
; Y = 1.582065961047908420056273826048709452152252197265625p383 {+ 2621392045280410 383 (3.11683e+115)}
; 1.1777995689061035999856130729313008487224578857421875p-76 * 1.582065961047908420056273826048709452152252197265625p383 == 1.8633566069032470036148652070551179349422454833984375p307
; [HW: 1.8633566069032470036148652070551179349422454833984375p307] 

; mpf : + 3888212493137319 307
; mpfd: + 3888212493137319 307 (4.85853e+092) class: Pos. norm. non-zero
; hwf : + 3888212493137319 307 (4.85853e+092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110110011 #b0010110110000100010001011100010110110001110100100011)))
(assert (= y (fp #b0 #b10101111110 #b1001010100000010010001100101101011010000110010011010)))
(assert (= r (fp #b0 #b10100110010 #b1101110100000100111100000100011101101111010110100111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
