(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.51725996112641769997253504698164761066436767578125p-349 {+ 2329531768182612 -349 (1.3231e-105)}
; Y = -1.9768167367734059691741776987328194081783294677734375p712 {- 4399191491741975 712 (-4.25915e+214)}
; 1.51725996112641769997253504698164761066436767578125p-349 * -1.9768167367734059691741776987328194081783294677734375p712 == -1.4996724425954350845557883076253347098827362060546875p364
; [HW: -1.4996724425954350845557883076253347098827362060546875p364] 

; mpf : - 2250324626280107 364
; mpfd: - 2250324626280107 364 (-5.63527e+109) class: Neg. norm. non-zero
; hwf : - 2250324626280107 364 (-5.63527e+109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100010 #b1000010001101011001001100001100010010001011101010100)))
(assert (= y (fp #b1 #b11011000111 #b1111101000010000101010010110001010100000100100010111)))
(assert (= r (fp #b1 #b10101101011 #b0111111111101010100010000111111110101000111010101011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
