(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.575836188400854265267980736098252236843109130859375p-805 {+ 2593335643508534 -805 (7.38524e-243)}
; Y = -1.1088365018345147650080662060645408928394317626953125p335 {- 490156029106229 335 (-7.76097e+100)}
; 1.575836188400854265267980736098252236843109130859375p-805 * -1.1088365018345147650080662060645408928394317626953125p335 == -1.7473446866106387975747793461778201162815093994140625p-470
; [HW: -1.7473446866106387975747793461778201162815093994140625p-470] 

; mpf : - 3365741252136993 -470
; mpfd: - 3365741252136993 -470 (-5.73166e-142) class: Neg. norm. non-zero
; hwf : - 3365741252136993 -470 (-5.73166e-142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011010 #b1001001101101010000000000001110100001000111100110110)))
(assert (= y (fp #b1 #b10101001110 #b0001101111011100101101010111111111111101100000110101)))
(assert (= r (fp #b1 #b01000101001 #b1011111101010001111110110011101111010101000000100001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
