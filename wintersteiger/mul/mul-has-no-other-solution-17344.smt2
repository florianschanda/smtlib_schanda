(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.39474298964480158957712774281390011310577392578125p-203 {- 1777764381071444 -203 (-1.08494e-061)}
; Y = 1.11145291274033031214685252052731812000274658203125p-372 {+ 501939296286708 -372 (1.1554e-112)}
; -1.39474298964480158957712774281390011310577392578125p-203 * 1.11145291274033031214685252052731812000274658203125p-372 == -1.5501911583648710912797241689986549317836761474609375p-575
; [HW: -1.5501911583648710912797241689986549317836761474609375p-575] 

; mpf : - 2477840695794575 -575
; mpfd: - 2477840695794575 -575 (-1.25354e-173) class: Neg. norm. non-zero
; hwf : - 2477840695794575 -575 (-1.25354e-173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110100 #b0110010100001101111000000110011011011001100001010100)))
(assert (= y (fp #b0 #b01010001011 #b0001110010001000001011011001011101000011011111110100)))
(assert (= r (fp #b1 #b00111000000 #b1000110011011001010100111110011110111001101110001111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
