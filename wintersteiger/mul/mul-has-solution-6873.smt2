(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8441272008512104019217758832382969558238983154296875p-376 {+ 3801610947206811 -376 (1.19815e-113)}
; Y = -1.697882113951119098516073790960945188999176025390625p-123 {- 3142981628338794 -123 (-1.59668e-037)}
; 1.8441272008512104019217758832382969558238983154296875p-376 * -1.697882113951119098516073790960945188999176025390625p-123 == -1.5655552950880065044003686125506646931171417236328125p-498
; [HW: -1.5655552950880065044003686125506646931171417236328125p-498] 

; mpf : - 2547034616215757 -498
; mpfd: - 2547034616215757 -498 (-1.91307e-150) class: Neg. norm. non-zero
; hwf : - 2547034616215757 -498 (-1.91307e-150) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010000111 #b1101100000011000101110000110000101010001111010011011)))
(assert (= y (fp #b1 #b01110000100 #b1011001010101000011001101111011111100010001001101010)))
(assert (= r (fp #b1 #b01000001101 #b1001000011001000001110110101100001111011100011001101)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
