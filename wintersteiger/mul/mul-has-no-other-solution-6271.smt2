(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.40741985679400105624381467350758612155914306640625p-599 {- 1834855915240804 -599 (-6.78354e-181)}
; Y = -1.818166275226156702871094239526428282260894775390625p-296 {- 3684693332235626 -296 (-1.42809e-089)}
; -1.40741985679400105624381467350758612155914306640625p-599 * -1.818166275226156702871094239526428282260894775390625p-296 == 1.2794616593532397441634884671657346189022064208984375p-894
; [HW: 1.2794616593532397441634884671657346189022064208984375p-894] 

; mpf : + 1258583424927591 -894
; mpfd: + 1258583424927591 -894 (9.68749e-270) class: Pos. norm. non-zero
; hwf : + 1258583424927591 -894 (9.68749e-270) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101000 #b0110100001001100101010101111000010101011110101100100)))
(assert (= y (fp #b1 #b01011010111 #b1101000101110011010110000101001011001001010101101010)))
(assert (= r (fp #b0 #b00010000001 #b0100011110001010110011001001111101101000011101100111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
