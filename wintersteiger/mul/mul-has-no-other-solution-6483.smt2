(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6747300842382359942206448977231048047542572021484375p-431 {+ 3038714155950983 -431 (3.02007e-130)}
; Y = 1.821040518757482740141995236626826226711273193359375p-577 {+ 3697637774332278 -577 (3.68139e-174)}
; 1.6747300842382359942206448977231048047542572021484375p-431 * 1.821040518757482740141995236626826226711273193359375p-577 == 1.5248756706899799784338256358751095831394195556640625p-1007
; [HW: 1.5248756706899799784338256358751095831394195556640625p-1007] 

; mpf : + 2363829874935233 -1007
; mpfd: + 2363829874935233 -1007 (1.11181e-303) class: Pos. norm. non-zero
; hwf : + 2363829874935233 -1007 (1.11181e-303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b1010110010111011000111000101110101101110001110000111)))
(assert (= y (fp #b0 #b00110111110 #b1101001000101111101101100010000011000001000101110110)))
(assert (= r (fp #b0 #b00000010000 #b1000011001011110010000001000000000010100010111000001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
