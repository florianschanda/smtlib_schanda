(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8089490936013727928610705930623225867748260498046875p213 {+ 3643182836504843 213 (2.38131e+064)}
; Y = -1.3609701580218065419813910921220667660236358642578125p-352 {- 1625665069158877 -352 (-1.48351e-106)}
; 1.8089490936013727928610705930623225867748260498046875p213 * -1.3609701580218065419813910921220667660236358642578125p-352 == -1.2309628668860319589128948791767470538616180419921875p-138
; [HW: -1.2309628668860319589128948791767470538616180419921875p-138] 

; mpf : - 1040164281244355 -138
; mpfd: - 1040164281244355 -138 (-3.53269e-042) class: Neg. norm. non-zero
; hwf : - 1040164281244355 -138 (-3.53269e-042) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011010100 #b1100111100010111010010011010110100100101100100001011)))
(assert (= y (fp #b1 #b01010011111 #b0101110001101000100010100100111110001001000111011101)))
(assert (= r (fp #b1 #b01101110101 #b0011101100100000011000011110011111011101101011000011)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
