(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5746033117763744701989025998045690357685089111328125p-78 {+ 2587783260801933 -78 (5.20993e-024)}
; Y = 1.9976844640017790144526088624843396246433258056640625p911 {+ 4493171380311745 911 (3.45822e+274)}
; 1.5746033117763744701989025998045690357685089111328125p-78 * 1.9976844640017790144526088624843396246433258056640625p911 == 1.5727802864507065550014885957352817058563232421875p834
; [HW: 1.5727802864507065550014885957352817058563232421875p834] 

; mpf : + 2579573084624568 834
; mpfd: + 2579573084624568 834 (1.80171e+251) class: Pos. norm. non-zero
; hwf : + 2579573084624568 834 (1.80171e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110110001 #b1001001100011001001100111110000001000000101110001101)))
(assert (= y (fp #b0 #b11110001110 #b1111111101101000001111111100000010011101011011000001)))
(assert (= r (fp #b0 #b11101000001 #b1001001010100001101110101001011000011001011010111000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
