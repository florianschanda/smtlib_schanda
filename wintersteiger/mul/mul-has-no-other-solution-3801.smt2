(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0504673457068107733647366330842487514019012451171875p257 {+ 227284719319571 257 (2.43272e+077)}
; Y = 1.3196360458098006507299260192667134106159210205078125p17 {+ 1439512776803197 17 (172967)}
; 1.0504673457068107733647366330842487514019012451171875p257 * 1.3196360458098006507299260192667134106159210205078125p17 == 1.386234574340852621077146977768279612064361572265625p274
; [HW: 1.386234574340852621077146977768279612064361572265625p274] 

; mpf : + 1739445885079066 274
; mpfd: + 1739445885079066 274 (4.2078e+082) class: Pos. norm. non-zero
; hwf : + 1739445885079066 274 (4.2078e+082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000000 #b0000110011101011011011011000111101010011101000010011)))
(assert (= y (fp #b0 #b10000010000 #b0101000111010011101010101111101101100000001101111101)))
(assert (= r (fp #b0 #b10100010001 #b0110001011100000010001001110000101100000111000011010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
