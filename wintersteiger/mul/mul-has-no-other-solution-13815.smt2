(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.72075626525780034370427529211156070232391357421875p-100 {+ 3245997647639980 -100 (1.35744e-030)}
; Y = 1.2533445653480999038009713331121020019054412841796875p-363 {+ 1140962490098043 -363 (6.67086e-110)}
; 1.72075626525780034370427529211156070232391357421875p-100 * 1.2533445653480999038009713331121020019054412841796875p-363 == 1.07835025667477868438481891644187271595001220703125p-462
; [HW: 1.07835025667477868438481891644187271595001220703125p-462] 

; mpf : + 352858186764916 -462
; mpfd: + 352858186764916 -462 (9.05528e-140) class: Pos. norm. non-zero
; hwf : + 352858186764916 -462 (9.05528e-140) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011011 #b1011100010000011011110111000101110101011010110101100)))
(assert (= y (fp #b0 #b01010010100 #b0100000011011011001100000111111011001010000101111011)))
(assert (= r (fp #b0 #b01000110001 #b0001010000001110110000110010111000001101001001110100)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
