(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.43801382665194932286567564005963504314422607421875p-229 {+ 1972638906492844 -229 (1.66684e-069)}
; Y = -1.7866884534528433281508341679000295698642730712890625p832 {- 3542929825826897 832 (-5.11688e+250)}
; 1.43801382665194932286567564005963504314422607421875p-229 * -1.7866884534528433281508341679000295698642730712890625p832 == -1.284641349992288184012068086303770542144775390625p604
; [HW: -1.284641349992288184012068086303770542144775390625p604] 

; mpf : - 1281910677759504 604
; mpfd: - 1281910677759504 604 (-8.52902e+181) class: Neg. norm. non-zero
; hwf : - 1281910677759504 604 (-8.52902e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100011010 #b0111000000100001101011001001010010101010011110101100)))
(assert (= y (fp #b1 #b11100111111 #b1100100101100100011010100001101110111000100001010001)))
(assert (= r (fp #b1 #b11001011011 #b0100100011011110010000010110100101001110011000010000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
