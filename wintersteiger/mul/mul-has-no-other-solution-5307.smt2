(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5160714447142009664304396210354752838611602783203125p918 {+ 2324179166111429 918 (3.35935e+276)}
; Y = -1.5136479981940464956124969830852933228015899658203125p-564 {- 2313264933266309 -564 (-2.50673e-170)}
; 1.5160714447142009664304396210354752838611602783203125p918 * -1.5136479981940464956124969830852933228015899658203125p-564 == -1.147399253705402966119208940654061734676361083984375p355
; [HW: -1.147399253705402966119208940654061734676361083984375p355] 

; mpf : - 663827224062342 355
; mpfd: - 663827224062342 355 (-8.42099e+106) class: Neg. norm. non-zero
; hwf : - 663827224062342 355 (-8.42099e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110010101 #b1000010000011101010000100001100101110010011011000101)))
(assert (= y (fp #b1 #b00111001011 #b1000001101111110011011110110100111100110001110000101)))
(assert (= r (fp #b1 #b10101100010 #b0010010110111011111101010001111000011110100110000110)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
