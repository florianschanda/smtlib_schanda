(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.290775487328233328554460968007333576679229736328125p-319 {+ 1309536376379906 -319 (1.2086e-096)}
; Y = -1.3862025726799103164665893928031437098979949951171875p-625 {- 1739301762410771 -625 (-9.95587e-189)}
; 1.290775487328233328554460968007333576679229736328125p-319 * -1.3862025726799103164665893928031437098979949951171875p-625 == -1.78927630128656200980685753165744245052337646484375p-944
; [HW: -1.78927630128656200980685753165744245052337646484375p-944] 

; mpf : - 3554584456366524 -944
; mpfd: - 3554584456366524 -944 (-1.20327e-284) class: Neg. norm. non-zero
; hwf : - 3554584456366524 -944 (-1.20327e-284) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000000 #b0100101001110000010000110010100010001101101000000010)))
(assert (= y (fp #b1 #b00110001110 #b0110001011011110001010111111101101001010100100010011)))
(assert (= r (fp #b1 #b00001001111 #b1100101000001110000000101111110110001000100110111100)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
