(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4661768123061669211182334038312546908855438232421875p-384 {- 2099473718190819 -384 (-3.72107e-116)}
; Y = 1.900734201380117394108992812107317149639129638671875p-116 {+ 4056546213695358 -116 (2.28793e-035)}
; -1.4661768123061669211182334038312546908855438232421875p-384 * 1.900734201380117394108992812107317149639129638671875p-116 == -1.393406206210404008061232161708176136016845703125p-499
; [HW: -1.393406206210404008061232161708176136016845703125p-499] 

; mpf : - 1771744043694416 -499
; mpfd: - 1771744043694416 -499 (-8.51353e-151) class: Neg. norm. non-zero
; hwf : - 1771744043694416 -499 (-8.51353e-151) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001111111 #b0111011101010111010111010001001100000010001011100011)))
(assert (= y (fp #b0 #b01110001011 #b1110011010010110100001000100000101010000111101111110)))
(assert (= r (fp #b1 #b01000001100 #b0110010010110110010001001110010110110111100101010000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
