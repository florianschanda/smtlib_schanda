(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8875746327839049154562189869466237723827362060546875p-307 {+ 3997280785469099 -307 (7.23928e-093)}
; Y = -1.316018238012659491431577407638542354106903076171875p-82 {- 1423219618956094 -82 (-2.72146e-025)}
; 1.8875746327839049154562189869466237723827362060546875p-307 * -1.316018238012659491431577407638542354106903076171875p-82 == -1.2420413211768337458096311820554547011852264404296875p-388
; [HW: -1.2420413211768337458096311820554547011852264404296875p-388] 

; mpf : - 1090057203860251 -388
; mpfd: - 1090057203860251 -388 (-1.97014e-117) class: Neg. norm. non-zero
; hwf : - 1090057203860251 -388 (-1.97014e-117) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001100 #b1110001100111000000101110101010010010000111010101011)))
(assert (= y (fp #b1 #b01110101101 #b0101000011100110100100100011110100110100001100111110)))
(assert (= r (fp #b1 #b01001111011 #b0011110111110110011010111000011010111100001100011011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
