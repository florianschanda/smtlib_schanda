(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4901751355288699318890621725586242973804473876953125p500 {+ 2207552557714101 500 (4.87793e+150)}
; Y = -1.8964104521249074419841917915618978440761566162109375p-638 {- 4037073778160751 -638 (-1.66263e-192)}
; 1.4901751355288699318890621725586242973804473876953125p500 * -1.8964104521249074419841917915618978440761566162109375p-638 == -1.4129918512567998245543776647537015378475189208984375p-137
; [HW: -1.4129918512567998245543776647537015378475189208984375p-137] 

; mpf : - 1859949947427175 -137
; mpfd: - 1859949947427175 -137 (-8.11018e-042) class: Neg. norm. non-zero
; hwf : - 1859949947427175 -137 (-8.11018e-042) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111110011 #b0111110101111100000111100010000001101000101010110101)))
(assert (= y (fp #b1 #b00110000001 #b1110010101111011001001111100011110101011010001101111)))
(assert (= r (fp #b1 #b01101110110 #b0110100110111001110101010111111010101001100101100111)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
