(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1265656513010007255815025928313843905925750732421875p-168 {+ 570001020037091 -168 (3.01104e-051)}
; Y = -1.4832974162697423192724954787991009652614593505859375p780 {- 2176578063821535 780 (-9.43246e+234)}
; 1.1265656513010007255815025928313843905925750732421875p-168 * -1.4832974162697423192724954787991009652614593505859375p780 == -1.671031919833013912324304328649304807186126708984375p612
; [HW: -1.671031919833013912324304328649304807186126708984375p612] 

; mpf : - 3022059104113670 612
; mpfd: - 3022059104113670 612 (-2.84016e+184) class: Neg. norm. non-zero
; hwf : - 3022059104113670 612 (-2.84016e+184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010111 #b0010000001100110100110110100010100100010011111100011)))
(assert (= y (fp #b1 #b11100001011 #b0111101110111001011000010010010100011110101011011111)))
(assert (= r (fp #b1 #b11001100011 #b1010101111001000101111110111011001000001010000000110)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
