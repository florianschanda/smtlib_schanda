(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.226481181519760266240837154327891767024993896484375p-1022 {- 1019980564698822 -1023 (-5.03937e-309)}
; Y = 1.6814402181355856402689141759765334427356719970703125p1003 {+ 3068933912470693 1003 (1.44134e+302)}
; -0.226481181519760266240837154327891767024993896484375p-1022 * 1.6814402181355856402689141759765334427356719970703125p1003 == -1.52325826903276340118509324383921921253204345703125p-21
; [HW: -1.52325826903276340118509324383921921253204345703125p-21] 

; mpf : - 2356545745434484 -21
; mpfd: - 2356545745434484 -21 (-7.26346e-007) class: Neg. norm. non-zero
; hwf : - 2356545745434484 -21 (-7.26346e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0011100111111010101010111011001111001001011011000110)))
(assert (= y (fp #b0 #b11111101010 #b1010111001110010110111011011101100010010010010100101)))
(assert (= r (fp #b1 #b01111101010 #b1000010111110100010000010000000011011011011101110100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
