(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5158901160231035287750955831143073737621307373046875p459 {- 2323362534285771 459 (-2.2565e+138)}
; Y = -1.2953956426277779545586099629872478544712066650390625p-367 {- 1330343706065329 -367 (-4.30917e-111)}
; -1.5158901160231035287750955831143073737621307373046875p459 * -1.2953956426277779545586099629872478544712066650390625p-367 == 1.96367745099884505322052064002491533756256103515625p92
; [HW: 1.96367745099884505322052064002491533756256103515625p92] 

; mpf : + 4340017409223748 92
; mpfd: + 4340017409223748 92 (9.72366e+027) class: Pos. norm. non-zero
; hwf : + 4340017409223748 92 (9.72366e+027) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111001010 #b1000010000010001010111111110100010100110000111001011)))
(assert (= y (fp #b1 #b01010010000 #b0100101110011111000011001000000001110111100110110001)))
(assert (= r (fp #b0 #b10001011011 #b1111011010110011100100001011111111101110110001000100)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
