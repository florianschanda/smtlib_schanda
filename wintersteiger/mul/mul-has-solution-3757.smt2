(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5575161631187006694432284348295070230960845947265625p-214 {+ 2510829584474409 -214 (5.9158e-065)}
; Y = -1.43033628207485907779528133687563240528106689453125p-537 {- 1938062319596340 -537 (-3.17929e-162)}
; 1.5575161631187006694432284348295070230960845947265625p-214 * -1.43033628207485907779528133687563240528106689453125p-537 == -1.1138859390133510895992685618693940341472625732421875p-750
; [HW: -1.1138859390133510895992685618693940341472625732421875p-750] 

; mpf : - 512896672503267 -750
; mpfd: - 512896672503267 -750 (-1.88081e-226) class: Neg. norm. non-zero
; hwf : - 512896672503267 -750 (-1.88081e-226) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101001 #b1000111010111001011000010001011110010110000100101001)))
(assert (= y (fp #b1 #b00111100110 #b0110111000101010100001001100000111001011001100110100)))
(assert (= r (fp #b1 #b00100010001 #b0001110100100111101000001111111110001001010111100011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
