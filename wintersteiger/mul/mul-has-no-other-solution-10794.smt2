(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5781916872604948576253036662819795310497283935546875p-351 {+ 2603943867295083 -351 (3.44058e-106)}
; Y = -1.25000600722674892750774233718402683734893798828125p918 {- 1125926960986772 918 (-2.7698e+276)}
; 1.5781916872604948576253036662819795310497283935546875p-351 * -1.25000600722674892750774233718402683734893798828125p918 == -1.9727490896309374246442303046933375298976898193359375p567
; [HW: -1.9727490896309374246442303046933375298976898193359375p567] 

; mpf : - 4380872437586879 567
; mpfd: - 4380872437586879 567 (-9.5297e+170) class: Neg. norm. non-zero
; hwf : - 4380872437586879 567 (-9.5297e+170) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010100000 #b1001010000000100010111101101001110011010010101101011)))
(assert (= y (fp #b1 #b11110010101 #b0100000000000000011001001100100011010111101010010100)))
(assert (= r (fp #b1 #b11000110110 #b1111100100000110000101011001011100101101101110111111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
