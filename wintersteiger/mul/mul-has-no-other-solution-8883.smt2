(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.074133439275979373661584759247489273548126220703125p-12 {- 333867329498994 -12 (-0.00026224)}
; Y = 1.4760265889871122535481617887853644788265228271484375p153 {+ 2143833168780807 153 (1.68532e+046)}
; -1.074133439275979373661584759247489273548126220703125p-12 * 1.4760265889871122535481617887853644788265228271484375p153 == -1.5854495164915192173538116549025289714336395263671875p141
; [HW: -1.5854495164915192173538116549025289714336395263671875p141] 

; mpf : - 2636630224315443 141
; mpfd: - 2636630224315443 141 (-4.41959e+042) class: Neg. norm. non-zero
; hwf : - 2636630224315443 141 (-4.41959e+042) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111110011 #b0001001011111010011010001011100100111010111101110010)))
(assert (= y (fp #b0 #b10010011000 #b0111100111011100111000001110011110111001111000000111)))
(assert (= r (fp #b1 #b10010001100 #b1001010111100000000001001111111011001010010000110011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
