(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8340364093585226346050376378116197884082794189453125p-66 {+ 3756166062400469 -66 (2.48558e-020)}
; Y = 1.2591698384854750347727758708060719072818756103515625p-816 {+ 1167197188028857 -816 (2.88143e-246)}
; 1.8340364093585226346050376378116197884082794189453125p-66 * 1.2591698384854750347727758708060719072818756103515625p-816 == 1.1546816646742257272961751368711702525615692138671875p-881
; [HW: 1.1546816646742257272961751368711702525615692138671875p-881] 

; mpf : + 696624287387891 -881
; mpfd: + 696624287387891 -881 (7.16203e-266) class: Pos. norm. non-zero
; hwf : + 696624287387891 -881 (7.16203e-266) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111101 #b1101010110000011011010001111110111011110001111010101)))
(assert (= y (fp #b0 #b00011001111 #b0100001001011000111101000101110001100111100110111001)))
(assert (= r (fp #b0 #b00010001110 #b0010011110011001001101111011001100010001000011110011)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
