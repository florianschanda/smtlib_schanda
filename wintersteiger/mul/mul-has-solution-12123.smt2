(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.923100863848417940715762597392313182353973388671875p-257 {+ 4157276706453118 -257 (8.30411e-078)}
; Y = 1.840924283761288915428622203762643039226531982421875p-411 {+ 3787186290994142 -411 (3.48103e-124)}
; 1.923100863848417940715762597392313182353973388671875p-257 * 1.840924283761288915428622203762643039226531982421875p-411 == 1.7701415401904323498882831700029782950878143310546875p-667
; [HW: 1.7701415401904323498882831700029782950878143310546875p-667] 

; mpf : + 3468409153424171 -667
; mpfd: + 3468409153424171 -667 (2.89069e-201) class: Pos. norm. non-zero
; hwf : + 3468409153424171 -667 (2.89069e-201) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011111110 #b1110110001010000010101101001010100100011011001111110)))
(assert (= y (fp #b0 #b01001100100 #b1101011101000110110100000101100100101010101111011110)))
(assert (= r (fp #b0 #b00101100100 #b1100010100100111111111101111100001101000101100101011)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
