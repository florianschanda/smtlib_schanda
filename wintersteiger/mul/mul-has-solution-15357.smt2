(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.610542725882387227187564349151216447353363037109375p-397 {- 2749639992777686 -397 (-4.98958e-120)}
; Y = 1.5029954271439220914174939025542698800563812255859375p-408 {+ 2265290018254431 -408 (2.27363e-123)}
; -1.610542725882387227187564349151216447353363037109375p-397 * 1.5029954271439220914174939025542698800563812255859375p-408 == -1.210319176110567607196344397380016744136810302734375p-804
; [HW: -1.210319176110567607196344397380016744136810302734375p-804] 

; mpf : - 947193363160422 -804
; mpfd: - 947193363160422 -804 (-1.13444e-242) class: Neg. norm. non-zero
; hwf : - 947193363160422 -804 (-1.13444e-242) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110010 #b1001110001001100100001110011000001111001101111010110)))
(assert (= y (fp #b0 #b01001100111 #b1000000011000100010011101110110110011110111001011111)))
(assert (= r (fp #b1 #b00011011011 #b0011010111010111011110100011111100011101110101100110)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
