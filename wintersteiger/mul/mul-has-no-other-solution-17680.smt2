(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.347215025016625933318437091656960546970367431640625p1012 {- 1563717457282314 1012 (-5.91279e+304)}
; Y = 1.58183839235318135507668557693250477313995361328125p-934 {+ 2620367166991636 -934 (1.0893e-281)}
; -1.347215025016625933318437091656960546970367431640625p1012 * 1.58183839235318135507668557693250477313995361328125p-934 == -1.065538224663175270734427613206207752227783203125p79
; [HW: -1.065538224663175270734427613206207752227783203125p79] 

; mpf : - 295157924171600 79
; mpfd: - 295157924171600 79 (-6.44078e+023) class: Neg. norm. non-zero
; hwf : - 295157924171600 79 (-6.44078e+023) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111110011 #b0101100011100011000101010111100100100000010100001010)))
(assert (= y (fp #b0 #b00001011001 #b1001010011110011010111000110001010110110110100010100)))
(assert (= r (fp #b1 #b10001001110 #b0001000011000111000111001111001110010000111101010000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
