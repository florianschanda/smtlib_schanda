(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.179871081529269449816865744651295244693756103515625p144 {- 810067335749946 144 (-2.6312e+043)}
; Y = 1.934491181370233459091423355857841670513153076171875p-538 {+ 4208574136199998 -538 (2.14995e-162)}
; -1.179871081529269449816865744651295244693756103515625p144 * 1.934491181370233459091423355857841670513153076171875p-538 == -1.141225101186065682412618116359226405620574951171875p-393
; [HW: -1.141225101186065682412618116359226405620574951171875p-393] 

; mpf : - 636021313076926 -393
; mpfd: - 636021313076926 -393 (-5.65696e-119) class: Neg. norm. non-zero
; hwf : - 636021313076926 -393 (-5.65696e-119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001111 #b0010111000001100000001111111110010101010000100111010)))
(assert (= y (fp #b0 #b00111100101 #b1110111100111010110100000110011001100010101100111110)))
(assert (= r (fp #b1 #b01001110110 #b0010010000100111010101000000011011110111111010111110)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
