(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0762631505554318689377168993814848363399505615234375p80 {+ 343458696423543 80 (1.30112e+024)}
; Y = -1.40969255763048106899759659427218139171600341796875p667 {- 1845091249881100 667 (-8.6324e+200)}
; 1.0762631505554318689377168993814848363399505615234375p80 * -1.40969255763048106899759659427218139171600341796875p667 == -1.5172001533899261982440975771169178187847137451171875p747
; [HW: -1.5172001533899261982440975771169178187847137451171875p747] 

; mpf : - 2329262418082835 747
; mpfd: - 2329262418082835 747 (-1.12318e+225) class: Neg. norm. non-zero
; hwf : - 2329262418082835 747 (-1.12318e+225) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001111 #b0001001110000101111110110101100110000110100001110111)))
(assert (= y (fp #b1 #b11010011010 #b0110100011100001100111001000100001110000000000001100)))
(assert (= r (fp #b1 #b11011101010 #b1000010001100111001110101011000001001011110000010011)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
