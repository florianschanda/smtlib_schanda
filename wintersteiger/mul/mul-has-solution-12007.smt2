(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.960510629012239380841720048920251429080963134765625p925 {+ 4325755310904922 925 (5.56052e+278)}
; Y = -1.8413989387733791236456681872368790209293365478515625p70 {- 3789323947129721 70 (-2.17394e+021)}
; 1.960510629012239380841720048920251429080963134765625p925 * -1.8413989387733791236456681872368790209293365478515625p70 == -1.80504109585853367292429538792930543422698974609375p996
; [HW: -1.80504109585853367292429538792930543422698974609375p996] 

; mpf : - 3625582779326428 996
; mpfd: - 3625582779326428 996 (-1.20882e+300) class: Neg. norm. non-zero
; hwf : - 3625582779326428 996 (-1.20882e+300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110011100 #b1111010111100100000001100100101100010001011001011010)))
(assert (= y (fp #b1 #b10001000101 #b1101011101100101111010111011110011101011101101111001)))
(assert (= r (fp #b1 #b11111100011 #b1100111000010111001011000101101010100101111111011100)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
