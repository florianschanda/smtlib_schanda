(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.964021605060461528324822211288847029209136962890625p142 {- 4341567341327402 142 (-1.09498e+043)}
; Y = 1.9338389128328656862976231423090212047100067138671875p-1011 {+ 4205636579858163 -1011 (8.81241e-305)}
; -1.964021605060461528324822211288847029209136962890625p142 * 1.9338389128328656862976231423090212047100067138671875p-1011 == -1.8990507027551914998042548177181743085384368896484375p-868
; [HW: -1.8990507027551914998042548177181743085384368896484375p-868] 

; mpf : - 4048964409915463 -868
; mpfd: - 4048964409915463 -868 (-9.6494e-262) class: Neg. norm. non-zero
; hwf : - 4048964409915463 -868 (-9.6494e-262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001101 #b1111011011001010000111101011001001011111010000101010)))
(assert (= y (fp #b0 #b00000001100 #b1110111100010000000100010010011001011001011011110011)))
(assert (= r (fp #b1 #b00010011011 #b1110011000101000001011111101010111000111100001000111)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
