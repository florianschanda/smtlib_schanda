(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.210242678836447094425921022775582969188690185546875p559 {- 946848850065198 559 (-2.28371e+168)}
; Y = -1.9950459338575050605157912286813370883464813232421875p-788 {- 4481288496937187 -788 (-1.22551e-237)}
; -1.210242678836447094425921022775582969188690185546875p559 * -1.9950459338575050605157912286813370883464813232421875p-788 == 1.2072448676967340031040976100484840571880340576171875p-228
; [HW: 1.2072448676967340031040976100484840571880340576171875p-228] 

; mpf : + 933347908933459 -228
; mpfd: + 933347908933459 -228 (2.7987e-069) class: Pos. norm. non-zero
; hwf : + 933347908933459 -228 (2.7987e-069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101110 #b0011010111010010011101101101010111010011011100101110)))
(assert (= y (fp #b1 #b00011101011 #b1111111010111011010101001000111111101111100011100011)))
(assert (= r (fp #b0 #b01100011011 #b0011010100001101111111111110100100000101011101010011)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
