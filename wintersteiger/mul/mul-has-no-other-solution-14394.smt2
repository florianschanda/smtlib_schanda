(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.0766710759822053500300853556836955249309539794921875p-1022 {- 345295829223555 -1023 (-1.70599e-309)}
; Y = 1.8007383548082087632025150014669634401798248291015625p290 {+ 3606204956335513 290 (3.5822e+087)}
; -0.0766710759822053500300853556836955249309539794921875p-1022 * 1.8007383548082087632025150014669634401798248291015625p290 == -1.1045163778045730129662160834413953125476837158203125p-735
; [HW: -1.1045163778045730129662160834413953125476837158203125p-735] 

; mpf : - 470699920134789 -735
; mpfd: - 470699920134789 -735 (-6.11118e-222) class: Neg. norm. non-zero
; hwf : - 470699920134789 -735 (-6.11118e-222) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0001001110100000101101110011001111100100100010000011)))
(assert (= y (fp #b0 #b10100100001 #b1100110011111101001100000101011010001101110110011001)))
(assert (= r (fp #b1 #b00100100000 #b0001101011000001100101011101100010010001001010000101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
