(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2874195251247921856219136316212825477123260498046875p-52 {+ 1294422466251019 -52 (2.85865e-016)}
; Y = 1.10922199935037468776499736122786998748779296875p-827 {+ 491892155575008 -827 (1.2394e-249)}
; 1.2874195251247921856219136316212825477123260498046875p-52 * 1.10922199935037468776499736122786998748779296875p-827 == 1.428034059661631882676147142774425446987152099609375p-879
; [HW: 1.428034059661631882676147142774425446987152099609375p-879] 

; mpf : + 1927694031594006 -879
; mpfd: + 1927694031594006 -879 (3.54301e-265) class: Pos. norm. non-zero
; hwf : + 1927694031594006 -879 (3.54301e-265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001011 #b0100100110010100010100110111010010100100100100001011)))
(assert (= y (fp #b0 #b00011000100 #b0001101111110101111110010001001100110110101011100000)))
(assert (= r (fp #b0 #b00010010000 #b0110110110010011101000111101111111010010001000010110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
