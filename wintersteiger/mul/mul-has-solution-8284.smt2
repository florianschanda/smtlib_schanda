(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9712185605470597948851718683727085590362548828125p-970 {- 4373979547375048 -970 (-1.97533e-292)}
; Y = 1.021376372206402205478070754907093942165374755859375p909 {+ 96270621903286 909 (4.4203e+273)}
; -1.9712185605470597948851718683727085590362548828125p-970 * 1.021376372206402205478070754907093942165374755859375p909 == -1.0066780310987410995693380755255930125713348388671875p-60
; [HW: -1.0066780310987410995693380755255930125713348388671875p-60] 

; mpf : - 30075178367859 -60
; mpfd: - 30075178367859 -60 (-8.73154e-019) class: Neg. norm. non-zero
; hwf : - 30075178367859 -60 (-8.73154e-019) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000110101 #b1111100010100001110001111001001011010001010111001000)))
(assert (= y (fp #b0 #b11110001100 #b0000010101111000111011000000001110001000100110110110)))
(assert (= r (fp #b1 #b01111000011 #b0000000110110101101001101100010100101011101101110011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
