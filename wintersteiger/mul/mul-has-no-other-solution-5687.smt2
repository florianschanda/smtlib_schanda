(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1155481516893619442498675198294222354888916015625p-161 {+ 520382612891560 -161 (3.81645e-049)}
; Y = -1.550100081792596729002298161503858864307403564453125p-173 {- 2477430523377618 -173 (-1.2947e-052)}
; 1.1155481516893619442498675198294222354888916015625p-161 * -1.550100081792596729002298161503858864307403564453125p-173 == -1.729211281177259973418358640628866851329803466796875p-334
; [HW: -1.729211281177259973418358640628866851329803466796875p-334] 

; mpf : - 3284075654184270 -334
; mpfd: - 3284075654184270 -334 (-4.94117e-101) class: Neg. norm. non-zero
; hwf : - 3284075654184270 -334 (-4.94117e-101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011110 #b0001110110010100100100000100110010011110011110101000)))
(assert (= y (fp #b1 #b01101010010 #b1000110011010011010110111110010011010011011111010010)))
(assert (= r (fp #b1 #b01010110001 #b1011101010101101100101110010110010000111110101001110)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
