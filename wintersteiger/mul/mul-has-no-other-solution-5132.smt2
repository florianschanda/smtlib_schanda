(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.438906132813757121624576029716990888118743896484375p-637 {+ 1976657496190662 -637 (2.52305e-192)}
; Y = -1.1652379915944630628388267723494209349155426025390625p651 {- 744165757372273 651 (-1.08878e+196)}
; 1.438906132813757121624576029716990888118743896484375p-637 * -1.1652379915944630628388267723494209349155426025390625p651 == -1.6766680922928582919695372766000218689441680908203125p14
; [HW: -1.6766680922928582919695372766000218689441680908203125p14] 

; mpf : - 3047442168303621 14
; mpfd: - 3047442168303621 14 (-27470.5) class: Neg. norm. non-zero
; hwf : - 3047442168303621 14 (-27470.5) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110000010 #b0111000001011100001001101111111001110010111011000110)))
(assert (= y (fp #b1 #b11010001010 #b0010101001001101000010010111100111110100011101110001)))
(assert (= r (fp #b1 #b10000001101 #b1010110100111010000111101011111010100101000000000101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
