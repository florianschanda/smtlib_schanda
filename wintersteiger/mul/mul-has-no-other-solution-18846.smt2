(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.02618823487340637967690781806595623493194580078125p-866 {- 117941324817364 -866 (-2.08569e-261)}
; Y = 1.701874803616886477897196527919732034206390380859375p467 {+ 3160963104029750 467 (6.48538e+140)}
; -1.02618823487340637967690781806595623493194580078125p-866 * 1.701874803616886477897196527919732034206390380859375p467 == -1.746443900699137685705863987095654010772705078125p-399
; [HW: -1.746443900699137685705863987095654010772705078125p-399] 

; mpf : - 3361684473041616 -399
; mpfd: - 3361684473041616 -399 (-1.35265e-120) class: Neg. norm. non-zero
; hwf : - 3361684473041616 -399 (-1.35265e-120) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011101 #b0000011010110100010001011010110001010010001111010100)))
(assert (= y (fp #b0 #b10111010010 #b1011001110101110000100010010111101101011110000110110)))
(assert (= r (fp #b1 #b01001110000 #b1011111100010110111100101000110111001101001011010000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
