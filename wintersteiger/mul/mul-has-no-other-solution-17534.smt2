(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.616854904216612709433320560492575168609619140625p-1022 {- 2778067516771600 -1023 (-1.37255e-308)}
; Y = -1.48364450404779457670656483969651162624359130859375p835 {- 2178141208209436 835 (-3.3992e+251)}
; -0.616854904216612709433320560492575168609619140625p-1022 * -1.48364450404779457670656483969651162624359130859375p835 == 1.830386776871812504197123416815884411334991455078125p-188
; [HW: 1.830386776871812504197123416815884411334991455078125p-188] 

; mpf : + 3739729578893282 -188
; mpfd: + 3739729578893282 -188 (4.66556e-057) class: Pos. norm. non-zero
; hwf : + 3739729578893282 -188 (4.66556e-057) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1001110111101010001100111111011111111100110100010000)))
(assert (= y (fp #b1 #b11101000010 #b0111101111010000001000000100111111000110100000011100)))
(assert (= r (fp #b0 #b01101000011 #b1101010010010100001110100101000110110001111111100010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
