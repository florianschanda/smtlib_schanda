(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2497919902650889145689916404080577194690704345703125p-691 {+ 1124963114277989 -691 (1.2165e-208)}
; Y = -1.592019073830518660628285942948423326015472412109375p440 {- 2666216880299350 440 (-4.52008e+132)}
; 1.2497919902650889145689916404080577194690704345703125p-691 * -1.592019073830518660628285942948423326015472412109375p440 == -1.989692686822627454290568493888713419437408447265625p-251
; [HW: -1.989692686822627454290568493888713419437408447265625p-251] 

; mpf : - 4457179615585690 -251
; mpfd: - 4457179615585690 -251 (-5.49866e-076) class: Neg. norm. non-zero
; hwf : - 4457179615585690 -251 (-5.49866e-076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001100 #b0011111111110010010111100010110011111101110001100101)))
(assert (= y (fp #b1 #b10110110111 #b1001011110001110100011111110000010110101110101010110)))
(assert (= r (fp #b1 #b01100000100 #b1111110101011100011111111111101011111110010110011010)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
