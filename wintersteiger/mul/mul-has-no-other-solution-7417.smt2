(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.08030257611581337329198504448868334293365478515625p-120 {+ 361650651872068 -120 (8.12729e-037)}
; Y = -1.6932695814699096903410691083990968763828277587890625p-719 {- 3122208628775185 -719 (-6.13987e-217)}
; 1.08030257611581337329198504448868334293365478515625p-120 * -1.6932695814699096903410691083990968763828277587890625p-719 == -1.8292434909204884352362796562374569475650787353515625p-839
; [HW: -1.8292434909204884352362796562374569475650787353515625p-839] 

; mpf : - 3734580676708921 -839
; mpfd: - 3734580676708921 -839 (-4.99005e-253) class: Neg. norm. non-zero
; hwf : - 3734580676708921 -839 (-4.99005e-253) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110000111 #b0001010010001110101101011010101000110011101101000100)))
(assert (= y (fp #b1 #b00100110000 #b1011000101111010000111011000001110111001100100010001)))
(assert (= r (fp #b1 #b00010111000 #b1101010001001001010011010010100111101100101000111001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
