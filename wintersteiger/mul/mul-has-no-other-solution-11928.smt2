(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9026592897619760691441115341149270534515380859375p447 {+ 4065216041014552 447 (6.91463e+134)}
; Y = 1.679606996892780923502641599043272435665130615234375p321 {+ 3060677817964710 321 (7.17524e+096)}
; 1.9026592897619760691441115341149270534515380859375p447 * 1.679606996892780923502641599043272435665130615234375p321 == 1.5978599278936318484056755551137030124664306640625p769
; [HW: 1.5978599278936318484056755551137030124664306640625p769] 

; mpf : + 2692521748481512 769
; mpfd: + 2692521748481512 769 (4.96141e+231) class: Pos. norm. non-zero
; hwf : + 2692521748481512 769 (4.96141e+231) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111110 #b1110011100010100101011011110000011110101010100011000)))
(assert (= y (fp #b0 #b10101000000 #b1010110111111010101110010110000111001001100010100110)))
(assert (= r (fp #b0 #b11100000000 #b1001100100001101010110010010010111100100010111101000)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
