(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.346125379036358982176579957013018429279327392578125p-673 {+ 1558810128051618 -673 (3.43478e-203)}
; Y = -1.3414928848580813802726652284036390483379364013671875p623 {- 1537947228996531 623 (-4.66956e+187)}
; 1.346125379036358982176579957013018429279327392578125p-673 * -1.3414928848580813802726652284036390483379364013671875p623 == -1.80581761810416363545073181740008294582366943359375p-50
; [HW: -1.80581761810416363545073181740008294582366943359375p-50] 

; mpf : - 3629079924622492 -50
; mpfd: - 3629079924622492 -50 (-1.60389e-015) class: Neg. norm. non-zero
; hwf : - 3629079924622492 -50 (-1.60389e-015) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101011110 #b0101100010011011101011000011111101000110110110100010)))
(assert (= y (fp #b1 #b11001101110 #b0101011101101100000100111110010001001000001110110011)))
(assert (= r (fp #b1 #b01111001101 #b1100111001001010000100000011110001001100010010011100)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
