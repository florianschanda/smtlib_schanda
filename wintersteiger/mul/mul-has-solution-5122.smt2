(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6126820050376997617291863207356072962284088134765625p-772 {- 2759274449584393 -772 (-6.4922e-233)}
; Y = 1.1132555013755653927631783517426811158657073974609375p78 {+ 510057433792655 78 (3.36461e+023)}
; -1.6126820050376997617291863207356072962284088134765625p-772 * 1.1132555013755653927631783517426811158657073974609375p78 == -1.79532711407759659749672209727577865123748779296875p-694
; [HW: -1.79532711407759659749672209727577865123748779296875p-694] 

; mpf : - 3581834894597516 -694
; mpfd: - 3581834894597516 -694 (-2.18437e-209) class: Neg. norm. non-zero
; hwf : - 3581834894597516 -694 (-2.18437e-209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011111011 #b1001110011011000101110100101011001111100000100001001)))
(assert (= y (fp #b0 #b10001001101 #b0001110011111110010100000000001010000000000010001111)))
(assert (= r (fp #b1 #b00101001001 #b1100101110011010100011101100100010010101110110001100)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
