(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.593726138343387166429465651162900030612945556640625p-673 {- 2673904815403402 -673 (-4.06655e-203)}
; Y = 1.8239771740681849365728339762426912784576416015625p267 {+ 3710863294095272 267 (4.32542e+080)}
; -1.593726138343387166429465651162900030612945556640625p-673 * 1.8239771740681849365728339762426912784576416015625p267 == -1.453460049027086142814368940889835357666015625p-405
; [HW: -1.453460049027086142814368940889835357666015625p-405] 

; mpf : - 2042202507825792 -405
; mpfd: - 2042202507825792 -405 (-1.75896e-122) class: Neg. norm. non-zero
; hwf : - 2042202507825792 -405 (-1.75896e-122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101011110 #b1001011111111110011011111010101011110111000110001010)))
(assert (= y (fp #b0 #b10100001010 #b1101001011110000001010110000011101000101111110101000)))
(assert (= r (fp #b1 #b01001101010 #b0111010000010101111101010011000010011101001010000000)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
