(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.03148517655643434665080349077470600605010986328125p-623 {+ 141796629407252 -623 (2.9633e-188)}
; Y = -1.6431058244717589023053960772813297808170318603515625p-388 {- 2896291151450809 -388 (-2.60632e-117)}
; 1.03148517655643434665080349077470600605010986328125p-623 * -1.6431058244717589023053960772813297808170318603515625p-388 == -1.6948393014561577984977702726610004901885986328125p-1011
; [HW: -1.6948393014561577984977702726610004901885986328125p-1011] 

; mpf : - 3129278019120328 -1011
; mpfd: - 3129278019120328 -1011 (-7.7233e-305) class: Neg. norm. non-zero
; hwf : - 3129278019120328 -1011 (-7.7233e-305) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010000 #b0000100000001111011010011001101110011110011000010100)))
(assert (= y (fp #b1 #b01001111011 #b1010010010100010100101010101001111111001001010111001)))
(assert (= r (fp #b1 #b00000001100 #b1011000111100000111111010000101110111010110011001000)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
