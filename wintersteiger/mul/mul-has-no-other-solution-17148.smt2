(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7506218395439117063716594202560372650623321533203125p459 {- 3380500236866117 459 (-2.60592e+138)}
; Y = -1.2621165398422651282572815034654922783374786376953125p-1008 {- 1180467951161269 -1008 (-4.60112e-304)}
; -1.7506218395439117063716594202560372650623321533203125p459 * -1.2621165398422651282572815034654922783374786376953125p-1008 == 1.1047443893487314259260756443836726248264312744140625p-548
; [HW: 1.1047443893487314259260756443836726248264312744140625p-548] 

; mpf : + 471726792840097 -548
; mpfd: + 471726792840097 -548 (1.19901e-165) class: Pos. norm. non-zero
; hwf : + 471726792840097 -548 (1.19901e-165) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111001010 #b1100000000101000110000001011110010000001001001000101)))
(assert (= y (fp #b1 #b00000001111 #b0100001100011010000100011100111001011100111110110101)))
(assert (= r (fp #b0 #b00111011011 #b0001101011010000100001110011111010110001001110100001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
