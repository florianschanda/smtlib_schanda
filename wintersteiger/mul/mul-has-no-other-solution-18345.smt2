(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2612093954837531040169551488361321389675140380859375p188 {+ 1176382536166303 188 (4.94796e+056)}
; Y = -1.4350248477902474153466982897953130304813385009765625p338 {- 1959177742405065 338 (-8.03522e+101)}
; 1.2612093954837531040169551488361321389675140380859375p188 * -1.4350248477902474153466982897953130304813385009765625p338 == -1.8098668207857027123708348881336860358715057373046875p526
; [HW: -1.8098668207857027123708348881336860358715057373046875p526] 

; mpf : - 3647315912310219 526
; mpfd: - 3647315912310219 526 (-3.9758e+158) class: Neg. norm. non-zero
; hwf : - 3647315912310219 526 (-3.9758e+158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111011 #b0100001011011110100111100111001100000010101110011111)))
(assert (= y (fp #b1 #b10101010001 #b0110111101011101110010011101011000110100110111001001)))
(assert (= r (fp #b1 #b11000001101 #b1100111101010011011011101001010101100011110111001011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
