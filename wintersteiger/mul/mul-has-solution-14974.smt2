(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3678419251058928640674139387556351721286773681640625p838 {+ 1656612756838145 838 (2.5071e+252)}
; Y = -1.4341830187749560199250709047191776335239410400390625p-861 {- 1955386481565489 -861 (-9.32778e-260)}
; 1.3678419251058928640674139387556351721286773681640625p838 * -1.4341830187749560199250709047191776335239410400390625p-861 == -1.9617356613553165178842618843191303312778472900390625p-23
; [HW: -1.9617356613553165178842618843191303312778472900390625p-23] 

; mpf : - 4331272366108721 -23
; mpfd: - 4331272366108721 -23 (-2.33857e-007) class: Neg. norm. non-zero
; hwf : - 4331272366108721 -23 (-2.33857e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101000101 #b0101111000101010111000110110111001101101011100000001)))
(assert (= y (fp #b1 #b00010100010 #b0110111100100110100111100100101000011101111100110001)))
(assert (= r (fp #b1 #b01111101000 #b1111011000110100010011101110110011101011000000110001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
