(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1322488659052989401487820941838435828685760498046875p-699 {+ 595595943211275 -699 (4.30502e-211)}
; Y = 1.2395936255221087218814091102103702723979949951171875p516 {+ 1079033762621715 516 (2.65924e+155)}
; 1.1322488659052989401487820941838435828685760498046875p-699 * 1.2395936255221087218814091102103702723979949951171875p516 == 1.4035284766808453493780461940332315862178802490234375p-183
; [HW: 1.4035284766808453493780461940332315862178802490234375p-183] 

; mpf : + 1817330697213239 -183
; mpfd: + 1817330697213239 -183 (1.14481e-055) class: Pos. norm. non-zero
; hwf : + 1817330697213239 -183 (1.14481e-055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000100 #b0010000111011011000011111100100111111111000100001011)))
(assert (= y (fp #b0 #b11000000011 #b0011110101010110000000100000000111110010100100010011)))
(assert (= r (fp #b0 #b01101001000 #b0110011101001101101001000110101001011001010100110111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
