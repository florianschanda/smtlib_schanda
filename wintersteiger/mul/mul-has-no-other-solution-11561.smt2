(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5780179172304464874088125725393183529376983642578125p-928 {+ 2603161276652509 -928 (6.95466e-280)}
; Y = -1.85131313749447645733425815706141293048858642578125p486 {- 3833973528795732 486 (-3.69877e+146)}
; 1.5780179172304464874088125725393183529376983642578125p-928 * -1.85131313749447645733425815706141293048858642578125p486 == -1.46070265068519855589102007797919213771820068359375p-441
; [HW: -1.46070265068519855589102007797919213771820068359375p-441] 

; mpf : - 2074820285954460 -441
; mpfd: - 2074820285954460 -441 (-2.57237e-133) class: Neg. norm. non-zero
; hwf : - 2074820285954460 -441 (-2.57237e-133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011111 #b1001001111111000111110110111001100000001101111011101)))
(assert (= y (fp #b1 #b10111100101 #b1101100111101111101010000110010000110001101001010100)))
(assert (= r (fp #b1 #b01001000110 #b0111010111110000100110111110000111011111100110011100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
