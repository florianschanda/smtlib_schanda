(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.644735672891969091580222084303386509418487548828125p379 {+ 2903631336188738 379 (2.02518e+114)}
; Y = -1.2974763018603645559068127113278023898601531982421875p15 {- 1339714162209891 15 (-42515.7)}
; 1.644735672891969091580222084303386509418487548828125p379 * -1.2974763018603645559068127113278023898601531982421875p15 == -1.067002779200845186124979591113515198230743408203125p395
; [HW: -1.067002779200845186124979591113515198230743408203125p395] 

; mpf : - 301753691441714 395
; mpfd: - 301753691441714 395 (-8.61021e+118) class: Neg. norm. non-zero
; hwf : - 301753691441714 395 (-8.61021e+118) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101111010 #b1010010100001101011001011010010110100010101101000010)))
(assert (= y (fp #b1 #b10000001110 #b0100110000100111011010000010101111010011010001100011)))
(assert (= r (fp #b1 #b10110001010 #b0001000100100111000110000001100101101000101000110010)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
