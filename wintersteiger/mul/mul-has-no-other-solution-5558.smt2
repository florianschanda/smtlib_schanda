(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0423396526203958512013514337013475596904754638671875p439 {+ 190680843764211 439 (1.47971e+132)}
; Y = -1.07845220932065277708034045645035803318023681640625p-621 {- 353317340662884 -621 (-1.23929e-187)}
; 1.0423396526203958512013514337013475596904754638671875p439 * -1.07845220932065277708034045645035803318023681640625p-621 == -1.1241135012309875218505794691736809909343719482421875p-182
; [HW: -1.1241135012309875218505794691736809909343719482421875p-182] 

; mpf : - 558957517895523 -182
; mpfd: - 558957517895523 -182 (-1.8338e-055) class: Neg. norm. non-zero
; hwf : - 558957517895523 -182 (-1.8338e-055) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110110110 #b0000101011010110110001010111111101010100000111110011)))
(assert (= y (fp #b1 #b00110010010 #b0001010000010101011100011010100101010100110001100100)))
(assert (= r (fp #b1 #b01101001001 #b0001111111000101111001110000010011000111011101100011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
