(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1052185240117575748541867142193950712680816650390625p-110 {+ 473862105531825 -110 (8.51429e-034)}
; Y = -1.6258604610042117766255387323326431214809417724609375p662 {- 2818624938964495 662 (-3.11129e+199)}
; 1.1052185240117575748541867142193950712680816650390625p-110 * -1.6258604610042117766255387323326431214809417724609375p662 == -1.796931098960150574583849447662942111492156982421875p552
; [HW: -1.796931098960150574583849447662942111492156982421875p552] 

; mpf : - 3589058600316894 552
; mpfd: - 3589058600316894 552 (-2.64904e+166) class: Neg. norm. non-zero
; hwf : - 3589058600316894 552 (-2.64904e+166) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010001 #b0001101011101111100110011110011110010000010110110001)))
(assert (= y (fp #b1 #b11010010101 #b1010000000111000011001000010001111011111011000001111)))
(assert (= r (fp #b1 #b11000100111 #b1100110000000011101011010010111100110010111111011110)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
