(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0888954083334703160090839446638710796833038330078125p456 {- 400349327845565 456 (-2.02612e+137)}
; Y = -1.5753316013249005766994059740682132542133331298828125p-986 {- 2591063185341293 -986 (-2.40878e-297)}
; -1.0888954083334703160090839446638710796833038330078125p456 * -1.5753316013249005766994059740682132542133331298828125p-986 == 1.7153713472852973875859561303514055907726287841796875p-530
; [HW: 1.7153713472852973875859561303514055907726287841796875p-530] 

; mpf : + 3221746133065595 -530
; mpfd: + 3221746133065595 -530 (4.88046e-160) class: Pos. norm. non-zero
; hwf : + 3221746133065595 -530 (4.88046e-160) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111000111 #b0001011011000001110110010111011110001110100010111101)))
(assert (= y (fp #b1 #b00000100101 #b1001001101001000111011101000110000001011101101101101)))
(assert (= r (fp #b0 #b00111101101 #b1011011100100010100100111001110100010101111101111011)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
