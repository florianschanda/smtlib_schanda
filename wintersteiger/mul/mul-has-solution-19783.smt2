(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.60890327707251312716607571928761899471282958984375p566 {- 2742256571728444 566 (-3.88604e+170)}
; Y = 1.5899069706070985130708095312002114951610565185546875p-272 {+ 2656704813009387 -272 (2.09514e-082)}
; -1.60890327707251312716607571928761899471282958984375p566 * 1.5899069706070985130708095312002114951610565185546875p-272 == -1.279003267625096196269396386924199759960174560546875p295
; [HW: -1.279003267625096196269396386924199759960174560546875p295] 

; mpf : - 1256519012111534 295
; mpfd: - 1256519012111534 295 (-8.1418e+088) class: Neg. norm. non-zero
; hwf : - 1256519012111534 295 (-8.1418e+088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110101 #b1001101111100001000101011100110101110100001000111100)))
(assert (= y (fp #b0 #b01011101111 #b1001011100000100001001001010101001110000100111101011)))
(assert (= r (fp #b1 #b10100100110 #b0100011101101100110000100001010111101101010010101110)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
