(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.890555493271005804700735097867436707019805908203125p-400 {+ 4010705387648050 -400 (7.32135e-121)}
; Y = 1.93672812750433376294267873163335025310516357421875p219 {+ 4218648445975980 219 (1.63169e+066)}
; 1.890555493271005804700735097867436707019805908203125p-400 * 1.93672812750433376294267873163335025310516357421875p219 == 1.830746000212893687120185859384946525096893310546875p-180
; [HW: 1.830746000212893687120185859384946525096893310546875p-180] 

; mpf : + 3741347376998318 -180
; mpfd: + 3741347376998318 -180 (1.19462e-054) class: Pos. norm. non-zero
; hwf : + 3741347376998318 -180 (1.19462e-054) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001101111 #b1110001111111011011100011101111011011111010000110010)))
(assert (= y (fp #b0 #b10011011010 #b1110111111001101011010100010000011011111110110101100)))
(assert (= r (fp #b0 #b01101001011 #b1101010010101011110001010001011000110010011110101110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
