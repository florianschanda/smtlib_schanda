(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1111557725942817764774872557609342038631439208984375p491 {+ 500601096035687 491 (7.104e+147)}
; Y = -1.8952082653006809831452983416966162621974945068359375p-843 {- 4031659610027135 -843 (-3.23125e-254)}
; 1.1111557725942817764774872557609342038631439208984375p491 * -1.8952082653006809831452983416966162621974945068359375p-843 == -1.052935802128623254958483812515623867511749267578125p-351
; [HW: -1.052935802128623254958483812515623867511749267578125p-351] 

; mpf : - 238401658741026 -351
; mpfd: - 238401658741026 -351 (-2.29548e-106) class: Neg. norm. non-zero
; hwf : - 238401658741026 -351 (-2.29548e-106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111101010 #b0001110001110100101101000110100000001101110101100111)))
(assert (= y (fp #b1 #b00010110100 #b1110010100101100010111100110111010010011010001111111)))
(assert (= r (fp #b1 #b01010100000 #b0000110110001101001100110110001011101110000100100010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
