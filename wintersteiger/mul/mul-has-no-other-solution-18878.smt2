(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7205326958662434666536000804626382887363433837890625p344 {- 3244990780611473 344 (-6.16569e+103)}
; Y = 1.9580851002409165317885708645917475223541259765625p-806 {+ 4314831700434216 -806 (4.58833e-243)}
; -1.7205326958662434666536000804626382887363433837890625p344 * 1.9580851002409165317885708645917475223541259765625p-806 == -1.684474718126514058980092158890329301357269287109375p-461
; [HW: -1.684474718126514058980092158890329301357269287109375p-461] 

; mpf : - 3082600085499094 -461
; mpfd: - 3082600085499094 -461 (-2.82902e-139) class: Neg. norm. non-zero
; hwf : - 3082600085499094 -461 (-2.82902e-139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010111 #b1011100001110100110101001010110001110001101110010001)))
(assert (= y (fp #b0 #b00011011001 #b1111010101000101000100001010110001010001110100101000)))
(assert (= r (fp #b1 #b01000110010 #b1010111100111001101111000011000101001010110011010110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
