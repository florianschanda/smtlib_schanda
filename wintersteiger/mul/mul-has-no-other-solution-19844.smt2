(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6150111202654982012205664432258345186710357666015625p-23 {- 2769763852056409 -23 (-1.92524e-007)}
; Y = 1.1922367878386526118816846064873971045017242431640625p-730 {+ 865757526077057 -730 (2.11089e-220)}
; -1.6150111202654982012205664432258345186710357666015625p-23 * 1.1922367878386526118816846064873971045017242431640625p-730 == -1.9254756703490414349033699181745760142803192138671875p-753
; [HW: -1.9254756703490414349033699181745760142803192138671875p-753] 

; mpf : - 4167971884124403 -753
; mpfd: - 4167971884124403 -753 (-4.06398e-227) class: Neg. norm. non-zero
; hwf : - 4167971884124403 -753 (-4.06398e-227) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111101000 #b1001110101110001010111100110100000110111011101011001)))
(assert (= y (fp #b0 #b00100100101 #b0011000100110110011011100001110011011010111010000001)))
(assert (= r (fp #b1 #b00100001110 #b1110110011101011111110010011100101100100100011110011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
