(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9293776270371403303016677455161698162555694580078125p-353 {- 4185544734810941 -353 (-1.05155e-106)}
; Y = -1.7045372817696542444565466212225146591663360595703125p219 {- 3172953839646437 219 (-1.43607e+066)}
; -1.9293776270371403303016677455161698162555694580078125p-353 * -1.7045372817696542444565466212225146591663360595703125p219 == 1.6443480479485363954239574013627134263515472412109375p-133
; [HW: 1.6443480479485363954239574013627134263515472412109375p-133] 

; mpf : + 2901885628637935 -133
; mpfd: + 2901885628637935 -133 (1.5101e-040) class: Pos. norm. non-zero
; hwf : + 2901885628637935 -133 (1.5101e-040) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011110 #b1110110111101011101100010011000111000010001100111101)))
(assert (= y (fp #b1 #b10011011010 #b1011010001011100100011100010100000000011011011100101)))
(assert (= r (fp #b0 #b01101111010 #b1010010011110011111111100110000100101110001011101111)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
