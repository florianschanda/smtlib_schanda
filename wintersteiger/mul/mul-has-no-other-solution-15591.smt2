(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3839046504980350160707303075469098985195159912109375p931 {- 1728952840928751 931 (-2.51207e+280)}
; Y = 1.4068785814478197426780070600216276943683624267578125p741 {+ 1832418227793437 741 (1.62736e+223)}
; -1.3839046504980350160707303075469098985195159912109375p931 * 1.4068785814478197426780070600216276943683624267578125p741 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110100010 #b0110001001000111100100110011111010101011110111101111)))
(assert (= y (fp #b0 #b11011100100 #b0110100000101001001100011101100011000010111000011101)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
