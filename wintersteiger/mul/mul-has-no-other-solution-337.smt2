(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.26250700336226717723775436752475798130035400390625p-426 {- 1182226442524452 -426 (-7.28544e-129)}
; Y = -1.777687188102661242083968318183906376361846923828125p191 {- 3502391730549954 191 (-5.57936e+057)}
; -1.26250700336226717723775436752475798130035400390625p-426 * -1.777687188102661242083968318183906376361846923828125p191 == 1.122171262383492962300124418106861412525177001953125p-234
; [HW: 1.122171262383492962300124418106861412525177001953125p-234] 

; mpf : + 550210451745682 -234
; mpfd: + 550210451745682 -234 (4.06481e-071) class: Pos. norm. non-zero
; hwf : + 550210451745682 -234 (4.06481e-071) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001010101 #b0100001100110011101010001011001001101001011100100100)))
(assert (= y (fp #b1 #b10010111110 #b1100011100010110100000011110111101101011010011000010)))
(assert (= r (fp #b0 #b01100010101 #b0001111101000110100111011010100001110010101110010010)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
