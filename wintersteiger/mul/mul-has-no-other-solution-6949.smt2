(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.572823232591426201310014221235178411006927490234375p-257 {+ 2579766496847910 -257 (6.79158e-078)}
; Y = -1.826274566450859726529643012327142059803009033203125p954 {- 3721209829573810 954 (-2.78088e+287)}
; 1.572823232591426201310014221235178411006927490234375p-257 * -1.826274566450859726529643012327142059803009033203125p954 == -1.436203533602373294542076109792105853557586669921875p698
; [HW: -1.436203533602373294542076109792105853557586669921875p698] 

; mpf : - 1964486071389342 698
; mpfd: - 1964486071389342 698 (-1.88866e+210) class: Neg. norm. non-zero
; hwf : - 1964486071389342 698 (-1.88866e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011111110 #b1001001010100100100010110001101001011110100000100110)))
(assert (= y (fp #b1 #b11110111001 #b1101001110000110101110101110000001101100010010110010)))
(assert (= r (fp #b1 #b11010111001 #b0110111110101011000010001110011100111000110010011110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
