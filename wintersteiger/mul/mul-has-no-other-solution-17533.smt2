(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.565778233313577683105677351704798638820648193359375p108 {- 2548038640725366 108 (-5.08124e+032)}
; Y = 1.9243409247251097582420698017813265323638916015625p-534 {+ 4162861444155304 -534 (3.42188e-161)}
; -1.565778233313577683105677351704798638820648193359375p108 * 1.9243409247251097582420698017813265323638916015625p-534 == -1.506545566704549532488499608007259666919708251953125p-425
; [HW: -1.506545566704549532488499608007259666919708251953125p-425] 

; mpf : - 2281278425456786 -425
; mpfd: - 2281278425456786 -425 (-1.73874e-128) class: Neg. norm. non-zero
; hwf : - 2281278425456786 -425 (-1.73874e-128) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001101011 #b1001000011010110110101111010000011011110110101110110)))
(assert (= y (fp #b0 #b00111101001 #b1110110010100001100110110101101000001100011110101000)))
(assert (= r (fp #b1 #b01001010110 #b1000000110101100111110000110001011101110000010010010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
