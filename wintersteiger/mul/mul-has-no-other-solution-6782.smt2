(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1347948097635411901507040965952910482883453369140625p-972 {- 607061855022561 -972 (-2.8429e-293)}
; Y = 1.3417153547326592377686438339878804981708526611328125p555 {+ 1538949144240781 555 (1.58237e+167)}
; -1.1347948097635411901507040965952910482883453369140625p-972 * 1.3417153547326592377686438339878804981708526611328125p555 == -1.522571620730670094445713402819819748401641845703125p-417
; [HW: -1.522571620730670094445713402819819748401641845703125p-417] 

; mpf : - 2353453356397042 -417
; mpfd: - 2353453356397042 -417 (-4.49852e-126) class: Neg. norm. non-zero
; hwf : - 2353453356397042 -417 (-4.49852e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000110011 #b0010001010000001111010011010001110011010110111100001)))
(assert (= y (fp #b0 #b11000101010 #b0101011101111010101010000101000100011110001010001101)))
(assert (= r (fp #b1 #b01001011110 #b1000010111000111010000001111010011011011000111110010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
