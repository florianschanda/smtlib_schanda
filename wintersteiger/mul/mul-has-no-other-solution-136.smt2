(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3397262006681016632825276246876455843448638916015625p-146 {+ 1529990790736857 -146 (1.50189e-044)}
; Y = 1.6827814136457297511384467725292779505252838134765625p-254 {+ 3074974120070409 -254 (5.81311e-077)}
; 1.3397262006681016632825276246876455843448638916015625p-146 * 1.6827814136457297511384467725292779505252838134765625p-254 == 1.127233174929245240747377465595491230487823486328125p-399
; [HW: 1.127233174929245240747377465595491230487823486328125p-399] 

; mpf : + 573007279200514 -399
; mpfd: + 573007279200514 -399 (8.73063e-121) class: Pos. norm. non-zero
; hwf : + 573007279200514 -399 (8.73063e-121) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101101 #b0101011011111000010010111101100101110110101111011001)))
(assert (= y (fp #b0 #b01100000001 #b1010111011001010110000110100000111101100110100001001)))
(assert (= r (fp #b0 #b01001110000 #b0010000010010010010110100111010101001001100100000010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
