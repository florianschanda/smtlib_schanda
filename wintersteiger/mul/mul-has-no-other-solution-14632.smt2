(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8877506370878769370591498955036513507366180419921875p-210 {+ 3998073438386883 -210 (1.14722e-063)}
; Y = -1.4323756627429113930105586405261419713497161865234375p-799 {- 1947246873613047 -799 (-4.29626e-241)}
; 1.8877506370878769370591498955036513507366180419921875p-210 * -1.4323756627429113930105586405261419713497161865234375p-799 == -1.35198403494605035035647233598865568637847900390625p-1008
; [HW: -1.35198403494605035035647233598865568637847900390625p-1008] 

; mpf : - 1585195168623396 -1008
; mpfd: - 1585195168623396 -1008 (-4.92874e-304) class: Neg. norm. non-zero
; hwf : - 1585195168623396 -1008 (-4.92874e-304) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100101101 #b1110001101000011101000000011000101001011101011000011)))
(assert (= y (fp #b1 #b00011100000 #b0110111010110000001010111110001100010001001011110111)))
(assert (= r (fp #b1 #b00000001111 #b0101101000011011101000000010111011001110101100100100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
