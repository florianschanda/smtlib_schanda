(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7623127999901171403251964875380508601665496826171875p958 {- 3433151641975251 958 (-4.29357e+288)}
; Y = -1.82558941244094885547610829235054552555084228515625p-830 {- 3718124170230084 -830 (-2.5498e-250)}
; -1.7623127999901171403251964875380508601665496826171875p958 * -1.82558941244094885547610829235054552555084228515625p-830 == 1.6086297945355607641459982914966531097888946533203125p129
; [HW: 1.6086297945355607641459982914966531097888946533203125p129] 

; mpf : + 2741024915876933 129
; mpfd: + 2741024915876933 129 (1.09478e+039) class: Pos. norm. non-zero
; hwf : + 2741024915876933 129 (1.09478e+039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110111101 #b1100001100100110111011101000000101000111100111010011)))
(assert (= y (fp #b1 #b00011000001 #b1101001101011001110100111110011001011011100101000100)))
(assert (= r (fp #b0 #b10010000000 #b1001101111001111001010011000011011100110110001000101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
