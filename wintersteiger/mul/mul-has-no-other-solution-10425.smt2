(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8573433051794461245975753627135418355464935302734375p-345 {- 3861130989734743 -345 (-2.59146e-104)}
; Y = 1.837008094041026939891025904216803610324859619140625p761 {+ 3769549340429258 761 (2.22812e+229)}
; -1.8573433051794461245975753627135418355464935302734375p-345 * 1.837008094041026939891025904216803610324859619140625p761 == -1.7059773425137780833438228000886738300323486328125p417
; [HW: -1.7059773425137780833438228000886738300323486328125p417] 

; mpf : - 3179439296677064 417
; mpfd: - 3179439296677064 417 (-5.77406e+125) class: Neg. norm. non-zero
; hwf : - 3179439296677064 417 (-5.77406e+125) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010100110 #b1101101101111010110110011101000100110000101101010111)))
(assert (= y (fp #b0 #b11011111000 #b1101011001000110001010011001011001100100101111001010)))
(assert (= r (fp #b1 #b10110100000 #b1011010010111010111011100101110111010000010011001000)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
