(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.15710806786853215299970543128438293933868408203125p82 {- 707551835909620 82 (-5.59543e+024)}
; Y = 1.808556806910184722170242821448482573032379150390625p-907 {+ 3641416134308586 -907 (1.67158e-273)}
; -1.15710806786853215299970543128438293933868408203125p82 * 1.808556806910184722170242821448482573032379150390625p-907 == -1.04634783623716298706085581216029822826385498046875p-824
; [HW: -1.04634783623716298706085581216029822826385498046875p-824] 

; mpf : - 208732098007116 -824
; mpfd: - 208732098007116 -824 (-9.35319e-249) class: Neg. norm. non-zero
; hwf : - 208732098007116 -824 (-9.35319e-249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010001 #b0010100000111000001110111111110101101110110111110100)))
(assert (= y (fp #b0 #b00001110100 #b1100111011111101100101000011001010100011001011101010)))
(assert (= r (fp #b1 #b00011000111 #b0000101111011101011100111010100011100001000001001100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
