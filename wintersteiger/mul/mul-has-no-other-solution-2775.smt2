(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.546670520709781282420181014458648860454559326171875p699 {+ 2461985153363006 699 (4.06785e+210)}
; Y = 1.1634003478499332917550646016024984419345855712890625p224 {+ 735889745689169 224 (3.13652e+067)}
; 1.546670520709781282420181014458648860454559326171875p699 * 1.1634003478499332917550646016024984419345855712890625p224 == 1.799397021802997098660625852062366902828216552734375p923
; [HW: 1.799397021802997098660625852062366902828216552734375p923] 

; mpf : + 3600164129513062 923
; mpfd: + 3600164129513062 923 (1.27589e+278) class: Pos. norm. non-zero
; hwf : + 3600164129513062 923 (1.27589e+278) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010111010 #b1000101111110010100110010110100000100010110000111110)))
(assert (= y (fp #b0 #b10011011111 #b0010100111010100100110101110111000101011101001010001)))
(assert (= r (fp #b0 #b11110011010 #b1100110010100101010010001000000100101001111001100110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
