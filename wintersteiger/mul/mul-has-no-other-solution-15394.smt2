(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4373388860878011374921925380476750433444976806640625p-810 {- 1969599244419649 -810 (-2.10505e-244)}
; Y = 1.0474198516749908538514546307851560413837432861328125p22 {+ 213560026333453 22 (4.3932e+006)}
; -1.4373388860878011374921925380476750433444976806640625p-810 * 1.0474198516749908538514546307851560413837432861328125p22 == -1.5054972828727810618687499299994669854640960693359375p-788
; [HW: -1.5054972828727810618687499299994669854640960693359375p-788] 

; mpf : - 2276557374782655 -788
; mpfd: - 2276557374782655 -788 (-9.24791e-238) class: Neg. norm. non-zero
; hwf : - 2276557374782655 -788 (-9.24791e-238) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010101 #b0110111111110101011100001111010100000100001001000001)))
(assert (= y (fp #b0 #b10000010101 #b0000110000100011101101010001100000100000000100001101)))
(assert (= r (fp #b1 #b00011101011 #b1000000101101000010001010001101000100111110010111111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
