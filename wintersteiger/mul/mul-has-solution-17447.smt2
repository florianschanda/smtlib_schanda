(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.321167814874655732637620531022548675537109375p-100 {+ 1446411251392896 -100 (1.04222e-030)}
; Y = -1.343567494287493335747285527759231626987457275390625p-547 {- 1547290439249770 -547 (-2.91643e-165)}
; 1.321167814874655732637620531022548675537109375p-100 * -1.343567494287493335747285527759231626987457275390625p-547 == -1.7750781305644240948282686076709069311618804931640625p-647
; [HW: -1.7750781305644240948282686076709069311618804931640625p-647] 

; mpf : - 3490641579992961 -647
; mpfd: - 3490641579992961 -647 (-3.03956e-195) class: Neg. norm. non-zero
; hwf : - 3490641579992961 -647 (-3.03956e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011011 #b0101001000111000000011011100110101101010000110000000)))
(assert (= y (fp #b1 #b00111011100 #b0101011111110100000010100000111111101110111101101010)))
(assert (= r (fp #b1 #b00101111000 #b1100011001101011100001010011011010011110011110000001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
