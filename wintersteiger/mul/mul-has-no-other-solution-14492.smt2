(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.834371529252335708548571346909739077091217041015625p-922 {+ 3757675308229370 -922 (5.17406e-278)}
; Y = -1.0840453432723304860729740539682097733020782470703125p842 {- 378506576643493 842 (-3.1791e+253)}
; 1.834371529252335708548571346909739077091217041015625p-922 * -1.0840453432723304860729740539682097733020782470703125p842 == -1.9885419141173381607501369217061437666416168212890625p-80
; [HW: -1.9885419141173381607501369217061437666416168212890625p-80] 

; mpf : - 4451996996058961 -80
; mpfd: - 4451996996058961 -80 (-1.64488e-024) class: Neg. norm. non-zero
; hwf : - 4451996996058961 -80 (-1.64488e-024) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100101 #b1101010110011001010111110101111011011010001011111010)))
(assert (= y (fp #b1 #b11101001001 #b0001010110000011111111101110000010111100010110100101)))
(assert (= r (fp #b1 #b01110101111 #b1111110100010001000101010011011111011011111101010001)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
