(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.404628029543287137670404263189993798732757568359375p-633 {- 1822282643074806 -633 (-3.94071e-191)}
; Y = 1.421544503576466222938279315712861716747283935546875p251 {+ 1898467669227054 251 (5.14386e+075)}
; -1.404628029543287137670404263189993798732757568359375p-633 * 1.421544503576466222938279315712861716747283935546875p251 == -1.9967412549667018506482918382971547544002532958984375p-382
; [HW: -1.9967412549667018506482918382971547544002532958984375p-382] 

; mpf : - 4488923544452839 -382
; mpfd: - 4488923544452839 -382 (-2.02705e-115) class: Neg. norm. non-zero
; hwf : - 4488923544452839 -382 (-2.02705e-115) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110000110 #b0110011110010101101100111101100111101110111011110110)))
(assert (= y (fp #b0 #b10011111010 #b0110101111101010010101110011000010101011011000101110)))
(assert (= r (fp #b1 #b01010000001 #b1111111100101010011011110101010010100111111011100111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
