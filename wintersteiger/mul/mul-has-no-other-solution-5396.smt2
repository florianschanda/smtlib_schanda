(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2650897294748861821034324748325161635875701904296875p-728 {- 1193858006882843 -728 (-8.95951e-220)}
; Y = 1.3983290533096204288909802926355041563510894775390625p45 {+ 1793914576056049 45 (4.91993e+013)}
; -1.2650897294748861821034324748325161635875701904296875p-728 * 1.3983290533096204288909802926355041563510894775390625p45 == -1.769011723768341592943897921941243112087249755859375p-683
; [HW: -1.769011723768341592943897921941243112087249755859375p-683] 

; mpf : - 3463320912606646 -683
; mpfd: - 3463320912606646 -683 (-4.40802e-206) class: Neg. norm. non-zero
; hwf : - 3463320912606646 -683 (-4.40802e-206) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100111 #b0100001111011100111010111010011010011001101000011011)))
(assert (= y (fp #b0 #b10000101100 #b0110010111111000111001001001000100000010111011110001)))
(assert (= r (fp #b1 #b00101010100 #b1100010011011101111100111100101111010011010110110110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
