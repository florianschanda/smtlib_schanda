(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8491796449659105849860907255788333714008331298828125p-35 {- 3824365132639085 -35 (-5.38182e-011)}
; Y = -1.19067985841633205978951082215644419193267822265625p-516 {- 858745739310852 -516 (-5.55031e-156)}
; -1.8491796449659105849860907255788333714008331298828125p-35 * -1.19067985841633205978951082215644419193267822265625p-516 == 1.100890478927186943991500811534933745861053466796875p-550
; [HW: 1.100890478927186943991500811534933745861053466796875p-550] 

; mpf : + 454370323301710 -550
; mpfd: + 454370323301710 -550 (2.98708e-166) class: Pos. norm. non-zero
; hwf : + 454370323301710 -550 (2.98708e-166) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111011100 #b1101100101100011110101100101001110001110101101101101)))
(assert (= y (fp #b1 #b00111111011 #b0011000011010000011001010010101111100111011100000100)))
(assert (= r (fp #b0 #b00111011001 #b0001100111010011111101010101101101111000010101001110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
