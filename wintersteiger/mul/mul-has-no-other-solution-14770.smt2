(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.288637006429732334567006546421907842159271240234375p-762 {+ 1299905514602278 -762 (5.31219e-230)}
; Y = -1.1531508797275431543738477557781152427196502685546875p-223 {- 689730244872427 -223 (-8.55455e-068)}
; 1.288637006429732334567006546421907842159271240234375p-762 * -1.1531508797275431543738477557781152427196502685546875p-223 == -1.4859928976139133993683572043664753437042236328125p-985
; [HW: -1.4859928976139133993683572043664753437042236328125p-985] 

; mpf : - 2188717432598728 -985
; mpfd: - 2188717432598728 -985 (-4.54434e-297) class: Neg. norm. non-zero
; hwf : - 2188717432598728 -985 (-4.54434e-297) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000101 #b0100100111100100000111010110011100000111111100100110)))
(assert (= y (fp #b1 #b01100100000 #b0010011100110100111001010110001111001000100011101011)))
(assert (= r (fp #b1 #b00000100110 #b0111110001101010000001111101000101010111000011001000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
