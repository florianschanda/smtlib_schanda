(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.44425829751416046065060072578489780426025390625p127 {+ 2000761503141024 127 (2.45728e+038)}
; Y = -1.01996526093335404539175215177237987518310546875p-977 {- 89915541699808 -977 (-7.98509e-295)}
; 1.44425829751416046065060072578489780426025390625p127 * -1.01996526093335404539175215177237987518310546875p-977 == -1.4730932912791925293305439481628127396106719970703125p-850
; [HW: -1.4730932912791925293305439481628127396106719970703125p-850] 

; mpf : - 2130622770316453 -850
; mpfd: - 2130622770316453 -850 (-1.96216e-256) class: Neg. norm. non-zero
; hwf : - 2130622770316453 -850 (-1.96216e-256) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111110 #b0111000110111010111010010110101011001100110010100000)))
(assert (= y (fp #b1 #b00000101110 #b0000010100011100011100010111111011000011110011100000)))
(assert (= r (fp #b1 #b00010101101 #b0111100100011100101001000101011000000000010010100101)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
