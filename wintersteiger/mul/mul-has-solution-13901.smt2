(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.743090437850896012861312556196935474872589111328125p-181 {- 3346581819007874 -181 (-5.6871e-055)}
; Y = 1.9974903623073363423401360705611295998096466064453125p952 {+ 4492297223992981 952 (7.60397e+286)}
; -1.743090437850896012861312556196935474872589111328125p-181 * 1.9974903623073363423401360705611295998096466064453125p952 == -1.7409031751186196945724304896430112421512603759765625p772
; [HW: -1.7409031751186196945724304896430112421512603759765625p772] 

; mpf : - 3336731263381833 772
; mpfd: - 3336731263381833 772 (-4.32445e+232) class: Neg. norm. non-zero
; hwf : - 3336731263381833 772 (-4.32445e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001010 #b1011111000111011001011001100100010001010001110000010)))
(assert (= y (fp #b0 #b11110110111 #b1111111101011011100001110100010000101111011010010101)))
(assert (= r (fp #b1 #b11100000011 #b1011110110101011110101001001101010100011000101001001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
