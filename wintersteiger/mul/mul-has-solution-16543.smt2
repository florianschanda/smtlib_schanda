(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.42059011928716483197376874159090220928192138671875p-388 {+ 1894169504497388 -388 (2.25336e-117)}
; Y = -1.766190132501230802830605171038769185543060302734375p259 {- 3450613595227494 259 (-1.63609e+078)}
; 1.42059011928716483197376874159090220928192138671875p-388 * -1.766190132501230802830605171038769185543060302734375p259 == -1.25451612550686864011595389456488192081451416015625p-128
; [HW: -1.25451612550686864011595389456488192081451416015625p-128] 

; mpf : - 1146238727992516 -128
; mpfd: - 1146238727992516 -128 (-3.68669e-039) class: Neg. norm. non-zero
; hwf : - 1146238727992516 -128 (-3.68669e-039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111011 #b0110101110101011110010110100011101011011111011101100)))
(assert (= y (fp #b1 #b10100000010 #b1100010000100101000010010101100110011100010101100110)))
(assert (= r (fp #b1 #b01101111111 #b0100000100100111111110000000001101011011010011000100)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
