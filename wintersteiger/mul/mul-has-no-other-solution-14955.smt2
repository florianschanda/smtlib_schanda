(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.98635247349826737917055652360431849956512451171875p-39 {+ 4442136632102764 -39 (3.61315e-012)}
; Y = 1.232000727870802503360891932970844209194183349609375p643 {+ 1044838391588630 643 (4.49674e+193)}
; 1.98635247349826737917055652360431849956512451171875p-39 * 1.232000727870802503360891932970844209194183349609375p643 == 1.2235938465789171214481712013366632163524627685546875p605
; [HW: 1.2235938465789171214481712013366632163524627685546875p605] 

; mpf : + 1006977164135147 605
; mpfd: + 1006977164135147 605 (1.62474e+182) class: Pos. norm. non-zero
; hwf : + 1006977164135147 605 (1.62474e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011000 #b1111110010000001100110001000000000000000111101101100)))
(assert (= y (fp #b0 #b11010000010 #b0011101101100100011001100101001011011010011100010110)))
(assert (= r (fp #b0 #b11001011100 #b0011100100111101011100100100001010100100101011101011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
