(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9902098397608209978670856798999011516571044921875p-201 {- 4459508665365432 -201 (-6.19255e-061)}
; Y = 1.076347013362091598054348651203326880931854248046875p-614 {+ 343836380928366 -614 (1.5832e-185)}
; -1.9902098397608209978670856798999011516571044921875p-201 * 1.076347013362091598054348651203326880931854248046875p-614 == -1.0710782084952030768221220569103024899959564208984375p-814
; [HW: -1.0710782084952030768221220569103024899959564208984375p-814] 

; mpf : - 320107793293159 -814
; mpfd: - 320107793293159 -814 (-9.80403e-246) class: Neg. norm. non-zero
; hwf : - 320107793293159 -814 (-9.80403e-246) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110110 #b1111110101111110011001000101110111110011001110111000)))
(assert (= y (fp #b0 #b00110011001 #b0001001110001011011110100101010110001001100101101110)))
(assert (= r (fp #b1 #b00011010001 #b0001001000110010001011100111010011110001111101100111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
