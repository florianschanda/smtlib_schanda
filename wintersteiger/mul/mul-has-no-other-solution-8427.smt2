(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0902089306492717124541513840085826814174652099609375p502 {- 406264906457551 502 (-1.42747e+151)}
; Y = 1.2209133784637999919908679657964967191219329833984375p-206 {+ 994905408930727 -206 (1.18715e-062)}
; -1.0902089306492717124541513840085826814174652099609375p502 * 1.2209133784637999919908679657964967191219329833984375p-206 == -1.3310506687504088940698920850991271436214447021484375p296
; [HW: -1.3310506687504088940698920850991271436214447021484375p296] 

; mpf : - 1490919668425095 296
; mpfd: - 1490919668425095 296 (-1.69462e+089) class: Neg. norm. non-zero
; hwf : - 1490919668425095 296 (-1.69462e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110101 #b0001011100010111111011101011011011110010000111001111)))
(assert (= y (fp #b0 #b01100110001 #b0011100010001101110001110111011111000000001110100111)))
(assert (= r (fp #b1 #b10100100111 #b0101010010111111101111001001001110011010000110000111)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
