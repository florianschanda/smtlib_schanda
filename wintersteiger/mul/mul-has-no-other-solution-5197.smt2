(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.651535005882772910723588211112655699253082275390625p323 {+ 2934252809712490 323 (2.82213e+097)}
; Y = -1.612166745335908313307982098194770514965057373046875p150 {- 2756953926183406 150 (-2.30096e+045)}
; 1.651535005882772910723588211112655699253082275390625p323 * -1.612166745335908313307982098194770514965057373046875p150 == -1.331274907621175174199379398487508296966552734375p474
; [HW: -1.331274907621175174199379398487508296966552734375p474] 

; mpf : - 1491929550519920 474
; mpfd: - 1491929550519920 474 (-6.4936e+142) class: Neg. norm. non-zero
; hwf : - 1491929550519920 474 (-6.4936e+142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101000010 #b1010011011001010111111111000011001110111001101101010)))
(assert (= y (fp #b1 #b10010010101 #b1001110010110110111101011011011011101010100111101110)))
(assert (= r (fp #b1 #b10111011001 #b0101010011001110011011101010111000110111111001110000)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
