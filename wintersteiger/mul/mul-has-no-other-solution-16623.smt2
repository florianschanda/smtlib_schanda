(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.38572962720914549805684146122075617313385009765625p580 {+ 1737171805364868 580 (5.48373e+174)}
; Y = 1.4148306624430821987203898970619775354862213134765625p-525 {+ 1868231216800521 -525 (1.28812e-158)}
; 1.38572962720914549805684146122075617313385009765625p580 * 1.4148306624430821987203898970619775354862213134765625p-525 == 1.960572766431320612667832392617128789424896240234375p55
; [HW: 1.960572766431320612667832392617128789424896240234375p55] 

; mpf : + 4326035152962342 55
; mpfd: + 4326035152962342 55 (7.06371e+016) class: Pos. norm. non-zero
; hwf : + 4326035152962342 55 (7.06371e+016) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000011 #b0110001010111111001011010100010111110110001010000100)))
(assert (= y (fp #b0 #b00111110010 #b0110101000110010010101111010000010010010001100001001)))
(assert (= r (fp #b0 #b10000110110 #b1111010111101000000110001100100101000000001100100110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
