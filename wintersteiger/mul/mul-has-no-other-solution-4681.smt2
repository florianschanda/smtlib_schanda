(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2048643855561576021528935598325915634632110595703125p313 {- 922627170452197 313 (-2.01061e+094)}
; Y = -1.4750304375597182993118394733755849301815032958984375p593 {- 2139346901583591 593 (-4.78177e+178)}
; -1.2048643855561576021528935598325915634632110595703125p313 * -1.4750304375597182993118394733755849301815032958984375p593 == 1.7772116418270200721707396951387636363506317138671875p906
; [HW: 1.7772116418270200721707396951387636363506317138671875p906] 

; mpf : + 3500250060520179 906
; mpfd: + 3500250060520179 906 (9.61425e+272) class: Pos. norm. non-zero
; hwf : + 3500250060520179 906 (9.61425e+272) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100111000 #b0011010001110001111111100000110000010100001011100101)))
(assert (= y (fp #b1 #b11001010000 #b0111100110011011100110000100000111101100011011100111)))
(assert (= r (fp #b0 #b11110001001 #b1100011011110111010101111001011110110111101011110011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
