(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5043583455653253277972680734819732606410980224609375p-1010 {- 2271428057149199 -1010 (-1.37106e-304)}
; Y = 1.5339313602238726641502353231771849095821380615234375p684 {+ 2404613074945655 684 (1.23118e+206)}
; -1.5043583455653253277972680734819732606410980224609375p-1010 * 1.5339313602238726641502353231771849095821380615234375p684 == -1.1537912216385770580728831191663630306720733642578125p-325
; [HW: -1.1537912216385770580728831191663630306720733642578125p-325] 

; mpf : - 692614088464349 -325
; mpfd: - 692614088464349 -325 (-1.68802e-098) class: Neg. norm. non-zero
; hwf : - 692614088464349 -325 (-1.68802e-098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001101 #b1000000100011101101000001110011110101010111100001111)))
(assert (= y (fp #b0 #b11010101011 #b1000100010101111101110011100001001111000011001110111)))
(assert (= r (fp #b1 #b01010111010 #b0010011101011110110111001000101101011001011111011101)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
