(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3716784064885185756565988413058221340179443359375p114 {- 1673890732963352 114 (-2.84886e+034)}
; Y = 1.6132312640060681996345692823524586856365203857421875p-47 {+ 2761748092069667 -47 (1.14627e-014)}
; -1.3716784064885185756565988413058221340179443359375p114 * 1.6132312640060681996345692823524586856365203857421875p-47 == -1.1064172447546509747695608893991447985172271728515625p68
; [HW: -1.1064172447546509747695608893991447985172271728515625p68] 

; mpf : - 479260663822841 68
; mpfd: - 479260663822841 68 (-3.26557e+020) class: Neg. norm. non-zero
; hwf : - 479260663822841 68 (-3.26557e+020) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001110001 #b0101111100100110010100001110100001111111011000011000)))
(assert (= y (fp #b0 #b01111010000 #b1001110011111100101110010101111111001010011100100011)))
(assert (= r (fp #b1 #b10001000011 #b0001101100111110001010010001100111110011100111111001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
