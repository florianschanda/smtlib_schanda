(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.92757783325899101356526443851180374622344970703125p459 {+ 4177439184222324 459 (2.86933e+138)}
; Y = -1.9368034672715228605710535703110508620738983154296875p-1009 {- 4218987746123419 -1009 (-3.53037e-304)}
; 1.92757783325899101356526443851180374622344970703125p459 * -1.9368034672715228605710535703110508620738983154296875p-1009 == -1.8666697154458715690594772240729071199893951416015625p-549
; [HW: -1.8666697154458715690594772240729071199893951416015625p-549] 

; mpf : - 3903133407535321 -549
; mpfd: - 3903133407535321 -549 (-1.01298e-165) class: Neg. norm. non-zero
; hwf : - 3903133407535321 -549 (-1.01298e-165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111001010 #b1110110101110101101111011010101001010111100001110100)))
(assert (= y (fp #b1 #b00000001110 #b1110111111010010010110100001111010110101111010011011)))
(assert (= r (fp #b1 #b00111011010 #b1101110111011110000100010000010001000110000011011001)))
(assert (= (fp.mul roundTowardZero x y) r))
(check-sat)
(exit)
