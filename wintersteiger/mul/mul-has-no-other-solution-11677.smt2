(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1274474385095432094061607131152413785457611083984375p4 {+ 573972236580903 4 (18.0392)}
; Y = -1.683128713978056634203994690324179828166961669921875p-223 {- 3076538221717662 -223 (-1.24861e-067)}
; 1.1274474385095432094061607131152413785457611083984375p4 * -1.683128713978056634203994690324179828166961669921875p-223 == -1.897639157256421515995725712855346500873565673828125p-219
; [HW: -1.897639157256421515995725712855346500873565673828125p-219] 

; mpf : - 4042607374133186 -219
; mpfd: - 4042607374133186 -219 (-2.2524e-066) class: Neg. norm. non-zero
; hwf : - 4042607374133186 -219 (-2.2524e-066) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000000011 #b0010000010100000011001010011010001011011100000100111)))
(assert (= y (fp #b1 #b01100100000 #b1010111011100001100001011111110101111110100010011110)))
(assert (= r (fp #b1 #b01100100100 #b1110010111001011101011100000100000000110011111000010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
