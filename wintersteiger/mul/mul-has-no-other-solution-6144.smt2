(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.428015876759995972378192163887433707714080810546875p511 {- 1927612143084974 511 (-9.57328e+153)}
; Y = -1.9937340672686680864700292659108527004718780517578125p276 {- 4475380375056541 276 (-2.42073e+083)}
; -1.428015876759995972378192163887433707714080810546875p511 * -1.9937340672686680864700292659108527004718780517578125p276 == 1.423541951048469922369577034260146319866180419921875p788
; [HW: 1.423541951048469922369577034260146319866180419921875p788] 

; mpf : + 1907463372917662 788
; mpfd: + 1907463372917662 788 (2.31743e+237) class: Pos. norm. non-zero
; hwf : + 1907463372917662 788 (2.31743e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111111110 #b0110110110010010011100101101000011011010010110101110)))
(assert (= y (fp #b1 #b10100010011 #b1111111001100101010110110001011111010111000010011101)))
(assert (= r (fp #b0 #b11100010011 #b0110110001101101001111101100110000111100101110011110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
