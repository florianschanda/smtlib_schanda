(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4400597766450295988960306203807704150676727294921875p408 {+ 1981853046119299 408 (9.5196e+122)}
; Y = 1.9820201755284607703089250207995064556598663330078125p907 {+ 4422625696580285 907 (2.14444e+273)}
; 1.4400597766450295988960306203807704150676727294921875p408 * 1.9820201755284607703089250207995064556598663330078125p907 == 1.9999999999999997779553950749686919152736663818359375p1023
; [HW: 1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : + 4503599627370495 1023
; mpfd: + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero
; hwf : + 4503599627370495 1023 (1.79769e+308) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110010111 #b0111000010100111110000011110110011111001101110000011)))
(assert (= y (fp #b0 #b11110001010 #b1111101101100101101011001001100111101000001010111101)))
(assert (= r (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
