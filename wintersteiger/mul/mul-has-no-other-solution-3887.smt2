(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.667761055132793490685116921667940914630889892578125p-923 {+ 3007328439068578 -923 (2.35206e-278)}
; Y = 1.821978014127752398820803136914037168025970458984375p185 {+ 3701859878132486 185 (8.93495e+055)}
; 1.667761055132793490685116921667940914630889892578125p-923 * 1.821978014127752398820803136914037168025970458984375p185 == 1.51931198763522612438237047172151505947113037109375p-737
; [HW: 1.51931198763522612438237047172151505947113037109375p-737] 

; mpf : + 2338773274003036 -737
; mpfd: + 2338773274003036 -737 (2.10155e-222) class: Pos. norm. non-zero
; hwf : + 2338773274003036 -737 (2.10155e-222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001100100 #b1010101011110010011000110111010101010110011110100010)))
(assert (= y (fp #b0 #b10010111000 #b1101001001101101001001101011000010110101101100000110)))
(assert (= r (fp #b0 #b00100011110 #b1000010011110001101000010110001101010000011001011100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
