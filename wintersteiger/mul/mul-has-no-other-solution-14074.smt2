(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.1394154657664810059714000090025365352630615234375p-978 {+ 627871439675608 -978 (4.46012e-295)}
; Y = -1.60658527006851148399846351821906864643096923828125p791 {- 2731817196248980 791 (-2.09233e+238)}
; 1.1394154657664810059714000090025365352630615234375p-978 * -1.60658527006851148399846351821906864643096923828125p791 == -1.830568103788680733856608640053309500217437744140625p-187
; [HW: -1.830568103788680733856608640053309500217437744140625p-187] 

; mpf : - 3740546202728522 -187
; mpfd: - 3740546202728522 -187 (-9.33204e-057) class: Neg. norm. non-zero
; hwf : - 3740546202728522 -187 (-9.33204e-057) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101101 #b0010001110110000101110110110001000000110000011011000)))
(assert (= y (fp #b1 #b11100010110 #b1001101101001001001011000001100100101101111110010100)))
(assert (= r (fp #b1 #b01101000100 #b1101010010100000000111000111101011011111100001001010)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
