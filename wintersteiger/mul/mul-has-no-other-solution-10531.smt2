(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2764501314361360595484029545332305133342742919921875p-735 {- 1245020708922307 -735 (-7.06248e-222)}
; Y = -1.2640813656884815063818905400694347918033599853515625p-144 {- 1189316740110137 -144 (-5.66834e-044)}
; -1.2764501314361360595484029545332305133342742919921875p-735 * -1.2640813656884815063818905400694347918033599853515625p-144 == 1.6135368253790327575103447088622488081455230712890625p-879
; [HW: 1.6135368253790327575103447088622488081455230712890625p-879] 

; mpf : + 2763124218155089 -879
; mpfd: + 2763124218155089 -879 (4.00325e-265) class: Pos. norm. non-zero
; hwf : + 2763124218155089 -879 (4.00325e-265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100000 #b0100011011000101011011111001000101111110001111000011)))
(assert (= y (fp #b1 #b01101101111 #b0100001110011010110101100001110100011101011100111001)))
(assert (= r (fp #b0 #b00010010000 #b1001110100010000101111111101011111100101000001010001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
