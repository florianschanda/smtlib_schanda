(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9788087854571883017484879019320942461490631103515625p-339 {- 4408162881451961 -339 (-1.76699e-102)}
; Y = -1.879590119107427792499720453633926808834075927734375p-685 {- 3961321732650982 -685 (-1.17089e-206)}
; -1.9788087854571883017484879019320942461490631103515625p-339 * -1.879590119107427792499720453633926808834075927734375p-685 == 0.9298373601870750793096931374748237431049346923828125p-1022
; [HW: 0.9298373601870750793096931374748237431049346923828125p-1022] 

; mpf : + 4187615188853677 -1023
; mpfd: + 4187615188853677 -1023 (2.06896e-308) class: Pos. denorm.
; hwf : + 4187615188853677 -1023 (2.06896e-308) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010101100 #b1111101010010011001101100110101010010011011110111001)))
(assert (= y (fp #b1 #b00101010010 #b1110000100101100110100010110101101110011011111100110)))
(assert (= r (fp #b0 #b00000000000 #b1110111000001001110100100011110010011010001110101101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
