(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3511516561864898022804482025094330310821533203125p-854 {- 1581446467952008 -854 (-1.12483e-257)}
; Y = -0.6941303312532396407874557553441263735294342041015625p-1022 {- 3126085101178649 -1023 (-1.54449e-308)}
; -1.3511516561864898022804482025094330310821533203125p-854 * -0.6941303312532396407874557553441263735294342041015625p-1022 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101001 #b0101100111100101000100110010111101000001110110001000)))
(assert (= y (fp #b1 #b00000000000 #b1011000110110010100001100111111111100100111100011001)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
