(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2295847214150423809542189701460301876068115234375p-10 {- 1033957665814744 -10 (-0.00120077)}
; Y = 1.0446526144870575958378822178929112851619720458984375p840 {+ 201097497965031 840 (7.65893e+252)}
; -1.2295847214150423809542189701460301876068115234375p-10 * 1.0446526144870575958378822178929112851619720458984375p840 == -1.2844888939595644483659953039023093879222869873046875p830
; [HW: -1.2844888939595644483659953039023093879222869873046875p830] 

; mpf : - 1281224076827339 830
; mpfd: - 1281224076827339 830 (-9.19659e+249) class: Neg. norm. non-zero
; hwf : - 1281224076827339 830 (-9.19659e+249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111110101 #b0011101011000110000100000111011000100011100011011000)))
(assert (= y (fp #b0 #b11101000111 #b0000101101101110010110101000111011100111000111100111)))
(assert (= r (fp #b1 #b11100111101 #b0100100011010100010000111001111110100001101011001011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
