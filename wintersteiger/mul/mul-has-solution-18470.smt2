(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9493268597966755262262950054719112813472747802734375p-544 {+ 4275388092033111 -544 (3.38507e-164)}
; Y = -1.685214016193246067132349708117544651031494140625p290 {- 3085929587996944 290 (-3.35238e+087)}
; 1.9493268597966755262262950054719112813472747802734375p-544 * -1.685214016193246067132349708117544651031494140625p290 == -1.6425164731356620695379433527705259621143341064453125p-253
; [HW: -1.6425164731356620695379433527705259621143341064453125p-253] 

; mpf : - 2893636948993173 -253
; mpfd: - 2893636948993173 -253 (-1.1348e-076) class: Neg. norm. non-zero
; hwf : - 2893636948993173 -253 (-1.1348e-076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111011111 #b1111001100000111000101011100100000001010100001010111)))
(assert (= y (fp #b1 #b10100100001 #b1010111101101010001011111000111001001111100100010000)))
(assert (= r (fp #b1 #b01100000010 #b1010010001111011111101011010011101000010010010010101)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
