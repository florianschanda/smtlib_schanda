(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.460535933405800346207570328260771930217742919921875p603 {- 2074069458077086 603 (-4.84841e+181)}
; Y = -1.9191103493768604248970177650335244834423065185546875p-877 {- 4139305026965995 -877 (-1.90456e-264)}
; -1.460535933405800346207570328260771930217742919921875p603 * -1.9191103493768604248970177650335244834423065185546875p-877 == 1.401464812717932328922643137047998607158660888671875p-273
; [HW: 1.401464812717932328922643137047998607158660888671875p-273] 

; mpf : + 1808036780958846 -273
; mpfd: + 1808036780958846 -273 (9.23407e-083) class: Pos. norm. non-zero
; hwf : + 1808036780958846 -273 (9.23407e-083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011010 #b0111010111100101101011101101010010011100010110011110)))
(assert (= y (fp #b1 #b00010010010 #b1110101101001010110100001101101111111101000111101011)))
(assert (= r (fp #b0 #b01011101110 #b0110011011000110011001011110000100011110010001111110)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
