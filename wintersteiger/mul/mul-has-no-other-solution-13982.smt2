(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.648081636804426874931550628389231860637664794921875p372 {+ 2918700218018078 372 (1.58539e+112)}
; Y = 1.41541388560079184344431268982589244842529296875p-653 {+ 1870857820396256 -653 (3.78701e-197)}
; 1.648081636804426874931550628389231860637664794921875p372 * 1.41541388560079184344431268982589244842529296875p-653 == 1.1663588166683336311280072550289332866668701171875p-280
; [HW: 1.1663588166683336311280072550289332866668701171875p-280] 

; mpf : + 749213504757304 -280
; mpfd: + 749213504757304 -280 (6.0039e-085) class: Pos. norm. non-zero
; hwf : + 749213504757304 -280 (6.0039e-085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101110011 #b1010010111101000101011011001101100110110100100011110)))
(assert (= y (fp #b0 #b00101110010 #b0110101001011000100100000111110011110101101011100000)))
(assert (= r (fp #b0 #b01011100111 #b0010101010010110011111011100110011111101111000111000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
