(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.640519210939105132496251826523803174495697021484375p-336 {+ 2884642079708998 -336 (1.17193e-101)}
; Y = -1.7896124491636731246302360887057147920131683349609375p-639 {- 3556098331820623 -639 (-7.84498e-193)}
; 1.640519210939105132496251826523803174495697021484375p-336 * -1.7896124491636731246302360887057147920131683349609375p-639 == -1.4679468014943941600591870155767537653446197509765625p-974
; [HW: -1.4679468014943941600591870155767537653446197509765625p-974] 

; mpf : - 2107445040839369 -974
; mpfd: - 2107445040839369 -974 (-9.19379e-294) class: Neg. norm. non-zero
; hwf : - 2107445040839369 -974 (-9.19379e-294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010101111 #b1010001111111001000100010010011101110001011101000110)))
(assert (= y (fp #b1 #b00110000000 #b1100101000100100000010101001110110101100001001001111)))
(assert (= r (fp #b1 #b00000110001 #b0111011111001011010111001001000010101111101011001001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
