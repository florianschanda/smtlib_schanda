(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -0.8336709868858971361760268337093293666839599609375p-1022 {- 3754520345888920 -1023 (-1.85498e-308)}
; Y = 1.8707318186413346428054182979394681751728057861328125p290 {+ 3921427493972749 290 (3.72143e+087)}
; -0.8336709868858971361760268337093293666839599609375p-1022 * 1.8707318186413346428054182979394681751728057861328125p290 == -1.5595748414455707919756832779967226088047027587890625p-732
; [HW: -1.5595748414455707919756832779967226088047027587890625p-732] 

; mpf : - 2520101047420177 -732
; mpfd: - 2520101047420177 -732 (-6.90318e-221) class: Neg. norm. non-zero
; hwf : - 2520101047420177 -732 (-6.90318e-221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1101010101101011011101100011100001001100100010011000)))
(assert (= y (fp #b0 #b10100100001 #b1101111011101000010001111100110010100110101100001101)))
(assert (= r (fp #b1 #b00100100011 #b1000111101000000010010111111101110101100010100010001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
