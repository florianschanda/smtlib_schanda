(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8075024314361509691906348962220363318920135498046875p-105 {+ 3636667649316619 -105 (4.45584e-032)}
; Y = -1.547364844546411433157118153758347034454345703125p875 {- 2465112109934928 875 (-3.89797e+263)}
; 1.8075024314361509691906348962220363318920135498046875p-105 * -1.547364844546411433157118153758347034454345703125p875 == -1.398432859418230034265206995769403874874114990234375p771
; [HW: -1.398432859418230034265206995769403874874114990234375p771] 

; mpf : - 1794382077208102 771
; mpfd: - 1794382077208102 771 (-1.73687e+232) class: Neg. norm. non-zero
; hwf : - 1794382077208102 771 (-1.73687e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010110 #b1100111010111000011110101011011001110101011100001011)))
(assert (= y (fp #b1 #b11101101010 #b1000110000100000000110100011101001001110100101010000)))
(assert (= r (fp #b1 #b11100000010 #b0110010111111111101100100010010011011010011000100110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
