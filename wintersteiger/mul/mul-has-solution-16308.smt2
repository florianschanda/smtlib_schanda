(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.651984560721435624230934990919195115566253662109375p836 {- 2936277424716374 836 (-7.56976e+251)}
; Y = 1.0149265421055140290462759367073886096477508544921875p-882 {+ 67223169464323 -882 (3.14759e-266)}
; -1.651984560721435624230934990919195115566253662109375p836 * 1.0149265421055140290462759367073886096477508544921875p-882 == -1.67664297782470317343950227950699627399444580078125p-46
; [HW: -1.67664297782470317343950227950699627399444580078125p-46] 

; mpf : - 3047329062794196 -46
; mpfd: - 3047329062794196 -46 (-2.38265e-014) class: Neg. norm. non-zero
; hwf : - 3047329062794196 -46 (-2.38265e-014) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000011 #b1010011011101000011101011100110111001011101001010110)))
(assert (= y (fp #b0 #b00010001101 #b0000001111010010001110011101001000101111100000000011)))
(assert (= r (fp #b1 #b01111010001 #b1010110100111000011110010110010011010011001111010100)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
