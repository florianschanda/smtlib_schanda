(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5815791043736353582715992160956375300884246826171875p-111 {+ 2619199437743571 -111 (6.09202e-034)}
; Y = 1.7968133664717618191986048259423114359378814697265625p-803 {+ 3588528380326057 -803 (3.36834e-242)}
; 1.5815791043736353582715992160956375300884246826171875p-111 * 1.7968133664717618191986048259423114359378814697265625p-803 == 1.420901237435492792116065174923278391361236572265625p-913
; [HW: 1.420901237435492792116065174923278391361236572265625p-913] 

; mpf : + 1895570656074266 -913
; mpfd: + 1895570656074266 -913 (2.052e-275) class: Pos. norm. non-zero
; hwf : + 1895570656074266 -913 (2.052e-275) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010000 #b1001010011100010010111100100000101010010010111010011)))
(assert (= y (fp #b0 #b00011011100 #b1100101111111011111101011111011000000011000010101001)))
(assert (= r (fp #b0 #b00001101110 #b0110101111000000001011101111100110100001101000011010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
