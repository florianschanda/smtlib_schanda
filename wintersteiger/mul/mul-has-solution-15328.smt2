(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3941474568774971931617301379446871578693389892578125p39 {+ 1775082339922525 39 (7.66441e+011)}
; Y = -1.8917136113613455261628359949099831283092498779296875p-135 {- 4015921087848155 -135 (-4.34316e-041)}
; 1.3941474568774971931617301379446871578693389892578125p39 * -1.8917136113613455261628359949099831283092498779296875p-135 == -1.3186638602099829409297626625630073249340057373046875p-95
; [HW: -1.3186638602099829409297626625630073249340057373046875p-95] 

; mpf : - 1435134442098123 -95
; mpfd: - 1435134442098123 -95 (-3.32878e-029) class: Neg. norm. non-zero
; hwf : - 1435134442098123 -95 (-3.32878e-029) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000100110 #b0110010011100110110110010000010100010111001001011101)))
(assert (= y (fp #b1 #b01101111000 #b1110010001000111010101111101111000110001111011011011)))
(assert (= r (fp #b1 #b01110100000 #b0101000110010011111101000110101000000100110111001011)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
