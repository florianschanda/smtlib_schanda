(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.59574407038021348625989048741757869720458984375p-628 {+ 2682992773372512 -628 (1.4326e-189)}
; Y = -1.4360065887336574963484281397541053593158721923828125p78 {- 1963599110551981 78 (-4.34006e+023)}
; 1.59574407038021348625989048741757869720458984375p-628 * -1.4360065887336574963484281397541053593158721923828125p78 == -1.1457494994993258075055564404465258121490478515625p-549
; [HW: -1.1457494994993258075055564404465258121490478515625p-549] 

; mpf : - 656397391634600 -549
; mpfd: - 656397391634600 -549 (-6.21759e-166) class: Neg. norm. non-zero
; hwf : - 656397391634600 -549 (-6.21759e-166) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110001011 #b1001100010000010101011101111001100010001101001100000)))
(assert (= y (fp #b1 #b10001001101 #b0110111110011110001000001011011101110011100110101101)))
(assert (= r (fp #b1 #b00111011010 #b0010010101001111110101101101010111000010000010101000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
