(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.467170613213358176807332711177878081798553466796875p-63 {+ 2103949399586126 -63 (1.59071e-019)}
; Y = 1.64893099986880198315475354320369660854339599609375p-205 {+ 2922525409198300 -205 (3.20666e-062)}
; 1.467170613213358176807332711177878081798553466796875p-63 * 1.64893099986880198315475354320369660854339599609375p-205 == 1.2096315531120129804776297532953321933746337890625p-267
; [HW: 1.2096315531120129804776297532953321933746337890625p-267] 

; mpf : + 944096584480360 -267
; mpfd: + 944096584480360 -267 (5.10087e-081) class: Pos. norm. non-zero
; hwf : + 944096584480360 -267 (5.10087e-081) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000000 #b0111011110011000011111100100100101100111010101001110)))
(assert (= y (fp #b0 #b01100110010 #b1010011000100000010101111000110111001100000011011100)))
(assert (= r (fp #b0 #b01011110100 #b0011010110101010011010011101100011010011011001101000)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
