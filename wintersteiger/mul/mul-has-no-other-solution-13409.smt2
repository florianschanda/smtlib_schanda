(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9749828382694871731217745036701671779155731201171875p-278 {- 4390932347123091 -278 (-4.06654e-084)}
; Y = 1.4750206160185268533524549638968892395496368408203125p-545 {+ 2139302669294341 -545 (1.28071e-164)}
; -1.9749828382694871731217745036701671779155731201171875p-278 * 1.4750206160185268533524549638968892395496368408203125p-545 == -1.4565702013651387058956743203452788293361663818359375p-822
; [HW: -1.4565702013651387058956743203452788293361663818359375p-822] 

; mpf : - 2056209388736511 -822
; mpfd: - 2056209388736511 -822 (-5.20805e-248) class: Neg. norm. non-zero
; hwf : - 2056209388736511 -822 (-5.20805e-248) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011101001 #b1111100110011000011110011010110010000111010110010011)))
(assert (= y (fp #b0 #b00111011110 #b0111100110011010111100110111101010111001101100000101)))
(assert (= r (fp #b1 #b00011001001 #b0111010011100001110010001110001100110000111111111111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
