(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3822751181335688475115830442518927156925201416015625p426 {- 1721614079579353 426 (-2.39537e+128)}
; Y = 1.9015168368455006575601373697281815111637115478515625p922 {+ 4060070890485625 922 (6.74149e+277)}
; -1.3822751181335688475115830442518927156925201416015625p426 * 1.9015168368455006575601373697281815111637115478515625p922 == -1.9999999999999997779553950749686919152736663818359375p1023
; [HW: -1.9999999999999997779553950749686919152736663818359375p1023] 

; mpf : - 4503599627370495 1023
; mpfd: - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero
; hwf : - 4503599627370495 1023 (-1.79769e+308) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110101001 #b0110000111011100110010000011101001110101010011011001)))
(assert (= y (fp #b0 #b11110011001 #b1110011011001001110011101011001100001011011101111001)))
(assert (= r (fp #b1 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
