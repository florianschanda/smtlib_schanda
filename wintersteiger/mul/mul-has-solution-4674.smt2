(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.86823558653288568365269384230487048625946044921875p-542 {- 3910185463979308 -542 (-1.2977e-163)}
; Y = 1.9588160986557545673036884181783534586429595947265625p465 {+ 4318123824622889 465 (1.86613e+140)}
; -1.86823558653288568365269384230487048625946044921875p-542 * 1.9588160986557545673036884181783534586429595947265625p465 == -1.8297649714910961815661494256346486508846282958984375p-76
; [HW: -1.8297649714910961815661494256346486508846282958984375p-76] 

; mpf : - 3736929216412391 -76
; mpfd: - 3736929216412391 -76 (-2.42167e-023) class: Neg. norm. non-zero
; hwf : - 3736929216412391 -76 (-2.42167e-023) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111100001 #b1101111001000100101011111111100101100001110100101100)))
(assert (= y (fp #b0 #b10111010000 #b1111010101110100111110001100101010011010110100101001)))
(assert (= r (fp #b1 #b01110110011 #b1101010001101011011110100010011111101011101011100111)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
