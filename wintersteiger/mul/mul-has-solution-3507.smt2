(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1307312740824275731910120157408528029918670654296875p-42 {+ 588761317243291 -42 (2.57099e-013)}
; Y = -1.4051584176905633771781367613584734499454498291015625p818 {- 1824671298937241 818 (-2.45619e+246)}
; 1.1307312740824275731910120157408528029918670654296875p-42 * -1.4051584176905633771781367613584734499454498291015625p818 == -1.58885656792289875482993011246435344219207763671875p776
; [HW: -1.58885656792289875482993011246435344219207763671875p776] 

; mpf : - 2651974219872236 776
; mpfd: - 2651974219872236 776 (-6.31483e+233) class: Neg. norm. non-zero
; hwf : - 2651974219872236 776 (-6.31483e+233) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010101 #b0010000101110111100110101101001010111111100110011011)))
(assert (= y (fp #b1 #b11100110001 #b0110011110111000011101100100100110101110000110011001)))
(assert (= r (fp #b1 #b11100000111 #b1001011010111111010011011101010101000011011111101100)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
