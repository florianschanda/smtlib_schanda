(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8349347685390011708506108334404416382312774658203125p1002 {- 3760211912470917 1002 (-7.86459e+301)}
; Y = 0.2973620599203901093687818502075970172882080078125p-1022 {+ 1339199662251592 -1023 (6.61653e-309)}
; -1.8349347685390011708506108334404416382312774658203125p1002 * 0.2973620599203901093687818502075970172882080078125p-1022 == -1.0912799651846032400470676293480210006237030029296875p-21
; [HW: -1.0912799651846032400470676293480210006237030029296875p-21] 

; mpf : - 411088417191771 -21
; mpfd: - 411088417191771 -21 (-5.20363e-007) class: Neg. norm. non-zero
; hwf : - 411088417191771 -21 (-5.20363e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101001 #b1101010110111110010010001111010100101011000110000101)))
(assert (= y (fp #b0 #b00000000000 #b0100110000011111111010111000001001101101111001001000)))
(assert (= r (fp #b1 #b01111101010 #b0001011101011110000111111011000100111111011101011011)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
