(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.47151699713104022748666466213762760162353515625p190 {- 2123523772578208 190 (-2.30922e+057)}
; Y = 1.2045612290420850687411302715190686285495758056640625p410 {+ 921261874888385 410 (3.18513e+123)}
; -1.47151699713104022748666466213762760162353515625p190 * 1.2045612290420850687411302715190686285495758056640625p410 == -1.7725323226204843241049502466921694576740264892578125p600
; [HW: -1.7725323226204843241049502466921694576740264892578125p600] 

; mpf : - 3479176280285277 600
; mpfd: - 3479176280285277 600 (-7.35515e+180) class: Neg. norm. non-zero
; hwf : - 3479176280285277 600 (-7.35515e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010111101 #b0111100010110101010101101000001000101111100110100000)))
(assert (= y (fp #b0 #b10110011001 #b0011010001011110000111111110110011000011111011000001)))
(assert (= r (fp #b1 #b11001010111 #b1100010111000100101011011010010011000010000001011101)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
