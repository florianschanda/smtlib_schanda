(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.21708334869342582607032454689033329486846923828125p368 {- 977656488284052 368 (-7.31743e+110)}
; Y = -1.3739046051909353796105506262392736971378326416015625p557 {- 1683916640610009 557 (-6.48133e+167)}
; -1.21708334869342582607032454689033329486846923828125p368 * -1.3739046051909353796105506262392736971378326416015625p557 == 1.6721564176711025684340938823879696428775787353515625p925
; [HW: 1.6721564176711025684340938823879696428775787353515625p925] 

; mpf : + 3027123392158265 925
; mpfd: + 3027123392158265 925 (4.74267e+278) class: Pos. norm. non-zero
; hwf : + 3027123392158265 925 (4.74267e+278) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101111 #b0011011110010010110001100011101100100100111110010100)))
(assert (= y (fp #b1 #b11000101100 #b0101111110111000001101100101001100011110011011011001)))
(assert (= r (fp #b0 #b11110011100 #b1010110000010010011100010110011110110001101000111001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
