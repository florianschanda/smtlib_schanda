(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.562046436990992770432740144315175712108612060546875p996 {+ 2531232124197550 996 (1.04609e+300)}
; Y = -1.126386580215598343102101352997124195098876953125p-394 {- 569194555563600 -394 (-2.7917e-119)}
; 1.562046436990992770432740144315175712108612060546875p996 * -1.126386580215598343102101352997124195098876953125p-394 == -1.7594681443002444520828930762945674359798431396484375p602
; [HW: -1.7594681443002444520828930762945674359798431396484375p602] 

; mpf : - 3420340451670343 602
; mpfd: - 3420340451670343 602 (-2.92038e+181) class: Neg. norm. non-zero
; hwf : - 3420340451670343 602 (-2.92038e+181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100011 #b1000111111100010010001100111100110110101101010101110)))
(assert (= y (fp #b1 #b01001110101 #b0010000001011010110111101111010010101101111001010000)))
(assert (= r (fp #b1 #b11001011001 #b1100001001101100100000010001101000011111100101000111)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
