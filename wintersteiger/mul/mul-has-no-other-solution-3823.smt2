(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2530988756235375003456056219874881207942962646484375p-663 {- 1139856001946055 -663 (-3.27415e-200)}
; Y = 1.7516677298119542882659516180865466594696044921875p882 {+ 3385210507887544 882 (5.64817e+265)}
; -1.2530988756235375003456056219874881207942962646484375p-663 * 1.7516677298119542882659516180865466594696044921875p882 == -1.09750643134669711997730701114051043987274169921875p220
; [HW: -1.09750643134669711997730701114051043987274169921875p220] 

; mpf : - 439129927879212 220
; mpfd: - 439129927879212 220 (-1.84929e+066) class: Neg. norm. non-zero
; hwf : - 439129927879212 220 (-1.84929e+066) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101000 #b0100000011001011000101101000000101110101000111000111)))
(assert (= y (fp #b0 #b11101110001 #b1100000001101101010010111101110100000000001110111000)))
(assert (= r (fp #b1 #b10011011011 #b0001100011110110001011100111010111001000101000101100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
