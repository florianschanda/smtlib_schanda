(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7913584874391086376732573626213707029819488525390625p538 {+ 3563961789147249 538 (1.61183e+162)}
; Y = -1.8813458694380582603145057873916812241077423095703125p-60 {- 3969228929185765 -60 (-1.63181e-018)}
; 1.7913584874391086376732573626213707029819488525390625p538 * -1.8813458694380582603145057873916812241077423095703125p-60 == -1.685082445513187199281901484937407076358795166015625p479
; [HW: -1.685082445513187199281901484937407076358795166015625p479] 

; mpf : - 3085337046331258 479
; mpfd: - 3085337046331258 479 (-2.6302e+144) class: Neg. norm. non-zero
; hwf : - 3085337046331258 479 (-2.6302e+144) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011001 #b1100101010010110011110000100011011110110100001110001)))
(assert (= y (fp #b1 #b01111000011 #b1110000110011111111000100000010110110011011111100101)))
(assert (= r (fp #b1 #b10111011110 #b1010111101100001100100000010101010001010111101111010)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
