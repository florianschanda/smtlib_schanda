(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5535628829373113735101696875062771141529083251953125p-95 {- 2493025593322613 -95 (-3.92174e-029)}
; Y = 1.0781096928828326486637934067402966320514678955078125p-477 {+ 351774783761149 -477 (2.76284e-144)}
; -1.5535628829373113735101696875062771141529083251953125p-95 * 1.0781096928828326486637934067402966320514678955078125p-477 == -1.674911202597712645001593045890331268310546875p-572
; [HW: -1.674911202597712645001593045890331268310546875p-572] 

; mpf : - 3039529840527232 -572
; mpfd: - 3039529840527232 -572 (-1.08351e-172) class: Neg. norm. non-zero
; hwf : - 3039529840527232 -572 (-1.08351e-172) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110100000 #b1000110110110110010011000000111001111110110001110101)))
(assert (= y (fp #b0 #b01000100010 #b0001001111111110111111110011000001101110101011111101)))
(assert (= r (fp #b1 #b00111000011 #b1010110011000110111110110000011011011100011110000000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
