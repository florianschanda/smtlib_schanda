(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.431333416420498938492755769402720034122467041015625p746 {- 1942553013463802 746 (-5.29807e+224)}
; Y = 1.9367788356187947140796268286067061126232147216796875p-777 {+ 4218876815021371 -777 (2.43654e-234)}
; -1.431333416420498938492755769402720034122467041015625p746 * 1.9367788356187947140796268286067061126232147216796875p-777 == -1.3860881338185826461284477773006074130535125732421875p-30
; [HW: -1.3860881338185826461284477773006074130535125732421875p-30] 

; mpf : - 1738786375597539 -30
; mpfd: - 1738786375597539 -30 (-1.2909e-009) class: Neg. norm. non-zero
; hwf : - 1738786375597539 -30 (-1.2909e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011101001 #b0110111001101011110111011110010100110010101011111010)))
(assert (= y (fp #b0 #b00011110110 #b1110111111010000101111001101111010010001010100111011)))
(assert (= r (fp #b1 #b01111100001 #b0110001011010110101011000000010000011111110111100011)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
