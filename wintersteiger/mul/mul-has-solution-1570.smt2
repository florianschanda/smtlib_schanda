(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6511359315347753362601679327781312167644500732421875p787 {- 2932455538627555 787 (-1.34397e+237)}
; Y = -1.2653703477159299328747010804363526403903961181640625p-578 {- 1195121799088641 -578 (-1.27903e-174)}
; -1.6511359315347753362601679327781312167644500732421875p787 * -1.2653703477159299328747010804363526403903961181640625p-578 == 1.0446492239062121765158508424065075814723968505859375p210
; [HW: 1.0446492239062121765158508424065075814723968505859375p210] 

; mpf : + 201082228146399 210
; mpfd: + 201082228146399 210 (1.71898e+063) class: Pos. norm. non-zero
; hwf : + 201082228146399 210 (1.71898e+063) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100010010 #b1010011010110000110110000010101100110001001111100011)))
(assert (= y (fp #b1 #b00110111101 #b0100001111101111010011111010010011000100101000000001)))
(assert (= r (fp #b0 #b10011010001 #b0000101101101110001000011010110001111000000011011111)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
