(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9268472312516335964716063244850374758243560791015625p123 {+ 4174148845294233 123 (2.04898e+037)}
; Y = -1.1501860503106240418702554961782880127429962158203125p-854 {- 676377840215173 -854 (-9.57529e-258)}
; 1.9268472312516335964716063244850374758243560791015625p123 * -1.1501860503106240418702554961782880127429962158203125p-854 == -1.1081164032326389357052676132298074662685394287109375p-730
; [HW: -1.1081164032326389357052676132298074662685394287109375p-730] 

; mpf : - 486912993311151 -730
; mpfd: - 486912993311151 -730 (-1.96195e-220) class: Neg. norm. non-zero
; hwf : - 486912993311151 -730 (-1.96195e-220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111010 #b1110110101000101110111000011001010011101001010011001)))
(assert (= y (fp #b1 #b00010101001 #b0010011001110010100101111100111001100110010010000101)))
(assert (= r (fp #b1 #b00100100101 #b0001101110101101100001000100000000001011100110101111)))
(assert (= (fp.mul roundTowardZero x y) r))
(check-sat)
(exit)
