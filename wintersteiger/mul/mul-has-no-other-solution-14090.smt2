(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.17563782721493037541904413956217467784881591796875p-85 {+ 791002453197324 -85 (3.03895e-026)}
; Y = -1.4991753107772558539778628983185626566410064697265625p-126 {- 2248085743609001 -126 (-1.76227e-038)}
; 1.17563782721493037541904413956217467784881591796875p-85 * -1.4991753107772558539778628983185626566410064697265625p-126 == -1.762487204976440846593277456122450530529022216796875p-211
; [HW: -1.762487204976440846593277456122450530529022216796875p-211] 

; mpf : - 3433937092206670 -211
; mpfd: - 3433937092206670 -211 (-5.35546e-064) class: Neg. norm. non-zero
; hwf : - 3433937092206670 -211 (-5.35546e-064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101010 #b0010110011110110100110011100001111010100001000001100)))
(assert (= y (fp #b1 #b01110000001 #b0111111111001001111101000000001011000010010010101001)))
(assert (= r (fp #b1 #b01100101100 #b1100001100110010010111001000100011111110000001001110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
