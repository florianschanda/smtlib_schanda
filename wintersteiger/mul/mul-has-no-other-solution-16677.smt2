(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.530604325443328139755294614587910473346710205078125p-814 {- 2389629442347746 -814 (-1.40103e-245)}
; Y = -1.8210507918041514141549441774259321391582489013671875p792 {- 3697684040021427 792 (-4.74328e+238)}
; -1.530604325443328139755294614587910473346710205078125p-814 * -1.8210507918041514141549441774259321391582489013671875p792 == 1.3936541093937158120041885922546498477458953857421875p-21
; [HW: 1.3936541093937158120041885922546498477458953857421875p-21] 

; mpf : + 1772860500378403 -21
; mpfd: + 1772860500378403 -21 (6.64546e-007) class: Pos. norm. non-zero
; hwf : + 1772860500378403 -21 (6.64546e-007) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010001 #b1000011111010101101011110110000011100101001011100010)))
(assert (= y (fp #b1 #b11100010111 #b1101001000110000011000100111101100100111010110110011)))
(assert (= r (fp #b0 #b01111101010 #b0110010011000110100001000000010111001000001100100011)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
