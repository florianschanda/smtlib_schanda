(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0014593790649335414144616152043454349040985107421875p458 {+ 6572459013027 458 (7.45369e+137)}
; Y = -1.50917111997728969896570561104454100131988525390625p386 {- 2293102866197540 386 (-2.37857e+116)}
; 1.0014593790649335414144616152043454349040985107421875p458 * -1.50917111997728969896570561104454100131988525390625p386 == -1.5113735727151869081552604257012717425823211669921875p844
; [HW: -1.5113735727151869081552604257012717425823211669921875p844] 

; mpf : - 2303021831527235 844
; mpfd: - 2303021831527235 844 (-1.77292e+254) class: Neg. norm. non-zero
; hwf : - 2303021831527235 844 (-1.77292e+254) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111001001 #b0000000001011111101001000101000101011011001110100011)))
(assert (= y (fp #b1 #b10110000001 #b1000001001011001000010011101110001011110110000100100)))
(assert (= r (fp #b1 #b11101001011 #b1000001011101001011000001110001011011001101101000011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
