(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8902572063266600554953811297309584915637969970703125p-532 {+ 4009362022676645 -532 (1.34451e-160)}
; Y = -1.1959464118884233219120005742297507822513580322265625p-175 {- 882464187565289 -175 (-2.49725e-053)}
; 1.8902572063266600554953811297309584915637969970703125p-532 * -1.1959464118884233219120005742297507822513580322265625p-175 == -1.130323161726301872676003767992369830608367919921875p-706
; [HW: -1.130323161726301872676003767992369830608367919921875p-706] 

; mpf : - 586923342588318 -706
; mpfd: - 586923342588318 -706 (-3.35757e-213) class: Neg. norm. non-zero
; hwf : - 586923342588318 -706 (-3.35757e-213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101011 #b1110001111100111111001010111001000110011100010100101)))
(assert (= y (fp #b1 #b01101010000 #b0011001000101001100010110100011011010100010011101001)))
(assert (= r (fp #b1 #b00100111101 #b0010000101011100110110111101010110000110100110011110)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
