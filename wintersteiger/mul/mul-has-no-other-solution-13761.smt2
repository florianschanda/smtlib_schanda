(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.005300006951953317724246517173014581203460693359375p-305 {- 23869109333878 -305 (-1.54222e-092)}
; Y = 1.852428046887584667246073877322487533092498779296875p-353 {+ 3838994634323086 -353 (1.00961e-106)}
; -1.005300006951953317724246517173014581203460693359375p-305 * 1.852428046887584667246073877322487533092498779296875p-353 == -1.8622459284140819857356063948827795684337615966796875p-658
; [HW: -1.8622459284140819857356063948827795684337615966796875p-658] 

; mpf : - 3883210441907387 -658
; mpfd: - 3883210441907387 -658 (-1.55704e-198) class: Neg. norm. non-zero
; hwf : - 3883210441907387 -658 (-1.55704e-198) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001110 #b0000000101011011010101110101110010000110111101110110)))
(assert (= y (fp #b0 #b01010011110 #b1101101000111000101110010111011110010011010010001110)))
(assert (= r (fp #b1 #b00101101101 #b1101110010111100001001100010111110100101110010111011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
