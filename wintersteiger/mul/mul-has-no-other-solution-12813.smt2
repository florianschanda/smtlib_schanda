(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.880304918086858290138252414180897176265716552734375p-879 {- 3964540901068390 -879 (-4.66511e-265)}
; Y = 1.863655209507213417197135640890337526798248291015625p-98 {+ 3889557279713274 -98 (5.88066e-030)}
; -1.880304918086858290138252414180897176265716552734375p-879 * 1.863655209507213417197135640890337526798248291015625p-98 == -1.7521200280273039329159701082971878349781036376953125p-976
; [HW: -1.7521200280273039329159701082971878349781036376953125p-976] 

; mpf : - 3387247477961653 -976
; mpfd: - 3387247477961653 -976 (-2.74339e-294) class: Neg. norm. non-zero
; hwf : - 3387247477961653 -976 (-2.74339e-294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010010000 #b1110000101011011101010011100000110110000111001100110)))
(assert (= y (fp #b0 #b01110011101 #b1101110100011000100000011111111111011010011111111010)))
(assert (= r (fp #b1 #b00000101111 #b1100000010001010111100000010101100001011001110110101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
