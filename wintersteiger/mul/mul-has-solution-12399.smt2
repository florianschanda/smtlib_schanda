(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.756499121381498440541690797545015811920166015625p-54 {+ 3406969161159824 -54 (9.75053e-017)}
; Y = 1.9008115853942666451104059888166375458240509033203125p-475 {+ 4056894720312645 -475 (1.94846e-143)}
; 1.756499121381498440541690797545015811920166015625p-54 * 1.9008115853942666451104059888166375458240509033203125p-475 == 1.6693869398284013616517995615140534937381744384765625p-528
; [HW: 1.6693869398284013616517995615140534937381744384765625p-528] 

; mpf : + 3014650772777865 -528
; mpfd: + 3014650772777865 -528 (1.89985e-159) class: Pos. norm. non-zero
; hwf : + 3014650772777865 -528 (1.89985e-159) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001001 #b1100000110101001111011010010100111001001010010010000)))
(assert (= y (fp #b0 #b01000100100 #b1110011010011011100101101000101100100000010101000101)))
(assert (= r (fp #b0 #b00111101111 #b1010101101011100111100010100011011101110101110001001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
