(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3416253365016286291933056418201886117458343505859375p-128 {- 1538543738169055 -128 (-3.94268e-039)}
; Y = 1.7063720869201286500782543953391723334789276123046875p-353 {+ 3181217067438411 -353 (9.30005e-107)}
; -1.3416253365016286291933056418201886117458343505859375p-128 * 1.7063720869201286500782543953391723334789276123046875p-353 == -1.1446560126556020176025185719481669366359710693359375p-480
; [HW: -1.1446560126556020176025185719481669366359710693359375p-480] 

; mpf : - 651472764692671 -480
; mpfd: - 651472764692671 -480 (-3.66671e-145) class: Neg. norm. non-zero
; hwf : - 651472764692671 -480 (-3.66671e-145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101111111 #b0101011101110100110000100000111111000010011011011111)))
(assert (= y (fp #b0 #b01010011110 #b1011010011010100110011010001010000100001000101001011)))
(assert (= r (fp #b1 #b01000011111 #b0010010100001000001011010010101110000110100010111111)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
