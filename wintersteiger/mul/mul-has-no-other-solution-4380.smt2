(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.324852856062896488964497621054761111736297607421875p-936 {+ 1463007201515102 -936 (2.28082e-282)}
; Y = -1.068868711262428661257217754609882831573486328125p283 {- 310157102378960 283 (-1.66117e+085)}
; 1.324852856062896488964497621054761111736297607421875p-936 * -1.068868711262428661257217754609882831573486328125p283 == -1.41609376487229621233154830406419932842254638671875p-653
; [HW: -1.41609376487229621233154830406419932842254638671875p-653] 

; mpf : - 1873919724430060 -653
; mpfd: - 1873919724430060 -653 (-3.78883e-197) class: Neg. norm. non-zero
; hwf : - 1873919724430060 -653 (-3.78883e-197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001010111 #b0101001100101001100011101000100011001101011001011110)))
(assert (= y (fp #b1 #b10100011010 #b0001000110100001011000010011111010010110111111010000)))
(assert (= r (fp #b1 #b00101110010 #b0110101010000101000111101111100000110010001011101100)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
