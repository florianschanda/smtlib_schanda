(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.688270605657235190477649666718207299709320068359375p981 {+ 3099695243167990 981 (3.45039e+295)}
; Y = -1.2963701262245150847007835182012058794498443603515625p-116 {- 1334732390028473 -116 (-1.56045e-035)}
; 1.688270605657235190477649666718207299709320068359375p981 * -1.2963701262245150847007835182012058794498443603515625p-116 == -1.09431178907850412684865659684874117374420166015625p866
; [HW: -1.09431178907850412684865659684874117374420166015625p866] 

; mpf : - 424742538150596 866
; mpfd: - 424742538150596 866 (-5.38415e+260) class: Neg. norm. non-zero
; hwf : - 424742538150596 866 (-5.38415e+260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111010100 #b1011000000110010100000001001111000011000100011110110)))
(assert (= y (fp #b1 #b01110001011 #b0100101111011110111010011001111110100101010010111001)))
(assert (= r (fp #b1 #b11101100001 #b0001100000100100110100010100000110111000001011000100)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
