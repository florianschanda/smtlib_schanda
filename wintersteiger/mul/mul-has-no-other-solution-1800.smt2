(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0743572446091269600998430178151465952396392822265625p182 {+ 334875259113961 182 (6.58579e+054)}
; Y = -1.361569704558566851204659542418085038661956787109375p214 {- 1628365186718422 214 (-3.58475e+064)}
; 1.0743572446091269600998430178151465952396392822265625p182 * -1.361569704558566851204659542418085038661956787109375p214 == -1.4628122761328048451190397827303968369960784912109375p396
; [HW: -1.4628122761328048451190397827303968369960784912109375p396] 

; mpf : - 2084321194334191 396
; mpfd: - 2084321194334191 396 (-2.36084e+119) class: Neg. norm. non-zero
; hwf : - 2084321194334191 396 (-2.36084e+119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010110101 #b0001001100001001000100111000110111010001000111101001)))
(assert (= y (fp #b1 #b10011010101 #b0101110010001111110101010000100001001101101011010110)))
(assert (= r (fp #b1 #b10110001011 #b0111011001111010110111011000011000101101011111101111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
