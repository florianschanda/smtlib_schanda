(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6919210591488627049017168246791698038578033447265625p-730 {- 3116135424152617 -730 (-2.9956e-220)}
; Y = -1.0977210724093993121641688048839569091796875p293 {- 440096585289216 293 (-1.74695e+088)}
; -1.6919210591488627049017168246791698038578033447265625p-730 * -1.0977210724093993121641688048839569091796875p293 == 1.8572573994809362663005458671250380575656890869140625p-437
; [HW: 1.8572573994809362663005458671250380575656890869140625p-437] 

; mpf : + 3860744104862945 -437
; mpfd: + 3860744104862945 -437 (5.23316e-132) class: Pos. norm. non-zero
; hwf : + 3860744104862945 -437 (5.23316e-132) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100101 #b1011000100100001101111010001000001110101010000101001)))
(assert (= y (fp #b1 #b10100100100 #b0001100100000100001111111000101000100000111000000000)))
(assert (= r (fp #b0 #b01001001010 #b1101101101110101001110001000111100000110010011100001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
