(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6081979777803050435380782801075838506221771240234375p-717 {- 2739080186098871 -717 (-2.33256e-216)}
; Y = -1.6261615122032664348949992927373386919498443603515625p-290 {- 2819980753032377 -290 (-8.17457e-088)}
; -1.6081979777803050435380782801075838506221771240234375p-717 * -1.6261615122032664348949992927373386919498443603515625p-290 == 1.30759482773472779371104479650966823101043701171875p-1006
; [HW: 1.30759482773472779371104479650966823101043701171875p-1006] 

; mpf : + 1385283951567212 -1006
; mpfd: + 1385283951567212 -1006 (1.90677e-303) class: Pos. norm. non-zero
; hwf : + 1385283951567212 -1006 (1.90677e-303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110010 #b1001101110110010110111001101100000001111010010110111)))
(assert (= y (fp #b1 #b01011011101 #b1010000001001100000111101111000011101101010010111001)))
(assert (= r (fp #b0 #b00000010001 #b0100111010111110100010001101110110001010000101101100)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
