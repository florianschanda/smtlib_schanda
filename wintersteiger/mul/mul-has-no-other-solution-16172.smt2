(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7170983590349082614778808419941924512386322021484375p-831 {- 3229523902537607 -831 (-1.19914e-250)}
; Y = 1.128362519989555945443271411932073533535003662109375p371 {+ 578093397193302 371 (5.42722e+111)}
; -1.7170983590349082614778808419941924512386322021484375p-831 * 1.128362519989555945443271411932073533535003662109375p371 == -1.9375094314705603171233860848587937653064727783203125p-460
; [HW: -1.9375094314705603171233860848587937653064727783203125p-460] 

; mpf : - 4222167126227141 -460
; mpfd: - 4222167126227141 -460 (-6.50797e-139) class: Neg. norm. non-zero
; hwf : - 4222167126227141 -460 (-6.50797e-139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000000 #b1011011110010011110000100001000000010001111110000111)))
(assert (= y (fp #b0 #b10101110010 #b0010000011011100010111011011100101100011001001010110)))
(assert (= r (fp #b1 #b01000110011 #b1111000000000000100111100011101111011011100011000101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
