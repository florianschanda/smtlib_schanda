(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.28496984475075226583840048988349735736846923828125p-71 {+ 1283390086631316 -71 (5.44206e-022)}
; Y = -1.7486957712958799415758903705864213407039642333984375p-240 {- 3371825996621991 -240 (-9.89727e-073)}
; 1.28496984475075226583840048988349735736846923828125p-71 * -1.7486957712958799415758903705864213407039642333984375p-240 == -1.1235106668791818851360631015268154442310333251953125p-310
; [HW: -1.1235106668791818851360631015268154442310333251953125p-310] 

; mpf : - 556242593333365 -310
; mpfd: - 556242593333365 -310 (-5.38615e-094) class: Neg. norm. non-zero
; hwf : - 556242593333365 -310 (-5.38615e-094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111000 #b0100100011110011110010001010001110001100111110010100)))
(assert (= y (fp #b1 #b01100001111 #b1011111110101010100001101010110001011110100010100111)))
(assert (= r (fp #b1 #b01011001001 #b0001111110011110011001010010001011110100000001110101)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
