(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5215935923872814239388162604882381856441497802734375p-520 {- 2349048708314199 -520 (-4.43303e-157)}
; Y = 1.7757968008879727594973019222379662096500396728515625p-316 {+ 3493878183394297 -316 (1.33019e-095)}
; -1.5215935923872814239388162604882381856441497802734375p-520 * 1.7757968008879727594973019222379662096500396728515625p-316 == -1.3510205168064863823218502147938124835491180419921875p-835
; [HW: -1.3510205168064863823218502147938124835491180419921875p-835] 

; mpf : - 1580855868689091 -835
; mpfd: - 1580855868689091 -835 (-5.89679e-252) class: Neg. norm. non-zero
; hwf : - 1580855868689091 -835 (-5.89679e-252) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110111 #b1000010110000111001010000101110100011011010001010111)))
(assert (= y (fp #b0 #b01011000011 #b1100011010011010100111101000000000100111101111111001)))
(assert (= r (fp #b1 #b00010111100 #b0101100111011100011110110000011111101000101011000011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
