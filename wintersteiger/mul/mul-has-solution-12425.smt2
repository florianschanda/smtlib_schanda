(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.273740162634255046469888839055784046649932861328125p524 {- 1232816094435970 524 (-6.99517e+157)}
; Y = 1.5253487273566481707831599123892374336719512939453125p-888 {+ 2365960332762965 -888 (7.39151e-268)}
; -1.273740162634255046469888839055784046649932861328125p524 * 1.5253487273566481707831599123892374336719512939453125p-888 == -1.942897936057211172311554037150926887989044189453125p-364
; [HW: -1.942897936057211172311554037150926887989044189453125p-364] 

; mpf : - 4246434793475666 -364
; mpfd: - 4246434793475666 -364 (-5.17049e-110) class: Neg. norm. non-zero
; hwf : - 4246434793475666 -364 (-5.17049e-110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001011 #b0100011000010011110101011101011000011101101010000010)))
(assert (= y (fp #b0 #b00010000111 #b1000011001111101010000010001001011111101111101010101)))
(assert (= r (fp #b1 #b01010010011 #b1111000101100001110000100101011011010100111001010010)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
