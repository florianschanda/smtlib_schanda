(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.176452657845590277219116615015082061290740966796875p193 {- 794672124121934 193 (-1.47694e+058)}
; Y = 1.5473901488938406334483488535624928772449493408203125p-406 {+ 2465226070584581 -406 (9.36314e-123)}
; -1.176452657845590277219116615015082061290740966796875p193 * 1.5473901488938406334483488535624928772449493408203125p-406 == -1.8204312533902424764420402425457723438739776611328125p-213
; [HW: -1.8204312533902424764420402425457723438739776611328125p-213] 

; mpf : - 3694893887051405 -213
; mpfd: - 3694893887051405 -213 (-1.38288e-064) class: Neg. norm. non-zero
; hwf : - 3694893887051405 -213 (-1.38288e-064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000000 #b0010110100101100000000000101101010111101001101001110)))
(assert (= y (fp #b0 #b01001101001 #b1000110000100001110000101100001110100110110100000101)))
(assert (= r (fp #b1 #b01100101010 #b1101001000000111110010000101100111101101011010001101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
