(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.106957749025296866562939612776972353458404541015625p505 {+ 481694878654714 505 (1.15952e+152)}
; Y = -1.5650426013856433282711577703594230115413665771484375p-399 {- 2544725649048839 -399 (-1.21215e-120)}
; 1.106957749025296866562939612776972353458404541015625p505 * -1.5650426013856433282711577703594230115413665771484375p-399 == -1.732436035158546605572382759419269859790802001953125p106
; [HW: -1.732436035158546605572382759419269859790802001953125p106] 

; mpf : - 3298598655012754 106
; mpfd: - 3298598655012754 106 (-1.40552e+032) class: Neg. norm. non-zero
; hwf : - 3298598655012754 106 (-1.40552e+032) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111111000 #b0001101101100001100101010100001000011110000011111010)))
(assert (= y (fp #b1 #b01001110000 #b1001000010100110101000011100010111001100010100000111)))
(assert (= r (fp #b1 #b10001101001 #b1011101110000000111011011001000101101010111110010010)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
