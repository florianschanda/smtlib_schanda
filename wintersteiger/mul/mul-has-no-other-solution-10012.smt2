(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6959203453261129102003224033978767693042755126953125p574 {- 3134146607890229 574 (-1.04863e+173)}
; Y = 1.634616625861256000717958158929832279682159423828125p-206 {+ 2858059199751874 -206 (1.58941e-062)}
; -1.6959203453261129102003224033978767693042755126953125p574 * 1.634616625861256000717958158929832279682159423828125p-206 == -1.386089796303213272921084353583864867687225341796875p369
; [HW: -1.386089796303213272921084353583864867687225341796875p369] 

; mpf : - 1738793862762702 369
; mpfd: - 1738793862762702 369 (-1.66671e+111) class: Neg. norm. non-zero
; hwf : - 1738793862762702 369 (-1.66671e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111101 #b1011001000100111110101011111001111001011111100110101)))
(assert (= y (fp #b0 #b01100110001 #b1010001001110110001111000011010110010010011011000010)))
(assert (= r (fp #b1 #b10101110000 #b0110001011010110110001111110100001110001000011001110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
