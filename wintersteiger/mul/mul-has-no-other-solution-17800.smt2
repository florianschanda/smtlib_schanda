(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.643954796029558185210817100596614181995391845703125p-313 {+ 2900114579442162 -313 (9.85147e-095)}
; Y = -1.1465502293234079989048268544138409197330474853515625p-500 {- 660003558171961 -500 (-3.50264e-151)}
; 1.643954796029558185210817100596614181995391845703125p-313 * -1.1465502293234079989048268544138409197330474853515625p-500 == -1.8848767483850064063943818837287835776805877685546875p-813
; [HW: -1.8848767483850064063943818837287835776805877685546875p-813] 

; mpf : - 3985130594295531 -813
; mpfd: - 3985130594295531 -813 (-3.45061e-245) class: Neg. norm. non-zero
; hwf : - 3985130594295531 -813 (-3.45061e-245) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000110 #b1010010011011010001110001011010100001100100111110010)))
(assert (= y (fp #b1 #b01000001011 #b0010010110000100010100001101101000101010010100111001)))
(assert (= r (fp #b1 #b00011010010 #b1110001010000111010010000101011101001101111011101011)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
