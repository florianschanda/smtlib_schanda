(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4690532539676672829642711803899146616458892822265625p-701 {+ 2112428059785705 -701 (1.3964e-211)}
; Y = -1.48298596569631246921971978736110031604766845703125p-196 {- 2175175415135092 -196 (-1.47658e-059)}
; 1.4690532539676672829642711803899146616458892822265625p-701 * -1.48298596569631246921971978736110031604766845703125p-196 == -1.089292679247275685838758363388478755950927734375p-896
; [HW: -1.089292679247275685838758363388478755950927734375p-896] 

; mpf : - 402138476984944 -896
; mpfd: - 402138476984944 -896 (-2.0619e-270) class: Neg. norm. non-zero
; hwf : - 402138476984944 -896 (-2.0619e-270) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000010 #b0111100000010011110111111100000111011111100111101001)))
(assert (= y (fp #b1 #b01100111011 #b0111101110100100111101111101111100010111101101110100)))
(assert (= r (fp #b1 #b00001111111 #b0001011011011011111000101001000100100011101001110000)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
