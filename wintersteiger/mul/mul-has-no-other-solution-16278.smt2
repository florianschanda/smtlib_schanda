(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.11265900382354487874181359075009822845458984375p999 {+ 507371047639648 999 (5.96112e+300)}
; Y = -1.559432847659433463149980525486171245574951171875p-648 {- 2519461564257840 -648 (-1.33515e-195)}
; 1.11265900382354487874181359075009822845458984375p999 * -1.559432847659433463149980525486171245574951171875p-648 == -1.735116998806458976645217262557707726955413818359375p351
; [HW: -1.735116998806458976645217262557707726955413818359375p351] 

; mpf : - 3310672641898486 351
; mpfd: - 3310672641898486 351 (-7.95898e+105) class: Neg. norm. non-zero
; hwf : - 3310672641898486 351 (-7.95898e+105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100110 #b0001110011010111001110000111000100000101101001100000)))
(assert (= y (fp #b1 #b00101110111 #b1000111100110110111111011011100100000001011000110000)))
(assert (= r (fp #b1 #b10101011110 #b1011110000110000101000001010110010011011011111110110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
