(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2344853351101423566404946541297249495983123779296875p307 {- 1056028067825883 307 (-3.2188e+092)}
; Y = 1.585290730503909895077185865375213325023651123046875p-929 {+ 2635915115800814 -929 (3.49336e-280)}
; -1.2344853351101423566404946541297249495983123779296875p307 * 1.585290730503909895077185865375213325023651123046875p-929 == -1.9570181586931216788372012160834856331348419189453125p-622
; [HW: -1.9570181586931216788372012160834856331348419189453125p-622] 

; mpf : - 4310026622877141 -622
; mpfd: - 4310026622877141 -622 (-1.12444e-187) class: Neg. norm. non-zero
; hwf : - 4310026622877141 -622 (-1.12444e-187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110010 #b0011110000000111001110110001110110110000100011011011)))
(assert (= y (fp #b0 #b00001011110 #b1001010111010101100111010000001000101010100011101110)))
(assert (= r (fp #b1 #b00110010001 #b1111010011111111001001000101110101000011110111010101)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
