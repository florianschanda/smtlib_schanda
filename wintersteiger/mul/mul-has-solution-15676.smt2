(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8372654742767853264240329735912382602691650390625p189 {+ 3770708477963112 189 (1.44159e+057)}
; Y = 1.2888638393253135649985097188618965446949005126953125p693 {+ 1300927079146293 693 (5.29656e+208)}
; 1.8372654742767853264240329735912382602691650390625p189 * 1.2888638393253135649985097188618965446949005126953125p693 == 1.1839925165181102162392789978184737265110015869140625p883
; [HW: 1.1839925165181102162392789978184737265110015869140625p883] 

; mpf : + 828628628829921 883
; mpfd: + 828628628829921 883 (7.63546e+265) class: Pos. norm. non-zero
; hwf : + 828628628829921 883 (7.63546e+265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111100 #b1101011001010111000001111011011000010110101101101000)))
(assert (= y (fp #b0 #b11010110100 #b0100100111110010111110110000011011100110001100110101)))
(assert (= r (fp #b0 #b11101110010 #b0010111100011010001000100011000100100111011011100001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
