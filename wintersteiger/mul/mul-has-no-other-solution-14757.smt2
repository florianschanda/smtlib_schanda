(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3397666665166727550939640423166565597057342529296875p220 {+ 1530173032717403 220 (2.2575e+066)}
; Y = -1.562812316350394414854463320807553827762603759765625p465 {- 2534681338195162 465 (-1.48886e+140)}
; 1.3397666665166727550939640423166565597057342529296875p220 * -1.562812316350394414854463320807553827762603759765625p465 == -1.0469019237339838301892314120777882635593414306640625p686
; [HW: -1.0469019237339838301892314120777882635593414306640625p686] 

; mpf : - 211227486251329 686
; mpfd: - 211227486251329 686 (-3.36111e+206) class: Neg. norm. non-zero
; hwf : - 211227486251329 686 (-3.36111e+206) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011011011 #b0101011011111010111100101100000011110101110001011011)))
(assert (= y (fp #b1 #b10111010000 #b1001000000010100011101111100110010000010110011011010)))
(assert (= r (fp #b1 #b11010101101 #b0000110000000001110000111011010010001110100101000001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
