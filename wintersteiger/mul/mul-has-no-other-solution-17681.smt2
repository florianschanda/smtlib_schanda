(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1075244670913486633168076878064312040805816650390625p-456 {- 484247149925809 -456 (-5.95217e-138)}
; Y = 1.251883339189620247822176679619587957859039306640625p-161 {+ 1134381712515210 -161 (4.28287e-049)}
; -1.1075244670913486633168076878064312040805816650390625p-456 * 1.251883339189620247822176679619587957859039306640625p-161 == -1.3864914280965223714048306646873243153095245361328125p-617
; [HW: -1.3864914280965223714048306646873243153095245361328125p-617] 

; mpf : - 1740602651557389 -617
; mpfd: - 1740602651557389 -617 (-2.54923e-186) class: Neg. norm. non-zero
; hwf : - 1740602651557389 -617 (-2.54923e-186) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110111 #b0001101110000110101110010011010110101101010110110001)))
(assert (= y (fp #b0 #b01101011110 #b0100000001111011011011010011000000111010000010001010)))
(assert (= r (fp #b1 #b00110010110 #b0110001011110001000110100010101111011011111000001101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
