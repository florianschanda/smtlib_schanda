(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4850934248005198679010163687053136527538299560546875p-714 {- 2184666567171499 -714 (-1.7232e-215)}
; Y = 1.0763694316718044330372094918857328593730926513671875p-13 {+ 343937344019635 -13 (0.000131393)}
; -1.4850934248005198679010163687053136527538299560546875p-714 * 1.0763694316718044330372094918857328593730926513671875p-13 == -1.5985091656320691289039359617163427174091339111328125p-727
; [HW: -1.5985091656320691289039359617163427174091339111328125p-727] 

; mpf : - 2695445655318413 -727
; mpfd: - 2695445655318413 -727 (-2.26417e-219) class: Neg. norm. non-zero
; hwf : - 2695445655318413 -727 (-2.26417e-219) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110101 #b0111110000101111000101010010101100000101110110101011)))
(assert (= y (fp #b0 #b01111110010 #b0001001110001100111100100111001101110001110010110011)))
(assert (= r (fp #b1 #b00100101000 #b1001100100110111111001011000110010111110111110001101)))
(assert (= (fp.mul roundTowardZero x y) r))
(check-sat)
(exit)
