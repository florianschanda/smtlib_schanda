(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5876418318420475461749674650491215288639068603515625p876 {- 2646503534911161 876 (-7.99887e+263)}
; Y = 1.498303088121228032747467295848764479160308837890625p-587 {+ 2244157601980330 -587 (2.95796e-177)}
; -1.5876418318420475461749674650491215288639068603515625p876 * 1.498303088121228032747467295848764479160308837890625p-587 == -1.189384329739691548155633427086286246776580810546875p290
; [HW: -1.189384329739691548155633427086286246776580810546875p290] 

; mpf : - 852911196845486 290
; mpfd: - 852911196845486 290 (-2.36603e+087) class: Neg. norm. non-zero
; hwf : - 852911196845486 290 (-2.36603e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101011 #b1001011001101111101100011111000110000101111010111001)))
(assert (= y (fp #b0 #b00110110100 #b0111111110010000110010101000101011111001111110101010)))
(assert (= r (fp #b1 #b10100100001 #b0011000001111011011111011100111010011011010110101110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
