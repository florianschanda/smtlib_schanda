(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5776469265296271249354731480707414448261260986328125p84 {- 2601490483070541 84 (-3.05161e+025)}
; Y = 1.389499019950151126323589778621681034564971923828125p-238 {+ 1754147641108674 -238 (3.14571e-072)}
; -1.5776469265296271249354731480707414448261260986328125p84 * 1.389499019950151126323589778621681034564971923828125p-238 == -1.0960694291201422689852051917114295065402984619140625p-153
; [HW: -1.0960694291201422689852051917114295065402984619140625p-153] 

; mpf : - 432658245187169 -153
; mpfd: - 432658245187169 -153 (-9.5995e-047) class: Neg. norm. non-zero
; hwf : - 432658245187169 -153 (-9.5995e-047) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010011 #b1001001111100000101010110100001000010100011001001101)))
(assert (= y (fp #b0 #b01100010001 #b0110001110110110001101010011000010000010100011000010)))
(assert (= r (fp #b1 #b01101100110 #b0001100010011000000000011001000000110111011001100001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
