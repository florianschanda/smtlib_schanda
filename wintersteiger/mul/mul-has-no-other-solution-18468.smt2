(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1581095409610548951917508020414970815181732177734375p-585 {- 712062069755927 -585 (-9.14539e-177)}
; Y = 1.306919392832855297825744855799712240695953369140625p-390 {+ 1382242063194826 -390 (5.18263e-118)}
; -1.1581095409610548951917508020414970815181732177734375p-585 * 1.306919392832855297825744855799712240695953369140625p-390 == -1.51355581810675854370629167533479630947113037109375p-975
; [HW: -1.51355581810675854370629167533479630947113037109375p-975] 

; mpf : - 2312849791059548 -975
; mpfd: - 2312849791059548 -975 (-4.73972e-294) class: Neg. norm. non-zero
; hwf : - 2312849791059548 -975 (-4.73972e-294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110110 #b0010100001111001110111011110101110011101000000010111)))
(assert (= y (fp #b0 #b01001111001 #b0100111010010010010001001111001010111001101011001010)))
(assert (= r (fp #b1 #b00000110000 #b1000001101111000011001001110001101110000011001011100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
