(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1524136039580186174902109996764920651912689208984375p-411 {+ 686409849991527 -411 (2.17912e-124)}
; Y = -1.336174043000283528925820064614526927471160888671875p-32 {- 1513993294787710 -32 (-3.11102e-010)}
; 1.1524136039580186174902109996764920651912689208984375p-411 * -1.336174043000283528925820064614526927471160888671875p-32 == -1.539825144409113111265696716145612299442291259765625p-443
; [HW: -1.539825144409113111265696716145612299442291259765625p-443] 

; mpf : - 2431156319206106 -443
; mpfd: - 2431156319206106 -443 (-6.77928e-134) class: Neg. norm. non-zero
; hwf : - 2431156319206106 -443 (-6.77928e-134) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100100 #b0010011100000100100100111111010001110111000101100111)))
(assert (= y (fp #b1 #b01111011111 #b0101011000001111100000001000100001110011010001111110)))
(assert (= r (fp #b1 #b01001000100 #b1000101000110001111110110000110011001011101011011010)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
