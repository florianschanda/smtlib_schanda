(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3226868926968651241082852720865048468112945556640625p289 {- 1453252569706945 289 (-1.31561e+087)}
; Y = -1.6512552123542423299085157850640825927257537841796875p269 {- 2932992731681659 269 (-1.56633e+081)}
; -1.3226868926968651241082852720865048468112945556640625p289 * -1.6512552123542423299085157850640825927257537841796875p269 == 1.09204681293916738837879165657795965671539306640625p559
; [HW: 1.09204681293916738837879165657795965671539306640625p559] 

; mpf : + 414541992453476 559
; mpfd: + 414541992453476 559 (2.06067e+168) class: Pos. norm. non-zero
; hwf : + 414541992453476 559 (2.06067e+168) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100100000 #b0101001010011011100110111011001011111011000111000001)))
(assert (= y (fp #b1 #b10100001100 #b1010011010111000101010010101111001101001001101111011)))
(assert (= r (fp #b0 #b11000101110 #b0001011110010000011000010100001101000110010101100100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
