(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.628926719598104977393404624308459460735321044921875p-880 {+ 2832434140025374 -880 (2.02072e-265)}
; Y = -1.6491523204993623341607644761097617447376251220703125p1010 {- 2923522148707621 1010 (-1.80949e+304)}
; 1.628926719598104977393404624308459460735321044921875p-880 * -1.6491523204993623341607644761097617447376251220703125p1010 == -1.3431741397743144350584998392150737345218658447265625p131
; [HW: -1.3431741397743144350584998392150737345218658447265625p131] 

; mpf : - 1545518928010793 131
; mpfd: - 1545518928010793 131 (-3.65647e+039) class: Neg. norm. non-zero
; hwf : - 1545518928010793 131 (-3.65647e+039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010001111 #b1010000100000001010101110110110001000001001000011110)))
(assert (= y (fp #b1 #b11111110001 #b1010011000101110110110001011001010101010110100100101)))
(assert (= r (fp #b1 #b10010000010 #b0101011111011010010000101010101100101001111000101001)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
