(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2801086142178144111625215373351238667964935302734375p556 {+ 1261497050614615 556 (3.01943e+167)}
; Y = -1.41541231297973268965506576932966709136962890625p214 {- 1870850737940640 214 (-3.72651e+064)}
; 1.2801086142178144111625215373351238667964935302734375p556 * -1.41541231297973268965506576932966709136962890625p214 == -1.8118814945153169926328473593457601964473724365234375p770
; [HW: -1.8118814945153169926328473593457601964473724365234375p770] 

; mpf : - 3656389196168183 770
; mpfd: - 3656389196168183 770 (-1.12519e+232) class: Neg. norm. non-zero
; hwf : - 3656389196168183 770 (-1.12519e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000101011 #b0100011110110101001100101011100101100100101101010111)))
(assert (= y (fp #b1 #b10011010101 #b0110101001011000011101100001101010011010100010100000)))
(assert (= r (fp #b1 #b11100000001 #b1100111111010111011101110011001100101011101111110111)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
