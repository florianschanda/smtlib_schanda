(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7539597588966258090437122518778778612613677978515625p346 {- 3395532889219193 346 (-2.51419e+104)}
; Y = 1.2240709711522386182735999682336114346981048583984375p-978 {+ 1009125942185767 -978 (4.79149e-295)}
; -1.7539597588966258090437122518778778612613677978515625p346 * 1.2240709711522386182735999682336114346981048583984375p-978 == -1.07348561271726961052763726911507546901702880859375p-631
; [HW: -1.07348561271726961052763726911507546901702880859375p-631] 

; mpf : - 330949778050588 -631
; mpfd: - 330949778050588 -631 (-1.20467e-190) class: Neg. norm. non-zero
; hwf : - 330949778050588 -631 (-1.20467e-190) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101011001 #b1100000100000011100000011011101011110110000001111001)))
(assert (= y (fp #b0 #b00000101101 #b0011100101011100101101110001010100010100111100100111)))
(assert (= r (fp #b1 #b00110001000 #b0001001011001111111100111111111101011000111000011100)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
