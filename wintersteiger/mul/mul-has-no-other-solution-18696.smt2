(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.900949172940113118812632819754071533679962158203125p254 {+ 4057514359532850 254 (5.50287e+076)}
; Y = 1.2209302260428602782127427417435683310031890869140625p-960 {+ 994981283681505 -960 (1.25284e-289)}
; 1.900949172940113118812632819754071533679962158203125p254 * 1.2209302260428602782127427417435683310031890869140625p-960 == 1.160463151706880413627231973805464804172515869140625p-705
; [HW: 1.160463151706880413627231973805464804172515869140625p-705] 

; mpf : + 722661790233802 -705
; mpfd: + 722661790233802 -705 (6.89421e-213) class: Pos. norm. non-zero
; hwf : + 722661790233802 -705 (6.89421e-213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011111101 #b1110011010100100100110101110000100100010110100110010)))
(assert (= y (fp #b0 #b00000111111 #b0011100010001110111000100001111110001101010011100001)))
(assert (= r (fp #b0 #b00100111110 #b0010100100010100000111001111010011001011010011001010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
