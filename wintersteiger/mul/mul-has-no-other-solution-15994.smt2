(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7084100210563921695694489244488067924976348876953125p-237 {- 3190395106855093 -237 (-7.73541e-072)}
; Y = 1.33001070627631623466413657297380268573760986328125p-439 {+ 1486236093814292 -439 (9.36887e-133)}
; -1.7084100210563921695694489244488067924976348876953125p-237 * 1.33001070627631623466413657297380268573760986328125p-439 == -1.136101809357374037290355772711336612701416015625p-675
; [HW: -1.136101809357374037290355772711336612701416015625p-675] 

; mpf : - 612948057906320 -675
; mpfd: - 612948057906320 -675 (-7.2472e-204) class: Neg. norm. non-zero
; hwf : - 612948057906320 -675 (-7.2472e-204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010010 #b1011010101011010010110111111000010011000100010110101)))
(assert (= y (fp #b0 #b01001001000 #b0101010001111011100101001110011011001001011000010100)))
(assert (= r (fp #b1 #b00101011100 #b0010001011010111100100010111010000011101110010010000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
