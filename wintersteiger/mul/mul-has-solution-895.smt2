(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1476617327603439999705869922763668000698089599609375p477 {- 665009324636367 477 (-4.47839e+143)}
; Y = 0.63645970495572168346143371309153735637664794921875p-1022 {+ 2866359690074924 -1023 (1.41617e-308)}
; -1.1476617327603439999705869922763668000698089599609375p477 * 0.63645970495572168346143371309153735637664794921875p-1022 == -1.46088089564324175029241814627312123775482177734375p-546
; [HW: -1.46088089564324175029241814627312123775482177734375p-546] 

; mpf : - 2075623029881084 -546
; mpfd: - 2075623029881084 -546 (-6.34216e-165) class: Neg. norm. non-zero
; hwf : - 2075623029881084 -546 (-6.34216e-165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111011100 #b0010010111001101001010001100100100010011100011001111)))
(assert (= y (fp #b0 #b00000000000 #b1010001011101111000001011111001000000001101100101100)))
(assert (= r (fp #b1 #b00111011101 #b0111010111111100010010100101011000100011100011111100)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
