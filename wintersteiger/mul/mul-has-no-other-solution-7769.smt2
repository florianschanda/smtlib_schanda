(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1370260283435609238722463487647473812103271484375p-482 {+ 617110370188120 -482 (9.10568e-146)}
; Y = -1.8714865204248500862860282722976990044116973876953125p998 {- 3924826368643765 998 (-5.01328e+300)}
; 1.1370260283435609238722463487647473812103271484375p-482 * -1.8714865204248500862860282722976990044116973876953125p998 == -1.0639644427085890310280547055299393832683563232421875p517
; [HW: -1.0639644427085890310280547055299393832683563232421875p517] 

; mpf : - 288070240347363 517
; mpfd: - 288070240347363 517 (-4.56494e+155) class: Neg. norm. non-zero
; hwf : - 288070240347363 517 (-4.56494e+155) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011101 #b0010001100010100001000110100011001101111101101011000)))
(assert (= y (fp #b1 #b11111100101 #b1101111100011001101111011001100000100001001010110101)))
(assert (= r (fp #b1 #b11000000100 #b0001000001011111111110010100010110001010010011100011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
