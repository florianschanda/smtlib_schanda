(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.587152146802457419738630051142536103725433349609375p432 {- 2644298189549334 432 (-1.76026e+130)}
; Y = 1.147677113102580914727468552882783114910125732421875p-457 {+ 665078591539934 -457 (3.08398e-138)}
; -1.587152146802457419738630051142536103725433349609375p432 * 1.147677113102580914727468552882783114910125732421875p-457 == -1.8215381938968080444141151019721291959285736083984375p-25
; [HW: -1.8215381938968080444141151019721291959285736083984375p-25] 

; mpf : - 3699879103904295 -25
; mpfd: - 3699879103904295 -25 (-5.42861e-008) class: Neg. norm. non-zero
; hwf : - 3699879103904295 -25 (-5.42861e-008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110101111 #b1001011001001111100110100110010001001010111100010110)))
(assert (= y (fp #b0 #b01000110110 #b0010010111001110001010101101001100100100101011011110)))
(assert (= r (fp #b1 #b01111100110 #b1101001001010000010100111011101100110011101000100111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
