(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.014064444060956748927537773852236568927764892578125p1004 {+ 63340625032098 1004 (1.73853e+302)}
; Y = 1.6473930740881552736709636519663035869598388671875p-362 {+ 2915599207225656 -362 (1.75363e-109)}
; 1.014064444060956748927537773852236568927764892578125p1004 * 1.6473930740881552736709636519663035869598388671875p-362 == 1.670562741825075914192666459712199866771697998046875p642
; [HW: 1.670562741825075914192666459712199866771697998046875p642] 

; mpf : + 3019946114211950 642
; mpfd: + 3019946114211950 642 (3.04874e+193) class: Pos. norm. non-zero
; hwf : + 3019946114211950 642 (3.04874e+193) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111101011 #b0000001110011001101110100011011101000111001110100010)))
(assert (= y (fp #b0 #b01010010101 #b1010010110111011100011010111000011011101100100111000)))
(assert (= r (fp #b0 #b11010000001 #b1010101110101001111111111111011000001110000001101110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
