(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.295845069438175567455573400366120040416717529296875p-567 {- 1332367744481166 -567 (-2.68254e-171)}
; Y = 1.39078652025236859657297827652655541896820068359375p865 {+ 1759946026989980 865 (3.42142e+260)}
; -1.295845069438175567455573400366120040416717529296875p-567 * 1.39078652025236859657297827652655541896820068359375p865 == -1.8022438549101089666493180629913695156574249267578125p298
; [HW: -1.8022438549101089666493180629913695156574249267578125p298] 

; mpf : - 3612985126033437 298
; mpfd: - 3612985126033437 298 (-9.17809e+089) class: Neg. norm. non-zero
; hwf : - 3612985126033437 298 (-9.17809e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111001000 #b0100101110111100100000001010000111101011011110001110)))
(assert (= y (fp #b0 #b11101100000 #b0110010000001010100101011101110000110011100110011100)))
(assert (= r (fp #b1 #b10100101001 #b1100110101011111110110100111000001000001100000011101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
