(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0736968472283356934582343455986119806766510009765625p-660 {- 331901093715913 -660 (-2.24432e-199)}
; Y = -1.5985648419472415771025453068432398140430450439453125p556 {- 2695696399150677 556 (-3.77058e+167)}
; -1.0736968472283356934582343455986119806766510009765625p-660 * -1.5985648419472415771025453068432398140430450439453125p556 == 1.71637403088881601576076718629337847232818603515625p-104
; [HW: 1.71637403088881601576076718629337847232818603515625p-104] 

; mpf : + 3226261818568772 -104
; mpfd: + 3226261818568772 -104 (8.46238e-032) class: Pos. norm. non-zero
; hwf : + 3226261818568772 -104 (8.46238e-032) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101011 #b0001001011011101110010111110110010101001111111001001)))
(assert (= y (fp #b1 #b11000101011 #b1001100100111011100010111010010010110010111001010101)))
(assert (= r (fp #b0 #b01110010111 #b1011011101100100010010011101101001011111000001000100)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
