(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.680140085673677230460043574566952884197235107421875p495 {- 3063078636399710 495 (-1.71867e+149)}
; Y = 1.3641801577886776275505553712719120085239410400390625p-379 {+ 1640121622912817 -379 (1.10791e-114)}
; -1.680140085673677230460043574566952884197235107421875p495 * 1.3641801577886776275505553712719120085239410400390625p-379 == -1.146006883590699576558336048037745058536529541015625p117
; [HW: -1.146006883590699576558336048037745058536529541015625p117] 

; mpf : - 657556546532602 117
; mpfd: - 657556546532602 117 (-1.90413e+035) class: Neg. norm. non-zero
; hwf : - 657556546532602 117 (-1.90413e+035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101110 #b1010111000011101101010010010000010101010110001011110)))
(assert (= y (fp #b0 #b01010000100 #b0101110100111010111010010010101110001101111100110001)))
(assert (= r (fp #b1 #b10001110100 #b0010010101100000101101010000011000000011010011111010)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
