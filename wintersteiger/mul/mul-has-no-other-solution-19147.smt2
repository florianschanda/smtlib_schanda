(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.487979027102074525146235828287899494171142578125p-665 {+ 2197662164621520 -665 (9.71963e-201)}
; Y = -1.7436247926640564553935064395773224532604217529296875p-240 {- 3348988339145307 -240 (-9.86857e-073)}
; 1.487979027102074525146235828287899494171142578125p-665 * -1.7436247926640564553935064395773224532604217529296875p-240 == -1.2972385613096595324833515405771322548389434814453125p-904
; [HW: -1.2972385613096595324833515405771322548389434814453125p-904] 

; mpf : - 1338643473954325 -904
; mpfd: - 1338643473954325 -904 (-9.59188e-273) class: Neg. norm. non-zero
; hwf : - 1338643473954325 -904 (-9.59188e-273) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100110 #b0111110011101100001100011000101010001001100011010000)))
(assert (= y (fp #b1 #b01100001111 #b1011111001011110001100011100010011111100101001011011)))
(assert (= r (fp #b1 #b00001110111 #b0100110000010111110100111000101111101111011000010101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
