(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.405593428291092461535072288825176656246185302734375p-893 {- 1826630412515686 -893 (-2.1285e-269)}
; Y = 1.5926011421880883478507939798873849213123321533203125p291 {+ 2668838283137605 291 (6.3363e+087)}
; -1.405593428291092461535072288825176656246185302734375p-893 * 1.5926011421880883478507939798873849213123321533203125p291 == -1.1192748496742324082475761315436102449893951416015625p-601
; [HW: -1.1192748496742324082475761315436102449893951416015625p-601] 

; mpf : - 537166168547545 -601
; mpfd: - 537166168547545 -601 (-1.34868e-181) class: Neg. norm. non-zero
; hwf : - 537166168547545 -601 (-1.34868e-181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010000010 #b0110011111010100111110001000110111111011100101100110)))
(assert (= y (fp #b0 #b10100100010 #b1001011110110100101101010101110101000101001001000101)))
(assert (= r (fp #b1 #b00110100110 #b0001111010001000110010111110101010010110000011011001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
