(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5017538750689685134176443170872516930103302001953125p511 {+ 2259698564792309 511 (1.00676e+154)}
; Y = -1.289698875195438798613167818984948098659515380859375p72 {- 1304687746379830 72 (-6.09043e+021)}
; 1.5017538750689685134176443170872516930103302001953125p511 * -1.289698875195438798613167818984948098659515380859375p72 == -1.936810283496840146000295135308988392353057861328125p583
; [HW: -1.936810283496840146000295135308988392353057861328125p583] 

; mpf : - 4219018443673218 583
; mpfd: - 4219018443673218 583 (-6.13161e+175) class: Neg. norm. non-zero
; hwf : - 4219018443673218 583 (-6.13161e+175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111111110 #b1000000001110010111100010010010000001111111111110101)))
(assert (= y (fp #b1 #b10001000111 #b0100101000101001101101001001101010100111000000110110)))
(assert (= r (fp #b1 #b11001000110 #b1110111111010010110011000111101000101100111010000010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
