(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.523136537857238348436794694862328469753265380859375p-703 {- 2355997516957750 -703 (-3.61953e-212)}
; Y = -1.71211605509405639935494036762975156307220458984375p-638 {- 3207085600366140 -638 (-1.50105e-192)}
; -1.523136537857238348436794694862328469753265380859375p-703 * -1.71211605509405639935494036762975156307220458984375p-638 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000000 #b1000010111101100010001101011000101110000100000110110)))
(assert (= y (fp #b1 #b00110000001 #b1011011001001101001111001101111110010101111000111100)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
