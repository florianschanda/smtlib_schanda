(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6866907717295707147542316306498833000659942626953125p-626 {- 3092580303680053 -626 (-6.05701e-189)}
; Y = -1.27576655174048170238165766932070255279541015625p864 {- 1241942139659680 864 (-1.56923e+260)}
; -1.6866907717295707147542316306498833000659942626953125p-626 * -1.27576655174048170238165766932070255279541015625p864 == 1.07591183485096308913853135891258716583251953125p239
; [HW: 1.07591183485096308913853135891258716583251953125p239] 

; mpf : + 341876511147808 239
; mpfd: + 341876511147808 239 (9.50486e+071) class: Pos. norm. non-zero
; hwf : + 341876511147808 239 (9.50486e+071) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001101 #b1010111111001010111101110110011100001011001000110101)))
(assert (= y (fp #b1 #b11101011111 #b0100011010011000101000110000000100001110010110100000)))
(assert (= r (fp #b0 #b10011101110 #b0001001101101110111101010100000000010000011100100000)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
