(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7137046926845458383326104012667201459407806396484375p-172 {- 3214240188026695 -172 (-2.86271e-052)}
; Y = 1.07998556766961950614813758875243365764617919921875p975 {+ 360222972751916 975 (3.44877e+293)}
; -1.7137046926845458383326104012667201459407806396484375p-172 * 1.07998556766961950614813758875243365764617919921875p975 == -1.8507763353470101375108924912638030946254730224609375p803
; [HW: -1.8507763353470101375108924912638030946254730224609375p803] 

; mpf : - 3831555986844431 803
; mpfd: - 3831555986844431 803 (-9.8728e+241) class: Neg. norm. non-zero
; hwf : - 3831555986844431 803 (-9.8728e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010011 #b1011011010110101010110011100101000010100111101000111)))
(assert (= y (fp #b0 #b11111001110 #b0001010001111001111011110010010101001011000000101100)))
(assert (= r (fp #b1 #b11100100010 #b1101100111001100011110100101100010000110101100001111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
