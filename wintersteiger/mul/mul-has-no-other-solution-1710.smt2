(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.917386437231575424533502882695756852626800537109375p-1006 {+ 4131541216870870 -1006 (2.79598e-303)}
; Y = -1.0558449195663770492359390118508599698543548583984375p178 {- 251503158949671 178 (-4.04519e+053)}
; 1.917386437231575424533502882695756852626800537109375p-1006 * -1.0558449195663770492359390118508599698543548583984375p178 == -1.0122313642982174730633460058015771210193634033203125p-827
; [HW: -1.0122313642982174730633460058015771210193634033203125p-827] 

; mpf : - 55085167695685 -827
; mpfd: - 55085167695685 -827 (-1.13103e-249) class: Neg. norm. non-zero
; hwf : - 55085167695685 -827 (-1.13103e-249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010001 #b1110101011011001110101100110100110110100000111010110)))
(assert (= y (fp #b1 #b10010110001 #b0000111001001011110110100100011100101111011100100111)))
(assert (= r (fp #b1 #b00011000100 #b0000001100100001100110000011110110100101011101000101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
