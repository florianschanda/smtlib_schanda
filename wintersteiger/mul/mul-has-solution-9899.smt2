(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7747185165376218041188849383615888655185699462890625p-470 {+ 3489022022395857 -470 (5.82145e-142)}
; Y = -1.8186865816973121212640762678347527980804443359375p-130 {- 3687036584265240 -130 (-1.33616e-039)}
; 1.7747185165376218041188849383615888655185699462890625p-470 * -1.8186865816973121212640762678347527980804443359375p-130 == -1.6138283761583658293403686911915428936481475830078125p-599
; [HW: -1.6138283761583658293403686911915428936481475830078125p-599] 

; mpf : - 2764437246136253 -599
; mpfd: - 2764437246136253 -599 (-7.77839e-181) class: Neg. norm. non-zero
; hwf : - 2764437246136253 -599 (-7.77839e-181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000101001 #b1100011001010011111100111110010000100010011111010001)))
(assert (= y (fp #b1 #b01101111101 #b1101000110010101011100011001111000010000011000011000)))
(assert (= r (fp #b1 #b00110101000 #b1001110100100011110110110100000011110100111110111101)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
