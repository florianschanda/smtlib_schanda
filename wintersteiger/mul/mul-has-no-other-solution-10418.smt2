(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.52390198928759446062031202018260955810546875p-959 {- 2359444803734272 -959 (-3.12746e-289)}
; Y = 1.4004773991953118894571161945350468158721923828125p541 {+ 1803589865786312 541 (1.0081e+163)}
; -1.52390198928759446062031202018260955810546875p-959 * 1.4004773991953118894571161945350468158721923828125p541 == -1.067095147293026347057320890598930418491363525390625p-417
; [HW: -1.067095147293026347057320890598930418491363525390625p-417] 

; mpf : - 302169680347242 -417
; mpfd: - 302169680347242 -417 (-3.15279e-126) class: Neg. norm. non-zero
; hwf : - 302169680347242 -417 (-3.15279e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000000 #b1000011000011110011100001101011001001100101100000000)))
(assert (= y (fp #b0 #b11000011100 #b0110011010000101101011111101010001010100101111001000)))
(assert (= r (fp #b1 #b01001011110 #b0001000100101101001001011100011101011000000001101010)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
