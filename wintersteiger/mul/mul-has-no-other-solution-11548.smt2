(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.253202662927915600477035695803351700305938720703125p855 {+ 1140323418411378 855 (3.0107e+257)}
; Y = -1.1270800904634434846940393981640227138996124267578125p-547 {- 572317848057373 -547 (-2.44651e-165)}
; 1.253202662927915600477035695803351700305938720703125p855 * -1.1270800904634434846940393981640227138996124267578125p-547 == -1.41245977070182338053427884005941450595855712890625p308
; [HW: -1.41245977070182338053427884005941450595855712890625p308] 

; mpf : - 1857553669638052 308
; mpfd: - 1857553669638052 308 (-7.36571e+092) class: Neg. norm. non-zero
; hwf : - 1857553669638052 308 (-7.36571e+092) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010110 #b0100000011010001111000111100010010001001000101110010)))
(assert (= y (fp #b1 #b00111011100 #b0010000010001000010100100010000010000011011000011101)))
(assert (= r (fp #b1 #b10100110011 #b0110100110010110111101101010101000010100011110100100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
