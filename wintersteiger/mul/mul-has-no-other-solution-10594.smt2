(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.96066179012282049143323092721402645111083984375p433 {+ 4326436080026208 433 (4.34901e+130)}
; Y = -1.5100312271702487354474442327045835554599761962890625p-464 {- 2296976444631249 -464 (-3.17006e-140)}
; 1.96066179012282049143323092721402645111083984375p433 * -1.5100312271702487354474442327045835554599761962890625p-464 == -1.4803302645024896122549762367270886898040771484375p-30
; [HW: -1.4803302645024896122549762367270886898040771484375p-30] 

; mpf : - 2163215200228184 -30
; mpfd: - 2163215200228184 -30 (-1.37866e-009) class: Neg. norm. non-zero
; hwf : - 2163215200228184 -30 (-1.37866e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110110000 #b1111010111101101111011100101101100011000001001100000)))
(assert (= y (fp #b1 #b01000101111 #b1000001010010001011010000001000010100010100011010001)))
(assert (= r (fp #b1 #b01111100001 #b0111101011110110111011001001100101010001001101011000)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
