(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9617116581173135170246268899063579738140106201171875p-42 {- 4331164265134995 -42 (-4.46042e-013)}
; Y = 1.9670031473629823182136533432640135288238525390625p-335 {+ 4354995014130024 -335 (2.81032e-101)}
; -1.9617116581173135170246268899063579738140106201171875p-42 * 1.9670031473629823182136533432640135288238525390625p-335 == -1.929346502867705037687073854613117873668670654296875p-376
; [HW: -1.929346502867705037687073854613117873668670654296875p-376] 

; mpf : - 4185404564013070 -376
; mpfd: - 4185404564013070 -376 (-1.25352e-113) class: Neg. norm. non-zero
; hwf : - 4185404564013070 -376 (-1.25352e-113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010101 #b1111011000110010101111000011011111001011101110010011)))
(assert (= y (fp #b0 #b01010110000 #b1111011110001101100001001010110100001101100101101000)))
(assert (= r (fp #b1 #b01010000111 #b1110110111101001101001110000010001111000000000001110)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
