(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.31420425388443451453213128843344748020172119140625p527 {+ 1415050160712164 527 (5.77392e+158)}
; Y = -1.2750219397085198469454780934029258787631988525390625p-204 {- 1238588705190001 -204 (-4.95905e-062)}
; 1.31420425388443451453213128843344748020172119140625p527 * -1.2750219397085198469454780934029258787631988525390625p-204 == -1.675639256960919976080504056881181895732879638671875p323
; [HW: -1.675639256960919976080504056881181895732879638671875p323] 

; mpf : - 3042808705886078 323
; mpfd: - 3042808705886078 323 (-2.86331e+097) class: Neg. norm. non-zero
; hwf : - 3042808705886078 323 (-2.86331e+097) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000001110 #b0101000001101111101100001010001010110010100111100100)))
(assert (= y (fp #b1 #b01100110011 #b0100011001100111110101100111110010111011000001110001)))
(assert (= r (fp #b1 #b10101000010 #b1010110011110110101100011100000010001010011101111110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
