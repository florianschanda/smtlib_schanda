(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4979144818700265151534267715760506689548492431640625p587 {- 2242407475012225 587 (-7.58743e+176)}
; Y = -1.3105518919024639057369086003745906054973602294921875p288 {- 1398601384651139 288 (-6.51768e+086)}
; -1.4979144818700265151534267715760506689548492431640625p587 * -1.3105518919024639057369086003745906054973602294921875p288 == 1.9630946581228621017345403743092902004718780517578125p875
; [HW: 1.9630946581228621017345403743092902004718780517578125p875] 

; mpf : + 4337392743444637 875
; mpfd: + 4337392743444637 875 (4.94524e+263) class: Pos. norm. non-zero
; hwf : + 4337392743444637 875 (4.94524e+263) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001010 #b0111111101110111010100101100111111010110001010000001)))
(assert (= y (fp #b1 #b10100011111 #b0100111110000000010101000010101101101110100110000011)))
(assert (= r (fp #b0 #b11101101010 #b1111011010001101010111110001101110010111000010011101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
