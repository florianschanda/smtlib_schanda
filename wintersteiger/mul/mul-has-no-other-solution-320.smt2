(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.95360868744369486904588484321720898151397705078125p142 {+ 4294671729428692 142 (1.08917e+043)}
; Y = -1.234493391256475280925997140002436935901641845703125p307 {- 1056064349483506 307 (-3.21883e+092)}
; 1.95360868744369486904588484321720898151397705078125p142 * -1.234493391256475280925997140002436935901641845703125p307 == -1.205858506875239211098005398525856435298919677734375p450
; [HW: -1.205858506875239211098005398525856435298919677734375p450] 

; mpf : - 927104294854374 450
; mpfd: - 927104294854374 450 (-3.50586e+135) class: Neg. norm. non-zero
; hwf : - 927104294854374 450 (-3.50586e+135) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001101 #b1111010000011111101100101110110111000000100011010100)))
(assert (= y (fp #b1 #b10100110010 #b0011110000000111110000100100011010010011000111110010)))
(assert (= r (fp #b1 #b10111000001 #b0011010010110011001001001010001010100001111011100110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
