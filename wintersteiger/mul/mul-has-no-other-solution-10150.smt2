(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4022323574445765270723995854496024549007415771484375p245 {- 1811493495103751 245 (-7.9281e+073)}
; Y = 1.7042567126095542473507293834700249135494232177734375p-557 {+ 3171690268481559 -557 (3.61266e-168)}
; -1.4022323574445765270723995854496024549007415771484375p245 * 1.7042567126095542473507293834700249135494232177734375p-557 == -1.194881953906619553862356042372994124889373779296875p-311
; [HW: -1.194881953906619553862356042372994124889373779296875p-311] 

; mpf : - 877670294995086 -311
; mpfd: - 877670294995086 -311 (-2.86415e-094) class: Neg. norm. non-zero
; hwf : - 877670294995086 -311 (-2.86415e-094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011110100 #b0110011011111000101100110010010010011110000100000111)))
(assert (= y (fp #b0 #b00111010010 #b1011010001001010001010101111110010100101100000010111)))
(assert (= r (fp #b1 #b01011001000 #b0011000111100011110010001010001010011100000010001110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
