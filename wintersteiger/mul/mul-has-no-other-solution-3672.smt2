(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2668137280839812941479749497375451028347015380859375p-134 {+ 1201622206376351 -134 (5.81692e-041)}
; Y = -1.4883511809629019762013513172860257327556610107421875p901 {- 2199338196610467 901 (-2.51612e+271)}
; 1.2668137280839812941479749497375451028347015380859375p-134 * -1.4883511809629019762013513172860257327556610107421875p901 == -1.88546370825380993352382574812509119510650634765625p767
; [HW: -1.88546370825380993352382574812509119510650634765625p767] 

; mpf : - 3987774026541956 767
; mpfd: - 3987774026541956 767 (-1.46361e+231) class: Neg. norm. non-zero
; hwf : - 3987774026541956 767 (-1.46361e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101111001 #b0100010001001101111001111000110000111110100110011111)))
(assert (= y (fp #b1 #b11110000100 #b0111110100000100100101010011111100110010110110100011)))
(assert (= r (fp #b1 #b11011111110 #b1110001010101101101111111110010010111110101110000100)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
