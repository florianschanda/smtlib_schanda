(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.36918296533889449762000367627479135990142822265625p-896 {+ 1662652265131780 -896 (2.5917e-270)}
; Y = -1.02380554819129798715948709286749362945556640625p385 {- 107210657963680 385 (-8.068e+115)}
; 1.36918296533889449762000367627479135990142822265625p-896 * -1.02380554819129798715948709286749362945556640625p385 == -1.401777116402973977216106504783965647220611572265625p-511
; [HW: -1.401777116402973977216106504783965647220611572265625p-511] 

; mpf : - 1809443271718426 -511
; mpfd: - 1809443271718426 -511 (-2.09099e-154) class: Neg. norm. non-zero
; hwf : - 1809443271718426 -511 (-2.09099e-154) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111111 #b0101111010000010110001100101101001011110111100000100)))
(assert (= y (fp #b1 #b10110000000 #b0000011000011000000111101101001011110001111010100000)))
(assert (= r (fp #b1 #b01000000000 #b0110011011011010110111010111011100111011011000011010)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
