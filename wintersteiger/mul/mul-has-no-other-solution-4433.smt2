(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.591855440340412375377354692318476736545562744140625p826 {- 2665479940574282 826 (-7.12328e+248)}
; Y = 1.9967208243751255469788929985952563583850860595703125p83 {+ 4488831533248229 83 (1.93111e+025)}
; -1.591855440340412375377354692318476736545562744140625p826 * 1.9967208243751255469788929985952563583850860595703125p83 == -1.5892454535612683397260980200371704995632171630859375p910
; [HW: -1.5892454535612683397260980200371704995632171630859375p910] 

; mpf : - 2653725605088287 910
; mpfd: - 2653725605088287 910 (-1.37558e+274) class: Neg. norm. non-zero
; hwf : - 2653725605088287 910 (-1.37558e+274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100111001 #b1001011110000011110101101001000000111000110001001010)))
(assert (= y (fp #b0 #b10001010010 #b1111111100101001000110001000111111101110111011100101)))
(assert (= r (fp #b1 #b11110001101 #b1001011011011000110010100100000001011100110000011111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
