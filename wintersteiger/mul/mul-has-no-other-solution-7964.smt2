(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.37021779259561515829091149498708546161651611328125p332 {- 1667312712779540 332 (-1.1988e+100)}
; Y = 1.7954163783449725855234646587632596492767333984375p549 {+ 3582236905118808 549 (3.30851e+165)}
; -1.37021779259561515829091149498708546161651611328125p332 * 1.7954163783449725855234646587632596492767333984375p549 == -1.230055733362930947549784832517616450786590576171875p882
; [HW: -1.230055733362930947549784832517616450786590576171875p882] 

; mpf : - 1036078915047742 882
; mpfd: - 1036078915047742 882 (-3.96626e+265) class: Neg. norm. non-zero
; hwf : - 1036078915047742 882 (-3.96626e+265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101001011 #b0101111011000110100101111101111110011000011100010100)))
(assert (= y (fp #b0 #b11000100100 #b1100101110100000011010000110001110110001110001011000)))
(assert (= r (fp #b1 #b11101110001 #b0011101011100100111011101011101100001101000100111110)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
