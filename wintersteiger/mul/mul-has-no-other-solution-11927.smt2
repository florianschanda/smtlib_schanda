(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.69567327164363401692526167607866227626800537109375p407 {- 3133033886945884 407 (-5.60467e+122)}
; Y = -1.674738252497558033127234011772088706493377685546875p-634 {- 3038750942520622 -634 (-2.34925e-191)}
; -1.69567327164363401692526167607866227626800537109375p407 * -1.674738252497558033127234011772088706493377685546875p-634 == 1.4199044458796381551479726113029755651950836181640625p-226
; [HW: 1.4199044458796381551479726113029755651950836181640625p-226] 

; mpf : + 1891081505994753 -226
; mpfd: + 1891081505994753 -226 (1.31668e-068) class: Pos. norm. non-zero
; hwf : + 1891081505994753 -226 (1.31668e-068) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110010110 #b1011001000010111101001001011111001101001001001011100)))
(assert (= y (fp #b1 #b00110000101 #b1010110010111011101001010110011111010110010100101110)))
(assert (= r (fp #b0 #b01100011101 #b0110101101111110110110111001011001111111100000000001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
