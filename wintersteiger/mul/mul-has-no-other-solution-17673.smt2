(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5514518655080877795882088321377523243427276611328125p150 {- 2483518416014989 150 (-2.21431e+045)}
; Y = -1.9357066413036585483808948993100784718990325927734375p-562 {- 4214048081103255 -562 (-1.28228e-169)}
; -1.5514518655080877795882088321377523243427276611328125p150 * -1.9357066413036585483808948993100784718990325927734375p-562 == 1.5015778398634778145748214228660799562931060791015625p-411
; [HW: 1.5015778398634778145748214228660799562931060791015625p-411] 

; mpf : + 2258905772706457 -411
; mpfd: + 2258905772706457 -411 (2.83935e-124) class: Pos. norm. non-zero
; hwf : + 2258905772706457 -411 (2.83935e-124) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010010101 #b1000110100101011111100110000111110101100111010001101)))
(assert (= y (fp #b1 #b00111001101 #b1110111110001010011110000110111100001100100110010111)))
(assert (= r (fp #b0 #b01001100100 #b1000000001100111011001111100001010011100101010011001)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
