(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4861233966607831913364634601748548448085784912109375p-490 {- 2189305148057583 -490 (-4.64897e-148)}
; Y = 1.98994427997705525257288172724656760692596435546875p962 {+ 4458312690422220 962 (7.75705e+289)}
; -1.4861233966607831913364634601748548448085784912109375p-490 * 1.98994427997705525257288172724656760692596435546875p962 == -1.4786513762625990153765087598003447055816650390625p473
; [HW: -1.4786513762625990153765087598003447055816650390625p473] 

; mpf : - 2155654159776616 473
; mpfd: - 2155654159776616 473 (-3.60623e+142) class: Neg. norm. non-zero
; hwf : - 2155654159776616 473 (-3.60623e+142) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010101 #b0111110001110010100101010011101001111010011111101111)))
(assert (= y (fp #b0 #b11111000001 #b1111110101101100111111010000001101011101000111001100)))
(assert (= r (fp #b1 #b10111011000 #b0111101010001000111001011000011100111011101101101000)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
