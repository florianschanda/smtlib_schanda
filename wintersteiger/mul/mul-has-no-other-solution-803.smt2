(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.42392240642191492128176832920871675014495849609375p822 {- 1909176791595740 822 (-3.98238e+247)}
; Y = 1.160549688953933067381285582087002694606781005859375p-260 {+ 723051519347382 -260 (6.26419e-079)}
; -1.42392240642191492128176832920871675014495849609375p822 * 1.160549688953933067381285582087002694606781005859375p-260 == -1.652532705867489237760992182302288711071014404296875p562
; [HW: -1.652532705867489237760992182302288711071014404296875p562] 

; mpf : - 2938746050991886 562
; mpfd: - 2938746050991886 562 (-2.49464e+169) class: Neg. norm. non-zero
; hwf : - 2938746050991886 562 (-2.49464e+169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110101 #b0110110010000110001011011100011110011111101011011100)))
(assert (= y (fp #b0 #b01011111011 #b0010100100011001110010001100111101110000101010110110)))
(assert (= r (fp #b1 #b11000110001 #b1010011100001100011000100010011101000101011100001110)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
