(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.38924750874270497291718129417859017848968505859375p-301 {+ 1753014935328540 -301 (3.40997e-091)}
; Y = 1.3467538563591887612602704393793828785419464111328125p-55 {+ 1561640538288525 -55 (3.73799e-017)}
; 1.38924750874270497291718129417859017848968505859375p-301 * 1.3467538563591887612602704393793828785419464111328125p-55 == 1.870974439836633695932732734945602715015411376953125p-356
; [HW: 1.870974439836633695932732734945602715015411376953125p-356] 

; mpf : + 3922520162697490 -356
; mpfd: + 3922520162697490 -356 (1.27465e-107) class: Pos. norm. non-zero
; hwf : + 3922520162697490 -356 (1.27465e-107) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011010010 #b0110001110100101101110011000100000011001011100011100)))
(assert (= y (fp #b0 #b01111001000 #b0101100011000100110111000101100011010011000110001101)))
(assert (= r (fp #b0 #b01010011011 #b1101111011111000001011100100111011000000000100010010)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
