(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.621416943860995107939970694133080542087554931640625p101 {+ 2798613116814090 101 (4.11078e+030)}
; Y = -1.6421278033213848601690187933854758739471435546875p-404 {- 2891886535762424 -404 (-3.97456e-122)}
; 1.621416943860995107939970694133080542087554931640625p101 * -1.6421278033213848601690187933854758739471435546875p-404 == -1.33128692214526456183421032619662582874298095703125p-302
; [HW: -1.33128692214526456183421032619662582874298095703125p-302] 

; mpf : - 1491983659126132 -302
; mpfd: - 1491983659126132 -302 (-1.63385e-091) class: Neg. norm. non-zero
; hwf : - 1491983659126132 -302 (-1.63385e-091) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100100 #b1001111100010101001011100100101100010000001100001010)))
(assert (= y (fp #b1 #b01001101011 #b1010010001100010011111001101101100011110000111111000)))
(assert (= r (fp #b1 #b01011010001 #b0101010011001111001110000100000000110100110101110100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
