(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9911437804938107998253826735890470445156097412109375p-454 {- 4463714760502511 -454 (-4.2804e-137)}
; Y = -1.4737068594115474429173673343029804527759552001953125p-308 {- 2133386035528693 -308 (-2.826e-093)}
; -1.9911437804938107998253826735890470445156097412109375p-454 * -1.4737068594115474429173673343029804527759552001953125p-308 == 1.46718112369418474116855577449314296245574951171875p-761
; [HW: 1.46718112369418474116855577449314296245574951171875p-761] 

; mpf : + 2103996734583660 -761
; mpfd: + 2103996734583660 -761 (1.20964e-229) class: Pos. norm. non-zero
; hwf : + 2103996734583660 -761 (1.20964e-229) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000111001 #b1111110110111011100110010100101011011010110011101111)))
(assert (= y (fp #b1 #b01011001011 #b0111100101000100110110100100110100010000001111110101)))
(assert (= r (fp #b0 #b00100000110 #b0111011110011001001011101001111110010011001101101100)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
