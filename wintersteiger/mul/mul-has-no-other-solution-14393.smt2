(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.89459103598293854275880221393890678882598876953125p506 {- 4028879856301748 506 (-3.96911e+152)}
; Y = -1.678166985596934335234209356713108718395233154296875p-935 {- 3054192583629326 -935 (-5.77816e-282)}
; -1.89459103598293854275880221393890678882598876953125p506 * -1.678166985596934335234209356713108718395233154296875p-935 == 1.5897200638972304176377292606048285961151123046875p-428
; [HW: 1.5897200638972304176377292606048285961151123046875p-428] 

; mpf : + 2655863060020472 -428
; mpfd: + 2655863060020472 -428 (2.29341e-129) class: Pos. norm. non-zero
; hwf : + 2655863060020472 -428 (2.29341e-129) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111111001 #b1110010100000011111010110000101011010111011010110100)))
(assert (= y (fp #b1 #b00001011000 #b1010110110011100010110100000000001011101101000001110)))
(assert (= r (fp #b0 #b01001010011 #b1001011011110111111001001110010000111011110011111000)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
