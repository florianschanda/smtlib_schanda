(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.932881099496162047302050268626771867275238037109375p327 {+ 4201322972071894 327 (5.28462e+098)}
; Y = 1.76100460459561691806129601900465786457061767578125p-342 {+ 3427260053684052 -342 (1.96563e-103)}
; 1.932881099496162047302050268626771867275238037109375p327 * 1.76100460459561691806129601900465786457061767578125p-342 == 1.7019062581742898654368900679401122033596038818359375p-14
; [HW: 1.7019062581742898654368900679401122033596038818359375p-14] 

; mpf : + 3161104762762751 -14
; mpfd: + 3161104762762751 -14 (0.000103876) class: Pos. norm. non-zero
; hwf : + 3161104762762751 -14 (0.000103876) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101000110 #b1110111011010001010010111011010101100100011111010110)))
(assert (= y (fp #b0 #b01010101001 #b1100001011010001001100101010000011010111111101010100)))
(assert (= r (fp #b0 #b01111110001 #b1011001110110000001000001110011110110111010111111111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
