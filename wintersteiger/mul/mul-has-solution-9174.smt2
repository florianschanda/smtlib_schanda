(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.37911341450701030453274142928421497344970703125p-487 {- 1707375032304928 -487 (-3.45137e-147)}
; Y = -1.6848961206294903458768885684548877179622650146484375p-129 {- 3084497913654471 -129 (-2.47573e-039)}
; -1.37911341450701030453274142928421497344970703125p-487 * -1.6848961206294903458768885684548877179622650146484375p-129 == 1.1618314210054758728318802241119556128978729248046875p-615
; [HW: 1.1618314210054758728318802241119556128978729248046875p-615] 

; mpf : + 728823927337099 -615
; mpfd: + 728823927337099 -615 (8.54468e-186) class: Pos. norm. non-zero
; hwf : + 728823927337099 -615 (8.54468e-186) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000011000 #b0110000100001101100100111010010011001000010100100000)))
(assert (= y (fp #b1 #b01101111110 #b1010111101010101010110100010011101000010110011000111)))
(assert (= r (fp #b0 #b00110011000 #b0010100101101101110010001011010010101111000010001011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
