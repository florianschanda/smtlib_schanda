(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5791622140948577968089239220716990530490875244140625p356 {- 2608314731584673 356 (-2.31796e+107)}
; Y = 1.48918963297631723463609887403436005115509033203125p-261 {+ 2203114248785652 -261 (4.01903e-079)}
; -1.5791622140948577968089239220716990530490875244140625p356 * 1.48918963297631723463609887403436005115509033203125p-261 == -1.17583599900899482548766172840259969234466552734375p96
; [HW: -1.17583599900899482548766172840259969234466552734375p96] 

; mpf : - 791894939615228 96
; mpfd: - 791894939615228 96 (-9.31593e+028) class: Neg. norm. non-zero
; hwf : - 791894939615228 96 (-9.31593e+028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100011 #b1001010001000011111110011001000010011101110010100001)))
(assert (= y (fp #b0 #b01011111010 #b0111110100111011100010000010001100101100111011110100)))
(assert (= r (fp #b1 #b10001011111 #b0010110100000011100101101000100100110011111111111100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
