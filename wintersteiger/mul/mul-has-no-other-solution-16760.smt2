(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3596703715087061770105947289266623556613922119140625p35 {+ 1619811351102817 35 (4.67179e+010)}
; Y = -1.470164781897835393209561516414396464824676513671875p-726 {- 2117433936557822 -726 (-4.16475e-219)}
; 1.3596703715087061770105947289266623556613922119140625p35 * -1.470164781897835393209561516414396464824676513671875p-726 == -1.9989394951820458334879049289156682789325714111328125p-691
; [HW: -1.9989394951820458334879049289156682789325714111328125p-691] 

; mpf : - 4498823538267533 -691
; mpfd: - 4498823538267533 -691 (-1.94569e-208) class: Neg. norm. non-zero
; hwf : - 4498823538267533 -691 (-1.94569e-208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000100010 #b0101110000010011010110111000001011111000010101100001)))
(assert (= y (fp #b1 #b00100101001 #b0111100001011100101110000001100111111011011011111110)))
(assert (= r (fp #b1 #b00101001100 #b1111111110111010011111111010111001111101010110001101)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
