(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5015793147299982823739128434681333601474761962890625p-170 {- 2258912414914769 -170 (-1.00334e-051)}
; Y = 1.8087429096606120193513334015733562409877777099609375p-603 {+ 3642254266586063 -603 (5.44866e-182)}
; -1.5015793147299982823739128434681333601474761962890625p-170 * 1.8087429096606120193513334015733562409877777099609375p-603 == -1.35798546940546227546064983471296727657318115234375p-772
; [HW: -1.35798546940546227546064983471296727657318115234375p-772] 

; mpf : - 1612223226618492 -772
; mpfd: - 1612223226618492 -772 (-5.46687e-233) class: Neg. norm. non-zero
; hwf : - 1612223226618492 -772 (-5.46687e-233) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010101 #b1000000001100111100000001000000100011101100011010001)))
(assert (= y (fp #b0 #b00110100100 #b1100111100001001110001100111101111011101001111001111)))
(assert (= r (fp #b1 #b00011111011 #b0101101110100100111011111000101110001010001001111100)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
