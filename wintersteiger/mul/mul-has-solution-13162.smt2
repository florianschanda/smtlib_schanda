(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7165269490159740239931807082029990851879119873046875p-987 {- 3226950500589259 -987 (-1.31234e-297)}
; Y = 1.2905826282090113732436975624295882880687713623046875p927 {+ 1308667816122443 927 (1.46417e+279)}
; -1.7165269490159740239931807082029990851879119873046875p-987 * 1.2905826282090113732436975624295882880687713623046875p927 == -1.1076599306263157362906213165842927992343902587890625p-59
; [HW: -1.1076599306263157362906213165842927992343902587890625p-59] 

; mpf : - 484857223451409 -59
; mpfd: - 484857223451409 -59 (-1.92148e-018) class: Neg. norm. non-zero
; hwf : - 484857223451409 -59 (-1.92148e-018) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100100 #b1011011101101110010011110110010010111001111011001011)))
(assert (= y (fp #b0 #b11110011110 #b0100101001100011100111111000010011110001100001001011)))
(assert (= r (fp #b1 #b01111000100 #b0001101110001111100110011110100100100001001100010001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
