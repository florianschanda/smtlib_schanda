(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6450258212163018090024024786544032394886016845703125p300 {- 2904938048074085 300 (-3.35098e+090)}
; Y = -1.6185827912253056837244002963416278362274169921875p-726 {- 2785849228060088 -726 (-4.5852e-219)}
; -1.6450258212163018090024024786544032394886016845703125p300 * -1.6185827912253056837244002963416278362274169921875p-726 == 1.3313052426709910402990999500616453588008880615234375p-425
; [HW: 1.3313052426709910402990999500616453588008880615234375p-425] 

; mpf : + 1492066167438967 -425
; mpfd: + 1492066167438967 -425 (1.53649e-128) class: Pos. norm. non-zero
; hwf : + 1492066167438967 -425 (1.53649e-128) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101011 #b1010010100100000011010011000011100110011000101100101)))
(assert (= y (fp #b1 #b00100101001 #b1001111001011011011100010001101000101110010110111000)))
(assert (= r (fp #b0 #b01001010110 #b0101010011010000011010111001111001000011111001110111)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
