(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2778822852611195770577978692017495632171630859375p-37 {+ 1251470556354840 -37 (9.29782e-012)}
; Y = -1.2871960829957316274629874897073023021221160888671875p951 {- 1293416172361843 951 (-2.45003e+286)}
; 1.2778822852611195770577978692017495632171630859375p-37 * -1.2871960829957316274629874897073023021221160888671875p951 == -1.644885072117747260023179478594101965427398681640625p914
; [HW: -1.644885072117747260023179478594101965427398681640625p914] 

; mpf : - 2904304170486282 914
; mpfd: - 2904304170486282 914 (-2.27799e+275) class: Neg. norm. non-zero
; hwf : - 2904304170486282 914 (-2.27799e+275) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011010 #b0100011100100011010010110001111101010101100100011000)))
(assert (= y (fp #b1 #b11110110110 #b0100100110000101101011101011100000000001100001110011)))
(assert (= r (fp #b1 #b11110010001 #b1010010100010111001100000010011001101100101000001010)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
