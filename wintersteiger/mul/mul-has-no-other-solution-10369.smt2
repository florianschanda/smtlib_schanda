(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.646591459957227332466800362453795969486236572265625p65 {+ 2911989058124314 65 (6.07485e+019)}
; Y = -1.9664125883132530514529889842378906905651092529296875p-318 {- 4352335372613723 -318 (-3.68244e-096)}
; 1.646591459957227332466800362453795969486236572265625p65 * -1.9664125883132530514529889842378906905651092529296875p-318 == -1.6189390873344946530920651639462448656558990478515625p-252
; [HW: -1.6189390873344946530920651639462448656558990478515625p-252] 

; mpf : - 2787453843084665 -252
; mpfd: - 2787453843084665 -252 (-2.23703e-076) class: Neg. norm. non-zero
; hwf : - 2787453843084665 -252 (-2.23703e-076) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000000 #b1010010110000111000001001001011001100011101000011010)))
(assert (= y (fp #b1 #b01011000001 #b1111011101100110110100001011110100111111100001011011)))
(assert (= r (fp #b1 #b01100000011 #b1001111001110010110010101100001001010001010101111001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
