(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6804137902774283208628958163899369537830352783203125p567 {- 3064311292351173 567 (-8.11753e+170)}
; Y = -1.991427759175274925240728407516144216060638427734375p-626 {- 4464993686786534 -626 (-7.15134e-189)}
; -1.6804137902774283208628958163899369537830352783203125p567 * -1.991427759175274925240728407516144216060638427734375p-626 == 1.6732113344297048218578538580914027988910675048828125p-58
; [HW: 1.6732113344297048218578538580914027988910675048828125p-58] 

; mpf : + 3031874314879213 -58
; mpfd: + 3031874314879213 -58 (5.80512e-018) class: Pos. norm. non-zero
; hwf : + 3031874314879213 -58 (5.80512e-018) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110110 #b1010111000101111100110010010000011111101001011000101)))
(assert (= y (fp #b1 #b00110001101 #b1111110111001110001101011010101000000001000111100110)))
(assert (= r (fp #b0 #b01111000101 #b1010110001010111100100111111100010101100000011101101)))
(assert (= (fp.mul roundNearestTiesToEven x y) r))
(check-sat)
(exit)
