(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.884019163012993658412597142159938812255859375p-85 {- 3981268373133696 -85 (-4.87008e-026)}
; Y = 1.7606439255841792590473460222710855305194854736328125p-195 {+ 3425635699822541 -195 (3.50608e-059)}
; -1.884019163012993658412597142159938812255859375p-85 * 1.7606439255841792590473460222710855305194854736328125p-195 == -1.6585434475215083960364381709950976073741912841796875p-279
; [HW: -1.6585434475215083960364381709950976073741912841796875p-279] 

; mpf : - 2965816024865147 -279
; mpfd: - 2965816024865147 -279 (-1.70749e-084) class: Neg. norm. non-zero
; hwf : - 2965816024865147 -279 (-1.70749e-084) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101010 #b1110001001001111000101000111001000101101100110000000)))
(assert (= y (fp #b0 #b01100111100 #b1100001010111001100011110111000001001000111111001101)))
(assert (= r (fp #b1 #b01011101000 #b1010100010010110010011011010101000011001100101111011)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
