(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.23459726675356851188780638040043413639068603515625p-371 {+ 1056532163133508 -371 (2.56683e-112)}
; Y = -1.8150562323282015686487511629820801317691802978515625p-499 {- 3670686944199289 -499 (-1.10898e-150)}
; 1.23459726675356851188780638040043413639068603515625p-371 * -1.8150562323282015686487511629820801317691802978515625p-499 == -1.1204317317182137525577445558155886828899383544921875p-869
; [HW: -1.1204317317182137525577445558155886828899383544921875p-869] 

; mpf : - 542376302089731 -869
; mpfd: - 542376302089731 -869 (-2.84655e-262) class: Neg. norm. non-zero
; hwf : - 542376302089731 -869 (-2.84655e-262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010001100 #b0011110000001110100100010000010001110000000001000100)))
(assert (= y (fp #b1 #b01000001100 #b1101000010100111100001100111011001000000001001111001)))
(assert (= r (fp #b1 #b00010011010 #b0001111011010100100111010010110100100001011000000011)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
