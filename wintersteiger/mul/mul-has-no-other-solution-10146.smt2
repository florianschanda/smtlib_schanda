(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4979579997746330644048384783673100173473358154296875p-835 {- 2242603462231195 -835 (-6.53813e-252)}
; Y = 1.5967078543515567101707119945785962045192718505859375p-38 {+ 2687333270506719 -38 (5.80879e-012)}
; -1.4979579997746330644048384783673100173473358154296875p-835 * 1.5967078543515567101707119945785962045192718505859375p-38 == -1.1959006518644519356797673026449047029018402099609375p-872
; [HW: -1.1959006518644519356797673026449047029018402099609375p-872] 

; mpf : - 882258102738383 -872
; mpfd: - 882258102738383 -872 (-3.79786e-263) class: Neg. norm. non-zero
; hwf : - 882258102738383 -872 (-3.79786e-263) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111100 #b0111111101111010001011001110101111010000010010011011)))
(assert (= y (fp #b0 #b01111011001 #b1001100011000001110110001000111110110100110011011111)))
(assert (= r (fp #b1 #b00010010111 #b0011001000100110100010111000110100000101110111001111)))
(assert  (not (= (fp.mul roundTowardZero x y) r)))
(check-sat)
(exit)
