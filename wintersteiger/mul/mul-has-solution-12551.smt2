(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.99052041023811643327690035221166908740997314453125p386 {+ 4460907350451252 386 (3.13722e+116)}
; Y = 1.4708789530325818706302243299433030188083648681640625p424 {+ 2120650277414145 424 (6.37228e+127)}
; 1.99052041023811643327690035221166908740997314453125p386 * 1.4708789530325818706302243299433030188083648681640625p424 == 1.4639072885005128821234166025533340871334075927734375p811
; [HW: 1.4639072885005128821234166025533340871334075927734375p811] 

; mpf : + 2089252691625367 811
; mpfd: + 2089252691625367 811 (1.99913e+244) class: Pos. norm. non-zero
; hwf : + 2089252691625367 811 (1.99913e+244) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110000001 #b1111110110010010101111101101111111111110010000110100)))
(assert (= y (fp #b0 #b10110100111 #b0111100010001011100001011110011110100110010100000001)))
(assert (= r (fp #b0 #b11100101010 #b0111011011000010101000001100100001111100010110010111)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
