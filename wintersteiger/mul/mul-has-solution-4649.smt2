(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9079998570112841616008836354012601077556610107421875p193 {+ 4089267817688483 193 (2.39534e+058)}
; Y = 1.5439118924124108911399844146217219531536102294921875p-17 {+ 2449561395990915 -17 (1.17791e-005)}
; 1.9079998570112841616008836354012601077556610107421875p193 * 1.5439118924124108911399844146217219531536102294921875p-17 == 1.4728918349804505094624573757755570113658905029296875p177
; [HW: 1.4728918349804505094624573757755570113658905029296875p177] 

; mpf : + 2129715491804507 177
; mpfd: + 2129715491804507 177 (2.8215e+053) class: Pos. norm. non-zero
; hwf : + 2129715491804507 177 (2.8215e+053) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011000000 #b1110100001110010101011011011101010100010110110100011)))
(assert (= y (fp #b0 #b01111101110 #b1000101100111101110011110100110111010001000110000011)))
(assert (= r (fp #b0 #b10010110000 #b0111100100001111011100000111010111001001010101011011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
