(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.921937484749682401030668188468553125858306884765625p1022 {- 4152037312777562 1022 (-8.63763e+307)}
; Y = 1.7031906556463447532934196715359576046466827392578125p-704 {+ 3166889174739293 -704 (2.0237e-212)}
; -1.921937484749682401030668188468553125858306884765625p1022 * 1.7031906556463447532934196715359576046466827392578125p-704 == -1.6367129823810493416402778166229836642742156982421875p319
; [HW: -1.6367129823810493416402778166229836642742156982421875p319] 

; mpf : - 2867500350193251 319
; mpfd: - 2867500350193251 319 (-1.748e+096) class: Neg. norm. non-zero
; hwf : - 2867500350193251 319 (-1.748e+096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111111101 #b1110110000000100000110000101000111110100110101011010)))
(assert (= y (fp #b0 #b00100111111 #b1011010000000100010011011000010011011010100101011101)))
(assert (= r (fp #b1 #b10100111110 #b1010001011111111100111110011110001000011111001100011)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
