(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.090928635503812582641103290370665490627288818359375p-695 {+ 409506168972278 -695 (6.63666e-210)}
; Y = 1.339518932644899518180636732722632586956024169921875p997 {+ 1529057338544798 997 (1.79413e+300)}
; 1.090928635503812582641103290370665490627288818359375p-695 * 1.339518932644899518180636732722632586956024169921875p997 == 1.4613195614218235096615217116777785122394561767578125p302
; [HW: 1.4613195614218235096615217116777785122394561767578125p302] 

; mpf : + 2077598604918045 302
; mpfd: + 2077598604918045 302 (1.1907e+091) class: Pos. norm. non-zero
; hwf : + 2077598604918045 302 (1.1907e+091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001000 #b0001011101000111000110010101101111000010001111110110)))
(assert (= y (fp #b0 #b11111100100 #b0101011011101010101101100111100000010101001010011110)))
(assert (= r (fp #b0 #b10100101101 #b0111011000011001000010011110110101001111110100011101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
