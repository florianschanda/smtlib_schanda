(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2164006079052789299765890973503701388835906982421875p63 {+ 974581697124963 63 (1.12193e+019)}
; Y = -1.790758656210770904948503812192939221858978271484375p163 {- 3561260389450822 163 (-2.09376e+049)}
; 1.2164006079052789299765890973503701388835906982421875p63 * -1.790758656210770904948503812192939221858978271484375p163 == -1.0891399590132111452334129353403113782405853271484375p227
; [HW: -1.0891399590132111452334129353403113782405853271484375p227] 

; mpf : - 401450686195719 227
; mpfd: - 401450686195719 227 (-2.34905e+068) class: Neg. norm. non-zero
; hwf : - 401450686195719 227 (-2.34905e+068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000111110 #b0011011101100110000001111011110111001001101001100011)))
(assert (= y (fp #b1 #b10010100010 #b1100101001101111001010001100011101110100010001000110)))
(assert (= r (fp #b1 #b10011100010 #b0001011011010001111000000101100010111010100000000111)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
