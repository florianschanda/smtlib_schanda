(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.140014250106241799898043609573505818843841552734375p-700 {+ 630568124605030 -700 (2.16727e-211)}
; Y = -1.4188859230190009608207901692367158830165863037109375p-739 {- 1886494486819119 -739 (-4.9066e-223)}
; 1.140014250106241799898043609573505818843841552734375p-700 * -1.4188859230190009608207901692367158830165863037109375p-739 == -0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: -0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : - 1 -1023
; mpfd: - 1 -1023 (-4.94066e-324) class: Neg. denorm.
; hwf : - 1 -1023 (-4.94066e-324) class: Neg. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000011 #b0010001111010111111110010101000100101110001001100110)))
(assert (= y (fp #b1 #b00100011100 #b0110101100111100000110111001110000011111000100101111)))
(assert (= r (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
