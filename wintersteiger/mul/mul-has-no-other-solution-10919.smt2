(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6942687986696298718669595473329536616802215576171875p-751 {- 3126708702983507 -751 (-1.43039e-226)}
; Y = -1.51942584978902406334100305684842169284820556640625p1003 {- 2339286063556452 1003 (-1.30246e+302)}
; -1.6942687986696298718669595473329536616802215576171875p-751 * -1.51942584978902406334100305684842169284820556640625p1003 == 1.2871579045948158270817884840653277933597564697265625p253
; [HW: 1.2871579045948158270817884840653277933597564697265625p253] 

; mpf : + 1293244232129705 253
; mpfd: + 1293244232129705 253 (1.86303e+076) class: Pos. norm. non-zero
; hwf : + 1293244232129705 253 (1.86303e+076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100010000 #b1011000110111011100110011001100011101011010101010011)))
(assert (= y (fp #b1 #b11111101010 #b1000010011111001000101111010110110001010011101100100)))
(assert (= r (fp #b0 #b10011111100 #b0100100110000011001011100011000100000101110010101001)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
