(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7445740901122508414999856540816836059093475341796875p-375 {- 3353263594779259 -375 (-2.26695e-113)}
; Y = 1.593749985757231701910541232791729271411895751953125p-422 {+ 2674012214607506 -422 (1.47151e-127)}
; -1.7445740901122508414999856540816836059093475341796875p-375 * 1.593749985757231701910541232791729271411895751953125p-422 == -1.3902074656344176606381779492949135601520538330078125p-796
; [HW: -1.3902074656344176606381779492949135601520538330078125p-796] 

; mpf : - 1757338196828349 -796
; mpfd: - 1757338196828349 -796 (-3.33582e-240) class: Neg. norm. non-zero
; hwf : - 1757338196828349 -796 (-3.33582e-240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010001000 #b1011111010011100011010000101011001111011001001111011)))
(assert (= y (fp #b0 #b01001011001 #b1001011111111111111111111100001011010011111010010010)))
(assert (= r (fp #b1 #b00011100011 #b0110001111100100101000101110111110001110000010111101)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
