(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7951544863638353444201811726088635623455047607421875p-422 {+ 3581057448490147 -422 (1.65746e-127)}
; Y = -1.3038195201032019010511930900975130498409271240234375p-506 {- 1368281477524663 -506 (-6.22357e-153)}
; 1.7951544863638353444201811726088635623455047607421875p-422 * -1.3038195201032019010511930900975130498409271240234375p-506 == -1.1702787304610027252493864580173976719379425048828125p-927
; [HW: -1.1702787304610027252493864580173976719379425048828125p-927] 

; mpf : - 766867227053293 -927
; mpfd: - 766867227053293 -927 (-1.03153e-279) class: Neg. norm. non-zero
; hwf : - 766867227053293 -927 (-1.03153e-279) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001011001 #b1100101110001111001111101001001000110011010010100011)))
(assert (= y (fp #b1 #b01000000101 #b0100110111000111000111011011011010111010110010110111)))
(assert (= r (fp #b1 #b00001100000 #b0010101110010111011000110000101010001000110011101101)))
(assert (= (fp.mul roundTowardZero x y) r))
(check-sat)
(exit)
