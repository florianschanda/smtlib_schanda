(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.11918138948676215704836067743599414825439453125p195 {- 536745261282080 195 (-5.62017e+058)}
; Y = -1.7390780082712160581337457188055850565433502197265625p406 {- 3328511442647977 406 (-2.87407e+122)}
; -1.11918138948676215704836067743599414825439453125p195 * -1.7390780082712160581337457188055850565433502197265625p406 == 1.9463437417228506287614209213643334805965423583984375p601
; [HW: 1.9463437417228506287614209213643334805965423583984375p601] 

; mpf : + 4261953322587431 601
; mpfd: + 4261953322587431 601 (1.61528e+181) class: Pos. norm. non-zero
; hwf : + 4261953322587431 601 (1.61528e+181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011000010 #b0001111010000010101010111110101000100011001100100000)))
(assert (= y (fp #b1 #b10110010101 #b1011110100110100001101110110001010110111101110101001)))
(assert (= r (fp #b0 #b11001011000 #b1111001001000011100101010101110101111001010100100111)))
(assert  (not (= (fp.mul roundTowardPositive x y) r)))
(check-sat)
(exit)
