(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.975161742559066180291438286076299846172332763671875p-474 {- 4391738060414974 -474 (-4.04934e-143)}
; Y = 1.8034257728215921101622143396525643765926361083984375p893 {+ 3618308011099175 893 (1.19092e+269)}
; -1.975161742559066180291438286076299846172332763671875p-474 * 1.8034257728215921101622143396525643765926361083984375p893 == -1.7810287960111133021001705856178887188434600830078125p420
; [HW: -1.7810287960111133021001705856178887188434600830078125p420] 

; mpf : - 3517440994681277 420
; mpfd: - 3517440994681277 420 (-4.82247e+126) class: Neg. norm. non-zero
; hwf : - 3517440994681277 420 (-4.82247e+126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000100101 #b1111100110100100001100110011000010011001111111111110)))
(assert (= y (fp #b0 #b11101111100 #b1100110110101101010011111011101100001000010000100111)))
(assert (= r (fp #b1 #b10110100011 #b1100011111110001100000001101000000011010000110111101)))
(assert (= (fp.mul roundTowardNegative x y) r))
(check-sat)
(exit)
