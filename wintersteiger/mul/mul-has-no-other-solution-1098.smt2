(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.842234106451014152838752124807797372341156005859375p649 {- 3793085207971510 649 (-4.3034e+195)}
; Y = 1.9803973140283510634418462359462864696979522705078125p-183 {+ 4415316978133117 -183 (1.61534e-055)}
; -1.842234106451014152838752124807797372341156005859375p649 * 1.9803973140283510634418462359462864696979522705078125p-183 == -1.824177738113503810524207437993027269840240478515625p467
; [HW: -1.824177738113503810524207437993027269840240478515625p467] 

; mpf : - 3711766554255034 467
; mpfd: - 3711766554255034 467 (-6.95145e+140) class: Neg. norm. non-zero
; hwf : - 3711766554255034 467 (-6.95145e+140) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001000 #b1101011110011100101001111000011011001000011010110110)))
(assert (= y (fp #b0 #b01101001000 #b1111101011111011010100011000000011010110100001111101)))
(assert (= r (fp #b1 #b10111010010 #b1101001011111101010011111110111101001001111010111010)))
(assert  (not (= (fp.mul roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
