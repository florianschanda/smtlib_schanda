(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7515287724699233340430737371207214891910552978515625p387 {- 3384584699653753 387 (-5.5211e+116)}
; Y = -1.509296653652727027150604044436477124691009521484375p-928 {- 2293668219611462 -928 (-6.65179e-280)}
; -1.7515287724699233340430737371207214891910552978515625p387 * -1.509296653652727027150604044436477124691009521484375p-928 == 1.321788257532662047566418550559319555759429931640625p-540
; [HW: 1.321788257532662047566418550559319555759429931640625p-540] 

; mpf : + 1449205476716298 -540
; mpfd: + 1449205476716298 -540 (3.67252e-163) class: Pos. norm. non-zero
; hwf : + 1449205476716298 -540 (3.67252e-163) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110000010 #b1100000001100100001100001000101111000010111001111001)))
(assert (= y (fp #b1 #b00001011111 #b1000001001100001010000111111011101100110100101000110)))
(assert (= r (fp #b0 #b00111100011 #b0101001001100000101101110001101001010110111100001010)))
(assert (= (fp.mul roundTowardPositive x y) r))
(check-sat)
(exit)
