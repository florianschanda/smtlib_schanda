(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8923098010477577002319549137610010802745819091796875p141 {+ 4018606087497723 141 (5.27499e+042)}
; Y = 1.3990918932408236141640145433484576642513275146484375p-416 {+ 1797350101685959 -416 (8.26738e-126)}
; 1.8923098010477577002319549137610010802745819091796875p141 * 1.3990918932408236141640145433484576642513275146484375p-416 == 1.3237576510730366674550850802916102111339569091796875p-274
; [HW: 1.3237576510730366674550850802916102111339569091796875p-274] 

; mpf : + 1458074836730875 -274
; mpfd: + 1458074836730875 -274 (4.36104e-083) class: Pos. norm. non-zero
; hwf : + 1458074836730875 -274 (4.36104e-083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010001100 #b1110010001101110011010100100010101100110011111111011)))
(assert (= y (fp #b0 #b01001011111 #b0110011000101010111000101110010110010001011011000111)))
(assert (= r (fp #b0 #b01011101101 #b0101001011100001110010000000101100110000001111111011)))
(assert  (not (= (fp.mul roundTowardNegative x y) r)))
(check-sat)
(exit)
