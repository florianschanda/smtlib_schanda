(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6630870587029582541305217091576196253299713134765625p-581 {- 2986278630488841 -581 (-2.1013e-175)}
; Y = 1.26796805799946721293736118241213262081146240234375p347 {+ 1206820846153596 347 (3.6351e+104)}
; -1.6630870587029582541305217091576196253299713134765625p-581 % 1.26796805799946721293736118241213262081146240234375p347 == -1.6630870587029582541305217091576196253299713134765625p-581
; [HW: -1.6630870587029582541305217091576196253299713134765625p-581] 

; mpf : - 2986278630488841 -581
; mpfd: - 2986278630488841 -581 (-2.1013e-175) class: Neg. norm. non-zero
; hwf : - 2986278630488841 -581 (-2.1013e-175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111010 #b1010100111000000000100101100111110000111101100001001)))
(assert (= y (fp #b0 #b10101011010 #b0100010010011001100011011111110101111010111101111100)))
(assert (= r (fp #b1 #b00110111010 #xa9c012cf87b09)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
