(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1525232198739601141568300590733997523784637451171875p-157 {- 686903516189715 -157 (-6.30871e-048)}
; Y = 1.815562337403182624484543339349329471588134765625p185 {+ 3672966238826384 185 (8.90349e+055)}
; -1.1525232198739601141568300590733997523784637451171875p-157 % 1.815562337403182624484543339349329471588134765625p185 == -1.1525232198739601141568300590733997523784637451171875p-157
; [HW: -1.1525232198739601141568300590733997523784637451171875p-157] 

; mpf : - 686903516189715 -157
; mpfd: - 686903516189715 -157 (-6.30871e-048) class: Neg. norm. non-zero
; hwf : - 686903516189715 -157 (-6.30871e-048) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101100010 #b0010011100001011110000110000000100111101010000010011)))
(assert (= y (fp #b0 #b10010111000 #b1101000011001000101100010111111011111110111110010000)))
(assert (= r (fp #b1 #b01101100010 #x270bc3013d413)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
