(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0951802941657293732902189731248654425144195556640625p-294 {- 428653937337793 -294 (-3.44086e-089)}
; Y = 1.7660551079664454920958860384416766464710235595703125p131 {+ 3450005498782949 131 (4.80766e+039)}
; -1.0951802941657293732902189731248654425144195556640625p-294 % 1.7660551079664454920958860384416766464710235595703125p131 == -1.0951802941657293732902189731248654425144195556640625p-294
; [HW: -1.0951802941657293732902189731248654425144195556640625p-294] 

; mpf : - 428653937337793 -294
; mpfd: - 428653937337793 -294 (-3.44086e-089) class: Neg. norm. non-zero
; hwf : - 428653937337793 -294 (-3.44086e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011001 #b0001100001011101101111000101101010101010010111000001)))
(assert (= y (fp #b0 #b10010000010 #b1100010000011100001100000000001110100110010011100101)))
(assert (= r (fp #b1 #b01011011001 #x185dbc5aaa5c1)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
