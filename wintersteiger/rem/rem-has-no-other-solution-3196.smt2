(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.75048269282922586143058651941828429698944091796875p-1017 {- 3379873575773708 -1017 (-1.24639e-306)}
; Y = 1.903954992180903804666058931616134941577911376953125p-530 {+ 4071051365945618 -530 (5.417e-160)}
; -1.75048269282922586143058651941828429698944091796875p-1017 % 1.903954992180903804666058931616134941577911376953125p-530 == -1.75048269282922586143058651941828429698944091796875p-1017
; [HW: -1.75048269282922586143058651941828429698944091796875p-1017] 

; mpf : - 3379873575773708 -1017
; mpfd: - 3379873575773708 -1017 (-1.24639e-306) class: Neg. norm. non-zero
; hwf : - 3379873575773708 -1017 (-1.24639e-306) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000110 #b1100000000011111101000100011110111101010011000001100)))
(assert (= y (fp #b0 #b00111101101 #b1110011101101001100110000010100001111001000100010010)))
(assert (= r (fp #b1 #b00000000110 #xc01fa23dea60c)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
