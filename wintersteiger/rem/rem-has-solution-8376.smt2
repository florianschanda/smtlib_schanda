(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1901813206654294763353618691326119005680084228515625p-525 {- 856500524881657 -525 (-1.08359e-158)}
; Y = 1.1790305497880344542949160313582979142665863037109375p775 {+ 806281917313327 775 (2.343e+233)}
; -1.1901813206654294763353618691326119005680084228515625p-525 % 1.1790305497880344542949160313582979142665863037109375p775 == -1.1901813206654294763353618691326119005680084228515625p-525
; [HW: -1.1901813206654294763353618691326119005680084228515625p-525] 

; mpf : - 856500524881657 -525
; mpfd: - 856500524881657 -525 (-1.08359e-158) class: Neg. norm. non-zero
; hwf : - 856500524881657 -525 (-1.08359e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110010 #b0011000010101111101110010001100010010001011011111001)))
(assert (= y (fp #b0 #b11100000110 #b0010110111010100111100100011010001010011000100101111)))
(assert (= r (fp #b1 #b00111110010 #x30afb918916f9)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
