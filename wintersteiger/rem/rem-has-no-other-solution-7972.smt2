(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5398805699067061869556027886574156582355499267578125p71 {- 2431405933456413 71 (-3.63594e+021)}
; Y = -1.0736866239638251929733314682380296289920806884765625p392 {- 331855052225673 392 (-1.08302e+118)}
; -1.5398805699067061869556027886574156582355499267578125p71 % -1.0736866239638251929733314682380296289920806884765625p392 == -1.5398805699067061869556027886574156582355499267578125p71
; [HW: -1.5398805699067061869556027886574156582355499267578125p71] 

; mpf : - 2431405933456413 71
; mpfd: - 2431405933456413 71 (-3.63594e+021) class: Neg. norm. non-zero
; hwf : - 2431405933456413 71 (-3.63594e+021) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000110 #b1000101000110101100111001110111101111110110000011101)))
(assert (= y (fp #b1 #b10110000111 #b0001001011011101001000000110100000010011110010001001)))
(assert (= r (fp #b1 #b10001000110 #x8a359cef7ec1d)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
