(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9457041175775866559405358202639035880565643310546875p621 {+ 4259072711525163 621 (1.69318e+187)}
; Y = 1.363058501737560934685689062462188303470611572265625p-859 {+ 1635070133138970 -859 (3.54608e-259)}
; 1.9457041175775866559405358202639035880565643310546875p621 % 1.363058501737560934685689062462188303470611572265625p-859 == 1.045929796543315859480571816675364971160888671875p-862
; [HW: 1.045929796543315859480571816675364971160888671875p-862] 

; mpf : + 206849414597680 -862
; mpfd: + 206849414597680 -862 (3.40131e-260) class: Pos. norm. non-zero
; hwf : + 206849414597680 -862 (3.40131e-260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001101100 #b1111001000011001101010100100000010110000001100101011)))
(assert (= y (fp #b0 #b00010100100 #b0101110011110001011001101110011101111111011000011010)))
(assert (= r (fp #b0 #b00010100001 #x0bc20e1e10c30)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
