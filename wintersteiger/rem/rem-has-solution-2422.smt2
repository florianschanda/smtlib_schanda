(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2855336005344819572115966366254724562168121337890625p327 {- 1285929016968849 327 (-3.51473e+098)}
; Y = 1.92957933524588387541598422103561460971832275390625p-626 {+ 4186453147824676 -626 (6.92924e-189)}
; -1.2855336005344819572115966366254724562168121337890625p327 % 1.92957933524588387541598422103561460971832275390625p-626 == -1.53683280392955534665588857023976743221282958984375p-626
; [HW: -1.53683280392955534665588857023976743221282958984375p-626] 

; mpf : - 2417680015737404 -626
; mpfd: - 2417680015737404 -626 (-5.51886e-189) class: Neg. norm. non-zero
; hwf : - 2417680015737404 -626 (-5.51886e-189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000110 #b0100100100011000101110101110010000110100011010010001)))
(assert (= y (fp #b0 #b00110001101 #b1110110111111000111010010100101111101011001000100100)))
(assert (= r (fp #b0 #b00110001011 #x922c258e7bfa0)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
