(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.216424106703324792277953747543506324291229248046875p-683 {+ 974687526303086 -683 (3.03108e-206)}
; Y = 1.7341380841767060072555750593892298638820648193359375p176 {+ 3306264002336703 176 (1.66097e+053)}
; 1.216424106703324792277953747543506324291229248046875p-683 % 1.7341380841767060072555750593892298638820648193359375p176 == 1.216424106703324792277953747543506324291229248046875p-683
; [HW: 1.216424106703324792277953747543506324291229248046875p-683] 

; mpf : + 974687526303086 -683
; mpfd: + 974687526303086 -683 (3.03108e-206) class: Pos. norm. non-zero
; hwf : + 974687526303086 -683 (3.03108e-206) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101010100 #b0011011101100111100100011111110001011011010101101110)))
(assert (= y (fp #b0 #b10010101111 #b1011101111110000011110010011011001001001011110111111)))
(assert (= r (fp #b0 #b00101010100 #x376791fc5b56e)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
