(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3427234572693522718367376000969670712947845458984375p772 {- 1543489234449383 772 (-3.33536e+232)}
; Y = 1.081862294007155167463452016818337142467498779296875p854 {+ 368674996786318 854 (1.29954e+257)}
; -1.3427234572693522718367376000969670712947845458984375p772 % 1.081862294007155167463452016818337142467498779296875p854 == -1.3427234572693522718367376000969670712947845458984375p772
; [HW: -1.3427234572693522718367376000969670712947845458984375p772] 

; mpf : - 1543489234449383 772
; mpfd: - 1543489234449383 772 (-3.33536e+232) class: Neg. norm. non-zero
; hwf : - 1543489234449383 772 (-3.33536e+232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000011 #b0101011110111100101110010111100010001011001111100111)))
(assert (= y (fp #b0 #b11101010101 #b0001010011110100111011010110001110001001010010001110)))
(assert (= r (fp #b1 #b11100000011 #x57bcb9788b3e7)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
