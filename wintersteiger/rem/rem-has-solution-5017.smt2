(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0511014446003532629703158818301744759082794189453125p-342 {- 230140446860245 -342 (-1.17324e-103)}
; Y = 1.842892175647695029994110882398672401905059814453125p428 {+ 3796048888160466 428 (1.27743e+129)}
; -1.0511014446003532629703158818301744759082794189453125p-342 % 1.842892175647695029994110882398672401905059814453125p428 == -1.0511014446003532629703158818301744759082794189453125p-342
; [HW: -1.0511014446003532629703158818301744759082794189453125p-342] 

; mpf : - 230140446860245 -342
; mpfd: - 230140446860245 -342 (-1.17324e-103) class: Neg. norm. non-zero
; hwf : - 230140446860245 -342 (-1.17324e-103) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010101001 #b0000110100010100111110111111100101010110001111010101)))
(assert (= y (fp #b0 #b10110101011 #b1101011111000111110010000001100001110110000011010010)))
(assert (= r (fp #b1 #b01010101001 #x0d14fbf9563d5)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
