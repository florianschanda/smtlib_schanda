(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2876523919142404128734824553248472511768341064453125p-9 {+ 1295471205037205 -9 (0.00251495)}
; Y = 1.667316583216283287782744082505814731121063232421875p-253 {+ 3005326715511006 -253 (1.15194e-076)}
; 1.2876523919142404128734824553248472511768341064453125p-9 % 1.667316583216283287782744082505814731121063232421875p-253 == 1.146313852646347442032492836005985736846923828125p-255
; [HW: 1.146313852646347442032492836005985736846923828125p-255] 

; mpf : + 658939012257232 -255
; mpfd: + 658939012257232 -255 (1.97995e-077) class: Pos. norm. non-zero
; hwf : + 658939012257232 -255 (1.97995e-077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111110110 #b0100100110100011100101100100111111100011010010010101)))
(assert (= y (fp #b0 #b01100000010 #b1010101011010101010000100111010011111110000011011110)))
(assert (= r (fp #b0 #b01100000000 #x2574d31c115d0)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
