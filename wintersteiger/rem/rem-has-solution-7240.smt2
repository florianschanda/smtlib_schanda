(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3195676214280209759266426772228442132472991943359375p-621 {+ 1439204620782911 -621 (1.51637e-187)}
; Y = -1.2576216055053972553423591307364404201507568359375p47 {- 1160224566556696 47 (-1.76995e+014)}
; 1.3195676214280209759266426772228442132472991943359375p-621 % -1.2576216055053972553423591307364404201507568359375p47 == 1.3195676214280209759266426772228442132472991943359375p-621
; [HW: 1.3195676214280209759266426772228442132472991943359375p-621] 

; mpf : + 1439204620782911 -621
; mpfd: + 1439204620782911 -621 (1.51637e-187) class: Pos. norm. non-zero
; hwf : + 1439204620782911 -621 (1.51637e-187) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010010 #b0101000111001111001011110000001011100100110100111111)))
(assert (= y (fp #b1 #b10000101110 #b0100000111110011011111010101001001100011100000011000)))
(assert (= r (fp #b0 #b00110010010 #x51cf2f02e4d3f)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
