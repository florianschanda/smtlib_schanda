(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0634187751973798174986995945801027119159698486328125p-618 {+ 285612772347213 -618 (9.77613e-187)}
; Y = 1.178529600915598773980264013516716659069061279296875p159 {+ 804025844158094 159 (8.61211e+047)}
; 1.0634187751973798174986995945801027119159698486328125p-618 % 1.178529600915598773980264013516716659069061279296875p159 == 1.0634187751973798174986995945801027119159698486328125p-618
; [HW: 1.0634187751973798174986995945801027119159698486328125p-618] 

; mpf : + 285612772347213 -618
; mpfd: + 285612772347213 -618 (9.77613e-187) class: Pos. norm. non-zero
; hwf : + 285612772347213 -618 (9.77613e-187) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110010101 #b0001000000111100001101100111110101101100110101001101)))
(assert (= y (fp #b0 #b10010011110 #b0010110110110100000111011010110101001100111010001110)))
(assert (= r (fp #b0 #b00110010101 #x103c367d6cd4d)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
