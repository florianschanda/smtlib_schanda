(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9866227743594968568885406057233922183513641357421875p570 {+ 4443353958960675 570 (7.67738e+171)}
; Y = 1.0720574959152420202457278719521127641201019287109375p665 {+ 324518111753135 665 (1.64121e+200)}
; 1.9866227743594968568885406057233922183513641357421875p570 % 1.0720574959152420202457278719521127641201019287109375p665 == 1.9866227743594968568885406057233922183513641357421875p570
; [HW: 1.9866227743594968568885406057233922183513641357421875p570] 

; mpf : + 4443353958960675 570
; mpfd: + 4443353958960675 570 (7.67738e+171) class: Pos. norm. non-zero
; hwf : + 4443353958960675 570 (7.67738e+171) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000111001 #b1111110010010011010011110110010101011100111000100011)))
(assert (= y (fp #b0 #b11010011000 #b0001001001110010010111000010110001100011001110101111)))
(assert (= r (fp #b0 #b11000111001 #xfc934f655ce23)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
