(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.607582789527148836583592128590680658817291259765625p-699 {- 2736309624511194 -699 (-6.11232e-211)}
; Y = -1.0975246175422401773147385029005818068981170654296875p226 {- 439211831222683 226 (-1.18357e+068)}
; -1.607582789527148836583592128590680658817291259765625p-699 % -1.0975246175422401773147385029005818068981170654296875p226 == -1.607582789527148836583592128590680658817291259765625p-699
; [HW: -1.607582789527148836583592128590680658817291259765625p-699] 

; mpf : - 2736309624511194 -699
; mpfd: - 2736309624511194 -699 (-6.11232e-211) class: Neg. norm. non-zero
; hwf : - 2736309624511194 -699 (-6.11232e-211) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000100 #b1001101110001010100010111011001010100001101011011010)))
(assert (= y (fp #b1 #b10011100001 #b0001100011110111010111111001001011100110000110011011)))
(assert (= r (fp #b1 #b00101000100 #x9b8a8bb2a1ada)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
