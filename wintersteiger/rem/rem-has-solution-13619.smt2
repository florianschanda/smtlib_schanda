(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4704288436281502949753985376446507871150970458984375p-654 {- 2118623164868071 -654 (-1.9671e-197)}
; Y = 1.8029845744582775335373980851727537810802459716796875p824 {+ 3616321030314555 824 (2.01701e+248)}
; -1.4704288436281502949753985376446507871150970458984375p-654 % 1.8029845744582775335373980851727537810802459716796875p824 == -1.4704288436281502949753985376446507871150970458984375p-654
; [HW: -1.4704288436281502949753985376446507871150970458984375p-654] 

; mpf : - 2118623164868071 -654
; mpfd: - 2118623164868071 -654 (-1.9671e-197) class: Neg. norm. non-zero
; hwf : - 2118623164868071 -654 (-1.9671e-197) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101110001 #b0111100001101110000001100101001001111010010111100111)))
(assert (= y (fp #b0 #b11100110111 #b1100110110010000011001011010011001111101101000111011)))
(assert (= r (fp #b1 #b00101110001 #x786e06527a5e7)))
(assert (= (fp.rem x y) r))
(check-sat)
(exit)
