(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2798681512742968724438696881406940519809722900390625p-181 {+ 1260414101791793 -181 (4.17576e-055)}
; Y = 1.633328212961746572773336083628237247467041015625p277 {+ 2852256703897744 277 (3.96627e+083)}
; 1.2798681512742968724438696881406940519809722900390625p-181 % 1.633328212961746572773336083628237247467041015625p277 == 1.2798681512742968724438696881406940519809722900390625p-181
; [HW: 1.2798681512742968724438696881406940519809722900390625p-181] 

; mpf : + 1260414101791793 -181
; mpfd: + 1260414101791793 -181 (4.17576e-055) class: Pos. norm. non-zero
; hwf : + 1260414101791793 -181 (4.17576e-055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001010 #b0100011110100101011100000110110011101010010000110001)))
(assert (= y (fp #b0 #b10100010100 #b1010001000100001110011000011101001001110000010010000)))
(assert (= r (fp #b0 #b01101001010 #x47a5706cea431)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
