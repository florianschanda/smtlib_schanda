(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8703015997059939667934713725117035210132598876953125p867 {+ 3919489960135861 867 (1.84042e+261)}
; Y = -1.62772853886492629982285507139749825000762939453125p929 {- 2827038013721908 929 (-7.38666e+279)}
; 1.8703015997059939667934713725117035210132598876953125p867 % -1.62772853886492629982285507139749825000762939453125p929 == 1.8703015997059939667934713725117035210132598876953125p867
; [HW: 1.8703015997059939667934713725117035210132598876953125p867] 

; mpf : + 3919489960135861 867
; mpfd: + 3919489960135861 867 (1.84042e+261) class: Pos. norm. non-zero
; hwf : + 3919489960135861 867 (1.84042e+261) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101100010 #b1101111011001100000101011110110001100100110010110101)))
(assert (= y (fp #b1 #b11110100000 #b1010000010110010110100010100100100110000110100110100)))
(assert (= r (fp #b0 #b11101100010 #xdecc15ec64cb5)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
