(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.167345188747717532606884560664184391498565673828125p-781 {+ 753655729686466 -781 (9.17852e-236)}
; Y = 1.5858432810431681847518348149606026709079742431640625p-486 {+ 2638403582203521 -486 (7.93748e-147)}
; 1.167345188747717532606884560664184391498565673828125p-781 % 1.5858432810431681847518348149606026709079742431640625p-486 == 1.167345188747717532606884560664184391498565673828125p-781
; [HW: 1.167345188747717532606884560664184391498565673828125p-781] 

; mpf : + 753655729686466 -781
; mpfd: + 753655729686466 -781 (9.17852e-236) class: Pos. norm. non-zero
; hwf : + 753655729686466 -781 (9.17852e-236) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011110010 #b0010101011010111001000100110000011010000011111000010)))
(assert (= y (fp #b0 #b01000011001 #b1001010111111001110100110100010010101001011010000001)))
(assert (= r (fp #b0 #b00011110010 #x2ad72260d07c2)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
