(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2536774705821136510763835758552886545658111572265625p944 {- 1142461761985897 944 (-1.86424e+284)}
; Y = 1.7865250070639524526683317162678577005863189697265625p766 {+ 3542193728730793 766 (6.93403e+230)}
; -1.2536774705821136510763835758552886545658111572265625p944 % 1.7865250070639524526683317162678577005863189697265625p766 == -1.748032140880508844560381476185284554958343505859375p766
; [HW: -1.748032140880508844560381476185284554958343505859375p766] 

; mpf : - 3368837270930614 766
; mpfd: - 3368837270930614 766 (-6.78463e+230) class: Neg. norm. non-zero
; hwf : - 3368837270930614 766 (-6.78463e+230) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110101111 #b0100000011110001000000011011011111100001110101101001)))
(assert (= y (fp #b0 #b11011111101 #b1100100101011001101100111110111011010011011010101001)))
(assert (= r (fp #b0 #b11011111000 #x3b55642c63e60)))
(assert  (not (= (fp.rem x y) r)))
(check-sat)
(exit)
