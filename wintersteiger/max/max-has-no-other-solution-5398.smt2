(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3779955096522427115957043497473932802677154541015625p492 {- 1702340436417561 492 (-1.762e+148)}
; Y = 1.6209399343362405065960274441749788820743560791015625p842 {+ 2796464856896153 842 (4.75361e+253)}
; -1.3779955096522427115957043497473932802677154541015625p492 M 1.6209399343362405065960274441749788820743560791015625p842 == 1.6209399343362405065960274441749788820743560791015625p842
; [HW: 1.6209399343362405065960274441749788820743560791015625p842] 

; mpf : + 2796464856896153 842
; mpfd: + 2796464856896153 842 (4.75361e+253) class: Pos. norm. non-zero
; hwf : + 2796464856896153 842 (4.75361e+253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101011 #b0110000011000100010100000100111111111101110000011001)))
(assert (= y (fp #b0 #b11101001001 #b1001111011110101111010110110011011000001001010011001)))
(assert (= r (fp #b0 #b11101001001 #b1001111011110101111010110110011011000001001010011001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
