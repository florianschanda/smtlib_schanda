(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.159923967701021130238814293988980352878570556640625p-40 {+ 720233521345930 -40 (1.05494e-012)}
; Y = -1.95105431481856950171049902564845979213714599609375p321 {- 4283167857826012 321 (-8.33485e+096)}
; 1.159923967701021130238814293988980352878570556640625p-40 M -1.95105431481856950171049902564845979213714599609375p321 == 1.159923967701021130238814293988980352878570556640625p-40
; [HW: 1.159923967701021130238814293988980352878570556640625p-40] 

; mpf : + 720233521345930 -40
; mpfd: + 720233521345930 -40 (1.05494e-012) class: Pos. norm. non-zero
; hwf : + 720233521345930 -40 (1.05494e-012) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010111 #b0010100011110000110001101111001100011111010110001010)))
(assert (= y (fp #b1 #b10101000000 #b1111001101111000010010111010101011011101100011011100)))
(assert (= r (fp #b0 #b01111010111 #b0010100011110000110001101111001100011111010110001010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
