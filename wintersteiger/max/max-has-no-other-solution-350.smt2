(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.983398435773807033655202758382074534893035888671875p709 {- 4428832828907646 709 (-5.34167e+213)}
; Y = -1.0938931921584214013165592405130155384540557861328125p791 {- 422857345217293 791 (-1.42463e+238)}
; -1.983398435773807033655202758382074534893035888671875p709 M -1.0938931921584214013165592405130155384540557861328125p791 == -1.983398435773807033655202758382074534893035888671875p709
; [HW: -1.983398435773807033655202758382074534893035888671875p709] 

; mpf : - 4428832828907646 709
; mpfd: - 4428832828907646 709 (-5.34167e+213) class: Neg. norm. non-zero
; hwf : - 4428832828907646 709 (-5.34167e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011000100 #b1111101110111111111111111111100010010110000001111110)))
(assert (= y (fp #b1 #b11100010110 #b0001100000001001011000100101110110100011001100001101)))
(assert (= r (fp #b1 #b11011000100 #b1111101110111111111111111111100010010110000001111110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
