(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2985683091933657440364413560018874704837799072265625p-828 {+ 1344632126027881 -828 (7.25485e-250)}
; Y = 1.8345992956877423818440320246736519038677215576171875p-162 {+ 3758701077062995 -162 (3.13821e-049)}
; 1.2985683091933657440364413560018874704837799072265625p-828 M 1.8345992956877423818440320246736519038677215576171875p-162 == 1.8345992956877423818440320246736519038677215576171875p-162
; [HW: 1.8345992956877423818440320246736519038677215576171875p-162] 

; mpf : + 3758701077062995 -162
; mpfd: + 3758701077062995 -162 (3.13821e-049) class: Pos. norm. non-zero
; hwf : + 3758701077062995 -162 (3.13821e-049) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000011 #b0100110001101110111110010000001110011011100001101001)))
(assert (= y (fp #b0 #b01101011101 #b1101010110101000010011001010100000111110010101010011)))
(assert (= r (fp #b0 #b01101011101 #b1101010110101000010011001010100000111110010101010011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
