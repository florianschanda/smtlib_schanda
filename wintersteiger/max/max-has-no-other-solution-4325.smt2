(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8424503889074459461738797472207807004451751708984375p-429 {+ 3794059257561703 -429 (1.32901e-129)}
; Y = 1.5200030676527751527515874840901233255863189697265625p-612 {+ 2341885621712553 -612 (8.94308e-185)}
; 1.8424503889074459461738797472207807004451751708984375p-429 M 1.5200030676527751527515874840901233255863189697265625p-612 == 1.8424503889074459461738797472207807004451751708984375p-429
; [HW: 1.8424503889074459461738797472207807004451751708984375p-429] 

; mpf : + 3794059257561703 -429
; mpfd: + 3794059257561703 -429 (1.32901e-129) class: Pos. norm. non-zero
; hwf : + 3794059257561703 -429 (1.32901e-129) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010010 #b1101011110101010110101000010010011011100001001100111)))
(assert (= y (fp #b0 #b00110011011 #b1000010100011110111010111100100101100011011010101001)))
(assert (= r (fp #b0 #b01001010010 #b1101011110101010110101000010010011011100001001100111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
