(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.91126289079516897828625587862916290760040283203125p848 {- 4103963215421684 848 (-3.58721e+255)}
; Y = -1.9199482930797078239493203000165522098541259765625p-389 {- 4143078789913896 -389 (-1.52272e-117)}
; -1.91126289079516897828625587862916290760040283203125p848 M -1.9199482930797078239493203000165522098541259765625p-389 == -1.9199482930797078239493203000165522098541259765625p-389
; [HW: -1.9199482930797078239493203000165522098541259765625p-389] 

; mpf : - 4143078789913896 -389
; mpfd: - 4143078789913896 -389 (-1.52272e-117) class: Neg. norm. non-zero
; hwf : - 4143078789913896 -389 (-1.52272e-117) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101001111 #b1110100101001000100001100101101000000110000011110100)))
(assert (= y (fp #b1 #b01001111010 #b1110101110000001101110110011100011001001110100101000)))
(assert (= r (fp #b1 #b01001111010 #b1110101110000001101110110011100011001001110100101000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
