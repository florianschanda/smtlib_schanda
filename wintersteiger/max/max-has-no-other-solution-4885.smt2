(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2925342020424370748088449545321054756641387939453125p-5 {- 1317456923311445 -5 (-0.0403917)}
; Y = 1.2765170534975187610626790046808309853076934814453125p-730 {+ 1245322099093013 -730 (2.26011e-220)}
; -1.2925342020424370748088449545321054756641387939453125p-5 M 1.2765170534975187610626790046808309853076934814453125p-730 == 1.2765170534975187610626790046808309853076934814453125p-730
; [HW: 1.2765170534975187610626790046808309853076934814453125p-730] 

; mpf : + 1245322099093013 -730
; mpfd: + 1245322099093013 -730 (2.26011e-220) class: Pos. norm. non-zero
; hwf : + 1245322099093013 -730 (2.26011e-220) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111111010 #b0100101011100011100001010111111010111011110101010101)))
(assert (= y (fp #b0 #b00100100101 #b0100011011001001110100100101010110001110111000010101)))
(assert (= r (fp #b0 #b00100100101 #b0100011011001001110100100101010110001110111000010101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
