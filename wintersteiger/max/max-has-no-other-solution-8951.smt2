(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7504995015161652904822631171555258333683013916015625p131 {+ 3379949275369945 131 (4.76531e+039)}
; Y = -1.6381454209754320316960729542188346385955810546875p-69 {- 2873951480113144 -69 (-2.77513e-021)}
; 1.7504995015161652904822631171555258333683013916015625p131 M -1.6381454209754320316960729542188346385955810546875p-69 == 1.7504995015161652904822631171555258333683013916015625p131
; [HW: 1.7504995015161652904822631171555258333683013916015625p131] 

; mpf : + 3379949275369945 131
; mpfd: + 3379949275369945 131 (4.76531e+039) class: Pos. norm. non-zero
; hwf : + 3379949275369945 131 (4.76531e+039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000010 #b1100000000100000101111000011111010101101000111011001)))
(assert (= y (fp #b1 #b01110111010 #b1010001101011101011111111001000100101110011111111000)))
(assert (= r (fp #b0 #b10010000010 #b1100000000100000101111000011111010101101000111011001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
