(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9062592602333101599043629903462715446949005126953125p-624 {- 4081428866687797 -624 (-2.7382e-188)}
; Y = -1.3486451096839544572247859832714311778545379638671875p412 {- 1570157986057203 412 (-1.42645e+124)}
; -1.9062592602333101599043629903462715446949005126953125p-624 M -1.3486451096839544572247859832714311778545379638671875p412 == -1.9062592602333101599043629903462715446949005126953125p-624
; [HW: -1.9062592602333101599043629903462715446949005126953125p-624] 

; mpf : - 4081428866687797 -624
; mpfd: - 4081428866687797 -624 (-2.7382e-188) class: Neg. norm. non-zero
; hwf : - 4081428866687797 -624 (-2.7382e-188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001111 #b1110100000000000100110110101110001100110001100110101)))
(assert (= y (fp #b1 #b10110011011 #b0101100101000000110011100101000000000000101111110011)))
(assert (= r (fp #b1 #b00110001111 #b1110100000000000100110110101110001100110001100110101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
