(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5882477570320563398098556717741303145885467529296875p-124 {- 2649232379371099 -124 (-7.46791e-038)}
; Y = 1.1666037747616939679318193157087080180644989013671875p426 {+ 750316697935283 426 (2.02163e+128)}
; -1.5882477570320563398098556717741303145885467529296875p-124 M 1.1666037747616939679318193157087080180644989013671875p426 == 1.1666037747616939679318193157087080180644989013671875p426
; [HW: 1.1666037747616939679318193157087080180644989013671875p426] 

; mpf : + 750316697935283 426
; mpfd: + 750316697935283 426 (2.02163e+128) class: Pos. norm. non-zero
; hwf : + 750316697935283 426 (2.02163e+128) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000011 #b1001011010010111011001111010111001100101111001011011)))
(assert (= y (fp #b0 #b10110101001 #b0010101010100110100010111000001111111101110110110011)))
(assert (= r (fp #b0 #b10110101001 #b0010101010100110100010111000001111111101110110110011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
