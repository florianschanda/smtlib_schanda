(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8010935361151758637987541078473441302776336669921875p-612 {- 3607804550737219 -612 (-1.05969e-184)}
; Y = 1.521238758379641620166466964292339980602264404296875p661 {+ 2347450678009614 661 (1.45554e+199)}
; -1.8010935361151758637987541078473441302776336669921875p-612 M 1.521238758379641620166466964292339980602264404296875p661 == 1.521238758379641620166466964292339980602264404296875p661
; [HW: 1.521238758379641620166466964292339980602264404296875p661] 

; mpf : + 2347450678009614 661
; mpfd: + 2347450678009614 661 (1.45554e+199) class: Pos. norm. non-zero
; hwf : + 2347450678009614 661 (1.45554e+199) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011011 #b1100110100010100011101110100101010100110110101000011)))
(assert (= y (fp #b0 #b11010010100 #b1000010101101111111001110011110010100101111100001110)))
(assert (= r (fp #b0 #b11010010100 #b1000010101101111111001110011110010100101111100001110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
