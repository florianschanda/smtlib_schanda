(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.621792940278708794465956088970415294170379638671875p-965 {+ 2800306454140798 -965 (5.20055e-291)}
; Y = 1.15663790021345480596437482745386660099029541015625p534 {+ 705434389033412 534 (6.50452e+160)}
; 1.621792940278708794465956088970415294170379638671875p-965 M 1.15663790021345480596437482745386660099029541015625p534 == 1.15663790021345480596437482745386660099029541015625p534
; [HW: 1.15663790021345480596437482745386660099029541015625p534] 

; mpf : + 705434389033412 534
; mpfd: + 705434389033412 534 (6.50452e+160) class: Pos. norm. non-zero
; hwf : + 705434389033412 534 (6.50452e+160) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000111010 #b1001111100101101110100100111011101100001011101111110)))
(assert (= y (fp #b0 #b11000010101 #b0010100000011001011010111110001010111011000111000100)))
(assert (= r (fp #b0 #b11000010101 #b0010100000011001011010111110001010111011000111000100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
