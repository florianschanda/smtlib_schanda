(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.917834492910956978306558085023425519466400146484375p357 {- 4133559080261574 357 (-5.63014e+107)}
; Y = -1.0389727184860024777890430414117872714996337890625p519 {- 175517520451176 519 (-1.78308e+156)}
; -1.917834492910956978306558085023425519466400146484375p357 M -1.0389727184860024777890430414117872714996337890625p519 == -1.917834492910956978306558085023425519466400146484375p357
; [HW: -1.917834492910956978306558085023425519466400146484375p357] 

; mpf : - 4133559080261574 357
; mpfd: - 4133559080261574 357 (-5.63014e+107) class: Neg. norm. non-zero
; hwf : - 4133559080261574 357 (-5.63014e+107) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101100100 #b1110101011110111001100111000101000110001011111000110)))
(assert (= y (fp #b1 #b11000000110 #b0000100111111010000111011011011101010101011001101000)))
(assert (= r (fp #b1 #b10101100100 #b1110101011110111001100111000101000110001011111000110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
