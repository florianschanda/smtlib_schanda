(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.420338652992727990209687050082720816135406494140625p334 {- 1893037000987466 334 (-4.97062e+100)}
; Y = 1.8965152163639424909291619769646786153316497802734375p-850 {+ 4037545594348631 -850 (2.52616e-256)}
; -1.420338652992727990209687050082720816135406494140625p334 M 1.8965152163639424909291619769646786153316497802734375p-850 == 1.8965152163639424909291619769646786153316497802734375p-850
; [HW: 1.8965152163639424909291619769646786153316497802734375p-850] 

; mpf : + 4037545594348631 -850
; mpfd: + 4037545594348631 -850 (2.52616e-256) class: Pos. norm. non-zero
; hwf : + 4037545594348631 -850 (2.52616e-256) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101001101 #b0110101110011011010100000101111111011001001101001010)))
(assert (= y (fp #b0 #b00010101101 #b1110010110000010000001010110111010100110010001010111)))
(assert (= r (fp #b0 #b00010101101 #b1110010110000010000001010110111010100110010001010111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
