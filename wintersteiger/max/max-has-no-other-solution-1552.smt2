(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9997765445769317693702760152518749237060546875p-669 {- 4502593273610432 -669 (-8.16421e-202)}
; Y = -1.264610373287198274994125313241966068744659423828125p-124 {- 1191699178534594 -124 (-5.94617e-038)}
; -1.9997765445769317693702760152518749237060546875p-669 M -1.264610373287198274994125313241966068744659423828125p-124 == -1.9997765445769317693702760152518749237060546875p-669
; [HW: -1.9997765445769317693702760152518749237060546875p-669] 

; mpf : - 4502593273610432 -669
; mpfd: - 4502593273610432 -669 (-8.16421e-202) class: Neg. norm. non-zero
; hwf : - 4502593273610432 -669 (-8.16421e-202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101100010 #b1111111111110001010110110000101001000100000011000000)))
(assert (= y (fp #b1 #b01110000011 #b0100001110111101100000010110001101110011011011000010)))
(assert (= r (fp #b1 #b00101100010 #b1111111111110001010110110000101001000100000011000000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
