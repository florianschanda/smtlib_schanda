(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.31417480332332470283063230453990399837493896484375p80 {+ 1414917527176124 80 (1.58874e+024)}
; Y = -1.0712155298694165939110689578228630125522613525390625p-761 {- 320726233782897 -761 (-8.83182e-230)}
; 1.31417480332332470283063230453990399837493896484375p80 M -1.0712155298694165939110689578228630125522613525390625p-761 == 1.31417480332332470283063230453990399837493896484375p80
; [HW: 1.31417480332332470283063230453990399837493896484375p80] 

; mpf : + 1414917527176124 80
; mpfd: + 1414917527176124 80 (1.58874e+024) class: Pos. norm. non-zero
; hwf : + 1414917527176124 80 (1.58874e+024) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001111 #b0101000001101101110000101000100110000000001110111100)))
(assert (= y (fp #b1 #b00100000110 #b0001001000111011001011100101001111000001101001110001)))
(assert (= r (fp #b0 #b10001001111 #b0101000001101101110000101000100110000000001110111100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
