(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0605163453866184308793663149117492139339447021484375p927 {+ 272541390532999 927 (1.20316e+279)}
; Y = -1.0402727496498886949893858400173485279083251953125p-538 {- 181372340316424 -538 (-1.15614e-162)}
; 1.0605163453866184308793663149117492139339447021484375p927 M -1.0402727496498886949893858400173485279083251953125p-538 == 1.0605163453866184308793663149117492139339447021484375p927
; [HW: 1.0605163453866184308793663149117492139339447021484375p927] 

; mpf : + 272541390532999 927
; mpfd: + 272541390532999 927 (1.20316e+279) class: Pos. norm. non-zero
; hwf : + 272541390532999 927 (1.20316e+279) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110011110 #b0000111101111101111111111100110001001111000110000111)))
(assert (= y (fp #b1 #b00111100101 #b0000101001001111010100001001111010101010100100001000)))
(assert (= r (fp #b0 #b11110011110 #b0000111101111101111111111100110001001111000110000111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
