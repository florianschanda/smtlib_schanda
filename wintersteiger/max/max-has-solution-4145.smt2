(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8817973337684261725399892384302802383899688720703125p303 {+ 3971262143775781 303 (3.06663e+091)}
; Y = 1.7515605421109088357667360469349659979343414306640625p437 {+ 3384727777397057 437 (6.21632e+131)}
; 1.8817973337684261725399892384302802383899688720703125p303 M 1.7515605421109088357667360469349659979343414306640625p437 == 1.7515605421109088357667360469349659979343414306640625p437
; [HW: 1.7515605421109088357667360469349659979343414306640625p437] 

; mpf : + 3384727777397057 437
; mpfd: + 3384727777397057 437 (6.21632e+131) class: Pos. norm. non-zero
; hwf : + 3384727777397057 437 (6.21632e+131) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101110 #b1110000110111101011110000101011000111100010000100101)))
(assert (= y (fp #b0 #b10110110100 #b1100000001100110010001011000110101010100100101000001)))
(assert (= r (fp #b0 #b10110110100 #b1100000001100110010001011000110101010100100101000001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
