(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.039548413031334828104945700033567845821380615234375p-522 {+ 178110218191014 -522 (7.57159e-158)}
; Y = -1.8634835492939283430047225920134223997592926025390625p-462 {- 3888784190840689 -462 (-1.56483e-139)}
; 1.039548413031334828104945700033567845821380615234375p-522 M -1.8634835492939283430047225920134223997592926025390625p-462 == 1.039548413031334828104945700033567845821380615234375p-522
; [HW: 1.039548413031334828104945700033567845821380615234375p-522] 

; mpf : + 178110218191014 -522
; mpfd: + 178110218191014 -522 (7.57159e-158) class: Pos. norm. non-zero
; hwf : + 178110218191014 -522 (7.57159e-158) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110101 #b0000101000011111110110000100010010010100000010100110)))
(assert (= y (fp #b1 #b01000110001 #b1101110100001101010000100000010011011001111101110001)))
(assert (= r (fp #b0 #b00111110101 #b0000101000011111110110000100010010010100000010100110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
