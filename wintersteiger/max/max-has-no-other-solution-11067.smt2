(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0191688620203012138887288529076613485813140869140625p-882 {- 86328879851745 -882 (-3.16075e-266)}
; Y = -1.6784951909829912697347253924817778170108795166015625p127 {- 3055670689283673 127 (-2.85581e+038)}
; -1.0191688620203012138887288529076613485813140869140625p-882 M -1.6784951909829912697347253924817778170108795166015625p127 == -1.0191688620203012138887288529076613485813140869140625p-882
; [HW: -1.0191688620203012138887288529076613485813140869140625p-882] 

; mpf : - 86328879851745 -882
; mpfd: - 86328879851745 -882 (-3.16075e-266) class: Neg. norm. non-zero
; hwf : - 86328879851745 -882 (-3.16075e-266) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001101 #b0000010011101000010000000010001101111010100011100001)))
(assert (= y (fp #b1 #b10001111110 #b1010110110110001110111000101111111000011111001011001)))
(assert (= r (fp #b1 #b00010001101 #b0000010011101000010000000010001101111010100011100001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
