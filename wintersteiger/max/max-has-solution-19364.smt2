(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3841584124612722472846826349268667399883270263671875p485 {+ 1730095683211827 485 (1.38272e+146)}
; Y = 1.786158087882171230376116000115871429443359375p-61 {+ 3540541271640448 -61 (7.74623e-019)}
; 1.3841584124612722472846826349268667399883270263671875p485 M 1.786158087882171230376116000115871429443359375p-61 == 1.3841584124612722472846826349268667399883270263671875p485
; [HW: 1.3841584124612722472846826349268667399883270263671875p485] 

; mpf : + 1730095683211827 485
; mpfd: + 1730095683211827 485 (1.38272e+146) class: Pos. norm. non-zero
; hwf : + 1730095683211827 485 (1.38272e+146) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111100100 #b0110001001011000001101001010101000000001001000110011)))
(assert (= y (fp #b0 #b01111000010 #b1100100101000001101010000000110011110000100110000000)))
(assert (= r (fp #b0 #b10111100100 #b0110001001011000001101001010101000000001001000110011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
