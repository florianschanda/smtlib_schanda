(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4890916770850306516393857236835174262523651123046875p259 {+ 2202673094670155 259 (1.3794e+078)}
; Y = -1.1497039923741347866581463676993735134601593017578125p641 {- 674206844272029 641 (-1.04909e+193)}
; 1.4890916770850306516393857236835174262523651123046875p259 M -1.1497039923741347866581463676993735134601593017578125p641 == 1.4890916770850306516393857236835174262523651123046875p259
; [HW: 1.4890916770850306516393857236835174262523651123046875p259] 

; mpf : + 2202673094670155 259
; mpfd: + 2202673094670155 259 (1.3794e+078) class: Pos. norm. non-zero
; hwf : + 2202673094670155 259 (1.3794e+078) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000010 #b0111110100110101000111001011010111010011011101001011)))
(assert (= y (fp #b1 #b11010000000 #b0010011001010011000000000011011101010011110110011101)))
(assert (= r (fp #b0 #b10100000010 #b0111110100110101000111001011010111010011011101001011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
