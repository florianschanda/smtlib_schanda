(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0529988381530468455338223066064529120922088623046875p966 {+ 238685547757131 966 (6.56755e+290)}
; Y = -1.4924298224914276378427757663303054869174957275390625p504 {- 2217706765078513 504 (-7.81649e+151)}
; 1.0529988381530468455338223066064529120922088623046875p966 M -1.4924298224914276378427757663303054869174957275390625p504 == 1.0529988381530468455338223066064529120922088623046875p966
; [HW: 1.0529988381530468455338223066064529120922088623046875p966] 

; mpf : + 238685547757131 966
; mpfd: + 238685547757131 966 (6.56755e+290) class: Pos. norm. non-zero
; hwf : + 238685547757131 966 (6.56755e+290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111000101 #b0000110110010001010101001111010010010111111001001011)))
(assert (= y (fp #b1 #b10111110111 #b0111111000001111111000010111111100101100111111110001)))
(assert (= r (fp #b0 #b11111000101 #b0000110110010001010101001111010010010111111001001011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
