(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7921715017457577889814501759246923029422760009765625p1020 {+ 3567623280075721 1020 (2.01361e+307)}
; Y = 1.03449659671293492380073075764812529087066650390625p-647 {+ 155358860101924 -647 (1.77142e-195)}
; 1.7921715017457577889814501759246923029422760009765625p1020 M 1.03449659671293492380073075764812529087066650390625p-647 == 1.7921715017457577889814501759246923029422760009765625p1020
; [HW: 1.7921715017457577889814501759246923029422760009765625p1020] 

; mpf : + 3567623280075721 1020
; mpfd: + 3567623280075721 1020 (2.01361e+307) class: Pos. norm. non-zero
; hwf : + 3567623280075721 1020 (2.01361e+307) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111111011 #b1100101011001011110000000110010011010010001111001001)))
(assert (= y (fp #b0 #b00101111000 #b0000100011010100110001001101101010110100100100100100)))
(assert (= r (fp #b0 #b11111111011 #b1100101011001011110000000110010011010010001111001001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
