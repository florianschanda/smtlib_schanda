(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.23240106340584620880918009788729250431060791015625p355 {+ 1046641342555076 355 (9.04483e+106)}
; Y = -1.7550063814615552981734936111024580895900726318359375p425 {- 3400246458212607 425 (-1.52064e+128)}
; 1.23240106340584620880918009788729250431060791015625p355 M -1.7550063814615552981734936111024580895900726318359375p425 == 1.23240106340584620880918009788729250431060791015625p355
; [HW: 1.23240106340584620880918009788729250431060791015625p355] 

; mpf : + 1046641342555076 355
; mpfd: + 1046641342555076 355 (9.04483e+106) class: Pos. norm. non-zero
; hwf : + 1046641342555076 355 (9.04483e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100010 #b0011101101111110101000101101011011100010001111000100)))
(assert (= y (fp #b1 #b10110101000 #b1100000101001000000110010010010010100110000011111111)))
(assert (= r (fp #b0 #b10101100010 #b0011101101111110101000101101011011100010001111000100)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
