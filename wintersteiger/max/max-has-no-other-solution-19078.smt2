(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7428508793327528447747454265481792390346527099609375p132 {- 3345502943354831 132 (-9.48898e+039)}
; Y = -1.80198146487684329741796318558044731616973876953125p-929 {- 3611803426377396 -929 (-3.97086e-280)}
; -1.7428508793327528447747454265481792390346527099609375p132 M -1.80198146487684329741796318558044731616973876953125p-929 == -1.80198146487684329741796318558044731616973876953125p-929
; [HW: -1.80198146487684329741796318558044731616973876953125p-929] 

; mpf : - 3611803426377396 -929
; mpfd: - 3611803426377396 -929 (-3.97086e-280) class: Neg. norm. non-zero
; hwf : - 3611803426377396 -929 (-3.97086e-280) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000011 #b1011111000101011011110011010100010001001111111001111)))
(assert (= y (fp #b1 #b00001011110 #b1100110101001110101010000100001110100100111010110100)))
(assert (= r (fp #b1 #b00001011110 #b1100110101001110101010000100001110100100111010110100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
