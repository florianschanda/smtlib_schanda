(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.244599184352086940208437226829119026660919189453125p-852 {- 1101576795503186 -852 (-4.14451e-257)}
; Y = -1.7566282779604815988960808681440539658069610595703125p-189 {- 3407550830680805 -189 (-2.23878e-057)}
; -1.244599184352086940208437226829119026660919189453125p-852 M -1.7566282779604815988960808681440539658069610595703125p-189 == -1.244599184352086940208437226829119026660919189453125p-852
; [HW: -1.244599184352086940208437226829119026660919189453125p-852] 

; mpf : - 1101576795503186 -852
; mpfd: - 1101576795503186 -852 (-4.14451e-257) class: Neg. norm. non-zero
; hwf : - 1101576795503186 -852 (-4.14451e-257) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101011 #b0011111010011110000011010101100101101011101001010010)))
(assert (= y (fp #b1 #b01101000010 #b1100000110110010011001000000110100010001101011100101)))
(assert (= r (fp #b1 #b00010101011 #b0011111010011110000011010101100101101011101001010010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
