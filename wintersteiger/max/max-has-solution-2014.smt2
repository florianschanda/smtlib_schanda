(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.576731694674087247420857238466851413249969482421875p827 {+ 2597368645226974 827 (1.41112e+249)}
; Y = 1.729781578580519063592646489269100129604339599609375p-560 {+ 3286644045357078 -560 (4.58346e-169)}
; 1.576731694674087247420857238466851413249969482421875p827 M 1.729781578580519063592646489269100129604339599609375p-560 == 1.576731694674087247420857238466851413249969482421875p827
; [HW: 1.576731694674087247420857238466851413249969482421875p827] 

; mpf : + 2597368645226974 827
; mpfd: + 2597368645226974 827 (1.41112e+249) class: Pos. norm. non-zero
; hwf : + 2597368645226974 827 (1.41112e+249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100111010 #b1001001110100100101100000011011100110001000111011110)))
(assert (= y (fp #b0 #b00111001111 #b1011101011010010111101110010110100111010000000010110)))
(assert (= r (fp #b0 #b11100111010 #b1001001110100100101100000011011100110001000111011110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
