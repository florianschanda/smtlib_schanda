(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.467325488370799124737686724984087049961090087890625p861 {+ 2104646895287466 861 (2.25607e+259)}
; Y = -1.6423430522179203183696927226264961063861846923828125p466 {- 2892855930612653 466 (-3.12926e+140)}
; 1.467325488370799124737686724984087049961090087890625p861 M -1.6423430522179203183696927226264961063861846923828125p466 == 1.467325488370799124737686724984087049961090087890625p861
; [HW: 1.467325488370799124737686724984087049961090087890625p861] 

; mpf : + 2104646895287466 861
; mpfd: + 2104646895287466 861 (2.25607e+259) class: Pos. norm. non-zero
; hwf : + 2104646895287466 861 (2.25607e+259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101011100 #b0111011110100010101001001010100100100011110010101010)))
(assert (= y (fp #b1 #b10111010001 #b1010010001110000100110000010001000010110101110101101)))
(assert (= r (fp #b0 #b11101011100 #b0111011110100010101001001010100100100011110010101010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
