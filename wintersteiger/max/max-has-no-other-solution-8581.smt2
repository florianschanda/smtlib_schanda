(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.305357496530954453106687651597894728183746337890625p790 {+ 1375207907591594 790 (8.50014e+237)}
; Y = -1.3764804164490287430311354910372756421566009521484375p-105 {- 1695517063232135 -105 (-3.39329e-032)}
; 1.305357496530954453106687651597894728183746337890625p790 M -1.3764804164490287430311354910372756421566009521484375p-105 == 1.305357496530954453106687651597894728183746337890625p790
; [HW: 1.305357496530954453106687651597894728183746337890625p790] 

; mpf : + 1375207907591594 790
; mpfd: + 1375207907591594 790 (8.50014e+237) class: Pos. norm. non-zero
; hwf : + 1375207907591594 790 (8.50014e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100010101 #b0100111000101011111010001010110100110000010110101010)))
(assert (= y (fp #b1 #b01110010110 #b0110000001100001000001010100010000111011101010000111)))
(assert (= r (fp #b0 #b11100010101 #b0100111000101011111010001010110100110000010110101010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
