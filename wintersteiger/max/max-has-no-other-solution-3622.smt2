(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4905874918894641556477154153981246054172515869140625p-401 {+ 2209409645666017 -401 (2.88622e-121)}
; Y = -1.74719382984575499762058825581334531307220458984375p624 {- 3365061853666876 624 (-1.21635e+188)}
; 1.4905874918894641556477154153981246054172515869140625p-401 M -1.74719382984575499762058825581334531307220458984375p624 == 1.4905874918894641556477154153981246054172515869140625p-401
; [HW: 1.4905874918894641556477154153981246054172515869140625p-401] 

; mpf : + 2209409645666017 -401
; mpfd: + 2209409645666017 -401 (2.88622e-121) class: Pos. norm. non-zero
; hwf : + 2209409645666017 -401 (2.88622e-121) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001101110 #b0111110110010111001001000101000101111101111011100001)))
(assert (= y (fp #b1 #b11001101111 #b1011111101001000000110000100011011110101111000111100)))
(assert (= r (fp #b0 #b01001101110 #b0111110110010111001001000101000101111101111011100001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
