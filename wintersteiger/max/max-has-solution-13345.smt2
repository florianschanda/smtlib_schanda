(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7307775198137054228908482400584034621715545654296875p-388 {+ 3291129365923739 -388 (2.74538e-117)}
; Y = 1.8116563235275864318651883877464570105075836181640625p-198 {+ 3655375116191745 -198 (4.50959e-060)}
; 1.7307775198137054228908482400584034621715545654296875p-388 M 1.8116563235275864318651883877464570105075836181640625p-198 == 1.8116563235275864318651883877464570105075836181640625p-198
; [HW: 1.8116563235275864318651883877464570105075836181640625p-198] 

; mpf : + 3655375116191745 -198
; mpfd: + 3655375116191745 -198 (4.50959e-060) class: Pos. norm. non-zero
; hwf : + 3655375116191745 -198 (4.50959e-060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111011 #b1011101100010100001111000100110001000000011110011011)))
(assert (= y (fp #b0 #b01100111001 #b1100111111001000101101010111010100100100100000000001)))
(assert (= r (fp #b0 #b01100111001 #b1100111111001000101101010111010100100100100000000001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
