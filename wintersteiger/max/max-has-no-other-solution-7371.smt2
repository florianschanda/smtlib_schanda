(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.112020247324255972642959022778086364269256591796875p-15 {+ 504494344107470 -15 (3.39362e-005)}
; Y = 1.2876449227967101673897332148044370114803314208984375p-653 {+ 1295437567122279 -653 (3.44516e-197)}
; 1.112020247324255972642959022778086364269256591796875p-15 M 1.2876449227967101673897332148044370114803314208984375p-653 == 1.112020247324255972642959022778086364269256591796875p-15
; [HW: 1.112020247324255972642959022778086364269256591796875p-15] 

; mpf : + 504494344107470 -15
; mpfd: + 504494344107470 -15 (3.39362e-005) class: Pos. norm. non-zero
; hwf : + 504494344107470 -15 (3.39362e-005) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111110000 #b0001110010101101010110111110001010111111010111001110)))
(assert (= y (fp #b0 #b00101110010 #b0100100110100011000110010000000001000101101101100111)))
(assert (= r (fp #b0 #b01111110000 #b0001110010101101010110111110001010111111010111001110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
