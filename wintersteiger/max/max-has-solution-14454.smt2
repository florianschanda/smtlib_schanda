(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8003890819369841036490242913714610040187835693359375p-728 {+ 3604631971162815 -728 (1.27506e-219)}
; Y = 1.3534158800208972994738587658503092825412750244140625p-287 {+ 1591643625568929 -287 (5.4428e-087)}
; 1.8003890819369841036490242913714610040187835693359375p-728 M 1.3534158800208972994738587658503092825412750244140625p-287 == 1.3534158800208972994738587658503092825412750244140625p-287
; [HW: 1.3534158800208972994738587658503092825412750244140625p-287] 

; mpf : + 1591643625568929 -287
; mpfd: + 1591643625568929 -287 (5.4428e-087) class: Pos. norm. non-zero
; hwf : + 1591643625568929 -287 (5.4428e-087) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100100111 #b1100110011100110010011001000001011111110101010111111)))
(assert (= y (fp #b0 #b01011100000 #b0101101001111001011101101000111010010011101010100001)))
(assert (= r (fp #b0 #b01011100000 #b0101101001111001011101101000111010010011101010100001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
