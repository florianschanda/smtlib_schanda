(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.066638433774630190242760363616980612277984619140625p-495 {- 300112825515978 -495 (-1.04272e-149)}
; Y = 1.5943884293017147602000704864622093737125396728515625p-183 {+ 2676887508716537 -183 (1.30048e-055)}
; -1.066638433774630190242760363616980612277984619140625p-495 M 1.5943884293017147602000704864622093737125396728515625p-183 == 1.5943884293017147602000704864622093737125396728515625p-183
; [HW: 1.5943884293017147602000704864622093737125396728515625p-183] 

; mpf : + 2676887508716537 -183
; mpfd: + 2676887508716537 -183 (1.30048e-055) class: Pos. norm. non-zero
; hwf : + 2676887508716537 -183 (1.30048e-055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010000 #b0001000100001111001101110110010110110111111111001010)))
(assert (= y (fp #b0 #b01101001000 #b1001100000101001110101110001000011111000101111111001)))
(assert (= r (fp #b0 #b01101001000 #b1001100000101001110101110001000011111000101111111001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
