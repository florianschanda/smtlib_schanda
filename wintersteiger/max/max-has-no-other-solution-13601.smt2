(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9283766963373969449691003319458104670047760009765625p-831 {+ 4181036943684553 -831 (1.34668e-250)}
; Y = 1.899277812030967904632916543050669133663177490234375p70 {+ 4049987219165222 70 (2.24227e+021)}
; 1.9283766963373969449691003319458104670047760009765625p-831 M 1.899277812030967904632916543050669133663177490234375p70 == 1.899277812030967904632916543050669133663177490234375p70
; [HW: 1.899277812030967904632916543050669133663177490234375p70] 

; mpf : + 4049987219165222 70
; mpfd: + 4049987219165222 70 (2.24227e+021) class: Pos. norm. non-zero
; hwf : + 4049987219165222 70 (2.24227e+021) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011000000 #b1110110110101010000110000101110100100011001111001001)))
(assert (= y (fp #b0 #b10001000101 #b1110011000110111000100100001100010110001000000100110)))
(assert (= r (fp #b0 #b10001000101 #b1110011000110111000100100001100010110001000000100110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
