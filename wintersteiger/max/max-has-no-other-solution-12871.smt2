(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6014291966929075083925226863357238471508026123046875p176 {+ 2708596306115915 176 (1.53386e+053)}
; Y = -1.567754233754556469904173354734666645526885986328125p142 {- 2556937755575042 142 (-8.74052e+042)}
; 1.6014291966929075083925226863357238471508026123046875p176 M -1.567754233754556469904173354734666645526885986328125p142 == 1.6014291966929075083925226863357238471508026123046875p176
; [HW: 1.6014291966929075083925226863357238471508026123046875p176] 

; mpf : + 2708596306115915 176
; mpfd: + 2708596306115915 176 (1.53386e+053) class: Pos. norm. non-zero
; hwf : + 2708596306115915 176 (1.53386e+053) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010101111 #b1001100111110111010000111000101010100111110101001011)))
(assert (= y (fp #b1 #b10010001101 #b1001000101011000010101110110101000100100001100000010)))
(assert (= r (fp #b0 #b10010101111 #b1001100111110111010000111000101010100111110101001011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
