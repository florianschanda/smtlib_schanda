(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7591106506232192518979218220920301973819732666015625p468 {+ 3418730443279705 468 (1.3407e+141)}
; Y = 1.3260467421947554900185650694766081869602203369140625p-164 {+ 1468383986653665 -164 (5.67074e-050)}
; 1.7591106506232192518979218220920301973819732666015625p468 M 1.3260467421947554900185650694766081869602203369140625p-164 == 1.7591106506232192518979218220920301973819732666015625p468
; [HW: 1.7591106506232192518979218220920301973819732666015625p468] 

; mpf : + 3418730443279705 468
; mpfd: + 3418730443279705 468 (1.3407e+141) class: Pos. norm. non-zero
; hwf : + 3418730443279705 468 (1.3407e+141) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111010011 #b1100001001010101000100110101101001111000110101011001)))
(assert (= y (fp #b0 #b01101011011 #b0101001101110111110011001001111010110001100111100001)))
(assert (= r (fp #b0 #b10111010011 #b1100001001010101000100110101101001111000110101011001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
