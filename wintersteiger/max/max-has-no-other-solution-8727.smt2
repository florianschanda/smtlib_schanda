(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8037170613184023704178571279044263064861297607421875p-646 {- 3619619857864867 -646 (-6.17719e-195)}
; Y = 1.5905825822444963346669055681559257209300994873046875p-406 {+ 2659747497327819 -406 (9.6245e-123)}
; -1.8037170613184023704178571279044263064861297607421875p-646 M 1.5905825822444963346669055681559257209300994873046875p-406 == 1.5905825822444963346669055681559257209300994873046875p-406
; [HW: 1.5905825822444963346669055681559257209300994873046875p-406] 

; mpf : + 2659747497327819 -406
; mpfd: + 2659747497327819 -406 (9.6245e-123) class: Pos. norm. non-zero
; hwf : + 2659747497327819 -406 (9.6245e-123) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111001 #b1100110111000000011001101011110110011001100010100011)))
(assert (= y (fp #b0 #b01001101001 #b1001011100110000011010111000110001010011110011001011)))
(assert (= r (fp #b0 #b01001101001 #b1001011100110000011010111000110001010011110011001011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
