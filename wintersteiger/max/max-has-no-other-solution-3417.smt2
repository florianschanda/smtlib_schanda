(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.32502848206554890708730454207397997379302978515625p-86 {+ 1463798150715204 -86 (1.71256e-026)}
; Y = -1.12932301585033645352496023406274616718292236328125p166 {- 582419085994004 166 (-1.05632e+050)}
; 1.32502848206554890708730454207397997379302978515625p-86 M -1.12932301585033645352496023406274616718292236328125p166 == 1.32502848206554890708730454207397997379302978515625p-86
; [HW: 1.32502848206554890708730454207397997379302978515625p-86] 

; mpf : + 1463798150715204 -86
; mpfd: + 1463798150715204 -86 (1.71256e-026) class: Pos. norm. non-zero
; hwf : + 1463798150715204 -86 (1.71256e-026) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110101001 #b0101001100110101000100010000110010111101011101000100)))
(assert (= y (fp #b1 #b10010100101 #b0010000100011011010100000010101110110010100000010100)))
(assert (= r (fp #b0 #b01110101001 #b0101001100110101000100010000110010111101011101000100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
