(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3993898767535106753001628021593205630779266357421875p-215 {- 1798692100122659 -215 (-2.6576e-065)}
; Y = -1.5297383923134983962910382615518756210803985595703125p-646 {- 2385729626226917 -646 (-5.2389e-195)}
; -1.3993898767535106753001628021593205630779266357421875p-215 M -1.5297383923134983962910382615518756210803985595703125p-646 == -1.5297383923134983962910382615518756210803985595703125p-646
; [HW: -1.5297383923134983962910382615518756210803985595703125p-646] 

; mpf : - 2385729626226917 -646
; mpfd: - 2385729626226917 -646 (-5.2389e-195) class: Neg. norm. non-zero
; hwf : - 2385729626226917 -646 (-5.2389e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101000 #b0110011000111110011010100011101100000010100000100011)))
(assert (= y (fp #b1 #b00101111001 #b1000011110011100111011110110111001101100000011100101)))
(assert (= r (fp #b1 #b00101111001 #b1000011110011100111011110110111001101100000011100101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
