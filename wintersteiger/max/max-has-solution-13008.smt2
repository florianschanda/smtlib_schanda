(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.026342553841494531496891795541159808635711669921875p-714 {+ 118636315664542 -714 (1.1909e-215)}
; Y = 1.1257010840064134438165410756482742726802825927734375p228 {+ 566107355091351 228 (4.85581e+068)}
; 1.026342553841494531496891795541159808635711669921875p-714 M 1.1257010840064134438165410756482742726802825927734375p228 == 1.1257010840064134438165410756482742726802825927734375p228
; [HW: 1.1257010840064134438165410756482742726802825927734375p228] 

; mpf : + 566107355091351 228
; mpfd: + 566107355091351 228 (4.85581e+068) class: Pos. norm. non-zero
; hwf : + 566107355091351 228 (4.85581e+068) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110101 #b0000011010111110011000101011011100111110000010011110)))
(assert (= y (fp #b0 #b10011100011 #b0010000000101101111100100011110011100001000110010111)))
(assert (= r (fp #b0 #b10011100011 #b0010000000101101111100100011110011100001000110010111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
