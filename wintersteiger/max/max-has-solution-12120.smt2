(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.793945413751151018999507869011722505092620849609375p876 {- 3575612269522198 876 (-9.03827e+263)}
; Y = -1.0228453474142729096030279833939857780933380126953125p725 {- 102886298102069 725 (-1.80533e+218)}
; -1.793945413751151018999507869011722505092620849609375p876 M -1.0228453474142729096030279833939857780933380126953125p725 == -1.0228453474142729096030279833939857780933380126953125p725
; [HW: -1.0228453474142729096030279833939857780933380126953125p725] 

; mpf : - 102886298102069 725
; mpfd: - 102886298102069 725 (-1.80533e+218) class: Neg. norm. non-zero
; hwf : - 102886298102069 725 (-1.80533e+218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101011 #b1100101101000000000000011011001011011110110100010110)))
(assert (= y (fp #b1 #b11011010100 #b0000010111011001001100010101010000000010100100110101)))
(assert (= r (fp #b1 #b11011010100 #b0000010111011001001100010101010000000010100100110101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
