(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4504399210640741557654109783470630645751953125p-723 {+ 2028601060656960 -723 (3.2871e-218)}
; Y = 1.0089379371541278285206999498768709599971771240234375p-214 {+ 40252890436791 -214 (3.83218e-065)}
; 1.4504399210640741557654109783470630645751953125p-723 M 1.0089379371541278285206999498768709599971771240234375p-214 == 1.0089379371541278285206999498768709599971771240234375p-214
; [HW: 1.0089379371541278285206999498768709599971771240234375p-214] 

; mpf : + 40252890436791 -214
; mpfd: + 40252890436791 -214 (3.83218e-065) class: Pos. norm. non-zero
; hwf : + 40252890436791 -214 (3.83218e-065) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100101100 #b0111001101010000000001111101100111001000011101000000)))
(assert (= y (fp #b0 #b01100101001 #b0000001001001001110000011011001111000101010010110111)))
(assert (= r (fp #b0 #b01100101001 #b0000001001001001110000011011001111000101010010110111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
