(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.88206431597436374403287118184380233287811279296875p-232 {- 3972464524738956 -232 (-2.72694e-070)}
; Y = -1.27043808519854994898423683480359613895416259765625p511 {- 1217944859726980 511 (-8.51689e+153)}
; -1.88206431597436374403287118184380233287811279296875p-232 M -1.27043808519854994898423683480359613895416259765625p511 == -1.88206431597436374403287118184380233287811279296875p-232
; [HW: -1.88206431597436374403287118184380233287811279296875p-232] 

; mpf : - 3972464524738956 -232
; mpfd: - 3972464524738956 -232 (-2.72694e-070) class: Neg. norm. non-zero
; hwf : - 3972464524738956 -232 (-2.72694e-070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010111 #b1110000111001110111101111000111000010100000110001100)))
(assert (= y (fp #b1 #b10111111110 #b0100010100111011011011100010101110000101010010000100)))
(assert (= r (fp #b1 #b01100010111 #b1110000111001110111101111000111000010100000110001100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
