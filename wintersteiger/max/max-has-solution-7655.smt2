(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.209637750880915074702670608530752360820770263671875p-329 {+ 944124496750078 -329 (1.10608e-099)}
; Y = -1.960960977511418956709121630410663783550262451171875p29 {- 4327783500238014 29 (-1.05278e+009)}
; 1.209637750880915074702670608530752360820770263671875p-329 M -1.960960977511418956709121630410663783550262451171875p29 == 1.209637750880915074702670608530752360820770263671875p-329
; [HW: 1.209637750880915074702670608530752360820770263671875p-329] 

; mpf : + 944124496750078 -329
; mpfd: + 944124496750078 -329 (1.10608e-099) class: Pos. norm. non-zero
; hwf : + 944124496750078 -329 (1.10608e-099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110110 #b0011010110101010110100011101010000001010010111111110)))
(assert (= y (fp #b1 #b10000011100 #b1111011000000001100010011110001100100100110010111110)))
(assert (= r (fp #b0 #b01010110110 #b0011010110101010110100011101010000001010010111111110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
