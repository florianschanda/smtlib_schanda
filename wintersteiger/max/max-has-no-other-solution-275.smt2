(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.43095678829997918768413001089356839656829833984375p-41 {- 1940856831200572 -41 (-6.50724e-013)}
; Y = 1.2559661568055651148512197323725558817386627197265625p-961 {+ 1152769088409001 -961 (6.44395e-290)}
; -1.43095678829997918768413001089356839656829833984375p-41 M 1.2559661568055651148512197323725558817386627197265625p-961 == 1.2559661568055651148512197323725558817386627197265625p-961
; [HW: 1.2559661568055651148512197323725558817386627197265625p-961] 

; mpf : + 1152769088409001 -961
; mpfd: + 1152769088409001 -961 (6.44395e-290) class: Pos. norm. non-zero
; hwf : + 1152769088409001 -961 (6.44395e-290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111010110 #b0110111001010011001011110001111110111100110100111100)))
(assert (= y (fp #b0 #b00000111110 #b0100000110000110111111111000000001011100110110101001)))
(assert (= r (fp #b0 #b00000111110 #b0100000110000110111111111000000001011100110110101001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
