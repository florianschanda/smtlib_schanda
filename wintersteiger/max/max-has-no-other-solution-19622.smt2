(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5464511839565233675131139534641988575458526611328125p-682 {- 2460997348442765 -682 (-7.70689e-206)}
; Y = 1.2112169339252545352536571954260580241680145263671875p683 {+ 951236504920115 683 (4.86081e+205)}
; -1.5464511839565233675131139534641988575458526611328125p-682 M 1.2112169339252545352536571954260580241680145263671875p683 == 1.2112169339252545352536571954260580241680145263671875p683
; [HW: 1.2112169339252545352536571954260580241680145263671875p683] 

; mpf : + 951236504920115 683
; mpfd: + 951236504920115 683 (4.86081e+205) class: Pos. norm. non-zero
; hwf : + 951236504920115 683 (4.86081e+205) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010101 #b1000101111100100001110011000101111110100001010001101)))
(assert (= y (fp #b0 #b11010101010 #b0011011000010010010100000001111110010010000000110011)))
(assert (= r (fp #b0 #b11010101010 #b0011011000010010010100000001111110010010000000110011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
