(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.700549424770149808949781800038181245326995849609375p-310 {- 3154994128349462 -310 (-8.1525e-094)}
; Y = 1.685170169830847886061064855311997234821319580078125p-596 {+ 3085732121535586 -596 (6.4978e-180)}
; -1.700549424770149808949781800038181245326995849609375p-310 M 1.685170169830847886061064855311997234821319580078125p-596 == 1.685170169830847886061064855311997234821319580078125p-596
; [HW: 1.685170169830847886061064855311997234821319580078125p-596] 

; mpf : + 3085732121535586 -596
; mpfd: + 3085732121535586 -596 (6.4978e-180) class: Pos. norm. non-zero
; hwf : + 3085732121535586 -596 (6.4978e-180) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001001 #b1011001101010111001101010000010010011110100100010110)))
(assert (= y (fp #b0 #b00110101011 #b1010111101100111010011111110111110011110010001100010)))
(assert (= r (fp #b0 #b00110101011 #b1010111101100111010011111110111110011110010001100010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
