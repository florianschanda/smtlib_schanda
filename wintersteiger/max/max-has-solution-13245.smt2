(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9925554652707602176775480984360910952091217041015625p-309 {+ 4470072423537945 -309 (1.91048e-093)}
; Y = -1.6482845674770898458660894903005100786685943603515625p514 {- 2919614136519865 514 (-8.83995e+154)}
; 1.9925554652707602176775480984360910952091217041015625p-309 M -1.6482845674770898458660894903005100786685943603515625p514 == 1.9925554652707602176775480984360910952091217041015625p-309
; [HW: 1.9925554652707602176775480984360910952091217041015625p-309] 

; mpf : + 4470072423537945 -309
; mpfd: + 4470072423537945 -309 (1.91048e-093) class: Pos. norm. non-zero
; hwf : + 4470072423537945 -309 (1.91048e-093) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001010 #b1111111000011000000111010110111011001101110100011001)))
(assert (= y (fp #b1 #b11000000001 #b1010010111110101111110100011011111010000110010111001)))
(assert (= r (fp #b0 #b01011001010 #b1111111000011000000111010110111011001101110100011001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
