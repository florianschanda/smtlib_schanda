(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.491988354906354619089370316942222416400909423828125p-603 {+ 2215718571826882 -603 (4.49447e-182)}
; Y = -1.137681756351198725241147258202545344829559326171875p516 {- 620063506598974 516 (-2.44061e+155)}
; 1.491988354906354619089370316942222416400909423828125p-603 M -1.137681756351198725241147258202545344829559326171875p516 == 1.491988354906354619089370316942222416400909423828125p-603
; [HW: 1.491988354906354619089370316942222416400909423828125p-603] 

; mpf : + 2215718571826882 -603
; mpfd: + 2215718571826882 -603 (4.49447e-182) class: Pos. norm. non-zero
; hwf : + 2215718571826882 -603 (4.49447e-182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110100100 #b0111110111110010111100101110011001010101111011000010)))
(assert (= y (fp #b1 #b11000000011 #b0010001100111111000111001001000011001000110000111110)))
(assert (= r (fp #b0 #b00110100100 #b0111110111110010111100101110011001010101111011000010)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
