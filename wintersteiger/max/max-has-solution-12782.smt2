(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.397675827727002939582234830595552921295166015625p-1006 {+ 1790972709565584 -1006 (2.03813e-303)}
; Y = 1.1800755730757075401271549708326347172260284423828125p-861 {+ 810988283802285 -861 (7.67509e-260)}
; 1.397675827727002939582234830595552921295166015625p-1006 M 1.1800755730757075401271549708326347172260284423828125p-861 == 1.1800755730757075401271549708326347172260284423828125p-861
; [HW: 1.1800755730757075401271549708326347172260284423828125p-861] 

; mpf : + 810988283802285 -861
; mpfd: + 810988283802285 -861 (7.67509e-260) class: Pos. norm. non-zero
; hwf : + 810988283802285 -861 (7.67509e-260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010001 #b0110010111001110000101010100001001111111010010010000)))
(assert (= y (fp #b0 #b00010100010 #b0010111000011001011011101100100100101011001010101101)))
(assert (= r (fp #b0 #b00010100010 #b0010111000011001011011101100100100101011001010101101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
