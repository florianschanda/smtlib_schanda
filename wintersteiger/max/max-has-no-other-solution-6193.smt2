(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.788643274179829933956398235750384628772735595703125p-833 {- 3551733555724530 -833 (-3.12275e-251)}
; Y = -1.4996641160712897988815939243067987263202667236328125p-635 {- 2250287126949069 -635 (-1.05183e-191)}
; -1.788643274179829933956398235750384628772735595703125p-833 M -1.4996641160712897988815939243067987263202667236328125p-635 == -1.788643274179829933956398235750384628772735595703125p-833
; [HW: -1.788643274179829933956398235750384628772735595703125p-833] 

; mpf : - 3551733555724530 -833
; mpfd: - 3551733555724530 -833 (-3.12275e-251) class: Neg. norm. non-zero
; hwf : - 3551733555724530 -833 (-3.12275e-251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111110 #b1100100111100100100001101000111011010000000011110010)))
(assert (= y (fp #b1 #b00110000100 #b0111111111101001111111001100110110000010110011001101)))
(assert (= r (fp #b1 #b00010111110 #b1100100111100100100001101000111011010000000011110010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
