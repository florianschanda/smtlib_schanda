(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4567075105095954601353014368214644491672515869140625p-848 {+ 2056827774148321 -848 (7.76133e-256)}
; Y = -1.4853836752998177406226432140101678669452667236328125p823 {- 2185973739211981 823 (-8.30855e+247)}
; 1.4567075105095954601353014368214644491672515869140625p-848 M -1.4853836752998177406226432140101678669452667236328125p823 == 1.4567075105095954601353014368214644491672515869140625p-848
; [HW: 1.4567075105095954601353014368214644491672515869140625p-848] 

; mpf : + 2056827774148321 -848
; mpfd: + 2056827774148321 -848 (7.76133e-256) class: Pos. norm. non-zero
; hwf : + 2056827774148321 -848 (7.76133e-256) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010101111 #b0111010011101010110010001000110101111001111011100001)))
(assert (= y (fp #b1 #b11100110110 #b0111110001000010000110101100001101101100110011001101)))
(assert (= r (fp #b0 #b00010101111 #b0111010011101010110010001000110101111001111011100001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
