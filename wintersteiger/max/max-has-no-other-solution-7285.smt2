(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.63951706721060563864966752589680254459381103515625p431 {- 2880128825586756 431 (-9.09168e+129)}
; Y = -1.7910577896761348259957458139979280531406402587890625p796 {- 3562607566813969 796 (-7.46425e+239)}
; -1.63951706721060563864966752589680254459381103515625p431 M -1.7910577896761348259957458139979280531406402587890625p796 == -1.63951706721060563864966752589680254459381103515625p431
; [HW: -1.63951706721060563864966752589680254459381103515625p431] 

; mpf : - 2880128825586756 431
; mpfd: - 2880128825586756 431 (-9.09168e+129) class: Neg. norm. non-zero
; hwf : - 2880128825586756 431 (-9.09168e+129) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110101110 #b1010001110110111011000111111100011100111010001000100)))
(assert (= y (fp #b1 #b11100011011 #b1100101010000010110000110110011111100111101100010001)))
(assert (= r (fp #b1 #b10110101110 #b1010001110110111011000111111100011100111010001000100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
