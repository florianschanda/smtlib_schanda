(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.853760106894898118667924791225232183933258056640625p836 {- 3844993699275658 836 (-8.49435e+251)}
; Y = 1.9957914917185142211764059538836590945720672607421875p-140 {+ 4484646191042211 -140 (1.43191e-042)}
; -1.853760106894898118667924791225232183933258056640625p836 M 1.9957914917185142211764059538836590945720672607421875p-140 == 1.9957914917185142211764059538836590945720672607421875p-140
; [HW: 1.9957914917185142211764059538836590945720672607421875p-140] 

; mpf : + 4484646191042211 -140
; mpfd: + 4484646191042211 -140 (1.43191e-042) class: Pos. norm. non-zero
; hwf : + 4484646191042211 -140 (1.43191e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000011 #b1101101010010000000001011011100110111110001110001010)))
(assert (= y (fp #b0 #b01101110011 #b1111111011101100001100001111001010010000111010100011)))
(assert (= r (fp #b0 #b01101110011 #b1111111011101100001100001111001010010000111010100011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
