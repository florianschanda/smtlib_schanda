(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8059391281426666608922460000030696392059326171875p-731 {- 3629627157186616 -731 (-1.59873e-220)}
; Y = -1.4764806667582137666983044255175627768039703369140625p-124 {- 2145878153261537 -124 (-6.94238e-038)}
; -1.8059391281426666608922460000030696392059326171875p-731 M -1.4764806667582137666983044255175627768039703369140625p-124 == -1.8059391281426666608922460000030696392059326171875p-731
; [HW: -1.8059391281426666608922460000030696392059326171875p-731] 

; mpf : - 3629627157186616 -731
; mpfd: - 3629627157186616 -731 (-1.59873e-220) class: Neg. norm. non-zero
; hwf : - 3629627157186616 -731 (-1.59873e-220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100100100 #b1100111001010010000001101101010111110000100000111000)))
(assert (= y (fp #b1 #b01110000011 #b0111100111111010101000110001000011100111000111100001)))
(assert (= r (fp #b1 #b00100100100 #b1100111001010010000001101101010111110000100000111000)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
