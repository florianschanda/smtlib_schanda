(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4199270357804023579006980071426369249820709228515625p-417 {- 1891183241863417 -417 (-4.19525e-126)}
; Y = 1.1355138971928433466729302381281740963459014892578125p-725 {+ 610300336901213 -725 (6.43347e-219)}
; -1.4199270357804023579006980071426369249820709228515625p-417 M 1.1355138971928433466729302381281740963459014892578125p-725 == 1.1355138971928433466729302381281740963459014892578125p-725
; [HW: 1.1355138971928433466729302381281740963459014892578125p-725] 

; mpf : + 610300336901213 -725
; mpfd: + 610300336901213 -725 (6.43347e-219) class: Pos. norm. non-zero
; hwf : + 610300336901213 -725 (6.43347e-219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001011110 #b0110101110000000010101101001010101100010000011111001)))
(assert (= y (fp #b0 #b00100101010 #b0010001010110001000010011110110010011000110001011101)))
(assert (= r (fp #b0 #b00100101010 #b0010001010110001000010011110110010011000110001011101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
