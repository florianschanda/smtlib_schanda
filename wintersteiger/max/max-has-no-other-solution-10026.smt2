(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1168199414961377247124119094223715364933013916015625p749 {- 526110244991449 749 (-3.30712e+225)}
; Y = 1.2682589107793267313439855570322833955287933349609375p391 {+ 1208130730624591 391 (6.39641e+117)}
; -1.1168199414961377247124119094223715364933013916015625p749 M 1.2682589107793267313439855570322833955287933349609375p391 == 1.2682589107793267313439855570322833955287933349609375p391
; [HW: 1.2682589107793267313439855570322833955287933349609375p391] 

; mpf : + 1208130730624591 391
; mpfd: + 1208130730624591 391 (6.39641e+117) class: Pos. norm. non-zero
; hwf : + 1208130730624591 391 (6.39641e+117) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011101100 #b0001110111100111111010010110010000111111000111011001)))
(assert (= y (fp #b0 #b10110000110 #b0100010010101100100111011011000010101000011001001111)))
(assert (= r (fp #b0 #b10110000110 #b0100010010101100100111011011000010101000011001001111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
