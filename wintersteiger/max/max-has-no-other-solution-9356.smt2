(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1196505868065427247159959733835421502590179443359375p-883 {- 538858338156607 -883 (-1.73619e-266)}
; Y = 1.861396981443987019844144015223719179630279541015625p-22 {+ 3879387124649210 -22 (4.43792e-007)}
; -1.1196505868065427247159959733835421502590179443359375p-883 M 1.861396981443987019844144015223719179630279541015625p-22 == 1.861396981443987019844144015223719179630279541015625p-22
; [HW: 1.861396981443987019844144015223719179630279541015625p-22] 

; mpf : + 3879387124649210 -22
; mpfd: + 3879387124649210 -22 (4.43792e-007) class: Pos. norm. non-zero
; hwf : + 3879387124649210 -22 (4.43792e-007) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010001100 #b0001111010100001011010111011110101001000000000111111)))
(assert (= y (fp #b0 #b01111101001 #b1101110010000100100000110011100000101100110011111010)))
(assert (= r (fp #b0 #b01111101001 #b1101110010000100100000110011100000101100110011111010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
