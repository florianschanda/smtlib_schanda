(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.468317056711216483932957999058999121189117431640625p-57 {+ 2109112522095882 -57 (1.01885e-017)}
; Y = -1.46201945775327768473061951226554811000823974609375p133 {- 2080750657775580 133 (-1.592e+040)}
; 1.468317056711216483932957999058999121189117431640625p-57 M -1.46201945775327768473061951226554811000823974609375p133 == 1.468317056711216483932957999058999121189117431640625p-57
; [HW: 1.468317056711216483932957999058999121189117431640625p-57] 

; mpf : + 2109112522095882 -57
; mpfd: + 2109112522095882 -57 (1.01885e-017) class: Pos. norm. non-zero
; hwf : + 2109112522095882 -57 (1.01885e-017) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000110 #b0111011111100011101000000110101010111011110100001010)))
(assert (= y (fp #b1 #b10010000100 #b0111011001000110111010000011110100101010011111011100)))
(assert (= r (fp #b0 #b01111000110 #b0111011111100011101000000110101010111011110100001010)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
