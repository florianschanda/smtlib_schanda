(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.667752298334648219935161250759847462177276611328125p156 {+ 3007289001955714 156 (1.52339e+047)}
; Y = -1.7548286035948998939915099981590174138545989990234375p-221 {- 3399445817878583 -221 (-5.20722e-067)}
; 1.667752298334648219935161250759847462177276611328125p156 M -1.7548286035948998939915099981590174138545989990234375p-221 == 1.667752298334648219935161250759847462177276611328125p156
; [HW: 1.667752298334648219935161250759847462177276611328125p156] 

; mpf : + 3007289001955714 156
; mpfd: + 3007289001955714 156 (1.52339e+047) class: Pos. norm. non-zero
; hwf : + 3007289001955714 156 (1.52339e+047) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011011 #b1010101011110001110100001000101100101101000110000010)))
(assert (= y (fp #b1 #b01100100010 #b1100000100111100011100101000011010000110100000110111)))
(assert (= r (fp #b0 #b10010011011 #b1010101011110001110100001000101100101101000110000010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
