(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7088653410001162225029247565544210374355316162109375p-743 {- 3192445685583983 -743 (-3.69336e-224)}
; Y = -1.1851522183622080763854000906576402485370635986328125p-909 {- 833851461622861 -909 (-2.73847e-274)}
; -1.7088653410001162225029247565544210374355316162109375p-743 M -1.1851522183622080763854000906576402485370635986328125p-909 == -1.1851522183622080763854000906576402485370635986328125p-909
; [HW: -1.1851522183622080763854000906576402485370635986328125p-909] 

; mpf : - 833851461622861 -909
; mpfd: - 833851461622861 -909 (-2.73847e-274) class: Neg. norm. non-zero
; hwf : - 833851461622861 -909 (-2.73847e-274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011000 #b1011010101111000001100101111000011011101000001101111)))
(assert (= y (fp #b1 #b00001110010 #b0010111101100110001000101100001010100101110001001101)))
(assert (= r (fp #b1 #b00001110010 #b0010111101100110001000101100001010100101110001001101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
