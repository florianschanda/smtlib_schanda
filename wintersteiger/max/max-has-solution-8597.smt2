(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.484949707567028820420773627120070159435272216796875p-239 {- 2184019322292302 -239 (-1.6809e-072)}
; Y = 1.5826081860341558726901212139637209475040435791015625p-174 {+ 2623834009526425 -174 (6.60928e-053)}
; -1.484949707567028820420773627120070159435272216796875p-239 M 1.5826081860341558726901212139637209475040435791015625p-174 == 1.5826081860341558726901212139637209475040435791015625p-174
; [HW: 1.5826081860341558726901212139637209475040435791015625p-174] 

; mpf : + 2623834009526425 -174
; mpfd: + 2623834009526425 -174 (6.60928e-053) class: Pos. norm. non-zero
; hwf : + 2623834009526425 -174 (6.60928e-053) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010000 #b0111110000100101101010011111111000110100100001001110)))
(assert (= y (fp #b0 #b01101010001 #b1001010100100101110011110110000101100110000010011001)))
(assert (= r (fp #b0 #b01101010001 #b1001010100100101110011110110000101100110000010011001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
