(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8528050154600290699846709685516543686389923095703125p-28 {+ 3840692349845477 -28 (6.90224e-009)}
; Y = -1.8071930800348761092521954196854494512081146240234375p-761 {- 3635274454461111 -761 (-1.48997e-229)}
; 1.8528050154600290699846709685516543686389923095703125p-28 M -1.8071930800348761092521954196854494512081146240234375p-761 == 1.8528050154600290699846709685516543686389923095703125p-28
; [HW: 1.8528050154600290699846709685516543686389923095703125p-28] 

; mpf : + 3840692349845477 -28
; mpfd: + 3840692349845477 -28 (6.90224e-009) class: Pos. norm. non-zero
; hwf : + 3840692349845477 -28 (6.90224e-009) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111100011 #b1101101001010001011011011111001101000011111111100101)))
(assert (= y (fp #b1 #b00100000110 #b1100111010100100001101001010100001001110101010110111)))
(assert (= r (fp #b0 #b01111100011 #b1101101001010001011011011111001101000011111111100101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
