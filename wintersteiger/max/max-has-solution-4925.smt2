(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7608393442572032316917329808347858488559722900390625p951 {+ 3426515787285553 951 (3.35155e+286)}
; Y = -1.9247538337527900775825173695920966565608978271484375p464 {- 4164721021098503 464 (-9.16839e+139)}
; 1.7608393442572032316917329808347858488559722900390625p951 M -1.9247538337527900775825173695920966565608978271484375p464 == 1.7608393442572032316917329808347858488559722900390625p951
; [HW: 1.7608393442572032316917329808347858488559722900390625p951] 

; mpf : + 3426515787285553 951
; mpfd: + 3426515787285553 951 (3.35155e+286) class: Pos. norm. non-zero
; hwf : + 3426515787285553 951 (3.35155e+286) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110110110 #b1100001011000110010111100000010100011000010000110001)))
(assert (= y (fp #b1 #b10111001111 #b1110110010111100101010101101000011010001101000000111)))
(assert (= r (fp #b0 #b11110110110 #b1100001011000110010111100000010100011000010000110001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
