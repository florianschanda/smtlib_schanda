(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3808679511906820636113479849882423877716064453125p899 {+ 1715276763059720 899 (5.83604e+270)}
; Y = -1.2963519871135955607854839399806223809719085693359375p-837 {- 1334650698735295 -837 (-1.41454e-252)}
; 1.3808679511906820636113479849882423877716064453125p899 M -1.2963519871135955607854839399806223809719085693359375p-837 == 1.3808679511906820636113479849882423877716064453125p899
; [HW: 1.3808679511906820636113479849882423877716064453125p899] 

; mpf : + 1715276763059720 899
; mpfd: + 1715276763059720 899 (5.83604e+270) class: Pos. norm. non-zero
; hwf : + 1715276763059720 899 (5.83604e+270) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110000010 #b0110000110000000100011111110001001110101011000001000)))
(assert (= y (fp #b1 #b00010111010 #b0100101111011101101110010100110011000001111010111111)))
(assert (= r (fp #b0 #b11110000010 #b0110000110000000100011111110001001110101011000001000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
