(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.982748688253361368794003283255733549594879150390625p-845 {- 4425906626216682 -845 (-8.45126e-255)}
; Y = 1.3936886665822765252187309670262038707733154296875p-207 {+ 1773016132119928 -207 (6.77574e-063)}
; -1.982748688253361368794003283255733549594879150390625p-845 M 1.3936886665822765252187309670262038707733154296875p-207 == 1.3936886665822765252187309670262038707733154296875p-207
; [HW: 1.3936886665822765252187309670262038707733154296875p-207] 

; mpf : + 1773016132119928 -207
; mpfd: + 1773016132119928 -207 (6.77574e-063) class: Pos. norm. non-zero
; hwf : + 1773016132119928 -207 (6.77574e-063) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110010 #b1111101110010101011010110000010000111100001011101010)))
(assert (= y (fp #b0 #b01100110000 #b0110010011001000110001111100101111000110110101111000)))
(assert (= r (fp #b0 #b01100110000 #b0110010011001000110001111100101111000110110101111000)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
