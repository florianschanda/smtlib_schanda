(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.7667778390491850615262592327781021595001220703125p-523 {- 3453260390217864 -523 (-6.43419e-158)}
; Y = -1.076426790069695105245273225591517984867095947265625p333 {- 344195663279002 333 (-1.88353e+100)}
; -1.7667778390491850615262592327781021595001220703125p-523 M -1.076426790069695105245273225591517984867095947265625p333 == -1.7667778390491850615262592327781021595001220703125p-523
; [HW: -1.7667778390491850615262592327781021595001220703125p-523] 

; mpf : - 3453260390217864 -523
; mpfd: - 3453260390217864 -523 (-6.43419e-158) class: Neg. norm. non-zero
; hwf : - 3453260390217864 -523 (-6.43419e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110100 #b1100010001001011100011010110111000000011100010001000)))
(assert (= y (fp #b1 #b10101001100 #b0001001110010000101101001100001111100011001110011010)))
(assert (= r (fp #b1 #b00111110100 #b1100010001001011100011010110111000000011100010001000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
