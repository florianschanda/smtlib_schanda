(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9048505003740616725593781666248105466365814208984375p-458 {+ 4075084376310631 -458 (2.55931e-138)}
; Y = 1.2762687695736294468673577284789644181728363037109375p349 {+ 1244203927705903 349 (1.46356e+105)}
; 1.9048505003740616725593781666248105466365814208984375p-458 M 1.2762687695736294468673577284789644181728363037109375p349 == 1.2762687695736294468673577284789644181728363037109375p349
; [HW: 1.2762687695736294468673577284789644181728363037109375p349] 

; mpf : + 1244203927705903 349
; mpfd: + 1244203927705903 349 (1.46356e+105) class: Pos. norm. non-zero
; hwf : + 1244203927705903 349 (1.46356e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110101 #b1110011110100100010010000100101011100000001101100111)))
(assert (= y (fp #b0 #b10101011100 #b0100011010111001100011001101001000111001100100101111)))
(assert (= r (fp #b0 #b10101011100 #b0100011010111001100011001101001000111001100100101111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
