(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.892852075733248540245767799206078052520751953125p10 {- 4021048275569232 10 (-1938.28)}
; Y = -1.864312178531413177751119292224757373332977294921875p338 {- 3892516005165854 338 (-1.0439e+102)}
; -1.892852075733248540245767799206078052520751953125p10 M -1.864312178531413177751119292224757373332977294921875p338 == -1.892852075733248540245767799206078052520751953125p10
; [HW: -1.892852075733248540245767799206078052520751953125p10] 

; mpf : - 4021048275569232 10
; mpfd: - 4021048275569232 10 (-1938.28) class: Neg. norm. non-zero
; hwf : - 4021048275569232 10 (-1938.28) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000001001 #b1110010010010001111101000010000101110000101001010000)))
(assert (= y (fp #b1 #b10101010001 #b1101110101000011100100000001110001010011101100011110)))
(assert (= r (fp #b1 #b10000001001 #b1110010010010001111101000010000101110000101001010000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
