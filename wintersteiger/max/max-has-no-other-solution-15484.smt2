(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.096131015268335229251306373043917119503021240234375p-313 {- 432935604541222 -313 (-6.56862e-095)}
; Y = 1.145896966420601348346508530084975063800811767578125p69 {+ 657061523606306 69 (6.76418e+020)}
; -1.096131015268335229251306373043917119503021240234375p-313 M 1.145896966420601348346508530084975063800811767578125p69 == 1.145896966420601348346508530084975063800811767578125p69
; [HW: 1.145896966420601348346508530084975063800811767578125p69] 

; mpf : + 657061523606306 69
; mpfd: + 657061523606306 69 (6.76418e+020) class: Pos. norm. non-zero
; hwf : + 657061523606306 69 (6.76418e+020) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011000110 #b0001100010011100000010101100111010110101011100100110)))
(assert (= y (fp #b0 #b10001000100 #b0010010101011001100000001110101101011100101100100010)))
(assert (= r (fp #b0 #b10001000100 #b0010010101011001100000001110101101011100101100100010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
