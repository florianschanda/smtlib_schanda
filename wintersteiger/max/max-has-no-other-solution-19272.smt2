(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7941116302066750787247428888804279267787933349609375p162 {+ 3576360841889359 162 (1.04884e+049)}
; Y = -1.25273871088300925435987664968706667423248291015625p570 {- 1138233964154820 570 (-4.84126e+171)}
; 1.7941116302066750787247428888804279267787933349609375p162 M -1.25273871088300925435987664968706667423248291015625p570 == 1.7941116302066750787247428888804279267787933349609375p162
; [HW: 1.7941116302066750787247428888804279267787933349609375p162] 

; mpf : + 3576360841889359 162
; mpfd: + 3576360841889359 162 (1.04884e+049) class: Pos. norm. non-zero
; hwf : + 3576360841889359 162 (1.04884e+049) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010100001 #b1100101101001010111001100101100100011100011001001111)))
(assert (= y (fp #b1 #b11000111001 #b0100000010110011011110111111000110101100111111000100)))
(assert (= r (fp #b0 #b10010100001 #b1100101101001010111001100101100100011100011001001111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
