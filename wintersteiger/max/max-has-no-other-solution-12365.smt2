(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2112654945796401673163700252189300954341888427734375p862 {+ 951455202665111 862 (3.72474e+259)}
; Y = -1.2466175952656974867949202234740369021892547607421875p340 {- 1110666910141603 340 (-2.79211e+102)}
; 1.2112654945796401673163700252189300954341888427734375p862 M -1.2466175952656974867949202234740369021892547607421875p340 == 1.2112654945796401673163700252189300954341888427734375p862
; [HW: 1.2112654945796401673163700252189300954341888427734375p862] 

; mpf : + 951455202665111 862
; mpfd: + 951455202665111 862 (3.72474e+259) class: Pos. norm. non-zero
; hwf : + 951455202665111 862 (3.72474e+259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101011101 #b0011011000010101011111101101010111111110001010010111)))
(assert (= y (fp #b1 #b10101010011 #b0011111100100010010101001010101001001000110010100011)))
(assert (= r (fp #b0 #b11101011101 #b0011011000010101011111101101010111111110001010010111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
