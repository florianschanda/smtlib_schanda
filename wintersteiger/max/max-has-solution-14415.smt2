(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2742691595845834218181380492751486599445343017578125p650 {- 1235198484904349 650 (-5.95331e+195)}
; Y = -1.7039209895468678812591178939328528940677642822265625p-307 {- 3170178306221545 -307 (-6.53493e-093)}
; -1.2742691595845834218181380492751486599445343017578125p650 M -1.7039209895468678812591178939328528940677642822265625p-307 == -1.7039209895468678812591178939328528940677642822265625p-307
; [HW: -1.7039209895468678812591178939328528940677642822265625p-307] 

; mpf : - 3170178306221545 -307
; mpfd: - 3170178306221545 -307 (-6.53493e-093) class: Neg. norm. non-zero
; hwf : - 3170178306221545 -307 (-6.53493e-093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010001001 #b0100011000110110100000001110111010110111100110011101)))
(assert (= y (fp #b1 #b01011001100 #b1011010000110100001010100111110100010010010111101001)))
(assert (= r (fp #b1 #b01011001100 #b1011010000110100001010100111110100010010010111101001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
