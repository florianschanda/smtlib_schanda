(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9647053769437989867441274327575229108333587646484375p778 {- 4344646776126407 778 (-3.12345e+234)}
; Y = 1.980606888781174301783494229312054812908172607421875p278 {+ 4416260818911838 278 (9.61916e+083)}
; -1.9647053769437989867441274327575229108333587646484375p778 M 1.980606888781174301783494229312054812908172607421875p278 == 1.980606888781174301783494229312054812908172607421875p278
; [HW: 1.980606888781174301783494229312054812908172607421875p278] 

; mpf : + 4416260818911838 278
; mpfd: + 4416260818911838 278 (9.61916e+083) class: Pos. norm. non-zero
; hwf : + 4416260818911838 278 (9.61916e+083) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100001001 #b1111011011110110111011100111110000111111101111000111)))
(assert (= y (fp #b0 #b10100010101 #b1111101100001001000011011001010110001100001001011110)))
(assert (= r (fp #b0 #b10100010101 #b1111101100001001000011011001010110001100001001011110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
