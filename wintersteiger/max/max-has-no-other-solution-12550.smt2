(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.27425358108644903865069863968528807163238525390625p708 {+ 1235128325585956 708 (1.7159e+213)}
; Y = 1.403124147888842099263229101779870688915252685546875p-355 {+ 1815509762216238 -355 (1.91182e-107)}
; 1.27425358108644903865069863968528807163238525390625p708 M 1.403124147888842099263229101779870688915252685546875p-355 == 1.27425358108644903865069863968528807163238525390625p708
; [HW: 1.27425358108644903865069863968528807163238525390625p708] 

; mpf : + 1235128325585956 708
; mpfd: + 1235128325585956 708 (1.7159e+213) class: Pos. norm. non-zero
; hwf : + 1235128325585956 708 (1.7159e+213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011000011 #b0100011000110101011110111001000110010011110000100100)))
(assert (= y (fp #b0 #b01010011100 #b0110011100110011001001001110011101101001000100101110)))
(assert (= r (fp #b0 #b11011000011 #b0100011000110101011110111001000110010011110000100100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
