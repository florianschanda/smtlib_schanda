(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.398958051334151964084639985230751335620880126953125p-990 {+ 1796747331324946 -990 (1.33693e-298)}
; Y = 1.2544216026835093291680323090986348688602447509765625p430 {+ 1145813035040457 430 (3.4781e+129)}
; 1.398958051334151964084639985230751335620880126953125p-990 M 1.2544216026835093291680323090986348688602447509765625p430 == 1.2544216026835093291680323090986348688602447509765625p430
; [HW: 1.2544216026835093291680323090986348688602447509765625p430] 

; mpf : + 1145813035040457 430
; mpfd: + 1145813035040457 430 (3.4781e+129) class: Pos. norm. non-zero
; hwf : + 1145813035040457 430 (3.4781e+129) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100001 #b0110011000100010000111010110011011110100110000010010)))
(assert (= y (fp #b0 #b10110101101 #b0100000100100001110001100010111011101011111011001001)))
(assert (= r (fp #b0 #b10110101101 #b0100000100100001110001100010111011101011111011001001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
