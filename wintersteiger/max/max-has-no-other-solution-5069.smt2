(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.077294017537715031807010745978914201259613037109375p845 {+ 348101308580822 845 (2.52744e+254)}
; Y = 1.3981410349230320999680543536669574677944183349609375p865 {+ 1793067816520271 865 (3.43952e+260)}
; 1.077294017537715031807010745978914201259613037109375p845 M 1.3981410349230320999680543536669574677944183349609375p865 == 1.3981410349230320999680543536669574677944183349609375p865
; [HW: 1.3981410349230320999680543536669574677944183349609375p865] 

; mpf : + 1793067816520271 865
; mpfd: + 1793067816520271 865 (3.43952e+260) class: Pos. norm. non-zero
; hwf : + 1793067816520271 865 (3.43952e+260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001100 #b0001001111001001100010100110110110000000001111010110)))
(assert (= y (fp #b0 #b11101100000 #b0110010111101100100100100010010000110000101001001111)))
(assert (= r (fp #b0 #b11101100000 #b0110010111101100100100100010010000110000101001001111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
