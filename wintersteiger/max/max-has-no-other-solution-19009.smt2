(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.012748465468708669590114368475042283535003662109375p-766 {- 57413984334422 -766 (-2.60931e-231)}
; Y = 1.4294172577898829334941410706960596144199371337890625p601 {+ 1933923402168977 601 (1.18628e+181)}
; -1.012748465468708669590114368475042283535003662109375p-766 M 1.4294172577898829334941410706960596144199371337890625p601 == 1.4294172577898829334941410706960596144199371337890625p601
; [HW: 1.4294172577898829334941410706960596144199371337890625p601] 

; mpf : + 1933923402168977 601
; mpfd: + 1933923402168977 601 (1.18628e+181) class: Pos. norm. non-zero
; hwf : + 1933923402168977 601 (1.18628e+181) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100000001 #b0000001101000011011110111100001001000011001001010110)))
(assert (= y (fp #b0 #b11001011000 #b0110110111101110010010100001011010001011101010010001)))
(assert (= r (fp #b0 #b11001011000 #b0110110111101110010010100001011010001011101010010001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
