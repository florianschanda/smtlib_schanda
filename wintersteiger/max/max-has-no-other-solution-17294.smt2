(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7242806424380290319930963960359804332256317138671875p-399 {+ 3261870031395571 -399 (1.33549e-120)}
; Y = -1.50232204433902527540567461983300745487213134765625p426 {- 2262257371705220 426 (-2.6034e+128)}
; 1.7242806424380290319930963960359804332256317138671875p-399 M -1.50232204433902527540567461983300745487213134765625p426 == 1.7242806424380290319930963960359804332256317138671875p-399
; [HW: 1.7242806424380290319930963960359804332256317138671875p-399] 

; mpf : + 3261870031395571 -399
; mpfd: + 3261870031395571 -399 (1.33549e-120) class: Pos. norm. non-zero
; hwf : + 3261870031395571 -399 (1.33549e-120) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001110000 #b1011100101101010011101001100100001100101101011110011)))
(assert (= y (fp #b1 #b10110101001 #b1000000010011000001011010111000001111110111110000100)))
(assert (= r (fp #b0 #b01001110000 #b1011100101101010011101001100100001100101101011110011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
