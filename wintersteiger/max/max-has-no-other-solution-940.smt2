(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0334657204300825572573785393615253269672393798828125p127 {+ 150716206058605 127 (1.75835e+038)}
; Y = -1.2457020218660164179169669296243228018283843994140625p-888 {- 1106543534119969 -888 (-6.0364e-268)}
; 1.0334657204300825572573785393615253269672393798828125p127 M -1.2457020218660164179169669296243228018283843994140625p-888 == 1.0334657204300825572573785393615253269672393798828125p127
; [HW: 1.0334657204300825572573785393615253269672393798828125p127] 

; mpf : + 150716206058605 127
; mpfd: + 150716206058605 127 (1.75835e+038) class: Pos. norm. non-zero
; hwf : + 150716206058605 127 (1.75835e+038) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111110 #b0000100010010001001101011001111011001000110001101101)))
(assert (= y (fp #b1 #b00010000111 #b0011111011100110010100111110010001111001110000100001)))
(assert (= r (fp #b0 #b10001111110 #b0000100010010001001101011001111011001000110001101101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
