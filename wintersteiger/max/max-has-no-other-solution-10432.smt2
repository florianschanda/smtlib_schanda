(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.953787491150533295325431026867590844631195068359375p96 {- 4295476989736182 96 (-1.54795e+029)}
; Y = 1.5773538037516601217902234566281549632549285888671875p-189 {+ 2600170375436915 -189 (2.0103e-057)}
; -1.953787491150533295325431026867590844631195068359375p96 M 1.5773538037516601217902234566281549632549285888671875p-189 == 1.5773538037516601217902234566281549632549285888671875p-189
; [HW: 1.5773538037516601217902234566281549632549285888671875p-189] 

; mpf : + 2600170375436915 -189
; mpfd: + 2600170375436915 -189 (2.0103e-057) class: Pos. norm. non-zero
; hwf : + 2600170375436915 -189 (2.0103e-057) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011111 #b1111010000101011011010101100000111010011010011110110)))
(assert (= y (fp #b0 #b01101000010 #b1001001111001101011101010111100101010101101001110011)))
(assert (= r (fp #b0 #b01101000010 #b1001001111001101011101010111100101010101101001110011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
