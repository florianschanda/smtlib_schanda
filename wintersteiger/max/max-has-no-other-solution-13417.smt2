(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.84761935174515112834114916040562093257904052734375p-35 {+ 3817338196671484 -35 (5.37728e-011)}
; Y = -1.0444670532386248762435343451215885579586029052734375p-661 {- 200261804395735 -661 (-1.09161e-199)}
; 1.84761935174515112834114916040562093257904052734375p-35 M -1.0444670532386248762435343451215885579586029052734375p-661 == 1.84761935174515112834114916040562093257904052734375p-35
; [HW: 1.84761935174515112834114916040562093257904052734375p-35] 

; mpf : + 3817338196671484 -35
; mpfd: + 3817338196671484 -35 (5.37728e-011) class: Pos. norm. non-zero
; hwf : + 3817338196671484 -35 (5.37728e-011) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111011100 #b1101100011111101100101001111001100110011101111111100)))
(assert (= y (fp #b1 #b00101101010 #b0000101101100010001100010101101101101000110011010111)))
(assert (= r (fp #b0 #b01111011100 #b1101100011111101100101001111001100110011101111111100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
