(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5502274968317018011276786637608893215656280517578125p597 {+ 2478004349700253 597 (8.04087e+179)}
; Y = -1.502574551962022386675243978970684111118316650390625p545 {- 2263394564942058 545 (-1.73055e+164)}
; 1.5502274968317018011276786637608893215656280517578125p597 M -1.502574551962022386675243978970684111118316650390625p545 == 1.5502274968317018011276786637608893215656280517578125p597
; [HW: 1.5502274968317018011276786637608893215656280517578125p597] 

; mpf : + 2478004349700253 597
; mpfd: + 2478004349700253 597 (8.04087e+179) class: Pos. norm. non-zero
; hwf : + 2478004349700253 597 (8.04087e+179) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001010100 #b1000110011011011101101011001000001000000100010011101)))
(assert (= y (fp #b1 #b11000100000 #b1000000010101000101110011101000001111010100011101010)))
(assert (= r (fp #b0 #b11001010100 #b1000110011011011101101011001000001000000100010011101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
