(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.127058577487719759346873615868389606475830078125p-813 {- 572220962227920 -813 (-2.06329e-245)}
; Y = 1.4115263537314295394509144898620434105396270751953125p-1007 {+ 1853349933318005 -1007 (1.02916e-303)}
; -1.127058577487719759346873615868389606475830078125p-813 M 1.4115263537314295394509144898620434105396270751953125p-1007 == 1.4115263537314295394509144898620434105396270751953125p-1007
; [HW: 1.4115263537314295394509144898620434105396270751953125p-1007] 

; mpf : + 1853349933318005 -1007
; mpfd: + 1853349933318005 -1007 (1.02916e-303) class: Pos. norm. non-zero
; hwf : + 1853349933318005 -1007 (1.02916e-303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010010 #b0010000010000110111010010011001011111100011011010000)))
(assert (= y (fp #b0 #b00000010000 #b0110100101011001110010101000011010110111111101110101)))
(assert (= r (fp #b0 #b00000010000 #b0110100101011001110010101000011010110111111101110101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
