(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5876064551640969302326311662909574806690216064453125p615 {+ 2646344212517525 615 (2.15869e+185)}
; Y = -1.5626302602038197875344849308021366596221923828125p-61 {- 2533861430201288 -61 (-6.77683e-019)}
; 1.5876064551640969302326311662909574806690216064453125p615 M -1.5626302602038197875344849308021366596221923828125p-61 == 1.5876064551640969302326311662909574806690216064453125p615
; [HW: 1.5876064551640969302326311662909574806690216064453125p615] 

; mpf : + 2646344212517525 615
; mpfd: + 2646344212517525 615 (2.15869e+185) class: Pos. norm. non-zero
; hwf : + 2646344212517525 615 (2.15869e+185) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001100110 #b1001011001101101011000000110101111011001001010010101)))
(assert (= y (fp #b1 #b01111000010 #b1001000000001000100010010110011101010000101111001000)))
(assert (= r (fp #b0 #b11001100110 #b1001011001101101011000000110101111011001001010010101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
