(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5941625307172955228196542520890943706035614013671875p43 {+ 2675870151935923 43 (1.40224e+013)}
; Y = 1.3041162700441859545463785252650268375873565673828125p767 {+ 1369617920448301 767 (1.01233e+231)}
; 1.5941625307172955228196542520890943706035614013671875p43 M 1.3041162700441859545463785252650268375873565673828125p767 == 1.3041162700441859545463785252650268375873565673828125p767
; [HW: 1.3041162700441859545463785252650268375873565673828125p767] 

; mpf : + 1369617920448301 767
; mpfd: + 1369617920448301 767 (1.01233e+231) class: Pos. norm. non-zero
; hwf : + 1369617920448301 767 (1.01233e+231) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000101010 #b1001100000011011000010010001110111110000011110110011)))
(assert (= y (fp #b0 #b11011111110 #b0100110111011010100100000101101000000101011100101101)))
(assert (= r (fp #b0 #b11011111110 #b0100110111011010100100000101101000000101011100101101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
