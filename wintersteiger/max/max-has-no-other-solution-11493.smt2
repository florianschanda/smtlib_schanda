(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.3255107585581027418442090493044815957546234130859375p366 {+ 1465970130947359 366 (1.99233e+110)}
; Y = -1.351792685142083616511854415875859558582305908203125p159 {- 1584333405717554 159 (-9.87824e+047)}
; 1.3255107585581027418442090493044815957546234130859375p366 M -1.351792685142083616511854415875859558582305908203125p159 == 1.3255107585581027418442090493044815957546234130859375p366
; [HW: 1.3255107585581027418442090493044815957546234130859375p366] 

; mpf : + 1465970130947359 366
; mpfd: + 1465970130947359 366 (1.99233e+110) class: Pos. norm. non-zero
; hwf : + 1465970130947359 366 (1.99233e+110) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101101 #b0101001101010100101011000100111010000000110100011111)))
(assert (= y (fp #b1 #b10010011110 #b0101101000001111000101011101110110101000010000110010)))
(assert (= r (fp #b0 #b10101101101 #b0101001101010100101011000100111010000000110100011111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
