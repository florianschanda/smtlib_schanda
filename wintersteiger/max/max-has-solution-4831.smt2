(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.992532129718919353678074912750162184238433837890625p706 {+ 4469967329555370 706 (6.70783e+212)}
; Y = 1.8446572118859678734992257886915467679500579833984375p827 {+ 3803997904705447 827 (1.65091e+249)}
; 1.992532129718919353678074912750162184238433837890625p706 M 1.8446572118859678734992257886915467679500579833984375p827 == 1.8446572118859678734992257886915467679500579833984375p827
; [HW: 1.8446572118859678734992257886915467679500579833984375p827] 

; mpf : + 3803997904705447 827
; mpfd: + 3803997904705447 827 (1.65091e+249) class: Pos. norm. non-zero
; hwf : + 3803997904705447 827 (1.65091e+249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011000001 #b1111111000010110100101011110110101011111001110101010)))
(assert (= y (fp #b0 #b11100111010 #b1101100000111011011101000111110101100001011110100111)))
(assert (= r (fp #b0 #b11100111010 #b1101100000111011011101000111110101100001011110100111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
