(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6495943615881378807586088441894389688968658447265625p377 {- 2925512924790313 377 (-5.07792e+113)}
; Y = 1.0191699458134786393515014424338005483150482177734375p973 {+ 86333760822295 973 (8.1364e+292)}
; -1.6495943615881378807586088441894389688968658447265625p377 M 1.0191699458134786393515014424338005483150482177734375p973 == 1.0191699458134786393515014424338005483150482177734375p973
; [HW: 1.0191699458134786393515014424338005483150482177734375p973] 

; mpf : + 86333760822295 973
; mpfd: + 86333760822295 973 (8.1364e+292) class: Pos. norm. non-zero
; hwf : + 86333760822295 973 (8.1364e+292) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101111000 #b1010011001001011110100001110101010101111111000101001)))
(assert (= y (fp #b0 #b11111001100 #b0000010011101000010100100101001001010101110000010111)))
(assert (= r (fp #b0 #b11111001100 #b0000010011101000010100100101001001010101110000010111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
