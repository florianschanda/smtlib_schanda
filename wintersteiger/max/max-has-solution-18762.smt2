(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4701489585794946801655669332831166684627532958984375p-382 {+ 2117362674667239 -382 (1.49246e-115)}
; Y = -1.4796563232228023831993368730763904750347137451171875p-697 {- 2160180038532115 -697 (-2.25037e-210)}
; 1.4701489585794946801655669332831166684627532958984375p-382 M -1.4796563232228023831993368730763904750347137451171875p-697 == 1.4701489585794946801655669332831166684627532958984375p-382
; [HW: 1.4701489585794946801655669332831166684627532958984375p-382] 

; mpf : + 2117362674667239 -382
; mpfd: + 2117362674667239 -382 (1.49246e-115) class: Pos. norm. non-zero
; hwf : + 2117362674667239 -382 (1.49246e-115) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010000001 #b0111100001011011101011101010000101011000111011100111)))
(assert (= y (fp #b1 #b00101000110 #b0111101011001010110000011011110110001111110000010011)))
(assert (= r (fp #b0 #b01010000001 #b0111100001011011101011101010000101011000111011100111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
