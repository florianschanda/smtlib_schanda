(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.28966707737561758762012686929665505886077880859375p257 {+ 1304544541730332 257 (2.98666e+077)}
; Y = 1.6247193795771466273691885362495668232440948486328125p-991 {+ 2813485965074765 -991 (7.76341e-299)}
; 1.28966707737561758762012686929665505886077880859375p257 M 1.6247193795771466273691885362495668232440948486328125p-991 == 1.28966707737561758762012686929665505886077880859375p257
; [HW: 1.28966707737561758762012686929665505886077880859375p257] 

; mpf : + 1304544541730332 257
; mpfd: + 1304544541730332 257 (2.98666e+077) class: Pos. norm. non-zero
; hwf : + 1304544541730332 257 (2.98666e+077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000000 #b0100101000100111100111110010000000001110011000011100)))
(assert (= y (fp #b0 #b00000100000 #b1001111111101101100110111111100001110110000101001101)))
(assert (= r (fp #b0 #b10100000000 #b0100101000100111100111110010000000001110011000011100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
