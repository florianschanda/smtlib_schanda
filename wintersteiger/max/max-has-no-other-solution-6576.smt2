(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8402153889529568875360610036295838654041290283203125p90 {- 3783993712599493 90 (-2.27808e+027)}
; Y = 1.0772105999761840688933034471119754016399383544921875p799 {+ 347725629281795 799 (3.59143e+240)}
; -1.8402153889529568875360610036295838654041290283203125p90 M 1.0772105999761840688933034471119754016399383544921875p799 == 1.0772105999761840688933034471119754016399383544921875p799
; [HW: 1.0772105999761840688933034471119754016399383544921875p799] 

; mpf : + 347725629281795 799
; mpfd: + 347725629281795 799 (3.59143e+240) class: Pos. norm. non-zero
; hwf : + 347725629281795 799 (3.59143e+240) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001011001 #b1101011100011000010110110001000100100110000111000101)))
(assert (= y (fp #b0 #b11100011110 #b0001001111000100000100101110100111001101011000000011)))
(assert (= r (fp #b0 #b11100011110 #b0001001111000100000100101110100111001101011000000011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
