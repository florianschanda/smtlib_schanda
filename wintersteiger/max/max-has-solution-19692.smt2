(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8280902420306868183530468741082586348056793212890625p-421 {+ 3729386905438545 -421 (3.37574e-127)}
; Y = 1.6432184384810704091961497397278435528278350830078125p-120 {+ 2896798319861181 -120 (1.23622e-036)}
; 1.8280902420306868183530468741082586348056793212890625p-421 M 1.6432184384810704091961497397278435528278350830078125p-120 == 1.6432184384810704091961497397278435528278350830078125p-120
; [HW: 1.6432184384810704091961497397278435528278350830078125p-120] 

; mpf : + 2896798319861181 -120
; mpfd: + 2896798319861181 -120 (1.23622e-036) class: Pos. norm. non-zero
; hwf : + 2896798319861181 -120 (1.23622e-036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001011010 #b1101001111111101101110001101101110101000100101010001)))
(assert (= y (fp #b0 #b01110000111 #b1010010010101001111101101010110101110101110110111101)))
(assert (= r (fp #b0 #b01110000111 #b1010010010101001111101101010110101110101110110111101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
