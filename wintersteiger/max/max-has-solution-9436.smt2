(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4461465328144742503724273774423636496067047119140625p890 {+ 2009265358935905 890 (1.19374e+268)}
; Y = 1.8018382681082367735569960132124833762645721435546875p-392 {+ 3611158525463659 -392 (1.78631e-118)}
; 1.4461465328144742503724273774423636496067047119140625p890 M 1.8018382681082367735569960132124833762645721435546875p-392 == 1.4461465328144742503724273774423636496067047119140625p890
; [HW: 1.4461465328144742503724273774423636496067047119140625p890] 

; mpf : + 2009265358935905 890
; mpfd: + 2009265358935905 890 (1.19374e+268) class: Pos. norm. non-zero
; hwf : + 2009265358935905 890 (1.19374e+268) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111001 #b0111001000110110101010001011111110101001011101100001)))
(assert (= y (fp #b0 #b01001110111 #b1100110101000101010001011101001000110100110001101011)))
(assert (= r (fp #b0 #b11101111001 #b0111001000110110101010001011111110101001011101100001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
