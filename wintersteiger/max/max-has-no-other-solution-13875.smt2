(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9410961122286216617993659383500926196575164794921875p-894 {+ 4238320100352643 -894 (1.46971e-269)}
; Y = 1.1499856426985151092168280229088850319385528564453125p-977 {+ 675475284567957 -977 (9.00299e-295)}
; 1.9410961122286216617993659383500926196575164794921875p-894 M 1.1499856426985151092168280229088850319385528564453125p-977 == 1.9410961122286216617993659383500926196575164794921875p-894
; [HW: 1.9410961122286216617993659383500926196575164794921875p-894] 

; mpf : + 4238320100352643 -894
; mpfd: + 4238320100352643 -894 (1.46971e-269) class: Pos. norm. non-zero
; hwf : + 4238320100352643 -894 (1.46971e-269) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000001 #b1111000011101011101011001100000001101010001010000011)))
(assert (= y (fp #b0 #b00000101110 #b0010011001100101011101011000011001000010011110010101)))
(assert (= r (fp #b0 #b00010000001 #b1111000011101011101011001100000001101010001010000011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
