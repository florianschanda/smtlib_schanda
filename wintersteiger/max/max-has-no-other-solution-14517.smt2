(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.26152086394778617517431484884582459926605224609375p469 {+ 1177785265424860 469 (1.92293e+141)}
; Y = 1.694892506965615996961105338414199650287628173828125p-541 {+ 3129517635432898 -541 (2.35459e-163)}
; 1.26152086394778617517431484884582459926605224609375p469 M 1.694892506965615996961105338414199650287628173828125p-541 == 1.26152086394778617517431484884582459926605224609375p469
; [HW: 1.26152086394778617517431484884582459926605224609375p469] 

; mpf : + 1177785265424860 469
; mpfd: + 1177785265424860 469 (1.92293e+141) class: Pos. norm. non-zero
; hwf : + 1177785265424860 469 (1.92293e+141) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111010100 #b0100001011110011000010000000010111100000100111011100)))
(assert (= y (fp #b0 #b00111100010 #b1011000111100100011110011010111110100111000111000010)))
(assert (= r (fp #b0 #b10111010100 #b0100001011110011000010000000010111100000100111011100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
