(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2160296982125793352480513931368477642536163330078125p-582 {- 972911268371133 -582 (-7.68222e-176)}
; Y = 1.6469008307772876609220702448510564863681793212890625p-204 {+ 2913382340434257 -204 (6.40543e-062)}
; -1.2160296982125793352480513931368477642536163330078125p-582 M 1.6469008307772876609220702448510564863681793212890625p-204 == 1.6469008307772876609220702448510564863681793212890625p-204
; [HW: 1.6469008307772876609220702448510564863681793212890625p-204] 

; mpf : + 2913382340434257 -204
; mpfd: + 2913382340434257 -204 (6.40543e-062) class: Pos. norm. non-zero
; hwf : + 2913382340434257 -204 (6.40543e-062) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111001 #b0011011101001101101110001110100011001001101010111101)))
(assert (= y (fp #b0 #b01100110011 #b1010010110011011010010101111011111110001100101010001)))
(assert (= r (fp #b0 #b01100110011 #b1010010110011011010010101111011111110001100101010001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
