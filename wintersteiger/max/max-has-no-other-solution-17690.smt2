(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3224938183495000831868537716218270361423492431640625p-592 {+ 1452383040148097 -592 (8.15899e-179)}
; Y = 1.3953320939905420328130958296242170035839080810546875p32 {+ 1780417471183403 32 (5.99291e+009)}
; 1.3224938183495000831868537716218270361423492431640625p-592 M 1.3953320939905420328130958296242170035839080810546875p32 == 1.3953320939905420328130958296242170035839080810546875p32
; [HW: 1.3953320939905420328130958296242170035839080810546875p32] 

; mpf : + 1780417471183403 32
; mpfd: + 1780417471183403 32 (5.99291e+009) class: Pos. norm. non-zero
; hwf : + 1780417471183403 32 (5.99291e+009) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101111 #b0101001010001110111101000111001011111001001010000001)))
(assert (= y (fp #b0 #b10000011111 #b0110010100110100011110111110111010111111101000101011)))
(assert (= r (fp #b0 #b10000011111 #b0110010100110100011110111110111010111111101000101011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
