(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4595650884775468458798286519595421850681304931640625p583 {+ 2069697161219969 583 (4.62073e+175)}
; Y = -1.058339898212409924127541671623475849628448486328125p-423 {- 262739543850242 -423 (-4.88581e-128)}
; 1.4595650884775468458798286519595421850681304931640625p583 M -1.058339898212409924127541671623475849628448486328125p-423 == 1.4595650884775468458798286519595421850681304931640625p583
; [HW: 1.4595650884775468458798286519595421850681304931640625p583] 

; mpf : + 2069697161219969 583
; mpfd: + 2069697161219969 583 (4.62073e+175) class: Pos. norm. non-zero
; hwf : + 2069697161219969 583 (4.62073e+175) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000110 #b0111010110100110000011101100000101100100111110000001)))
(assert (= y (fp #b1 #b01001011000 #b0000111011101111010111010001001011011111110100000010)))
(assert (= r (fp #b0 #b11001000110 #b0111010110100110000011101100000101100100111110000001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
