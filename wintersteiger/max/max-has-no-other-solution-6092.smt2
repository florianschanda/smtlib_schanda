(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.019595930226388613704102681367658078670501708984375p966 {+ 88252224065542 966 (6.35922e+290)}
; Y = -1.86401230271996265486222910112701356410980224609375p-614 {- 3891165484573148 -614 (-2.74177e-185)}
; 1.019595930226388613704102681367658078670501708984375p966 M -1.86401230271996265486222910112701356410980224609375p-614 == 1.019595930226388613704102681367658078670501708984375p966
; [HW: 1.019595930226388613704102681367658078670501708984375p966] 

; mpf : + 88252224065542 966
; mpfd: + 88252224065542 966 (6.35922e+290) class: Pos. norm. non-zero
; hwf : + 88252224065542 966 (6.35922e+290) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111000101 #b0000010100000100001111010010011101110101000000000110)))
(assert (= y (fp #b1 #b00110011001 #b1101110100101111111010010000011110000110000111011100)))
(assert (= r (fp #b0 #b11111000101 #b0000010100000100001111010010011101110101000000000110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
