(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.712394824251886493726715343655087053775787353515625p-70 {- 3208341065041466 -70 (-1.45045e-021)}
; Y = -1.4710830101352454502006139591685496270656585693359375p-276 {- 2121569268905663 -276 (-1.2116e-083)}
; -1.712394824251886493726715343655087053775787353515625p-70 M -1.4710830101352454502006139591685496270656585693359375p-276 == -1.4710830101352454502006139591685496270656585693359375p-276
; [HW: -1.4710830101352454502006139591685496270656585693359375p-276] 

; mpf : - 2121569268905663 -276
; mpfd: - 2121569268905663 -276 (-1.2116e-083) class: Neg. norm. non-zero
; hwf : - 2121569268905663 -276 (-1.2116e-083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110111001 #b1011011001011111100000011101100000000000011000111010)))
(assert (= y (fp #b1 #b01011101011 #b0111100010011000111001010110101000111011011010111111)))
(assert (= r (fp #b1 #b01011101011 #b0111100010011000111001010110101000111011011010111111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
