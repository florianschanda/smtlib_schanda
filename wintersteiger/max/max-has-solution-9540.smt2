(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8702211745690846544931673633982427418231964111328125p-905 {+ 3919127757519245 -905 (6.91428e-273)}
; Y = -1.876874558557831473848409586935304105281829833984375p-288 {- 3949091935171718 -288 (-3.77395e-087)}
; 1.8702211745690846544931673633982427418231964111328125p-905 M -1.876874558557831473848409586935304105281829833984375p-288 == 1.8702211745690846544931673633982427418231964111328125p-905
; [HW: 1.8702211745690846544931673633982427418231964111328125p-905] 

; mpf : + 3919127757519245 -905
; mpfd: + 3919127757519245 -905 (6.91428e-273) class: Pos. norm. non-zero
; hwf : + 3919127757519245 -905 (6.91428e-273) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001110110 #b1101111011000110110100001001110100001111100110001101)))
(assert (= y (fp #b1 #b01011011111 #b1110000001111010110110011101111110110011010010000110)))
(assert (= r (fp #b0 #b00001110110 #b1101111011000110110100001001110100001111100110001101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
