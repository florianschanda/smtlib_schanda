(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0660400946198773652895397390238940715789794921875p588 {- 297418145521592 588 (-1.07997e+177)}
; Y = -1.3511704139475260166847192522254772484302520751953125p-42 {- 1581530945397621 -42 (-3.07221e-013)}
; -1.0660400946198773652895397390238940715789794921875p588 M -1.3511704139475260166847192522254772484302520751953125p-42 == -1.3511704139475260166847192522254772484302520751953125p-42
; [HW: -1.3511704139475260166847192522254772484302520751953125p-42] 

; mpf : - 1581530945397621 -42
; mpfd: - 1581530945397621 -42 (-3.07221e-013) class: Neg. norm. non-zero
; hwf : - 1581530945397621 -42 (-3.07221e-013) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001011 #b0001000011101000000000001110111010011101111110111000)))
(assert (= y (fp #b1 #b01111010101 #b0101100111100110010011011110001100111010001101110101)))
(assert (= r (fp #b1 #b01111010101 #b0101100111100110010011011110001100111010001101110101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
