(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9125900426390771702500614992459304630756378173828125p-979 {+ 4109940175971373 -979 (3.74331e-295)}
; Y = -1.799914397101470608930640082689933478832244873046875p869 {- 3602494180714478 869 (-7.08464e+261)}
; 1.9125900426390771702500614992459304630756378173828125p-979 M -1.799914397101470608930640082689933478832244873046875p869 == 1.9125900426390771702500614992459304630756378173828125p-979
; [HW: 1.9125900426390771702500614992459304630756378173828125p-979] 

; mpf : + 4109940175971373 -979
; mpfd: + 4109940175971373 -979 (3.74331e-295) class: Pos. norm. non-zero
; hwf : + 4109940175971373 -979 (3.74331e-295) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101100 #b1110100110011111100000000100001111001010010000101101)))
(assert (= y (fp #b1 #b11101100100 #b1100110011000111001100001001111100100110011111101110)))
(assert (= r (fp #b0 #b00000101100 #b1110100110011111100000000100001111001010010000101101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
