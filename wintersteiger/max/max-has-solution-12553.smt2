(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6654345863934565397102005590568296611309051513671875p-197 {+ 2996850955321011 -197 (8.29122e-060)}
; Y = -1.99018652299124898519266935181804001331329345703125p171 {- 4459403655970676 171 (-5.95694e+051)}
; 1.6654345863934565397102005590568296611309051513671875p-197 M -1.99018652299124898519266935181804001331329345703125p171 == 1.6654345863934565397102005590568296611309051513671875p-197
; [HW: 1.6654345863934565397102005590568296611309051513671875p-197] 

; mpf : + 2996850955321011 -197
; mpfd: + 2996850955321011 -197 (8.29122e-060) class: Pos. norm. non-zero
; hwf : + 2996850955321011 -197 (8.29122e-060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111010 #b1010101001011001111010111100101000101111111010110011)))
(assert (= y (fp #b1 #b10010101010 #b1111110101111100110111010010110100101111111101110100)))
(assert (= r (fp #b0 #b01100111010 #b1010101001011001111010111100101000101111111010110011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
