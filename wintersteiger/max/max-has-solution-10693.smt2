(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1212269840738626758280815920443274080753326416015625p-957 {+ 545957800302297 -957 (9.20423e-289)}
; Y = 1.2653729092615726425918865061248652637004852294921875p202 {+ 1195133335264643 202 (8.1335e+060)}
; 1.1212269840738626758280815920443274080753326416015625p-957 M 1.2653729092615726425918865061248652637004852294921875p202 == 1.2653729092615726425918865061248652637004852294921875p202
; [HW: 1.2653729092615726425918865061248652637004852294921875p202] 

; mpf : + 1195133335264643 202
; mpfd: + 1195133335264643 202 (8.1335e+060) class: Pos. norm. non-zero
; hwf : + 1195133335264643 202 (8.1335e+060) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001000010 #b0001111100001000101110110100101111111101011011011001)))
(assert (= y (fp #b0 #b10011001001 #b0100001111101111011110101001111010000101110110000011)))
(assert (= r (fp #b0 #b10011001001 #b0100001111101111011110101001111010000101110110000011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
