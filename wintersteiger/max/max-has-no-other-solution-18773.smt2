(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.336139110236523652730511457775719463825225830078125p297 {- 1513835971605858 297 (-3.4022e+089)}
; Y = 1.933910303844611267010122901410795748233795166015625p-709 {+ 4205958096392058 -709 (7.18074e-214)}
; -1.336139110236523652730511457775719463825225830078125p297 M 1.933910303844611267010122901410795748233795166015625p-709 == 1.933910303844611267010122901410795748233795166015625p-709
; [HW: 1.933910303844611267010122901410795748233795166015625p-709] 

; mpf : + 4205958096392058 -709
; mpfd: + 4205958096392058 -709 (7.18074e-214) class: Pos. norm. non-zero
; hwf : + 4205958096392058 -709 (7.18074e-214) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101000 #b0101011000001101001101100111010101011111010101100010)))
(assert (= y (fp #b0 #b00100111010 #b1110111100010100101111101110010001101000111101111010)))
(assert (= r (fp #b0 #b00100111010 #b1110111100010100101111101110010001101000111101111010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
