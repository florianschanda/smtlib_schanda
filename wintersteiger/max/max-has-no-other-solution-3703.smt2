(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2592898101312981484767306028516031801700592041015625p-696 {+ 1167737492288281 -696 (3.83044e-210)}
; Y = 1.7324550211779892183727724841446615755558013916015625p970 {+ 3298684160442841 970 (1.72885e+292)}
; 1.2592898101312981484767306028516031801700592041015625p-696 M 1.7324550211779892183727724841446615755558013916015625p970 == 1.7324550211779892183727724841446615755558013916015625p970
; [HW: 1.7324550211779892183727724841446615755558013916015625p970] 

; mpf : + 3298684160442841 970
; mpfd: + 3298684160442841 970 (1.72885e+292) class: Pos. norm. non-zero
; hwf : + 3298684160442841 970 (1.72885e+292) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000111 #b0100001001100000110100010010011010110011001100011001)))
(assert (= y (fp #b0 #b11111001001 #b1011101110000010001011000001100111000000000111011001)))
(assert (= r (fp #b0 #b11111001001 #b1011101110000010001011000001100111000000000111011001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
