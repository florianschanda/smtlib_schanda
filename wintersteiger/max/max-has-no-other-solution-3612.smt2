(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.907371373902108313558301233570091426372528076171875p-15 {- 4086437381392190 -15 (-5.82084e-005)}
; Y = 1.06877853482194229428614562493748962879180908203125p20 {+ 309750983795188 20 (1.1207e+006)}
; -1.907371373902108313558301233570091426372528076171875p-15 M 1.06877853482194229428614562493748962879180908203125p20 == 1.06877853482194229428614562493748962879180908203125p20
; [HW: 1.06877853482194229428614562493748962879180908203125p20] 

; mpf : + 309750983795188 20
; mpfd: + 309750983795188 20 (1.1207e+006) class: Pos. norm. non-zero
; hwf : + 309750983795188 20 (1.1207e+006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111110000 #b1110100001001001011111011000100000111100011100111110)))
(assert (= y (fp #b0 #b10000010011 #b0001000110011011011110000101010110111010000111110100)))
(assert (= r (fp #b0 #b10000010011 #b0001000110011011011110000101010110111010000111110100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
