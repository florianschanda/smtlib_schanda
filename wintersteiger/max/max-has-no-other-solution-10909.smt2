(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2368257809585900819371317993500269949436187744140625p856 {+ 1066568498876833 856 (5.94271e+257)}
; Y = -1.026201790946755121325395521125756204128265380859375p-675 {- 118002375944246 -675 (-6.54615e-204)}
; 1.2368257809585900819371317993500269949436187744140625p856 M -1.026201790946755121325395521125756204128265380859375p-675 == 1.2368257809585900819371317993500269949436187744140625p856
; [HW: 1.2368257809585900819371317993500269949436187744140625p856] 

; mpf : + 1066568498876833 856
; mpfd: + 1066568498876833 856 (5.94271e+257) class: Pos. norm. non-zero
; hwf : + 1066568498876833 856 (5.94271e+257) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010111 #b0011110010100000100111010100100000010001000110100001)))
(assert (= y (fp #b1 #b00101011100 #b0000011010110101001010010001101100110110100000110110)))
(assert (= r (fp #b0 #b11101010111 #b0011110010100000100111010100100000010001000110100001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
