(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0327409906131197470102733859675936400890350341796875p641 {+ 147452313124987 641 (9.42364e+192)}
; Y = 1.1208941757629606872370686687645502388477325439453125p-956 {+ 544458964917333 -956 (1.8403e-288)}
; 1.0327409906131197470102733859675936400890350341796875p641 M 1.1208941757629606872370686687645502388477325439453125p-956 == 1.0327409906131197470102733859675936400890350341796875p641
; [HW: 1.0327409906131197470102733859675936400890350341796875p641] 

; mpf : + 147452313124987 641
; mpfd: + 147452313124987 641 (9.42364e+192) class: Pos. norm. non-zero
; hwf : + 147452313124987 641 (9.42364e+192) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010000000 #b0000100001100001101101101010101111101100000001111011)))
(assert (= y (fp #b0 #b00001000011 #b0001111011110010111010111011001100101101110001010101)))
(assert (= r (fp #b0 #b11010000000 #b0000100001100001101101101010101111101100000001111011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
