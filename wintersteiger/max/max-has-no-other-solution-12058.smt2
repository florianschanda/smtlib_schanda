(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.383101867405776008723705672309733927249908447265625p522 {- 1725337427293594 522 (-1.89894e+157)}
; Y = 1.0657329511532569465970254896092228591442108154296875p-312 {+ 296034894319771 -312 (1.27729e-094)}
; -1.383101867405776008723705672309733927249908447265625p522 M 1.0657329511532569465970254896092228591442108154296875p-312 == 1.0657329511532569465970254896092228591442108154296875p-312
; [HW: 1.0657329511532569465970254896092228591442108154296875p-312] 

; mpf : + 296034894319771 -312
; mpfd: + 296034894319771 -312 (1.27729e-094) class: Pos. norm. non-zero
; hwf : + 296034894319771 -312 (1.27729e-094) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001001 #b0110001000010010111101101100011110001011010110011010)))
(assert (= y (fp #b0 #b01011000111 #b0001000011010011110111111110101101111001000010011011)))
(assert (= r (fp #b0 #b01011000111 #b0001000011010011110111111110101101111001000010011011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
