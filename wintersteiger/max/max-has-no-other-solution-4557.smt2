(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9370613691311822091023486791527830064296722412109375p862 {+ 4220149232842479 862 (5.95662e+259)}
; Y = -1.00241989941803666397390770725905895233154296875p-749 {- 10898258117344 -749 (-3.38519e-226)}
; 1.9370613691311822091023486791527830064296722412109375p862 M -1.00241989941803666397390770725905895233154296875p-749 == 1.9370613691311822091023486791527830064296722412109375p862
; [HW: 1.9370613691311822091023486791527830064296722412109375p862] 

; mpf : + 4220149232842479 862
; mpfd: + 4220149232842479 862 (5.95662e+259) class: Pos. norm. non-zero
; hwf : + 4220149232842479 862 (5.95662e+259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101011101 #b1110111111100011010000001111111011000011011011101111)))
(assert (= y (fp #b1 #b00100010010 #b0000000010011110100101110010110011011100001011100000)))
(assert (= r (fp #b0 #b11101011101 #b1110111111100011010000001111111011000011011011101111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
