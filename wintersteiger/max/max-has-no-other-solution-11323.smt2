(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3549138870940902190653787329210899770259857177734375p812 {+ 1598390049665559 812 (3.70057e+244)}
; Y = 1.595833118103172854063132035662420094013214111328125p-956 {+ 2683393808664450 -956 (2.62006e-288)}
; 1.3549138870940902190653787329210899770259857177734375p812 M 1.595833118103172854063132035662420094013214111328125p-956 == 1.3549138870940902190653787329210899770259857177734375p812
; [HW: 1.3549138870940902190653787329210899770259857177734375p812] 

; mpf : + 1598390049665559 812
; mpfd: + 1598390049665559 812 (3.70057e+244) class: Pos. norm. non-zero
; hwf : + 1598390049665559 812 (3.70057e+244) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100101011 #b0101101011011011101000101111000111110111001000010111)))
(assert (= y (fp #b0 #b00001000011 #b1001100010001000100001001110110000100000011110000010)))
(assert (= r (fp #b0 #b11100101011 #b0101101011011011101000101111000111110111001000010111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
