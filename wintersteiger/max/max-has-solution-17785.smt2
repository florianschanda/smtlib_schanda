(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.29380931282359057377107092179358005523681640625p-841 {- 1323199511750304 -841 (-8.82356e-254)}
; Y = -1.0305809548169284628471586984232999384403228759765625p786 {- 137724376718153 786 (-4.19429e+236)}
; -1.29380931282359057377107092179358005523681640625p-841 M -1.0305809548169284628471586984232999384403228759765625p786 == -1.29380931282359057377107092179358005523681640625p-841
; [HW: -1.29380931282359057377107092179358005523681640625p-841] 

; mpf : - 1323199511750304 -841
; mpfd: - 1323199511750304 -841 (-8.82356e-254) class: Neg. norm. non-zero
; hwf : - 1323199511750304 -841 (-8.82356e-254) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010110110 #b0100101100110111000101100100110111010110011010100000)))
(assert (= y (fp #b1 #b11100010001 #b0000011111010100001001110100100011010001101101001001)))
(assert (= r (fp #b1 #b00010110110 #b0100101100110111000101100100110111010110011010100000)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
