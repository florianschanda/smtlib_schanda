(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9320449876176100101332622216432355344295501708984375p-166 {+ 4197557458927207 -166 (2.06556e-050)}
; Y = 1.7515512438509943660136514154146425426006317138671875p614 {+ 3384685901757171 614 (1.1908e+185)}
; 1.9320449876176100101332622216432355344295501708984375p-166 M 1.7515512438509943660136514154146425426006317138671875p614 == 1.7515512438509943660136514154146425426006317138671875p614
; [HW: 1.7515512438509943660136514154146425426006317138671875p614] 

; mpf : + 3384685901757171 614
; mpfd: + 3384685901757171 614 (1.1908e+185) class: Pos. norm. non-zero
; hwf : + 3384685901757171 614 (1.1908e+185) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011001 #b1110111010011010100000000001010000110111111001100111)))
(assert (= y (fp #b0 #b11001100101 #b1100000001100101101010011000110110011011101011110011)))
(assert (= r (fp #b0 #b11001100101 #b1100000001100101101010011000110110011011101011110011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
