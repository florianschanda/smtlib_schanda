(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.906620489116614525215709363692440092563629150390625p590 {- 4083055696952042 590 (-7.72612e+177)}
; Y = 1.1711898698048857081488449694006703794002532958984375p741 {+ 770970633862887 741 (1.35473e+223)}
; -1.906620489116614525215709363692440092563629150390625p590 M 1.1711898698048857081488449694006703794002532958984375p741 == 1.1711898698048857081488449694006703794002532958984375p741
; [HW: 1.1711898698048857081488449694006703794002532958984375p741] 

; mpf : + 770970633862887 741
; mpfd: + 770970633862887 741 (1.35473e+223) class: Pos. norm. non-zero
; hwf : + 770970633862887 741 (1.35473e+223) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001101 #b1110100000011000010001111100011010100011101011101010)))
(assert (= y (fp #b0 #b11011100100 #b0010101111010011000110010110110000110111111011100111)))
(assert (= r (fp #b0 #b11011100100 #b0010101111010011000110010110110000110111111011100111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
