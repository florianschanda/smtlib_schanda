(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9731013072174270472913804042036645114421844482421875p-787 {- 4382458684578147 -787 (-2.42406e-237)}
; Y = -1.2051439761921056703641852436703629791736602783203125p337 {- 923886334736069 337 (-3.37402e+101)}
; -1.9731013072174270472913804042036645114421844482421875p-787 M -1.2051439761921056703641852436703629791736602783203125p337 == -1.9731013072174270472913804042036645114421844482421875p-787
; [HW: -1.9731013072174270472913804042036645114421844482421875p-787] 

; mpf : - 4382458684578147 -787
; mpfd: - 4382458684578147 -787 (-2.42406e-237) class: Neg. norm. non-zero
; hwf : - 4382458684578147 -787 (-2.42406e-237) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011101100 #b1111100100011101001010101101001000110001100101100011)))
(assert (= y (fp #b1 #b10101010000 #b0011010010000100010100001100110010110111011011000101)))
(assert (= r (fp #b1 #b00011101100 #b1111100100011101001010101101001000110001100101100011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
