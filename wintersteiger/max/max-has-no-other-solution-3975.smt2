(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8649877820261211436303483424126170575618743896484375p27 {+ 3895558652812871 27 (2.50314e+008)}
; Y = -1.222401803104703699176525333314202725887298583984375p-172 {- 1001608677588870 -172 (-2.042e-052)}
; 1.8649877820261211436303483424126170575618743896484375p27 M -1.222401803104703699176525333314202725887298583984375p-172 == 1.8649877820261211436303483424126170575618743896484375p27
; [HW: 1.8649877820261211436303483424126170575618743896484375p27] 

; mpf : + 3895558652812871 27
; mpfd: + 3895558652812871 27 (2.50314e+008) class: Pos. norm. non-zero
; hwf : + 3895558652812871 27 (2.50314e+008) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000011010 #b1101110101101111110101101101101100111101111001000111)))
(assert (= y (fp #b1 #b01101010011 #b0011100011101111010100110001011011100111111110000110)))
(assert (= r (fp #b0 #b10000011010 #b1101110101101111110101101101101100111101111001000111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
