(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8392260251800987003178988743457011878490447998046875p994 {- 3779538014280715 994 (-3.07929e+299)}
; Y = 1.7965829471344669787669090510462410748004913330078125p-299 {+ 3587490663884477 -299 (1.76392e-090)}
; -1.8392260251800987003178988743457011878490447998046875p994 M 1.7965829471344669787669090510462410748004913330078125p-299 == 1.7965829471344669787669090510462410748004913330078125p-299
; [HW: 1.7965829471344669787669090510462410748004913330078125p-299] 

; mpf : + 3587490663884477 -299
; mpfd: + 3587490663884477 -299 (1.76392e-090) class: Pos. norm. non-zero
; hwf : + 3587490663884477 -299 (1.76392e-090) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100001 #b1101011011010111100001000100110000011001110000001011)))
(assert (= y (fp #b0 #b01011010100 #b1100101111101100110111000010101001111110011010111101)))
(assert (= r (fp #b0 #b01011010100 #b1100101111101100110111000010101001111110011010111101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
