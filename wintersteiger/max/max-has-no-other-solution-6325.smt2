(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9493861059826598225441784961731173098087310791015625p-855 {- 4275654913134233 -855 (-8.11431e-258)}
; Y = 1.2494878617343740945244690010440535843372344970703125p674 {+ 1123593441140389 674 (9.79375e+202)}
; -1.9493861059826598225441784961731173098087310791015625p-855 M 1.2494878617343740945244690010440535843372344970703125p674 == 1.2494878617343740945244690010440535843372344970703125p674
; [HW: 1.2494878617343740945244690010440535843372344970703125p674] 

; mpf : + 1123593441140389 674
; mpfd: + 1123593441140389 674 (9.79375e+202) class: Pos. norm. non-zero
; hwf : + 1123593441140389 674 (9.79375e+202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101000 #b1111001100001010111101111100010001111000111010011001)))
(assert (= y (fp #b0 #b11010100001 #b0011111111011110011011111011111011100101111010100101)))
(assert (= r (fp #b0 #b11010100001 #b0011111111011110011011111011111011100101111010100101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
