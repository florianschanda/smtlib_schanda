(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9828984413234369554857039474882185459136962890625p516 {- 4426581054087272 516 (-4.25381e+155)}
; Y = 1.759491059898644405024015213712118566036224365234375p-801 {+ 3420443654350758 -801 (1.31935e-241)}
; -1.9828984413234369554857039474882185459136962890625p516 M 1.759491059898644405024015213712118566036224365234375p-801 == 1.759491059898644405024015213712118566036224365234375p-801
; [HW: 1.759491059898644405024015213712118566036224365234375p-801] 

; mpf : + 3420443654350758 -801
; mpfd: + 3420443654350758 -801 (1.31935e-241) class: Pos. norm. non-zero
; hwf : + 3420443654350758 -801 (1.31935e-241) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000011 #b1111101110011111001110110111010011000110000001101000)))
(assert (= y (fp #b0 #b00011011110 #b1100001001101110000000011000111111011110011110100110)))
(assert (= r (fp #b0 #b00011011110 #b1100001001101110000000011000111111011110011110100110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
