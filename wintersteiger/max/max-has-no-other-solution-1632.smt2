(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.191216000198369595608482995885424315929412841796875p633 {+ 861160307240654 633 (4.24598e+190)}
; Y = 1.47651612353829531087967552593909204006195068359375p-239 {+ 2146037836403100 -239 (1.67136e-072)}
; 1.191216000198369595608482995885424315929412841796875p633 M 1.47651612353829531087967552593909204006195068359375p-239 == 1.191216000198369595608482995885424315929412841796875p633
; [HW: 1.191216000198369595608482995885424315929412841796875p633] 

; mpf : + 861160307240654 633
; mpfd: + 861160307240654 633 (4.24598e+190) class: Pos. norm. non-zero
; hwf : + 861160307240654 633 (4.24598e+190) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001111000 #b0011000011110011100010000010001101010010111011001110)))
(assert (= y (fp #b0 #b01100010000 #b0111100111111100111101011110111010011101000110011100)))
(assert (= r (fp #b0 #b11001111000 #b0011000011110011100010000010001101010010111011001110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
