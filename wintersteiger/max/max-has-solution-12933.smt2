(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4327326446602899334692438060301356017589569091796875p-1008 {+ 1948854577243131 -1008 (5.22311e-304)}
; Y = 1.3792452905201961765868645670707337558269500732421875p788 {+ 1707968949068771 788 (2.24532e+237)}
; 1.4327326446602899334692438060301356017589569091796875p-1008 M 1.3792452905201961765868645670707337558269500732421875p788 == 1.3792452905201961765868645670707337558269500732421875p788
; [HW: 1.3792452905201961765868645670707337558269500732421875p788] 

; mpf : + 1707968949068771 788
; mpfd: + 1707968949068771 788 (2.24532e+237) class: Pos. norm. non-zero
; hwf : + 1707968949068771 788 (2.24532e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000001111 #b0110111011000111100100010000110010111010001111111011)))
(assert (= y (fp #b0 #b11100010011 #b0110000100010110001110000010011111110010001111100011)))
(assert (= r (fp #b0 #b11100010011 #b0110000100010110001110000010011111110010001111100011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
