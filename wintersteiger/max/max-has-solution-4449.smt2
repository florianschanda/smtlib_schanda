(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.237238985528596568741477312869392335414886474609375p610 {- 1068429406824342 610 (-5.25716e+183)}
; Y = -1.1768082720093364645919109534588642418384552001953125p-731 {- 796273667937269 -731 (-1.04179e-220)}
; -1.237238985528596568741477312869392335414886474609375p610 M -1.1768082720093364645919109534588642418384552001953125p-731 == -1.1768082720093364645919109534588642418384552001953125p-731
; [HW: -1.1768082720093364645919109534588642418384552001953125p-731] 

; mpf : - 796273667937269 -731
; mpfd: - 796273667937269 -731 (-1.04179e-220) class: Neg. norm. non-zero
; hwf : - 796273667937269 -731 (-1.04179e-220) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001100001 #b0011110010111011101100011011010000101110011110010110)))
(assert (= y (fp #b1 #b00100100100 #b0010110101000011010011101001000111110001001111110101)))
(assert (= r (fp #b1 #b00100100100 #b0010110101000011010011101001000111110001001111110101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
