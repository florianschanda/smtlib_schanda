(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1598001603990990560077989357523620128631591796875p-933 {- 719675942827128 -933 (-1.59734e-281)}
; Y = 1.5893543353920482896768362479633651673793792724609375p352 {+ 2654215965260815 352 (1.45807e+106)}
; -1.1598001603990990560077989357523620128631591796875p-933 M 1.5893543353920482896768362479633651673793792724609375p352 == 1.5893543353920482896768362479633651673793792724609375p352
; [HW: 1.5893543353920482896768362479633651673793792724609375p352] 

; mpf : + 2654215965260815 352
; mpfd: + 2654215965260815 352 (1.45807e+106) class: Pos. norm. non-zero
; hwf : + 2654215965260815 352 (1.45807e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001011010 #b0010100011101000101010011100111011001111010001111000)))
(assert (= y (fp #b0 #b10101011111 #b1001011011011111111011001111110001000011110000001111)))
(assert (= r (fp #b0 #b10101011111 #b1001011011011111111011001111110001000011110000001111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
