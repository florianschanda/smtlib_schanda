(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.2938881269175148691630283792619593441486358642578125p271 {+ 1323554458874333 271 (4.90937e+081)}
; Y = -1.7177582019675001756553456289111636579036712646484375p-658 {- 3232495570922951 -658 (-1.43623e-198)}
; 1.2938881269175148691630283792619593441486358642578125p271 M -1.7177582019675001756553456289111636579036712646484375p-658 == 1.2938881269175148691630283792619593441486358642578125p271
; [HW: 1.2938881269175148691630283792619593441486358642578125p271] 

; mpf : + 1323554458874333 271
; mpfd: + 1323554458874333 271 (4.90937e+081) class: Pos. norm. non-zero
; hwf : + 1323554458874333 271 (4.90937e+081) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100001110 #b0100101100111100010000001001010111001011000111011101)))
(assert (= y (fp #b1 #b00101101101 #b1011011110111111000000000110001111100010110111000111)))
(assert (= r (fp #b0 #b10100001110 #b0100101100111100010000001001010111001011000111011101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
