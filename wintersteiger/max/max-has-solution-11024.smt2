(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6545545451833933991991898437845520675182342529296875p-560 {+ 2947851605781595 -560 (4.38413e-169)}
; Y = -1.467643472652951697199341651867143809795379638671875p414 {- 2106078969182078 414 (-6.20924e+124)}
; 1.6545545451833933991991898437845520675182342529296875p-560 M -1.467643472652951697199341651867143809795379638671875p414 == 1.6545545451833933991991898437845520675182342529296875p-560
; [HW: 1.6545545451833933991991898437845520675182342529296875p-560] 

; mpf : + 2947851605781595 -560
; mpfd: + 2947851605781595 -560 (4.38413e-169) class: Pos. norm. non-zero
; hwf : + 2947851605781595 -560 (4.38413e-169) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001111 #b1010011110010000111000101111110100000010110001011011)))
(assert (= y (fp #b1 #b10110011101 #b0111011110110111011110111000110100111011011101111110)))
(assert (= r (fp #b0 #b00111001111 #b1010011110010000111000101111110100000010110001011011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
