(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.290546173949622232868250648607499897480010986328125p-167 {+ 1308503640733442 -167 (6.89865e-051)}
; Y = 1.5920677057664940345915738362236879765987396240234375p-932 {+ 2666435899068087 -932 (4.38536e-281)}
; 1.290546173949622232868250648607499897480010986328125p-167 M 1.5920677057664940345915738362236879765987396240234375p-932 == 1.290546173949622232868250648607499897480010986328125p-167
; [HW: 1.290546173949622232868250648607499897480010986328125p-167] 

; mpf : + 1308503640733442 -167
; mpfd: + 1308503640733442 -167 (6.89865e-051) class: Pos. norm. non-zero
; hwf : + 1308503640733442 -167 (6.89865e-051) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101011000 #b0100101001100001001110111110101100010111011100000010)))
(assert (= y (fp #b0 #b00001011011 #b1001011110010001101111111100100101001000111010110111)))
(assert (= r (fp #b0 #b01101011000 #b0100101001100001001110111110101100010111011100000010)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
