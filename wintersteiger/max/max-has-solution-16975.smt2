(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5832784655910734361583536156103946268558502197265625p359 {+ 2626852680289193 359 (1.8592e+108)}
; Y = -1.1999877134421128577201898224302567541599273681640625p789 {- 900664591736577 789 (-3.907e+237)}
; 1.5832784655910734361583536156103946268558502197265625p359 M -1.1999877134421128577201898224302567541599273681640625p789 == 1.5832784655910734361583536156103946268558502197265625p359
; [HW: 1.5832784655910734361583536156103946268558502197265625p359] 

; mpf : + 2626852680289193 359
; mpfd: + 2626852680289193 359 (1.8592e+108) class: Pos. norm. non-zero
; hwf : + 2626852680289193 359 (1.8592e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100110 #b1001010101010001101111001100111000101100101110101001)))
(assert (= y (fp #b1 #b11100010100 #b0011001100110010011001010001000011010101111100000001)))
(assert (= r (fp #b0 #b10101100110 #b1001010101010001101111001100111000101100101110101001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
