(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.564689157273382758006619042134843766689300537109375p623 {+ 2543133878276566 623 (5.44647e+187)}
; Y = 1.4858785381235317668568995941313914954662322998046875p610 {+ 2188202403240459 610 (6.31365e+183)}
; 1.564689157273382758006619042134843766689300537109375p623 M 1.4858785381235317668568995941313914954662322998046875p610 == 1.564689157273382758006619042134843766689300537109375p623
; [HW: 1.564689157273382758006619042134843766689300537109375p623] 

; mpf : + 2543133878276566 623
; mpfd: + 2543133878276566 623 (5.44647e+187) class: Pos. norm. non-zero
; hwf : + 2543133878276566 623 (5.44647e+187) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001101110 #b1001000010001111011101111111011011100101000111010110)))
(assert (= y (fp #b0 #b11001100001 #b0111110001100010100010010010111100010001101000001011)))
(assert (= r (fp #b0 #b11001101110 #b1001000010001111011101111111011011100101000111010110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
