(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8137432269061808387533574205008335411548614501953125p696 {+ 3664773693469941 696 (5.96283e+209)}
; Y = -1.7199461006102338966883280590991489589214324951171875p-303 {- 3242348990435091 -303 (-1.05542e-091)}
; 1.8137432269061808387533574205008335411548614501953125p696 M -1.7199461006102338966883280590991489589214324951171875p-303 == 1.8137432269061808387533574205008335411548614501953125p696
; [HW: 1.8137432269061808387533574205008335411548614501953125p696] 

; mpf : + 3664773693469941 696
; mpfd: + 3664773693469941 696 (5.96283e+209) class: Pos. norm. non-zero
; hwf : + 3664773693469941 696 (5.96283e+209) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010110111 #b1101000001010001011110011110001011100111010011110101)))
(assert (= y (fp #b1 #b01011010000 #b1011100001001110011000110011110100000000111100010011)))
(assert (= r (fp #b0 #b11010110111 #b1101000001010001011110011110001011100111010011110101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
