(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.08884983687687242337460702401585876941680908203125p499 {- 400144092250612 499 (-1.78212e+150)}
; Y = 1.2314400026985097280629588567535392940044403076171875p-1003 {+ 1042313109911635 -1003 (1.43657e-302)}
; -1.08884983687687242337460702401585876941680908203125p499 M 1.2314400026985097280629588567535392940044403076171875p-1003 == 1.2314400026985097280629588567535392940044403076171875p-1003
; [HW: 1.2314400026985097280629588567535392940044403076171875p-1003] 

; mpf : + 1042313109911635 -1003
; mpfd: + 1042313109911635 -1003 (1.43657e-302) class: Pos. norm. non-zero
; hwf : + 1042313109911635 -1003 (1.43657e-302) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111110010 #b0001011010111110110111001110011110100100000111110100)))
(assert (= y (fp #b0 #b00000010100 #b0011101100111111101001101110101010010011100001010011)))
(assert (= r (fp #b0 #b00000010100 #b0011101100111111101001101110101010010011100001010011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
