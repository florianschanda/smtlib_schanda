(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9174716627495758114463342280942015349864959716796875p374 {- 4131925038481979 374 (-7.37815e+112)}
; Y = 1.2375454128908189854740840019076131284236907958984375p1005 {+ 1069809432978663 1005 (4.24333e+302)}
; -1.9174716627495758114463342280942015349864959716796875p374 M 1.2375454128908189854740840019076131284236907958984375p1005 == 1.2375454128908189854740840019076131284236907958984375p1005
; [HW: 1.2375454128908189854740840019076131284236907958984375p1005] 

; mpf : + 1069809432978663 1005
; mpfd: + 1069809432978663 1005 (4.24333e+302) class: Pos. norm. non-zero
; hwf : + 1069809432978663 1005 (4.24333e+302) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101110101 #b1110101011011111011011000100001010000100001000111011)))
(assert (= y (fp #b0 #b11111101100 #b0011110011001111110001101011001110101110010011100111)))
(assert (= r (fp #b0 #b11111101100 #b0011110011001111110001101011001110101110010011100111)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
