(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.63874572243068339361116159125231206417083740234375p660 {+ 2876654997523324 660 (7.83987e+198)}
; Y = -1.843164735855886693371985529665835201740264892578125p-675 {- 3797276390212514 -675 (-1.17576e-203)}
; 1.63874572243068339361116159125231206417083740234375p660 M -1.843164735855886693371985529665835201740264892578125p-675 == 1.63874572243068339361116159125231206417083740234375p660
; [HW: 1.63874572243068339361116159125231206417083740234375p660] 

; mpf : + 2876654997523324 660
; mpfd: + 2876654997523324 660 (7.83987e+198) class: Pos. norm. non-zero
; hwf : + 2876654997523324 660 (7.83987e+198) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010010011 #b1010001110000100110101101111010001001100101101111100)))
(assert (= y (fp #b1 #b00101011100 #b1101011111011001101001001110010110100100001110100010)))
(assert (= r (fp #b0 #b11010010011 #b1010001110000100110101101111010001001100101101111100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
