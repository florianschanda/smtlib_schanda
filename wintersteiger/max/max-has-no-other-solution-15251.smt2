(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5703303905345020741179951073718257248401641845703125p989 {+ 2568539734289253 989 (8.21593e+297)}
; Y = 1.1358649886636393855354754123254679143428802490234375p-525 {+ 611881512318263 -525 (1.03414e-158)}
; 1.5703303905345020741179951073718257248401641845703125p989 M 1.1358649886636393855354754123254679143428802490234375p-525 == 1.5703303905345020741179951073718257248401641845703125p989
; [HW: 1.5703303905345020741179951073718257248401641845703125p989] 

; mpf : + 2568539734289253 989
; mpfd: + 2568539734289253 989 (8.21593e+297) class: Pos. norm. non-zero
; hwf : + 2568539734289253 989 (8.21593e+297) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111011100 #b1001001000000001001011000010011101000010101101100101)))
(assert (= y (fp #b0 #b00111110010 #b0010001011001000000011000100001011111011010100110111)))
(assert (= r (fp #b0 #b11111011100 #b1001001000000001001011000010011101000010101101100101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
