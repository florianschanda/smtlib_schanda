(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0465419249234308995966102884267456829547882080078125p618 {- 209606195742269 618 (-1.1384e+186)}
; Y = 1.9911486130991005172319319171947427093982696533203125p-342 {+ 4463736524621893 -342 (2.22252e-103)}
; -1.0465419249234308995966102884267456829547882080078125p618 M 1.9911486130991005172319319171947427093982696533203125p-342 == 1.9911486130991005172319319171947427093982696533203125p-342
; [HW: 1.9911486130991005172319319171947427093982696533203125p-342] 

; mpf : + 4463736524621893 -342
; mpfd: + 4463736524621893 -342 (2.22252e-103) class: Pos. norm. non-zero
; hwf : + 4463736524621893 -342 (2.22252e-103) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001101001 #b0000101111101010001010111110110101110000011000111101)))
(assert (= y (fp #b0 #b01010101001 #b1111110110111011111010100101111010111100100001000101)))
(assert (= r (fp #b0 #b01010101001 #b1111110110111011111010100101111010111100100001000101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
