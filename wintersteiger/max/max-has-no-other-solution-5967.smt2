(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.7438304514050082527631957418634556233882904052734375p822 {+ 3349914543774423 822 (4.87709e+247)}
; Y = 1.7614976581594188331791883683763444423675537109375p8 {+ 3429480569530264 8 (450.943)}
; 1.7438304514050082527631957418634556233882904052734375p822 M 1.7614976581594188331791883683763444423675537109375p8 == 1.7438304514050082527631957418634556233882904052734375p822
; [HW: 1.7438304514050082527631957418634556233882904052734375p822] 

; mpf : + 3349914543774423 822
; mpfd: + 3349914543774423 822 (4.87709e+247) class: Pos. norm. non-zero
; hwf : + 3349914543774423 822 (4.87709e+247) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100110101 #b1011111001101011101011000010011010001101101011010111)))
(assert (= y (fp #b0 #b10000000111 #b1100001011110001100000101011000111000110011110011000)))
(assert (= r (fp #b0 #b11100110101 #b1011111001101011101011000010011010001101101011010111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
