(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.067596875019293012343268856056965887546539306640625p868 {- 304429261148298 868 (-2.10108e+261)}
; Y = 1.5001513419099072876861100667156279087066650390625p-1019 {+ 2252481397054312 -1019 (2.67036e-307)}
; -1.067596875019293012343268856056965887546539306640625p868 M 1.5001513419099072876861100667156279087066650390625p-1019 == 1.5001513419099072876861100667156279087066650390625p-1019
; [HW: 1.5001513419099072876861100667156279087066650390625p-1019] 

; mpf : + 2252481397054312 -1019
; mpfd: + 2252481397054312 -1019 (2.67036e-307) class: Pos. norm. non-zero
; hwf : + 2252481397054312 -1019 (2.67036e-307) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100011 #b0001000101001110000001110101111110000101000010001010)))
(assert (= y (fp #b0 #b00000000100 #b1000000000001001111010110001100010001101101101101000)))
(assert (= r (fp #b0 #b00000000100 #b1000000000001001111010110001100010001101101101101000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
