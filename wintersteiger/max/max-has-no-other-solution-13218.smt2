(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9042606831636634812099373448290862143039703369140625p773 {- 4072428075741665 773 (-9.46048e+232)}
; Y = 1.802991713493268033374761216691695153713226318359375p-505 {+ 3616353181669878 -505 (1.72126e-152)}
; -1.9042606831636634812099373448290862143039703369140625p773 M 1.802991713493268033374761216691695153713226318359375p-505 == 1.802991713493268033374761216691695153713226318359375p-505
; [HW: 1.802991713493268033374761216691695153713226318359375p-505] 

; mpf : + 3616353181669878 -505
; mpfd: + 3616353181669878 -505 (1.72126e-152) class: Pos. norm. non-zero
; hwf : + 3616353181669878 -505 (1.72126e-152) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000100 #b1110011101111101101000001100110100111111000111100001)))
(assert (= y (fp #b0 #b01000000110 #b1100110110010000110111010110110001101001100111110110)))
(assert (= r (fp #b0 #b01000000110 #b1100110110010000110111010110110001101001100111110110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
