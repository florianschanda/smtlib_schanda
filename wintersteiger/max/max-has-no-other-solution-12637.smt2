(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.672565027408267734898572598467580974102020263671875p-664 {+ 3028963606818302 -664 (2.18507e-200)}
; Y = 1.1375359003542653280049989916733466088771820068359375p859 {+ 619406629585535 859 (4.37252e+258)}
; 1.672565027408267734898572598467580974102020263671875p-664 M 1.1375359003542653280049989916733466088771820068359375p859 == 1.1375359003542653280049989916733466088771820068359375p859
; [HW: 1.1375359003542653280049989916733466088771820068359375p859] 

; mpf : + 619406629585535 859
; mpfd: + 619406629585535 859 (4.37252e+258) class: Pos. norm. non-zero
; hwf : + 619406629585535 859 (4.37252e+258) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101100111 #b1010110000101101001110001011110100100110110111111110)))
(assert (= y (fp #b0 #b11101011010 #b0010001100110101100011011000001000001100001001111111)))
(assert (= r (fp #b0 #b11101011010 #b0010001100110101100011011000001000001100001001111111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
