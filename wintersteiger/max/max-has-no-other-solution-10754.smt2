(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.450586877123533735556293322588317096233367919921875p603 {- 2029262891911582 603 (-4.81539e+181)}
; Y = 1.365606815436321230805560844601131975650787353515625p-667 {+ 1646546717763130 -667 (2.23007e-201)}
; -1.450586877123533735556293322588317096233367919921875p603 M 1.365606815436321230805560844601131975650787353515625p-667 == 1.365606815436321230805560844601131975650787353515625p-667
; [HW: 1.365606815436321230805560844601131975650787353515625p-667] 

; mpf : + 1646546717763130 -667
; mpfd: + 1646546717763130 -667 (2.23007e-201) class: Pos. norm. non-zero
; hwf : + 1646546717763130 -667 (2.23007e-201) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011010 #b0111001101011001101010010101110101000000100110011110)))
(assert (= y (fp #b0 #b00101100100 #b0101110110011000011010001000001101111110011000111010)))
(assert (= r (fp #b0 #b00101100100 #b0101110110011000011010001000001101111110011000111010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
