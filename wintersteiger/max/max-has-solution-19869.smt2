(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.660955989335117788385787207516841590404510498046875p605 {+ 2976681147277934 605 (2.20549e+182)}
; Y = 1.954117432970219336851869229576550424098968505859375p-385 {+ 4296962915592374 -385 (2.47972e-116)}
; 1.660955989335117788385787207516841590404510498046875p605 M 1.954117432970219336851869229576550424098968505859375p-385 == 1.660955989335117788385787207516841590404510498046875p605
; [HW: 1.660955989335117788385787207516841590404510498046875p605] 

; mpf : + 2976681147277934 605
; mpfd: + 2976681147277934 605 (2.20549e+182) class: Pos. norm. non-zero
; hwf : + 2976681147277934 605 (2.20549e+182) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001011100 #b1010100100110100011010010110011001001010001001101110)))
(assert (= y (fp #b0 #b01001111110 #b1111010001000001000010100100001100100110100010110110)))
(assert (= r (fp #b0 #b11001011100 #b1010100100110100011010010110011001001010001001101110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
