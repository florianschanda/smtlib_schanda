(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0521530137660721759829129950958304107189178466796875p359 {+ 234876293363131 359 (1.23551e+108)}
; Y = -1.836096588822657249551184577285312116146087646484375p-80 {- 3765444285867462 -80 (-1.51878e-024)}
; 1.0521530137660721759829129950958304107189178466796875p359 M -1.836096588822657249551184577285312116146087646484375p-80 == 1.0521530137660721759829129950958304107189178466796875p359
; [HW: 1.0521530137660721759829129950958304107189178466796875p359] 

; mpf : + 234876293363131 359
; mpfd: + 234876293363131 359 (1.23551e+108) class: Pos. norm. non-zero
; hwf : + 234876293363131 359 (1.23551e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100110 #b0000110101011001111001100110000010000011010110111011)))
(assert (= y (fp #b1 #b01110101111 #b1101011000001010011011010001000101001010010111000110)))
(assert (= r (fp #b0 #b10101100110 #b0000110101011001111001100110000010000011010110111011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
