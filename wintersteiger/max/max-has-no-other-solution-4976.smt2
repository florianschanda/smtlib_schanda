(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.245948260602612212011308656656183302402496337890625p721 {- 1107652494802346 721 (-1.37444e+217)}
; Y = -1.6335218358373371216885061585344374179840087890625p-962 {- 2853128703808104 -962 (-4.19053e-290)}
; -1.245948260602612212011308656656183302402496337890625p721 M -1.6335218358373371216885061585344374179840087890625p-962 == -1.6335218358373371216885061585344374179840087890625p-962
; [HW: -1.6335218358373371216885061585344374179840087890625p-962] 

; mpf : - 2853128703808104 -962
; mpfd: - 2853128703808104 -962 (-4.19053e-290) class: Neg. norm. non-zero
; hwf : - 2853128703808104 -962 (-4.19053e-290) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010000 #b0011111011110110011101110001011111001011110110101010)))
(assert (= y (fp #b1 #b00000111101 #b1010001000101110011111001010111000111001001001101000)))
(assert (= r (fp #b1 #b00000111101 #b1010001000101110011111001010111000111001001001101000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
