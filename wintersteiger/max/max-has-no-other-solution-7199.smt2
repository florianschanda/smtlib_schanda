(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0041115728324003786298135310062207281589508056640625p789 {+ 18516877875905 789 (3.26925e+237)}
; Y = 1.5675134876172054365639496609219349920749664306640625p698 {+ 2555853531360577 698 (2.06133e+210)}
; 1.0041115728324003786298135310062207281589508056640625p789 M 1.5675134876172054365639496609219349920749664306640625p698 == 1.0041115728324003786298135310062207281589508056640625p789
; [HW: 1.0041115728324003786298135310062207281589508056640625p789] 

; mpf : + 18516877875905 789
; mpfd: + 18516877875905 789 (3.26925e+237) class: Pos. norm. non-zero
; hwf : + 18516877875905 789 (3.26925e+237) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100010100 #b0000000100001101011101001011111011011001101011000001)))
(assert (= y (fp #b0 #b11010111001 #b1001000101001000100100000101110101011010110101000001)))
(assert (= r (fp #b0 #b11100010100 #b0000000100001101011101001011111011011001101011000001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
