(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.0027561886777698330064367837621830403804779052734375p-51 {+ 12412770302167 -51 (4.45313e-016)}
; Y = 1.3284398480679631138201557405409403145313262939453125p306 {+ 1479161577372501 306 (1.73189e+092)}
; 1.0027561886777698330064367837621830403804779052734375p-51 M 1.3284398480679631138201557405409403145313262939453125p306 == 1.3284398480679631138201557405409403145313262939453125p306
; [HW: 1.3284398480679631138201557405409403145313262939453125p306] 

; mpf : + 1479161577372501 306
; mpfd: + 1479161577372501 306 (1.73189e+092) class: Pos. norm. non-zero
; hwf : + 1479161577372501 306 (1.73189e+092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001100 #b0000000010110100101000010010110000111011100011010111)))
(assert (= y (fp #b0 #b10100110001 #b0101010000010100101000100100011000100111101101010101)))
(assert (= r (fp #b0 #b10100110001 #b0101010000010100101000100100011000100111101101010101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
