(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.99785139911561149261842729174531996250152587890625p368 {- 4493923189228196 368 (-1.20116e+111)}
; Y = -1.8712104104936984061424709580023773014545440673828125p625 {- 3923582880060717 625 (-2.60537e+188)}
; -1.99785139911561149261842729174531996250152587890625p368 M -1.8712104104936984061424709580023773014545440673828125p625 == -1.99785139911561149261842729174531996250152587890625p368
; [HW: -1.99785139911561149261842729174531996250152587890625p368] 

; mpf : - 4493923189228196 368
; mpfd: - 4493923189228196 368 (-1.20116e+111) class: Neg. norm. non-zero
; hwf : - 4493923189228196 368 (-1.20116e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101111 #b1111111101110011001100000111010101111000001010100100)))
(assert (= y (fp #b1 #b11001110000 #b1101111100000111101001010011110100000001010100101101)))
(assert (= r (fp #b1 #b10101101111 #b1111111101110011001100000111010101111000001010100100)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
