(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4934806208029740570708554514567367732524871826171875p-590 {- 2222439139962835 -590 (-3.68555e-178)}
; Y = -1.0482355336766049358487862264155410230159759521484375p389 {- 217233531491975 389 (-1.32168e+117)}
; -1.4934806208029740570708554514567367732524871826171875p-590 M -1.0482355336766049358487862264155410230159759521484375p389 == -1.4934806208029740570708554514567367732524871826171875p-590
; [HW: -1.4934806208029740570708554514567367732524871826171875p-590] 

; mpf : - 2222439139962835 -590
; mpfd: - 2222439139962835 -590 (-3.68555e-178) class: Neg. norm. non-zero
; hwf : - 2222439139962835 -590 (-3.68555e-178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110110001 #b0111111001010100101111101111011110001110111111010011)))
(assert (= y (fp #b1 #b10110000100 #b0000110001011001001010011111011110100101011010000111)))
(assert (= r (fp #b1 #b00110110001 #b0111111001010100101111101111011110001110111111010011)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
