(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6829136962107023034462827126844786107540130615234375p-812 {- 3075569867780727 -812 (-6.16177e-245)}
; Y = -1.723812121273105457675001161987893283367156982421875p602 {- 3259759999651806 602 (-2.86119e+181)}
; -1.6829136962107023034462827126844786107540130615234375p-812 M -1.723812121273105457675001161987893283367156982421875p602 == -1.6829136962107023034462827126844786107540130615234375p-812
; [HW: -1.6829136962107023034462827126844786107540130615234375p-812] 

; mpf : - 3075569867780727 -812
; mpfd: - 3075569867780727 -812 (-6.16177e-245) class: Neg. norm. non-zero
; hwf : - 3075569867780727 -812 (-6.16177e-245) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010011 #b1010111011010011011011101001011100110111001001110111)))
(assert (= y (fp #b1 #b11001011001 #b1011100101001011110000000100110101010000111111011110)))
(assert (= r (fp #b1 #b00011010011 #b1010111011010011011011101001011100110111001001110111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
