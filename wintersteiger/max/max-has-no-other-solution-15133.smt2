(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.21317676177161803963144848239608108997344970703125p345 {+ 960062784878708 345 (8.69506e+103)}
; Y = 1.7292679765955714099590068144607357680797576904296875p-139 {+ 3284330987649051 -139 (2.48138e-042)}
; 1.21317676177161803963144848239608108997344970703125p345 M 1.7292679765955714099590068144607357680797576904296875p-139 == 1.21317676177161803963144848239608108997344970703125p345
; [HW: 1.21317676177161803963144848239608108997344970703125p345] 

; mpf : + 960062784878708 345
; mpfd: + 960062784878708 345 (8.69506e+103) class: Pos. norm. non-zero
; hwf : + 960062784878708 345 (8.69506e+103) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011000 #b0011011010010010110000001001010000010011100001110100)))
(assert (= y (fp #b0 #b01101110100 #b1011101010110001010011100101110101111111100000011011)))
(assert (= r (fp #b0 #b10101011000 #b0011011010010010110000001001010000010011100001110100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
