(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8562273355103811045552220093668438494205474853515625p-802 {- 3856105109148985 -802 (-6.95945e-242)}
; Y = 1.1091059625398271837326547029078938066959381103515625p-196 {+ 491369572238265 -196 (1.10432e-059)}
; -1.8562273355103811045552220093668438494205474853515625p-802 M 1.1091059625398271837326547029078938066959381103515625p-196 == 1.1091059625398271837326547029078938066959381103515625p-196
; [HW: 1.1091059625398271837326547029078938066959381103515625p-196] 

; mpf : + 491369572238265 -196
; mpfd: + 491369572238265 -196 (1.10432e-059) class: Pos. norm. non-zero
; hwf : + 491369572238265 -196 (1.10432e-059) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011011101 #b1101101100110001101101101111001111110101010100111001)))
(assert (= y (fp #b0 #b01100111011 #b0001101111101110010111100100110011101000001110111001)))
(assert (= r (fp #b0 #b01100111011 #b0001101111101110010111100100110011101000001110111001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
