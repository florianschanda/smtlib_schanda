(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9608937672317583444936417436110787093639373779296875p-705 {- 4327480812047579 -705 (-1.16495e-212)}
; Y = 1.358033265153065105579344162833876907825469970703125p548 {+ 1612438479529586 548 (1.25126e+165)}
; -1.9608937672317583444936417436110787093639373779296875p-705 M 1.358033265153065105579344162833876907825469970703125p548 == 1.358033265153065105579344162833876907825469970703125p548
; [HW: 1.358033265153065105579344162833876907825469970703125p548] 

; mpf : + 1612438479529586 548
; mpfd: + 1612438479529586 548 (1.25126e+165) class: Pos. norm. non-zero
; hwf : + 1612438479529586 548 (1.25126e+165) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111110 #b1111010111111101001000100100100100110000110011011011)))
(assert (= y (fp #b0 #b11000100011 #b0101101110101000000100010110110010110110011001110010)))
(assert (= r (fp #b0 #b11000100011 #b0101101110101000000100010110110010110110011001110010)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
