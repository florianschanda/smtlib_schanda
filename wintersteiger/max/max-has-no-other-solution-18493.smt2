(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7624712988060140528290276051848195493221282958984375p628 {- 3433865457183463 628 (-1.96318e+189)}
; Y = -1.45966488805559624353236358729191124439239501953125p774 {- 2070146618562484 774 (-1.45034e+233)}
; -1.7624712988060140528290276051848195493221282958984375p628 M -1.45966488805559624353236358729191124439239501953125p774 == -1.7624712988060140528290276051848195493221282958984375p628
; [HW: -1.7624712988060140528290276051848195493221282958984375p628] 

; mpf : - 3433865457183463 628
; mpfd: - 3433865457183463 628 (-1.96318e+189) class: Neg. norm. non-zero
; hwf : - 3433865457183463 628 (-1.96318e+189) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001110011 #b1100001100110001010100011010110010000010101011100111)))
(assert (= y (fp #b1 #b11100000101 #b0111010110101100100110010001110101010001011110110100)))
(assert (= r (fp #b1 #b11001110011 #b1100001100110001010100011010110010000010101011100111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
