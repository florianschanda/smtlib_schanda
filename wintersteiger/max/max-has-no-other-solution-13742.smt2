(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.141101035215145831358540817745961248874664306640625p-290 {+ 635462569616522 -290 (5.73621e-088)}
; Y = 1.13817529411813911366380125400610268115997314453125p935 {+ 622286203102260 935 (3.30564e+281)}
; 1.141101035215145831358540817745961248874664306640625p-290 M 1.13817529411813911366380125400610268115997314453125p935 == 1.13817529411813911366380125400610268115997314453125p935
; [HW: 1.13817529411813911366380125400610268115997314453125p935] 

; mpf : + 622286203102260 935
; mpfd: + 622286203102260 935 (3.30564e+281) class: Pos. norm. non-zero
; hwf : + 622286203102260 935 (3.30564e+281) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011101 #b0010010000011111001100101000101110101110010010001010)))
(assert (= y (fp #b0 #b11110100110 #b0010001101011111011101001100000101011010010000110100)))
(assert (= r (fp #b0 #b11110100110 #b0010001101011111011101001100000101011010010000110100)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
