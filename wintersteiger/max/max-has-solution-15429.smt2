(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.6829203310404097226893327388097532093524932861328125p-1022 {- 3075599748397325 -1023 (-1.51955e-308)}
; Y = 1.7216688900088492619744329203967936336994171142578125p-76 {+ 3250107744128733 -76 (2.27861e-023)}
; -0.6829203310404097226893327388097532093524932861328125p-1022 M 1.7216688900088492619744329203967936336994171142578125p-76 == 1.7216688900088492619744329203967936336994171142578125p-76
; [HW: 1.7216688900088492619744329203967936336994171142578125p-76] 

; mpf : + 3250107744128733 -76
; mpfd: + 3250107744128733 -76 (2.27861e-023) class: Pos. norm. non-zero
; hwf : + 3250107744128733 -76 (2.27861e-023) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1010111011010011110111011110011110010111100100001101)))
(assert (= y (fp #b0 #b01110110011 #b1011100010111111010010101101100100100000111011011101)))
(assert (= r (fp #b0 #b01110110011 #b1011100010111111010010101101100100100000111011011101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
