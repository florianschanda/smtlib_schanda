(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6982948489356453070087127343867905437946319580078125p-1006 {+ 3144840421461309 -1006 (2.47649e-303)}
; Y = -1.6783743007674847280696894813445396721363067626953125p905 {- 3055126248154165 905 (-4.53978e+272)}
; 1.6982948489356453070087127343867905437946319580078125p-1006 M -1.6783743007674847280696894813445396721363067626953125p905 == 1.6982948489356453070087127343867905437946319580078125p-1006
; [HW: 1.6982948489356453070087127343867905437946319580078125p-1006] 

; mpf : + 3144840421461309 -1006
; mpfd: + 3144840421461309 -1006 (2.47649e-303) class: Pos. norm. non-zero
; hwf : + 3144840421461309 -1006 (2.47649e-303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000010001 #b1011001011000011011100111000001100100100110100111101)))
(assert (= y (fp #b1 #b11110001000 #b1010110110101001111100000010110000111110010000110101)))
(assert (= r (fp #b0 #b00000010001 #b1011001011000011011100111000001100100100110100111101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
