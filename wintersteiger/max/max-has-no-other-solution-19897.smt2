(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5177008113889300933152526340563781559467315673828125p-662 {+ 2331517181260589 -662 (7.93102e-200)}
; Y = 1.305521347649099883625467555248178541660308837890625p304 {+ 1375945827426218 304 (4.25503e+091)}
; 1.5177008113889300933152526340563781559467315673828125p-662 M 1.305521347649099883625467555248178541660308837890625p304 == 1.305521347649099883625467555248178541660308837890625p304
; [HW: 1.305521347649099883625467555248178541660308837890625p304] 

; mpf : + 1375945827426218 304
; mpfd: + 1375945827426218 304 (4.25503e+091) class: Pos. norm. non-zero
; hwf : + 1375945827426218 304 (4.25503e+091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101101001 #b1000010010001000000010100101011000000111001100101101)))
(assert (= y (fp #b0 #b10100101111 #b0100111000110110101001011010010001100001111110101010)))
(assert (= r (fp #b0 #b10100101111 #b0100111000110110101001011010010001100001111110101010)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
