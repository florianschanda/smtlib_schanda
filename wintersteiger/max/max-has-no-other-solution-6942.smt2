(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.4698472910538697977500532942940481007099151611328125p351 {+ 2116004084911245 351 (6.74219e+105)}
; Y = -1.69620433238674284126545899198390543460845947265625p912 {- 3135425571910660 912 (-5.87265e+274)}
; 1.4698472910538697977500532942940481007099151611328125p351 M -1.69620433238674284126545899198390543460845947265625p912 == 1.4698472910538697977500532942940481007099151611328125p351
; [HW: 1.4698472910538697977500532942940481007099151611328125p351] 

; mpf : + 2116004084911245 351
; mpfd: + 2116004084911245 351 (6.74219e+105) class: Pos. norm. non-zero
; hwf : + 2116004084911245 351 (6.74219e+105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101011110 #b0111100001000111111010010111110100110000110010001101)))
(assert (= y (fp #b1 #b11110001111 #b1011001000111010011100100111011011101111010000000100)))
(assert (= r (fp #b0 #b10101011110 #b0111100001000111111010010111110100110000110010001101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
