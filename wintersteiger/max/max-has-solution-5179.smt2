(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0283339418191099756683115629130043089389801025390625p610 {+ 127604729818481 610 (4.3695e+183)}
; Y = 1.9697633812528201335823041517869569361209869384765625p967 {+ 4367426002447753 967 (2.45708e+291)}
; 1.0283339418191099756683115629130043089389801025390625p610 M 1.9697633812528201335823041517869569361209869384765625p967 == 1.9697633812528201335823041517869569361209869384765625p967
; [HW: 1.9697633812528201335823041517869569361209869384765625p967] 

; mpf : + 4367426002447753 967
; mpfd: + 4367426002447753 967 (2.45708e+291) class: Pos. norm. non-zero
; hwf : + 4367426002447753 967 (2.45708e+291) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001100001 #b0000011101000000111001001010100101111010110101110001)))
(assert (= y (fp #b0 #b11111000110 #b1111100001000010011010011011011101010110110110001001)))
(assert (= r (fp #b0 #b11111000110 #b1111100001000010011010011011011101010110110110001001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
