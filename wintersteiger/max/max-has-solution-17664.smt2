(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3090438325173205935669784594210796058177947998046875p-746 {+ 1391809688966155 -746 (3.53653e-225)}
; Y = -1.5438105069391714341264787435648031532764434814453125p611 {- 2449104796411413 611 (-1.31196e+184)}
; 1.3090438325173205935669784594210796058177947998046875p-746 M -1.5438105069391714341264787435648031532764434814453125p611 == 1.3090438325173205935669784594210796058177947998046875p-746
; [HW: 1.3090438325173205935669784594210796058177947998046875p-746] 

; mpf : + 1391809688966155 -746
; mpfd: + 1391809688966155 -746 (3.53653e-225) class: Pos. norm. non-zero
; hwf : + 1391809688966155 -746 (3.53653e-225) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100010101 #b0100111100011101011111110010000110110001010000001011)))
(assert (= y (fp #b1 #b11001100010 #b1000101100110111001010100101011010000110011000010101)))
(assert (= r (fp #b0 #b00100010101 #b0100111100011101011111110010000110110001010000001011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
