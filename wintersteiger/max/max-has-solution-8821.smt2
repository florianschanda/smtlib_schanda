(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2571355536521000573202400119043886661529541015625p-807 {+ 1158035583611304 -807 (1.47291e-243)}
; Y = -1.3756638641790093213757018020260147750377655029296875p978 {- 1691839638733147 978 (-3.51437e+294)}
; 1.2571355536521000573202400119043886661529541015625p-807 M -1.3756638641790093213757018020260147750377655029296875p978 == 1.2571355536521000573202400119043886661529541015625p-807
; [HW: 1.2571355536521000573202400119043886661529541015625p-807] 

; mpf : + 1158035583611304 -807
; mpfd: + 1158035583611304 -807 (1.47291e-243) class: Pos. norm. non-zero
; hwf : + 1158035583611304 -807 (1.47291e-243) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011011000 #b0100000111010011101000101011100110010011000110101000)))
(assert (= y (fp #b1 #b11111010001 #b0110000000101011100000011100101011110000000101011011)))
(assert (= r (fp #b0 #b00011011000 #b0100000111010011101000101011100110010011000110101000)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
