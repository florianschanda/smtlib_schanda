(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9640844646510695614693986499332822859287261962890625p-599 {- 4341850435756241 -599 (-9.46657e-181)}
; Y = -1.48095041411604544379088110872544348239898681640625p380 {- 2166008105796708 380 (-3.64703e+114)}
; -1.9640844646510695614693986499332822859287261962890625p-599 M -1.48095041411604544379088110872544348239898681640625p380 == -1.9640844646510695614693986499332822859287261962890625p-599
; [HW: -1.9640844646510695614693986499332822859287261962890625p-599] 

; mpf : - 4341850435756241 -599
; mpfd: - 4341850435756241 -599 (-9.46657e-181) class: Neg. norm. non-zero
; hwf : - 4341850435756241 -599 (-9.46657e-181) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101000 #b1111011011001110001111010100111001000010000011010001)))
(assert (= y (fp #b1 #b10101111011 #b0111101100011111100100001111101110100000010001100100)))
(assert (= r (fp #b1 #b00110101000 #b1111011011001110001111010100111001000010000011010001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
