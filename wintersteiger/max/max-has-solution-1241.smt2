(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.396473746473342547602669583284296095371246337890625p890 {+ 1785559016879530 890 (1.15273e+268)}
; Y = -1.993770905493720047019223784445784986019134521484375p310 {- 4475546279673158 310 (-4.15886e+093)}
; 1.396473746473342547602669583284296095371246337890625p890 M -1.993770905493720047019223784445784986019134521484375p310 == 1.396473746473342547602669583284296095371246337890625p890
; [HW: 1.396473746473342547602669583284296095371246337890625p890] 

; mpf : + 1785559016879530 890
; mpfd: + 1785559016879530 890 (1.15273e+268) class: Pos. norm. non-zero
; hwf : + 1785559016879530 890 (1.15273e+268) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111001 #b0110010101111111010011011010111011010011010110101010)))
(assert (= y (fp #b1 #b10100110101 #b1111111001100111110001010010001011001111110101000110)))
(assert (= r (fp #b0 #b11101111001 #b0110010101111111010011011010111011010011010110101010)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
