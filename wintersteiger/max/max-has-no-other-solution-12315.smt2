(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.934432286455773475353225876460783183574676513671875p-409 {- 4208308897085182 -409 (-1.46314e-123)}
; Y = 1.3192085619486013658985257279709912836551666259765625p592 {+ 1437587560645193 592 (2.13831e+178)}
; -1.934432286455773475353225876460783183574676513671875p-409 M 1.3192085619486013658985257279709912836551666259765625p592 == 1.3192085619486013658985257279709912836551666259765625p592
; [HW: 1.3192085619486013658985257279709912836551666259765625p592] 

; mpf : + 1437587560645193 592
; mpfd: + 1437587560645193 592 (2.13831e+178) class: Pos. norm. non-zero
; hwf : + 1437587560645193 592 (2.13831e+178) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001100110 #b1110111100110110111101000100111010100111011011111110)))
(assert (= y (fp #b0 #b11001001111 #b0101000110110111101001101111111000101100001001001001)))
(assert (= r (fp #b0 #b11001001111 #b0101000110110111101001101111111000101100001001001001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
