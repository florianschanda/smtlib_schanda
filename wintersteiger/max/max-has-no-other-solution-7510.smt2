(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.885379486912970303791325932252220809459686279296875p462 {+ 3987394727342734 462 (2.24521e+139)}
; Y = 1.6808977751352680574115083800279535353183746337890625p-391 {+ 3066490966376593 -391 (3.33283e-118)}
; 1.885379486912970303791325932252220809459686279296875p462 M 1.6808977751352680574115083800279535353183746337890625p-391 == 1.885379486912970303791325932252220809459686279296875p462
; [HW: 1.885379486912970303791325932252220809459686279296875p462] 

; mpf : + 3987394727342734 462
; mpfd: + 3987394727342734 462 (2.24521e+139) class: Pos. norm. non-zero
; hwf : + 3987394727342734 462 (2.24521e+139) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111001101 #b1110001010101000001110101110010011010111001010001110)))
(assert (= y (fp #b0 #b01001111000 #b1010111001001111010100010000110000100000000010010001)))
(assert (= r (fp #b0 #b10111001101 #b1110001010101000001110101110010011010111001010001110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
