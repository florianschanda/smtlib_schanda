(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.614947975300669025244815202313475310802459716796875p477 {- 2769479472416334 477 (-6.30183e+143)}
; Y = 1.3496574237783409699886760790832340717315673828125p830 {+ 1574717043435464 830 (9.66318e+249)}
; -1.614947975300669025244815202313475310802459716796875p477 M 1.3496574237783409699886760790832340717315673828125p830 == 1.3496574237783409699886760790832340717315673828125p830
; [HW: 1.3496574237783409699886760790832340717315673828125p830] 

; mpf : + 1574717043435464 830
; mpfd: + 1574717043435464 830 (9.66318e+249) class: Pos. norm. non-zero
; hwf : + 1574717043435464 830 (9.66318e+249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111011100 #b1001110101101101001110110000001010101000011001001110)))
(assert (= y (fp #b0 #b11100111101 #b0101100110000011001001100001111111101110011111001000)))
(assert (= r (fp #b0 #b11100111101 #b0101100110000011001001100001111111101110011111001000)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
