(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5540122677611869494995744389598257839679718017578125p71 {+ 2495049442647965 71 (3.66931e+021)}
; Y = -1.905765278852327160308277598232962191104888916015625p-638 {- 4079204172324474 -638 (-1.67083e-192)}
; 1.5540122677611869494995744389598257839679718017578125p71 M -1.905765278852327160308277598232962191104888916015625p-638 == 1.5540122677611869494995744389598257839679718017578125p71
; [HW: 1.5540122677611869494995744389598257839679718017578125p71] 

; mpf : + 2495049442647965 71
; mpfd: + 2495049442647965 71 (3.66931e+021) class: Pos. norm. non-zero
; hwf : + 2495049442647965 71 (3.66931e+021) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000110 #b1000110111010011101111110111101110011101111110011101)))
(assert (= y (fp #b1 #b00110000001 #b1110011111100000001110111011101010000101111001111010)))
(assert (= r (fp #b0 #b10001000110 #b1000110111010011101111110111101110011101111110011101)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
