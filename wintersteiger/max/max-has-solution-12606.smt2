(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.516097282511096988599774704198352992534637451171875p-534 {- 2324295529203902 -534 (-2.69593e-161)}
; Y = -1.6647809556054788959755796895478852093219757080078125p-30 {- 2993907263947837 -30 (-1.55045e-009)}
; -1.516097282511096988599774704198352992534637451171875p-534 M -1.6647809556054788959755796895478852093219757080078125p-30 == -1.516097282511096988599774704198352992534637451171875p-534
; [HW: -1.516097282511096988599774704198352992534637451171875p-534] 

; mpf : - 2324295529203902 -534
; mpfd: - 2324295529203902 -534 (-2.69593e-161) class: Neg. norm. non-zero
; hwf : - 2324295529203902 -534 (-2.69593e-161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101001 #b1000010000011110111100111001010111110000100010111110)))
(assert (= y (fp #b1 #b01111100001 #b1010101000101111000101011010111101010100010000111101)))
(assert (= r (fp #b1 #b00111101001 #b1000010000011110111100111001010111110000100010111110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
