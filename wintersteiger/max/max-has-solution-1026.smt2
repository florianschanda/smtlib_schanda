(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6686457468925024461015027554822154343128204345703125p-228 {+ 3011312736547941 -228 (3.86834e-069)}
; Y = 1.6672780655344443534460197042790241539478302001953125p-242 {+ 3005153247293429 -242 (2.35911e-073)}
; 1.6686457468925024461015027554822154343128204345703125p-228 M 1.6672780655344443534460197042790241539478302001953125p-242 == 1.6686457468925024461015027554822154343128204345703125p-228
; [HW: 1.6686457468925024461015027554822154343128204345703125p-228] 

; mpf : + 3011312736547941 -228
; mpfd: + 3011312736547941 -228 (3.86834e-069) class: Pos. norm. non-zero
; hwf : + 3011312736547941 -228 (3.86834e-069) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100011011 #b1010101100101100010111100001111110000011010001100101)))
(assert (= y (fp #b0 #b01100001101 #b1010101011010010101111000011110011001110111111110101)))
(assert (= r (fp #b0 #b01100011011 #b1010101100101100010111100001111110000011010001100101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
