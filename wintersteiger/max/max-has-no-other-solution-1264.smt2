(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2930356894542194279296154491021297872066497802734375p363 {- 1319715421832279 363 (-2.4294e+109)}
; Y = 1.0227196185023765817589946891530416905879974365234375p265 {+ 102320065421303 265 (6.06325e+079)}
; -1.2930356894542194279296154491021297872066497802734375p363 M 1.0227196185023765817589946891530416905879974365234375p265 == 1.0227196185023765817589946891530416905879974365234375p265
; [HW: 1.0227196185023765817589946891530416905879974365234375p265] 

; mpf : + 102320065421303 265
; mpfd: + 102320065421303 265 (6.06325e+079) class: Pos. norm. non-zero
; hwf : + 102320065421303 265 (6.06325e+079) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101010 #b0100101100000100011000110000111011000100010001010111)))
(assert (= y (fp #b0 #b10100001000 #b0000010111010000111100111111001001110001111111110111)))
(assert (= r (fp #b0 #b10100001000 #b0000010111010000111100111111001001110001111111110111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
