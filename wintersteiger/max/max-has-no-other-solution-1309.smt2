(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4011165618230412288625075234449468553066253662109375p336 {+ 1806468398358383 336 (1.96134e+101)}
; Y = -1.2015445489305154325165858608670532703399658203125p366 {- 907675955462024 366 (-1.806e+110)}
; 1.4011165618230412288625075234449468553066253662109375p336 M -1.2015445489305154325165858608670532703399658203125p366 == 1.4011165618230412288625075234449468553066253662109375p336
; [HW: 1.4011165618230412288625075234449468553066253662109375p336] 

; mpf : + 1806468398358383 336
; mpfd: + 1806468398358383 336 (1.96134e+101) class: Pos. norm. non-zero
; hwf : + 1806468398358383 336 (1.96134e+101) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101001111 #b0110011010101111100100110011001011101001111101101111)))
(assert (= y (fp #b1 #b10101101101 #b0011001110011000011011000110111001010111111110001000)))
(assert (= r (fp #b0 #b10101001111 #b0110011010101111100100110011001011101001111101101111)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
