(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.976167277639948149925430698203854262828826904296875p272 {+ 4396266587830542 272 (1.49962e+082)}
; Y = -1.5736912381541581229527082541608251631259918212890625p746 {- 2583675646376785 746 (-5.825e+224)}
; 1.976167277639948149925430698203854262828826904296875p272 M -1.5736912381541581229527082541608251631259918212890625p746 == 1.976167277639948149925430698203854262828826904296875p272
; [HW: 1.976167277639948149925430698203854262828826904296875p272] 

; mpf : + 4396266587830542 272
; mpfd: + 4396266587830542 272 (1.49962e+082) class: Pos. norm. non-zero
; hwf : + 4396266587830542 272 (1.49962e+082) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100001111 #b1111100111100110000110010100010011100011100100001110)))
(assert (= y (fp #b1 #b11011101001 #b1001001011011101011011011101000111011111101101010001)))
(assert (= r (fp #b0 #b10100001111 #b1111100111100110000110010100010011100011100100001110)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
