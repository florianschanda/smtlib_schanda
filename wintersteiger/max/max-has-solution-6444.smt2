(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.87558215706192843441613149479962885379791259765625p866 {+ 3943271476276356 866 (9.2281e+260)}
; Y = 1.5202422877733123840471307630650699138641357421875p636 {+ 2342962973358264 636 (4.33501e+191)}
; 1.87558215706192843441613149479962885379791259765625p866 M 1.5202422877733123840471307630650699138641357421875p636 == 1.87558215706192843441613149479962885379791259765625p866
; [HW: 1.87558215706192843441613149479962885379791259765625p866] 

; mpf : + 3943271476276356 866
; mpfd: + 3943271476276356 866 (9.2281e+260) class: Pos. norm. non-zero
; hwf : + 3943271476276356 866 (9.2281e+260) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101100001 #b1110000000100110001001101111100110001010110010000100)))
(assert (= y (fp #b0 #b11001111011 #b1000010100101110100110010011101111111011100010111000)))
(assert (= r (fp #b0 #b11101100001 #b1110000000100110001001101111100110001010110010000100)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
