(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4947039844048151113753419849672354757785797119140625p162 {- 2227948679824225 162 (-8.73805e+048)}
; Y = 1.5528503112706977251633588821277953684329986572265625p-1019 {+ 2489816455830377 -1019 (2.76417e-307)}
; -1.4947039844048151113753419849672354757785797119140625p162 M 1.5528503112706977251633588821277953684329986572265625p-1019 == 1.5528503112706977251633588821277953684329986572265625p-1019
; [HW: 1.5528503112706977251633588821277953684329986572265625p-1019] 

; mpf : + 2489816455830377 -1019
; mpfd: + 2489816455830377 -1019 (2.76417e-307) class: Pos. norm. non-zero
; hwf : + 2489816455830377 -1019 (2.76417e-307) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010100001 #b0111111010100100111010111001101000111000001101100001)))
(assert (= y (fp #b0 #b00000000100 #b1000110110000111100110010001011001111101101101101001)))
(assert (= r (fp #b0 #b00000000100 #b1000110110000111100110010001011001111101101101101001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
