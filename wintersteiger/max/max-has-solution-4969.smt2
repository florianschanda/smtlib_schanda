(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4572059350993831206011464018956758081912994384765625p977 {- 2059072478945161 977 (-1.86134e+294)}
; Y = 1.0964816841837439209683680019224993884563446044921875p-427 {+ 434514876937987 -427 (3.16368e-129)}
; -1.4572059350993831206011464018956758081912994384765625p977 M 1.0964816841837439209683680019224993884563446044921875p-427 == 1.0964816841837439209683680019224993884563446044921875p-427
; [HW: 1.0964816841837439209683680019224993884563446044921875p-427] 

; mpf : + 434514876937987 -427
; mpfd: + 434514876937987 -427 (3.16368e-129) class: Pos. norm. non-zero
; hwf : + 434514876937987 -427 (3.16368e-129) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111010000 #b0111010100001011011100101011101011001001111110001001)))
(assert (= y (fp #b0 #b01001010100 #b0001100010110011000001100000111000111011011100000011)))
(assert (= r (fp #b0 #b01001010100 #b0001100010110011000001100000111000111011011100000011)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
