(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.69803950599270336851986940018832683563232421875p-203 {+ 3143690459078624 -203 (1.32087e-061)}
; Y = -1.2743012330980632018651022008270956575870513916015625p-749 {- 1235342931167705 -749 (-4.30334e-226)}
; 1.69803950599270336851986940018832683563232421875p-203 M -1.2743012330980632018651022008270956575870513916015625p-749 == 1.69803950599270336851986940018832683563232421875p-203
; [HW: 1.69803950599270336851986940018832683563232421875p-203] 

; mpf : + 3143690459078624 -203
; mpfd: + 3143690459078624 -203 (1.32087e-061) class: Pos. norm. non-zero
; hwf : + 3143690459078624 -203 (1.32087e-061) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100110100 #b1011001010110010101101111001000110001101111111100000)))
(assert (= y (fp #b1 #b00100010010 #b0100011000111000100110110000100101101000100111011001)))
(assert (= r (fp #b0 #b01100110100 #b1011001010110010101101111001000110001101111111100000)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
