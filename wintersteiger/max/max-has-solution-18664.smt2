(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6126942479378583161775395637960173189640045166015625p-566 {+ 2759329586704985 -566 (6.67689e-171)}
; Y = -1.5023083227039950582337723972159437835216522216796875p807 {- 2262195574954811 807 (-1.28223e+243)}
; 1.6126942479378583161775395637960173189640045166015625p-566 M -1.5023083227039950582337723972159437835216522216796875p807 == 1.6126942479378583161775395637960173189640045166015625p-566
; [HW: 1.6126942479378583161775395637960173189640045166015625p-566] 

; mpf : + 2759329586704985 -566
; mpfd: + 2759329586704985 -566 (6.67689e-171) class: Pos. norm. non-zero
; hwf : + 2759329586704985 -566 (6.67689e-171) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001001 #b1001110011011001100001111011110101010111001001011001)))
(assert (= y (fp #b1 #b11100100110 #b1000000010010111010001110011101010000101101100111011)))
(assert (= r (fp #b0 #b00111001001 #b1001110011011001100001111011110101010111001001011001)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
