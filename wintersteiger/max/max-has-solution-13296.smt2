(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4383883133212325144967280721175484359264373779296875p-392 {- 1974325444517083 -392 (-1.42599e-118)}
; Y = 1.5096281277930423403432769191567786037921905517578125p293 {+ 2295161046426269 293 (2.40247e+088)}
; -1.4383883133212325144967280721175484359264373779296875p-392 M 1.5096281277930423403432769191567786037921905517578125p293 == 1.5096281277930423403432769191567786037921905517578125p293
; [HW: 1.5096281277930423403432769191567786037921905517578125p293] 

; mpf : + 2295161046426269 293
; mpfd: + 2295161046426269 293 (2.40247e+088) class: Pos. norm. non-zero
; hwf : + 2295161046426269 293 (2.40247e+088) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110111 #b0111000000111010001101110110110010101001110011011011)))
(assert (= y (fp #b0 #b10100100100 #b1000001001110110111111010010110111111110001010011101)))
(assert (= r (fp #b0 #b10100100100 #b1000001001110110111111010010110111111110001010011101)))
(assert (= (fp.max x y) r))
(check-sat)
(exit)
