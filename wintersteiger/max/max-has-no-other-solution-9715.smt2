(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.9477223515277233278908397551276721060276031494140625p829 {+ 4268162029190945 829 (6.97258e+249)}
; Y = 1.79070210713824362613877383409999310970306396484375p326 {+ 3561005715068860 326 (2.44795e+098)}
; 1.9477223515277233278908397551276721060276031494140625p829 M 1.79070210713824362613877383409999310970306396484375p326 == 1.9477223515277233278908397551276721060276031494140625p829
; [HW: 1.9477223515277233278908397551276721060276031494140625p829] 

; mpf : + 4268162029190945 829
; mpfd: + 4268162029190945 829 (6.97258e+249) class: Pos. norm. non-zero
; hwf : + 4268162029190945 829 (6.97258e+249) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100111100 #b1111001010011101111011101001100101111111111100100001)))
(assert (= y (fp #b0 #b10101000101 #b1100101001101011011101000000101100001001011110111100)))
(assert (= r (fp #b0 #b11100111100 #b1111001010011101111011101001100101111111111100100001)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
