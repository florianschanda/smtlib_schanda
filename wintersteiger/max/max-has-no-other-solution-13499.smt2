(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.676243520065522130124691102537326514720916748046875p-610 {+ 3045530064978798 -610 (3.94493e-184)}
; Y = -1.4763086557929767650421126745641231536865234375p310 {- 2145103484742592 310 (-3.07947e+093)}
; 1.676243520065522130124691102537326514720916748046875p-610 M -1.4763086557929767650421126745641231536865234375p310 == 1.676243520065522130124691102537326514720916748046875p-610
; [HW: 1.676243520065522130124691102537326514720916748046875p-610] 

; mpf : + 3045530064978798 -610
; mpfd: + 3045530064978798 -610 (3.94493e-184) class: Pos. norm. non-zero
; hwf : + 3045530064978798 -610 (3.94493e-184) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110011101 #b1010110100011110010010111001101011010000001101101110)))
(assert (= y (fp #b1 #b10100110101 #b0111100111101111010111010011001101101110101111000000)))
(assert (= r (fp #b0 #b00110011101 #b1010110100011110010010111001101011010000001101101110)))
(assert  (not (= (fp.max x y) r)))
(check-sat)
(exit)
