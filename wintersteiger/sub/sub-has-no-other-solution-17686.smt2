(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.674884170023449581066188329714350402355194091796875p390 {- 3039408096635854 390 (-4.2236e+117)}
; Y = -1.7322199928937676016715840887627564370632171630859375p-149 {- 3297625687149599 -149 (-2.42736e-045)}
; -1.674884170023449581066188329714350402355194091796875p390 - -1.7322199928937676016715840887627564370632171630859375p-149 == -1.6748841700234493590215834046830423176288604736328125p390
; [HW: -1.6748841700234493590215834046830423176288604736328125p390] 

; mpf : - 3039408096635853 390
; mpfd: - 3039408096635853 390 (-4.2236e+117) class: Neg. norm. non-zero
; hwf : - 3039408096635853 390 (-4.2236e+117) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110000101 #b1010110011000101001101010111111011010110101111001110)))
(assert (= y (fp #b1 #b01101101010 #b1011101101110010110001001111101011110100110000011111)))
(assert (= r (fp #b1 #b10110000101 #b1010110011000101001101010111111011010110101111001101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
