(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.083975319598601938508863895549438893795013427734375p-177 {+ 378191218052582 -177 (5.65862e-054)}
; Y = 1.3158279762283020541957512250519357621669769287109375p553 {+ 1422362756054959 553 (3.8796e+166)}
; 1.083975319598601938508863895549438893795013427734375p-177 - 1.3158279762283020541957512250519357621669769287109375p553 == -1.3158279762283020541957512250519357621669769287109375p553
; [HW: -1.3158279762283020541957512250519357621669769287109375p553] 

; mpf : - 1422362756054959 553
; mpfd: - 1422362756054959 553 (-3.8796e+166) class: Neg. norm. non-zero
; hwf : - 1422362756054959 553 (-3.8796e+166) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001110 #b0001010101111111011010000001001101011000110111100110)))
(assert (= y (fp #b0 #b11000101000 #b0101000011011010000110100010110100001111111110101111)))
(assert (= r (fp #b1 #b11000101000 #b0101000011011010000110100010110100001111111110101111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
