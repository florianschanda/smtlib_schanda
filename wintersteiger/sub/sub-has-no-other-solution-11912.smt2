(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.9136804981766075695048812121967785060405731201171875p-499 {+ 4114851151123859 -499 (1.16923e-150)}
; Y = -1.07596827688641827336368805845268070697784423828125p253 {- 342130703477652 253 (-1.55736e+076)}
; 1.9136804981766075695048812121967785060405731201171875p-499 - -1.07596827688641827336368805845268070697784423828125p253 == 1.0759682768864184954082929834839887917041778564453125p253
; [HW: 1.0759682768864184954082929834839887917041778564453125p253] 

; mpf : + 342130703477653 253
; mpfd: + 342130703477653 253 (1.55736e+076) class: Pos. norm. non-zero
; hwf : + 342130703477653 253 (1.55736e+076) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001100 #b1110100111100110111101110001001010101001010110010011)))
(assert (= y (fp #b1 #b10011111100 #b0001001101110010101010000011000011000010101110010100)))
(assert (= r (fp #b0 #b10011111100 #b0001001101110010101010000011000011000010101110010101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
