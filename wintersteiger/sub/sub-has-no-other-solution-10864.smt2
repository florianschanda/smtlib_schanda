(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.003773732656356276748965683509595692157745361328125p-582 {+ 16995380984962 -582 (6.3413e-176)}
; Y = -1.6879060562517576027374843761208467185497283935546875p131 {- 3098053458601323 131 (-4.59492e+039)}
; 1.003773732656356276748965683509595692157745361328125p-582 - -1.6879060562517576027374843761208467185497283935546875p131 == 1.68790605625175782478208930115215480327606201171875p131
; [HW: 1.68790605625175782478208930115215480327606201171875p131] 

; mpf : + 3098053458601324 131
; mpfd: + 3098053458601324 131 (4.59492e+039) class: Pos. norm. non-zero
; hwf : + 3098053458601324 131 (4.59492e+039) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110111001 #b0000000011110111010100001011101001010111110010000010)))
(assert (= y (fp #b1 #b10010000010 #b1011000000011010100111000111111001010010010101101011)))
(assert (= r (fp #b0 #b10010000010 #b1011000000011010100111000111111001010010010101101100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
