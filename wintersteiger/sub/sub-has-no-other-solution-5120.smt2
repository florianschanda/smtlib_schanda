(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.395275386315991905661348937428556382656097412109375p-103 {- 1780162082521430 -103 (-1.37585e-031)}
; Y = 1.5734070358631679908967271330766379833221435546875p329 {+ 2582395713044984 329 (1.72072e+099)}
; -1.395275386315991905661348937428556382656097412109375p-103 - 1.5734070358631679908967271330766379833221435546875p329 == -1.5734070358631682129413320581079460680484771728515625p329
; [HW: -1.5734070358631682129413320581079460680484771728515625p329] 

; mpf : - 2582395713044985 329
; mpfd: - 2582395713044985 329 (-1.72072e+099) class: Neg. norm. non-zero
; hwf : - 2582395713044985 329 (-1.72072e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110011000 #b0110010100110000110001001000100100100100000101010110)))
(assert (= y (fp #b0 #b10101001000 #b1001001011001010110011011011001001010100000111111000)))
(assert (= r (fp #b1 #b10101001000 #b1001001011001010110011011011001001010100000111111001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
