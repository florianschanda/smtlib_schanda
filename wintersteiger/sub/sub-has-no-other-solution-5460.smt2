(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.882531392201228559457604205817915499210357666015625p-422 {- 3974568049060218 -422 (-1.73814e-127)}
; Y = -1.89161666722011290175942122004926204681396484375p-458 {- 4015484490249824 -458 (-2.54153e-138)}
; -1.882531392201228559457604205817915499210357666015625p-422 - -1.89161666722011290175942122004926204681396484375p-458 == -1.8825313921737019118296529995859600603580474853515625p-422
; [HW: -1.8825313921737019118296529995859600603580474853515625p-422] 

; mpf : - 3974568048936249 -422
; mpfd: - 3974568048936249 -422 (-1.73814e-127) class: Neg. norm. non-zero
; hwf : - 3974568048936249 -422 (-1.73814e-127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001011001 #b1110000111101101100100111100101100110010100101111010)))
(assert (= y (fp #b1 #b01000110101 #b1110010001000000111111010110101001000111011001100000)))
(assert (= r (fp #b1 #b01001011001 #b1110000111101101100100111100101100010100010100111001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
