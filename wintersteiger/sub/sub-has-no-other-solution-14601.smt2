(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1929900090617799879311178301577456295490264892578125p-199 {- 869149732896861 -199 (-1.4848e-060)}
; Y = -1.162591157102400796219399126130156219005584716796875p-533 {- 732245474540110 -533 (-4.13466e-161)}
; -1.1929900090617799879311178301577456295490264892578125p-199 - -1.162591157102400796219399126130156219005584716796875p-533 == -1.1929900090617799879311178301577456295490264892578125p-199
; [HW: -1.1929900090617799879311178301577456295490264892578125p-199] 

; mpf : - 869149732896861 -199
; mpfd: - 869149732896861 -199 (-1.4848e-060) class: Neg. norm. non-zero
; hwf : - 869149732896861 -199 (-1.4848e-060) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111000 #b0011000101100111110010110001000101100000000001011101)))
(assert (= y (fp #b1 #b00111101010 #b0010100110011111100100101111011001011111101001001110)))
(assert (= r (fp #b1 #b01100111000 #b0011000101100111110010110001000101100000000001011101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
