(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.99359041793295954647646794910542666912078857421875p-569 {- 4474733435961772 -569 (-1.03174e-171)}
; Y = 1.582738012082057554863467885297723114490509033203125p592 {+ 2624418694067378 592 (2.56547e+178)}
; -1.99359041793295954647646794910542666912078857421875p-569 - 1.582738012082057554863467885297723114490509033203125p592 == -1.582738012082057554863467885297723114490509033203125p592
; [HW: -1.582738012082057554863467885297723114490509033203125p592] 

; mpf : - 2624418694067378 592
; mpfd: - 2624418694067378 592 (-2.56547e+178) class: Neg. norm. non-zero
; hwf : - 2624418694067378 592 (-2.56547e+178) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111000110 #b1111111001011011111100010000111010100100000110101100)))
(assert (= y (fp #b0 #b11001001111 #b1001010100101110010100011000000000000111010010110010)))
(assert (= r (fp #b1 #b11001001111 #b1001010100101110010100011000000000000111010010110010)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
