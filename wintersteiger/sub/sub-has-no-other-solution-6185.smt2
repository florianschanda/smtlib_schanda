(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2388993992953662992562158251530490815639495849609375p600 {- 1075907245645647 600 (-5.14083e+180)}
; Y = -1.0730595091137284935456364109995774924755096435546875p-533 {- 329030778020459 -533 (-3.81624e-161)}
; -1.2388993992953662992562158251530490815639495849609375p600 - -1.0730595091137284935456364109995774924755096435546875p-533 == -1.2388993992953662992562158251530490815639495849609375p600
; [HW: -1.2388993992953662992562158251530490815639495849609375p600] 

; mpf : - 1075907245645647 600
; mpfd: - 1075907245645647 600 (-5.14083e+180) class: Neg. norm. non-zero
; hwf : - 1075907245645647 600 (-5.14083e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010111 #b0011110100101000100000101101001100000001111101001111)))
(assert (= y (fp #b1 #b00111101010 #b0001001010110100000001110010101001001110001001101011)))
(assert (= r (fp #b1 #b11001010111 #b0011110100101000100000101101001100000001111101001111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
