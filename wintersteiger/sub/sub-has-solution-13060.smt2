(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1383018284325217006625052817980758845806121826171875p265 {- 622856062993363 265 (-6.74848e+079)}
; Y = -1.651728234579197707176945186802186071872711181640625p-366 {- 2935123034397706 -366 (-1.09891e-110)}
; -1.1383018284325217006625052817980758845806121826171875p265 - -1.651728234579197707176945186802186071872711181640625p-366 == -1.1383018284325217006625052817980758845806121826171875p265
; [HW: -1.1383018284325217006625052817980758845806121826171875p265] 

; mpf : - 622856062993363 265
; mpfd: - 622856062993363 265 (-6.74848e+079) class: Neg. norm. non-zero
; hwf : - 622856062993363 265 (-6.74848e+079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100001000 #b0010001101100111101111111010011000011000001111010011)))
(assert (= y (fp #b1 #b01010010001 #b1010011011010111101010010101110101100101110000001010)))
(assert (= r (fp #b1 #b10100001000 #b0010001101100111101111111010011000011000001111010011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
