(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3138752266607001129017362472950480878353118896484375p572 {- 1413568353829959 572 (-2.03101e+172)}
; Y = 1.3928881357168261256873620368423871695995330810546875p745 {+ 1769410861612587 745 (2.57788e+224)}
; -1.3138752266607001129017362472950480878353118896484375p572 - 1.3928881357168261256873620368423871695995330810546875p745 == -1.3928881357168261256873620368423871695995330810546875p745
; [HW: -1.3928881357168261256873620368423871695995330810546875p745] 

; mpf : - 1769410861612587 745
; mpfd: - 1769410861612587 745 (-2.57788e+224) class: Neg. norm. non-zero
; hwf : - 1769410861612587 745 (-2.57788e+224) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111011 #b0101000001011010001000000111100110001000010001000111)))
(assert (= y (fp #b0 #b11011101000 #b0110010010010100010100010001110111100011111000101011)))
(assert (= r (fp #b1 #b11011101000 #b0110010010010100010100010001110111100011111000101011)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
