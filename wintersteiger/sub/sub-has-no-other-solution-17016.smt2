(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8374181102086268868589513658662326633930206298828125p-481 {+ 3771395889088877 -481 (2.94293e-145)}
; Y = 1.77286183435253263951381086371839046478271484375p-696 {+ 3480660269198944 -696 (5.3926e-210)}
; 1.8374181102086268868589513658662326633930206298828125p-481 - 1.77286183435253263951381086371839046478271484375p-696 == 1.8374181102086268868589513658662326633930206298828125p-481
; [HW: 1.8374181102086268868589513658662326633930206298828125p-481] 

; mpf : + 3771395889088877 -481
; mpfd: + 3771395889088877 -481 (2.94293e-145) class: Pos. norm. non-zero
; hwf : + 3771395889088877 -481 (2.94293e-145) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011110 #b1101011001100001000010001000010001101100100101101101)))
(assert (= y (fp #b0 #b00101000111 #b1100010111011010010001011110111011011110111001100000)))
(assert (= r (fp #b0 #b01000011110 #b1101011001100001000010001000010001101100100101101101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
