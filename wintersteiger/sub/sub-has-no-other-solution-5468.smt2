(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1319615557501123692674127596546895802021026611328125p995 {- 594302013303437 995 (-3.79033e+299)}
; Y = -1.121838547618674741812583306455053389072418212890625p-158 {- 548712037654826 -158 (-3.07037e-048)}
; -1.1319615557501123692674127596546895802021026611328125p995 - -1.121838547618674741812583306455053389072418212890625p-158 == -1.1319615557501123692674127596546895802021026611328125p995
; [HW: -1.1319615557501123692674127596546895802021026611328125p995] 

; mpf : - 594302013303437 995
; mpfd: - 594302013303437 995 (-3.79033e+299) class: Neg. norm. non-zero
; hwf : - 594302013303437 995 (-3.79033e+299) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100010 #b0010000111001000001110111000011001000110101010001101)))
(assert (= y (fp #b1 #b01101100001 #b0001111100110000110011111010000101101010000100101010)))
(assert (= r (fp #b1 #b11111100010 #b0010000111001000001110111000011001000110101010001101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
