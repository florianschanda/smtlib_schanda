(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.417729584121570240995424683205783367156982421875p-536 {+ 1881286799391536 -536 (6.30254e-162)}
; Y = 1.191851483445777404313048464246094226837158203125p620 {+ 864022269356880 620 (5.18584e+186)}
; 1.417729584121570240995424683205783367156982421875p-536 - 1.191851483445777404313048464246094226837158203125p620 == -1.1918514834457771822684435392147861421108245849609375p620
; [HW: -1.1918514834457771822684435392147861421108245849609375p620] 

; mpf : - 864022269356879 620
; mpfd: - 864022269356879 620 (-5.18584e+186) class: Neg. norm. non-zero
; hwf : - 864022269356879 620 (-5.18584e+186) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111100111 #b0110101011110000010100110111011001011111101100110000)))
(assert (= y (fp #b0 #b11001101011 #b0011000100011101001011011100011100010110101101010000)))
(assert (= r (fp #b1 #b11001101011 #b0011000100011101001011011100011100010110101101001111)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
