(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.45641180787695301290796123794279992580413818359375p-591 {+ 2055496047882140 -591 (1.79704e-178)}
; Y = 1.410677040088772482562262666760943830013275146484375p-287 {+ 1849524964713414 -287 (5.67308e-087)}
; 1.45641180787695301290796123794279992580413818359375p-591 - 1.410677040088772482562262666760943830013275146484375p-287 == -1.410677040088772482562262666760943830013275146484375p-287
; [HW: -1.410677040088772482562262666760943830013275146484375p-287] 

; mpf : - 1849524964713414 -287
; mpfd: - 1849524964713414 -287 (-5.67308e-087) class: Neg. norm. non-zero
; hwf : - 1849524964713414 -287 (-5.67308e-087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110000 #b0111010011010111011001110111110001010110111110011100)))
(assert (= y (fp #b0 #b01011100000 #b0110100100100010001000010110100001100110001111000110)))
(assert (= r (fp #b1 #b01011100000 #b0110100100100010001000010110100001100110001111000110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
