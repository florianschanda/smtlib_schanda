(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.403458231247065146618524522637017071247100830078125p-363 {- 1817014339903842 -363 (-7.46984e-110)}
; Y = -1.8513223784461556586933284052065573632717132568359375p-472 {- 3834015146342271 -472 (-1.51818e-142)}
; -1.403458231247065146618524522637017071247100830078125p-363 - -1.8513223784461556586933284052065573632717132568359375p-472 == -1.403458231247065146618524522637017071247100830078125p-363
; [HW: -1.403458231247065146618524522637017071247100830078125p-363] 

; mpf : - 1817014339903842 -363
; mpfd: - 1817014339903842 -363 (-7.46984e-110) class: Neg. norm. non-zero
; hwf : - 1817014339903842 -363 (-7.46984e-110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010100 #b0110011101001001000010011110010010000010000101100010)))
(assert (= y (fp #b1 #b01000100111 #b1101100111110000010000110110110111000111011101111111)))
(assert (= r (fp #b1 #b01010010100 #b0110011101001001000010011110010010000010000101100010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
