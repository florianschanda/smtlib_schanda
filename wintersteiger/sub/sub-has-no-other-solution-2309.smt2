(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9478416226859531779069811818771995604038238525390625p365 {- 4268699178734705 365 (-1.46387e+110)}
; Y = -1.6295439508094993197317990052397362887859344482421875p534 {- 2835213902279011 534 (-9.16397e+160)}
; -1.9478416226859531779069811818771995604038238525390625p365 - -1.6295439508094993197317990052397362887859344482421875p534 == 1.6295439508094993197317990052397362887859344482421875p534
; [HW: 1.6295439508094993197317990052397362887859344482421875p534] 

; mpf : + 2835213902279011 534
; mpfd: + 2835213902279011 534 (9.16397e+160) class: Pos. norm. non-zero
; hwf : + 2835213902279011 534 (9.16397e+160) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101100 #b1111001010100101101111111010001100111001010001110001)))
(assert (= y (fp #b1 #b11000010101 #b1010000100101001110010101101100000011111000101100011)))
(assert (= r (fp #b0 #b11000010101 #b1010000100101001110010101101100000011111000101100011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
