(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.5729489420266331567432871452183462679386138916015625p-868 {+ 2580332641813465 -868 (7.99242e-262)}
; Y = 1.981888611346231954257746110670268535614013671875p-693 {+ 4422033184178224 -693 (4.82272e-209)}
; 1.5729489420266331567432871452183462679386138916015625p-868 - 1.981888611346231954257746110670268535614013671875p-693 == -1.9818886113462317322131411856389604508876800537109375p-693
; [HW: -1.9818886113462317322131411856389604508876800537109375p-693] 

; mpf : - 4422033184178223 -693
; mpfd: - 4422033184178223 -693 (-4.82272e-209) class: Neg. norm. non-zero
; hwf : - 4422033184178223 -693 (-4.82272e-209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010011011 #b1001001010101100110010000010100001001000001111011001)))
(assert (= y (fp #b0 #b00101001010 #b1111101101011101000011010101001000001100000000110000)))
(assert (= r (fp #b1 #b00101001010 #b1111101101011101000011010101001000001100000000101111)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
