(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.329765233110153044293610946624539792537689208984375p57 {- 1485130580954630 57 (-1.91639e+017)}
; Y = 1.8807318332421287809808063684613443911075592041015625p-72 {+ 3966463556002585 -72 (3.9826e-022)}
; -1.329765233110153044293610946624539792537689208984375p57 - 1.8807318332421287809808063684613443911075592041015625p-72 == -1.329765233110153044293610946624539792537689208984375p57
; [HW: -1.329765233110153044293610946624539792537689208984375p57] 

; mpf : - 1485130580954630 57
; mpfd: - 1485130580954630 57 (-1.91639e+017) class: Neg. norm. non-zero
; hwf : - 1485130580954630 57 (-1.91639e+017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111000 #b0101010001101011011111101000101110010000111000000110)))
(assert (= y (fp #b0 #b01110110111 #b1110000101110111101001000011010001010010001100011001)))
(assert (= r (fp #b1 #b10000111000 #b0101010001101011011111101000101110010000111000000110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
