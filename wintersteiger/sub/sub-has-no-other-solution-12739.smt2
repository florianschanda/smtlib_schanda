(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7782406092022318144785231197602115571498870849609375p-535 {+ 3504884117607759 -535 (1.58104e-161)}
; Y = 1.0697000097758471159892224022769369184970855712890625p-647 {+ 313900938054225 -647 (1.8317e-195)}
; 1.7782406092022318144785231197602115571498870849609375p-535 - 1.0697000097758471159892224022769369184970855712890625p-647 == 1.7782406092022318144785231197602115571498870849609375p-535
; [HW: 1.7782406092022318144785231197602115571498870849609375p-535] 

; mpf : + 3504884117607759 -535
; mpfd: + 3504884117607759 -535 (1.58104e-161) class: Pos. norm. non-zero
; hwf : + 3504884117607759 -535 (1.58104e-161) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101000 #b1100011100111010110001101100110011110001010101001111)))
(assert (= y (fp #b0 #b00101111000 #b0001000111010111110111000001111010000100101001010001)))
(assert (= r (fp #b0 #b00111101000 #b1100011100111010110001101100110011110001010101001111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
