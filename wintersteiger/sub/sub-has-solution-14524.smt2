(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9342869491041765339645053245476447045803070068359375p-771 {- 4207654355842687 -771 (-1.55738e-232)}
; Y = 1.9634769266112026553372515991213731467723846435546875p-311 {+ 4339114327666283 -311 (4.70649e-094)}
; -1.9342869491041765339645053245476447045803070068359375p-771 - 1.9634769266112026553372515991213731467723846435546875p-311 == -1.9634769266112026553372515991213731467723846435546875p-311
; [HW: -1.9634769266112026553372515991213731467723846435546875p-311] 

; mpf : - 4339114327666283 -311
; mpfd: - 4339114327666283 -311 (-4.70649e-094) class: Neg. norm. non-zero
; hwf : - 4339114327666283 -311 (-4.70649e-094) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011111100 #b1110111100101101011011011111001101111011011001111111)))
(assert (= y (fp #b0 #b01011001000 #b1111011010100110011011001000001000111110111001101011)))
(assert (= r (fp #b1 #b01011001000 #b1111011010100110011011001000001000111110111001101011)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
