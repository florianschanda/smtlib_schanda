(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7878991427239319111919257920817472040653228759765625p-601 {+ 3548382285577033 -601 (2.15435e-181)}
; Y = -1.3929923525375860204889022497809492051601409912109375p-343 {- 1769880212447727 -343 (-7.77428e-104)}
; 1.7878991427239319111919257920817472040653228759765625p-601 - -1.3929923525375860204889022497809492051601409912109375p-343 == 1.3929923525375860204889022497809492051601409912109375p-343
; [HW: 1.3929923525375860204889022497809492051601409912109375p-343] 

; mpf : + 1769880212447727 -343
; mpfd: + 1769880212447727 -343 (7.77428e-104) class: Pos. norm. non-zero
; hwf : + 1769880212447727 -343 (7.77428e-104) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110100110 #b1100100110110011110000100001101010001011101101001001)))
(assert (= y (fp #b1 #b01010101000 #b0110010010011011001001011001010110111010000111101111)))
(assert (= r (fp #b0 #b01010101000 #b0110010010011011001001011001010110111010000111101111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
