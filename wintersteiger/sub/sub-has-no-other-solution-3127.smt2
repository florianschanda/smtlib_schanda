(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.261665989650528896248715682304464280605316162109375p-427 {+ 1178438853485654 -427 (3.64029e-129)}
; Y = 1.708209417289092701963681975030340254306793212890625p-86 {+ 3189491667803434 -86 (2.20781e-026)}
; 1.261665989650528896248715682304464280605316162109375p-427 - 1.708209417289092701963681975030340254306793212890625p-86 == -1.7082094172890924799190770499990321695804595947265625p-86
; [HW: -1.7082094172890924799190770499990321695804595947265625p-86] 

; mpf : - 3189491667803433 -86
; mpfd: - 3189491667803433 -86 (-2.20781e-026) class: Neg. norm. non-zero
; hwf : - 3189491667803433 -86 (-2.20781e-026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010100 #b0100001011111100100010101101010000000110010001010110)))
(assert (= y (fp #b0 #b01110101001 #b1011010101001101001101100101110111111001110100101010)))
(assert (= r (fp #b1 #b01110101001 #b1011010101001101001101100101110111111001110100101001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
