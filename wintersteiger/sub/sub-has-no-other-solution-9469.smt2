(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0621338173287908634989662459702230989933013916015625p-529 {+ 279825836569049 -529 (6.04382e-160)}
; Y = -1.1036853463872240421750348104978911578655242919921875p531 {- 466957287353283 531 (-7.75841e+159)}
; 1.0621338173287908634989662459702230989933013916015625p-529 - -1.1036853463872240421750348104978911578655242919921875p531 == 1.1036853463872240421750348104978911578655242919921875p531
; [HW: 1.1036853463872240421750348104978911578655242919921875p531] 

; mpf : + 466957287353283 531
; mpfd: + 466957287353283 531 (7.75841e+159) class: Pos. norm. non-zero
; hwf : + 466957287353283 531 (7.75841e+159) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111101110 #b0000111111101000000000000111100101100111000111011001)))
(assert (= y (fp #b1 #b11000010010 #b0001101010001011000111110111001111001110101111000011)))
(assert (= r (fp #b0 #b11000010010 #b0001101010001011000111110111001111001110101111000011)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
