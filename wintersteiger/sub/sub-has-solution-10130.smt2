(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -0.7328001929293883609517479271744377911090850830078125p-1022 {- 3300238675813821 -1023 (-1.63053e-308)}
; Y = 1.9702778283578663565123179068905301392078399658203125p-336 {+ 4369742866238341 -336 (1.4075e-101)}
; -0.7328001929293883609517479271744377911090850830078125p-1022 - 1.9702778283578663565123179068905301392078399658203125p-336 == -1.9702778283578663565123179068905301392078399658203125p-336
; [HW: -1.9702778283578663565123179068905301392078399658203125p-336] 

; mpf : - 4369742866238341 -336
; mpfd: - 4369742866238341 -336 (-1.4075e-101) class: Neg. norm. non-zero
; hwf : - 4369742866238341 -336 (-1.4075e-101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1011101110011000110010110001111100100010010110111101)))
(assert (= y (fp #b0 #b01010101111 #b1111100001100100001000001011010011010100101110000101)))
(assert (= r (fp #b1 #b01010101111 #b1111100001100100001000001011010011010100101110000101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
