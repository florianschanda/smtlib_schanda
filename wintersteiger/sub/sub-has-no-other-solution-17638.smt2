(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6783903375406998836893990301177836954593658447265625p-178 {+ 3055198471360041 -178 (4.3808e-054)}
; Y = -1.59561135012770893837341645848937332630157470703125p-971 {- 2682395054492788 -971 (-7.99468e-293)}
; 1.6783903375406998836893990301177836954593658447265625p-178 - -1.59561135012770893837341645848937332630157470703125p-971 == 1.6783903375406998836893990301177836954593658447265625p-178
; [HW: 1.6783903375406998836893990301177836954593658447265625p-178] 

; mpf : + 3055198471360041 -178
; mpfd: + 3055198471360041 -178 (4.3808e-054) class: Pos. norm. non-zero
; hwf : + 3055198471360041 -178 (4.3808e-054) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001101 #b1010110110101010111111010011100110101000111000101001)))
(assert (= y (fp #b1 #b00000110100 #b1001100001111001111111000100010111101100110001110100)))
(assert (= r (fp #b0 #b01101001101 #b1010110110101010111111010011100110101000111000101001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
