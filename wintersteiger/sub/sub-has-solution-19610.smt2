(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8316039410418298860605545996804721653461456298828125p-922 {- 3745211198995821 -922 (-5.16625e-278)}
; Y = 1.0776261298092129070624878295348025858402252197265625p-869 {+ 349597009282985 -869 (2.7378e-262)}
; -1.8316039410418298860605545996804721653461456298828125p-922 - 1.0776261298092129070624878295348025858402252197265625p-869 == -1.0776261298092129070624878295348025858402252197265625p-869
; [HW: -1.0776261298092129070624878295348025858402252197265625p-869] 

; mpf : - 349597009282985 -869
; mpfd: - 349597009282985 -869 (-2.7378e-262) class: Neg. norm. non-zero
; hwf : - 349597009282985 -869 (-2.7378e-262) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001100101 #b1101010011100011111111101111000111111111110101101101)))
(assert (= y (fp #b0 #b00010011010 #b0001001111011111010011100101100011011000011110101001)))
(assert (= r (fp #b1 #b00010011010 #b0001001111011111010011100101100011011000011110101001)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
