(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.411995520512961288517317370860837399959564208984375p-387 {+ 1855462872660486 -387 (4.47945e-117)}
; Y = 1.4084219064863610082483091900940053164958953857421875p576 {+ 1839368745861923 576 (3.48346e+173)}
; 1.411995520512961288517317370860837399959564208984375p-387 - 1.4084219064863610082483091900940053164958953857421875p576 == -1.4084219064863610082483091900940053164958953857421875p576
; [HW: -1.4084219064863610082483091900940053164958953857421875p576] 

; mpf : - 1839368745861923 576
; mpfd: - 1839368745861923 576 (-3.48346e+173) class: Neg. norm. non-zero
; hwf : - 1839368745861923 576 (-3.48346e+173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111100 #b0110100101111000100010011101011010110011101000000110)))
(assert (= y (fp #b0 #b11000111111 #b0110100010001110010101101000101101010100001100100011)))
(assert (= r (fp #b1 #b11000111111 #b0110100010001110010101101000101101010100001100100011)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
