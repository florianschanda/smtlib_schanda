(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0647271478060107430252401172765530645847320556640625p666 {- 291505158739905 666 (-3.25998e+200)}
; Y = 1.73132435134616091687576044932939112186431884765625p143 {+ 3293592076209540 143 (1.93049e+043)}
; -1.0647271478060107430252401172765530645847320556640625p666 - 1.73132435134616091687576044932939112186431884765625p143 == -1.064727147806010965069845042307861149311065673828125p666
; [HW: -1.064727147806010965069845042307861149311065673828125p666] 

; mpf : - 291505158739906 666
; mpfd: - 291505158739906 666 (-3.25998e+200) class: Neg. norm. non-zero
; hwf : - 291505158739906 666 (-3.25998e+200) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010011001 #b0001000010010001111101010101011011111101011111000001)))
(assert (= y (fp #b0 #b10010001110 #b1011101100111000000100101001101111001100110110000100)))
(assert (= r (fp #b1 #b11010011001 #b0001000010010001111101010101011011111101011111000010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
