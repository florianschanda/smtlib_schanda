(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9796086805908970074341368672321550548076629638671875p-585 {+ 4411765288878067 -585 (1.56326e-176)}
; Y = 1.4518106866272277866158901815651915967464447021484375p334 {+ 2034774439936391 334 (5.08076e+100)}
; 1.9796086805908970074341368672321550548076629638671875p-585 - 1.4518106866272277866158901815651915967464447021484375p334 == -1.4518106866272277866158901815651915967464447021484375p334
; [HW: -1.4518106866272277866158901815651915967464447021484375p334] 

; mpf : - 2034774439936391 334
; mpfd: - 2034774439936391 334 (-5.08076e+100) class: Neg. norm. non-zero
; hwf : - 2034774439936391 334 (-5.08076e+100) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110110 #b1111101011000111101000100110111000000011111111110011)))
(assert (= y (fp #b0 #b10101001101 #b0111001110101001110111010111101100001100000110000111)))
(assert (= r (fp #b1 #b10101001101 #b0111001110101001110111010111101100001100000110000111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
