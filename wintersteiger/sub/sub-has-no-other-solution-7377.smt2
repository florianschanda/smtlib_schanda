(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.599060061524642417651875803130678832530975341796875p802 {+ 2697926669854926 802 (4.26502e+241)}
; Y = 1.610571477537044327021931167109869420528411865234375p-816 {+ 2749769478718886 -816 (3.68556e-246)}
; 1.599060061524642417651875803130678832530975341796875p802 - 1.610571477537044327021931167109869420528411865234375p-816 == 1.599060061524642417651875803130678832530975341796875p802
; [HW: 1.599060061524642417651875803130678832530975341796875p802] 

; mpf : + 2697926669854926 802
; mpfd: + 2697926669854926 802 (4.26502e+241) class: Pos. norm. non-zero
; hwf : + 2697926669854926 802 (4.26502e+241) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100001 #b1001100101011100000000000000110010010110100011001110)))
(assert (= y (fp #b0 #b00011001111 #b1001110001001110011010011000111111100100010110100110)))
(assert (= r (fp #b0 #b11100100001 #b1001100101011100000000000000110010010110100011001110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
