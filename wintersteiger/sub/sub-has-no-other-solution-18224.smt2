(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5877618025525688238985821953974664211273193359375p996 {- 2647043834958360 996 (-1.06331e+300)}
; Y = -1.1628122602192245693686345475725829601287841796875p-828 {- 733241234454648 -828 (-6.49641e-250)}
; -1.5877618025525688238985821953974664211273193359375p996 - -1.1628122602192245693686345475725829601287841796875p-828 == -1.5877618025525686018539772703661583364009857177734375p996
; [HW: -1.5877618025525686018539772703661583364009857177734375p996] 

; mpf : - 2647043834958359 996
; mpfd: - 2647043834958359 996 (-1.06331e+300) class: Neg. norm. non-zero
; hwf : - 2647043834958359 996 (-1.06331e+300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100011 #b1001011001110111100011101011011111001101001000011000)))
(assert (= y (fp #b1 #b00011000011 #b0010100110101110000100000111010100000111100001111000)))
(assert (= r (fp #b1 #b11111100011 #b1001011001110111100011101011011111001101001000010111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
