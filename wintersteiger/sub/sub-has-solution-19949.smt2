(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7112499571112060881006300405715592205524444580078125p309 {- 3203185041813309 309 (-1.78477e+093)}
; Y = -1.605120750762122572297130318474955856800079345703125p-490 {- 2725221587646450 -490 (-5.02123e-148)}
; -1.7112499571112060881006300405715592205524444580078125p309 - -1.605120750762122572297130318474955856800079345703125p-490 == -1.7112499571112060881006300405715592205524444580078125p309
; [HW: -1.7112499571112060881006300405715592205524444580078125p309] 

; mpf : - 3203185041813309 309
; mpfd: - 3203185041813309 309 (-1.78477e+093) class: Neg. norm. non-zero
; hwf : - 3203185041813309 309 (-1.78477e+093) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110100 #b1011011000010100011110100010100100010010111100111101)))
(assert (= y (fp #b1 #b01000010101 #b1001101011101001001100011000101010100111011111110010)))
(assert (= r (fp #b1 #b10100110100 #b1011011000010100011110100010100100010010111100111101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
