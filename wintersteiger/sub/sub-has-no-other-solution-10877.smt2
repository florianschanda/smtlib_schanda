(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.86817971653766790041117928922176361083984375p-20 {- 3909933847889664 -20 (-1.78164e-006)}
; Y = -1.0729835984137163773510792452725581824779510498046875p593 {- 328688906620171 593 (-3.47841e+178)}
; -1.86817971653766790041117928922176361083984375p-20 - -1.0729835984137163773510792452725581824779510498046875p593 == 1.0729835984137163773510792452725581824779510498046875p593
; [HW: 1.0729835984137163773510792452725581824779510498046875p593] 

; mpf : + 328688906620171 593
; mpfd: + 328688906620171 593 (3.47841e+178) class: Pos. norm. non-zero
; hwf : + 328688906620171 593 (3.47841e+178) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111101011 #b1101111001000001000001101010000110010100011100000000)))
(assert (= y (fp #b1 #b11001010000 #b0001001010101111000011011001100001010100110100001011)))
(assert (= r (fp #b0 #b11001010000 #b0001001010101111000011011001100001010100110100001011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
