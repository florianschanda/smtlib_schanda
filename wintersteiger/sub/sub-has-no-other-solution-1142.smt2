(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.040580366025702918619799675070680677890777587890625p-515 {- 182757721311914 -515 (-9.70125e-156)}
; Y = -1.7420082656153470512805370162823237478733062744140625p82 {- 3341708148531105 82 (-8.42384e+024)}
; -1.040580366025702918619799675070680677890777587890625p-515 - -1.7420082656153470512805370162823237478733062744140625p82 == 1.74200826561534682923593209125101566314697265625p82
; [HW: 1.74200826561534682923593209125101566314697265625p82] 

; mpf : + 3341708148531104 82
; mpfd: + 3341708148531104 82 (8.42384e+024) class: Pos. norm. non-zero
; hwf : + 3341708148531104 82 (8.42384e+024) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111111100 #b0000101001100011011110011001000011110000101010101010)))
(assert (= y (fp #b1 #b10001010001 #b1011110111110100010000001111001000101101111110100001)))
(assert (= r (fp #b0 #b10001010001 #b1011110111110100010000001111001000101101111110100000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
