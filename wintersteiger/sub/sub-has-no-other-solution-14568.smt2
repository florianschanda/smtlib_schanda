(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6463020370815264481478834568406455218791961669921875p-940 {- 2910685613369155 -940 (-1.77139e-283)}
; Y = 1.8592186909811518891189052737900055944919586181640625p-651 {+ 3869576976532481 -651 (1.98977e-196)}
; -1.6463020370815264481478834568406455218791961669921875p-940 - 1.8592186909811518891189052737900055944919586181640625p-651 == -1.8592186909811518891189052737900055944919586181640625p-651
; [HW: -1.8592186909811518891189052737900055944919586181640625p-651] 

; mpf : - 3869576976532481 -651
; mpfd: - 3869576976532481 -651 (-1.98977e-196) class: Neg. norm. non-zero
; hwf : - 3869576976532481 -651 (-1.98977e-196) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001010011 #b1010010101110100000011001110000010011010011101000011)))
(assert (= y (fp #b0 #b00101110100 #b1101101111110101110000011001000111100000010000000001)))
(assert (= r (fp #b1 #b00101110100 #b1101101111110101110000011001000111100000010000000001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
