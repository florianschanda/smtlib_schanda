(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.38039108747063554716305588954128324985504150390625p-826 {- 1713129159787812 -826 (-3.08479e-249)}
; Y = -1.3611277353507131859799983431003056466579437255859375p-935 {- 1626374734358623 -935 (-4.68655e-282)}
; -1.38039108747063554716305588954128324985504150390625p-826 - -1.3611277353507131859799983431003056466579437255859375p-935 == -1.38039108747063554716305588954128324985504150390625p-826
; [HW: -1.38039108747063554716305588954128324985504150390625p-826] 

; mpf : - 1713129159787812 -826
; mpfd: - 1713129159787812 -826 (-3.08479e-249) class: Neg. norm. non-zero
; hwf : - 1713129159787812 -826 (-3.08479e-249) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000101 #b0110000101100001010011110111000001100000010100100100)))
(assert (= y (fp #b1 #b00001011000 #b0101110001110010110111100000010100000010100001011111)))
(assert (= r (fp #b1 #b00011000101 #b0110000101100001010011110111000001100000010100100100)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
