(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7822090745746443918307022613589651882648468017578125p-111 {+ 3522756496780189 -111 (6.86482e-034)}
; Y = -1.720471351389964542732968766358681023120880126953125p386 {- 3244714509650962 386 (-2.7116e+116)}
; 1.7822090745746443918307022613589651882648468017578125p-111 - -1.720471351389964542732968766358681023120880126953125p386 == 1.720471351389964542732968766358681023120880126953125p386
; [HW: 1.720471351389964542732968766358681023120880126953125p386] 

; mpf : + 3244714509650962 386
; mpfd: + 3244714509650962 386 (2.7116e+116) class: Pos. norm. non-zero
; hwf : + 3244714509650962 386 (2.7116e+116) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110010000 #b1100100000111110110110101001100111101110101110011101)))
(assert (= y (fp #b1 #b10110000001 #b1011100001110000110011110111101111101100110000010010)))
(assert (= r (fp #b0 #b10110000001 #b1011100001110000110011110111101111101100110000010010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
