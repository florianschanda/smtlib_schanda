(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2887909946628195445583742184680886566638946533203125p-253 {+ 1300599015951429 -253 (8.90417e-077)}
; Y = -1.2262887689418355829928941602702252566814422607421875p-381 {- 1019114015484579 -381 (-2.4898e-115)}
; 1.2887909946628195445583742184680886566638946533203125p-253 - -1.2262887689418355829928941602702252566814422607421875p-381 == 1.2887909946628195445583742184680886566638946533203125p-253
; [HW: 1.2887909946628195445583742184680886566638946533203125p-253] 

; mpf : + 1300599015951429 -253
; mpfd: + 1300599015951429 -253 (8.90417e-077) class: Pos. norm. non-zero
; hwf : + 1300599015951429 -253 (8.90417e-077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100000010 #b0100100111101110001101001110010101110100110001000101)))
(assert (= y (fp #b1 #b01010000010 #b0011100111101110000011111000111000001110101010100011)))
(assert (= r (fp #b0 #b01100000010 #b0100100111101110001101001110010101110100110001000101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
