(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.833854898365802288395798314013518393039703369140625p-433 {+ 3755348609561290 -433 (8.26755e-131)}
; Y = -1.4508548820686024694026627912535332143306732177734375p-111 {- 2030469878882327 -111 (-5.58849e-034)}
; 1.833854898365802288395798314013518393039703369140625p-433 - -1.4508548820686024694026627912535332143306732177734375p-111 == 1.4508548820686024694026627912535332143306732177734375p-111
; [HW: 1.4508548820686024694026627912535332143306732177734375p-111] 

; mpf : + 2030469878882327 -111
; mpfd: + 2030469878882327 -111 (5.58849e-034) class: Pos. norm. non-zero
; hwf : + 2030469878882327 -111 (5.58849e-034) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001110 #b1101010101110111100000111011111000010111001011001010)))
(assert (= y (fp #b1 #b01110010000 #b0111001101101011001110011011110110111010000000010111)))
(assert (= r (fp #b0 #b01110010000 #b0111001101101011001110011011110110111010000000010111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
