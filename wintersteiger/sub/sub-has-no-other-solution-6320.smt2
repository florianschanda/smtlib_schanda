(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.437105759970412233172964988625608384609222412109375p-103 {- 1968549337724246 -103 (-1.4171e-031)}
; Y = -1.4409910718439860044526312776724807918071746826171875p-606 {- 1986047226830291 -606 (-5.42605e-183)}
; -1.437105759970412233172964988625608384609222412109375p-103 - -1.4409910718439860044526312776724807918071746826171875p-606 == -1.4371057599704120111283600635943002998828887939453125p-103
; [HW: -1.4371057599704120111283600635943002998828887939453125p-103] 

; mpf : - 1968549337724245 -103
; mpfd: - 1968549337724245 -103 (-1.4171e-031) class: Neg. norm. non-zero
; hwf : - 1968549337724245 -103 (-1.4171e-031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110011000 #b0110111111100110001010011011111111110111010101010110)))
(assert (= y (fp #b1 #b00110100001 #b0111000011100100110010100111011101100101110111010011)))
(assert (= r (fp #b1 #b01110011000 #b0110111111100110001010011011111111110111010101010101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
