(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.98086605972133344977237356943078339099884033203125p-595 {- 4417428021061364 -595 (-1.52759e-179)}
; Y = 1.2181642093367262003056339381146244704723358154296875p-163 {+ 982524251874459 -163 (1.04188e-049)}
; -1.98086605972133344977237356943078339099884033203125p-595 - 1.2181642093367262003056339381146244704723358154296875p-163 == -1.2181642093367262003056339381146244704723358154296875p-163
; [HW: -1.2181642093367262003056339381146244704723358154296875p-163] 

; mpf : - 982524251874459 -163
; mpfd: - 982524251874459 -163 (-1.04188e-049) class: Neg. norm. non-zero
; hwf : - 982524251874459 -163 (-1.04188e-049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110101100 #b1111101100011010000010011100000001000010011011110100)))
(assert (= y (fp #b0 #b01101011100 #b0011011111011001100111000001000001000010010010011011)))
(assert (= r (fp #b1 #b01101011100 #b0011011111011001100111000001000001000010010010011011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
