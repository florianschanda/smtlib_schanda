(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.859918943561444937273563482449389994144439697265625p-508 {+ 3872730633792154 -508 (2.21951e-153)}
; Y = -1.3845930523811265100420087037491612136363983154296875p-117 {- 1732053127392923 -117 (-8.33322e-036)}
; 1.859918943561444937273563482449389994144439697265625p-508 - -1.3845930523811265100420087037491612136363983154296875p-117 == 1.3845930523811265100420087037491612136363983154296875p-117
; [HW: 1.3845930523811265100420087037491612136363983154296875p-117] 

; mpf : + 1732053127392923 -117
; mpfd: + 1732053127392923 -117 (8.33322e-036) class: Pos. norm. non-zero
; hwf : + 1732053127392923 -117 (8.33322e-036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000000011 #b1101110000100011101001011101101111001110101010011010)))
(assert (= y (fp #b1 #b01110001010 #b0110001001110100101100001011011000111110111010011011)))
(assert (= r (fp #b0 #b01110001010 #b0110001001110100101100001011011000111110111010011011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
