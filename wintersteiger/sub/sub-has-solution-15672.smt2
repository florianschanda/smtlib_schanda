(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5981401556855303613957630659569986164569854736328125p397 {- 2693783782260685 397 (-5.1585e+119)}
; Y = -1.039247502434144987404351923032663762569427490234375p-523 {- 176755037337638 -523 (-3.7847e-158)}
; -1.5981401556855303613957630659569986164569854736328125p397 - -1.039247502434144987404351923032663762569427490234375p-523 == -1.59814015568553013935115814092569053173065185546875p397
; [HW: -1.59814015568553013935115814092569053173065185546875p397] 

; mpf : - 2693783782260684 397
; mpfd: - 2693783782260684 397 (-5.1585e+119) class: Neg. norm. non-zero
; hwf : - 2693783782260684 397 (-5.1585e+119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001100 #b1001100100011111101101101001011100010111111111001101)))
(assert (= y (fp #b1 #b00111110100 #b0000101000001100000111111101001101100111100000100110)))
(assert (= r (fp #b1 #b10110001100 #b1001100100011111101101101001011100010111111111001100)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
