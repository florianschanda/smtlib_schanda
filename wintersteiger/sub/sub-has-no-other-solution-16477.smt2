(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1536984299902226513978575894725508987903594970703125p-366 {+ 692196192031397 -366 (7.67563e-111)}
; Y = 1.5268751666992412818757429704419337213039398193359375p-291 {+ 2372834804417471 -291 (3.83773e-088)}
; 1.1536984299902226513978575894725508987903594970703125p-366 - 1.5268751666992412818757429704419337213039398193359375p-291 == -1.526875166699241059831138045410625636577606201171875p-291
; [HW: -1.526875166699241059831138045410625636577606201171875p-291] 

; mpf : - 2372834804417470 -291
; mpfd: - 2372834804417470 -291 (-3.83773e-088) class: Neg. norm. non-zero
; hwf : - 2372834804417470 -291 (-3.83773e-088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010001 #b0010011101011000110001111100001001000001001010100101)))
(assert (= y (fp #b0 #b01011011100 #b1000011011100001010010100111101000001100001110111111)))
(assert (= r (fp #b1 #b01011011100 #b1000011011100001010010100111101000001100001110111110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
