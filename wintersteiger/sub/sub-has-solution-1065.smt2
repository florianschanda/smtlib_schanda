(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1272517396238075360059838203596882522106170654296875p-797 {+ 573090887152027 -797 (1.35243e-240)}
; Y = 1.566912615984922485523611612734384834766387939453125p-517 {+ 2553147446101330 -517 (3.65205e-156)}
; 1.1272517396238075360059838203596882522106170654296875p-797 - 1.566912615984922485523611612734384834766387939453125p-517 == -1.566912615984922485523611612734384834766387939453125p-517
; [HW: -1.566912615984922485523611612734384834766387939453125p-517] 

; mpf : - 2553147446101330 -517
; mpfd: - 2553147446101330 -517 (-3.65205e-156) class: Neg. norm. non-zero
; hwf : - 2553147446101330 -517 (-3.65205e-156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011100010 #b0010000010010011100100011110110000001011000110011011)))
(assert (= y (fp #b0 #b00111111010 #b1001000100100001001011110110100101011000010101010010)))
(assert (= r (fp #b1 #b00111111010 #b1001000100100001001011110110100101011000010101010010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
