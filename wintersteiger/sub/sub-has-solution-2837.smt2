(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.824187008034987567128837326890788972377777099609375p-458 {+ 3711808302269974 -458 (2.45093e-138)}
; Y = 1.219585801726377649600863151135854423046112060546875p-614 {+ 988926534830766 -614 (1.79389e-185)}
; 1.824187008034987567128837326890788972377777099609375p-458 - 1.219585801726377649600863151135854423046112060546875p-614 == 1.8241870080349873450842324018594808876514434814453125p-458
; [HW: 1.8241870080349873450842324018594808876514434814453125p-458] 

; mpf : + 3711808302269973 -458
; mpfd: + 3711808302269973 -458 (2.45093e-138) class: Pos. norm. non-zero
; hwf : + 3711808302269973 -458 (2.45093e-138) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000110101 #b1101001011111101111010110111010101001100011000010110)))
(assert (= y (fp #b0 #b00110011001 #b0011100000110110110001100110110100010100101010101110)))
(assert (= r (fp #b0 #b01000110101 #b1101001011111101111010110111010101001100011000010101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
