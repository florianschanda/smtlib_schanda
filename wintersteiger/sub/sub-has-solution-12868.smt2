(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6130035512739897551881540493923239409923553466796875p-129 {- 2760722565094331 -129 (-2.3701e-039)}
; Y = -1.276386119496337290257770291646011173725128173828125p-246 {- 1244732424774082 -246 (-1.12876e-074)}
; -1.6130035512739897551881540493923239409923553466796875p-129 - -1.276386119496337290257770291646011173725128173828125p-246 == -1.6130035512739897551881540493923239409923553466796875p-129
; [HW: -1.6130035512739897551881540493923239409923553466796875p-129] 

; mpf : - 2760722565094331 -129
; mpfd: - 2760722565094331 -129 (-2.3701e-039) class: Neg. norm. non-zero
; hwf : - 2760722565094331 -129 (-2.3701e-039) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101111110 #b1001110011101101110011001111110100001101101110111011)))
(assert (= y (fp #b1 #b01100001001 #b0100011011000001001111011010000001001110000111000010)))
(assert (= r (fp #b1 #b01101111110 #b1001110011101101110011001111110100001101101110111011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
