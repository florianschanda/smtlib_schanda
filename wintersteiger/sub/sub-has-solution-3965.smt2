(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4315089101370348512176633448689244687557220458984375p-986 {- 1943343366900199 -986 (-2.18886e-297)}
; Y = -1.68618262252320949556860796292312443256378173828125p-233 {- 3090291803103636 -233 (-1.22156e-070)}
; -1.4315089101370348512176633448689244687557220458984375p-986 - -1.68618262252320949556860796292312443256378173828125p-233 == 1.6861826225232092735240030378918163478374481201171875p-233
; [HW: 1.6861826225232092735240030378918163478374481201171875p-233] 

; mpf : + 3090291803103635 -233
; mpfd: + 3090291803103635 -233 (1.22156e-070) class: Pos. norm. non-zero
; hwf : + 3090291803103635 -233 (1.22156e-070) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000100101 #b0110111001110111010111100011000011111000100111100111)))
(assert (= y (fp #b1 #b01100010110 #b1010111110101001101010100001001011010010000110010100)))
(assert (= r (fp #b0 #b01100010110 #b1010111110101001101010100001001011010010000110010011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
