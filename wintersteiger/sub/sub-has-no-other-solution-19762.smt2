(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4832269006728211468981726284255273640155792236328125p947 {- 2176260489805517 947 (-1.76447e+285)}
; Y = -1.018905984270296105620445814565755426883697509765625p33 {- 85144983714778 33 (-8.75234e+009)}
; -1.4832269006728211468981726284255273640155792236328125p947 - -1.018905984270296105620445814565755426883697509765625p33 == -1.48322690067282092485356770339421927928924560546875p947
; [HW: -1.48322690067282092485356770339421927928924560546875p947] 

; mpf : - 2176260489805516 947
; mpfd: - 2176260489805516 947 (-1.76447e+285) class: Neg. norm. non-zero
; hwf : - 2176260489805516 947 (-1.76447e+285) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110110010 #b0111101110110100110000100001011011101111111011001101)))
(assert (= y (fp #b1 #b10000100000 #b0000010011010111000001011100100000100011101111011010)))
(assert (= r (fp #b1 #b11110110010 #b0111101110110100110000100001011011101111111011001100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
