(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8178659574472977311643262510187923908233642578125p-637 {+ 3683340821198664 -637 (3.18753e-192)}
; Y = -1.8712852946608407034290166848222725093364715576171875p524 {- 3923920128367955 524 (-1.02768e+158)}
; 1.8178659574472977311643262510187923908233642578125p-637 - -1.8712852946608407034290166848222725093364715576171875p524 == 1.8712852946608407034290166848222725093364715576171875p524
; [HW: 1.8712852946608407034290166848222725093364715576171875p524] 

; mpf : + 3923920128367955 524
; mpfd: + 3923920128367955 524 (1.02768e+158) class: Pos. norm. non-zero
; hwf : + 3923920128367955 524 (1.02768e+158) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110000010 #b1101000101011111101010011101001110111111011101001000)))
(assert (= y (fp #b1 #b11000001011 #b1101111100001100100011011001011000001101110101010011)))
(assert (= r (fp #b0 #b11000001011 #b1101111100001100100011011001011000001101110101010011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
