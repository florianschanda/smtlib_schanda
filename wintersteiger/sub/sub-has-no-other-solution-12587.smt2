(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8921193572672685423441407692735083401203155517578125p-182 {- 4017748404958877 -182 (-3.08666e-055)}
; Y = 1.6542217331225879117795329875661991536617279052734375p236 {+ 2946352753508567 236 (1.82672e+071)}
; -1.8921193572672685423441407692735083401203155517578125p-182 - 1.6542217331225879117795329875661991536617279052734375p236 == -1.6542217331225881338241379125975072383880615234375p236
; [HW: -1.6542217331225881338241379125975072383880615234375p236] 

; mpf : - 2946352753508568 236
; mpfd: - 2946352753508568 236 (-1.82672e+071) class: Neg. norm. non-zero
; hwf : - 2946352753508568 236 (-1.82672e+071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101001001 #b1110010001100001111011110010011110010111011010011101)))
(assert (= y (fp #b0 #b10011101011 #b1010011101111011000100110101010000011000000011010111)))
(assert (= r (fp #b1 #b10011101011 #b1010011101111011000100110101010000011000000011011000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
