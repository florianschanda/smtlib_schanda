(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4600289964857904312367509191972203552722930908203125p136 {+ 2071786417153029 136 (1.27186e+041)}
; Y = -1.265855013870782475038367920205928385257720947265625p308 {- 1197304541403034 308 (-6.6012e+092)}
; 1.4600289964857904312367509191972203552722930908203125p136 - -1.265855013870782475038367920205928385257720947265625p308 == 1.265855013870782475038367920205928385257720947265625p308
; [HW: 1.265855013870782475038367920205928385257720947265625p308] 

; mpf : + 1197304541403034 308
; mpfd: + 1197304541403034 308 (6.6012e+092) class: Pos. norm. non-zero
; hwf : + 1197304541403034 308 (6.6012e+092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000111 #b0111010111000100011101011101011100011110010000000101)))
(assert (= y (fp #b1 #b10100110011 #b0100010000001111000100101111111000001101011110011010)))
(assert (= r (fp #b0 #b10100110011 #b0100010000001111000100101111111000001101011110011010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
