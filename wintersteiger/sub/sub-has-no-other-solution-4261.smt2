(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4247346288904652045204102250863797962665557861328125p-618 {- 1912834716402445 -618 (-1.30977e-186)}
; Y = -1.6577009985978865547195937324431724846363067626953125p286 {- 2962021972206645 286 (-2.06103e+086)}
; -1.4247346288904652045204102250863797962665557861328125p-618 - -1.6577009985978865547195937324431724846363067626953125p286 == 1.65770099859788633267498880741186439990997314453125p286
; [HW: 1.65770099859788633267498880741186439990997314453125p286] 

; mpf : + 2962021972206644 286
; mpfd: + 2962021972206644 286 (2.06103e+086) class: Pos. norm. non-zero
; hwf : + 2962021972206644 286 (2.06103e+086) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110010101 #b0110110010111011011010001001110010010000001100001101)))
(assert (= y (fp #b1 #b10100011101 #b1010100001011111000101111011011110000110010000110101)))
(assert (= r (fp #b0 #b10100011101 #b1010100001011111000101111011011110000110010000110100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
