(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.216067377387805237276552361436188220977783203125p-19 {+ 973080960290640 -19 (2.31946e-006)}
; Y = -1.8839277513080048276350453306804411113262176513671875p571 {- 3980856691413171 571 (-1.4561e+172)}
; 1.216067377387805237276552361436188220977783203125p-19 - -1.8839277513080048276350453306804411113262176513671875p571 == 1.88392775130800504967965025571174919605255126953125p571
; [HW: 1.88392775130800504967965025571174919605255126953125p571] 

; mpf : + 3980856691413172 571
; mpfd: + 3980856691413172 571 (1.4561e+172) class: Pos. norm. non-zero
; hwf : + 3980856691413172 571 (1.4561e+172) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101100 #b0011011101010000001100010000111110011100111101010000)))
(assert (= y (fp #b1 #b11000111010 #b1110001001001001000101101100111111100101000010110011)))
(assert (= r (fp #b0 #b11000111010 #b1110001001001001000101101100111111100101000010110100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
