(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8986364597066944792658205187763087451457977294921875p769 {- 4047098825076611 769 (-5.89533e+231)}
; Y = 1.2140388392882337509348644744022749364376068115234375p-1001 {+ 963945236861303 -1001 (5.66509e-302)}
; -1.8986364597066944792658205187763087451457977294921875p769 - 1.2140388392882337509348644744022749364376068115234375p-1001 == -1.8986364597066944792658205187763087451457977294921875p769
; [HW: -1.8986364597066944792658205187763087451457977294921875p769] 

; mpf : - 4047098825076611 769
; mpfd: - 4047098825076611 769 (-5.89533e+231) class: Neg. norm. non-zero
; hwf : - 4047098825076611 769 (-5.89533e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000000 #b1110011000001101000010011111110101101110111110000011)))
(assert (= y (fp #b0 #b00000010110 #b0011011011001011001111111101011011010001000101110111)))
(assert (= r (fp #b1 #b11100000000 #b1110011000001101000010011111110101101110111110000011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
