(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.609985620365858238756118225865066051483154296875p546 {- 2747131012581040 546 (-3.70851e+164)}
; Y = 1.4075929861034577328382511041127145290374755859375p-55 {+ 1835635620334360 -55 (3.90686e-017)}
; -1.609985620365858238756118225865066051483154296875p546 - 1.4075929861034577328382511041127145290374755859375p-55 == -1.609985620365858238756118225865066051483154296875p546
; [HW: -1.609985620365858238756118225865066051483154296875p546] 

; mpf : - 2747131012581040 546
; mpfd: - 2747131012581040 546 (-3.70851e+164) class: Neg. norm. non-zero
; hwf : - 2747131012581040 546 (-3.70851e+164) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100001 #b1001110000101000000001001000001010000000011010110000)))
(assert (= y (fp #b0 #b01111001000 #b0110100001011000000000111001000101100100101100011000)))
(assert (= r (fp #b1 #b11000100001 #b1001110000101000000001001000001010000000011010110000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
