(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.647293407265478126788593726814724504947662353515625p-685 {- 2915150347760186 -685 (-1.02618e-206)}
; Y = -1.7090930197109266419630557720665819942951202392578125p-502 {- 3193471059341149 -502 (-1.30529e-151)}
; -1.647293407265478126788593726814724504947662353515625p-685 - -1.7090930197109266419630557720665819942951202392578125p-502 == 1.7090930197109266419630557720665819942951202392578125p-502
; [HW: 1.7090930197109266419630557720665819942951202392578125p-502] 

; mpf : + 3193471059341149 -502
; mpfd: + 3193471059341149 -502 (1.30529e-151) class: Pos. norm. non-zero
; hwf : + 3193471059341149 -502 (1.30529e-151) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010010 #b1010010110110101000001010100111100011111001000111010)))
(assert (= y (fp #b1 #b01000001001 #b1011010110000111000111101100000101111010111101011101)))
(assert (= r (fp #b0 #b01000001001 #b1011010110000111000111101100000101111010111101011101)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
