(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6905813714610580245079063388402573764324188232421875p468 {+ 3110102007181027 468 (1.28847e+141)}
; Y = -1.8106463542373234520965752381016500294208526611328125p-1018 {- 3650826618872461 -1018 (-6.44611e-307)}
; 1.6905813714610580245079063388402573764324188232421875p468 - -1.8106463542373234520965752381016500294208526611328125p-1018 == 1.69058137146105824655251126387156546115875244140625p468
; [HW: 1.69058137146105824655251126387156546115875244140625p468] 

; mpf : + 3110102007181028 468
; mpfd: + 3110102007181028 468 (1.28847e+141) class: Pos. norm. non-zero
; hwf : + 3110102007181028 468 (1.28847e+141) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111010011 #b1011000011001001111100001101010110100110111011100011)))
(assert (= y (fp #b1 #b00000000101 #b1100111110000110100001001111110000010010001010001101)))
(assert (= r (fp #b0 #b10111010011 #b1011000011001001111100001101010110100110111011100100)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
