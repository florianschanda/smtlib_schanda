(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.474398555784655950873229812714271247386932373046875p846 {+ 2136501159056878 846 (6.91817e+254)}
; Y = 1.7636626746832726464475626926287077367305755615234375p763 {+ 3439230937140343 763 (8.55662e+229)}
; 1.474398555784655950873229812714271247386932373046875p846 - 1.7636626746832726464475626926287077367305755615234375p763 == 1.474398555784655950873229812714271247386932373046875p846
; [HW: 1.474398555784655950873229812714271247386932373046875p846] 

; mpf : + 2136501159056878 846
; mpfd: + 2136501159056878 846 (6.91817e+254) class: Pos. norm. non-zero
; hwf : + 2136501159056878 846 (6.91817e+254) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001101 #b0111100101110010001011110000101001011101010111101110)))
(assert (= y (fp #b0 #b11011111010 #b1100001101111111011001011010010011110000110001110111)))
(assert (= r (fp #b0 #b11101001101 #b0111100101110010001011110000101001011101010111101110)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
