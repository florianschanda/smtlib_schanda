(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9088730349690778975713101317523978650569915771484375p-919 {+ 4093200261613831 -919 (4.30736e-277)}
; Y = -1.7936474486017337515164626893238164484500885009765625p-686 {- 3574270353786313 -686 (-5.58676e-207)}
; 1.9088730349690778975713101317523978650569915771484375p-919 - -1.7936474486017337515164626893238164484500885009765625p-686 == 1.7936474486017337515164626893238164484500885009765625p-686
; [HW: 1.7936474486017337515164626893238164484500885009765625p-686] 

; mpf : + 3574270353786313 -686
; mpfd: + 3574270353786313 -686 (5.58676e-207) class: Pos. norm. non-zero
; hwf : + 3574270353786313 -686 (5.58676e-207) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101000 #b1110100010101011111001110011100101101000100100000111)))
(assert (= y (fp #b1 #b00101010001 #b1100101100101100011110101010110001001100010111001001)))
(assert (= r (fp #b0 #b00101010001 #b1100101100101100011110101010110001001100010111001001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
