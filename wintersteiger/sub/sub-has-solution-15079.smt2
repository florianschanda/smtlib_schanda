(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1671044391727753986032212196732871234416961669921875p-481 {+ 752571489990467 -481 (1.86931e-145)}
; Y = -1.7941481416068685295073237284668721258640289306640625p-397 {- 3576525274617665 -397 (-5.5584e-120)}
; 1.1671044391727753986032212196732871234416961669921875p-481 - -1.7941481416068685295073237284668721258640289306640625p-397 == 1.7941481416068685295073237284668721258640289306640625p-397
; [HW: 1.7941481416068685295073237284668721258640289306640625p-397] 

; mpf : + 3576525274617665 -397
; mpfd: + 3576525274617665 -397 (5.5584e-120) class: Pos. norm. non-zero
; hwf : + 3576525274617665 -397 (5.5584e-120) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011110 #b0010101011000111010110110100010101000011011101000011)))
(assert (= y (fp #b1 #b01001110010 #b1100101101001101010010101110100001100001011101000001)))
(assert (= r (fp #b0 #b01001110010 #b1100101101001101010010101110100001100001011101000001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
