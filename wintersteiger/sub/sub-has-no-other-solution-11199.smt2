(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8285625754641661178112599372980184853076934814453125p739 {+ 3731514106113557 739 (5.28782e+222)}
; Y = 1.6370303720358891919062216402380727231502532958984375p111 {+ 2868929746124519 111 (4.24997e+033)}
; 1.8285625754641661178112599372980184853076934814453125p739 - 1.6370303720358891919062216402380727231502532958984375p111 == 1.8285625754641661178112599372980184853076934814453125p739
; [HW: 1.8285625754641661178112599372980184853076934814453125p739] 

; mpf : + 3731514106113557 739
; mpfd: + 3731514106113557 739 (5.28782e+222) class: Pos. norm. non-zero
; hwf : + 3731514106113557 739 (5.28782e+222) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011100010 #b1101010000011100101011010100110001001110111000010101)))
(assert (= y (fp #b0 #b10001101110 #b1010001100010100011011000010011001110011111011100111)))
(assert (= r (fp #b0 #b11011100010 #b1101010000011100101011010100110001001110111000010101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
