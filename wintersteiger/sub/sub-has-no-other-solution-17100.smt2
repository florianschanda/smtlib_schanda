(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.63304409156946395142995243077166378498077392578125p354 {+ 2850977134901332 354 (5.99261e+106)}
; Y = 1.6531387409149640443928319655242376029491424560546875p97 {+ 2941475390205867 97 (2.6195e+029)}
; 1.63304409156946395142995243077166378498077392578125p354 - 1.6531387409149640443928319655242376029491424560546875p97 == 1.63304409156946395142995243077166378498077392578125p354
; [HW: 1.63304409156946395142995243077166378498077392578125p354] 

; mpf : + 2850977134901332 354
; mpfd: + 2850977134901332 354 (5.99261e+106) class: Pos. norm. non-zero
; hwf : + 2850977134901332 354 (5.99261e+106) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100001 #b1010001000001111001011010111011000110111100001010100)))
(assert (= y (fp #b0 #b10001100000 #b1010011100110100000110011011101111111010111110101011)))
(assert (= r (fp #b0 #b10101100001 #b1010001000001111001011010111011000110111100001010100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
