(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.254998194810053480097167266649194061756134033203125p-302 {- 1148409775126706 -302 (-1.54023e-091)}
; Y = 1.3659341950696701761813756093033589422702789306640625p402 {+ 1648021104557889 402 (1.41087e+121)}
; -1.254998194810053480097167266649194061756134033203125p-302 - 1.3659341950696701761813756093033589422702789306640625p402 == -1.3659341950696701761813756093033589422702789306640625p402
; [HW: -1.3659341950696701761813756093033589422702789306640625p402] 

; mpf : - 1648021104557889 402
; mpfd: - 1648021104557889 402 (-1.41087e+121) class: Neg. norm. non-zero
; hwf : - 1648021104557889 402 (-1.41087e+121) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010001 #b0100000101000111100011111100101100111111100010110010)))
(assert (= y (fp #b0 #b10110010001 #b0101110110101101110111010000100001001111111101000001)))
(assert (= r (fp #b1 #b10110010001 #b0101110110101101110111010000100001001111111101000001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
