(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.327632607919639884386242556502111256122589111328125p-1018 {- 1475526090941314 -1018 (-4.72653e-307)}
; Y = -1.4335592094768336846044576304848305881023406982421875p-306 {- 1952577094242915 -306 (-1.09961e-092)}
; -1.327632607919639884386242556502111256122589111328125p-1018 - -1.4335592094768336846044576304848305881023406982421875p-306 == 1.433559209476833462559852705453522503376007080078125p-306
; [HW: 1.433559209476833462559852705453522503376007080078125p-306] 

; mpf : + 1952577094242914 -306
; mpfd: + 1952577094242914 -306 (1.09961e-092) class: Pos. norm. non-zero
; hwf : + 1952577094242914 -306 (1.09961e-092) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000101 #b0101001111011111101110110000100000011110001110000010)))
(assert (= y (fp #b1 #b01011001101 #b0110111011111101101111001000000110010101001001100011)))
(assert (= r (fp #b0 #b01011001101 #b0110111011111101101111001000000110010101001001100010)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
