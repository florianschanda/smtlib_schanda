(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9112290635189328469323299941606819629669189453125p-556 {+ 4103810870913032 -556 (8.1028e-168)}
; Y = 1.3963274641791330044071628435631282627582550048828125p-334 {+ 1784900219993837 -334 (3.98996e-101)}
; 1.9112290635189328469323299941606819629669189453125p-556 - 1.3963274641791330044071628435631282627582550048828125p-334 == -1.3963274641791330044071628435631282627582550048828125p-334
; [HW: -1.3963274641791330044071628435631282627582550048828125p-334] 

; mpf : - 1784900219993837 -334
; mpfd: - 1784900219993837 -334 (-3.98996e-101) class: Neg. norm. non-zero
; hwf : - 1784900219993837 -334 (-3.98996e-101) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111010011 #b1110100101000110010011101101001011111010100000001000)))
(assert (= y (fp #b0 #b01010110001 #b0110010101110101101101110111100100100111111011101101)))
(assert (= r (fp #b1 #b01010110001 #b0110010101110101101101110111100100100111111011101101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
