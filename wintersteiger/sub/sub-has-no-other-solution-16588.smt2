(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4874732732882165464616264216601848602294921875p-197 {+ 2195384451933888 -197 (7.40526e-060)}
; Y = 1.3915493785287669226136131328530609607696533203125p376 {+ 1763381635239304 376 (2.14179e+113)}
; 1.4874732732882165464616264216601848602294921875p-197 - 1.3915493785287669226136131328530609607696533203125p376 == -1.3915493785287669226136131328530609607696533203125p376
; [HW: -1.3915493785287669226136131328530609607696533203125p376] 

; mpf : - 1763381635239304 376
; mpfd: - 1763381635239304 376 (-2.14179e+113) class: Neg. norm. non-zero
; hwf : - 1763381635239304 376 (-2.14179e+113) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111010 #b0111110011001011000011000110011001110010011011000000)))
(assert (= y (fp #b0 #b10101110111 #b0110010000111100100101000111111110001100110110001000)))
(assert (= r (fp #b1 #b10101110111 #b0110010000111100100101000111111110001100110110001000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
