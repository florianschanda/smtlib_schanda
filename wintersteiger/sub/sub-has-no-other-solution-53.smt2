(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.51541338254679214259112995932810008525848388671875p217 {- 2321215517579500 217 (-3.19183e+065)}
; Y = -1.1679650902244720356293328222818672657012939453125p-608 {- 756447517746184 -608 (-1.09949e-183)}
; -1.51541338254679214259112995932810008525848388671875p217 - -1.1679650902244720356293328222818672657012939453125p-608 == -1.51541338254679214259112995932810008525848388671875p217
; [HW: -1.51541338254679214259112995932810008525848388671875p217] 

; mpf : - 2321215517579500 217
; mpfd: - 2321215517579500 217 (-3.19183e+065) class: Neg. norm. non-zero
; hwf : - 2321215517579500 217 (-3.19183e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011000 #b1000001111110010001000011010010111110101100011101100)))
(assert (= y (fp #b1 #b00110011111 #b0010101011111111110000101001100101100010010000001000)))
(assert (= r (fp #b1 #b10011011000 #b1000001111110010001000011010010111110101100011101100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
