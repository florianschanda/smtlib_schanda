(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.99098184875928563286606731708161532878875732421875p162 {- 4462985484803244 162 (-1.16393e+049)}
; Y = 1.8031926585889805902951366078923456370830535888671875p982 {+ 3617258157928051 982 (7.37052e+295)}
; -1.99098184875928563286606731708161532878875732421875p162 - 1.8031926585889805902951366078923456370830535888671875p982 == -1.80319265858898081233974153292365372180938720703125p982
; [HW: -1.80319265858898081233974153292365372180938720703125p982] 

; mpf : - 3617258157928052 982
; mpfd: - 3617258157928052 982 (-7.37052e+295) class: Neg. norm. non-zero
; hwf : - 3617258157928052 982 (-7.37052e+295) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010100001 #b1111110110110000111111001000011101011001110010101100)))
(assert (= y (fp #b0 #b11111010101 #b1100110110011110000010001011100100000110111001110011)))
(assert (= r (fp #b1 #b11111010101 #b1100110110011110000010001011100100000110111001110100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
