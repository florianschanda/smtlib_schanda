(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0626252874567938544458911565016023814678192138671875p408 {- 282039221254387 408 (-7.02455e+122)}
; Y = 1.5969622729300005925523464611615054309368133544921875p-247 {+ 2688479069921795 -247 (7.06132e-075)}
; -1.0626252874567938544458911565016023814678192138671875p408 - 1.5969622729300005925523464611615054309368133544921875p-247 == -1.06262528745679407649049608153291046619415283203125p408
; [HW: -1.06262528745679407649049608153291046619415283203125p408] 

; mpf : - 282039221254388 408
; mpfd: - 282039221254388 408 (-7.02455e+122) class: Neg. norm. non-zero
; hwf : - 282039221254388 408 (-7.02455e+122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110010111 #b0001000000001000001101011111100110000111100011110011)))
(assert (= y (fp #b0 #b01100001000 #b1001100011010010100001001111111100101110001000000011)))
(assert (= r (fp #b1 #b10110010111 #b0001000000001000001101011111100110000111100011110100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
