(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.43378671629486564853550589759834110736846923828125p922 {- 1953601693863828 922 (-5.08324e+277)}
; Y = 1.2872390258766406301305096349096857011318206787109375p786 {+ 1293609569904303 786 (5.23885e+236)}
; -1.43378671629486564853550589759834110736846923828125p922 - 1.2872390258766406301305096349096857011318206787109375p786 == -1.43378671629486564853550589759834110736846923828125p922
; [HW: -1.43378671629486564853550589759834110736846923828125p922] 

; mpf : - 1953601693863828 922
; mpfd: - 1953601693863828 922 (-5.08324e+277) class: Neg. norm. non-zero
; hwf : - 1953601693863828 922 (-5.08324e+277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110011001 #b0110111100001100101001010110111111101100111110010100)))
(assert (= y (fp #b0 #b11100010001 #b0100100110001000011111110010111001000110011010101111)))
(assert (= r (fp #b1 #b11110011001 #b0110111100001100101001010110111111101100111110010100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
