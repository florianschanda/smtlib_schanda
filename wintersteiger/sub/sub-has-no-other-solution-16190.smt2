(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.6597867082356667634002178601804189383983612060546875p-984 {+ 2971415173354155 -984 (1.01516e-296)}
; Y = 1.975314725785687119952171997283585369586944580078125p-865 {+ 4392427035617378 -865 (8.02953e-261)}
; 1.6597867082356667634002178601804189383983612060546875p-984 - 1.975314725785687119952171997283585369586944580078125p-865 == -1.9753147257856868979075670722522772848606109619140625p-865
; [HW: -1.9753147257856868979075670722522772848606109619140625p-865] 

; mpf : - 4392427035617377 -865
; mpfd: - 4392427035617377 -865 (-8.02953e-261) class: Neg. norm. non-zero
; hwf : - 4392427035617377 -865 (-8.02953e-261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000100111 #b1010100011100111110010000001111000110101001010101011)))
(assert (= y (fp #b0 #b00010011110 #b1111100110101110001110011101001010001110100001100010)))
(assert (= r (fp #b1 #b00010011110 #b1111100110101110001110011101001010001110100001100001)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
