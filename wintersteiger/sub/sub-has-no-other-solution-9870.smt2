(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.662998568515351660579426607000641524791717529296875p-97 {- 2985880106112910 -97 (-1.0495e-029)}
; Y = 1.191542549913093385072215824038721621036529541015625p-976 {+ 862630956414202 -976 (1.86567e-294)}
; -1.662998568515351660579426607000641524791717529296875p-97 - 1.191542549913093385072215824038721621036529541015625p-976 == -1.662998568515351660579426607000641524791717529296875p-97
; [HW: -1.662998568515351660579426607000641524791717529296875p-97] 

; mpf : - 2985880106112910 -97
; mpfd: - 2985880106112910 -97 (-1.0495e-029) class: Neg. norm. non-zero
; hwf : - 2985880106112910 -97 (-1.0495e-029) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110011110 #b1010100110111010010001100011000100010001011110001110)))
(assert (= y (fp #b0 #b00000101111 #b0011000100001000111011101011101110101011010011111010)))
(assert (= r (fp #b1 #b01110011110 #b1010100110111010010001100011000100010001011110001110)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
