(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.586757961494253521550490404479205608367919921875p-310 {+ 2642522936742192 -310 (7.60698e-094)}
; Y = -1.77482352606640336745158492703922092914581298828125p415 {- 3489494943270548 415 (-1.50177e+125)}
; 1.586757961494253521550490404479205608367919921875p-310 - -1.77482352606640336745158492703922092914581298828125p415 == 1.77482352606640336745158492703922092914581298828125p415
; [HW: 1.77482352606640336745158492703922092914581298828125p415] 

; mpf : + 3489494943270548 415
; mpfd: + 3489494943270548 415 (1.50177e+125) class: Pos. norm. non-zero
; hwf : + 3489494943270548 415 (1.50177e+125) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001001 #b1001011000110101110001010000111101001001000100110000)))
(assert (= y (fp #b1 #b10110011110 #b1100011001011010110101011010100010100000011010010100)))
(assert (= r (fp #b0 #b10110011110 #b1100011001011010110101011010100010100000011010010100)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
