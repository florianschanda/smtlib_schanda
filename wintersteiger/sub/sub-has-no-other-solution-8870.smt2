(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.20736843394869008960768042015843093395233154296875p-592 {+ 933904401859724 -592 (7.44873e-179)}
; Y = -1.867692440470458681289755986654199659824371337890625p656 {- 3907739351574954 656 (-5.58448e+197)}
; 1.20736843394869008960768042015843093395233154296875p-592 - -1.867692440470458681289755986654199659824371337890625p656 == 1.8676924404704589033343609116855077445507049560546875p656
; [HW: 1.8676924404704589033343609116855077445507049560546875p656] 

; mpf : + 3907739351574955 656
; mpfd: + 3907739351574955 656 (5.58448e+197) class: Pos. norm. non-zero
; hwf : + 3907739351574955 656 (5.58448e+197) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101111 #b0011010100010110000110010000001000001000010010001100)))
(assert (= y (fp #b1 #b11010001111 #b1101111000100001000101110111111011001110100110101010)))
(assert (= r (fp #b0 #b11010001111 #b1101111000100001000101110111111011001110100110101011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
