(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5169963597296234336653242280590347945690155029296875p-346 {- 2328344613030235 -346 (-1.05829e-104)}
; Y = -1.2140479026162476205996654243790544569492340087890625p-613 {- 963986054461969 -613 (-3.57148e-185)}
; -1.5169963597296234336653242280590347945690155029296875p-346 - -1.2140479026162476205996654243790544569492340087890625p-613 == -1.516996359729623211620719303027726709842681884765625p-346
; [HW: -1.516996359729623211620719303027726709842681884765625p-346] 

; mpf : - 2328344613030234 -346
; mpfd: - 2328344613030234 -346 (-1.05829e-104) class: Neg. norm. non-zero
; hwf : - 2328344613030234 -346 (-1.05829e-104) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010100101 #b1000010001011001110111111001100100110000100101011011)))
(assert (= y (fp #b1 #b00110011010 #b0011011011001011110101111110010110000011101000010001)))
(assert (= r (fp #b1 #b01010100101 #b1000010001011001110111111001100100110000100101011010)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
