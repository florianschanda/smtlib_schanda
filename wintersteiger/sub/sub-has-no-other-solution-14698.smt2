(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5397420143510720524915313944802619516849517822265625p-79 {- 2430781934707689 -79 (-2.54729e-024)}
; Y = -1.4715276980934814954338207826367579400539398193359375p-764 {- 2123571965428671 -764 (-1.51653e-230)}
; -1.5397420143510720524915313944802619516849517822265625p-79 - -1.4715276980934814954338207826367579400539398193359375p-764 == -1.5397420143510720524915313944802619516849517822265625p-79
; [HW: -1.5397420143510720524915313944802619516849517822265625p-79] 

; mpf : - 2430781934707689 -79
; mpfd: - 2430781934707689 -79 (-2.54729e-024) class: Neg. norm. non-zero
; hwf : - 2430781934707689 -79 (-2.54729e-024) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110110000 #b1000101000101100100010000101101111101010001111101001)))
(assert (= y (fp #b1 #b00100000011 #b0111100010110110000010100000101001111000001110111111)))
(assert (= r (fp #b1 #b01110110000 #b1000101000101100100010000101101111101010001111101001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
