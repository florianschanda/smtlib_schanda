(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3089024330508547411255904080462642014026641845703125p-817 {+ 1391172882381669 -817 (1.49762e-246)}
; Y = 1.1574065052366167005715169580071233212947845458984375p-946 {+ 708895878329319 -946 (1.94585e-285)}
; 1.3089024330508547411255904080462642014026641845703125p-817 - 1.1574065052366167005715169580071233212947845458984375p-946 == 1.3089024330508547411255904080462642014026641845703125p-817
; [HW: 1.3089024330508547411255904080462642014026641845703125p-817] 

; mpf : + 1391172882381669 -817
; mpfd: + 1391172882381669 -817 (1.49762e-246) class: Pos. norm. non-zero
; hwf : + 1391172882381669 -817 (1.49762e-246) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011001110 #b0100111100010100001110101101011110011011101101100101)))
(assert (= y (fp #b0 #b00001001101 #b0010100001001011110010101111000000101011001111100111)))
(assert (= r (fp #b0 #b00011001110 #b0100111100010100001110101101011110011011101101100101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
