(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.676964915637927600045031795161776244640350341796875p573 {- 3048778941809870 573 (-5.18456e+172)}
; Y = -1.9060372150765731991128859590389765799045562744140625p-755 {- 4080428864202657 -755 (-1.00574e-227)}
; -1.676964915637927600045031795161776244640350341796875p573 - -1.9060372150765731991128859590389765799045562744140625p-755 == -1.676964915637927600045031795161776244640350341796875p573
; [HW: -1.676964915637927600045031795161776244640350341796875p573] 

; mpf : - 3048778941809870 573
; mpfd: - 3048778941809870 573 (-5.18456e+172) class: Neg. norm. non-zero
; hwf : - 3048778941809870 573 (-5.18456e+172) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111100 #b1010110101001101100100101001110100110100010011001110)))
(assert (= y (fp #b1 #b00100001100 #b1110011111110010000011100000111110110110011110100001)))
(assert (= r (fp #b1 #b11000111100 #b1010110101001101100100101001110100110100010011001110)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
