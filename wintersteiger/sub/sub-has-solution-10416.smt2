(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5681101765377842838233846123330295085906982421875p-139 {- 2558540779360952 -139 (-2.25013e-042)}
; Y = 1.0513999314455013678326622539316304028034210205078125p769 {+ 231484712104829 769 (3.26463e+231)}
; -1.5681101765377842838233846123330295085906982421875p-139 - 1.0513999314455013678326622539316304028034210205078125p769 == -1.0513999314455013678326622539316304028034210205078125p769
; [HW: -1.0513999314455013678326622539316304028034210205078125p769] 

; mpf : - 231484712104829 769
; mpfd: - 231484712104829 769 (-3.26463e+231) class: Neg. norm. non-zero
; hwf : - 231484712104829 769 (-3.26463e+231) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110100 #b1001000101101111101010110010010011000001001010111000)))
(assert (= y (fp #b0 #b11100000000 #b0000110100101000100010111100000010010011001101111101)))
(assert (= r (fp #b1 #b11100000000 #b0000110100101000100010111100000010010011001101111101)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
