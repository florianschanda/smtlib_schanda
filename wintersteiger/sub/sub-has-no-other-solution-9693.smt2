(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.26078152924317610228399644256569445133209228515625p-508 {- 1174455597924676 -508 (-1.50453e-153)}
; Y = 0.759417289360294400779594070627354085445404052734375p-1022 {+ 3420111421381734 -1023 (1.68976e-308)}
; -1.26078152924317610228399644256569445133209228515625p-508 - 0.759417289360294400779594070627354085445404052734375p-1022 == -1.26078152924317610228399644256569445133209228515625p-508
; [HW: -1.26078152924317610228399644256569445133209228515625p-508] 

; mpf : - 1174455597924676 -508
; mpfd: - 1174455597924676 -508 (-1.50453e-153) class: Neg. norm. non-zero
; hwf : - 1174455597924676 -508 (-1.50453e-153) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000011 #b0100001011000010100101000000101110000000000101000100)))
(assert (= y (fp #b0 #b00000000000 #b1100001001101001001010111110010111010001110001100110)))
(assert (= r (fp #b1 #b01000000011 #b0100001011000010100101000000101110000000000101000100)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
