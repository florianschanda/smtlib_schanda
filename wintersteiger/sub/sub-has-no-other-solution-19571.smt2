(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8320659344567520321334086474962532520294189453125p190 {+ 3747291832367112 190 (2.87502e+057)}
; Y = 1.1192582377122388681556230949354358017444610595703125p675 {+ 537091354921701 675 (1.7546e+203)}
; 1.8320659344567520321334086474962532520294189453125p190 - 1.1192582377122388681556230949354358017444610595703125p675 == -1.1192582377122388681556230949354358017444610595703125p675
; [HW: -1.1192582377122388681556230949354358017444610595703125p675] 

; mpf : - 537091354921701 675
; mpfd: - 537091354921701 675 (-1.7546e+203) class: Neg. norm. non-zero
; hwf : - 537091354921701 675 (-1.7546e+203) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111101 #b1101010100000010010001011110100010011011100000001000)))
(assert (= y (fp #b0 #b11010100010 #b0001111010000111101101010011011011000000101011100101)))
(assert (= r (fp #b1 #b11010100010 #b0001111010000111101101010011011011000000101011100101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
