(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0603104442222013314989226273610256612300872802734375p-28 {+ 271614094125655 -28 (3.94996e-009)}
; Y = -1.64773894345052074328350499854423105716705322265625p-520 {- 2917156864357124 -520 (-4.80055e-157)}
; 1.0603104442222013314989226273610256612300872802734375p-28 - -1.64773894345052074328350499854423105716705322265625p-520 == 1.0603104442222013314989226273610256612300872802734375p-28
; [HW: 1.0603104442222013314989226273610256612300872802734375p-28] 

; mpf : + 271614094125655 -28
; mpfd: + 271614094125655 -28 (3.94996e-009) class: Pos. norm. non-zero
; hwf : + 271614094125655 -28 (3.94996e-009) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111100011 #b0000111101110000100000010101100110001010101001010111)))
(assert (= y (fp #b1 #b00111110111 #b1010010111010010001110000010101001110111001100000100)))
(assert (= r (fp #b0 #b01111100011 #b0000111101110000100000010101100110001010101001010111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
