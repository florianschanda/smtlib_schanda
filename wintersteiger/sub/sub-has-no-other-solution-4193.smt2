(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7066069871228426446663206661469303071498870849609375p104 {- 3182274963903823 104 (-3.46141e+031)}
; Y = 1.6288897537665143477880747013841755688190460205078125p-195 {+ 2832267660719997 -195 (3.24371e-059)}
; -1.7066069871228426446663206661469303071498870849609375p104 - 1.6288897537665143477880747013841755688190460205078125p-195 == -1.7066069871228426446663206661469303071498870849609375p104
; [HW: -1.7066069871228426446663206661469303071498870849609375p104] 

; mpf : - 3182274963903823 104
; mpfd: - 3182274963903823 104 (-3.46141e+031) class: Neg. norm. non-zero
; hwf : - 3182274963903823 104 (-3.46141e+031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100111 #b1011010011100100001100100000110011010001010101001111)))
(assert (= y (fp #b0 #b01100111100 #b1010000011111110111010110011110100110111011101111101)))
(assert (= r (fp #b1 #b10001100111 #b1011010011100100001100100000110011010001010101001111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
