(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7841219554937646218917279838933609426021575927734375p135 {- 3531371346574743 135 (-7.77095e+040)}
; Y = -1.5540037380623779039723331152345053851604461669921875p-104 {- 2495011028299587 -104 (-7.66183e-032)}
; -1.7841219554937646218917279838933609426021575927734375p135 - -1.5540037380623779039723331152345053851604461669921875p-104 == -1.7841219554937646218917279838933609426021575927734375p135
; [HW: -1.7841219554937646218917279838933609426021575927734375p135] 

; mpf : - 3531371346574743 135
; mpfd: - 3531371346574743 135 (-7.77095e+040) class: Neg. norm. non-zero
; hwf : - 3531371346574743 135 (-7.77095e+040) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000110 #b1100100010111100001101110110101011101011110110010111)))
(assert (= y (fp #b1 #b01110010111 #b1000110111010011001100000110000011010110111101000011)))
(assert (= r (fp #b1 #b10010000110 #b1100100010111100001101110110101011101011110110010111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
