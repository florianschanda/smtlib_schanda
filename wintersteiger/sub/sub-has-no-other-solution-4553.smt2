(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.752215385228134802986232898547314107418060302734375p-643 {- 3387676928615782 -643 (-4.80065e-194)}
; Y = 1.1928065441777786492849600108456797897815704345703125p-585 {+ 868323480513637 -585 (9.41939e-177)}
; -1.752215385228134802986232898547314107418060302734375p-643 - 1.1928065441777786492849600108456797897815704345703125p-585 == -1.1928065441777786492849600108456797897815704345703125p-585
; [HW: -1.1928065441777786492849600108456797897815704345703125p-585] 

; mpf : - 868323480513637 -585
; mpfd: - 868323480513637 -585 (-9.41939e-177) class: Neg. norm. non-zero
; hwf : - 868323480513637 -585 (-9.41939e-177) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111100 #b1100000010010001001011111111111100011010010101100110)))
(assert (= y (fp #b0 #b00110110110 #b0011000101011011110001010000100110110010110001100101)))
(assert (= r (fp #b1 #b00110110110 #b0011000101011011110001010000100110110010110001100101)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
