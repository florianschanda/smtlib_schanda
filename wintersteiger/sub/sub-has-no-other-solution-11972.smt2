(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0793043579805206011457130443886853754520416259765625p837 {- 357155077049929 837 (-9.89123e+251)}
; Y = -1.36123518560474376926094919326715171337127685546875p193 {- 1626858647282636 193 (-1.70892e+058)}
; -1.0793043579805206011457130443886853754520416259765625p837 - -1.36123518560474376926094919326715171337127685546875p193 == -1.0793043579805206011457130443886853754520416259765625p837
; [HW: -1.0793043579805206011457130443886853754520416259765625p837] 

; mpf : - 357155077049929 837
; mpfd: - 357155077049929 837 (-9.89123e+251) class: Neg. norm. non-zero
; hwf : - 357155077049929 837 (-9.89123e+251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000100 #b0001010001001101010010100101011111110100111001001001)))
(assert (= y (fp #b1 #b10011000000 #b0101110001111001111010001011110001010110001111001100)))
(assert (= r (fp #b1 #b11101000100 #b0001010001001101010010100101011111110100111001001001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
