(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4110812950181019775897084400639869272708892822265625p641 {- 1851345567062505 641 (-1.28759e+193)}
; Y = 1.5375196631222205478906062126043252646923065185546875p479 {+ 2420773354541547 479 (2.39987e+144)}
; -1.4110812950181019775897084400639869272708892822265625p641 - 1.5375196631222205478906062126043252646923065185546875p479 == -1.4110812950181019775897084400639869272708892822265625p641
; [HW: -1.4110812950181019775897084400639869272708892822265625p641] 

; mpf : - 1851345567062505 641
; mpfd: - 1851345567062505 641 (-1.28759e+193) class: Neg. norm. non-zero
; hwf : - 1851345567062505 641 (-1.28759e+193) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010000000 #b0110100100111100100111111010111000011001100111101001)))
(assert (= y (fp #b0 #b10111011110 #b1000100110011010111000110111111000010001000111101011)))
(assert (= r (fp #b1 #b11010000000 #b0110100100111100100111111010111000011001100111101001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
