(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.459665153112319035955124491010792553424835205078125p-873 {- 2070147812271842 -873 (-2.31775e-263)}
; Y = -1.737647258502887925857294248999096453189849853515625p363 {- 3322067918524474 363 (-3.26475e+109)}
; -1.459665153112319035955124491010792553424835205078125p-873 - -1.737647258502887925857294248999096453189849853515625p363 == 1.7376472585028877038126893239677883684635162353515625p363
; [HW: 1.7376472585028877038126893239677883684635162353515625p363] 

; mpf : + 3322067918524473 363
; mpfd: + 3322067918524473 363 (3.26475e+109) class: Pos. norm. non-zero
; hwf : + 3322067918524473 363 (3.26475e+109) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010010110 #b0111010110101100100111011000111110111010011011100010)))
(assert (= y (fp #b1 #b10101101010 #b1011110011010110011100110110001101000001000000111010)))
(assert (= r (fp #b0 #b10101101010 #b1011110011010110011100110110001101000001000000111001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
