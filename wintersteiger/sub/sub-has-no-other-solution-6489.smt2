(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4761869711555331008412395021878182888031005859375p295 {- 2144555465854744 295 (-9.39702e+088)}
; Y = 1.7507830358854150620828704632003791630268096923828125p699 {+ 3381226200649645 699 (4.60468e+210)}
; -1.4761869711555331008412395021878182888031005859375p295 - 1.7507830358854150620828704632003791630268096923828125p699 == -1.7507830358854150620828704632003791630268096923828125p699
; [HW: -1.7507830358854150620828704632003791630268096923828125p699] 

; mpf : - 3381226200649645 699
; mpfd: - 3381226200649645 699 (-4.60468e+210) class: Neg. norm. non-zero
; hwf : - 3381226200649645 699 (-4.60468e+210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100100110 #b0111100111100111011000111010101111100100111100011000)))
(assert (= y (fp #b0 #b11010111010 #b1100000000110011010100010010100110000100111110101101)))
(assert (= r (fp #b1 #b11010111010 #b1100000000110011010100010010100110000100111110101101)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
