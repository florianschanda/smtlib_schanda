(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.155487880667834144077232849667780101299285888671875p-714 {+ 700255161436286 -714 (1.34075e-215)}
; Y = -1.838559149826064054167318317922763526439666748046875p590 {- 3776534674684782 590 (-7.45032e+177)}
; 1.155487880667834144077232849667780101299285888671875p-714 - -1.838559149826064054167318317922763526439666748046875p590 == 1.838559149826064054167318317922763526439666748046875p590
; [HW: 1.838559149826064054167318317922763526439666748046875p590] 

; mpf : + 3776534674684782 590
; mpfd: + 3776534674684782 590 (7.45032e+177) class: Pos. norm. non-zero
; hwf : + 3776534674684782 590 (7.45032e+177) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110101 #b0010011111001110000011011100001001100100100001111110)))
(assert (= y (fp #b1 #b11001001101 #b1101011010101011110011111111110001000011101101101110)))
(assert (= r (fp #b0 #b11001001101 #b1101011010101011110011111111110001000011101101101110)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
