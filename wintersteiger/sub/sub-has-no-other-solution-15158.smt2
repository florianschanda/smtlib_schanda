(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9409053868297834188894057660945691168308258056640625p-205 {- 4237461149517505 -205 (-3.77446e-062)}
; Y = 1.543620792754672788049674636567942798137664794921875p-874 {+ 2448250399680798 -874 (1.22553e-263)}
; -1.9409053868297834188894057660945691168308258056640625p-205 - 1.543620792754672788049674636567942798137664794921875p-874 == -1.9409053868297834188894057660945691168308258056640625p-205
; [HW: -1.9409053868297834188894057660945691168308258056640625p-205] 

; mpf : - 4237461149517505 -205
; mpfd: - 4237461149517505 -205 (-3.77446e-062) class: Neg. norm. non-zero
; hwf : - 4237461149517505 -205 (-3.77446e-062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110010 #b1111000011011111001011001110100100010000011011000001)))
(assert (= y (fp #b0 #b00010010101 #b1000101100101010101110110111011001001110100100011110)))
(assert (= r (fp #b1 #b01100110010 #b1111000011011111001011001110100100010000011011000001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
