(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1729098146344956177244966966100037097930908203125p-719 {- 778716576756616 -719 (-4.25302e-217)}
; Y = 1.4453860137764433790863449758035130798816680908203125p1006 {+ 2005840285679621 1006 (9.91196e+302)}
; -1.1729098146344956177244966966100037097930908203125p-719 - 1.4453860137764433790863449758035130798816680908203125p1006 == -1.445386013776443601130949900834821164608001708984375p1006
; [HW: -1.445386013776443601130949900834821164608001708984375p1006] 

; mpf : - 2005840285679622 1006
; mpfd: - 2005840285679622 1006 (-9.91196e+302) class: Neg. norm. non-zero
; hwf : - 2005840285679622 1006 (-9.91196e+302) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100110000 #b0010110001000011110100010100111100000011001110001000)))
(assert (= y (fp #b0 #b11111101101 #b0111001000000100110100010101101101000100000000000101)))
(assert (= r (fp #b1 #b11111101101 #b0111001000000100110100010101101101000100000000000110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
