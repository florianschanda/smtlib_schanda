(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7905851069091027749635713917086832225322723388671875p1020 {+ 3560478792880499 1020 (2.01183e+307)}
; Y = -1.758039247451703257496546939364634454250335693359375p-445 {- 3413905272355702 -445 (-1.935e-134)}
; 1.7905851069091027749635713917086832225322723388671875p1020 - -1.758039247451703257496546939364634454250335693359375p-445 == 1.7905851069091027749635713917086832225322723388671875p1020
; [HW: 1.7905851069091027749635713917086832225322723388671875p1020] 

; mpf : + 3560478792880499 1020
; mpfd: + 3560478792880499 1020 (2.01183e+307) class: Pos. norm. non-zero
; hwf : + 3560478792880499 1020 (2.01183e+307) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111111011 #b1100101001100011110010010001101011100001000101110011)))
(assert (= y (fp #b1 #b01001000010 #b1100001000001110110111000011000011100011101101110110)))
(assert (= r (fp #b0 #b11111111011 #b1100101001100011110010010001101011100001000101110011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
