(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.330766634212426691163955183583311736583709716796875p-774 {+ 1489640490585678 -774 (1.33932e-233)}
; Y = 1.50297338546496650479866730165667831897735595703125p-94 {+ 2265190751357300 -94 (7.58808e-029)}
; 1.330766634212426691163955183583311736583709716796875p-774 - 1.50297338546496650479866730165667831897735595703125p-94 == -1.5029733854649662827540623766253702342510223388671875p-94
; [HW: -1.5029733854649662827540623766253702342510223388671875p-94] 

; mpf : - 2265190751357299 -94
; mpfd: - 2265190751357299 -94 (-7.58808e-029) class: Neg. norm. non-zero
; hwf : - 2265190751357299 -94 (-7.58808e-029) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011111001 #b0101010010101101000111110100010010001100111001001110)))
(assert (= y (fp #b0 #b01110100001 #b1000000011000010110111010010000101010100100101110100)))
(assert (= r (fp #b1 #b01110100001 #b1000000011000010110111010010000101010100100101110011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
