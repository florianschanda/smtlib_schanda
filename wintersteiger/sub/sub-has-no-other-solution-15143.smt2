(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3753510340479244700162553272093646228313446044921875p-941 {- 1690430777071363 -941 (-7.39925e-284)}
; Y = -1.0878443982895882324868352952762506902217864990234375p-371 {- 395615999403575 -371 (-2.26172e-112)}
; -1.3753510340479244700162553272093646228313446044921875p-941 - -1.0878443982895882324868352952762506902217864990234375p-371 == 1.0878443982895882324868352952762506902217864990234375p-371
; [HW: 1.0878443982895882324868352952762506902217864990234375p-371] 

; mpf : + 395615999403575 -371
; mpfd: + 395615999403575 -371 (2.26172e-112) class: Pos. norm. non-zero
; hwf : + 395615999403575 -371 (2.26172e-112) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001010010 #b0110000000010111000000010101111111000001011100000011)))
(assert (= y (fp #b1 #b01010001100 #b0001011001111100111110000111000111001010011000110111)))
(assert (= r (fp #b0 #b01010001100 #b0001011001111100111110000111000111001010011000110111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
