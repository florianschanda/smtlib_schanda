(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5818144722394607004645195047487504780292510986328125p495 {- 2620259440376397 495 (-1.61809e+149)}
; Y = -1.842759370872819157938238276983611285686492919921875p823 {- 3795450788625822 823 (-1.03075e+248)}
; -1.5818144722394607004645195047487504780292510986328125p495 - -1.842759370872819157938238276983611285686492919921875p823 == 1.842759370872819157938238276983611285686492919921875p823
; [HW: 1.842759370872819157938238276983611285686492919921875p823] 

; mpf : + 3795450788625822 823
; mpfd: + 3795450788625822 823 (1.03075e+248) class: Pos. norm. non-zero
; hwf : + 3795450788625822 823 (1.03075e+248) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101110 #b1001010011110001110010110001001010011011101001001101)))
(assert (= y (fp #b1 #b11100110110 #b1101011110111111000101000000000001001011110110011110)))
(assert (= r (fp #b0 #b11100110110 #b1101011110111111000101000000000001001011110110011110)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
