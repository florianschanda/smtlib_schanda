(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4103299216071432109487204797915183007717132568359375p971 {+ 1847961682048895 971 (2.81479e+292)}
; Y = -1.6598741768999831780462272945442236959934234619140625p-468 {- 2971809097198177 -468 (-2.1779e-141)}
; 1.4103299216071432109487204797915183007717132568359375p971 - -1.6598741768999831780462272945442236959934234619140625p-468 == 1.4103299216071432109487204797915183007717132568359375p971
; [HW: 1.4103299216071432109487204797915183007717132568359375p971] 

; mpf : + 1847961682048895 971
; mpfd: + 1847961682048895 971 (2.81479e+292) class: Pos. norm. non-zero
; hwf : + 1847961682048895 971 (2.81479e+292) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111001010 #b0110100100001011011000011011100111011111011101111111)))
(assert (= y (fp #b1 #b01000101011 #b1010100011101101100000111001100101000010101001100001)))
(assert (= r (fp #b0 #b11111001010 #b0110100100001011011000011011100111011111011101111111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
