(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.365379215742728025162477933918125927448272705078125p-953 {- 1645521699867874 -953 (-1.79336e-287)}
; Y = 1.60955925036313463039050475344993174076080322265625p-103 {+ 2745210812795652 -103 (1.58715e-031)}
; -1.365379215742728025162477933918125927448272705078125p-953 - 1.60955925036313463039050475344993174076080322265625p-103 == -1.60955925036313463039050475344993174076080322265625p-103
; [HW: -1.60955925036313463039050475344993174076080322265625p-103] 

; mpf : - 2745210812795652 -103
; mpfd: - 2745210812795652 -103 (-1.58715e-031) class: Neg. norm. non-zero
; hwf : - 2745210812795652 -103 (-1.58715e-031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000110 #b0101110110001001011111100000011001000000110011100010)))
(assert (= y (fp #b0 #b01110011000 #b1001110000001100000100110011010101001000101100000100)))
(assert (= r (fp #b1 #b01110011000 #b1001110000001100000100110011010101001000101100000100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
