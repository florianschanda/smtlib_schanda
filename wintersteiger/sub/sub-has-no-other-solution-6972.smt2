(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.515003084183422554787057379144243896007537841796875p-680 {- 2319367698023118 -680 (-3.02007e-205)}
; Y = 1.095543643439997882893521818914450705051422119140625p366 {+ 430290316993994 366 (1.64668e+110)}
; -1.515003084183422554787057379144243896007537841796875p-680 - 1.095543643439997882893521818914450705051422119140625p366 == -1.095543643439997882893521818914450705051422119140625p366
; [HW: -1.095543643439997882893521818914450705051422119140625p366] 

; mpf : - 430290316993994 366
; mpfd: - 430290316993994 366 (-1.64668e+110) class: Neg. norm. non-zero
; hwf : - 430290316993994 366 (-1.64668e+110) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010111 #b1000001111010111001111011111101111101000001011001110)))
(assert (= y (fp #b0 #b10101101101 #b0001100001110101100011000101011111101010010111001010)))
(assert (= r (fp #b1 #b10101101101 #b0001100001110101100011000101011111101010010111001010)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
