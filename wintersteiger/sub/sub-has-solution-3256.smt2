(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.772033136971495448364066760404966771602630615234375p-508 {- 3476928147982502 -508 (-2.11463e-153)}
; Y = -1.487820154754198487268013195716775953769683837890625p285 {- 2196946667174826 285 (-9.24909e+085)}
; -1.772033136971495448364066760404966771602630615234375p-508 - -1.487820154754198487268013195716775953769683837890625p285 == 1.4878201547541982652234082706854678690433502197265625p285
; [HW: 1.4878201547541982652234082706854678690433502197265625p285] 

; mpf : + 2196946667174825 285
; mpfd: + 2196946667174825 285 (9.24909e+085) class: Pos. norm. non-zero
; hwf : + 2196946667174825 285 (9.24909e+085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000011 #b1100010110100011111101101011001010111000100010100110)))
(assert (= y (fp #b1 #b10100011100 #b0111110011100001110010000001101011111111101110101010)))
(assert (= r (fp #b0 #b10100011100 #b0111110011100001110010000001101011111111101110101001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
