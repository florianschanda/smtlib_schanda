(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.21564844978902275585141978808678686618804931640625p-505 {- 971194278112868 -505 (-1.16054e-152)}
; Y = -1.2649453193137578654869912497815676033496856689453125p-429 {- 1193207641334997 -429 (-9.12439e-130)}
; -1.21564844978902275585141978808678686618804931640625p-505 - -1.2649453193137578654869912497815676033496856689453125p-429 == 1.26494531931375764344238632475025951862335205078125p-429
; [HW: 1.26494531931375764344238632475025951862335205078125p-429] 

; mpf : + 1193207641334996 -429
; mpfd: + 1193207641334996 -429 (9.12439e-130) class: Pos. norm. non-zero
; hwf : + 1193207641334996 -429 (9.12439e-130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000110 #b0011011100110100101111001001111101000110111001100100)))
(assert (= y (fp #b1 #b01001010010 #b0100001111010011011101001101100110101110010011010101)))
(assert (= r (fp #b0 #b01001010010 #b0100001111010011011101001101100110101110010011010100)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
