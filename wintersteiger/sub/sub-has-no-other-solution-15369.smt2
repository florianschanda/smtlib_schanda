(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.404114309413008410132306380546651780605316162109375p-646 {- 1819969053287510 -646 (-4.80867e-195)}
; Y = 1.441623844519549724196849638246931135654449462890625p-905 {+ 1988896981616170 -905 (5.32974e-273)}
; -1.404114309413008410132306380546651780605316162109375p-646 - 1.441623844519549724196849638246931135654449462890625p-905 == -1.404114309413008410132306380546651780605316162109375p-646
; [HW: -1.404114309413008410132306380546651780605316162109375p-646] 

; mpf : - 1819969053287510 -646
; mpfd: - 1819969053287510 -646 (-4.80867e-195) class: Neg. norm. non-zero
; hwf : - 1819969053287510 -646 (-4.80867e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111001 #b0110011101110100000010010000111011000110010001010110)))
(assert (= y (fp #b0 #b00001110110 #b0111000100001110010000101010000101011000011000101010)))
(assert (= r (fp #b1 #b00101111001 #b0110011101110100000010010000111011000110010001010110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
