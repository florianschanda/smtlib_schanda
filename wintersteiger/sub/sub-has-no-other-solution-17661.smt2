(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1740264286423893747013380561838857829570770263671875p-126 {- 783745359186483 -126 (-1.38006e-038)}
; Y = -1.06863125686842774797469246550463140010833740234375p402 {- 309087702858620 402 (-1.10379e+121)}
; -1.1740264286423893747013380561838857829570770263671875p-126 - -1.06863125686842774797469246550463140010833740234375p402 == 1.0686312568684275259300875404733233153820037841796875p402
; [HW: 1.0686312568684275259300875404733233153820037841796875p402] 

; mpf : + 309087702858619 402
; mpfd: + 309087702858619 402 (1.10379e+121) class: Pos. norm. non-zero
; hwf : + 309087702858619 402 (1.10379e+121) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000001 #b0010110010001100111111101111101110101000101000110011)))
(assert (= y (fp #b1 #b10110010001 #b0001000110010001110100010110101110111011101101111100)))
(assert (= r (fp #b0 #b10110010001 #b0001000110010001110100010110101110111011101101111011)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
