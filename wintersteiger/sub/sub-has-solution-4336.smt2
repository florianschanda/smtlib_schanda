(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8377034376909253676757316497969441115856170654296875p321 {+ 3772680889831835 321 (7.85062e+096)}
; Y = 1.3519002057531170901683026386308483779430389404296875p-266 {+ 1584817635501339 -266 (1.14016e-080)}
; 1.8377034376909253676757316497969441115856170654296875p321 - 1.3519002057531170901683026386308483779430389404296875p-266 == 1.837703437690925145631126724765636026859283447265625p321
; [HW: 1.837703437690925145631126724765636026859283447265625p321] 

; mpf : + 3772680889831834 321
; mpfd: + 3772680889831834 321 (7.85062e+096) class: Pos. norm. non-zero
; hwf : + 3772680889831834 321 (7.85062e+096) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101000000 #b1101011001110011101110111000010010100001000110011011)))
(assert (= y (fp #b0 #b01011110101 #b0101101000010110001000011100001100101010010100011011)))
(assert (= r (fp #b0 #b10101000000 #b1101011001110011101110111000010010100001000110011010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
