(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.237550270460813894857210470945574343204498291015625p-552 {+ 1069831309529082 -552 (8.3947e-167)}
; Y = -1.3427433218190258923385727030108682811260223388671875p-714 {- 1543578696427891 -714 (-1.55803e-215)}
; 1.237550270460813894857210470945574343204498291015625p-552 - -1.3427433218190258923385727030108682811260223388671875p-714 == 1.237550270460813894857210470945574343204498291015625p-552
; [HW: 1.237550270460813894857210470945574343204498291015625p-552] 

; mpf : + 1069831309529082 -552
; mpfd: + 1069831309529082 -552 (8.3947e-167) class: Pos. norm. non-zero
; hwf : + 1069831309529082 -552 (8.3947e-167) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111010111 #b0011110011010000000110000011001011001000111111111010)))
(assert (= y (fp #b1 #b00100110101 #b0101011110111110000001101011111000100010100101110011)))
(assert (= r (fp #b0 #b00111010111 #b0011110011010000000110000011001011001000111111111010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
