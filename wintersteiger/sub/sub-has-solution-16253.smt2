(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3065855812623816678552657322143204510211944580078125p862 {- 1380738709530429 862 (-4.01785e+259)}
; Y = -1.281221204720077277983136809780262410640716552734375p-836 {- 1266507712786022 -836 (-2.79607e-252)}
; -1.3065855812623816678552657322143204510211944580078125p862 - -1.281221204720077277983136809780262410640716552734375p-836 == -1.30658558126238144581066080718301236629486083984375p862
; [HW: -1.30658558126238144581066080718301236629486083984375p862] 

; mpf : - 1380738709530428 862
; mpfd: - 1380738709530428 862 (-4.01785e+259) class: Neg. norm. non-zero
; hwf : - 1380738709530428 862 (-4.01785e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101011101 #b0100111001111100011001001000010011110010011100111101)))
(assert (= y (fp #b1 #b00010111011 #b0100011111111110000111001110010100110110111001100110)))
(assert (= r (fp #b1 #b11101011101 #b0100111001111100011001001000010011110010011100111100)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
