(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.850250819574435379166743587120436131954193115234375p802 {- 3829189274206886 802 (-4.935e+241)}
; Y = -1.0676150683520890805056069439160637557506561279296875p-499 {- 304511196635099 -499 (-6.52299e-151)}
; -1.850250819574435379166743587120436131954193115234375p802 - -1.0676150683520890805056069439160637557506561279296875p-499 == -1.8502508195744351571221386620891280472278594970703125p802
; [HW: -1.8502508195744351571221386620891280472278594970703125p802] 

; mpf : - 3829189274206885 802
; mpfd: - 3829189274206885 802 (-4.935e+241) class: Neg. norm. non-zero
; hwf : - 3829189274206885 802 (-4.935e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100100001 #b1101100110101010000010011010011101111000001010100110)))
(assert (= y (fp #b1 #b01000001100 #b0001000101001111001110001001101101001001111111011011)))
(assert (= r (fp #b1 #b11100100001 #b1101100110101010000010011010011101111000001010100101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
