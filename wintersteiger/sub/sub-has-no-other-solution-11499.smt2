(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6438603481620404078711317197303287684917449951171875p285 {+ 2899689224061203 285 (1.02191e+086)}
; Y = 1.8718240412637647818172581537510268390178680419921875p-527 {+ 3926346427368131 -527 (4.26047e-159)}
; 1.6438603481620404078711317197303287684917449951171875p285 - 1.8718240412637647818172581537510268390178680419921875p-527 == 1.643860348162040185826526794699020683765411376953125p285
; [HW: 1.643860348162040185826526794699020683765411376953125p285] 

; mpf : + 2899689224061202 285
; mpfd: + 2899689224061202 285 (1.02191e+086) class: Pos. norm. non-zero
; hwf : + 2899689224061202 285 (1.02191e+086) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011100 #b1010010011010100000010000010001010001100000100010011)))
(assert (= y (fp #b0 #b00111110000 #b1101111100101111110111000100000100011000001011000011)))
(assert (= r (fp #b0 #b10100011100 #b1010010011010100000010000010001010001100000100010010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
