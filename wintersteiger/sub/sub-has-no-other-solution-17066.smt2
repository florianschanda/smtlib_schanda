(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9457175413425094046004915071534924209117889404296875p-435 {- 4259133166787867 -435 (-2.19296e-131)}
; Y = 1.04680812442645443383071324205957353115081787109375p335 {+ 210805051724892 335 (7.32682e+100)}
; -1.9457175413425094046004915071534924209117889404296875p-435 - 1.04680812442645443383071324205957353115081787109375p335 == -1.0468081244264546558753181670908816158771514892578125p335
; [HW: -1.0468081244264546558753181670908816158771514892578125p335] 

; mpf : - 210805051724893 335
; mpfd: - 210805051724893 335 (-7.32682e+100) class: Neg. norm. non-zero
; hwf : - 210805051724893 335 (-7.32682e+100) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001100 #b1111001000011010100010110111011101010001110100011011)))
(assert (= y (fp #b0 #b10101001110 #b0000101111111011100111100000001110011001010001011100)))
(assert (= r (fp #b1 #b10101001110 #b0000101111111011100111100000001110011001010001011101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
