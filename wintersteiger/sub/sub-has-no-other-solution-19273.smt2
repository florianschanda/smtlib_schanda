(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0947662672268219097304609022103250026702880859375p-270 {+ 426789325770008 -270 (5.77062e-082)}
; Y = 1.347442904742141234208929745364002883434295654296875p569 {+ 1564743736329230 569 (2.60362e+171)}
; 1.0947662672268219097304609022103250026702880859375p-270 - 1.347442904742141234208929745364002883434295654296875p569 == -1.347442904742141234208929745364002883434295654296875p569
; [HW: -1.347442904742141234208929745364002883434295654296875p569] 

; mpf : - 1564743736329230 569
; mpfd: - 1564743736329230 569 (-2.60362e+171) class: Neg. norm. non-zero
; hwf : - 1564743736329230 569 (-2.60362e+171) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011110001 #b0001100001000010100110100010001010000000110100011000)))
(assert (= y (fp #b0 #b11000111000 #b0101100011110010000001001010100100011000010000001110)))
(assert (= r (fp #b1 #b11000111000 #b0101100011110010000001001010100100011000010000001110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
