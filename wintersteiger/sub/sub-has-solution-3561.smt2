(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.24617596247966755385050419135950505733489990234375p-758 {- 1108677972891004 -758 (-8.21945e-229)}
; Y = 1.9371031003148970750515900363097898662090301513671875p-720 {+ 4220337173385907 -720 (3.51201e-217)}
; -1.24617596247966755385050419135950505733489990234375p-758 - 1.9371031003148970750515900363097898662090301513671875p-720 == -1.93710310031943055975034440052695572376251220703125p-720
; [HW: -1.93710310031943055975034440052695572376251220703125p-720] 

; mpf : - 4220337173406324 -720
; mpfd: - 4220337173406324 -720 (-3.51201e-217) class: Neg. norm. non-zero
; hwf : - 4220337173406324 -720 (-3.51201e-217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100001001 #b0011111100000101011000110100101111101001010101111100)))
(assert (= y (fp #b0 #b00100101111 #b1110111111100101111111010010000011010101001010110011)))
(assert (= r (fp #b1 #b00100101111 #b1110111111100101111111010010000011011010001001110100)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
