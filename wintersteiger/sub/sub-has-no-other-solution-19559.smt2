(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.304157880976883010504252524697221815586090087890625p-788 {+ 1369805319429290 -788 (8.01113e-238)}
; Y = -1.274915067529436729643066428252495825290679931640625p331 {- 1238107395684106 331 (-5.57712e+099)}
; 1.304157880976883010504252524697221815586090087890625p-788 - -1.274915067529436729643066428252495825290679931640625p331 == 1.274915067529436729643066428252495825290679931640625p331
; [HW: 1.274915067529436729643066428252495825290679931640625p331] 

; mpf : + 1238107395684106 331
; mpfd: + 1238107395684106 331 (5.57712e+099) class: Pos. norm. non-zero
; hwf : + 1238107395684106 331 (5.57712e+099) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101011 #b0100110111011101010010100111011110011101110010101010)))
(assert (= y (fp #b1 #b10101001010 #b0100011001100000110101010111100000110111011100001010)))
(assert (= r (fp #b0 #b10101001010 #b0100011001100000110101010111100000110111011100001010)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
