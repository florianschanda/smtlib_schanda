(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2918203113492043865306868610787205398082733154296875p880 {- 1314241845451419 880 (-1.04135e+265)}
; Y = 1.7430895511561974586811629706062376499176025390625p-263 {+ 3346577825689960 -263 (1.17606e-079)}
; -1.2918203113492043865306868610787205398082733154296875p880 - 1.7430895511561974586811629706062376499176025390625p-263 == -1.29182031134920460857529178611002862453460693359375p880
; [HW: -1.29182031134920460857529178611002862453460693359375p880] 

; mpf : - 1314241845451420 880
; mpfd: - 1314241845451420 880 (-1.04135e+265) class: Neg. norm. non-zero
; hwf : - 1314241845451420 880 (-1.04135e+265) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101101111 #b0100101010110100101111000110010110001101101010011011)))
(assert (= y (fp #b0 #b01011111000 #b1011111000111011000111011110100000110111000101101000)))
(assert (= r (fp #b1 #b11101101111 #b0100101010110100101111000110010110001101101010011100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
