(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8467031183239479563695795150124467909336090087890625p65 {- 3813211848177169 65 (-6.81313e+019)}
; Y = 1.030581812158171572946230298839509487152099609375p-483 {+ 137728237839856 -483 (4.12662e-146)}
; -1.8467031183239479563695795150124467909336090087890625p65 - 1.030581812158171572946230298839509487152099609375p-483 == -1.846703118323948178414184440043754875659942626953125p65
; [HW: -1.846703118323948178414184440043754875659942626953125p65] 

; mpf : - 3813211848177170 65
; mpfd: - 3813211848177170 65 (-6.81313e+019) class: Neg. norm. non-zero
; hwf : - 3813211848177170 65 (-6.81313e+019) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000000 #b1101100011000001100010010001101010011111011000010001)))
(assert (= y (fp #b0 #b01000011100 #b0000011111010100001101011010101100010010010111110000)))
(assert (= r (fp #b1 #b10001000000 #b1101100011000001100010010001101010011111011000010010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
