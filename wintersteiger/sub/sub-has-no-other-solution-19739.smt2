(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.060335102652929517574875717400573194026947021484375p885 {- 271725145825094 885 (-2.7352e+266)}
; Y = -1.9316956718808453441482697598985396325588226318359375p-869 {- 4195984280705279 -869 (-4.90764e-262)}
; -1.060335102652929517574875717400573194026947021484375p885 - -1.9316956718808453441482697598985396325588226318359375p-869 == -1.060335102652929517574875717400573194026947021484375p885
; [HW: -1.060335102652929517574875717400573194026947021484375p885] 

; mpf : - 271725145825094 885
; mpfd: - 271725145825094 885 (-2.7352e+266) class: Neg. norm. non-zero
; hwf : - 271725145825094 885 (-2.7352e+266) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101110100 #b0000111101110010000111110000110010110001111101000110)))
(assert (= y (fp #b1 #b00010011010 #b1110111010000011100110111000100010001101100011111111)))
(assert (= r (fp #b1 #b11101110100 #b0000111101110010000111110000110010110001111101000110)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
