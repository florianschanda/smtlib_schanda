(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8213978364316061320238304688245989382266998291015625p880 {+ 3699246990076313 880 (1.46825e+265)}
; Y = 1.7228754411924922518295488771400414407253265380859375p323 {+ 3255541567589791 323 (2.94403e+097)}
; 1.8213978364316061320238304688245989382266998291015625p880 - 1.7228754411924922518295488771400414407253265380859375p323 == 1.8213978364316061320238304688245989382266998291015625p880
; [HW: 1.8213978364316061320238304688245989382266998291015625p880] 

; mpf : + 3699246990076313 880
; mpfd: + 3699246990076313 880 (1.46825e+265) class: Pos. norm. non-zero
; hwf : + 3699246990076313 880 (1.46825e+265) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101101111 #b1101001001000111001000001110110001111010100110011001)))
(assert (= y (fp #b0 #b10101000010 #b1011100100001110010111010110101100000000110110011111)))
(assert (= r (fp #b0 #b11101101111 #b1101001001000111001000001110110001111010100110011001)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
