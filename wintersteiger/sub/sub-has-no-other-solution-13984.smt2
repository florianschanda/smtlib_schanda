(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 0.8653020665794926014058319196919910609722137451171875p-1022 {+ 3896974064610323 -1023 (1.92536e-308)}
; Y = 1.097750484265856751875389818451367318630218505859375p979 {+ 440229044514998 979 (5.60879e+294)}
; 0.8653020665794926014058319196919910609722137451171875p-1022 - 1.097750484265856751875389818451367318630218505859375p979 == -1.0977504842658565298307848934200592339038848876953125p979
; [HW: -1.0977504842658565298307848934200592339038848876953125p979] 

; mpf : - 440229044514997 979
; mpfd: - 440229044514997 979 (-5.60879e+294) class: Neg. norm. non-zero
; hwf : - 440229044514997 979 (-5.60879e+294) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1101110110000100011011111010110100011110110000010011)))
(assert (= y (fp #b0 #b11111010010 #b0001100100000110001011001111110100010111000010110110)))
(assert (= r (fp #b1 #b11111010010 #b0001100100000110001011001111110100010111000010110101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
