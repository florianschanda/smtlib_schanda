(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.857109183066242952264701671083457767963409423828125p-310 {- 3860076597472962 -310 (-8.90305e-094)}
; Y = -1.1002946247774811894259983091615140438079833984375p-39 {- 451686834775128 -39 (-2.00142e-012)}
; -1.857109183066242952264701671083457767963409423828125p-310 - -1.1002946247774811894259983091615140438079833984375p-39 == 1.1002946247774809673813933841302059590816497802734375p-39
; [HW: 1.1002946247774809673813933841302059590816497802734375p-39] 

; mpf : + 451686834775127 -39
; mpfd: + 451686834775127 -39 (2.00142e-012) class: Pos. norm. non-zero
; hwf : + 451686834775127 -39 (2.00142e-012) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011001001 #b1101101101101011100000011110011001011110111011000010)))
(assert (= y (fp #b1 #b01111011000 #b0001100110101100111010001001010101100010010001011000)))
(assert (= r (fp #b0 #b01111011000 #b0001100110101100111010001001010101100010010001010111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
