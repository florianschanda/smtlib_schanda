(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6739589041471731878374384905328042805194854736328125p-827 {- 3035241069580237 -827 (-1.87042e-249)}
; Y = 1.084053266179540120361934896209277212619781494140625p-406 {+ 378542258245450 -406 (6.55952e-123)}
; -1.6739589041471731878374384905328042805194854736328125p-827 - 1.084053266179540120361934896209277212619781494140625p-406 == -1.084053266179540120361934896209277212619781494140625p-406
; [HW: -1.084053266179540120361934896209277212619781494140625p-406] 

; mpf : - 378542258245450 -406
; mpfd: - 378542258245450 -406 (-6.55952e-123) class: Neg. norm. non-zero
; hwf : - 378542258245450 -406 (-6.55952e-123) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000100 #b1010110010001000100100100001110000101000111111001101)))
(assert (= y (fp #b0 #b01001101001 #b0001010110000100100000111100110101011100111101001010)))
(assert (= r (fp #b1 #b01001101001 #b0001010110000100100000111100110101011100111101001010)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
