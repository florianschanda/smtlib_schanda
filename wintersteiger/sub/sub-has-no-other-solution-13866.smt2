(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.206365415317890210644691251218318939208984375p321 {- 929387207527808 321 (-5.15356e+096)}
; Y = -1.1041067914471429656231293847667984664440155029296875p-218 {- 468855307168091 -218 (-2.62103e-066)}
; -1.206365415317890210644691251218318939208984375p321 - -1.1041067914471429656231293847667984664440155029296875p-218 == -1.2063654153178899886000863261870108544826507568359375p321
; [HW: -1.2063654153178899886000863261870108544826507568359375p321] 

; mpf : - 929387207527807 321
; mpfd: - 929387207527807 321 (-5.15356e+096) class: Neg. norm. non-zero
; hwf : - 929387207527807 321 (-5.15356e+096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101000000 #b0011010011010100010111010010010111010000110110000000)))
(assert (= y (fp #b1 #b01100100101 #b0001101010100110101111100010000010001110100101011011)))
(assert (= r (fp #b1 #b10101000000 #b0011010011010100010111010010010111010000110101111111)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
