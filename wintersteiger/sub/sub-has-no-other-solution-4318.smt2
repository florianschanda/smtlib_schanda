(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.20320632716350583990561062819324433803558349609375p-848 {- 915159939292892 -848 (-6.41068e-256)}
; Y = 1.9495769510338087915357618840062059462070465087890625p708 {+ 4276514402835473 708 (2.62529e+213)}
; -1.20320632716350583990561062819324433803558349609375p-848 - 1.9495769510338087915357618840062059462070465087890625p708 == -1.9495769510338087915357618840062059462070465087890625p708
; [HW: -1.9495769510338087915357618840062059462070465087890625p708] 

; mpf : - 4276514402835473 708
; mpfd: - 4276514402835473 708 (-2.62529e+213) class: Neg. norm. non-zero
; hwf : - 4276514402835473 708 (-2.62529e+213) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101111 #b0011010000000101010101000111000110000001111011011100)))
(assert (= y (fp #b0 #b11011000011 #b1111001100010111011110011001110110111001110000010001)))
(assert (= r (fp #b1 #b11011000011 #b1111001100010111011110011001110110111001110000010001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
