(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6080678092966547154674117336980998516082763671875p-124 {+ 2738493959364408 -124 (7.5611e-038)}
; Y = 1.7623277711148259694340367786935530602931976318359375p422 {+ 3433219065926911 422 (1.90873e+127)}
; 1.6080678092966547154674117336980998516082763671875p-124 - 1.7623277711148259694340367786935530602931976318359375p422 == -1.7623277711148259694340367786935530602931976318359375p422
; [HW: -1.7623277711148259694340367786935530602931976318359375p422] 

; mpf : - 3433219065926911 422
; mpfd: - 3433219065926911 422 (-1.90873e+127) class: Neg. norm. non-zero
; hwf : - 3433219065926911 422 (-1.90873e+127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110000011 #b1001101110101010010101001111101010101101111100111000)))
(assert (= y (fp #b0 #b10110100101 #b1100001100100111111010011010110111000101010011111111)))
(assert (= r (fp #b1 #b10110100101 #b1100001100100111111010011010110111000101010011111111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
