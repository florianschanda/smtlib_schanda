(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5701265211706221247567327736760489642620086669921875p956 {- 2567621588298051 956 (-9.56336e+287)}
; Y = -1.917426821246650536778588502784259617328643798828125p200 {- 4131723090306114 200 (-3.08119e+060)}
; -1.5701265211706221247567327736760489642620086669921875p956 - -1.917426821246650536778588502784259617328643798828125p200 == -1.570126521170621902712127848644740879535675048828125p956
; [HW: -1.570126521170621902712127848644740879535675048828125p956] 

; mpf : - 2567621588298050 956
; mpfd: - 2567621588298050 956 (-9.56336e+287) class: Neg. norm. non-zero
; hwf : - 2567621588298050 956 (-9.56336e+287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110111011 #b1001000111110011110011111100101100000010100101000011)))
(assert (= y (fp #b1 #b10011000111 #b1110101011011100011110111111000110111010010001000010)))
(assert (= r (fp #b1 #b11110111011 #b1001000111110011110011111100101100000010100101000010)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
