(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7750480482615589306050196682917885482311248779296875p729 {+ 3490506101344987 729 (5.01276e+219)}
; Y = -1.060586162482074268353926527197472751140594482421875p612 {- 272855818778078 612 (-1.80262e+184)}
; 1.7750480482615589306050196682917885482311248779296875p729 - -1.060586162482074268353926527197472751140594482421875p612 == 1.77504804826155915264962459332309663295745849609375p729
; [HW: 1.77504804826155915264962459332309663295745849609375p729] 

; mpf : + 3490506101344988 729
; mpfd: + 3490506101344988 729 (5.01276e+219) class: Pos. norm. non-zero
; hwf : + 3490506101344988 729 (5.01276e+219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011011000 #b1100011001101001100011001000010000011100101011011011)))
(assert (= y (fp #b1 #b11001100011 #b0000111110000010100100110010001001110011010111011110)))
(assert (= r (fp #b0 #b11011011000 #b1100011001101001100011001000010000011100101011011100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
