(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3352814431123734006945369401364587247371673583984375p-376 {- 1509973382265127 -376 (-8.6755e-114)}
; Y = -1.828802625964627726062872170587070286273956298828125p-812 {- 3732595197457986 -812 (-6.69592e-245)}
; -1.3352814431123734006945369401364587247371673583984375p-376 - -1.828802625964627726062872170587070286273956298828125p-812 == -1.3352814431123734006945369401364587247371673583984375p-376
; [HW: -1.3352814431123734006945369401364587247371673583984375p-376] 

; mpf : - 1509973382265127 -376
; mpfd: - 1509973382265127 -376 (-8.6755e-114) class: Neg. norm. non-zero
; hwf : - 1509973382265127 -376 (-8.6755e-114) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010000111 #b0101010111010101000000010011000100011111100100100111)))
(assert (= y (fp #b1 #b00011010011 #b1101010000101100011010001010110101011011011001000010)))
(assert (= r (fp #b1 #b01010000111 #b0101010111010101000000010011000100011111100100100111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
