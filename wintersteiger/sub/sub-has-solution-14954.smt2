(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.70351709261218697832873658626340329647064208984375p935 {- 3168359316137020 935 (-4.94758e+281)}
; Y = 1.6314899069903996409180990667664445936679840087890625p409 {+ 2843977709810193 409 (2.15701e+123)}
; -1.70351709261218697832873658626340329647064208984375p935 - 1.6314899069903996409180990667664445936679840087890625p409 == -1.70351709261218697832873658626340329647064208984375p935
; [HW: -1.70351709261218697832873658626340329647064208984375p935] 

; mpf : - 3168359316137020 935
; mpfd: - 3168359316137020 935 (-4.94758e+281) class: Neg. norm. non-zero
; hwf : - 3168359316137020 935 (-4.94758e+281) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11110100110 #b1011010000011001101100100011100011110010010000111100)))
(assert (= y (fp #b0 #b10110011000 #b1010000110101001010100101001001001000111001000010001)))
(assert (= r (fp #b1 #b11110100110 #b1011010000011001101100100011100011110010010000111100)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
