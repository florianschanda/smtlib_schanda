(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.308734882794734044608730982872657477855682373046875p555 {- 1390418303110638 555 (-1.54347e+167)}
; Y = 1.7951363775542350520453283024835400283336639404296875p207 {+ 3580975893661979 207 (3.69238e+062)}
; -1.308734882794734044608730982872657477855682373046875p555 - 1.7951363775542350520453283024835400283336639404296875p207 == -1.3087348827947342666533359079039655625820159912109375p555
; [HW: -1.3087348827947342666533359079039655625820159912109375p555] 

; mpf : - 1390418303110639 555
; mpfd: - 1390418303110639 555 (-1.54347e+167) class: Neg. norm. non-zero
; hwf : - 1390418303110639 555 (-1.54347e+167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101010 #b0100111100001001001111111101000010111100110111101110)))
(assert (= y (fp #b0 #b10011001110 #b1100101110001110000011101100000101110100100100011011)))
(assert (= r (fp #b1 #b11000101010 #b0100111100001001001111111101000010111100110111101111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
