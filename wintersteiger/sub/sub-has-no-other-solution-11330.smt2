(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.600990538337605517682504796539433300495147705078125p765 {+ 2706620764510434 765 (3.10696e+230)}
; Y = 1.756626348864058773102669874788261950016021728515625p-214 {+ 3407542142802874 -214 (6.67207e-065)}
; 1.600990538337605517682504796539433300495147705078125p765 - 1.756626348864058773102669874788261950016021728515625p-214 == 1.6009905383376052956378998715081252157688140869140625p765
; [HW: 1.6009905383376052956378998715081252157688140869140625p765] 

; mpf : + 2706620764510433 765
; mpfd: + 2706620764510433 765 (3.10696e+230) class: Pos. norm. non-zero
; hwf : + 2706620764510433 765 (3.10696e+230) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011111100 #b1001100111011010100001000001001101011101100011100010)))
(assert (= y (fp #b0 #b01100101001 #b1100000110110010010000111010111110101001101110111010)))
(assert (= r (fp #b0 #b11011111100 #b1001100111011010100001000001001101011101100011100001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
