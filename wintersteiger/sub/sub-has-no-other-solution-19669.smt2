(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.26511199673158980516518568038009107112884521484375p-17 {+ 1193958289691836 -17 (9.65204e-006)}
; Y = 1.6916806782055917590668059347080998122692108154296875p-590 {+ 3115052844626075 -590 (4.17466e-178)}
; 1.26511199673158980516518568038009107112884521484375p-17 - 1.6916806782055917590668059347080998122692108154296875p-590 == 1.2651119967315895831205807553487829864025115966796875p-17
; [HW: 1.2651119967315895831205807553487829864025115966796875p-17] 

; mpf : + 1193958289691835 -17
; mpfd: + 1193958289691835 -17 (9.65204e-006) class: Pos. norm. non-zero
; hwf : + 1193958289691835 -17 (9.65204e-006) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101110 #b0100001111011110011000010011101110111101010010111100)))
(assert (= y (fp #b0 #b00110110001 #b1011000100010001111111000010010000101011000010011011)))
(assert (= r (fp #b0 #b01111101110 #b0100001111011110011000010011101110111101010010111011)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
