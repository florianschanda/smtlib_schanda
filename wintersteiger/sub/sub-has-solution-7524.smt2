(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8294943440470021744914674854953773319721221923828125p-485 {+ 3735710418756013 -485 (1.8314e-146)}
; Y = 1.2536245517137907246052463960950262844562530517578125p-403 {+ 1142223436590237 -403 (6.06847e-122)}
; 1.8294943440470021744914674854953773319721221923828125p-485 - 1.2536245517137907246052463960950262844562530517578125p-403 == -1.2536245517137907246052463960950262844562530517578125p-403
; [HW: -1.2536245517137907246052463960950262844562530517578125p-403] 

; mpf : - 1142223436590237 -403
; mpfd: - 1142223436590237 -403 (-6.06847e-122) class: Neg. norm. non-zero
; hwf : - 1142223436590237 -403 (-6.06847e-122) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011010 #b1101010001011001101111011100011111100110000110101101)))
(assert (= y (fp #b0 #b01001101100 #b0100000011101101100010011110001100010010110010011101)))
(assert (= r (fp #b1 #b01001101100 #b0100000011101101100010011110001100010010110010011101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
