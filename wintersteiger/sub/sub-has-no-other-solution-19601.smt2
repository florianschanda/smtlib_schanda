(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.4051306981255524686247326826560311019420623779296875p-1022 {+ 1824546461114587 -1023 (9.01446e-309)}
; Y = -1.403646195254093509419135443749837577342987060546875p-813 {- 1817860854535854 -813 (-2.56963e-245)}
; 0.4051306981255524686247326826560311019420623779296875p-1022 - -1.403646195254093509419135443749837577342987060546875p-813 == 1.403646195254093509419135443749837577342987060546875p-813
; [HW: 1.403646195254093509419135443749837577342987060546875p-813] 

; mpf : + 1817860854535854 -813
; mpfd: + 1817860854535854 -813 (2.56963e-245) class: Pos. norm. non-zero
; hwf : + 1817860854535854 -813 (2.56963e-245) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b0110011110110110101001010011101100001110000011011011)))
(assert (= y (fp #b1 #b00011010010 #b0110011101010101010110110110011111000101011010101110)))
(assert (= r (fp #b0 #b00011010010 #b0110011101010101010110110110011111000101011010101110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
