(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.285309816189238230066393953165970742702484130859375p974 {- 1284921181874998 974 (-2.05222e+293)}
; Y = 1.284747804450118824348692214698530733585357666015625p-612 {+ 1282390106016122 -612 (7.55893e-185)}
; -1.285309816189238230066393953165970742702484130859375p974 - 1.284747804450118824348692214698530733585357666015625p-612 == -1.285309816189238230066393953165970742702484130859375p974
; [HW: -1.285309816189238230066393953165970742702484130859375p974] 

; mpf : - 1284921181874998 974
; mpfd: - 1284921181874998 974 (-2.05222e+293) class: Neg. norm. non-zero
; hwf : - 1284921181874998 974 (-2.05222e+293) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111001101 #b0100100100001010000100000110100111000010101100110110)))
(assert (= y (fp #b0 #b00110011011 #b0100100011100101001110110110101110111000100101111010)))
(assert (= r (fp #b1 #b11111001101 #b0100100100001010000100000110100111000010101100110110)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
