(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7408602136446142960579663849784992635250091552734375p335 {+ 3336537782103511 335 (1.21846e+101)}
; Y = -1.3115033539641036686163033664342947304248809814453125p-617 {- 1402886388837397 -617 (-2.41136e-186)}
; 1.7408602136446142960579663849784992635250091552734375p335 - -1.3115033539641036686163033664342947304248809814453125p-617 == 1.7408602136446142960579663849784992635250091552734375p335
; [HW: 1.7408602136446142960579663849784992635250091552734375p335] 

; mpf : + 3336537782103511 335
; mpfd: + 3336537782103511 335 (1.21846e+101) class: Pos. norm. non-zero
; hwf : + 3336537782103511 335 (1.21846e+101) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101001110 #b1011110110101001000000111101010010000010110111010111)))
(assert (= y (fp #b1 #b00110010110 #b0100111110111110101011110000110111011110110000010101)))
(assert (= r (fp #b0 #b10101001110 #b1011110110101001000000111101010010000010110111010111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
