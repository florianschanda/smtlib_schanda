(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3841493891434015761632281282800249755382537841796875p-705 {- 1730055045800827 -705 (-8.22311e-213)}
; Y = 1.3065065875532939632108764271833933889865875244140625p-54 {+ 1380382953491617 -54 (7.25257e-017)}
; -1.3841493891434015761632281282800249755382537841796875p-705 - 1.3065065875532939632108764271833933889865875244140625p-54 == -1.3065065875532939632108764271833933889865875244140625p-54
; [HW: -1.3065065875532939632108764271833933889865875244140625p-54] 

; mpf : - 1380382953491617 -54
; mpfd: - 1380382953491617 -54 (-7.25257e-017) class: Neg. norm. non-zero
; hwf : - 1380382953491617 -54 (-7.25257e-017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111110 #b0110001001010111100111010100011100100110001101111011)))
(assert (= y (fp #b0 #b01111001001 #b0100111001110111001101110011100110001100110010100001)))
(assert (= r (fp #b1 #b01111001001 #b0100111001110111001101110011100110001100110010100001)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
