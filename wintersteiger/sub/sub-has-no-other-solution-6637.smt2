(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8544802233794508428132985500269569456577301025390625p490 {- 3848236815607153 490 (-5.92816e+147)}
; Y = -1.2164017147445438382646898389793932437896728515625p-238 {- 974586681885864 -238 (-2.75384e-072)}
; -1.8544802233794508428132985500269569456577301025390625p490 - -1.2164017147445438382646898389793932437896728515625p-238 == -1.8544802233794508428132985500269569456577301025390625p490
; [HW: -1.8544802233794508428132985500269569456577301025390625p490] 

; mpf : - 3848236815607153 490
; mpfd: - 3848236815607153 490 (-5.92816e+147) class: Neg. norm. non-zero
; hwf : - 3848236815607153 490 (-5.92816e+147) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111101001 #b1101101010111111001101110100011001111110010101110001)))
(assert (= y (fp #b1 #b01100010001 #b0011011101100110000110100100111110100000010010101000)))
(assert (= r (fp #b1 #b10111101001 #b1101101010111111001101110100011001111110010101110001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
