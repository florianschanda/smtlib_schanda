(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1894708848833011050061259084031917154788970947265625p-470 {- 853301006557993 -470 (-3.90172e-142)}
; Y = 1.4253054337554516006747462597559206187725067138671875p-170 {+ 1915405392979699 -170 (9.52377e-052)}
; -1.1894708848833011050061259084031917154788970947265625p-470 - 1.4253054337554516006747462597559206187725067138671875p-170 == -1.42530543375545182271935118478722870349884033203125p-170
; [HW: -1.42530543375545182271935118478722870349884033203125p-170] 

; mpf : - 1915405392979700 -170
; mpfd: - 1915405392979700 -170 (-9.52377e-052) class: Neg. norm. non-zero
; hwf : - 1915405392979700 -170 (-9.52377e-052) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000101001 #b0011000010000001001010011111011000011110001100101001)))
(assert (= y (fp #b0 #b01101010101 #b0110110011100000110100010010000011001010011011110011)))
(assert (= r (fp #b1 #b01101010101 #b0110110011100000110100010010000011001010011011110100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
