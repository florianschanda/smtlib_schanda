(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.067556114117972132504519322537817060947418212890625p-254 {- 304245690368298 -254 (-3.68784e-077)}
; Y = 1.888595695078643554865038822754286229610443115234375p237 {+ 4001879241239206 237 (4.17107e+071)}
; -1.067556114117972132504519322537817060947418212890625p-254 - 1.888595695078643554865038822754286229610443115234375p237 == -1.888595695078643554865038822754286229610443115234375p237
; [HW: -1.888595695078643554865038822754286229610443115234375p237] 

; mpf : - 4001879241239206 237
; mpfd: - 4001879241239206 237 (-4.17107e+071) class: Neg. norm. non-zero
; hwf : - 4001879241239206 237 (-4.17107e+071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100000001 #b0001000101001011010110111000010011001000000100101010)))
(assert (= y (fp #b0 #b10011101100 #b1110001101111011000000011110100110111010101010100110)))
(assert (= r (fp #b1 #b10011101100 #b1110001101111011000000011110100110111010101010100110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
