(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.53654065905303216510446873144246637821197509765625p788 {- 2416364312180356 788 (-2.50139e+237)}
; Y = 1.4882518151171251208353396577876992523670196533203125p740 {+ 2198890692624453 740 (8.60742e+222)}
; -1.53654065905303216510446873144246637821197509765625p788 - 1.4882518151171251208353396577876992523670196533203125p740 == -1.5365406590530372721303820071625523269176483154296875p788
; [HW: -1.5365406590530372721303820071625523269176483154296875p788] 

; mpf : - 2416364312180379 788
; mpfd: - 2416364312180379 788 (-2.50139e+237) class: Neg. norm. non-zero
; hwf : - 2416364312180379 788 (-2.50139e+237) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100010011 #b1000100101011010101110101000011110011011011010000100)))
(assert (= y (fp #b0 #b11011100011 #b0111110011111110000100100010101000100100000001000101)))
(assert (= r (fp #b1 #b11100010011 #b1000100101011010101110101000011110011011011010011011)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
