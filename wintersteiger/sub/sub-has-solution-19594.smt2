(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.66159610152684944495149466092698276042938232421875p519 {- 2979563956306092 519 (-2.85163e+156)}
; Y = 1.3887815729250767571301139469142071902751922607421875p-523 {+ 1750916546953891 -523 (5.05762e-158)}
; -1.66159610152684944495149466092698276042938232421875p519 - 1.3887815729250767571301139469142071902751922607421875p-523 == -1.66159610152684944495149466092698276042938232421875p519
; [HW: -1.66159610152684944495149466092698276042938232421875p519] 

; mpf : - 2979563956306092 519
; mpfd: - 2979563956306092 519 (-2.85163e+156) class: Neg. norm. non-zero
; hwf : - 2979563956306092 519 (-2.85163e+156) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000110 #b1010100101011110010111001011001100111000000010101100)))
(assert (= y (fp #b0 #b00111110100 #b0110001110000111001100000110110100000000001010100011)))
(assert (= r (fp #b1 #b11000000110 #b1010100101011110010111001011001100111000000010101100)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
