(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.159605301549408995498424701509065926074981689453125p-491 {- 718798376584274 -491 (-1.81377e-148)}
; Y = 1.76448606881867764428761802264489233493804931640625p-610 {+ 3442939174661732 -610 (4.15261e-184)}
; -1.159605301549408995498424701509065926074981689453125p-491 - 1.76448606881867764428761802264489233493804931640625p-610 == -1.159605301549408995498424701509065926074981689453125p-491
; [HW: -1.159605301549408995498424701509065926074981689453125p-491] 

; mpf : - 718798376584274 -491
; mpfd: - 718798376584274 -491 (-1.81377e-148) class: Neg. norm. non-zero
; hwf : - 718798376584274 -491 (-1.81377e-148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000010100 #b0010100011011011111001001001111001101100010001010010)))
(assert (= y (fp #b0 #b00110011101 #b1100001110110101010110111110011111010010111001100100)))
(assert (= r (fp #b1 #b01000010100 #b0010100011011011111001001001111001101100010001010010)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
