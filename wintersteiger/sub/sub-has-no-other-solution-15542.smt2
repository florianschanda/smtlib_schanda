(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4529624696827794227971253349096514284610748291015625p-583 {- 2039961609676185 -583 (-4.58952e-176)}
; Y = -1.4462391486263082018837167197489179670810699462890625p-37 {- 2009682463471569 -37 (-1.05228e-011)}
; -1.4529624696827794227971253349096514284610748291015625p-583 - -1.4462391486263082018837167197489179670810699462890625p-37 == 1.446239148626307979839111794717609882354736328125p-37
; [HW: 1.446239148626307979839111794717609882354736328125p-37] 

; mpf : + 2009682463471568 -37
; mpfd: + 2009682463471568 -37 (1.05228e-011) class: Pos. norm. non-zero
; hwf : + 2009682463471568 -37 (1.05228e-011) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111000 #b0111001111110101010110010011000110011010010110011001)))
(assert (= y (fp #b1 #b01111011010 #b0111001000111100101110101001010110001011011111010001)))
(assert (= r (fp #b0 #b01111011010 #b0111001000111100101110101001010110001011011111010000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
