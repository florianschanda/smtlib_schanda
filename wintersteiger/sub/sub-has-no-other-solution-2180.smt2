(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1021953767431338366833415420842356979846954345703125p563 {- 460247060619365 563 (-3.32772e+169)}
; Y = 1.1524187128342726627039382947259582579135894775390625p-948 {+ 686432858324721 -948 (4.84367e-286)}
; -1.1021953767431338366833415420842356979846954345703125p563 - 1.1524187128342726627039382947259582579135894775390625p-948 == -1.102195376743134058727946467115543782711029052734375p563
; [HW: -1.102195376743134058727946467115543782711029052734375p563] 

; mpf : - 460247060619366 563
; mpfd: - 460247060619366 563 (-3.32772e+169) class: Neg. norm. non-zero
; hwf : - 460247060619366 563 (-3.32772e+169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110010 #b0001101000101001011110011110100011101010000001100101)))
(assert (= y (fp #b0 #b00001001011 #b0010011100000100111010011010101011101011111011110001)))
(assert (= r (fp #b1 #b11000110010 #b0001101000101001011110011110100011101010000001100110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
