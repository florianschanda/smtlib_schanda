(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.239257603486212833132640298572368919849395751953125p-293 {+ 1077520453906066 -293 (7.78705e-089)}
; Y = 1.0950634310204219179496476499480195343494415283203125p576 {+ 428127632520133 576 (2.70842e+173)}
; 1.239257603486212833132640298572368919849395751953125p-293 - 1.0950634310204219179496476499480195343494415283203125p576 == -1.09506343102042169590504272491671144962310791015625p576
; [HW: -1.09506343102042169590504272491671144962310791015625p576] 

; mpf : - 428127632520132 576
; mpfd: - 428127632520132 576 (-2.70842e+173) class: Neg. norm. non-zero
; hwf : - 428127632520132 576 (-2.70842e+173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011010 #b0011110100111111111111000111111001001010111010010010)))
(assert (= y (fp #b0 #b11000111111 #b0001100001010110000100111011011101000111001111000101)))
(assert (= r (fp #b1 #b11000111111 #b0001100001010110000100111011011101000111001111000100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
