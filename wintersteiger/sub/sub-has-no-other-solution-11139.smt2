(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4171364170800331283572859319974668323993682861328125p196 {+ 1878615412524301 196 (1.42328e+059)}
; Y = -1.0014099255179231828805086479405872523784637451171875p-826 {- 6349740037139 -826 (-2.23787e-249)}
; 1.4171364170800331283572859319974668323993682861328125p196 - -1.0014099255179231828805086479405872523784637451171875p-826 == 1.4171364170800331283572859319974668323993682861328125p196
; [HW: 1.4171364170800331283572859319974668323993682861328125p196] 

; mpf : + 1878615412524301 196
; mpfd: + 1878615412524301 196 (1.42328e+059) class: Pos. norm. non-zero
; hwf : + 1878615412524301 196 (1.42328e+059) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011000011 #b0110101011001001011100111100010101010100010100001101)))
(assert (= y (fp #b1 #b00011000101 #b0000000001011100011001101001111111111101010000010011)))
(assert (= r (fp #b0 #b10011000011 #b0110101011001001011100111100010101010100010100001101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
