(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0327303398016998148278844382730312645435333251953125p639 {- 147404346134645 639 (-2.35589e+192)}
; Y = 1.911878090207901781383270645164884626865386962890625p-709 {+ 4106733827267626 -709 (7.09894e-214)}
; -1.0327303398016998148278844382730312645435333251953125p639 - 1.911878090207901781383270645164884626865386962890625p-709 == -1.032730339801700036872489363304339349269866943359375p639
; [HW: -1.032730339801700036872489363304339349269866943359375p639] 

; mpf : - 147404346134646 639
; mpfd: - 147404346134646 639 (-2.35589e+192) class: Neg. norm. non-zero
; hwf : - 147404346134646 639 (-2.35589e+192) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111110 #b0000100001100001000000111111101100001001000001110101)))
(assert (= y (fp #b0 #b00100111010 #b1110100101110000110101111010111101100001110000101010)))
(assert (= r (fp #b1 #b11001111110 #b0000100001100001000000111111101100001001000001110110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
