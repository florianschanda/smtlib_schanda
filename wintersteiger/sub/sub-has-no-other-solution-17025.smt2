(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.435500228428376434663960026227869093418121337890625p119 {+ 1961318666469802 119 (9.54054e+035)}
; Y = 1.665099246240803410046282806433737277984619140625p606 {+ 2995340717534480 606 (4.42199e+182)}
; 1.435500228428376434663960026227869093418121337890625p119 - 1.665099246240803410046282806433737277984619140625p606 == -1.665099246240803410046282806433737277984619140625p606
; [HW: -1.665099246240803410046282806433737277984619140625p606] 

; mpf : - 2995340717534480 606
; mpfd: - 2995340717534480 606 (-4.42199e+182) class: Neg. norm. non-zero
; hwf : - 2995340717534480 606 (-4.42199e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001110110 #b0110111101111100111100010110011010000000000110101010)))
(assert (= y (fp #b0 #b11001011101 #b1010101001000011111100011011011100110010110100010000)))
(assert (= r (fp #b1 #b11001011101 #b1010101001000011111100011011011100110010110100010000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
