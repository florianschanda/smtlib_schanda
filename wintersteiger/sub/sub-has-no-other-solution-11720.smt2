(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8824348711461824645851947934716008603572845458984375p-610 {+ 3974133356872679 -610 (4.43019e-184)}
; Y = -1.5350469556459056530428597397985868155956268310546875p-668 {- 2409637270072619 -668 (-1.25339e-201)}
; 1.8824348711461824645851947934716008603572845458984375p-610 - -1.5350469556459056530428597397985868155956268310546875p-668 == 1.8824348711461824645851947934716008603572845458984375p-610
; [HW: 1.8824348711461824645851947934716008603572845458984375p-610] 

; mpf : + 3974133356872679 -610
; mpfd: + 3974133356872679 -610 (4.43019e-184) class: Pos. norm. non-zero
; hwf : + 3974133356872679 -610 (4.43019e-184) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110011101 #b1110000111100111010000000111000001101100001111100111)))
(assert (= y (fp #b1 #b00101100011 #b1000100011111000110101100101100001010010110100101011)))
(assert (= r (fp #b0 #b00110011101 #b1110000111100111010000000111000001101100001111100111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
