(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6856615759750777083780803877743892371654510498046875p-795 {- 3087945218063627 -795 (-8.08954e-240)}
; Y = 1.7852500671747566496350145825999788939952850341796875p-48 {+ 3536451909920891 -48 (6.34248e-015)}
; -1.6856615759750777083780803877743892371654510498046875p-795 - 1.7852500671747566496350145825999788939952850341796875p-48 == -1.7852500671747566496350145825999788939952850341796875p-48
; [HW: -1.7852500671747566496350145825999788939952850341796875p-48] 

; mpf : - 3536451909920891 -48
; mpfd: - 3536451909920891 -48 (-6.34248e-015) class: Neg. norm. non-zero
; hwf : - 3536451909920891 -48 (-6.34248e-015) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011100100 #b1010111110000111100001000101110011101111110100001011)))
(assert (= y (fp #b0 #b01111001111 #b1100100100000110001001011111110110110010100001111011)))
(assert (= r (fp #b1 #b01111001111 #b1100100100000110001001011111110110110010100001111011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
