(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0934059669713553919478954412625171244144439697265625p892 {- 420663078046377 892 (-3.61025e+268)}
; Y = -1.7449242967700075990222785549121908843517303466796875p996 {- 3354840785352635 996 (-1.16856e+300)}
; -1.0934059669713553919478954412625171244144439697265625p892 - -1.7449242967700075990222785549121908843517303466796875p996 == 1.744924296770007376977673629880882799625396728515625p996
; [HW: 1.744924296770007376977673629880882799625396728515625p996] 

; mpf : + 3354840785352634 996
; mpfd: + 3354840785352634 996 (1.16856e+300) class: Pos. norm. non-zero
; hwf : + 3354840785352634 996 (1.16856e+300) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111011 #b0001011111101001011101000001010101100100101010101001)))
(assert (= y (fp #b1 #b11111100011 #b1011111010110011010110111101010010011111011110111011)))
(assert (= r (fp #b0 #b11111100011 #b1011111010110011010110111101010010011111011110111010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
