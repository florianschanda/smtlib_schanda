(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.191684167475292266402675522840581834316253662109375p-339 {- 863268745214550 -339 (-1.06412e-102)}
; Y = 0.6203044408505473672477137370151467621326446533203125p-1022 {+ 2793602848670789 -1023 (1.38022e-308)}
; -1.191684167475292266402675522840581834316253662109375p-339 - 0.6203044408505473672477137370151467621326446533203125p-1022 == -1.191684167475292266402675522840581834316253662109375p-339
; [HW: -1.191684167475292266402675522840581834316253662109375p-339] 

; mpf : - 863268745214550 -339
; mpfd: - 863268745214550 -339 (-1.06412e-102) class: Neg. norm. non-zero
; hwf : - 863268745214550 -339 (-1.06412e-102) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010101100 #b0011000100010010001101101010111001110111101001010110)))
(assert (= y (fp #b0 #b00000000000 #b1001111011001100010001011001011100000100010001000101)))
(assert (= r (fp #b1 #b01010101100 #b0011000100010010001101101010111001110111101001010110)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
