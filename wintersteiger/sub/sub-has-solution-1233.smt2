(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6153642087142723315906778225325979292392730712890625p213 {- 2771354021062737 213 (-2.12647e+064)}
; Y = 1.8053184565337556666264617888373322784900665283203125p-269 {+ 3626831900760005 -269 (1.9032e-081)}
; -1.6153642087142723315906778225325979292392730712890625p213 - 1.8053184565337556666264617888373322784900665283203125p-269 == -1.6153642087142723315906778225325979292392730712890625p213
; [HW: -1.6153642087142723315906778225325979292392730712890625p213] 

; mpf : - 2771354021062737 213
; mpfd: - 2771354021062737 213 (-2.12647e+064) class: Neg. norm. non-zero
; hwf : - 2771354021062737 213 (-2.12647e+064) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011010100 #b1001110110001000100000100011111110001110100001010001)))
(assert (= y (fp #b0 #b01011110010 #b1100111000101001010110011011000110101101011111000101)))
(assert (= r (fp #b1 #b10011010100 #b1001110110001000100000100011111110001110100001010001)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
