(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5770385729700520105467376197339035570621490478515625p890 {+ 2598750702206329 890 (1.30178e+268)}
; Y = 1.6838479742287315588100682361982762813568115234375p-963 {+ 3079777481914584 -963 (2.15982e-290)}
; 1.5770385729700520105467376197339035570621490478515625p890 - 1.6838479742287315588100682361982762813568115234375p-963 == 1.5770385729700517885021326947025954723358154296875p890
; [HW: 1.5770385729700517885021326947025954723358154296875p890] 

; mpf : + 2598750702206328 890
; mpfd: + 2598750702206328 890 (1.30178e+268) class: Pos. norm. non-zero
; hwf : + 2598750702206328 890 (1.30178e+268) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101111001 #b1001001110111000110011001100011101101111110101111001)))
(assert (= y (fp #b0 #b00000111100 #b1010111100010000101010010010110010111111100011011000)))
(assert (= r (fp #b0 #b11101111001 #b1001001110111000110011001100011101101111110101111000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
