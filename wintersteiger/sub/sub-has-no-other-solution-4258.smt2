(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.928459351073597449754970512003637850284576416015625p-793 {- 4181409187523706 -793 (-3.70189e-239)}
; Y = 1.933731620735872791527754088747315108776092529296875p-460 {+ 4205153379210126 -460 (6.49528e-139)}
; -1.928459351073597449754970512003637850284576416015625p-793 - 1.933731620735872791527754088747315108776092529296875p-460 == -1.9337316207358730135723590137786231935024261474609375p-460
; [HW: -1.9337316207358730135723590137786231935024261474609375p-460] 

; mpf : - 4205153379210127 -460
; mpfd: - 4205153379210127 -460 (-6.49528e-139) class: Neg. norm. non-zero
; hwf : - 4205153379210127 -460 (-6.49528e-139) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011100110 #b1110110110101111100000110001010010000110110001111010)))
(assert (= y (fp #b0 #b01000110011 #b1110111100001001000010010001011001001101001110001110)))
(assert (= r (fp #b1 #b01000110011 #b1110111100001001000010010001011001001101001110001111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
