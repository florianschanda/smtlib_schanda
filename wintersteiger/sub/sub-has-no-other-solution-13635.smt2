(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.089385536918143326801100556622259318828582763671875p545 {- 402556670756862 545 (-1.25467e+164)}
; Y = 1.2085396818710736344115730389603413641452789306640625p294 {+ 939179233566529 294 (3.84662e+088)}
; -1.089385536918143326801100556622259318828582763671875p545 - 1.2085396818710736344115730389603413641452789306640625p294 == -1.089385536918143326801100556622259318828582763671875p545
; [HW: -1.089385536918143326801100556622259318828582763671875p545] 

; mpf : - 402556670756862 545
; mpfd: - 402556670756862 545 (-1.25467e+164) class: Neg. norm. non-zero
; hwf : - 402556670756862 545 (-1.25467e+164) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100000 #b0001011011100001111110000111010111001100011111111110)))
(assert (= y (fp #b0 #b10100100101 #b0011010101100010110110110100100110001101111101000001)))
(assert (= r (fp #b1 #b11000100000 #b0001011011100001111110000111010111001100011111111110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
