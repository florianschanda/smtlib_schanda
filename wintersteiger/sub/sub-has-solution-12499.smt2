(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6585544745363629548506878563784994184970855712890625p547 {+ 2965865686125137 547 (7.64077e+164)}
; Y = 1.1864131864069353827773056764272041618824005126953125p-347 {+ 839530356839221 -347 (4.13835e-105)}
; 1.6585544745363629548506878563784994184970855712890625p547 - 1.1864131864069353827773056764272041618824005126953125p-347 == 1.658554474536362732806082931347191333770751953125p547
; [HW: 1.658554474536362732806082931347191333770751953125p547] 

; mpf : + 2965865686125136 547
; mpfd: + 2965865686125136 547 (7.64077e+164) class: Pos. norm. non-zero
; hwf : + 2965865686125136 547 (7.64077e+164) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000100010 #b1010100010010111000001101010101011000100101001010001)))
(assert (= y (fp #b0 #b01010100100 #b0010111110111000110001100100101100101001001100110101)))
(assert (= r (fp #b0 #b11000100010 #b1010100010010111000001101010101011000100101001010000)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
