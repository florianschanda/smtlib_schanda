(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9663986527255286063109451788477599620819091796875p-579 {- 4352272612306040 -579 (-9.93812e-175)}
; Y = 1.4494537726501948160517940777936019003391265869140625p659 {+ 2024159843027681 659 (3.46714e+198)}
; -1.9663986527255286063109451788477599620819091796875p-579 - 1.4494537726501948160517940777936019003391265869140625p659 == -1.4494537726501948160517940777936019003391265869140625p659
; [HW: -1.4494537726501948160517940777936019003391265869140625p659] 

; mpf : - 2024159843027681 659
; mpfd: - 2024159843027681 659 (-3.46714e+198) class: Neg. norm. non-zero
; hwf : - 2024159843027681 659 (-3.46714e+198) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111100 #b1111011101100101111001101111000001011010110001111000)))
(assert (= y (fp #b0 #b11010010010 #b0111001100001111011001110000011010011000101011100001)))
(assert (= r (fp #b1 #b11010010010 #b0111001100001111011001110000011010011000101011100001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
