(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.767471613814258102337362288380973041057586669921875p443 {+ 3456384873991326 443 (4.01458e+133)}
; Y = 1.2136588522199784900834629297605715692043304443359375p-364 {+ 962233927242303 -364 (3.22982e-110)}
; 1.767471613814258102337362288380973041057586669921875p443 - 1.2136588522199784900834629297605715692043304443359375p-364 == 1.767471613814258102337362288380973041057586669921875p443
; [HW: 1.767471613814258102337362288380973041057586669921875p443] 

; mpf : + 3456384873991326 443
; mpfd: + 3456384873991326 443 (4.01458e+133) class: Pos. norm. non-zero
; hwf : + 3456384873991326 443 (4.01458e+133) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110111010 #b1100010001111001000001010000100111110000110010011110)))
(assert (= y (fp #b0 #b01010010011 #b0011011010110010010110001011011011001001001000111111)))
(assert (= r (fp #b0 #b10110111010 #b1100010001111001000001010000100111110000110010011110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
