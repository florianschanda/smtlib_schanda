(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4732603447135510510435096875880844891071319580078125p823 {- 2131375112101181 823 (-8.24073e+247)}
; Y = 1.92041153043000623057423581485636532306671142578125p596 {+ 4145165025472084 596 (4.98049e+179)}
; -1.4732603447135510510435096875880844891071319580078125p823 - 1.92041153043000623057423581485636532306671142578125p596 == -1.473260344713551273088114612619392573833465576171875p823
; [HW: -1.473260344713551273088114612619392573833465576171875p823] 

; mpf : - 2131375112101182 823
; mpfd: - 2131375112101182 823 (-8.24073e+247) class: Neg. norm. non-zero
; hwf : - 2131375112101182 823 (-8.24073e+247) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100110110 #b0111100100100111100101110000011100001001110100111101)))
(assert (= y (fp #b0 #b11001010011 #b1110101110100000000101110000111000001110111001010100)))
(assert (= r (fp #b1 #b11100110110 #b0111100100100111100101110000011100001001110100111110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
