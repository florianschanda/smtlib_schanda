(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.877848719903428165167724728235043585300445556640625p727 {- 3953479167844746 727 (-1.32577e+219)}
; Y = 1.085769963614320321454442819231189787387847900390625p299 {+ 386273576173034 299 (1.10588e+090)}
; -1.877848719903428165167724728235043585300445556640625p727 - 1.085769963614320321454442819231189787387847900390625p299 == -1.877848719903428165167724728235043585300445556640625p727
; [HW: -1.877848719903428165167724728235043585300445556640625p727] 

; mpf : - 3953479167844746 727
; mpfd: - 3953479167844746 727 (-1.32577e+219) class: Neg. norm. non-zero
; hwf : - 3953479167844746 727 (-1.32577e+219) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010110 #b1110000010111010101100011001011011010010000110001010)))
(assert (= y (fp #b0 #b10100101010 #b0001010111110101000001010011010010110011110111101010)))
(assert (= r (fp #b1 #b11011010110 #b1110000010111010101100011001011011010010000110001010)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
