(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0137825112996707854762235001544468104839324951171875p-564 {+ 62070912753427 -564 (1.67891e-170)}
; Y = 1.4137713127756799114109753645607270300388336181640625p-879 {+ 1863460330033153 -879 (3.50762e-265)}
; 1.0137825112996707854762235001544468104839324951171875p-564 - 1.4137713127756799114109753645607270300388336181640625p-879 == 1.0137825112996707854762235001544468104839324951171875p-564
; [HW: 1.0137825112996707854762235001544468104839324951171875p-564] 

; mpf : + 62070912753427 -564
; mpfd: + 62070912753427 -564 (1.67891e-170) class: Pos. norm. non-zero
; hwf : + 62070912753427 -564 (1.67891e-170) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001011 #b0000001110000111010000000010101101001001111100010011)))
(assert (= y (fp #b0 #b00010010000 #b0110100111101100111010101011000001100101000000000001)))
(assert (= r (fp #b0 #b00111001011 #b0000001110000111010000000010101101001001111100010011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
