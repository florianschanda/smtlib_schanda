(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.866596361134526205205474980175495147705078125p-90 {+ 3902803049086080 -90 (1.50782e-027)}
; Y = 1.4735802625781264652005120296962559223175048828125p556 {+ 2132815894076872 556 (3.47577e+167)}
; 1.866596361134526205205474980175495147705078125p-90 - 1.4735802625781264652005120296962559223175048828125p556 == -1.4735802625781262431559071046649478375911712646484375p556
; [HW: -1.4735802625781262431559071046649478375911712646484375p556] 

; mpf : - 2132815894076871 556
; mpfd: - 2132815894076871 556 (-3.47577e+167) class: Neg. norm. non-zero
; hwf : - 2132815894076871 556 (-3.47577e+167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110100101 #b1101110111011001010000100101010111100111110010000000)))
(assert (= y (fp #b0 #b11000101011 #b0111100100111100100011100101101111001101110111001000)))
(assert (= r (fp #b1 #b11000101011 #b0111100100111100100011100101101111001101110111000111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
