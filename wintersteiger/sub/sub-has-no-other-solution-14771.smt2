(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.4039677416416156408018878209986723959445953369140625p-500 {- 1819308970726881 -500 (-4.28903e-151)}
; Y = 1.939060189271810230593473534099757671356201171875p-924 {+ 4229151118482992 -924 (1.36734e-278)}
; -1.4039677416416156408018878209986723959445953369140625p-500 - 1.939060189271810230593473534099757671356201171875p-924 == -1.4039677416416156408018878209986723959445953369140625p-500
; [HW: -1.4039677416416156408018878209986723959445953369140625p-500] 

; mpf : - 1819308970726881 -500
; mpfd: - 1819308970726881 -500 (-4.28903e-151) class: Neg. norm. non-zero
; hwf : - 1819308970726881 -500 (-4.28903e-151) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000001011 #b0110011101101010011011100000111011111101010111100001)))
(assert (= y (fp #b0 #b00001100011 #b1111000001100110001111111010000111100101111000110000)))
(assert (= r (fp #b1 #b01000001011 #b0110011101101010011011100000111011111101010111100001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
