(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6398150971537119868770560060511343181133270263671875p-863 {- 2881471033127475 -863 (-2.6663e-260)}
; Y = -1.3444774209209651161245346884243190288543701171875p-863 {- 1551388384497208 -863 (-2.18609e-260)}
; -1.6398150971537119868770560060511343181133270263671875p-863 - -1.3444774209209651161245346884243190288543701171875p-863 == -1.18135070493098748301008527050726115703582763671875p-865
; [HW: -1.18135070493098748301008527050726115703582763671875p-865] 

; mpf : - 816730967150572 -865
; mpfd: - 816730967150572 -865 (-4.80212e-261) class: Neg. norm. non-zero
; hwf : - 816730967150572 -865 (-4.80212e-261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010100000 #b1010001111001010111011000001010111000011001000110011)))
(assert (= y (fp #b1 #b00010100000 #b0101100000101111101011000001100100010000111000111000)))
(assert (= r (fp #b1 #b00010011110 #b0010111001101100111111111111001011001000111111101100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
