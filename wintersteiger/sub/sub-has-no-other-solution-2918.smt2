(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3599946804737126360151933113229461014270782470703125p-890 {+ 1621271908836773 -890 (1.64756e-268)}
; Y = 1.59635788205919570970081622363068163394927978515625p-490 {+ 2685757135421252 -490 (4.99381e-148)}
; 1.3599946804737126360151933113229461014270782470703125p-890 - 1.59635788205919570970081622363068163394927978515625p-490 == -1.59635788205919570970081622363068163394927978515625p-490
; [HW: -1.59635788205919570970081622363068163394927978515625p-490] 

; mpf : - 2685757135421252 -490
; mpfd: - 2685757135421252 -490 (-4.99381e-148) class: Neg. norm. non-zero
; hwf : - 2685757135421252 -490 (-4.99381e-148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010000101 #b0101110000101000100111001000001101011110010110100101)))
(assert (= y (fp #b0 #b01000010101 #b1001100010101010111010010000000000100111111101000100)))
(assert (= r (fp #b1 #b01000010101 #b1001100010101010111010010000000000100111111101000100)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
