(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0221229326823946248481433940469287335872650146484375p589 {- 99632831384775 589 (-2.07095e+177)}
; Y = -1.6460090224404007042124931103899143636226654052734375p-956 {- 2909365992740567 -956 (-2.70244e-288)}
; -1.0221229326823946248481433940469287335872650146484375p589 - -1.6460090224404007042124931103899143636226654052734375p-956 == -1.022122932682394402803538469015620648860931396484375p589
; [HW: -1.022122932682394402803538469015620648860931396484375p589] 

; mpf : - 99632831384774 589
; mpfd: - 99632831384774 589 (-2.07095e+177) class: Neg. norm. non-zero
; hwf : - 99632831384774 589 (-2.07095e+177) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001001100 #b0000010110101001110110010011100001011100110011000111)))
(assert (= y (fp #b1 #b00001000011 #b1010010101100000110110001110100001001101011011010111)))
(assert (= r (fp #b1 #b11001001100 #b0000010110101001110110010011100001011100110011000110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
