(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0988020222426559957540348477778024971485137939453125p-437 {+ 444964750555477 -437 (3.09607e-132)}
; Y = 1.36146069209135500699403564794920384883880615234375p848 {+ 1627874238211708 848 (2.5553e+255)}
; 1.0988020222426559957540348477778024971485137939453125p-437 - 1.36146069209135500699403564794920384883880615234375p848 == -1.3614606920913547849494307229178957641124725341796875p848
; [HW: -1.3614606920913547849494307229178957641124725341796875p848] 

; mpf : - 1627874238211707 848
; mpfd: - 1627874238211707 848 (-2.5553e+255) class: Neg. norm. non-zero
; hwf : - 1627874238211707 848 (-2.5553e+255) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001001010 #b0001100101001011000101101101111001001111100101010101)))
(assert (= y (fp #b0 #b11101001111 #b0101110010001000101100000001101101010010011001111100)))
(assert (= r (fp #b1 #b11101001111 #b0101110010001000101100000001101101010010011001111011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
