(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.579474325367746789794409778551198542118072509765625p1005 {- 2609720355796954 1005 (-5.41575e+302)}
; Y = 1.0706335643264555113063352109747938811779022216796875p723 {+ 318105293980475 723 (4.72419e+217)}
; -1.579474325367746789794409778551198542118072509765625p1005 - 1.0706335643264555113063352109747938811779022216796875p723 == -1.5794743253677470118390147035825066268444061279296875p1005
; [HW: -1.5794743253677470118390147035825066268444061279296875p1005] 

; mpf : - 2609720355796955 1005
; mpfd: - 2609720355796955 1005 (-5.41575e+302) class: Neg. norm. non-zero
; hwf : - 2609720355796955 1005 (-5.41575e+302) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111101100 #b1001010001011000011011011110110001010011011111011010)))
(assert (= y (fp #b0 #b11011010010 #b0001001000010101000010101001000011001000001100111011)))
(assert (= r (fp #b1 #b11111101100 #b1001010001011000011011011110110001010011011111011011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
