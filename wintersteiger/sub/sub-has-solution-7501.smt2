(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9801355968010170283122306500445120036602020263671875p395 {- 4414138308525619 395 (-1.59788e+119)}
; Y = 1.3241041618477920049912199829122982919216156005859375p-773 {+ 1459635382526943 -773 (2.66523e-233)}
; -1.9801355968010170283122306500445120036602020263671875p395 - 1.3241041618477920049912199829122982919216156005859375p-773 == -1.9801355968010170283122306500445120036602020263671875p395
; [HW: -1.9801355968010170283122306500445120036602020263671875p395] 

; mpf : - 4414138308525619 395
; mpfd: - 4414138308525619 395 (-1.59788e+119) class: Neg. norm. non-zero
; hwf : - 4414138308525619 395 (-1.59788e+119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001010 #b1111101011101010001010101001110111100111111000110011)))
(assert (= y (fp #b0 #b00011111010 #b0101001011111000011111011000011110100010001111011111)))
(assert (= r (fp #b1 #b10110001010 #b1111101011101010001010101001110111100111111000110011)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
