(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0571647300613815634307002255809493362903594970703125p-580 {- 257447057003173 -580 (-2.67144e-175)}
; Y = -1.7576008220028587203387360204942524433135986328125p-806 {- 3411930779667656 -806 (-4.11854e-243)}
; -1.0571647300613815634307002255809493362903594970703125p-580 - -1.7576008220028587203387360204942524433135986328125p-806 == -1.05716473006138134138609530054964125156402587890625p-580
; [HW: -1.05716473006138134138609530054964125156402587890625p-580] 

; mpf : - 257447057003172 -580
; mpfd: - 257447057003172 -580 (-2.67144e-175) class: Neg. norm. non-zero
; hwf : - 257447057003172 -580 (-2.67144e-175) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110111011 #b0000111010100010010110010000011000011001001010100101)))
(assert (= y (fp #b1 #b00011011001 #b1100000111110010001000001010000111101100110011001000)))
(assert (= r (fp #b1 #b00110111011 #b0000111010100010010110010000011000011001001010100100)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
