(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.883934608562444878998576314188539981842041015625p-132 {- 3980887573741712 -132 (-3.46024e-040)}
; Y = 1.2958612754311535919526932048029266297817230224609375p-691 {+ 1332440729785103 -691 (1.26134e-208)}
; -1.883934608562444878998576314188539981842041015625p-132 - 1.2958612754311535919526932048029266297817230224609375p-691 == -1.883934608562444878998576314188539981842041015625p-132
; [HW: -1.883934608562444878998576314188539981842041015625p-132] 

; mpf : - 3980887573741712 -132
; mpfd: - 3980887573741712 -132 (-3.46024e-040) class: Neg. norm. non-zero
; hwf : - 3980887573741712 -132 (-3.46024e-040) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101111011 #b1110001001001001100010011101101110010100000010010000)))
(assert (= y (fp #b0 #b00101001100 #b0100101110111101100100001000011000100001001100001111)))
(assert (= r (fp #b1 #b01101111011 #b1110001001001001100010011101101110010100000010010000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
