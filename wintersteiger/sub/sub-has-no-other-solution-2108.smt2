(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6607005128094363133328670301125384867191314697265625p-611 {- 2975530583292073 -611 (-1.95418e-184)}
; Y = 1.3787264761386259781517082956270314753055572509765625p746 {+ 1705632416813257 746 (5.10334e+224)}
; -1.6607005128094363133328670301125384867191314697265625p-611 - 1.3787264761386259781517082956270314753055572509765625p746 == -1.378726476138626200196313220658339560031890869140625p746
; [HW: -1.378726476138626200196313220658339560031890869140625p746] 

; mpf : - 1705632416813258 746
; mpfd: - 1705632416813258 746 (-5.10334e+224) class: Neg. norm. non-zero
; hwf : - 1705632416813258 746 (-5.10334e+224) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011100 #b1010100100100011101010110011011011110111100010101001)))
(assert (= y (fp #b0 #b11011101001 #b0110000011110100001101111110010100100101000011001001)))
(assert (= r (fp #b1 #b11011101001 #b0110000011110100001101111110010100100101000011001010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
