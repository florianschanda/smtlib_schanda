(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8152481366136345997119860840030014514923095703125p-838 {+ 3671551204267656 -838 (9.90375e-253)}
; Y = 1.890547430984622412353246545535512268543243408203125p574 {+ 4010669078338098 574 (1.16897e+173)}
; 1.8152481366136345997119860840030014514923095703125p-838 - 1.890547430984622412353246545535512268543243408203125p574 == -1.8905474309846221903086416205042041838169097900390625p574
; [HW: -1.8905474309846221903086416205042041838169097900390625p574] 

; mpf : - 4010669078338097 574
; mpfd: - 4010669078338097 574 (-1.16897e+173) class: Neg. norm. non-zero
; hwf : - 4010669078338097 574 (-1.16897e+173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010111001 #b1101000010110100000110100001010011100001011010001000)))
(assert (= y (fp #b0 #b11000111101 #b1110001111111010111010101001101110011101101000110010)))
(assert (= r (fp #b1 #b11000111101 #b1110001111111010111010101001101110011101101000110001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
