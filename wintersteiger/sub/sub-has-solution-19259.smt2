(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5582127767281737096283222854253835976123809814453125p751 {- 2513966853266453 751 (-1.84567e+226)}
; Y = 1.8472691890150996218977752505452372133731842041015625p-571 {+ 3815761203930905 -571 (2.39003e-172)}
; -1.5582127767281737096283222854253835976123809814453125p751 - 1.8472691890150996218977752505452372133731842041015625p-571 == -1.5582127767281737096283222854253835976123809814453125p751
; [HW: -1.5582127767281737096283222854253835976123809814453125p751] 

; mpf : - 2513966853266453 751
; mpfd: - 2513966853266453 751 (-1.84567e+226) class: Neg. norm. non-zero
; hwf : - 2513966853266453 751 (-1.84567e+226) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011101110 #b1000111011100111000010000101010001000001110000010101)))
(assert (= y (fp #b0 #b00111000100 #b1101100011100110101000100011000110111010011100011001)))
(assert (= r (fp #b1 #b11011101110 #b1000111011100111000010000101010001000001110000010101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
