(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8925068188952736125685305523802526295185089111328125p-816 {- 4019493377002381 -816 (-4.33073e-246)}
; Y = 1.204531568573274480371537720202468335628509521484375p856 {+ 921128296012102 856 (5.78755e+257)}
; -1.8925068188952736125685305523802526295185089111328125p-816 - 1.204531568573274480371537720202468335628509521484375p856 == -1.204531568573274480371537720202468335628509521484375p856
; [HW: -1.204531568573274480371537720202468335628509521484375p856] 

; mpf : - 921128296012102 856
; mpfd: - 921128296012102 856 (-5.78755e+257) class: Neg. norm. non-zero
; hwf : - 921128296012102 856 (-5.78755e+257) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001111 #b1110010001111011010100111010111010011100101110001101)))
(assert (= y (fp #b0 #b11101010111 #b0011010001011100001011100100111000000101100101000110)))
(assert (= r (fp #b1 #b11101010111 #b0011010001011100001011100100111000000101100101000110)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
