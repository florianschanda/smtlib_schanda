(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7425052836217200802337856657686643302440643310546875p-514 {+ 3343946518639403 -514 (3.24905e-155)}
; Y = -1.99334087657718583841415238566696643829345703125p-461 {- 4473609601604896 -461 (-3.34775e-139)}
; 1.7425052836217200802337856657686643302440643310546875p-514 - -1.99334087657718583841415238566696643829345703125p-461 == 1.9933408765771860604587573106982745230197906494140625p-461
; [HW: 1.9933408765771860604587573106982745230197906494140625p-461] 

; mpf : + 4473609601604897 -461
; mpfd: + 4473609601604897 -461 (3.34775e-139) class: Pos. norm. non-zero
; hwf : + 4473609601604897 -461 (3.34775e-139) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111111101 #b1011111000010100110100111000011001000011001100101011)))
(assert (= y (fp #b1 #b01000110010 #b1111111001001011100101100111001010101101110100100000)))
(assert (= r (fp #b0 #b01000110010 #b1111111001001011100101100111001010101101110100100001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
