(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.935863092548738340070713093155063688755035400390625p466 {- 4214752674872298 466 (-3.68852e+140)}
; Y = -1.4744228672305863536706738159409724175930023193359375p428 {- 2136610648075711 428 (-1.02202e+129)}
; -1.935863092548738340070713093155063688755035400390625p466 - -1.4744228672305863536706738159409724175930023193359375p428 == -1.935863092543374630594144036876969039440155029296875p466
; [HW: -1.935863092543374630594144036876969039440155029296875p466] 

; mpf : - 4214752674848142 466
; mpfd: - 4214752674848142 466 (-3.68852e+140) class: Neg. norm. non-zero
; hwf : - 4214752674848142 466 (-3.68852e+140) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111010001 #b1110111110010100101110010100000000000111101111101010)))
(assert (= y (fp #b1 #b10110101011 #b0111100101110011110001101110101100111010110110111111)))
(assert (= r (fp #b1 #b10111010001 #b1110111110010100101110010100000000000001110110001110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
