(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.603145276341610969694784216699190437793731689453125p842 {+ 2716324841782354 842 (4.70142e+253)}
; Y = 1.2319195447076995986179781539249233901500701904296875p-780 {+ 1044472775125531 -780 (1.93725e-235)}
; 1.603145276341610969694784216699190437793731689453125p842 - 1.2319195447076995986179781539249233901500701904296875p-780 == 1.603145276341610969694784216699190437793731689453125p842
; [HW: 1.603145276341610969694784216699190437793731689453125p842] 

; mpf : + 2716324841782354 842
; mpfd: + 2716324841782354 842 (4.70142e+253) class: Pos. norm. non-zero
; hwf : + 2716324841782354 842 (4.70142e+253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101001001 #b1001101001100111101110101001010010011111110001010010)))
(assert (= y (fp #b0 #b00011110011 #b0011101101011111000101000100101111010010101000011011)))
(assert (= r (fp #b0 #b11101001001 #b1001101001100111101110101001010010011111110001010010)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
