(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.034656820727075210442080788197927176952362060546875p-136 {+ 156080444912302 -136 (1.18773e-041)}
; Y = 1.15825059161552967879060815903358161449432373046875p-563 {+ 712697305430860 -563 (3.83632e-170)}
; 1.034656820727075210442080788197927176952362060546875p-136 - 1.15825059161552967879060815903358161449432373046875p-563 == 1.034656820727075210442080788197927176952362060546875p-136
; [HW: 1.034656820727075210442080788197927176952362060546875p-136] 

; mpf : + 156080444912302 -136
; mpfd: + 156080444912302 -136 (1.18773e-041) class: Pos. norm. non-zero
; hwf : + 156080444912302 -136 (1.18773e-041) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101110111 #b0000100011011111010001001111011110011011001010101110)))
(assert (= y (fp #b0 #b00111001100 #b0010100010000011000111000101101110001111101101001100)))
(assert (= r (fp #b0 #b01101110111 #b0000100011011111010001001111011110011011001010101110)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
