(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0663700074923159188955423815059475600719451904296875p188 {+ 298903941010971 188 (4.18357e+056)}
; Y = 1.4394352053883168185421936868806369602680206298828125p1007 {+ 1979040227240301 1007 (1.97423e+303)}
; 1.0663700074923159188955423815059475600719451904296875p188 - 1.4394352053883168185421936868806369602680206298828125p1007 == -1.4394352053883168185421936868806369602680206298828125p1007
; [HW: -1.4394352053883168185421936868806369602680206298828125p1007] 

; mpf : - 1979040227240301 1007
; mpfd: - 1979040227240301 1007 (-1.97423e+303) class: Neg. norm. non-zero
; hwf : - 1979040227240301 1007 (-1.97423e+303) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111011 #b0001000011111101100111111111001110011101011000011011)))
(assert (= y (fp #b0 #b11111101110 #b0111000001111110110100110101101111011010100101101101)))
(assert (= r (fp #b1 #b11111101110 #b0111000001111110110100110101101111011010100101101101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
