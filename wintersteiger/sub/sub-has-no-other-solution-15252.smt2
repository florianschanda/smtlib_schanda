(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.77787210723765287667674783733673393726348876953125p992 {- 3503224532297396 992 (-7.44143e+298)}
; Y = -1.4365630964076390174710695646353997290134429931640625p-499 {- 1966105398305153 -499 (-8.77722e-151)}
; -1.77787210723765287667674783733673393726348876953125p992 - -1.4365630964076390174710695646353997290134429931640625p-499 == -1.7778721072376526546321429123054258525371551513671875p992
; [HW: -1.7778721072376526546321429123054258525371551513671875p992] 

; mpf : - 3503224532297395 992
; mpfd: - 3503224532297395 992 (-7.44143e+298) class: Neg. norm. non-zero
; hwf : - 3503224532297395 992 (-7.44143e+298) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111011111 #b1100011100100010101000000101110100001110011010110100)))
(assert (= y (fp #b1 #b01000001100 #b0110111111000010100110010101110110110110000110000001)))
(assert (= r (fp #b1 #b11111011111 #b1100011100100010101000000101110100001110011010110011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
