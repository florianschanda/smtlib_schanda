(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0591774530341961924051474852603860199451446533203125p871 {- 266511555433541 871 (-1.66761e+262)}
; Y = -1.1297627068583520060229830050957389175891876220703125p960 {- 584399278253861 960 (-1.10099e+289)}
; -1.0591774530341961924051474852603860199451446533203125p871 - -1.1297627068583520060229830050957389175891876220703125p960 == 1.1297627068583520060229830050957389175891876220703125p960
; [HW: 1.1297627068583520060229830050957389175891876220703125p960] 

; mpf : + 584399278253861 960
; mpfd: + 584399278253861 960 (1.10099e+289) class: Pos. norm. non-zero
; hwf : + 584399278253861 960 (1.10099e+289) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100110 #b0000111100100110010000001110100101110001010001000101)))
(assert (= y (fp #b1 #b11110111111 #b0010000100111000001000001111011000110010011100100101)))
(assert (= r (fp #b0 #b11110111111 #b0010000100111000001000001111011000110010011100100101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
