(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3624756656341736604787229225621558725833892822265625p-254 {+ 1632445272680937 -254 (4.70663e-077)}
; Y = -1.5351856465289570596866042251349426805973052978515625p-446 {- 2410261878281849 -446 (-8.44856e-135)}
; 1.3624756656341736604787229225621558725833892822265625p-254 - -1.5351856465289570596866042251349426805973052978515625p-446 == 1.3624756656341736604787229225621558725833892822265625p-254
; [HW: 1.3624756656341736604787229225621558725833892822265625p-254] 

; mpf : + 1632445272680937 -254
; mpfd: + 1632445272680937 -254 (4.70663e-077) class: Pos. norm. non-zero
; hwf : + 1632445272680937 -254 (4.70663e-077) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100000001 #b0101110011001011001101001000100101111110100111101001)))
(assert (= y (fp #b1 #b01001000001 #b1000100100000001111011010011000100100001011001111001)))
(assert (= r (fp #b0 #b01100000001 #b0101110011001011001101001000100101111110100111101001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
