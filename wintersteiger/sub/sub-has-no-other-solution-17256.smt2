(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.894614162027346448979869819595478475093841552734375p-232 {- 4028984006746726 -232 (-2.74512e-070)}
; Y = -1.6432801404019035107495483316597528755664825439453125p-37 {- 2897076200608853 -37 (-1.19564e-011)}
; -1.894614162027346448979869819595478475093841552734375p-232 - -1.6432801404019035107495483316597528755664825439453125p-37 == 1.6432801404019035107495483316597528755664825439453125p-37
; [HW: 1.6432801404019035107495483316597528755664825439453125p-37] 

; mpf : + 2897076200608853 -37
; mpfd: + 2897076200608853 -37 (1.19564e-011) class: Pos. norm. non-zero
; hwf : + 2897076200608853 -37 (1.19564e-011) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100010111 #b1110010100000101011011110000100001110010001001100110)))
(assert (= y (fp #b1 #b01111011010 #b1010010010101110000000011101110100110001010001010101)))
(assert (= r (fp #b0 #b01111011010 #b1010010010101110000000011101110100110001010001010101)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
