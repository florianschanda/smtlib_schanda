(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.462102365260672609537095922860316932201385498046875p1011 {- 2081124039994990 1011 (-3.20851e+304)}
; Y = -1.6370522203626600710180127862258814275264739990234375p-723 {- 2869028142240823 -723 (-3.71002e-218)}
; -1.462102365260672609537095922860316932201385498046875p1011 - -1.6370522203626600710180127862258814275264739990234375p-723 == -1.4621023652606723874924909978290088474750518798828125p1011
; [HW: -1.4621023652606723874924909978290088474750518798828125p1011] 

; mpf : - 2081124039994989 1011
; mpfd: - 2081124039994989 1011 (-3.20851e+304) class: Neg. norm. non-zero
; hwf : - 2081124039994989 1011 (-3.20851e+304) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111110010 #b0111011001001100010101110011001000110010111001101110)))
(assert (= y (fp #b1 #b00100101100 #b1010001100010101110110101011010001001101010000110111)))
(assert (= r (fp #b1 #b11111110010 #b0111011001001100010101110011001000110010111001101101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
