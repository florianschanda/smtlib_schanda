(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3047017631958823802307279038359411060810089111328125p869 {- 1372254747188109 869 (-5.13544e+261)}
; Y = 1.0832468291559542716839814602280966937541961669921875p-196 {+ 374910388766531 -196 (1.07857e-059)}
; -1.3047017631958823802307279038359411060810089111328125p869 - 1.0832468291559542716839814602280966937541961669921875p-196 == -1.304701763195882602275332828867249190807342529296875p869
; [HW: -1.304701763195882602275332828867249190807342529296875p869] 

; mpf : - 1372254747188110 869
; mpfd: - 1372254747188110 869 (-5.13544e+261) class: Neg. norm. non-zero
; hwf : - 1372254747188110 869 (-5.13544e+261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101100100 #b0100111000000000111011110100101111110101101110001101)))
(assert (= y (fp #b0 #b01100111011 #b0001010101001111101010100000100010111000011101000011)))
(assert (= r (fp #b1 #b11101100100 #b0100111000000000111011110100101111110101101110001110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
