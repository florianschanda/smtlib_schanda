(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.08293277861873615819376936997286975383758544921875p617 {- 373496030884140 617 (-5.88991e+185)}
; Y = -1.7395660907382393123299380022217519581317901611328125p-913 {- 3330709570664589 -913 (-2.5122e-275)}
; -1.08293277861873615819376936997286975383758544921875p617 - -1.7395660907382393123299380022217519581317901611328125p-913 == -1.08293277861873615819376936997286975383758544921875p617
; [HW: -1.08293277861873615819376936997286975383758544921875p617] 

; mpf : - 373496030884140 617
; mpfd: - 373496030884140 617 (-5.88991e+185) class: Neg. norm. non-zero
; hwf : - 373496030884140 617 (-5.88991e+185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001101000 #b0001010100111011000101010010001111101111000100101100)))
(assert (= y (fp #b1 #b00001101110 #b1011110101010100001101000000110011110011100010001101)))
(assert (= r (fp #b1 #b11001101000 #b0001010100111011000101010010001111101111000100101100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
