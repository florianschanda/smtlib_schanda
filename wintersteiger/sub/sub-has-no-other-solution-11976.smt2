(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9943979157598337170753666214295662939548492431640625p-915 {- 4478370082873985 -915 (-7.20055e-276)}
; Y = -1.8130128232859956671774170899880118668079376220703125p-479 {- 3661484247998245 -479 (-1.16154e-144)}
; -1.9943979157598337170753666214295662939548492431640625p-915 - -1.8130128232859956671774170899880118668079376220703125p-479 == 1.81301282328599544513281216495670378208160400390625p-479
; [HW: 1.81301282328599544513281216495670378208160400390625p-479] 

; mpf : + 3661484247998244 -479
; mpfd: + 3661484247998244 -479 (1.16154e-144) class: Pos. norm. non-zero
; hwf : + 3661484247998244 -479 (1.16154e-144) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001101100 #b1111111010010000110111001001111101100110001010000001)))
(assert (= y (fp #b1 #b01000100000 #b1101000000100001100110111011111100111101111100100101)))
(assert (= r (fp #b0 #b01000100000 #b1101000000100001100110111011111100111101111100100100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
