(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1091930557353586461744043845101259648799896240234375p-262 {- 491761805121207 -262 (-1.49675e-079)}
; Y = 1.6145245395748013539360954382573254406452178955078125p599 {+ 2767572487439101 599 (3.34975e+180)}
; -1.1091930557353586461744043845101259648799896240234375p-262 - 1.6145245395748013539360954382573254406452178955078125p599 == -1.614524539574801575980700363288633525371551513671875p599
; [HW: -1.614524539574801575980700363288633525371551513671875p599] 

; mpf : - 2767572487439102 599
; mpfd: - 2767572487439102 599 (-3.34975e+180) class: Neg. norm. non-zero
; hwf : - 2767572487439102 599 (-3.34975e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111001 #b0001101111110100000100110111101101010101011010110111)))
(assert (= y (fp #b0 #b11001010110 #b1001110101010001011110101111000000010000001011111101)))
(assert (= r (fp #b1 #b11001010110 #b1001110101010001011110101111000000010000001011111110)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
