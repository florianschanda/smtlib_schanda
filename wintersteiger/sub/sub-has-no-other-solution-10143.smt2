(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.92593672841086327451876059058122336864471435546875p-686 {- 4170048305039820 -686 (-5.99881e-207)}
; Y = -1.829203577287314974597620675922371447086334228515625p-163 {- 3734400921685434 -163 (-1.56449e-049)}
; -1.92593672841086327451876059058122336864471435546875p-686 - -1.829203577287314974597620675922371447086334228515625p-163 == 1.829203577287314974597620675922371447086334228515625p-163
; [HW: 1.829203577287314974597620675922371447086334228515625p-163] 

; mpf : + 3734400921685434 -163
; mpfd: + 3734400921685434 -163 (1.56449e-049) class: Pos. norm. non-zero
; hwf : + 3734400921685434 -163 (1.56449e-049) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010001 #b1110110100001010001100000111111010110000100111001100)))
(assert (= y (fp #b1 #b01101011100 #b1101010001000110101011111000011000101100110110111010)))
(assert (= r (fp #b0 #b01101011100 #b1101010001000110101011111000011000101100110110111010)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
