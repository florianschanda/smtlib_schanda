(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7892872154405783380326511178282089531421661376953125p162 {- 3554633609346485 162 (-1.04602e+049)}
; Y = -1.5532385114045148544192898043547756969928741455078125p-974 {- 2491564753808381 -974 (-9.72797e-294)}
; -1.7892872154405783380326511178282089531421661376953125p162 - -1.5532385114045148544192898043547756969928741455078125p-974 == -1.7892872154405783380326511178282089531421661376953125p162
; [HW: -1.7892872154405783380326511178282089531421661376953125p162] 

; mpf : - 3554633609346485 162
; mpfd: - 3554633609346485 162 (-1.04602e+049) class: Neg. norm. non-zero
; hwf : - 3554633609346485 162 (-1.04602e+049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010100001 #b1100101000001110101110100001100101110111110110110101)))
(assert (= y (fp #b1 #b00000110001 #b1000110110100001000010100000000101011110101111111101)))
(assert (= r (fp #b1 #b10010100001 #b1100101000001110101110100001100101110111110110110101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
