(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7997535624266933762527287399279884994029998779296875p-706 {- 3601769845733083 -706 (-5.34609e-213)}
; Y = -1.154686687459530514132666212390176951885223388671875p360 {- 696646908001918 360 (-2.71183e+108)}
; -1.7997535624266933762527287399279884994029998779296875p-706 - -1.154686687459530514132666212390176951885223388671875p360 == 1.154686687459530514132666212390176951885223388671875p360
; [HW: 1.154686687459530514132666212390176951885223388671875p360] 

; mpf : + 696646908001918 360
; mpfd: + 696646908001918 360 (2.71183e+108) class: Pos. norm. non-zero
; hwf : + 696646908001918 360 (2.71183e+108) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100111101 #b1100110010111100101001100100001101111011011011011011)))
(assert (= y (fp #b1 #b10101100111 #b0010011110011001100010111111011111000011111001111110)))
(assert (= r (fp #b0 #b10101100111 #b0010011110011001100010111111011111000011111001111110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
