(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.1718558184416867362642733496613800525665283203125p-182 {+ 773969799895432 -182 (1.91168e-055)}
; Y = -1.6315264935469613316598724850337021052837371826171875p-12 {- 2844142481012691 -12 (-0.000398322)}
; 1.1718558184416867362642733496613800525665283203125p-182 - -1.6315264935469613316598724850337021052837371826171875p-12 == 1.6315264935469613316598724850337021052837371826171875p-12
; [HW: 1.6315264935469613316598724850337021052837371826171875p-12] 

; mpf : + 2844142481012691 -12
; mpfd: + 2844142481012691 -12 (0.000398322) class: Pos. norm. non-zero
; hwf : + 2844142481012691 -12 (0.000398322) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101001001 #b0010101111111110101111100010111111010101100110001000)))
(assert (= y (fp #b1 #b01111110011 #b1010000110101011101110000110010001010111011111010011)))
(assert (= r (fp #b0 #b01111110011 #b1010000110101011101110000110010001010111011111010011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
