(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6284545069316915810730961311492137610912322998046875p596 {- 2830307483236875 596 (-4.22331e+179)}
; Y = -1.5943609253209969356390729444683529436588287353515625p-685 {- 2676763641799225 -685 (-9.93207e-207)}
; -1.6284545069316915810730961311492137610912322998046875p596 - -1.5943609253209969356390729444683529436588287353515625p-685 == -1.6284545069316915810730961311492137610912322998046875p596
; [HW: -1.6284545069316915810730961311492137610912322998046875p596] 

; mpf : - 2830307483236875 596
; mpfd: - 2830307483236875 596 (-4.22331e+179) class: Neg. norm. non-zero
; hwf : - 2830307483236875 596 (-4.22331e+179) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001010011 #b1010000011100010011001010000001001001011101000001011)))
(assert (= y (fp #b1 #b00101010010 #b1001100000101000000010011010000001000110001000111001)))
(assert (= r (fp #b1 #b11001010011 #b1010000011100010011001010000001001001011101000001011)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
