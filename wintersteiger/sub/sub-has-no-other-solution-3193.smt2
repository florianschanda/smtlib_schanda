(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.04273319610260362111375798122026026248931884765625p764 {+ 192453206044036 764 (1.01179e+230)}
; Y = -1.4861268862064982432258375411038286983966827392578125p-996 {- 2189320863574365 -996 (-2.21912e-300)}
; 1.04273319610260362111375798122026026248931884765625p764 - -1.4861268862064982432258375411038286983966827392578125p-996 == 1.04273319610260362111375798122026026248931884765625p764
; [HW: 1.04273319610260362111375798122026026248931884765625p764] 

; mpf : + 192453206044036 764
; mpfd: + 192453206044036 764 (1.01179e+230) class: Pos. norm. non-zero
; hwf : + 192453206044036 764 (1.01179e+230) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011111011 #b0000101011110000100100000000111110110110110110000100)))
(assert (= y (fp #b1 #b00000011011 #b0111110001110010110011111100010111110110100101011101)))
(assert (= r (fp #b0 #b11011111011 #b0000101011110000100100000000111110110110110110000100)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
