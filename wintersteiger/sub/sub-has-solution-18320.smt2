(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.576157362553787688597140004276297986507415771484375p-436 {- 2594782083304006 -436 (-8.88222e-132)}
; Y = 1.223804012159393383996075499453581869602203369140625p-166 {+ 1007923665765066 -166 (1.30838e-050)}
; -1.576157362553787688597140004276297986507415771484375p-436 - 1.223804012159393383996075499453581869602203369140625p-166 == -1.223804012159393383996075499453581869602203369140625p-166
; [HW: -1.223804012159393383996075499453581869602203369140625p-166] 

; mpf : - 1007923665765066 -166
; mpfd: - 1007923665765066 -166 (-1.30838e-050) class: Neg. norm. non-zero
; hwf : - 1007923665765066 -166 (-1.30838e-050) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001001011 #b1001001101111111000011001000010110000100101001000110)))
(assert (= y (fp #b0 #b01101011001 #b0011100101001011001110000100000011110000001011001010)))
(assert (= r (fp #b1 #b01101011001 #b0011100101001011001110000100000011110000001011001010)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
