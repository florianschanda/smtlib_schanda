(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1294332398924549210050827241502702236175537109375p-995 {+ 582915490949016 -995 (3.37299e-300)}
; Y = 1.874409808101062946406045739422552287578582763671875p585 {+ 3937991685933054 585 (2.37362e+176)}
; 1.1294332398924549210050827241502702236175537109375p-995 - 1.874409808101062946406045739422552287578582763671875p585 == -1.8744098081010627243614408143912442028522491455078125p585
; [HW: -1.8744098081010627243614408143912442028522491455078125p585] 

; mpf : - 3937991685933053 585
; mpfd: - 3937991685933053 585 (-2.37362e+176) class: Neg. norm. non-zero
; hwf : - 3937991685933053 585 (-2.37362e+176) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000011100 #b0010000100100010100010010110110001011010011110011000)))
(assert (= y (fp #b0 #b11001001000 #b1101111111011001010100100011100100011000011111111110)))
(assert (= r (fp #b1 #b11001001000 #b1101111111011001010100100011100100011000011111111101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
