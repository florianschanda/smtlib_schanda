(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.891179076056931140925598811008967459201812744140625p69 {- 4013513754850378 69 (-1.11636e+021)}
; Y = -1.9255733959285297185459739921498112380504608154296875p-377 {- 4168412001007771 -377 (-6.25535e-114)}
; -1.891179076056931140925598811008967459201812744140625p69 - -1.9255733959285297185459739921498112380504608154296875p-377 == -1.891179076056931140925598811008967459201812744140625p69
; [HW: -1.891179076056931140925598811008967459201812744140625p69] 

; mpf : - 4013513754850378 69
; mpfd: - 4013513754850378 69 (-1.11636e+021) class: Neg. norm. non-zero
; hwf : - 4013513754850378 69 (-1.11636e+021) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000100 #b1110010000100100010011111101101010001011010001001010)))
(assert (= y (fp #b1 #b01010000110 #b1110110011110010011000001100100110001111100010011011)))
(assert (= r (fp #b1 #b10001000100 #b1110010000100100010011111101101010001011010001001010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
