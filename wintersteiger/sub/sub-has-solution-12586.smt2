(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6200890452691203424961940982029773294925689697265625p-873 {+ 2792632793210537 -873 (2.57248e-263)}
; Y = 1.0914859763604114473167783216922543942928314208984375p-770 {+ 412016209046375 -770 (1.75761e-232)}
; 1.6200890452691203424961940982029773294925689697265625p-873 - 1.0914859763604114473167783216922543942928314208984375p-770 == -1.0914859763604114473167783216922543942928314208984375p-770
; [HW: -1.0914859763604114473167783216922543942928314208984375p-770] 

; mpf : - 412016209046375 -770
; mpfd: - 412016209046375 -770 (-1.75761e-232) class: Neg. norm. non-zero
; hwf : - 412016209046375 -770 (-1.75761e-232) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010010110 #b1001111010111110001001111101101000001001111010101001)))
(assert (= y (fp #b0 #b00011111101 #b0001011101101011100111111111110010000010101101100111)))
(assert (= r (fp #b1 #b00011111101 #b0001011101101011100111111111110010000010101101100111)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
