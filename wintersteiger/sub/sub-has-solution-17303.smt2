(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4561584725549774343988929103943519294261932373046875p143 {- 2054355127020491 143 (-1.62367e+043)}
; Y = 1.9335659434628909014719511105795390903949737548828125p-276 {+ 4204407235105261 -276 (1.5925e-083)}
; -1.4561584725549774343988929103943519294261932373046875p143 - 1.9335659434628909014719511105795390903949737548828125p-276 == -1.45615847255497765644349783542566001415252685546875p143
; [HW: -1.45615847255497765644349783542566001415252685546875p143] 

; mpf : - 2054355127020492 143
; mpfd: - 2054355127020492 143 (-1.62367e+043) class: Neg. norm. non-zero
; hwf : - 2054355127020492 143 (-1.62367e+043) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001110 #b0111010011000110110011010011100101101010101111001011)))
(assert (= y (fp #b0 #b01011101011 #b1110111011111110001011010111101111010101000111101101)))
(assert (= r (fp #b1 #b10010001110 #b0111010011000110110011010011100101101010101111001100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
