(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.143289053860826687269991452922113239765167236328125p-1011 {- 645316529573890 -1011 (-5.20991e-305)}
; Y = 1.2906436301336763339264734895550645887851715087890625p-241 {+ 1308942544367633 -241 (3.65239e-073)}
; -1.143289053860826687269991452922113239765167236328125p-1011 - 1.2906436301336763339264734895550645887851715087890625p-241 == -1.290643630133676555971078414586372673511505126953125p-241
; [HW: -1.290643630133676555971078414586372673511505126953125p-241] 

; mpf : - 1308942544367634 -241
; mpfd: - 1308942544367634 -241 (-3.65239e-073) class: Neg. norm. non-zero
; hwf : - 1308942544367634 -241 (-3.65239e-073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001100 #b0010010010101110100101110110100000110101000000000010)))
(assert (= y (fp #b0 #b01100001110 #b0100101001100111100111101111011000110111000000010001)))
(assert (= r (fp #b1 #b01100001110 #b0100101001100111100111101111011000110111000000010010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
