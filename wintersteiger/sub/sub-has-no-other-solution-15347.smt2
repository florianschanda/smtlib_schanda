(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0057912530181123411665566891315393149852752685546875p-623 {- 26081484934379 -623 (-2.88949e-188)}
; Y = 1.9877491876237998180698696160106919705867767333984375p-23 {+ 4448426873318055 -23 (2.36958e-007)}
; -1.0057912530181123411665566891315393149852752685546875p-623 - 1.9877491876237998180698696160106919705867767333984375p-23 == -1.9877491876238000401144745410420000553131103515625p-23
; [HW: -1.9877491876238000401144745410420000553131103515625p-23] 

; mpf : - 4448426873318056 -23
; mpfd: - 4448426873318056 -23 (-2.36958e-007) class: Neg. norm. non-zero
; hwf : - 4448426873318056 -23 (-2.36958e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110010000 #b0000000101111011100010010001101001010000110011101011)))
(assert (= y (fp #b0 #b01111101000 #b1111110011011101001000010111100101111110101010100111)))
(assert (= r (fp #b1 #b01111101000 #b1111110011011101001000010111100101111110101010101000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
