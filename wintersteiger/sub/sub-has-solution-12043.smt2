(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.436979169514511323058059133472852408885955810546875p834 {- 1967979224994222 834 (-1.64614e+251)}
; Y = 1.3030375979894674998149639577604830265045166015625p419 {+ 1364760013384616 419 (1.76411e+126)}
; -1.436979169514511323058059133472852408885955810546875p834 - 1.3030375979894674998149639577604830265045166015625p419 == -1.4369791695145115451026640585041604936122894287109375p834
; [HW: -1.4369791695145115451026640585041604936122894287109375p834] 

; mpf : - 1967979224994223 834
; mpfd: - 1967979224994223 834 (-1.64614e+251) class: Neg. norm. non-zero
; hwf : - 1967979224994223 834 (-1.64614e+251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000001 #b0110111111011101110111011110101000011001000110101110)))
(assert (= y (fp #b0 #b10110100010 #b0100110110010011110111110011110011010010101110101000)))
(assert (= r (fp #b1 #b11101000001 #b0110111111011101110111011110101000011001000110101111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
