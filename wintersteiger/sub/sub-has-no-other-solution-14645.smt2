(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.161623073156820229456798188039101660251617431640625p539 {- 727885612043530 539 (-2.09042e+162)}
; Y = -1.6707976201539203042756298600579611957073211669921875p-528 {- 3021003912166211 -528 (-1.90146e-159)}
; -1.161623073156820229456798188039101660251617431640625p539 - -1.6707976201539203042756298600579611957073211669921875p-528 == -1.161623073156820229456798188039101660251617431640625p539
; [HW: -1.161623073156820229456798188039101660251617431640625p539] 

; mpf : - 727885612043530 539
; mpfd: - 727885612043530 539 (-2.09042e+162) class: Neg. norm. non-zero
; hwf : - 727885612043530 539 (-2.09042e+162) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000011010 #b0010100101100000001000010011010101111100110100001010)))
(assert (= y (fp #b1 #b00111101111 #b1010101110111001011001001001000011001011101101000011)))
(assert (= r (fp #b1 #b11000011010 #b0010100101100000001000010011010101111100110100001010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
