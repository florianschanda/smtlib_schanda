(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0891914993223161811641830354346893727779388427734375p111 {+ 401682803112599 111 (2.8277e+033)}
; Y = -1.148450835785438162162108710617758333683013916015625p-532 {- 668563128726138 -532 (-8.16873e-161)}
; 1.0891914993223161811641830354346893727779388427734375p111 - -1.148450835785438162162108710617758333683013916015625p-532 == 1.0891914993223161811641830354346893727779388427734375p111
; [HW: 1.0891914993223161811641830354346893727779388427734375p111] 

; mpf : + 401682803112599 111
; mpfd: + 401682803112599 111 (2.8277e+033) class: Pos. norm. non-zero
; hwf : + 401682803112599 111 (2.8277e+033) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001101110 #b0001011011010101010000010000110010101011101010010111)))
(assert (= y (fp #b1 #b00111101011 #b0010011000000000110111111011110011000011001001111010)))
(assert (= r (fp #b0 #b10001101110 #b0001011011010101010000010000110010101011101010010111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
