(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3347635857780708601438846017117612063884735107421875p160 {+ 1507641160167331 160 (1.95076e+048)}
; Y = -1.1963443393928676616866368931368924677371978759765625p466 {- 884256293726025 466 (-2.27947e+140)}
; 1.3347635857780708601438846017117612063884735107421875p160 - -1.1963443393928676616866368931368924677371978759765625p466 == 1.1963443393928676616866368931368924677371978759765625p466
; [HW: 1.1963443393928676616866368931368924677371978759765625p466] 

; mpf : + 884256293726025 466
; mpfd: + 884256293726025 466 (2.27947e+140) class: Pos. norm. non-zero
; hwf : + 884256293726025 466 (2.27947e+140) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010011111 #b0101010110110011000100001111110011001110111110100011)))
(assert (= y (fp #b1 #b10111010001 #b0011001001000011100111110110010001110010011101001001)))
(assert (= r (fp #b0 #b10111010001 #b0011001001000011100111110110010001110010011101001001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
