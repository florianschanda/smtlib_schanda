(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.590693127486047853125228357384912669658660888671875p-720 {+ 2660245348836478 -720 (2.88396e-217)}
; Y = -1.8660671428593842424703552751452662050724029541015625p628 {- 3900419661859353 628 (-2.07857e+189)}
; 1.590693127486047853125228357384912669658660888671875p-720 - -1.8660671428593842424703552751452662050724029541015625p628 == 1.866067142859384464514960200176574289798736572265625p628
; [HW: 1.866067142859384464514960200176574289798736572265625p628] 

; mpf : + 3900419661859354 628
; mpfd: + 3900419661859354 628 (2.07857e+189) class: Pos. norm. non-zero
; hwf : + 3900419661859354 628 (2.07857e+189) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100101111 #b1001011100110111101010100011000010000110010001111110)))
(assert (= y (fp #b1 #b11001110011 #b1101110110110110100100111000011010111000101000011001)))
(assert (= r (fp #b0 #b11001110011 #b1101110110110110100100111000011010111000101000011010)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
