(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.46376276242516301095974995405413210391998291015625p-915 {+ 2088601804046276 -915 (5.28475e-276)}
; Y = 1.65679028504117464848377494490705430507659912109375p982 {+ 2957920482971996 982 (6.7721e+295)}
; 1.46376276242516301095974995405413210391998291015625p-915 - 1.65679028504117464848377494490705430507659912109375p982 == -1.6567902850411744264391700198757462203502655029296875p982
; [HW: -1.6567902850411744264391700198757462203502655029296875p982] 

; mpf : - 2957920482971995 982
; mpfd: - 2957920482971995 982 (-6.7721e+295) class: Neg. norm. non-zero
; hwf : - 2957920482971995 982 (-6.7721e+295) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101100 #b0111011010111001001010000000100110110111111111000100)))
(assert (= y (fp #b0 #b11111010101 #b1010100000100011011010000111101010010101000101011100)))
(assert (= r (fp #b1 #b11111010101 #b1010100000100011011010000111101010010101000101011011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
