(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1566331393122479820334547184756956994533538818359375p302 {- 705412947840511 302 (-9.42441e+090)}
; Y = 1.0632318975051422427213765331543982028961181640625p71 {+ 284771150042088 71 (2.51049e+021)}
; -1.1566331393122479820334547184756956994533538818359375p302 - 1.0632318975051422427213765331543982028961181640625p71 == -1.1566331393122479820334547184756956994533538818359375p302
; [HW: -1.1566331393122479820334547184756956994533538818359375p302] 

; mpf : - 705412947840511 302
; mpfd: - 705412947840511 302 (-9.42441e+090) class: Neg. norm. non-zero
; hwf : - 705412947840511 302 (-9.42441e+090) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100101101 #b0010100000011001000111000000001011010000110111111111)))
(assert (= y (fp #b0 #b10001000110 #b0001000000101111111101110011001111011001001111101000)))
(assert (= r (fp #b1 #b10100101101 #b0010100000011001000111000000001011010000110111111111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
