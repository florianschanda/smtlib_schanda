(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.561088681835943514641940055298618972301483154296875p-930 {+ 2526918778438158 -930 (1.72001e-280)}
; Y = 1.8839209974632991073661969494423829019069671630859375p328 {+ 3980826274800671 328 (1.03015e+099)}
; 1.561088681835943514641940055298618972301483154296875p-930 - 1.8839209974632991073661969494423829019069671630859375p328 == -1.8839209974632991073661969494423829019069671630859375p328
; [HW: -1.8839209974632991073661969494423829019069671630859375p328] 

; mpf : - 3980826274800671 328
; mpfd: - 3980826274800671 328 (-1.03015e+099) class: Neg. norm. non-zero
; hwf : - 3980826274800671 328 (-1.03015e+099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011101 #b1000111110100011100000100000001010100100001000001110)))
(assert (= y (fp #b0 #b10101000111 #b1110001001001000101001011000000001011010010000011111)))
(assert (= r (fp #b1 #b10101000111 #b1110001001001000101001011000000001011010010000011111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
