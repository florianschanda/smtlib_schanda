(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5919261993943176758392610281589441001415252685546875p275 {+ 2665798611023083 275 (9.66433e+082)}
; Y = -1.15652864661797938339304891997016966342926025390625p710 {- 704942354581540 710 (-6.2295e+213)}
; 1.5919261993943176758392610281589441001415252685546875p275 - -1.15652864661797938339304891997016966342926025390625p710 == 1.15652864661797938339304891997016966342926025390625p710
; [HW: 1.15652864661797938339304891997016966342926025390625p710] 

; mpf : + 704942354581540 710
; mpfd: + 704942354581540 710 (6.2295e+213) class: Pos. norm. non-zero
; hwf : + 704942354581540 710 (6.2295e+213) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010010 #b1001011110001000011110011011010000001011010011101011)))
(assert (= y (fp #b1 #b11011000101 #b0010100000010010010000101110101000011100100000100100)))
(assert (= r (fp #b0 #b11011000101 #b0010100000010010010000101110101000011100100000100100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
