(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0256622664755907781142241219640709459781646728515625p218 {- 115572573736953 218 (-4.32059e+065)}
; Y = 1.4706723155349241682898764338460750877857208251953125p325 {+ 2119719664856693 325 (1.00523e+098)}
; -1.0256622664755907781142241219640709459781646728515625p218 - 1.4706723155349241682898764338460750877857208251953125p325 == -1.470672315534924390334481358877383172512054443359375p325
; [HW: -1.470672315534924390334481358877383172512054443359375p325] 

; mpf : - 2119719664856694 325
; mpfd: - 2119719664856694 325 (-1.00523e+098) class: Neg. norm. non-zero
; hwf : - 2119719664856694 325 (-1.00523e+098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011011001 #b0000011010010001110011010110001101000000111111111001)))
(assert (= y (fp #b0 #b10101000100 #b0111100001111101111110110001101001011010111001110101)))
(assert (= r (fp #b1 #b10101000100 #b0111100001111101111110110001101001011010111001110110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
