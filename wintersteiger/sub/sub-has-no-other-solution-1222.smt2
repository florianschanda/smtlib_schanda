(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9234109884274130930492674451670609414577484130859375p-697 {+ 4158673383391519 -697 (2.92526e-210)}
; Y = 1.379781501970045898275429863133467733860015869140625p719 {+ 1710383830754506 719 (3.8052e+216)}
; 1.9234109884274130930492674451670609414577484130859375p-697 - 1.379781501970045898275429863133467733860015869140625p719 == -1.379781501970045898275429863133467733860015869140625p719
; [HW: -1.379781501970045898275429863133467733860015869140625p719] 

; mpf : - 1710383830754506 719
; mpfd: - 1710383830754506 719 (-3.8052e+216) class: Neg. norm. non-zero
; hwf : - 1710383830754506 719 (-3.8052e+216) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101000110 #b1110110001100100101010011001110000010000000100011111)))
(assert (= y (fp #b0 #b11011001110 #b0110000100111001010111000100101010010110010011001010)))
(assert (= r (fp #b1 #b11011001110 #b0110000100111001010111000100101010010110010011001010)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
