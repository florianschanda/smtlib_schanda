(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2946915311187698893746755857137031853199005126953125p539 {+ 1327172669735733 539 (2.32988e+162)}
; Y = 1.853237471884135789679248773609288036823272705078125p886 {+ 3842639960435938 886 (9.56109e+266)}
; 1.2946915311187698893746755857137031853199005126953125p539 - 1.853237471884135789679248773609288036823272705078125p886 == -1.853237471884135789679248773609288036823272705078125p886
; [HW: -1.853237471884135789679248773609288036823272705078125p886] 

; mpf : - 3842639960435938 886
; mpfd: - 3842639960435938 886 (-9.56109e+266) class: Neg. norm. non-zero
; hwf : - 3842639960435938 886 (-9.56109e+266) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000011010 #b0100101101110000111001110111100010010000001100110101)))
(assert (= y (fp #b0 #b11101110101 #b1101101001101101110001010101110101110110110011100010)))
(assert (= r (fp #b1 #b11101110101 #b1101101001101101110001010101110101110110110011100010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
