(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.319053239773047447869203097070567309856414794921875p-409 {- 1436888051753246 -409 (-9.97687e-124)}
; Y = -1.9320778220812411252182982934755273163318634033203125p-764 {- 4197705332205381 -764 (-1.99117e-230)}
; -1.319053239773047447869203097070567309856414794921875p-409 - -1.9320778220812411252182982934755273163318634033203125p-764 == -1.319053239773047447869203097070567309856414794921875p-409
; [HW: -1.319053239773047447869203097070567309856414794921875p-409] 

; mpf : - 1436888051753246 -409
; mpfd: - 1436888051753246 -409 (-9.97687e-124) class: Neg. norm. non-zero
; hwf : - 1436888051753246 -409 (-9.97687e-124) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001100110 #b0101000110101101011110010001111010000010000100011110)))
(assert (= y (fp #b1 #b00100000011 #b1110111010011100101001101111001100101010011101000101)))
(assert (= r (fp #b1 #b01001100110 #b0101000110101101011110010001111010000010000100011110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
