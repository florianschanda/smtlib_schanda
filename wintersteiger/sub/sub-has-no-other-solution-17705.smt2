(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.410419713661860807718539945199154317378997802734375p860 {- 1848366069513062 860 (-1.08429e+259)}
; Y = -1.8297017254690448595511043095029890537261962890625p-348 {- 3736644381651048 -348 (-3.19111e-105)}
; -1.410419713661860807718539945199154317378997802734375p860 - -1.8297017254690448595511043095029890537261962890625p-348 == -1.410419713661860807718539945199154317378997802734375p860
; [HW: -1.410419713661860807718539945199154317378997802734375p860] 

; mpf : - 1848366069513062 860
; mpfd: - 1848366069513062 860 (-1.08429e+259) class: Neg. norm. non-zero
; hwf : - 1848366069513062 860 (-1.08429e+259) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101011011 #b0110100100010001010001000010111111001111101101100110)))
(assert (= y (fp #b1 #b01010100011 #b1101010001100111010101010001000001010011000001101000)))
(assert (= r (fp #b1 #b11101011011 #b0110100100010001010001000010111111001111101101100110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
