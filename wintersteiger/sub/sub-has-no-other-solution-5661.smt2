(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.134404911562818529802143530105240643024444580078125p-658 {- 605305909631074 -658 (-9.48486e-199)}
; Y = -1.5994251767813054687650264895637519657611846923828125p-218 {- 2699571002788781 -218 (-3.79686e-066)}
; -1.134404911562818529802143530105240643024444580078125p-658 - -1.5994251767813054687650264895637519657611846923828125p-218 == 1.59942517678130524672042156453244388103485107421875p-218
; [HW: 1.59942517678130524672042156453244388103485107421875p-218] 

; mpf : + 2699571002788780 -218
; mpfd: + 2699571002788780 -218 (3.79686e-066) class: Pos. norm. non-zero
; hwf : + 2699571002788780 -218 (3.79686e-066) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101101101 #b0010001001101000010111000011101110010101100001100010)))
(assert (= y (fp #b1 #b01100100101 #b1001100101110011111011011010101010101100101110101101)))
(assert (= r (fp #b0 #b01100100101 #b1001100101110011111011011010101010101100101110101100)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
