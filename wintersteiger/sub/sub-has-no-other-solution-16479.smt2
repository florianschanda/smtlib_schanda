(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.143351136952557300929811390233226120471954345703125p-477 {- 645596126962674 -477 (-2.93003e-144)}
; Y = -1.3441867465867665121237450875923968851566314697265625p-102 {- 1550079303674025 -102 (-2.65094e-031)}
; -1.143351136952557300929811390233226120471954345703125p-477 - -1.3441867465867665121237450875923968851566314697265625p-102 == 1.3441867465867665121237450875923968851566314697265625p-102
; [HW: 1.3441867465867665121237450875923968851566314697265625p-102] 

; mpf : + 1550079303674025 -102
; mpfd: + 1550079303674025 -102 (2.65094e-031) class: Pos. norm. non-zero
; hwf : + 1550079303674025 -102 (2.65094e-031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000100010 #b0010010010110010101010001111110100001110001111110010)))
(assert (= y (fp #b1 #b01110011001 #b0101100000011100100111110110010001001110100010101001)))
(assert (= r (fp #b0 #b01110011001 #b0101100000011100100111110110010001001110100010101001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
