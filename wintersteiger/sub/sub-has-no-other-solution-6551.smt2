(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0285774925677702018589343424537219107151031494140625p445 {- 128701584879393 445 (-9.34512e+133)}
; Y = -1.1335335510527693170246266163303516805171966552734375p16 {- 601381650762711 16 (-74287.3)}
; -1.0285774925677702018589343424537219107151031494140625p445 - -1.1335335510527693170246266163303516805171966552734375p16 == -1.0285774925677702018589343424537219107151031494140625p445
; [HW: -1.0285774925677702018589343424537219107151031494140625p445] 

; mpf : - 128701584879393 445
; mpfd: - 128701584879393 445 (-9.34512e+133) class: Neg. norm. non-zero
; hwf : - 128701584879393 445 (-9.34512e+133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110111100 #b0000011101010000110110101100001111111010111100100001)))
(assert (= y (fp #b1 #b10000001111 #b0010001000101111010000010011101010110000101111010111)))
(assert (= r (fp #b1 #b10110111100 #b0000011101010000110110101100001111111010111100100001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
