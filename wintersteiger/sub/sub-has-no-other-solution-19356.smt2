(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1267472107343967646642113322741352021694183349609375p-145 {- 570818691033679 -145 (-2.52625e-044)}
; Y = -1.640429739608795234317994982120580971240997314453125p-758 {- 2884239136659154 -758 (-1.08198e-228)}
; -1.1267472107343967646642113322741352021694183349609375p-145 - -1.640429739608795234317994982120580971240997314453125p-758 == -1.126747210734396542619606407242827117443084716796875p-145
; [HW: -1.126747210734396542619606407242827117443084716796875p-145] 

; mpf : - 570818691033678 -145
; mpfd: - 570818691033678 -145 (-2.52625e-044) class: Neg. norm. non-zero
; hwf : - 570818691033678 -145 (-2.52625e-044) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101101110 #b0010000001110010100000010101010011110110101001001111)))
(assert (= y (fp #b1 #b00100001001 #b1010001111110011001101000001001100000001011011010010)))
(assert (= r (fp #b1 #b01101101110 #b0010000001110010100000010101010011110110101001001110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
