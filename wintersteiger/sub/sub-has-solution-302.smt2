(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7258738835300706515596402823575772345066070556640625p283 {+ 3269045351384001 283 (2.68224e+085)}
; Y = -1.330162068171634626168042814242653548717498779296875p98 {- 1486917767189646 98 (-4.21545e+029)}
; 1.7258738835300706515596402823575772345066070556640625p283 - -1.330162068171634626168042814242653548717498779296875p98 == 1.7258738835300706515596402823575772345066070556640625p283
; [HW: 1.7258738835300706515596402823575772345066070556640625p283] 

; mpf : + 3269045351384001 283
; mpfd: + 3269045351384001 283 (2.68224e+085) class: Pos. norm. non-zero
; hwf : + 3269045351384001 283 (2.68224e+085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011010 #b1011100111010010110111101110111011001000001111000001)))
(assert (= y (fp #b1 #b10001100001 #b0101010010000101100000000101010100101101010010001110)))
(assert (= r (fp #b0 #b10100011010 #b1011100111010010110111101110111011001000001111000001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
