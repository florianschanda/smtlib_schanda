(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9204895578372518372134436503984034061431884765625p374 {- 4145516429674280 374 (-7.38976e+112)}
; Y = -1.4865006766638588775464313584961928427219390869140625p841 {- 2191004266138849 841 (-2.17967e+253)}
; -1.9204895578372518372134436503984034061431884765625p374 - -1.4865006766638588775464313584961928427219390869140625p841 == 1.48650067666385865550182643346488475799560546875p841
; [HW: 1.48650067666385865550182643346488475799560546875p841] 

; mpf : + 2191004266138848 841
; mpfd: + 2191004266138848 841 (2.17967e+253) class: Pos. norm. non-zero
; hwf : + 2191004266138848 841 (2.17967e+253) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101110101 #b1110101110100101001101000010001100111000011100101000)))
(assert (= y (fp #b1 #b11101001000 #b0111110010001011010011101110111111000000110011100001)))
(assert (= r (fp #b0 #b11101001000 #b0111110010001011010011101110111111000000110011100000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
