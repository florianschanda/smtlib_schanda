(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2977769416716513628529128254740498960018157958984375p-741 {- 1341068123551975 -741 (-1.12195e-223)}
; Y = 1.1106002403426329383506754311383701860904693603515625p285 {+ 498099201194169 285 (6.90409e+085)}
; -1.2977769416716513628529128254740498960018157958984375p-741 - 1.1106002403426329383506754311383701860904693603515625p285 == -1.1106002403426329383506754311383701860904693603515625p285
; [HW: -1.1106002403426329383506754311383701860904693603515625p285] 

; mpf : - 498099201194169 285
; mpfd: - 498099201194169 285 (-6.90409e+085) class: Neg. norm. non-zero
; hwf : - 498099201194169 285 (-6.90409e+085) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011010 #b0100110000111011000111000001000111111011100011100111)))
(assert (= y (fp #b0 #b10100011100 #b0001110001010000010011000001111100110011100010111001)))
(assert (= r (fp #b1 #b10100011100 #b0001110001010000010011000001111100110011100010111001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
