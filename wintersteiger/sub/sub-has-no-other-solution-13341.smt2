(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.626472914819572679334669373929500579833984375p364 {+ 2821383185739136 364 (6.11175e+109)}
; Y = -1.7221700653423994697988064217497594654560089111328125p-431 {- 3252364837174157 -431 (-3.10562e-130)}
; 1.626472914819572679334669373929500579833984375p364 - -1.7221700653423994697988064217497594654560089111328125p-431 == 1.6264729148195729013792742989608086645603179931640625p364
; [HW: 1.6264729148195729013792742989608086645603179931640625p364] 

; mpf : + 2821383185739137 364
; mpfd: + 2821383185739137 364 (6.11175e+109) class: Pos. norm. non-zero
; hwf : + 2821383185739137 364 (6.11175e+109) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101011 #b1010000001100000100001110110100011111010110110000000)))
(assert (= y (fp #b1 #b01001010000 #b1011100011100000001000110010110011001011101110001101)))
(assert (= r (fp #b0 #b10101101011 #b1010000001100000100001110110100011111010110110000001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
