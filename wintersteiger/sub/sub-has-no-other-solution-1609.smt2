(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.8131331676113811024464439469738863408565521240234375p-316 {- 3662026230657207 -316 (-1.35816e-095)}
; Y = -1.9030083116098388540393671064521186053752899169921875p729 {- 4066787895678531 729 (-5.37412e+219)}
; -1.8131331676113811024464439469738863408565521240234375p-316 - -1.9030083116098388540393671064521186053752899169921875p729 == 1.9030083116098388540393671064521186053752899169921875p729
; [HW: 1.9030083116098388540393671064521186053752899169921875p729] 

; mpf : + 4066787895678531 729
; mpfd: + 4066787895678531 729 (5.37412e+219) class: Pos. norm. non-zero
; hwf : + 4066787895678531 729 (5.37412e+219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011000011 #b1101000000101001011111101100101000101111000010110111)))
(assert (= y (fp #b1 #b11011011000 #b1110011100101011100011010111111001100001011001000011)))
(assert (= r (fp #b0 #b11011011000 #b1110011100101011100011010111111001100001011001000011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
