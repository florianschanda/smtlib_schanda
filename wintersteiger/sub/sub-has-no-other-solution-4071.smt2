(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8008943551176421760118273596162907779216766357421875p-397 {+ 3606907519270947 -397 (5.5793e-120)}
; Y = 1.37680764085364604198957749758847057819366455078125p435 {+ 1696990750938836 435 (1.22158e+131)}
; 1.8008943551176421760118273596162907779216766357421875p-397 - 1.37680764085364604198957749758847057819366455078125p435 == -1.3768076408536458199449725725571624934673309326171875p435
; [HW: -1.3768076408536458199449725725571624934673309326171875p435] 

; mpf : - 1696990750938835 435
; mpfd: - 1696990750938835 435 (-1.22158e+131) class: Neg. norm. non-zero
; hwf : - 1696990750938835 435 (-1.22158e+131) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001110010 #b1100110100000111011010011001011011001000000000100011)))
(assert (= y (fp #b0 #b10110110010 #b0110000001110110011101110010111001011001011011010100)))
(assert (= r (fp #b1 #b10110110010 #b0110000001110110011101110010111001011001011011010011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
