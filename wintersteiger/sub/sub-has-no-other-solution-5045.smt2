(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7742520178579168632637674818397499620914459228515625p229 {- 3486921099115769 229 (-1.53068e+069)}
; Y = 1.5802542645867827530992144602350890636444091796875p194 {+ 2613232889773176 194 (3.96777e+058)}
; -1.7742520178579168632637674818397499620914459228515625p229 - 1.5802542645867827530992144602350890636444091796875p194 == -1.774252017903908296148074441589415073394775390625p229
; [HW: -1.774252017903908296148074441589415073394775390625p229] 

; mpf : - 3486921099322896 229
; mpfd: - 3486921099322896 229 (-1.53068e+069) class: Neg. norm. non-zero
; hwf : - 3486921099322896 229 (-1.53068e+069) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011100100 #b1100011000110101011000010101011110001111110011111001)))
(assert (= y (fp #b0 #b10011000001 #b1001010010001011100010110010000111000011110001111000)))
(assert (= r (fp #b1 #b10011100100 #b1100011000110101011000010101011111000010011000010000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
