(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5249471355623775981058543038670904934406280517578125p-523 {- 2364151724107933 -523 (-5.5535e-158)}
; Y = 1.883525952652223001138054314651526510715484619140625p-681 {+ 3979047151136714 -681 (1.87735e-205)}
; -1.5249471355623775981058543038670904934406280517578125p-523 - 1.883525952652223001138054314651526510715484619140625p-681 == -1.5249471355623775981058543038670904934406280517578125p-523
; [HW: -1.5249471355623775981058543038670904934406280517578125p-523] 

; mpf : - 2364151724107933 -523
; mpfd: - 2364151724107933 -523 (-5.5535e-158) class: Neg. norm. non-zero
; hwf : - 2364151724107933 -523 (-5.5535e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110100 #b1000011001100010111011110111101101011110100010011101)))
(assert (= y (fp #b0 #b00101010110 #b1110001000101110110000011011111111001110111111001010)))
(assert (= r (fp #b1 #b00111110100 #b1000011001100010111011110111101101011110100010011101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
