(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.08682047775818002577352672233246266841888427734375p727 {- 391004671279868 727 (-7.67299e+218)}
; Y = -1.7765108165144438689964090372086502611637115478515625p24 {- 3497093823903609 24 (-2.98049e+007)}
; -1.08682047775818002577352672233246266841888427734375p727 - -1.7765108165144438689964090372086502611637115478515625p24 == -1.0868204777581798037289217973011545836925506591796875p727
; [HW: -1.0868204777581798037289217973011545836925506591796875p727] 

; mpf : - 391004671279867 727
; mpfd: - 391004671279867 727 (-7.67299e+218) class: Neg. norm. non-zero
; hwf : - 391004671279867 727 (-7.67299e+218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010110 #b0001011000111001110111011110100010011000001011111100)))
(assert (= y (fp #b1 #b10000010111 #b1100011011001001011010011011000111101011011101111001)))
(assert (= r (fp #b1 #b11011010110 #b0001011000111001110111011110100010011000001011111011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
