(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2331189525807653151190379503532312810420989990234375p-921 {- 1049874427975735 -921 (-6.95631e-278)}
; Y = 1.908712029055205317007448684307746589183807373046875p259 {+ 4092475155440110 259 (1.76811e+078)}
; -1.2331189525807653151190379503532312810420989990234375p-921 - 1.908712029055205317007448684307746589183807373046875p259 == -1.9087120290552055390520536093390546739101409912109375p259
; [HW: -1.9087120290552055390520536093390546739101409912109375p259] 

; mpf : - 4092475155440111 259
; mpfd: - 4092475155440111 259 (-1.76811e+078) class: Neg. norm. non-zero
; hwf : - 4092475155440111 259 (-1.76811e+078) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001100110 #b0011101110101101101011110000010101101001100000110111)))
(assert (= y (fp #b0 #b10100000010 #b1110100010100001010110011111111001000110000111101110)))
(assert (= r (fp #b1 #b10100000010 #b1110100010100001010110011111111001000110000111101111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
