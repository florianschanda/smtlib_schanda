(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4531114012513193234354957894538529217243194580078125p607 {- 2040632337832765 607 (-7.71803e+182)}
; Y = -1.1876689743852419933745068192365579307079315185546875p-562 {- 845185923110379 -562 (-7.86752e-170)}
; -1.4531114012513193234354957894538529217243194580078125p607 - -1.1876689743852419933745068192365579307079315185546875p-562 == -1.45311140125131910139089086442254483699798583984375p607
; [HW: -1.45311140125131910139089086442254483699798583984375p607] 

; mpf : - 2040632337832764 607
; mpfd: - 2040632337832764 607 (-7.71803e+182) class: Neg. norm. non-zero
; hwf : - 2040632337832764 607 (-7.71803e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011110 #b0111001111111111000110111101100111010001101100111101)))
(assert (= y (fp #b1 #b00111001101 #b0011000000001011000100101110101101110101010111101011)))
(assert (= r (fp #b1 #b11001011110 #b0111001111111111000110111101100111010001101100111100)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
