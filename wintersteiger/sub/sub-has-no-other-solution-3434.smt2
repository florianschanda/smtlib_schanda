(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5147323814192217295016007483354769647121429443359375p516 {- 2318148561155135 516 (-3.24948e+155)}
; Y = -1.0280642603249556810141029927763156592845916748046875p-242 {- 126390192341899 -242 (-1.45466e-073)}
; -1.5147323814192217295016007483354769647121429443359375p516 - -1.0280642603249556810141029927763156592845916748046875p-242 == -1.514732381419221507456995823304168879985809326171875p516
; [HW: -1.514732381419221507456995823304168879985809326171875p516] 

; mpf : - 2318148561155134 516
; mpfd: - 2318148561155134 516 (-3.24948e+155) class: Neg. norm. non-zero
; hwf : - 2318148561155134 516 (-3.24948e+155) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000000011 #b1000001111000101100000000101100001100011010000111111)))
(assert (= y (fp #b1 #b01100001101 #b0000011100101111001110000010100001001000001110001011)))
(assert (= r (fp #b1 #b11000000011 #b1000001111000101100000000101100001100011010000111110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
