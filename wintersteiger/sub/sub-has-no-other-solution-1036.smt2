(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0103597121525715873957551593775860965251922607421875p778 {- 46655995789987 778 (-1.60625e+234)}
; Y = 1.3569416154554669873277816805057227611541748046875p568 {+ 1607522126358264 568 (1.31099e+171)}
; -1.0103597121525715873957551593775860965251922607421875p778 - 1.3569416154554669873277816805057227611541748046875p568 == -1.0103597121525715873957551593775860965251922607421875p778
; [HW: -1.0103597121525715873957551593775860965251922607421875p778] 

; mpf : - 46655995789987 778
; mpfd: - 46655995789987 778 (-1.60625e+234) class: Neg. norm. non-zero
; hwf : - 46655995789987 778 (-1.60625e+234) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100001001 #b0000001010100110111011110010000011100100001010100011)))
(assert (= y (fp #b0 #b11000110111 #b0101101101100000100001101001010011110110011011111000)))
(assert (= r (fp #b1 #b11100001001 #b0000001010100110111011110010000011100100001010100011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
