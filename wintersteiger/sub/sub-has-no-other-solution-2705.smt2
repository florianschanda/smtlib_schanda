(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7012367678259627812309418004588223993778228759765625p-786 {+ 3158089646279497 -786 (4.18011e-237)}
; Y = 1.3736679321685125731988819097750820219516754150390625p-293 {+ 1682850760074417 -293 (8.63163e-089)}
; 1.7012367678259627812309418004588223993778228759765625p-786 - 1.3736679321685125731988819097750820219516754150390625p-293 == -1.3736679321685125731988819097750820219516754150390625p-293
; [HW: -1.3736679321685125731988819097750820219516754150390625p-293] 

; mpf : - 1682850760074417 -293
; mpfd: - 1682850760074417 -293 (-8.63163e-089) class: Neg. norm. non-zero
; hwf : - 1682850760074417 -293 (-8.63163e-089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00011101101 #b1011001110000100010000001011100010010000101101001001)))
(assert (= y (fp #b0 #b01011011010 #b0101111110101000101100111001110000111010010010110001)))
(assert (= r (fp #b1 #b01011011010 #b0101111110101000101100111001110000111010010010110001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
