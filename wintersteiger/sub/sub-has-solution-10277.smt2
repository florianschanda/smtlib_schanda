(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.728393009918167688709900176036171615123748779296875p377 {+ 3280390488046734 377 (5.32048e+113)}
; Y = -1.9575130096299624415934204080258496105670928955078125p958 {- 4312255233371901 958 (-4.76914e+288)}
; 1.728393009918167688709900176036171615123748779296875p377 - -1.9575130096299624415934204080258496105670928955078125p958 == 1.9575130096299624415934204080258496105670928955078125p958
; [HW: 1.9575130096299624415934204080258496105670928955078125p958] 

; mpf : + 4312255233371901 958
; mpfd: + 4312255233371901 958 (4.76914e+288) class: Pos. norm. non-zero
; hwf : + 4312255233371901 958 (4.76914e+288) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101111000 #b1011101001110111111101101101110000111011110010001110)))
(assert (= y (fp #b1 #b11110111101 #b1111010100011111100100101001010111011010111011111101)))
(assert (= r (fp #b0 #b11110111101 #b1111010100011111100100101001010111011010111011111101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
