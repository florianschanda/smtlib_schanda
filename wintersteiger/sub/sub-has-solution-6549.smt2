(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3592086978870965285892680185497738420963287353515625p439 {- 1617732157952569 439 (-1.92954e+132)}
; Y = 1.9809274086319046404014443396590650081634521484375p-432 {+ 4417704311992152 -432 (1.78612e-130)}
; -1.3592086978870965285892680185497738420963287353515625p439 - 1.9809274086319046404014443396590650081634521484375p-432 == -1.359208697887096750633872943581081926822662353515625p439
; [HW: -1.359208697887096750633872943581081926822662353515625p439] 

; mpf : - 1617732157952570 439
; mpfd: - 1617732157952570 439 (-1.92954e+132) class: Neg. norm. non-zero
; hwf : - 1617732157952570 439 (-1.92954e+132) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110110110 #b0101101111110101000110011110100111011101001000111001)))
(assert (= y (fp #b0 #b01001001111 #b1111101100011110000011110000001111010010111101011000)))
(assert (= r (fp #b1 #b10110110110 #b0101101111110101000110011110100111011101001000111010)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
