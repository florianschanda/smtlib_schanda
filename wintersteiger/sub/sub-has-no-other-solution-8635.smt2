(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.84027093898009841410612352774478495121002197265625p-284 {- 3784243887681028 -284 (-5.92056e-086)}
; Y = 1.0535767772651976059705702937208116054534912109375p443 {+ 241288354127256 443 (2.39306e+133)}
; -1.84027093898009841410612352774478495121002197265625p-284 - 1.0535767772651976059705702937208116054534912109375p443 == -1.0535767772651976059705702937208116054534912109375p443
; [HW: -1.0535767772651976059705702937208116054534912109375p443] 

; mpf : - 241288354127256 443
; mpfd: - 241288354127256 443 (-2.39306e+133) class: Neg. norm. non-zero
; hwf : - 241288354127256 443 (-2.39306e+133) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100011 #b1101011100011011111111110000101010110010111000000100)))
(assert (= y (fp #b0 #b10110111010 #b0000110110110111001101010010101000101101110110011000)))
(assert (= r (fp #b1 #b10110111010 #b0000110110110111001101010010101000101101110110011000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
