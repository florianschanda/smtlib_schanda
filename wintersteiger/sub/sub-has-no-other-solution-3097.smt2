(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0826773292223161870850844934466294944286346435546875p-732 {+ 372345589077611 -732 (4.79228e-221)}
; Y = 1.05632092172951530528735020197927951812744140625p-797 {+ 253646882114208 -797 (1.26733e-240)}
; 1.0826773292223161870850844934466294944286346435546875p-732 - 1.05632092172951530528735020197927951812744140625p-797 == 1.082677329222315965040479568415321409702301025390625p-732
; [HW: 1.082677329222315965040479568415321409702301025390625p-732] 

; mpf : + 372345589077610 -732
; mpfd: + 372345589077610 -732 (4.79228e-221) class: Pos. norm. non-zero
; hwf : + 372345589077610 -732 (4.79228e-221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100100011 #b0001010100101010010101110110100100100001011001101011)))
(assert (= y (fp #b0 #b00011100010 #b0000111001101011000011000100010011101000101010100000)))
(assert (= r (fp #b0 #b00100100011 #b0001010100101010010101110110100100100001011001101010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
