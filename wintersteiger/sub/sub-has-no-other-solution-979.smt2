(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9959420867966375379154442271101288497447967529296875p853 {+ 4485324410979931 853 (1.19877e+257)}
; Y = 1.1050277815449367491140719721443019807338714599609375p-672 {+ 473003077829327 -672 (5.63918e-203)}
; 1.9959420867966375379154442271101288497447967529296875p853 - 1.1050277815449367491140719721443019807338714599609375p-672 == 1.995942086796637315870839302078820765018463134765625p853
; [HW: 1.995942086796637315870839302078820765018463134765625p853] 

; mpf : + 4485324410979930 853
; mpfd: + 4485324410979930 853 (1.19877e+257) class: Pos. norm. non-zero
; hwf : + 4485324410979930 853 (1.19877e+257) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010100 #b1111111011110110000011111000001110000000011001011011)))
(assert (= y (fp #b0 #b00101011111 #b0001101011100011000110011100011011101000001011001111)))
(assert (= r (fp #b0 #b11101010100 #b1111111011110110000011111000001110000000011001011010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
