(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0028345921012815633588388664065860211849212646484375p-410 {+ 12765867931079 -410 (3.79255e-124)}
; Y = 1.20598288823855259721540278405882418155670166015625p301 {+ 927664458715844 301 (4.91326e+090)}
; 1.0028345921012815633588388664065860211849212646484375p-410 - 1.20598288823855259721540278405882418155670166015625p301 == -1.2059828882385523751707978590275160968303680419921875p301
; [HW: -1.2059828882385523751707978590275160968303680419921875p301] 

; mpf : - 927664458715843 301
; mpfd: - 927664458715843 301 (-4.91326e+090) class: Neg. norm. non-zero
; hwf : - 927664458715843 301 (-4.91326e+090) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100101 #b0000000010111001110001001001000001011111010111000111)))
(assert (= y (fp #b0 #b10100101100 #b0011010010111011010010110110100010000101001011000100)))
(assert (= r (fp #b1 #b10100101100 #b0011010010111011010010110110100010000101001011000011)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
