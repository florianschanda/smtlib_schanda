(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4469119888068100454603381876950152218341827392578125p-59 {- 2012712666257757 -59 (-2.50999e-018)}
; Y = 1.2114085777184726566702011041343212127685546875p760 {+ 952099591835840 760 (7.34662e+228)}
; -1.4469119888068100454603381876950152218341827392578125p-59 - 1.2114085777184726566702011041343212127685546875p760 == -1.2114085777184728787148060291656292974948883056640625p760
; [HW: -1.2114085777184728787148060291656292974948883056640625p760] 

; mpf : - 952099591835841 760
; mpfd: - 952099591835841 760 (-7.34662e+228) class: Neg. norm. non-zero
; hwf : - 952099591835841 760 (-7.34662e+228) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111000100 #b0111001001101000110100101111100000011101100101011101)))
(assert (= y (fp #b0 #b11011110111 #b0011011000011110110111110101111101100101000011000000)))
(assert (= r (fp #b1 #b11011110111 #b0011011000011110110111110101111101100101000011000001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
