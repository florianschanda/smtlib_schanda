(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.18287675502496103518978998181410133838653564453125p-274 {- 823603685785140 -274 (-3.89691e-083)}
; Y = -1.25118727230817849971344912773929536342620849609375p799 {- 1131246905967324 799 (-4.17147e+240)}
; -1.18287675502496103518978998181410133838653564453125p-274 - -1.25118727230817849971344912773929536342620849609375p799 == 1.25118727230817849971344912773929536342620849609375p799
; [HW: 1.25118727230817849971344912773929536342620849609375p799] 

; mpf : + 1131246905967324 799
; mpfd: + 1131246905967324 799 (4.17147e+240) class: Pos. norm. non-zero
; hwf : + 1131246905967324 799 (4.17147e+240) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011101101 #b0010111011010001000000101101001000000111111000110100)))
(assert (= y (fp #b1 #b11100011110 #b0100000001001101110011110001111110111100001011011100)))
(assert (= r (fp #b0 #b11100011110 #b0100000001001101110011110001111110111100001011011100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
