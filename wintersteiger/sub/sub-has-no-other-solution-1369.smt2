(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8011902873758398602177521752309985458850860595703125p-142 {- 3608240279678693 -142 (-3.23073e-043)}
; Y = 1.8871374236672850965845782411633990705013275146484375p720 {+ 3995311770654407 720 (1.04088e+217)}
; -1.8011902873758398602177521752309985458850860595703125p-142 - 1.8871374236672850965845782411633990705013275146484375p720 == -1.8871374236672850965845782411633990705013275146484375p720
; [HW: -1.8871374236672850965845782411633990705013275146484375p720] 

; mpf : - 3995311770654407 720
; mpfd: - 3995311770654407 720 (-1.04088e+217) class: Neg. norm. non-zero
; hwf : - 3995311770654407 720 (-1.04088e+217) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101110001 #b1100110100011010110011101000001000100110111011100101)))
(assert (= y (fp #b0 #b11011001111 #b1110001100011011011100000010110110110101011011000111)))
(assert (= r (fp #b1 #b11011001111 #b1110001100011011011100000010110110110101011011000111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
