(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9393247137530764678814421131392009556293487548828125p-242 {- 4230342430838253 -242 (-2.74405e-073)}
; Y = 1.0214572548173439514584970311261713504791259765625p-493 {+ 96634884799784 -493 (3.99422e-149)}
; -1.9393247137530764678814421131392009556293487548828125p-242 - 1.0214572548173439514584970311261713504791259765625p-493 == -1.9393247137530764678814421131392009556293487548828125p-242
; [HW: -1.9393247137530764678814421131392009556293487548828125p-242] 

; mpf : - 4230342430838253 -242
; mpfd: - 4230342430838253 -242 (-2.74405e-073) class: Neg. norm. non-zero
; hwf : - 4230342430838253 -242 (-2.74405e-073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100001101 #b1111000001110111100101011001110111100100110111101101)))
(assert (= y (fp #b0 #b01000010010 #b0000010101111110001110001111111110110011110100101000)))
(assert (= r (fp #b1 #b01100001101 #b1111000001110111100101011001110111100100110111101101)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
