(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.907950542078391098499423605971969664096832275390625p-431 {+ 4089045722975082 -431 (3.44064e-130)}
; Y = -1.766460525132048875462942305603064596652984619140625p-458 {- 3451831335378890 -458 (-2.37337e-138)}
; 1.907950542078391098499423605971969664096832275390625p-431 - -1.766460525132048875462942305603064596652984619140625p-458 == 1.907950555239547707486735816928558051586151123046875p-431
; [HW: 1.907950555239547707486735816928558051586151123046875p-431] 

; mpf : + 4089045782247662 -431
; mpfd: + 4089045782247662 -431 (3.44064e-130) class: Pos. norm. non-zero
; hwf : + 4089045782247662 -431 (3.44064e-130) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001010000 #b1110100001101111011100100101110010011100101101101010)))
(assert (= y (fp #b1 #b01000110101 #b1100010000110110110000011100100100011101111111001010)))
(assert (= r (fp #b0 #b01001010000 #b1110100001101111011100101001010100100011100011101110)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
