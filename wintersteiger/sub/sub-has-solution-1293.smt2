(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0511631686431417431748513990896753966808319091796875p-366 {- 230418427236347 -366 (-6.99345e-111)}
; Y = -1.794007968813506881389230329659767448902130126953125p-181 {- 3575893992477714 -181 (-5.85322e-055)}
; -1.0511631686431417431748513990896753966808319091796875p-366 - -1.794007968813506881389230329659767448902130126953125p-181 == 1.7940079688135066593446254046284593641757965087890625p-181
; [HW: 1.7940079688135066593446254046284593641757965087890625p-181] 

; mpf : + 3575893992477713 -181
; mpfd: + 3575893992477713 -181 (5.85322e-055) class: Pos. norm. non-zero
; hwf : + 3575893992477713 -181 (5.85322e-055) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010010001 #b0000110100011001000001111000100000010100111111111011)))
(assert (= y (fp #b1 #b01101001010 #b1100101101000100000110110011001011010001010000010010)))
(assert (= r (fp #b0 #b01101001010 #b1100101101000100000110110011001011010001010000010001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
