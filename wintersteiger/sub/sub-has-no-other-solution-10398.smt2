(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.069961787593513680150181244243867695331573486328125p-572 {- 315079880536322 -572 (-6.92167e-173)}
; Y = 1.12264176799842374521176679991185665130615234375p434 {+ 552329420657760 434 (4.98034e+130)}
; -1.069961787593513680150181244243867695331573486328125p-572 - 1.12264176799842374521176679991185665130615234375p434 == -1.1226417679984239672563717249431647360324859619140625p434
; [HW: -1.1226417679984239672563717249431647360324859619140625p434] 

; mpf : - 552329420657761 434
; mpfd: - 552329420657761 434 (-4.98034e+130) class: Neg. norm. non-zero
; hwf : - 552329420657761 434 (-4.98034e+130) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111000011 #b0001000111101001000001000000010110101111000100000010)))
(assert (= y (fp #b0 #b10110110001 #b0001111101100101011100110110111010101101010001100000)))
(assert (= r (fp #b1 #b10110110001 #b0001111101100101011100110110111010101101010001100001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
