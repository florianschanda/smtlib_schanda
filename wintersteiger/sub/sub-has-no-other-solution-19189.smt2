(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.746077659687554461953595819068141281604766845703125p672 {+ 3360035070158322 672 (3.42153e+202)}
; Y = -1.4773445666180518021093348579597659409046173095703125p1012 {- 2149768812348389 1012 (-6.48392e+304)}
; 1.746077659687554461953595819068141281604766845703125p672 - -1.4773445666180518021093348579597659409046173095703125p1012 == 1.4773445666180518021093348579597659409046173095703125p1012
; [HW: 1.4773445666180518021093348579597659409046173095703125p1012] 

; mpf : + 2149768812348389 1012
; mpfd: + 2149768812348389 1012 (6.48392e+304) class: Pos. norm. non-zero
; hwf : + 2149768812348389 1012 (6.48392e+304) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010011111 #b1011111011111110111100100000110010100010010111110010)))
(assert (= y (fp #b1 #b11111110011 #b0111101000110011010000001110011010001100001111100101)))
(assert (= r (fp #b0 #b11111110011 #b0111101000110011010000001110011010001100001111100101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
