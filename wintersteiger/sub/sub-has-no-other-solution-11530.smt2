(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8921850651732043946395833700080402195453643798828125p-31 {- 4018044327059565 -31 (-8.81117e-010)}
; Y = -1.3497462031613167710020206868648529052734375p-486 {- 1575116870231552 -486 (-6.75576e-147)}
; -1.8921850651732043946395833700080402195453643798828125p-31 - -1.3497462031613167710020206868648529052734375p-486 == -1.8921850651732043946395833700080402195453643798828125p-31
; [HW: -1.8921850651732043946395833700080402195453643798828125p-31] 

; mpf : - 4018044327059565 -31
; mpfd: - 4018044327059565 -31 (-8.81117e-010) class: Neg. norm. non-zero
; hwf : - 4018044327059565 -31 (-8.81117e-010) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100000 #b1110010001100110001111011000110011100110000001101101)))
(assert (= y (fp #b1 #b01000011001 #b0101100110001000111101111001100001111010011000000000)))
(assert (= r (fp #b1 #b01111100000 #b1110010001100110001111011000110011100110000001101101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
