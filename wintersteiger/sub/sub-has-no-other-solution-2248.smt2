(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0890631714871121804577569491812027990818023681640625p-171 {- 401104865921793 -171 (-3.63851e-052)}
; Y = 1.7838864606642268473279955287580378353595733642578125p-33 {+ 3530310772148189 -33 (2.07672e-010)}
; -1.0890631714871121804577569491812027990818023681640625p-171 - 1.7838864606642268473279955287580378353595733642578125p-33 == -1.7838864606642268473279955287580378353595733642578125p-33
; [HW: -1.7838864606642268473279955287580378353595733642578125p-33] 

; mpf : - 3530310772148189 -33
; mpfd: - 3530310772148189 -33 (-2.07672e-010) class: Neg. norm. non-zero
; hwf : - 3530310772148189 -33 (-2.07672e-010) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101010100 #b0001011011001100110110000001000011010000101100000001)))
(assert (= y (fp #b0 #b01111011110 #b1100100010101100110010000111100001010100011111011101)))
(assert (= r (fp #b1 #b01111011110 #b1100100010101100110010000111100001010100011111011101)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
