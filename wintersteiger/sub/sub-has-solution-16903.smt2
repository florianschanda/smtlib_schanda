(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.557764337156523293259624551865272223949432373046875p395 {- 2511947260978670 395 (-1.25704e+119)}
; Y = 1.0863245633739568862807800542213954031467437744140625p-411 {+ 388771271443873 -411 (2.05415e-124)}
; -1.557764337156523293259624551865272223949432373046875p395 - 1.0863245633739568862807800542213954031467437744140625p-411 == -1.557764337156523293259624551865272223949432373046875p395
; [HW: -1.557764337156523293259624551865272223949432373046875p395] 

; mpf : - 2511947260978670 395
; mpfd: - 2511947260978670 395 (-1.25704e+119) class: Neg. norm. non-zero
; hwf : - 2511947260978670 395 (-1.25704e+119) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110001010 #b1000111011001001101001001100001011110110010111101110)))
(assert (= y (fp #b0 #b01001100100 #b0001011000011001010111011101100010001000010110100001)))
(assert (= r (fp #b1 #b10110001010 #b1000111011001001101001001100001011110110010111101110)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
