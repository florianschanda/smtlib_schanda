(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0806595262032085980052897866698913276195526123046875p-116 {+ 363258212152651 -116 (1.3008e-035)}
; Y = -1.89436991313709146567134666838683187961578369140625p730 {- 4027884007535588 730 (-1.06995e+220)}
; 1.0806595262032085980052897866698913276195526123046875p-116 - -1.89436991313709146567134666838683187961578369140625p730 == 1.8943699131370916877159515934181399643421173095703125p730
; [HW: 1.8943699131370916877159515934181399643421173095703125p730] 

; mpf : + 4027884007535589 730
; mpfd: + 4027884007535589 730 (1.06995e+220) class: Pos. norm. non-zero
; hwf : + 4027884007535589 730 (1.06995e+220) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001011 #b0001010010100110000110100100101100100111010101001011)))
(assert (= y (fp #b1 #b11011011001 #b1110010011110101011011010011011101110011001111100100)))
(assert (= r (fp #b0 #b11011011001 #b1110010011110101011011010011011101110011001111100101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
