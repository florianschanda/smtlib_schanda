(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9517351545337773277566384422243572771549224853515625p-814 {- 4286234087313721 -814 (-1.78651e-245)}
; Y = 1.9186114756291570149215885976445861160755157470703125p495 {+ 4137058299341733 495 (1.96261e+149)}
; -1.9517351545337773277566384422243572771549224853515625p-814 - 1.9186114756291570149215885976445861160755157470703125p495 == -1.9186114756291570149215885976445861160755157470703125p495
; [HW: -1.9186114756291570149215885976445861160755157470703125p495] 

; mpf : - 4137058299341733 495
; mpfd: - 4137058299341733 495 (-1.96261e+149) class: Neg. norm. non-zero
; hwf : - 4137058299341733 495 (-1.96261e+149) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010001 #b1111001110100100111010100100001100101101000100111001)))
(assert (= y (fp #b0 #b10111101110 #b1110101100101010000111110010010110001110101110100101)))
(assert (= r (fp #b1 #b10111101110 #b1110101100101010000111110010010110001110101110100101)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
