(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0283869957960523056073043335345573723316192626953125p-352 {- 127843663689269 -352 (-1.12098e-106)}
; Y = -1.6063944875896714048479907432920299470424652099609375p-1016 {- 2730957988348367 -1016 (-2.28758e-306)}
; -1.0283869957960523056073043335345573723316192626953125p-352 - -1.6063944875896714048479907432920299470424652099609375p-1016 == -1.02838699579605208356269940850324928760528564453125p-352
; [HW: -1.02838699579605208356269940850324928760528564453125p-352] 

; mpf : - 127843663689268 -352
; mpfd: - 127843663689268 -352 (-1.12098e-106) class: Neg. norm. non-zero
; hwf : - 127843663689268 -352 (-1.12098e-106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010011111 #b0000011101000100010111101100001010010011011000110101)))
(assert (= y (fp #b1 #b00000000111 #b1001101100111100101010110100110010101100000111001111)))
(assert (= r (fp #b1 #b01010011111 #b0000011101000100010111101100001010010011011000110100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
