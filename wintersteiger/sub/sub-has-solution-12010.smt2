(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.855166051133296800657035419135354459285736083984375p-386 {+ 3851325509223814 -386 (1.17708e-116)}
; Y = 1.0356922075323040655092654560576193034648895263671875p351 {+ 160743412542515 351 (4.75072e+105)}
; 1.855166051133296800657035419135354459285736083984375p-386 - 1.0356922075323040655092654560576193034648895263671875p351 == -1.0356922075323040655092654560576193034648895263671875p351
; [HW: -1.0356922075323040655092654560576193034648895263671875p351] 

; mpf : - 160743412542515 351
; mpfd: - 160743412542515 351 (-4.75072e+105) class: Neg. norm. non-zero
; hwf : - 160743412542515 351 (-4.75072e+105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001111101 #b1101101011101100001010011000111001000100010110000110)))
(assert (= y (fp #b0 #b10101011110 #b0000100100100011000111111110000000010010110000110011)))
(assert (= r (fp #b1 #b10101011110 #b0000100100100011000111111110000000010010110000110011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
