(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8269637577649919801814348829793743789196014404296875p-41 {+ 3724313671319323 -41 (8.30807e-013)}
; Y = -1.9546112488914599847333875004551373422145843505859375p638 {- 4299186864791263 638 (-2.22945e+192)}
; 1.8269637577649919801814348829793743789196014404296875p-41 - -1.9546112488914599847333875004551373422145843505859375p638 == 1.9546112488914599847333875004551373422145843505859375p638
; [HW: 1.9546112488914599847333875004551373422145843505859375p638] 

; mpf : + 4299186864791263 638
; mpfd: + 4299186864791263 638 (2.22945e+192) class: Pos. norm. non-zero
; hwf : + 4299186864791263 638 (2.22945e+192) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010110 #b1101001110110011111001011001011010010011111100011011)))
(assert (= y (fp #b1 #b11001111101 #b1111010001100001011001110001111001100001111011011111)))
(assert (= r (fp #b0 #b11001111101 #b1111010001100001011001110001111001100001111011011111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
