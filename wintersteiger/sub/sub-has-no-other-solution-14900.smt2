(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.008699501259769704120117239654064178466796875p103 {- 39179070631808 103 (-1.02294e+031)}
; Y = 1.074708280518383407553528741118498146533966064453125p-297 {+ 336456184304082 -297 (4.22067e-090)}
; -1.008699501259769704120117239654064178466796875p103 - 1.074708280518383407553528741118498146533966064453125p-297 == -1.0086995012597699261647221646853722631931304931640625p103
; [HW: -1.0086995012597699261647221646853722631931304931640625p103] 

; mpf : - 39179070631809 103
; mpfd: - 39179070631809 103 (-1.02294e+031) class: Neg. norm. non-zero
; hwf : - 39179070631809 103 (-1.02294e+031) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100110 #b0000001000111010001000010110100101100110111110000000)))
(assert (= y (fp #b0 #b01011010110 #b0001001100100000000101001111010110010001000111010010)))
(assert (= r (fp #b1 #b10001100110 #b0000001000111010001000010110100101100110111110000001)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
