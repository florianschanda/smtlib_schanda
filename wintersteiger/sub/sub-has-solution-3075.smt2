(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.4099287084342753129106995402253232896327972412109375p-694 {+ 1846154778553071 -694 (1.71546e-209)}
; Y = 1.4321673983145888353618602195638231933116912841796875p287 {+ 1946308934011259 287 (3.56125e+086)}
; 1.4099287084342753129106995402253232896327972412109375p-694 - 1.4321673983145888353618602195638231933116912841796875p287 == -1.432167398314588613317255294532515108585357666015625p287
; [HW: -1.432167398314588613317255294532515108585357666015625p287] 

; mpf : - 1946308934011258 287
; mpfd: - 1946308934011258 287 (-3.56125e+086) class: Neg. norm. non-zero
; hwf : - 1946308934011258 287 (-3.56125e+086) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101001001 #b0110100011110001000101100111110001101010101011101111)))
(assert (= y (fp #b0 #b10100011110 #b0110111010100010100001011100101000101000100101111011)))
(assert (= r (fp #b1 #b10100011110 #b0110111010100010100001011100101000101000100101111010)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
