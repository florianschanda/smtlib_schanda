(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0674863094260700346893599999020807445049285888671875p58 {- 303931317983859 58 (-3.07682e+017)}
; Y = -1.0917620480446570407906392574659548699855804443359375p509 {- 413259525380671 509 (-1.82977e+153)}
; -1.0674863094260700346893599999020807445049285888671875p58 - -1.0917620480446570407906392574659548699855804443359375p509 == 1.0917620480446570407906392574659548699855804443359375p509
; [HW: 1.0917620480446570407906392574659548699855804443359375p509] 

; mpf : + 413259525380671 509
; mpfd: + 413259525380671 509 (1.82977e+153) class: Pos. norm. non-zero
; hwf : + 413259525380671 509 (1.82977e+153) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000111001 #b0001000101000110110010000110001111101001101001110011)))
(assert (= y (fp #b1 #b10111111100 #b0001011101111101101101111011001101011101101000111111)))
(assert (= r (fp #b0 #b10111111100 #b0001011101111101101101111011001101011101101000111111)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
