(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9818800594193788366936814782093279063701629638671875p852 {+ 4421994669723635 852 (5.9516e+256)}
; Y = -1.9683006840053918207189553868374787271022796630859375p-163 {- 4360838599669279 -163 (-1.68346e-049)}
; 1.9818800594193788366936814782093279063701629638671875p852 - -1.9683006840053918207189553868374787271022796630859375p-163 == 1.9818800594193788366936814782093279063701629638671875p852
; [HW: 1.9818800594193788366936814782093279063701629638671875p852] 

; mpf : + 4421994669723635 852
; mpfd: + 4421994669723635 852 (5.9516e+256) class: Pos. norm. non-zero
; hwf : + 4421994669723635 852 (5.9516e+256) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101010011 #b1111101101011100011111011101011111001100111111110011)))
(assert (= y (fp #b1 #b01101011100 #b1111011111100010100011011011101001111111011000011111)))
(assert (= r (fp #b0 #b11101010011 #b1111101101011100011111011101011111001100111111110011)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
