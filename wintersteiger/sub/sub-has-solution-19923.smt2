(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.77937893818560244341142606572248041629791259765625p-412 {+ 3510010695593092 -412 (1.68233e-124)}
; Y = 1.207725351342828101763871018192730844020843505859375p289 {+ 935511814902966 289 (1.20126e+087)}
; 1.77937893818560244341142606572248041629791259765625p-412 - 1.207725351342828101763871018192730844020843505859375p289 == -1.2077253513428278797192660931614227592945098876953125p289
; [HW: -1.2077253513428278797192660931614227592945098876953125p289] 

; mpf : - 935511814902965 289
; mpfd: - 935511814902965 289 (-1.20126e+087) class: Neg. norm. non-zero
; hwf : - 935511814902965 289 (-1.20126e+087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100011 #b1100011110000101011000001100101010110010110010000100)))
(assert (= y (fp #b0 #b10100100000 #b0011010100101101011111010001011010010001010010110110)))
(assert (= r (fp #b1 #b10100100000 #b0011010100101101011111010001011010010001010010110101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
