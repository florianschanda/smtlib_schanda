(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.414671931449622110932295981911011040210723876953125p-912 {+ 1867516355957522 -912 (4.08601e-275)}
; Y = -1.9727136447418069931103445924236439168453216552734375p916 {- 4380712807997399 916 (-1.0928e+276)}
; 1.414671931449622110932295981911011040210723876953125p-912 - -1.9727136447418069931103445924236439168453216552734375p916 == 1.9727136447418069931103445924236439168453216552734375p916
; [HW: 1.9727136447418069931103445924236439168453216552734375p916] 

; mpf : + 4380712807997399 916
; mpfd: + 4380712807997399 916 (1.0928e+276) class: Pos. norm. non-zero
; hwf : + 4380712807997399 916 (1.0928e+276) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101111 #b0110101000100111111100001001000000100101001100010010)))
(assert (= y (fp #b1 #b11110010011 #b1111100100000011110000101110110010001001111111010111)))
(assert (= r (fp #b0 #b11110010011 #b1111100100000011110000101110110010001001111111010111)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
