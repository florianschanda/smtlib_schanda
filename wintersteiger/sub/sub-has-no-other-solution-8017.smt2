(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.3070916597822235249992672834196127951145172119140625p-600 {- 1383017884563809 -600 (-3.14999e-181)}
; Y = -1.3332250323265093516766910397564060986042022705078125p-316 {- 1500712131416189 -316 (-9.98676e-096)}
; -1.3070916597822235249992672834196127951145172119140625p-600 - -1.3332250323265093516766910397564060986042022705078125p-316 == 1.3332250323265093516766910397564060986042022705078125p-316
; [HW: 1.3332250323265093516766910397564060986042022705078125p-316] 

; mpf : + 1500712131416189 -316
; mpfd: + 1500712131416189 -316 (9.98676e-096) class: Pos. norm. non-zero
; hwf : + 1500712131416189 -316 (9.98676e-096) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100111 #b0100111010011101100011110001101110100011100101100001)))
(assert (= y (fp #b1 #b01011000011 #b0101010101001110001111000101100000001101000001111101)))
(assert (= r (fp #b0 #b01011000011 #b0101010101001110001111000101100000001101000001111101)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
