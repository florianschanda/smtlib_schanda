(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1937293207836348063466402891208417713642120361328125p835 {+ 872479296891917 835 (2.73497e+251)}
; Y = 1.884174837327664331354526439099572598934173583984375p786 {+ 3981969467919238 786 (7.66828e+236)}
; 1.1937293207836348063466402891208417713642120361328125p835 - 1.884174837327664331354526439099572598934173583984375p786 == 1.1937293207836312536329614886199124157428741455078125p835
; [HW: 1.1937293207836312536329614886199124157428741455078125p835] 

; mpf : + 872479296891901 835
; mpfd: + 872479296891901 835 (2.73497e+251) class: Pos. norm. non-zero
; hwf : + 872479296891901 835 (2.73497e+251) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101000010 #b0011000110011000001111101010100100001010110000001101)))
(assert (= y (fp #b0 #b11100010001 #b1110001001011001010010000011101001000100101110000110)))
(assert (= r (fp #b0 #b11101000010 #b0011000110011000001111101010100100001010101111111101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
