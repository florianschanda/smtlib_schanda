(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.677359200071212530502862136927433311939239501953125p-702 {- 3050554641036690 -702 (-7.97203e-212)}
; Y = 1.0470965875485911400488703293376602232456207275390625p-55 {+ 212104174134257 -55 (2.90628e-017)}
; -1.677359200071212530502862136927433311939239501953125p-702 - 1.0470965875485911400488703293376602232456207275390625p-55 == -1.047096587548591362093475254368968307971954345703125p-55
; [HW: -1.047096587548591362093475254368968307971954345703125p-55] 

; mpf : - 212104174134258 -55
; mpfd: - 212104174134258 -55 (-2.90628e-017) class: Neg. norm. non-zero
; hwf : - 212104174134258 -55 (-2.90628e-017) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000001 #b1010110101100111011010011001101111110011010110010010)))
(assert (= y (fp #b0 #b01111001000 #b0000110000001110100001011001111101000110001111110001)))
(assert (= r (fp #b1 #b01111001000 #b0000110000001110100001011001111101000110001111110010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
