(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.997467237938419071241469282540492713451385498046875p-204 {- 4492193081093742 -204 (-7.76892e-062)}
; Y = 1.6891561600283149235934843090944923460483551025390625p-618 {+ 3103683425503601 -618 (1.55286e-186)}
; -1.997467237938419071241469282540492713451385498046875p-204 - 1.6891561600283149235934843090944923460483551025390625p-618 == -1.997467237938419071241469282540492713451385498046875p-204
; [HW: -1.997467237938419071241469282540492713451385498046875p-204] 

; mpf : - 4492193081093742 -204
; mpfd: - 4492193081093742 -204 (-7.76892e-062) class: Neg. norm. non-zero
; hwf : - 4492193081093742 -204 (-7.76892e-062) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100110011 #b1111111101011010000000110100110111000110111001101110)))
(assert (= y (fp #b0 #b00110010101 #b1011000001101100100010011100000100101000100101110001)))
(assert (= r (fp #b1 #b01100110011 #b1111111101011010000000110100110111000110111001101110)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
