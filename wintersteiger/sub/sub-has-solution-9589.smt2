(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.761656694857710814261508858180604875087738037109375p-289 {- 3430196807145430 -289 (-1.77114e-087)}
; Y = 1.7002442644225681522840432080556638538837432861328125p-991 {+ 3153619808321805 -991 (8.12429e-299)}
; -1.761656694857710814261508858180604875087738037109375p-289 - 1.7002442644225681522840432080556638538837432861328125p-991 == -1.761656694857710814261508858180604875087738037109375p-289
; [HW: -1.761656694857710814261508858180604875087738037109375p-289] 

; mpf : - 3430196807145430 -289
; mpfd: - 3430196807145430 -289 (-1.77114e-087) class: Neg. norm. non-zero
; hwf : - 3430196807145430 -289 (-1.77114e-087) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011011110 #b1100001011111011111011101110001100110001011111010110)))
(assert (= y (fp #b0 #b00000100000 #b1011001101000011001101010100011011101000000100001101)))
(assert (= r (fp #b1 #b01011011110 #b1100001011111011111011101110001100110001011111010110)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
