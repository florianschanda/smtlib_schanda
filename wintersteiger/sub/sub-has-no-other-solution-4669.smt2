(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.37950176219115139275572801125235855579376220703125p-757 {- 1709123994790516 -757 (-1.81977e-228)}
; Y = 1.51190799884078597159486889722757041454315185546875p-417 {+ 2305428672827340 -417 (4.46701e-126)}
; -1.37950176219115139275572801125235855579376220703125p-757 - 1.51190799884078597159486889722757041454315185546875p-417 == -1.5119079988407861936394738222588784992694854736328125p-417
; [HW: -1.5119079988407861936394738222588784992694854736328125p-417] 

; mpf : - 2305428672827341 -417
; mpfd: - 2305428672827341 -417 (-4.46701e-126) class: Neg. norm. non-zero
; hwf : - 2305428672827341 -417 (-4.46701e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100001010 #b0110000100100111000001110000100101100010101001110100)))
(assert (= y (fp #b0 #b01001011110 #b1000001100001100011001110001000110010100111111001100)))
(assert (= r (fp #b1 #b01001011110 #b1000001100001100011001110001000110010100111111001101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
