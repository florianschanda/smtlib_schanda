(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.306808910166824322374168332316912710666656494140625p-321 {- 1381744493501258 -321 (-3.05903e-097)}
; Y = 1.699052779533372525833101462922058999538421630859375p613 {+ 3148253837418806 613 (5.77556e+184)}
; -1.306808910166824322374168332316912710666656494140625p-321 - 1.699052779533372525833101462922058999538421630859375p613 == -1.6990527795333727478777063879533670842647552490234375p613
; [HW: -1.6990527795333727478777063879533670842647552490234375p613] 

; mpf : - 3148253837418807 613
; mpfd: - 3148253837418807 613 (-5.77556e+184) class: Neg. norm. non-zero
; hwf : - 3148253837418807 613 (-5.77556e+184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010111110 #b0100111010001011000001110101101101001001101101001010)))
(assert (= y (fp #b0 #b11001100100 #b1011001011110101000111110111101001000110000100110110)))
(assert (= r (fp #b1 #b11001100100 #b1011001011110101000111110111101001000110000100110111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
