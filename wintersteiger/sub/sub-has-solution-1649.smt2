(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.221084763933564243387763781356625258922576904296875p576 {- 995677260468494 576 (-3.02011e+173)}
; Y = -1.8531626180134812553745859986520372331142425537109375p290 {- 3842302848571951 290 (-3.68648e+087)}
; -1.221084763933564243387763781356625258922576904296875p576 - -1.8531626180134812553745859986520372331142425537109375p290 == -1.2210847639335640213431588563253171741962432861328125p576
; [HW: -1.2210847639335640213431588563253171741962432861328125p576] 

; mpf : - 995677260468493 576
; mpfd: - 995677260468493 576 (-3.02011e+173) class: Neg. norm. non-zero
; hwf : - 995677260468493 576 (-3.02011e+173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111111 #b0011100010011001000000101101011010111101000100001110)))
(assert (= y (fp #b1 #b10100100001 #b1101101001101000110111011000011010001001101000101111)))
(assert (= r (fp #b1 #b11000111111 #b0011100010011001000000101101011010111101000100001101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
