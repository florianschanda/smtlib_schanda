(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.611775637720487264203939048456959426403045654296875p479 {- 2755192534072334 479 (-2.51578e+144)}
; Y = 1.6601879766532146032176342487218789756298065185546875p363 {+ 2973222325649899 363 (3.11922e+109)}
; -1.611775637720487264203939048456959426403045654296875p479 - 1.6601879766532146032176342487218789756298065185546875p363 == -1.611775637720487264203939048456959426403045654296875p479
; [HW: -1.611775637720487264203939048456959426403045654296875p479] 

; mpf : - 2755192534072334 479
; mpfd: - 2755192534072334 479 (-2.51578e+144) class: Neg. norm. non-zero
; hwf : - 2755192534072334 479 (-2.51578e+144) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111011110 #b1001110010011101010101000000010001111111110000001110)))
(assert (= y (fp #b0 #b10101101010 #b1010100100000010000101000100100011110000000111101011)))
(assert (= r (fp #b1 #b10111011110 #b1001110010011101010101000000010001111111110000001110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
