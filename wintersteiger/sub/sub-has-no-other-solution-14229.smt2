(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2081357957428628946416893086279742419719696044921875p-946 {- 937360292150019 -946 (-2.03114e-285)}
; Y = -1.7147794507147413600733898420003242790699005126953125p-120 {- 3219080467890997 -120 (-1.29006e-036)}
; -1.2081357957428628946416893086279742419719696044921875p-946 - -1.7147794507147413600733898420003242790699005126953125p-120 == 1.7147794507147413600733898420003242790699005126953125p-120
; [HW: 1.7147794507147413600733898420003242790699005126953125p-120] 

; mpf : + 3219080467890997 -120
; mpfd: + 3219080467890997 -120 (1.29006e-036) class: Pos. norm. non-zero
; hwf : + 3219080467890997 -120 (1.29006e-036) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001001101 #b0011010101001000011000110011001111010111101100000011)))
(assert (= y (fp #b1 #b01110000111 #b1011011011111011110010010011110010101100001100110101)))
(assert (= r (fp #b0 #b01110000111 #b1011011011111011110010010011110010101100001100110101)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
