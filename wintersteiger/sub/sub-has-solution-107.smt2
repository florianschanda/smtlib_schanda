(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.9523106029091514823647912635351531207561492919921875p-954 {- 4288825676402627 -954 (-1.28213e-287)}
; Y = 1.710650556105266506534690051921643316745758056640625p-956 {+ 3200485579666314 -956 (2.80857e-288)}
; -1.9523106029091514823647912635351531207561492919921875p-954 - 1.710650556105266506534690051921643316745758056640625p-956 == -1.1899866209677341100103831195156089961528778076171875p-953
; [HW: -1.1899866209677341100103831195156089961528778076171875p-953] 

; mpf : - 855623675395667 -953
; mpfd: - 855623675395667 -953 (-1.56299e-287) class: Neg. norm. non-zero
; hwf : - 855623675395667 -953 (-1.56299e-287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001000101 #b1111001111001010101000001010111100100000111111000011)))
(assert (= y (fp #b0 #b00001000011 #b1011010111101101001100011110000101011011001110001010)))
(assert (= r (fp #b1 #b00001000110 #b0011000010100010111101101001001110111011111001010011)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
