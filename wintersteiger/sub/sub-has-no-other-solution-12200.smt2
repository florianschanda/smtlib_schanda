(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.3155042527690035125687018080498091876506805419921875p-983 {- 1420904835204291 -983 (-1.60919e-296)}
; Y = 1.1050630828313516840211150338291190564632415771484375p451 {+ 473162060689671 451 (6.42562e+135)}
; -1.3155042527690035125687018080498091876506805419921875p-983 - 1.1050630828313516840211150338291190564632415771484375p451 == -1.1050630828313516840211150338291190564632415771484375p451
; [HW: -1.1050630828313516840211150338291190564632415771484375p451] 

; mpf : - 473162060689671 451
; mpfd: - 473162060689671 451 (-6.42562e+135) class: Neg. norm. non-zero
; hwf : - 473162060689671 451 (-6.42562e+135) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000101000 #b0101000011000100111000101111111101100100010011000011)))
(assert (= y (fp #b0 #b10111000010 #b0001101011100101011010100000100011000111000100000111)))
(assert (= r (fp #b1 #b10111000010 #b0001101011100101011010100000100011000111000100000111)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
