(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.1148808407912926821126120557892136275768280029296875p-645 {- 517377311779675 -645 (-7.63627e-195)}
; Y = 1.15008411899413953705106905545108020305633544921875p663 {+ 675918782376236 663 (4.40166e+199)}
; -1.1148808407912926821126120557892136275768280029296875p-645 - 1.15008411899413953705106905545108020305633544921875p663 == -1.1500841189941397590956739804823882877826690673828125p663
; [HW: -1.1500841189941397590956739804823882877826690673828125p663] 

; mpf : - 675918782376237 663
; mpfd: - 675918782376237 663 (-4.40166e+199) class: Neg. norm. non-zero
; hwf : - 675918782376237 663 (-4.40166e+199) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111010 #b0001110101101000110101001010111000100010101101011011)))
(assert (= y (fp #b0 #b11010010110 #b0010011001101011111010011010111010111010100100101100)))
(assert (= r (fp #b1 #b11010010110 #b0010011001101011111010011010111010111010100100101101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
