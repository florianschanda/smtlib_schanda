(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.36650684351118112402900806046091020107269287109375p-924 {- 1650600083865692 -924 (-9.63598e-279)}
; Y = 1.18910743541769381437234187615104019641876220703125p-262 {+ 851664175680116 -262 (1.60458e-079)}
; -1.36650684351118112402900806046091020107269287109375p-924 - 1.18910743541769381437234187615104019641876220703125p-262 == -1.1891074354176940364169468011823482811450958251953125p-262
; [HW: -1.1891074354176940364169468011823482811450958251953125p-262] 

; mpf : - 851664175680117 -262
; mpfd: - 851664175680117 -262 (-1.60458e-079) class: Neg. norm. non-zero
; hwf : - 851664175680117 -262 (-1.60458e-079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001100011 #b0101110111010011011001000111101010100100000001011100)))
(assert (= y (fp #b0 #b01011111001 #b0011000001101001010110000100101010001100101001110100)))
(assert (= r (fp #b1 #b01011111001 #b0011000001101001010110000100101010001100101001110101)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
