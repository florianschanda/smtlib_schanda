(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5489546657011690200533848837949335575103759765625p895 {- 2472272027895080 895 (-4.09152e+269)}
; Y = 1.8091531584825626399748443873249925673007965087890625p253 {+ 3644101863027729 253 (2.61857e+076)}
; -1.5489546657011690200533848837949335575103759765625p895 - 1.8091531584825626399748443873249925673007965087890625p253 == -1.5489546657011690200533848837949335575103759765625p895
; [HW: -1.5489546657011690200533848837949335575103759765625p895] 

; mpf : - 2472272027895080 895
; mpfd: - 2472272027895080 895 (-4.09152e+269) class: Neg. norm. non-zero
; hwf : - 2472272027895080 895 (-4.09152e+269) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111110 #b1000110010001000010010110000000000101100010100101000)))
(assert (= y (fp #b0 #b10011111100 #b1100111100100100101010010101000100100011010000010001)))
(assert (= r (fp #b1 #b11101111110 #b1000110010001000010010110000000000101100010100101000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
