(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.8526027490019012500255257691605947911739349365234375p423 {+ 3839781422700023 423 (4.01301e+127)}
; Y = 1.854229542893498727806900205905549228191375732421875p447 {+ 3847107851064030 447 (6.73863e+134)}
; 1.8526027490019012500255257691605947911739349365234375p423 - 1.854229542893498727806900205905549228191375732421875p447 == -1.854229432469769900393430361873470246791839599609375p447
; [HW: -1.854229432469769900393430361873470246791839599609375p447] 

; mpf : - 3847107353759766 447
; mpfd: - 3847107353759766 447 (-6.73863e+134) class: Neg. norm. non-zero
; hwf : - 3847107353759766 447 (-6.73863e+134) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110100110 #b1101101001000100001011000111101101110001010111110111)))
(assert (= y (fp #b0 #b10110111110 #b1101101010101110110010011000111000000001001011011110)))
(assert (= r (fp #b1 #b10110111110 #b1101101010101110110001111011001110111101000000010110)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
