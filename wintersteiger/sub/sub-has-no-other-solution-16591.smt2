(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.907339670647150597915242542512714862823486328125p891 {- 4086294602624976 891 (-3.14887e+268)}
; Y = -1.193157552422542178049980066134594380855560302734375p-212 {- 869904281113958 -212 (-1.81275e-064)}
; -1.907339670647150597915242542512714862823486328125p891 - -1.193157552422542178049980066134594380855560302734375p-212 == -1.907339670647150597915242542512714862823486328125p891
; [HW: -1.907339670647150597915242542512714862823486328125p891] 

; mpf : - 4086294602624976 891
; mpfd: - 4086294602624976 891 (-3.14887e+268) class: Neg. norm. non-zero
; hwf : - 4086294602624976 891 (-3.14887e+268) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101111010 #b1110100001000111011010011010001111001010111111010000)))
(assert (= y (fp #b1 #b01100101011 #b0011000101110010110001011111101010100001010101100110)))
(assert (= r (fp #b1 #b11101111010 #b1110100001000111011010011010001111001010111111010000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
