(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.722577316374226175099693136871792376041412353515625p-640 {- 3254198932769338 -640 (-3.77556e-193)}
; Y = -1.5947763799406080575948863042867742478847503662109375p942 {- 2678634683069295 942 (-5.92865e+283)}
; -1.722577316374226175099693136871792376041412353515625p-640 - -1.5947763799406080575948863042867742478847503662109375p942 == 1.594776379940607835550281379255466163158416748046875p942
; [HW: 1.594776379940607835550281379255466163158416748046875p942] 

; mpf : + 2678634683069294 942
; mpfd: + 2678634683069294 942 (5.92865e+283) class: Pos. norm. non-zero
; hwf : + 2678634683069294 942 (5.92865e+283) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111111 #b1011100011111010110100111011011010101000101000111010)))
(assert (= y (fp #b1 #b11110101101 #b1001100001000011010000111100110001000111001101101111)))
(assert (= r (fp #b0 #b11110101101 #b1001100001000011010000111100110001000111001101101110)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
