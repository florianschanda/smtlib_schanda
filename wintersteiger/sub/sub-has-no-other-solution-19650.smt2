(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5852622374198943600021038946579210460186004638671875p635 {- 2635786794358259 635 (-2.26021e+191)}
; Y = 1.223656287847957546688348884345032274723052978515625p-143 {+ 1007258374611130 -143 (1.09741e-043)}
; -1.5852622374198943600021038946579210460186004638671875p635 - 1.223656287847957546688348884345032274723052978515625p-143 == -1.5852622374198943600021038946579210460186004638671875p635
; [HW: -1.5852622374198943600021038946579210460186004638671875p635] 

; mpf : - 2635786794358259 635
; mpfd: - 2635786794358259 635 (-2.26021e+191) class: Neg. norm. non-zero
; hwf : - 2635786794358259 635 (-2.26021e+191) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001111010 #b1001010111010011101111101111100101001101010111110011)))
(assert (= y (fp #b0 #b01101110000 #b0011100101000001100010011101100111011010000010111010)))
(assert (= r (fp #b1 #b11001111010 #b1001010111010011101111101111100101001101010111110011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
