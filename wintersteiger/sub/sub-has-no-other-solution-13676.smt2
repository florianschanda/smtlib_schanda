(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.736583373285157438914438898791559040546417236328125p468 {- 3317276605454338 468 (-1.32353e+141)}
; Y = 1.8608004573433927220094119547866284847259521484375p801 {+ 3876700618932056 801 (2.48157e+241)}
; -1.736583373285157438914438898791559040546417236328125p468 - 1.8608004573433927220094119547866284847259521484375p801 == -1.8608004573433927220094119547866284847259521484375p801
; [HW: -1.8608004573433927220094119547866284847259521484375p801] 

; mpf : - 3876700618932056 801
; mpfd: - 3876700618932056 801 (-2.48157e+241) class: Neg. norm. non-zero
; hwf : - 3876700618932056 801 (-2.48157e+241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10111010011 #b1011110010010000101110100101101100001001100000000010)))
(assert (= y (fp #b0 #b11100100000 #b1101110001011101011010110011010010101011111101011000)))
(assert (= r (fp #b1 #b11100100000 #b1101110001011101011010110011010010101011111101011000)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
