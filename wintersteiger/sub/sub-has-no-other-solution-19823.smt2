(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7779708628490096256058450308046303689479827880859375p-527 {+ 3503669288031903 -527 (4.04685e-159)}
; Y = -1.8684821386925201114337369290296919643878936767578125p-872 {- 3911295836193565 -872 (-5.9338e-263)}
; 1.7779708628490096256058450308046303689479827880859375p-527 - -1.8684821386925201114337369290296919643878936767578125p-872 == 1.77797086284900984765044995583593845367431640625p-527
; [HW: 1.77797086284900984765044995583593845367431640625p-527] 

; mpf : + 3503669288031904 -527
; mpfd: + 3503669288031904 -527 (4.04685e-159) class: Pos. norm. non-zero
; hwf : + 3503669288031904 -527 (4.04685e-159) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111110000 #b1100011100101001000110010011010100101101011010011111)))
(assert (= y (fp #b1 #b00010010111 #b1101111001010100110110000110111011011000001100011101)))
(assert (= r (fp #b0 #b00111110000 #b1100011100101001000110010011010100101101011010100000)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
