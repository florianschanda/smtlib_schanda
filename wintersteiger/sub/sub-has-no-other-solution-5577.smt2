(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4075396430946549575224935324513353407382965087890625p75 {+ 1835395384779793 75 (5.31753e+022)}
; Y = -1.7452012379570602806921897354186512529850006103515625p671 {- 3356088017579449 671 (-1.70991e+202)}
; 1.4075396430946549575224935324513353407382965087890625p75 - -1.7452012379570602806921897354186512529850006103515625p671 == 1.7452012379570602806921897354186512529850006103515625p671
; [HW: 1.7452012379570602806921897354186512529850006103515625p671] 

; mpf : + 3356088017579449 671
; mpfd: + 3356088017579449 671 (1.70991e+202) class: Pos. norm. non-zero
; hwf : + 3356088017579449 671 (1.70991e+202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001010 #b0110100001010100100001001001111011101010010000010001)))
(assert (= y (fp #b1 #b11010011110 #b1011111011000101100000100010000111110110110110111001)))
(assert (= r (fp #b0 #b11010011110 #b1011111011000101100000100010000111110110110110111001)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
