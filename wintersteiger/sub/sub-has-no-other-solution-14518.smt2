(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0832620400745225364147472646436654031276702880859375p340 {- 374978892653727 340 (-2.42623e+102)}
; Y = -1.1349293726756009004219549751724116504192352294921875p-354 {- 607667872503171 -354 (-3.09279e-107)}
; -1.0832620400745225364147472646436654031276702880859375p340 - -1.1349293726756009004219549751724116504192352294921875p-354 == -1.0832620400745225364147472646436654031276702880859375p340
; [HW: -1.0832620400745225364147472646436654031276702880859375p340] 

; mpf : - 374978892653727 340
; mpfd: - 374978892653727 340 (-2.42623e+102) class: Neg. norm. non-zero
; hwf : - 374978892653727 340 (-2.42623e+102) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010011 #b0001010101010000101010010011101100011110010010011111)))
(assert (= y (fp #b1 #b01010011101 #b0010001010001010101110110011101011101001010110000011)))
(assert (= r (fp #b1 #b10101010011 #b0001010101010000101010010011101100011110010010011111)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
