(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4228123017394087579390316022909246385097503662109375p244 {- 1904177324561263 244 (-4.02223e+073)}
; Y = 1.7301976808020984588409874049830250442028045654296875p-972 {+ 3288518003167131 -972 (4.33451e-293)}
; -1.4228123017394087579390316022909246385097503662109375p244 - 1.7301976808020984588409874049830250442028045654296875p-972 == -1.422812301739408979983636527322232723236083984375p244
; [HW: -1.422812301739408979983636527322232723236083984375p244] 

; mpf : - 1904177324561264 244
; mpfd: - 1904177324561264 244 (-4.02223e+073) class: Neg. norm. non-zero
; hwf : - 1904177324561264 244 (-4.02223e+073) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011110011 #b0110110000111101011011010101000001010001001101101111)))
(assert (= y (fp #b0 #b00000110011 #b1011101011101110001111000011011010101000111110011011)))
(assert (= r (fp #b1 #b10011110011 #b0110110000111101011011010101000001010001001101110000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
