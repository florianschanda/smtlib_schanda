(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.86952151321367665559591841883957386016845703125p227 {- 3915976762899744 227 (-4.03218e+068)}
; Y = 1.9154934445471203385835679000592790544033050537109375p968 {+ 4123015935722543 968 (4.77877e+291)}
; -1.86952151321367665559591841883957386016845703125p227 - 1.9154934445471203385835679000592790544033050537109375p968 == -1.915493444547120560628172825090587139129638671875p968
; [HW: -1.915493444547120560628172825090587139129638671875p968] 

; mpf : - 4123015935722544 968
; mpfd: - 4123015935722544 968 (-4.77877e+291) class: Neg. norm. non-zero
; hwf : - 4123015935722544 968 (-4.77877e+291) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011100010 #b1101111010011000111101100011111001101011110100100000)))
(assert (= y (fp #b0 #b11111000111 #b1110101001011101110001110100010000001000010000101111)))
(assert (= r (fp #b1 #b11111000111 #b1110101001011101110001110100010000001000010000110000)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
