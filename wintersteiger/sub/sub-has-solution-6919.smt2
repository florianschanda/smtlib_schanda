(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9501418802700423160700893276953138411045074462890625p48 {+ 4279058617933265 48 (5.48916e+014)}
; Y = 1.547957238995122164482154403231106698513031005859375p1007 {+ 2467780017353398 1007 (2.12307e+303)}
; 1.9501418802700423160700893276953138411045074462890625p48 - 1.547957238995122164482154403231106698513031005859375p1007 == -1.547957238995122164482154403231106698513031005859375p1007
; [HW: -1.547957238995122164482154403231106698513031005859375p1007] 

; mpf : - 2467780017353398 1007
; mpfd: - 2467780017353398 1007 (-2.12307e+303) class: Neg. norm. non-zero
; hwf : - 2467780017353398 1007 (-2.12307e+303) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10000101111 #b1111001100111100011111111000111001010001110111010001)))
(assert (= y (fp #b0 #b11111101110 #b1000110001000110111011001111010100010111001010110110)))
(assert (= r (fp #b1 #b11111101110 #b1000110001000110111011001111010100010111001010110110)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
