(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.423556662801194416800854014582000672817230224609375p523 {- 1907529628761750 523 (-3.90897e+157)}
; Y = 1.27246207621942009069471168913878500461578369140625p-41 {+ 1227060104934372 -41 (5.78649e-013)}
; -1.423556662801194416800854014582000672817230224609375p523 - 1.27246207621942009069471168913878500461578369140625p-41 == -1.4235566628011946388454589396133087575435638427734375p523
; [HW: -1.4235566628011946388454589396133087575435638427734375p523] 

; mpf : - 1907529628761751 523
; mpfd: - 1907529628761751 523 (-3.90897e+157) class: Neg. norm. non-zero
; hwf : - 1907529628761751 523 (-3.90897e+157) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000001010 #b0110110001101110001101011001111010111011111010010110)))
(assert (= y (fp #b0 #b01111010110 #b0100010111000000000100110001101011000011001111100100)))
(assert (= r (fp #b1 #b11000001010 #b0110110001101110001101011001111010111011111010010111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
