(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 0.8552602143620247066024830928654409945011138916015625p-1022 {+ 3851749582705625 -1023 (1.90302e-308)}
; Y = 1.134809804283154921478171672788448631763458251953125p-847 {+ 607129384335506 -847 (1.20925e-255)}
; 0.8552602143620247066024830928654409945011138916015625p-1022 - 1.134809804283154921478171672788448631763458251953125p-847 == -1.134809804283154921478171672788448631763458251953125p-847
; [HW: -1.134809804283154921478171672788448631763458251953125p-847] 

; mpf : - 607129384335506 -847
; mpfd: - 607129384335506 -847 (-1.20925e-255) class: Neg. norm. non-zero
; hwf : - 607129384335506 -847 (-1.20925e-255) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000000 #b1101101011110010010101010101101001000001001111011001)))
(assert (= y (fp #b0 #b00010110000 #b0010001010000010111001010011010010010011100010010010)))
(assert (= r (fp #b1 #b00010110000 #b0010001010000010111001010011010010010011100010010010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
