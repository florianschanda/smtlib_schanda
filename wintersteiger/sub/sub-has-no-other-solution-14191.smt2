(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0699448765131236438463702143053524196147918701171875p427 {- 315003719800979 427 (-3.70825e+128)}
; Y = -1.75930395880194101465576750342734158039093017578125p399 {- 3419601025921364 399 (-2.27148e+120)}
; -1.0699448765131236438463702143053524196147918701171875p427 - -1.75930395880194101465576750342734158039093017578125p399 == -1.0699448699592057909768527679261751472949981689453125p427
; [HW: -1.0699448699592057909768527679261751472949981689453125p427] 

; mpf : - 315003690284757 427
; mpfd: - 315003690284757 427 (-3.70825e+128) class: Neg. norm. non-zero
; hwf : - 315003690284757 427 (-3.70825e+128) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10110101010 #b0001000111100111111010000100110100100101100010010011)))
(assert (= y (fp #b1 #b10110001110 #b1100001001100001101111101000011011000111000101010100)))
(assert (= r (fp #b1 #b10110101010 #b0001000111100111111010000011000011111111011011010101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
