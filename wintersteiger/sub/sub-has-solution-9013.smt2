(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.5735504299226088509300325313233770430088043212890625p617 {- 2583041502477649 617 (-8.55831e+185)}
; Y = 1.82564011769103284876791803981177508831024169921875p-980 {+ 3718352526375468 -980 (1.78657e-295)}
; -1.5735504299226088509300325313233770430088043212890625p617 - 1.82564011769103284876791803981177508831024169921875p-980 == -1.5735504299226088509300325313233770430088043212890625p617
; [HW: -1.5735504299226088509300325313233770430088043212890625p617] 

; mpf : - 2583041502477649 617
; mpfd: - 2583041502477649 617 (-8.55831e+185) class: Neg. norm. non-zero
; hwf : - 2583041502477649 617 (-8.55831e+185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001101000 #b1001001011010100001100110111001100011111110101010001)))
(assert (= y (fp #b0 #b00000101011 #b1101001101011101001001101001011110111111101000101100)))
(assert (= r (fp #b1 #b11001101000 #b1001001011010100001100110111001100011111110101010001)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
