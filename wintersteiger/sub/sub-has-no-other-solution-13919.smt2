(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2524586176778675916665406475658528506755828857421875p-211 {- 1136972536500515 -211 (-3.8057e-064)}
; Y = 1.8435525560011838397400651956559158861637115478515625p-32 {+ 3799022976874361 -32 (4.29236e-010)}
; -1.2524586176778675916665406475658528506755828857421875p-211 - 1.8435525560011838397400651956559158861637115478515625p-32 == -1.8435525560011838397400651956559158861637115478515625p-32
; [HW: -1.8435525560011838397400651956559158861637115478515625p-32] 

; mpf : - 3799022976874361 -32
; mpfd: - 3799022976874361 -32 (-4.29236e-010) class: Neg. norm. non-zero
; hwf : - 3799022976874361 -32 (-4.29236e-010) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101100 #b0100000010100001001000001100001010000101000100100011)))
(assert (= y (fp #b0 #b01111011111 #b1101011111110011000011110111000001111011011101111001)))
(assert (= r (fp #b1 #b01111011111 #b1101011111110011000011110111000001111011011101111001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
