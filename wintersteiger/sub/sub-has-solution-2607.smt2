(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.972317147398914283229487409698776900768280029296875p361 {- 4378927142711694 361 (-9.26414e+108)}
; Y = 1.35226335999294544620852320804260671138763427734375p-280 {+ 1586453136800508 -280 (6.96085e-085)}
; -1.972317147398914283229487409698776900768280029296875p361 - 1.35226335999294544620852320804260671138763427734375p-280 == -1.9723171473989145052740923347300849854946136474609375p361
; [HW: -1.9723171473989145052740923347300849854946136474609375p361] 

; mpf : - 4378927142711695 361
; mpfd: - 4378927142711695 361 (-9.26414e+108) class: Neg. norm. non-zero
; hwf : - 4378927142711695 361 (-9.26414e+108) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101000 #b1111100011101001110001101100110101101011000110001110)))
(assert (= y (fp #b0 #b01011100111 #b0101101000101101111011100111101010111111101011111100)))
(assert (= r (fp #b1 #b10101101000 #b1111100011101001110001101100110101101011000110001111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
