(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1734058568053933324648596681072376668453216552734375p83 {- 780950552092631 83 (-1.13485e+025)}
; Y = 1.6480294777281769835752811559359543025493621826171875p-508 {+ 2918465314421715 -508 (1.96665e-153)}
; -1.1734058568053933324648596681072376668453216552734375p83 - 1.6480294777281769835752811559359543025493621826171875p-508 == -1.1734058568053933324648596681072376668453216552734375p83
; [HW: -1.1734058568053933324648596681072376668453216552734375p83] 

; mpf : - 780950552092631 83
; mpfd: - 780950552092631 83 (-1.13485e+025) class: Neg. norm. non-zero
; hwf : - 780950552092631 83 (-1.13485e+025) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010010 #b0010110001100100010100111000001111101001111111010111)))
(assert (= y (fp #b0 #b01000000011 #b1010010111100101010000101000010110101111101111010011)))
(assert (= r (fp #b1 #b10001010010 #b0010110001100100010100111000001111101001111111010111)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
