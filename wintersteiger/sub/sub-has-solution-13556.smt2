(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.38242473141774979694673675112426280975341796875p795 {+ 1722287877910240 795 (2.88063e+239)}
; Y = 0.689120124226190622351850834093056619167327880859375p-1022 {+ 3103521134678582 -1023 (1.53334e-308)}
; 1.38242473141774979694673675112426280975341796875p795 - 0.689120124226190622351850834093056619167327880859375p-1022 == 1.38242473141774979694673675112426280975341796875p795
; [HW: 1.38242473141774979694673675112426280975341796875p795] 

; mpf : + 1722287877910240 795
; mpfd: + 1722287877910240 795 (2.88063e+239) class: Pos. norm. non-zero
; hwf : + 1722287877910240 795 (2.88063e+239) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100011010 #b0110000111100110100101100101001010011110111011100000)))
(assert (= y (fp #b0 #b00000000000 #b1011000001101010001011010010110010010001001000110110)))
(assert (= r (fp #b0 #b11100011010 #b0110000111100110100101100101001010011110111011100000)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
