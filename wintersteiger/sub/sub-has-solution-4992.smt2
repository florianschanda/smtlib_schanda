(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5821068312600072847118326535564847290515899658203125p762 {+ 2621576108352389 762 (3.83789e+229)}
; Y = 1.2080720332450580745131674120784737169742584228515625p562 {+ 937073131388665 562 (1.82369e+169)}
; 1.5821068312600072847118326535564847290515899658203125p762 - 1.2080720332450580745131674120784737169742584228515625p562 == 1.5821068312600072847118326535564847290515899658203125p762
; [HW: 1.5821068312600072847118326535564847290515899658203125p762] 

; mpf : + 2621576108352389 762
; mpfd: + 2621576108352389 762 (3.83789e+229) class: Pos. norm. non-zero
; hwf : + 2621576108352389 762 (3.83789e+229) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011111001 #b1001010100000100111101000000101100001010001110000101)))
(assert (= y (fp #b0 #b11000110001 #b0011010101000100001101010111000111111111111011111001)))
(assert (= r (fp #b0 #b11011111001 #b1001010100000100111101000000101100001010001110000101)))
(assert (= (fp.sub roundTowardPositive x y) r))
(check-sat)
(exit)
