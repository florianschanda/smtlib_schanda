(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3875815835920926044622092376812361180782318115234375p-480 {+ 1745512275441015 -480 (4.44489e-145)}
; Y = 1.1783256457448023635237177586532197892665863037109375p94 {+ 803107311726895 94 (2.33391e+028)}
; 1.3875815835920926044622092376812361180782318115234375p-480 - 1.1783256457448023635237177586532197892665863037109375p94 == -1.1783256457448023635237177586532197892665863037109375p94
; [HW: -1.1783256457448023635237177586532197892665863037109375p94] 

; mpf : - 803107311726895 94
; mpfd: - 803107311726895 94 (-2.33391e+028) class: Neg. norm. non-zero
; hwf : - 803107311726895 94 (-2.33391e+028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000011111 #b0110001100111000100010111111001000001111010101110111)))
(assert (= y (fp #b0 #b10001011101 #b0010110110100110101111111110000010000011000100101111)))
(assert (= r (fp #b1 #b10001011101 #b0010110110100110101111111110000010000011000100101111)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
