(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9405177705639944374382821479230187833309173583984375p-331 {- 4235715481047335 -331 (-4.43597e-100)}
; Y = -1.22485360374770291258528231992386281490325927734375p906 {- 1012650606051068 906 (-6.62613e+272)}
; -1.9405177705639944374382821479230187833309173583984375p-331 - -1.22485360374770291258528231992386281490325927734375p906 == 1.2248536037477026905406773948925547301769256591796875p906
; [HW: 1.2248536037477026905406773948925547301769256591796875p906] 

; mpf : + 1012650606051067 906
; mpfd: + 1012650606051067 906 (6.62613e+272) class: Pos. norm. non-zero
; hwf : + 1012650606051067 906 (6.62613e+272) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010110100 #b1111000011000101110001011100100111100001000100100111)))
(assert (= y (fp #b1 #b11110001001 #b0011100110010000000000010111101001111011111011111100)))
(assert (= r (fp #b0 #b11110001001 #b0011100110010000000000010111101001111011111011111011)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
