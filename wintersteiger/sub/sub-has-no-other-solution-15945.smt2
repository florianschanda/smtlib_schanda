(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6939143145578714477750281730550341308116912841796875p148 {+ 3125112248469883 148 (6.04409e+044)}
; Y = 1.4729311529097461885839948081411421298980712890625p-119 {+ 2129892564016232 -119 (2.21622e-036)}
; 1.6939143145578714477750281730550341308116912841796875p148 - 1.4729311529097461885839948081411421298980712890625p-119 == 1.693914314557871225730423248023726046085357666015625p148
; [HW: 1.693914314557871225730423248023726046085357666015625p148] 

; mpf : + 3125112248469882 148
; mpfd: + 3125112248469882 148 (6.04409e+044) class: Pos. norm. non-zero
; hwf : + 3125112248469882 148 (6.04409e+044) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010010011 #b1011000110100100010111100101011101000000100101111011)))
(assert (= y (fp #b0 #b01110001000 #b0111100100010010000001000001101100000001110001101000)))
(assert (= r (fp #b0 #b10010010011 #b1011000110100100010111100101011101000000100101111010)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
