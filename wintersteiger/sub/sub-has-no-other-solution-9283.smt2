(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.515057676630651162241747442749328911304473876953125p-914 {+ 2319613560548114 -914 (1.09399e-275)}
; Y = 1.34599412740278356892531519406475126743316650390625p-169 {+ 1558219023243556 -169 (1.79876e-051)}
; 1.515057676630651162241747442749328911304473876953125p-914 - 1.34599412740278356892531519406475126743316650390625p-169 == -1.3459941274027833468807102690334431827068328857421875p-169
; [HW: -1.3459941274027833468807102690334431827068328857421875p-169] 

; mpf : - 1558219023243555 -169
; mpfd: - 1558219023243555 -169 (-1.79876e-051) class: Neg. norm. non-zero
; hwf : - 1558219023243555 -169 (-1.79876e-051) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001101101 #b1000001111011010110100011110010010101110101100010010)))
(assert (= y (fp #b0 #b01101010110 #b0101100010010011000100100011010111001101100100100100)))
(assert (= r (fp #b1 #b01101010110 #b0101100010010011000100100011010111001101100100100011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
