(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9076363495273895853898693530936725437641143798828125p-46 {+ 4087630725519469 -46 (2.71091e-014)}
; Y = 1.66136833129690852928206368233077228069305419921875p604 {+ 2978538170383404 604 (1.10302e+182)}
; 1.9076363495273895853898693530936725437641143798828125p-46 - 1.66136833129690852928206368233077228069305419921875p604 == -1.66136833129690852928206368233077228069305419921875p604
; [HW: -1.66136833129690852928206368233077228069305419921875p604] 

; mpf : - 2978538170383404 604
; mpfd: - 2978538170383404 604 (-1.10302e+182) class: Neg. norm. non-zero
; hwf : - 2978538170383404 604 (-1.10302e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010001 #b1110100001011010110110110001010111100001100001101101)))
(assert (= y (fp #b0 #b11001011011 #b1010100101001111011011110101100110000111110000101100)))
(assert (= r (fp #b1 #b11001011011 #b1010100101001111011011110101100110000111110000101100)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
