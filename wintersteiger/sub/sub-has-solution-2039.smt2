(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3389595966718605968281963214394636452198028564453125p-475 {+ 1526538313265045 -475 (1.37252e-143)}
; Y = -1.305246452693315628579284748411737382411956787109375p-114 {- 1374707810605782 -114 (-6.28453e-035)}
; 1.3389595966718605968281963214394636452198028564453125p-475 - -1.305246452693315628579284748411737382411956787109375p-114 == 1.305246452693315628579284748411737382411956787109375p-114
; [HW: 1.305246452693315628579284748411737382411956787109375p-114] 

; mpf : + 1374707810605782 -114
; mpfd: + 1374707810605782 -114 (6.28453e-035) class: Pos. norm. non-zero
; hwf : + 1374707810605782 -114 (6.28453e-035) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000100100 #b0101011011000110000011100101111001011110111110010101)))
(assert (= y (fp #b1 #b01110001101 #b0100111000100100101000011010101110001001101011010110)))
(assert (= r (fp #b0 #b01110001101 #b0100111000100100101000011010101110001001101011010110)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
