(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.8255934863610765450658846020814962685108184814453125p-801 {- 3718142517535253 -801 (-1.36892e-241)}
; Y = 1.085134404929438911580064086592756211757659912109375p-821 {+ 383411274316630 -821 (7.75992e-248)}
; -1.8255934863610765450658846020814962685108184814453125p-801 - 1.085134404929438911580064086592756211757659912109375p-821 == -1.8255945212258881671374410871067084372043609619140625p-801
; [HW: -1.8255945212258881671374410871067084372043609619140625p-801] 

; mpf : - 3718147178152033 -801
; mpfd: - 3718147178152033 -801 (-1.36892e-241) class: Neg. norm. non-zero
; hwf : - 3718147178152033 -801 (-1.36892e-241) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011011110 #b1101001101011010000110000011111110110110001000010101)))
(assert (= y (fp #b0 #b00011001010 #b0001010111001011010111100100110011101111101101010110)))
(assert (= r (fp #b1 #b00011011110 #b1101001101011010001010011001110001101100000001100001)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
