(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2413446514388690733454723158502019941806793212890625p-814 {- 1086919682287953 -814 (-1.13626e-245)}
; Y = -1.4072386588095564530220826782169751822948455810546875p-242 {- 1834039872065579 -242 (-1.99117e-073)}
; -1.2413446514388690733454723158502019941806793212890625p-814 - -1.4072386588095564530220826782169751822948455810546875p-242 == 1.4072386588095564530220826782169751822948455810546875p-242
; [HW: 1.4072386588095564530220826782169751822948455810546875p-242] 

; mpf : + 1834039872065579 -242
; mpfd: + 1834039872065579 -242 (1.99117e-073) class: Pos. norm. non-zero
; hwf : + 1834039872065579 -242 (1.99117e-073) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010001 #b0011110111001000110000110101100011111110100101010001)))
(assert (= y (fp #b1 #b01100001101 #b0110100001000000110010101111000101000001000000101011)))
(assert (= r (fp #b0 #b01100001101 #b0110100001000000110010101111000101000001000000101011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
