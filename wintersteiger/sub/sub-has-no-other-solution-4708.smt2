(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4760754898488475106432815664447844028472900390625p871 {+ 2144053398683496 871 (2.32399e+262)}
; Y = 1.097318547486486384201498367474414408206939697265625p23 {+ 438283774196378 23 (9.20498e+006)}
; 1.4760754898488475106432815664447844028472900390625p871 - 1.097318547486486384201498367474414408206939697265625p23 == 1.4760754898488472885986766414134763181209564208984375p871
; [HW: 1.4760754898488472885986766414134763181209564208984375p871] 

; mpf : + 2144053398683495 871
; mpfd: + 2144053398683495 871 (2.32399e+262) class: Pos. norm. non-zero
; hwf : + 2144053398683495 871 (2.32399e+262) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11101100110 #b0111100111100000000101010101001101010011111101101000)))
(assert (= y (fp #b0 #b10000010110 #b0001100011101001110111100100101010111111101010011010)))
(assert (= r (fp #b0 #b11101100110 #b0111100111100000000101010101001101010011111101100111)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
