(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1828035657153981308198353872285224497318267822265625p-631 {- 823274070437865 -631 (-1.32735e-190)}
; Y = 1.9077828248866801619243460663710720837116241455078125p-632 {+ 4088290391892989 -632 (1.07046e-190)}
; -1.1828035657153981308198353872285224497318267822265625p-631 - 1.9077828248866801619243460663710720837116241455078125p-632 == -1.0683474890793689393575505164335481822490692138671875p-630
; [HW: -1.0683474890793689393575505164335481822490692138671875p-630] 

; mpf : - 307809726349555 -630
; mpfd: - 307809726349555 -630 (-2.39781e-190) class: Neg. norm. non-zero
; hwf : - 307809726349555 -630 (-2.39781e-190) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110001000 #b0010111011001100001101101110100001010110111111101001)))
(assert (= y (fp #b0 #b00110000111 #b1110100001100100011101001000100011000010001111111101)))
(assert (= r (fp #b1 #b00110001001 #b0001000101111111001110001001011001011100000011110011)))
(assert (= (fp.sub roundTowardZero x y) r))
(check-sat)
(exit)
