(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7585355190080707021849093507626093924045562744140625p536 {- 3416140280752033 536 (-3.95575e+161)}
; Y = 1.938960269338331432464883619104512035846710205078125p-270 {+ 4228701119107810 -270 (1.02205e-081)}
; -1.7585355190080707021849093507626093924045562744140625p536 - 1.938960269338331432464883619104512035846710205078125p-270 == -1.7585355190080707021849093507626093924045562744140625p536
; [HW: -1.7585355190080707021849093507626093924045562744140625p536] 

; mpf : - 3416140280752033 536
; mpfd: - 3416140280752033 536 (-3.95575e+161) class: Neg. norm. non-zero
; hwf : - 3416140280752033 536 (-3.95575e+161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000010111 #b1100001000101111011000100011111011111110011110100001)))
(assert (= y (fp #b0 #b01011110001 #b1111000001011111101100110100000100001101001011100010)))
(assert (= r (fp #b1 #b11000010111 #b1100001000101111011000100011111011111110011110100001)))
(assert (= (fp.sub roundNearestTiesToEven x y) r))
(check-sat)
(exit)
