(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1670290000363847671138728401274420320987701416015625p-330 {+ 752231742323929 -330 (5.3356e-100)}
; Y = 1.5693912130666978210769002544111572206020355224609375p-597 {+ 2564310054995215 -597 (3.02569e-180)}
; 1.1670290000363847671138728401274420320987701416015625p-330 - 1.5693912130666978210769002544111572206020355224609375p-597 == 1.1670290000363847671138728401274420320987701416015625p-330
; [HW: 1.1670290000363847671138728401274420320987701416015625p-330] 

; mpf : + 752231742323929 -330
; mpfd: + 752231742323929 -330 (5.3356e-100) class: Pos. norm. non-zero
; hwf : + 752231742323929 -330 (5.3356e-100) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110101 #b0010101011000010011010011001110010100011110011011001)))
(assert (= y (fp #b0 #b00110101010 #b1001000111000011100111110101111011000000010100001111)))
(assert (= r (fp #b0 #b01010110101 #b0010101011000010011010011001110010100011110011011001)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
