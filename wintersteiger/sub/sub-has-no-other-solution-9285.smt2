(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.1876939037901659279583554962300695478916168212890625p-555 {- 845298195169105 -555 (-1.00706e-167)}
; Y = 1.7914684854995435170366135935182683169841766357421875p-318 {+ 3564457176371235 -318 (3.35483e-096)}
; -1.1876939037901659279583554962300695478916168212890625p-555 - 1.7914684854995435170366135935182683169841766357421875p-318 == -1.7914684854995435170366135935182683169841766357421875p-318
; [HW: -1.7914684854995435170366135935182683169841766357421875p-318] 

; mpf : - 3564457176371235 -318
; mpfd: - 3564457176371235 -318 (-3.35483e-096) class: Neg. norm. non-zero
; hwf : - 3564457176371235 -318 (-3.35483e-096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111010100 #b0011000000001100101101010010101001101111111101010001)))
(assert (= y (fp #b0 #b01011000001 #b1100101010011101101011011011110100001001000000100011)))
(assert (= r (fp #b1 #b01011000001 #b1100101010011101101011011011110100001001000000100011)))
(assert  (not (= (fp.sub roundTowardZero x y) r)))
(check-sat)
(exit)
