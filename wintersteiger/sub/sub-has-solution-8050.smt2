(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0748741910923220732598792892531491816043853759765625p-712 {+ 337203379103049 -712 (4.98885e-215)}
; Y = -1.6862133063717890113508701688260771334171295166015625p908 {- 3090429990872665 908 (-3.64879e+273)}
; 1.0748741910923220732598792892531491816043853759765625p-712 - -1.6862133063717890113508701688260771334171295166015625p908 == 1.6862133063717890113508701688260771334171295166015625p908
; [HW: 1.6862133063717890113508701688260771334171295166015625p908] 

; mpf : + 3090429990872665 908
; mpfd: + 3090429990872665 908 (3.64879e+273) class: Pos. norm. non-zero
; hwf : + 3090429990872665 908 (3.64879e+273) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110111 #b0001001100101010111101000111101000001110010101001001)))
(assert (= y (fp #b1 #b11110001011 #b1010111110101011101011001101110011110010011001011001)))
(assert (= r (fp #b0 #b11110001011 #b1010111110101011101011001101110011110010011001011001)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
