(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5698713699349944317162908191676251590251922607421875p564 {- 2566472489288355 564 (-9.47942e+169)}
; Y = 1.615761633943958219816749988240189850330352783203125p-953 {+ 2773143865179058 -953 (2.12222e-287)}
; -1.5698713699349944317162908191676251590251922607421875p564 - 1.615761633943958219816749988240189850330352783203125p-953 == -1.5698713699349944317162908191676251590251922607421875p564
; [HW: -1.5698713699349944317162908191676251590251922607421875p564] 

; mpf : - 2566472489288355 564
; mpfd: - 2566472489288355 564 (-9.47942e+169) class: Neg. norm. non-zero
; hwf : - 2566472489288355 564 (-9.47942e+169) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000110011 #b1001000111100011000101110001000011001100001010100011)))
(assert (= y (fp #b0 #b00001000110 #b1001110110100010100011011110111111101011101110110010)))
(assert (= r (fp #b1 #b11000110011 #b1001000111100011000101110001000011001100001010100011)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
