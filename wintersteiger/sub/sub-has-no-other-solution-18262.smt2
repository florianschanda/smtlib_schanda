(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -0.380753047960073143229919878649525344371795654296875p-1022 {- 1714759284913166 -1023 (-8.47204e-309)}
; Y = -1.0610061318273633634845509732258506119251251220703125p-724 {- 274747192565029 -724 (-1.20227e-218)}
; -0.380753047960073143229919878649525344371795654296875p-1022 - -1.0610061318273633634845509732258506119251251220703125p-724 == 1.06100613182736314143994604819454252719879150390625p-724
; [HW: 1.06100613182736314143994604819454252719879150390625p-724] 

; mpf : + 274747192565028 -724
; mpfd: + 274747192565028 -724 (1.20227e-218) class: Pos. norm. non-zero
; hwf : + 274747192565028 -724 (1.20227e-218) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b0110000101111001000010000010000011010111010000001110)))
(assert (= y (fp #b1 #b00100101011 #b0000111110011110000110010000110100001101110100100101)))
(assert (= r (fp #b0 #b00100101011 #b0000111110011110000110010000110100001101110100100100)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
