(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.11251131219027410423905166680924594402313232421875p145 {+ 506705903655084 145 (4.96197e+043)}
; Y = 1.1899445315483287988200800100457854568958282470703125p623 {+ 855434121502117 623 (4.14204e+187)}
; 1.11251131219027410423905166680924594402313232421875p145 - 1.1899445315483287988200800100457854568958282470703125p623 == -1.18994453154832857677547508501447737216949462890625p623
; [HW: -1.18994453154832857677547508501447737216949462890625p623] 

; mpf : - 855434121502116 623
; mpfd: - 855434121502116 623 (-4.14204e+187) class: Neg. norm. non-zero
; hwf : - 855434121502116 623 (-4.14204e+187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010010000 #b0001110011001101100010101001011001001001100010101100)))
(assert (= y (fp #b0 #b11001101110 #b0011000010100000001101000110111100001101110110100101)))
(assert (= r (fp #b1 #b11001101110 #b0011000010100000001101000110111100001101110110100100)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
