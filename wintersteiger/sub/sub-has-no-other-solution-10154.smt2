(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.28323572833329802023172305780462920665740966796875p542 {- 1275580320579852 542 (-1.84741e+163)}
; Y = 1.064510639890964949216822788002900779247283935546875p-893 {+ 290530093774382 -893 (1.612e-269)}
; -1.28323572833329802023172305780462920665740966796875p542 - 1.064510639890964949216822788002900779247283935546875p-893 == -1.2832357283332982422763279828359372913837432861328125p542
; [HW: -1.2832357283332982422763279828359372913837432861328125p542] 

; mpf : - 1275580320579853 542
; mpfd: - 1275580320579853 542 (-1.84741e+163) class: Neg. norm. non-zero
; hwf : - 1275580320579853 542 (-1.84741e+163) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000011101 #b0100100010000010001000101111111001000000000100001100)))
(assert (= y (fp #b0 #b00010000010 #b0001000010000011110001001111000010010011011000101110)))
(assert (= r (fp #b1 #b11000011101 #b0100100010000010001000101111111001000000000100001101)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
