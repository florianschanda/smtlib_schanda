(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6261766262649530734307745660771615803241729736328125p-398 {- 2820048820714957 -398 (-2.51901e-120)}
; Y = -1.753046112000832490451784906326793134212493896484375p271 {- 3391418189399750 271 (-6.65154e+081)}
; -1.6261766262649530734307745660771615803241729736328125p-398 - -1.753046112000832490451784906326793134212493896484375p271 == 1.753046112000832490451784906326793134212493896484375p271
; [HW: 1.753046112000832490451784906326793134212493896484375p271] 

; mpf : + 3391418189399750 271
; mpfd: + 3391418189399750 271 (6.65154e+081) class: Pos. norm. non-zero
; hwf : + 3391418189399750 271 (6.65154e+081) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001110001 #b1010000001001101000111001000001101010011110111001101)))
(assert (= y (fp #b1 #b10100001110 #b1100000011000111101000010100011101101100011011000110)))
(assert (= r (fp #b0 #b10100001110 #b1100000011000111101000010100011101101100011011000110)))
(assert  (not (= (fp.sub roundTowardPositive x y) r)))
(check-sat)
(exit)
