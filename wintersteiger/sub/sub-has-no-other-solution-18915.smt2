(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.7968240017101859695713983455789275467395782470703125p-949 {+ 3588576277181861 -949 (3.77607e-286)}
; Y = 1.35407591355849721281856545829214155673980712890625p355 {+ 1594616152362916 355 (9.93783e+106)}
; 1.7968240017101859695713983455789275467395782470703125p-949 - 1.35407591355849721281856545829214155673980712890625p355 == -1.35407591355849721281856545829214155673980712890625p355
; [HW: -1.35407591355849721281856545829214155673980712890625p355] 

; mpf : - 1594616152362916 355
; mpfd: - 1594616152362916 355 (-9.93783e+106) class: Neg. norm. non-zero
; hwf : - 1594616152362916 355 (-9.93783e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001001010 #b1100101111111100101010000110010000000011010110100101)))
(assert (= y (fp #b0 #b10101100010 #b0101101010100100101110000001010100001000111110100100)))
(assert (= r (fp #b1 #b10101100010 #b0101101010100100101110000001010100001000111110100100)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
