(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.468850134143563135324939139536581933498382568359375p557 {- 2111513289421558 557 (-6.92923e+167)}
; Y = -1.2230725002421987124279212366673164069652557373046875p-860 {- 1004629228967371 -860 (-1.59095e-259)}
; -1.468850134143563135324939139536581933498382568359375p557 - -1.2230725002421987124279212366673164069652557373046875p-860 == -1.468850134143563135324939139536581933498382568359375p557
; [HW: -1.468850134143563135324939139536581933498382568359375p557] 

; mpf : - 2111513289421558 557
; mpfd: - 2111513289421558 557 (-6.92923e+167) class: Neg. norm. non-zero
; hwf : - 2111513289421558 557 (-6.92923e+167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000101100 #b0111100000000110100011111111100011011111001011110110)))
(assert (= y (fp #b1 #b00010100011 #b0011100100011011010001111000010100101101010111001011)))
(assert (= r (fp #b1 #b11000101100 #b0111100000000110100011111111100011011111001011110110)))
(assert  (not (= (fp.sub roundTowardNegative x y) r)))
(check-sat)
(exit)
