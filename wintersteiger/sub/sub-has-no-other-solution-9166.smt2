(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9388886087162962024166290575521998107433319091796875p-281 {+ 4228378388357115 -281 (4.99027e-085)}
; Y = -1.837490761754218215884293385897763073444366455078125p279 {- 3771723082562530 279 (-1.78482e+084)}
; 1.9388886087162962024166290575521998107433319091796875p-281 - -1.837490761754218215884293385897763073444366455078125p279 == 1.837490761754218215884293385897763073444366455078125p279
; [HW: 1.837490761754218215884293385897763073444366455078125p279] 

; mpf : + 3771723082562530 279
; mpfd: + 3771723082562530 279 (1.78482e+084) class: Pos. norm. non-zero
; hwf : + 3771723082562530 279 (1.78482e+084) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100110 #b1111000001011011000000001111110100000101111111111011)))
(assert (= y (fp #b1 #b10100010110 #b1101011001100101110010110110100001101111101111100010)))
(assert (= r (fp #b0 #b10100010110 #b1101011001100101110010110110100001101111101111100010)))
(assert  (not (= (fp.sub roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
