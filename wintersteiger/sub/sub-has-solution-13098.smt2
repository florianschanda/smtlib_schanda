(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3870112622294297199943002851796336472034454345703125p-525 {- 1742943776364645 -525 (-1.26279e-158)}
; Y = 1.3075540979977440247949971308116801083087921142578125p-895 {+ 1385100521138909 -895 (4.9501e-270)}
; -1.3870112622294297199943002851796336472034454345703125p-525 - 1.3075540979977440247949971308116801083087921142578125p-895 == -1.387011262229429942038905210210941731929779052734375p-525
; [HW: -1.387011262229429942038905210210941731929779052734375p-525] 

; mpf : - 1742943776364646 -525
; mpfd: - 1742943776364646 -525 (-1.26279e-158) class: Neg. norm. non-zero
; hwf : - 1742943776364646 -525 (-1.26279e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111110010 #b0110001100010011001010111000101001110101100001100101)))
(assert (= y (fp #b0 #b00010000000 #b0100111010111011110111011000100010100110101011011101)))
(assert (= r (fp #b1 #b00111110010 #b0110001100010011001010111000101001110101100001100110)))
(assert (= (fp.sub roundTowardNegative x y) r))
(check-sat)
(exit)
