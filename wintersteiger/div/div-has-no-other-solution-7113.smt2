(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -0.89809432923530696513125803903676569461822509765625p-1022 {- 4044657286487684 -1023 (-1.99833e-308)}
; Y = 1.854695083699506863439410153659991919994354248046875p-933 {+ 3849204460464494 -933 (2.55439e-281)}
; -0.89809432923530696513125803903676569461822509765625p-1022 / 1.854695083699506863439410153659991919994354248046875p-933 == -1.9369099257952504533619730864302255213260650634765625p-91
; [HW: -1.9369099257952504533619730864302255213260650634765625p-91] 

; mpf : - 4219467192691209 -91
; mpfd: - 4219467192691209 -91 (-7.82312e-028) class: Neg. norm. non-zero
; hwf : - 4219467192691209 -91 (-7.82312e-028) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000000000 #b1110010111101001100000101000110011001001111010000100)))
(assert (= y (fp #b0 #b00001011010 #b1101101011001101010011000000100010001010100101101110)))
(assert (= r (fp #b1 #b01110100100 #b1110111111011001010101000011001010010110101000001001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
