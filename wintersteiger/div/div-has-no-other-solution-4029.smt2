(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.174255050673167932728802043129689991474151611328125p-737 {- 784774981279106 -737 (-1.62426e-222)}
; Y = -1.1916982611961801641342617585905827581882476806640625p-447 {- 863332217690689 -447 (-3.27913e-135)}
; -1.174255050673167932728802043129689991474151611328125p-737 / -1.1916982611961801641342617585905827581882476806640625p-447 == 1.970725457792472656848303813603706657886505126953125p-291
; [HW: 1.970725457792472656848303813603706657886505126953125p-291] 

; mpf : + 4371758809993234 -291
; mpfd: + 4371758809993234 -291 (4.95333e-088) class: Pos. norm. non-zero
; hwf : + 4371758809993234 -291 (4.95333e-088) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100011110 #b0010110010011011111110101001111111001101110110000010)))
(assert (= y (fp #b1 #b01001000000 #b0011000100010011001000110010001010001001101001000001)))
(assert (= r (fp #b0 #b01011011100 #b1111100010000001011101101010111010011101000000010010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
