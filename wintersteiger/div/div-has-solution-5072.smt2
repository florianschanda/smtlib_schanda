(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7090848284638189280570941264159046113491058349609375p-241 {- 3193434169243727 -241 (-4.83654e-073)}
; Y = -1.1146566718478487789667497054324485361576080322265625p-705 {- 516367744609513 -705 (-6.62208e-213)}
; -1.7090848284638189280570941264159046113491058349609375p-241 / -1.1146566718478487789667497054324485361576080322265625p-705 == 1.5332836304030215135441039819852448999881744384765625p464
; [HW: 1.5332836304030215135441039819852448999881744384765625p464] 

; mpf : + 2401695959165833 464
; mpfd: + 2401695959165833 464 (7.30366e+139) class: Pos. norm. non-zero
; hwf : + 2401695959165833 464 (7.30366e+139) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100001110 #b1011010110000110100101010101010001010111100001001111)))
(assert (= y (fp #b1 #b00100111110 #b0001110101011010001000111011111111011010110011101001)))
(assert (= r (fp #b0 #b10111001111 #b1000100010000101010001101010100000010010101110001001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
