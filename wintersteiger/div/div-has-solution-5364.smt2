(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1502486422802806753651339022326283156871795654296875p-154 {- 676659729386395 -154 (-5.03701e-047)}
; Y = 1.27337205064755831784850670373998582363128662109375p-419 {+ 1231158265429852 -419 (9.40561e-127)}
; -1.1502486422802806753651339022326283156871795654296875p-154 / 1.27337205064755831784850670373998582363128662109375p-419 == -1.8066183276055653994518479521502740681171417236328125p264
; [HW: -1.8066183276055653994518479521502740681171417236328125p264] 

; mpf : - 3632685999634637 264
; mpfd: - 3632685999634637 264 (-5.35532e+079) class: Neg. norm. non-zero
; hwf : - 3632685999634637 264 (-5.35532e+079) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101100101 #b0010011001110110101100011110110011011100101110011011)))
(assert (= y (fp #b0 #b01001011100 #b0100010111111011101101011111000100101011111101011100)))
(assert (= r (fp #b1 #b10100000111 #b1100111001111110100010011110100101101011100011001101)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
