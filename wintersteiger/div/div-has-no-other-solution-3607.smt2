(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.228520121566603062746025898377411067485809326171875p-589 {+ 1029163134334014 -589 (6.06338e-178)}
; Y = -1.656542752658364481277430968475528061389923095703125p407 {- 2956805696225010 407 (-5.47534e+122)}
; 1.228520121566603062746025898377411067485809326171875p-589 / -1.656542752658364481277430968475528061389923095703125p407 == -1.4832338248984096029658985571586526930332183837890625p-997
; [HW: -1.4832338248984096029658985571586526930332183837890625p-997] 

; mpf : - 2176291673745297 -997
; mpfd: - 2176291673745297 -997 (-1.1074e-300) class: Neg. norm. non-zero
; hwf : - 2176291673745297 -997 (-1.1074e-300) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110110010 #b0011101010000000010010110111000010011011010000111110)))
(assert (= y (fp #b1 #b10110010110 #b1010100000010011001011111001001100010111111011110010)))
(assert (= r (fp #b1 #b00000011010 #b0111101110110101001101100100001001000010011110010001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
