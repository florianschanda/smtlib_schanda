(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.747860323653632530493950980599038302898406982421875p574 {+ 3368063474931678 574 (1.08075e+173)}
; Y = -1.887952679013369827742963025229983031749725341796875p799 {- 3998983354327246 799 (-6.29445e+240)}
; 1.747860323653632530493950980599038302898406982421875p574 / -1.887952679013369827742963025229983031749725341796875p799 == -1.851593361510577295803159358911216259002685546875p-226
; [HW: -1.851593361510577295803159358911216259002685546875p-226] 

; mpf : - 3835235545570224 -226
; mpfd: - 3835235545570224 -226 (-1.71699e-068) class: Neg. norm. non-zero
; hwf : - 3835235545570224 -226 (-1.71699e-068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11000111101 #b1011111101110011110001100011000000010001011111011110)))
(assert (= y (fp #b1 #b11100011110 #b1110001101010000110111011110010011000010000011001110)))
(assert (= r (fp #b1 #b01100011101 #b1101101000000010000001011100010100101101101110110000)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
