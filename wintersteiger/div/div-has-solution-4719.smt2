(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6285442916387327105809390559443272650241851806640625p-871 {- 2830711837610049 -871 (-1.03436e-262)}
; Y = -1.0429489926581803072025422807200811803340911865234375p-538 {- 193425067331319 -538 (-1.15911e-162)}
; -1.6285442916387327105809390559443272650241851806640625p-871 / -1.0429489926581803072025422807200811803340911865234375p-538 == 1.5614802862870948985118957352824509143829345703125p-333
; [HW: 1.5614802862870948985118957352824509143829345703125p-333] 

; mpf : + 2528682408098440 -333
; mpfd: + 2528682408098440 -333 (8.92376e-101) class: Pos. norm. non-zero
; hwf : + 2528682408098440 -333 (8.92376e-101) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010011000 #b1010000011101000010001110101100010101101000001000001)))
(assert (= y (fp #b1 #b00111100101 #b0000101011111110101101001000011011011100111011110111)))
(assert (= r (fp #b0 #b01010110010 #b1000111110111101001011000000101011110011101010001000)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
