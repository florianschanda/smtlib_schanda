(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.2877177128184709165026333721471019089221954345703125p-385 {- 1295765384237157 -385 (-1.63408e-116)}
; Y = -1.08115422174589870252248147153295576572418212890625p-85 {- 365486122814372 -85 (-2.79472e-026)}
; -1.2877177128184709165026333721471019089221954345703125p-385 / -1.08115422174589870252248147153295576572418212890625p-85 == 1.191058303170664967041147974669001996517181396484375p-300
; [HW: 1.191058303170664967041147974669001996517181396484375p-300] 

; mpf : + 860450102965446 -300
; mpfd: + 860450102965446 -300 (5.84702e-091) class: Pos. norm. non-zero
; hwf : + 860450102965446 -300 (5.84702e-091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001111110 #b0100100110100111110111100011011100001001000001100101)))
(assert (= y (fp #b1 #b01110101010 #b0001010011000110100001011110100001010100101110100100)))
(assert (= r (fp #b0 #b01011010011 #b0011000011101001001100100110101110111111010011000110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
