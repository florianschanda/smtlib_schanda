(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0119976038451394817485606836271472275257110595703125p167 {+ 54032404206309 167 (1.89317e+050)}
; Y = -1.2764407026945054912658861212548799812793731689453125p1007 {- 1244978245645013 1007 (-1.75068e+303)}
; 1.0119976038451394817485606836271472275257110595703125p167 / -1.2764407026945054912658861212548799812793731689453125p1007 == -1.5856554898458827818075178583967499434947967529296875p-841
; [HW: -1.5856554898458827818075178583967499434947967529296875p-841] 

; mpf : - 2637557845837403 -841
; mpfd: - 2637557845837403 -841 (-1.08139e-253) class: Neg. norm. non-zero
; hwf : - 2637557845837403 -841 (-1.08139e-253) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010100110 #b0000001100010010010001100110010000100101001011100101)))
(assert (= y (fp #b1 #b11111101110 #b0100011011000100110100010110000101011011001011010101)))
(assert (= r (fp #b1 #b00010110110 #b1001010111101101100001001010011110011100011001011011)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
