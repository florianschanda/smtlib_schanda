(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.19241850389459447256967905559577047824859619140625p-846 {+ 866575902438884 -846 (2.54128e-255)}
; Y = -1.704047605043935487145745355519466102123260498046875p-202 {- 3170748531726958 -202 (-2.65108e-061)}
; 1.19241850389459447256967905559577047824859619140625p-846 / -1.704047605043935487145745355519466102123260498046875p-202 == -1.3995131360943997567147789595765061676502227783203125p-645
; [HW: -1.3995131360943997567147789595765061676502227783203125p-645] 

; mpf : - 1799247210844357 -645
; mpfd: - 1799247210844357 -645 (-9.58583e-195) class: Neg. norm. non-zero
; hwf : - 1799247210844357 -645 (-9.58583e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010110001 #b0011000101000010010101101100110101011111010111100100)))
(assert (= y (fp #b1 #b01100110101 #b1011010000111100011101101011111001111101101001101110)))
(assert (= r (fp #b1 #b00101111010 #b0110011001000110011111100010110111011001000011000101)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
