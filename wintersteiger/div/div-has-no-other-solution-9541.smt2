(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.157245294510606203886027287808246910572052001953125p-286 {- 708169849763730 -286 (-9.30779e-087)}
; Y = 1.2796568988668415300935521372593939304351806640625p-545 {+ 1259462705528296 -545 (1.11108e-164)}
; -1.157245294510606203886027287808246910572052001953125p-286 / 1.2796568988668415300935521372593939304351806640625p-545 == -1.80868058545281495952394834603182971477508544921875p258
; [HW: -1.80868058545281495952394834603182971477508544921875p258] 

; mpf : - 3641973583307052 258
; mpfd: - 3641973583307052 258 (-8.37724e+077) class: Neg. norm. non-zero
; hwf : - 3641973583307052 258 (-8.37724e+077) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100001 #b0010100001000001001110100100010101011111011110010010)))
(assert (= y (fp #b0 #b00111011110 #b0100011110010111100110000011001010111011110111101000)))
(assert (= r (fp #b1 #b10100000001 #b1100111100000101101100001101101101101110000100101100)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
