(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.606971861598896378353629188495688140392303466796875p-54 {- 2733558249721166 -54 (-8.92049e-017)}
; Y = 1.167603230390656943171734383213333785533905029296875p35 {+ 754817845933454 35 (4.01185e+010)}
; -1.606971861598896378353629188495688140392303466796875p-54 / 1.167603230390656943171734383213333785533905029296875p35 == -1.3762996022726274869540930012590251863002777099609375p-89
; [HW: -1.3762996022726274869540930012590251863002777099609375p-89] 

; mpf : - 1694702748574671 -89
; mpfd: - 1694702748574671 -89 (-2.22353e-027) class: Neg. norm. non-zero
; hwf : - 1694702748574671 -89 (-2.22353e-027) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111001001 #b1001101101100010100000100000011100101000110101001110)))
(assert (= y (fp #b0 #b10000100010 #b0010101011101000000010111001100100111011010110001110)))
(assert (= r (fp #b1 #b01110100110 #b0110000001010101001010111011010101000010001111001111)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
