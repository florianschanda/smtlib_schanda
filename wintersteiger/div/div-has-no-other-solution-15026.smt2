(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1288862286382925770311658197897486388683319091796875p281 {+ 580451971268603 281 (4.3861e+084)}
; Y = 1.845988772490374518753242227830924093723297119140625p-637 {+ 3809994720547274 -637 (3.23684e-192)}
; 1.1288862286382925770311658197897486388683319091796875p281 / 1.845988772490374518753242227830924093723297119140625p-637 == 1.223069441657916645027626145747490227222442626953125p917
; [HW: 1.223069441657916645027626145747490227222442626953125p917] 

; mpf : + 1004615454328338 917
; mpfd: + 1004615454328338 917 (1.35506e+276) class: Pos. norm. non-zero
; hwf : + 1004615454328338 917 (1.35506e+276) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100011000 #b0010000011111110101100000001100011100111111111111011)))
(assert (= y (fp #b0 #b00110000010 #b1101100010010010101110000101111010100001000111001010)))
(assert (= r (fp #b0 #b11110010100 #b0011100100011011000101000011010010101000011000010010)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
