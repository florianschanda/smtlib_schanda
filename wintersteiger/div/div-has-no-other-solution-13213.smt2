(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6264526519244755231596855082898400723934173583984375p-287 {+ 2821291929772327 -287 (6.54083e-087)}
; Y = 1.494838816523711866324219954549334943294525146484375p-230 {+ 2228555909704646 -230 (8.66354e-070)}
; 1.6264526519244755231596855082898400723934173583984375p-287 / 1.494838816523711866324219954549334943294525146484375p-230 == 1.0880455029304332281725464781629852950572967529296875p-57
; [HW: 1.0880455029304332281725464781629852950572967529296875p-57] 

; mpf : + 396521694189147 -57
; mpfd: + 396521694189147 -57 (7.54983e-018) class: Pos. norm. non-zero
; hwf : + 396521694189147 -57 (7.54983e-018) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011100000 #b1010000001011111001100110111010010000010000100100111)))
(assert (= y (fp #b0 #b01100011001 #b0111111010101101110000011011010111000010101111000110)))
(assert (= r (fp #b0 #b01111000110 #b0001011010001010001001100110101110100101011001011011)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
