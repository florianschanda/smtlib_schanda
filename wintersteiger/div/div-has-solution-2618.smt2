(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.636169018047070711219248551060445606708526611328125p-115 {+ 2865050552621442 -115 (3.93893e-035)}
; Y = -1.00196878126013455556631015497259795665740966796875p115 {- 8866602549516 115 (-4.16202e+034)}
; 1.636169018047070711219248551060445606708526611328125p-115 / -1.00196878126013455556631015497259795665740966796875p115 == -1.6329540886386986198175463869119994342327117919921875p-230
; [HW: -1.6329540886386986198175463869119994342327117919921875p-230] 

; mpf : - 2850571797735875 -230
; mpfd: - 2850571797735875 -230 (-9.46401e-070) class: Neg. norm. non-zero
; hwf : - 2850571797735875 -230 (-9.46401e-070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110001100 #b1010001011011011111110010000011100111101100110000010)))
(assert (= y (fp #b1 #b10001110010 #b0000000010000001000001101010101100100000000100001100)))
(assert (= r (fp #b1 #b01100011001 #b1010001000001001010001110111011010010010100111000011)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
