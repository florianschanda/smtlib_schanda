(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.496960473471293351366284696268849074840545654296875p-85 {- 2238111003143182 -85 (-3.86955e-026)}
; Y = 1.508803418491130088341378723271191120147705078125p529 {+ 2291446885921488 529 (2.65155e+159)}
; -1.496960473471293351366284696268849074840545654296875p-85 / 1.508803418491130088341378723271191120147705078125p529 == -1.984301540048629686197045884910039603710174560546875p-615
; [HW: -1.984301540048629686197045884910039603710174560546875p-615] 

; mpf : - 4432900048983214 -615
; mpfd: - 4432900048983214 -615 (-1.45935e-185) class: Neg. norm. non-zero
; hwf : - 4432900048983214 -615 (-1.45935e-185) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110101010 #b0111111100111000110011010011010011110110110000001110)))
(assert (= y (fp #b0 #b11000010000 #b1000001001000000111100001101101010000011001011010000)))
(assert (= r (fp #b1 #b00110011000 #b1111101111111011001011111000101111101001010010101110)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
