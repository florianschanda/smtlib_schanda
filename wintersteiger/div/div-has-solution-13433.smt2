(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0476627042779649290338284117751754820346832275390625p-855 {- 214653737225713 -855 (-4.36089e-258)}
; Y = -1.66159882935792335700853072921745479106903076171875p-942 {- 2979576241365100 -942 (-4.46962e-284)}
; -1.0476627042779649290338284117751754820346832275390625p-855 / -1.66159882935792335700853072921745479106903076171875p-942 == 1.261029661031722870490057175629772245883941650390625p86
; [HW: 1.261029661031722870490057175629772245883941650390625p86] 

; mpf : + 1175573084155114 86
; mpfd: + 1175573084155114 86 (9.75674e+025) class: Pos. norm. non-zero
; hwf : + 1175573084155114 86 (9.75674e+025) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010101000 #b0000110000110011100111110111110000011100110111110001)))
(assert (= y (fp #b1 #b00001010001 #b1010100101011110100010100111011100101010000001101100)))
(assert (= r (fp #b0 #b10001010101 #b0100001011010010110101110000000101101010110011101010)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
