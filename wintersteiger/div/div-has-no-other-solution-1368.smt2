(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.272371403718301596796891317353583872318267822265625p960 {+ 1226651752292122 960 (1.23997e+289)}
; Y = 1.091075459621084320360751007683575153350830078125p866 {+ 410167406012112 866 (5.36823e+260)}
; 1.272371403718301596796891317353583872318267822265625p960 / 1.091075459621084320360751007683575153350830078125p866 == 1.1661626081849358893549606364103965461254119873046875p94
; [HW: 1.1661626081849358893549606364103965461254119873046875p94] 

; mpf : + 748329860304587 94
; mpfd: + 748329860304587 94 (2.30982e+028) class: Pos. norm. non-zero
; hwf : + 748329860304587 94 (2.30982e+028) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110111111 #b0100010110111010001000011101111101010101111100011010)))
(assert (= y (fp #b0 #b11101100001 #b0001011101010000101110001010100010001010011011010000)))
(assert (= r (fp #b0 #b10001011101 #b0010101010001001101000011111011111111000111011001011)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
