(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.4262139738083072781904547809972427785396575927734375p827 {- 1919497093623191 827 (-1.27641e+249)}
; Y = 1.167338824061257440689587383531033992767333984375p501 {+ 753627065686896 501 (7.64231e+150)}
; -1.4262139738083072781904547809972427785396575927734375p827 / 1.167338824061257440689587383531033992767333984375p501 == -1.22176521881316713091791825718246400356292724609375p326
; [HW: -1.22176521881316713091791825718246400356292724609375p326] 

; mpf : - 998741756810716 326
; mpfd: - 998741756810716 326 (-1.67019e+098) class: Neg. norm. non-zero
; hwf : - 998741756810716 326 (-1.67019e+098) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100111010 #b0110110100011100010110111110011010011010110110010111)))
(assert (= y (fp #b0 #b10111110100 #b0010101011010110101101111001100010110001101101110000)))
(assert (= r (fp #b1 #b10101000101 #b0011100011000101100110101111101000110001010111011100)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
