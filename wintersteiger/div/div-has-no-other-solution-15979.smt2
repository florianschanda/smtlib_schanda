(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9336436107262493511171896898304112255573272705078125p607 {- 4204757017363581 607 (-1.02703e+183)}
; Y = 1.54116143034152930368918532622046768665313720703125p728 {+ 2437174416033396 728 (2.17613e+219)}
; -1.9336436107262493511171896898304112255573272705078125p607 / 1.54116143034152930368918532622046768665313720703125p728 == -1.2546664954480102327494250857853330671787261962890625p-121
; [HW: -1.2546664954480102327494250857853330671787261962890625p-121] 

; mpf : - 1146915934003409 -121
; mpfd: - 1146915934003409 -121 (-4.71953e-037) class: Neg. norm. non-zero
; hwf : - 1146915934003409 -121 (-4.71953e-037) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001011110 #b1110111100000011010001001000011000110000010001111101)))
(assert (= y (fp #b0 #b11011010111 #b1000101010001001100011100011010100101100011001110100)))
(assert (= r (fp #b1 #b01110000110 #b0100000100110001110100101100110101010110000011010001)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
