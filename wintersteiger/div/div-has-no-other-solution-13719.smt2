(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.286063086949947642523284230264835059642791748046875p-503 {+ 1288313611792238 -503 (4.91105e-152)}
; Y = 1.5215989217635967900577043110388331115245819091796875p43 {+ 2349072709691387 43 (1.33841e+013)}
; 1.286063086949947642523284230264835059642791748046875p-503 / 1.5215989217635967900577043110388331115245819091796875p43 == 1.6904100923774929565723823543521575629711151123046875p-547
; [HW: 1.6904100923774929565723823543521575629711151123046875p-547] 

; mpf : + 3109330634764107 -547
; mpfd: + 3109330634764107 -547 (3.66931e-165) class: Pos. norm. non-zero
; hwf : + 3109330634764107 -547 (3.66931e-165) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000001000 #b0100100100111011011011100011001100001010111101101110)))
(assert (= y (fp #b0 #b10000101010 #b1000010110000111100000011100011010011010011111111011)))
(assert (= r (fp #b0 #b00111011100 #b1011000010111110101101110011111110010110111101001011)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
