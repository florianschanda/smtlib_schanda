(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.186992098014164387365099173621274530887603759765625p-757 {- 842137542937818 -757 (-1.56582e-228)}
; Y = 1.51508174539811069081451933016069233417510986328125p-225 {+ 2319721956640276 -225 (2.80988e-068)}
; -1.186992098014164387365099173621274530887603759765625p-757 / 1.51508174539811069081451933016069233417510986328125p-225 == -1.566901722127559626329684761003591120243072509765625p-533
; [HW: -1.566901722127559626329684761003591120243072509765625p-533] 

; mpf : - 2553098384529370 -533
; mpfd: - 2553098384529370 -533 (-5.57255e-161) class: Neg. norm. non-zero
; hwf : - 2553098384529370 -533 (-5.57255e-161) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100001010 #b0010111111011110101101101101000110010100110011011010)))
(assert (= y (fp #b0 #b01100011110 #b1000001111011100011001011011001101000000011000010100)))
(assert (= r (fp #b1 #b00111101010 #b1001000100100000011110001010010010010101011111011010)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
