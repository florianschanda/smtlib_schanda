(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0528564759037368769867271112161688506603240966796875p676 {+ 238044405184187 676 (3.30101e+203)}
; Y = -1.87492219143151839233496502856723964214324951171875p951 {- 3940299255309164 951 (-3.56869e+286)}
; 1.0528564759037368769867271112161688506603240966796875p676 / -1.87492219143151839233496502856723964214324951171875p951 == -1.123093513656555852975316156516782939434051513671875p-276
; [HW: -1.123093513656555852975316156516782939434051513671875p-276] 

; mpf : - 554363902235390 -276
; mpfd: - 554363902235390 -276 (-9.2499e-084) class: Neg. norm. non-zero
; hwf : - 554363902235390 -276 (-9.2499e-084) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010100011 #b0000110110001000000000001000001101100011011010111011)))
(assert (= y (fp #b1 #b11110110110 #b1101111111111010111001101001011010111110001101101100)))
(assert (= r (fp #b1 #b01011101011 #b0001111110000011000011100111011110000001001011111110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
