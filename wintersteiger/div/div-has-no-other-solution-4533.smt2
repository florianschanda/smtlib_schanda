(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.235888639496955487828699915553443133831024169921875p66 {+ 1062347988939422 66 (9.11925e+019)}
; Y = -1.602467433894480652867287062690593302249908447265625p-159 {- 2713272110790042 -159 (-2.19291e-048)}
; 1.235888639496955487828699915553443133831024169921875p66 / -1.602467433894480652867287062690593302249908447265625p-159 == -1.5424820665383160989136968055390752851963043212890625p224
; [HW: -1.5424820665383160989136968055390752851963043212890625p224] 

; mpf : - 2443122032717137 224
; mpfd: - 2443122032717137 224 (-4.15852e+067) class: Neg. norm. non-zero
; hwf : - 2443122032717137 224 (-4.15852e+067) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001000001 #b0011110001100011001100101010100000100011001010011110)))
(assert (= y (fp #b1 #b01101100000 #b1001101000111011010011100100010101111011010110011010)))
(assert (= r (fp #b1 #b10011011111 #b1000101011100000000110101100111001110010110101010001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
