(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1412438957011554752085658037685789167881011962890625p273 {+ 636105956048081 273 (1.73208e+082)}
; Y = -1.7513113247651059811715867908787913620471954345703125p599 {- 3383605402251365 599 (-3.63355e+180)}
; 1.1412438957011554752085658037685789167881011962890625p273 / -1.7513113247651059811715867908787913620471954345703125p599 == -1.30330213659096205702780935098417103290557861328125p-327
; [HW: -1.30330213659096205702780935098417103290557861328125p-327] 

; mpf : - 1365951389331732 -327
; mpfd: - 1365951389331732 -327 (-4.76691e-099) class: Neg. norm. non-zero
; hwf : - 1365951389331732 -327 (-4.76691e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100010000 #b0010010000101000100011110101100011001011110011010001)))
(assert (= y (fp #b1 #b11001010110 #b1100000001010101111100000110000011111011000001100101)))
(assert (= r (fp #b1 #b01010111000 #b0100110110100101001101010111010101110111000100010100)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
