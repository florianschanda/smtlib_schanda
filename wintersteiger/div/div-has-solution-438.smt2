(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.7268342081979211055653422590694390237331390380859375p732 {- 3273370269200287 732 (-3.90128e+220)}
; Y = -1.005792195927294851998112790170125663280487060546875p-145 {- 26085731419822 -145 (-2.25506e-044)}
; -1.7268342081979211055653422590694390237331390380859375p732 / -1.005792195927294851998112790170125663280487060546875p-145 == 1.7168896469770855706116208239109255373477935791015625p877
; [HW: 1.7168896469770855706116208239109255373477935791015625p877] 

; mpf : + 3228583946991769 877
; mpfd: + 3228583946991769 877 (1.73001e+264) class: Pos. norm. non-zero
; hwf : + 3228583946991769 877 (1.73001e+264) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011011011 #b1011101000010001110011101000000111010010111110011111)))
(assert (= y (fp #b1 #b01101101110 #b0000000101111011100110001110110000010100011010101110)))
(assert (= r (fp #b0 #b11101101100 #b1011011110000110000101000111010010011011100010011001)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
