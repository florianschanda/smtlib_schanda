(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2467983453744977406785210405359975993633270263671875p-146 {+ 1111480936264243 -146 (1.39771e-044)}
; Y = -1.2449679409170146815455382238724268972873687744140625p-773 {- 1103237527431585 -773 (-2.50594e-233)}
; 1.2467983453744977406785210405359975993633270263671875p-146 / -1.2449679409170146815455382238724268972873687744140625p-773 == -1.001470242242651575992340440279804170131683349609375p627
; [HW: -1.001470242242651575992340440279804170131683349609375p627] 

; mpf : - 6621382416150 627
; mpfd: - 6621382416150 627 (-5.57757e+188) class: Neg. norm. non-zero
; hwf : - 6621382416150 627 (-5.57757e+188) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101101101 #b0011111100101110001011010010011000010111001000110011)))
(assert (= y (fp #b1 #b00011111010 #b0011111010110110001110000000111011001110100110100001)))
(assert (= r (fp #b1 #b11001110010 #b0000000001100000010110101001001001011001011100010110)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
