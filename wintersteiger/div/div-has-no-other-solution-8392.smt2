(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5425388896749068212699285140843130648136138916015625p480 {+ 2443377941373913 480 (4.81542e+144)}
; Y = 1.97471752775096209830962834530510008335113525390625p-528 {+ 4389737494770724 -528 (2.24733e-159)}
; 1.5425388896749068212699285140843130648136138916015625p480 / 1.97471752775096209830962834530510008335113525390625p-528 == 1.562288142984915140232260455377399921417236328125p1007
; [HW: 1.562288142984915140232260455377399921417236328125p1007] 

; mpf : + 2532320671221712 1007
; mpfd: + 2532320671221712 1007 (2.14273e+303) class: Pos. norm. non-zero
; hwf : + 2532320671221712 1007 (2.14273e+303) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111011111 #b1000101011100011110101000010001111110110001111011001)))
(assert (= y (fp #b0 #b00111101111 #b1111100110000111000101101000000010000111010000100100)))
(assert (= r (fp #b0 #b11111101110 #b1000111111110010000111011010000100001100011111010000)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
