(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.47625350610858330213659428409300744533538818359375p-125 {- 2144855112644508 -125 (-3.47066e-038)}
; Y = 1.148347437105637691701076619210653007030487060546875p192 {+ 668097462470318 192 (7.20829e+057)}
; -1.47625350610858330213659428409300744533538818359375p-125 / 1.148347437105637691701076619210653007030487060546875p192 == -1.2855460450448858988892197885434143245220184326171875p-317
; [HW: -1.2855460450448858988892197885434143245220184326171875p-317] 

; mpf : - 1285985062061267 -317
; mpfd: - 1285985062061267 -317 (-4.81481e-096) class: Neg. norm. non-zero
; hwf : - 1285985062061267 -317 (-4.81481e-096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000010 #b0111100111101011101111111111000101010111011110011100)))
(assert (= y (fp #b0 #b10010111111 #b0010010111111010000110001111111011010000011010101110)))
(assert (= r (fp #b1 #b01011000010 #b0100100100011001100010111010110011111000010011010011)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
