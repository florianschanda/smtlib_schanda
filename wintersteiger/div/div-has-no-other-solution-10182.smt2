(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.05157094763391878444735993980430066585540771484375p-55 {+ 232254900547260 -55 (2.9187e-017)}
; Y = -1.57131794858960827099281232221983373165130615234375p234 {- 2572987300378236 234 (-4.33794e+070)}
; 1.05157094763391878444735993980430066585540771484375p-55 / -1.57131794858960827099281232221983373165130615234375p234 == -1.338457246768922193069784043473191559314727783203125p-290
; [HW: -1.338457246768922193069784043473191559314727783203125p-290] 

; mpf : - 1524275930429362 -290
; mpfd: - 1524275930429362 -290 (-6.72831e-088) class: Neg. norm. non-zero
; hwf : - 1524275930429362 -290 (-6.72831e-088) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111001000 #b0000110100110011110000001110110110000010111010111100)))
(assert (= y (fp #b1 #b10011101001 #b1001001001000001111001001010000011001111011001111100)))
(assert (= r (fp #b1 #b01011011101 #b0101011010100101001000100101010111110111011110110010)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
