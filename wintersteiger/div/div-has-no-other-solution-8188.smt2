(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.198652438359883110052805932355113327503204345703125p-596 {+ 894651047373810 -596 (4.62185e-180)}
; Y = 1.4487330131853475290171218148316256701946258544921875p252 {+ 2020913830970371 252 (1.04845e+076)}
; 1.198652438359883110052805932355113327503204345703125p-596 / 1.4487330131853475290171218148316256701946258544921875p252 == 1.6547596105708819447244195544044487178325653076171875p-849
; [HW: 1.6547596105708819447244195544044487178325653076171875p-849] 

; mpf : + 2948775138184275 -849
; mpfd: + 2948775138184275 -849 (4.40827e-256) class: Pos. norm. non-zero
; hwf : + 2948775138184275 -849 (4.40827e-256) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101011 #b0011001011011010111000101101111000000110101111110010)))
(assert (= y (fp #b0 #b10011111011 #b0111001011100000001010101011000001000100010000000011)))
(assert (= r (fp #b0 #b00010101110 #b1010011110011110010100110110101000100100110001010011)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
