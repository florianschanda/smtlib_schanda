(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.5357735976509225839237160471384413540363311767578125p-514 {+ 2412909774735645 -514 (2.86358e-155)}
; Y = -1.8830426728320472928857043370953761041164398193359375p169 {- 3976870652318655 169 (-1.40906e+051)}
; 1.5357735976509225839237160471384413540363311767578125p-514 / -1.8830426728320472928857043370953761041164398193359375p169 == -1.6311617573075591902664882582030259072780609130859375p-684
; [HW: -1.6311617573075591902664882582030259072780609130859375p-684] 

; mpf : - 2842499855020831 -684
; mpfd: - 2842499855020831 -684 (-2.03226e-206) class: Neg. norm. non-zero
; hwf : - 2842499855020831 -684 (-2.03226e-206) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111111101 #b1000100100101000011101010101111111111000100100011101)))
(assert (= y (fp #b1 #b10010101000 #b1110001000001111000101011010100011001001001110111111)))
(assert (= r (fp #b1 #b00101010011 #b1010000110010011110100010010001000011111001100011111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
