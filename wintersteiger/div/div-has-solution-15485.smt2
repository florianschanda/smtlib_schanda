(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7397076355458700458456178239430300891399383544921875p-593 {+ 3331347031807491 -593 (5.36647e-179)}
; Y = -1.430616872062906441698260096018202602863311767578125p695 {- 1939325984561954 695 (-2.35164e+209)}
; 1.7397076355458700458456178239430300891399383544921875p-593 / -1.430616872062906441698260096018202602863311767578125p695 == -0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: -0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : - 1 -1023
; mpfd: - 1 -1023 (-4.94066e-324) class: Neg. denorm.
; hwf : - 1 -1023 (-4.94066e-324) class: Neg. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101110 #b1011110101011101011110101100011101000101011000000011)))
(assert (= y (fp #b1 #b11010110110 #b0110111000111100111010000100011010011101101100100010)))
(assert (= r (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
