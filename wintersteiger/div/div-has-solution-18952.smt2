(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.3473356352158976090294117966550402343273162841796875p-369 {+ 1564260637330811 -369 (1.12049e-111)}
; Y = 1.3506153972086039072308949471334926784038543701171875p325 {+ 1579031372219027 325 (9.23167e+097)}
; 1.3473356352158976090294117966550402343273162841796875p-369 / 1.3506153972086039072308949471334926784038543701171875p325 == 1.99514330726647326486045130877755582332611083984375p-695
; [HW: 1.99514330726647326486045130877755582332611083984375p-695] 

; mpf : + 4481727027785532 -695
; mpfd: + 4481727027785532 -695 (1.21374e-209) class: Pos. norm. non-zero
; hwf : + 4481727027785532 -695 (1.21374e-209) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010001110 #b0101100011101010111111001111100111111100110101111011)))
(assert (= y (fp #b0 #b10101000100 #b0101100111000001111011100100000001111100001010010011)))
(assert (= r (fp #b0 #b00101001000 #b1111111011000001101101100011011110001010111100111100)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
