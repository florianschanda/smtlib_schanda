(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8319082708775067391826496532303281128406524658203125p74 {+ 3746581778730373 74 (3.46038e+022)}
; Y = -1.34185267764146143321113413549028337001800537109375p-272 {- 1539567591641692 -272 (-1.76826e-082)}
; 1.8319082708775067391826496532303281128406524658203125p74 / -1.34185267764146143321113413549028337001800537109375p-272 == -1.365208194164357013988819744554348289966583251953125p346
; [HW: -1.365208194164357013988819744554348289966583251953125p346] 

; mpf : - 1644751487151250 346
; mpfd: - 1644751487151250 346 (-1.95694e+104) class: Neg. norm. non-zero
; hwf : - 1644751487151250 346 (-1.95694e+104) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001001001 #b1101010011110111111100001100000010110000110110000101)))
(assert (= y (fp #b1 #b01011101111 #b0101011110000011101010000011011010000101001001011100)))
(assert (= r (fp #b1 #b10101011001 #b0101110101111110010010001100001000101010110010010010)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
