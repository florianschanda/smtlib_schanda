(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9729752688647221869899794910452328622341156005859375p232 {+ 4381891058299871 232 (1.3617e+070)}
; Y = -1.342444177135754035390391436521895229816436767578125p-295 {- 1542231468543778 -295 (-2.10886e-089)}
; 1.9729752688647221869899794910452328622341156005859375p232 / -1.342444177135754035390391436521895229816436767578125p-295 == -1.4696888723330550075019118594354949891567230224609375p527
; [HW: -1.4696888723330550075019118594354949891567230224609375p527] 

; mpf : - 2115290630419215 527
; mpfd: - 2115290630419215 527 (-6.45703e+158) class: Neg. norm. non-zero
; hwf : - 2115290630419215 527 (-6.45703e+158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100111 #b1111100100010100111010000011111110010111001111011111)))
(assert (= y (fp #b1 #b01011011000 #b0101011110101010011010111110110110000000111100100010)))
(assert (= r (fp #b1 #b11000001110 #b0111100000111101100001111010100111110111001100001111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
