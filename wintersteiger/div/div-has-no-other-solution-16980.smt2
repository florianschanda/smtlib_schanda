(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.668646168234920512674079873249866068363189697265625p-196 {+ 3011314634105498 -196 (1.66144e-059)}
; Y = -1.35146380963930834440134276519529521465301513671875p527 {- 1582852282125804 527 (-5.93762e+158)}
; 1.668646168234920512674079873249866068363189697265625p-196 / -1.35146380963930834440134276519529521465301513671875p527 == -1.234695414211842479090819324483163654804229736328125p-723
; [HW: -1.234695414211842479090819324483163654804229736328125p-723] 

; mpf : - 1056974179990018 -723
; mpfd: - 1056974179990018 -723 (-2.79816e-218) class: Neg. norm. non-zero
; hwf : - 1056974179990018 -723 (-2.79816e-218) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01100111011 #b1010101100101100011001010011000100101010001010011010)))
(assert (= y (fp #b1 #b11000001110 #b0101100111111001100010000100000000100000110111101100)))
(assert (= r (fp #b1 #b00100101100 #b0011110000010100111111111010100010001111101000000010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
