(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1023934571047286912204299369477666914463043212890625p-376 {- 461139135262033 -376 (-7.16239e-114)}
; Y = 1.5309041248117065681100257279467768967151641845703125p565 {+ 2390979618671461 565 (1.84882e+170)}
; -1.1023934571047286912204299369477666914463043212890625p-376 / 1.5309041248117065681100257279467768967151641845703125p565 == -1.440186147829887630678058485500514507293701171875p-942
; [HW: -1.440186147829887630678058485500514507293701171875p-942] 

; mpf : - 1982422171340336 -942
; mpfd: - 1982422171340336 -942 (-3.87403e-284) class: Neg. norm. non-zero
; hwf : - 1982422171340336 -942 (-3.87403e-284) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010000111 #b0001101000110110011101010010010110010110110101010001)))
(assert (= y (fp #b0 #b11000110100 #b1000011111101001010101010010110101100000101101100101)))
(assert (= r (fp #b1 #b00001010001 #b0111000010110000000010100001010100010100111000110000)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
