(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.653996657314728668808356815134175121784210205078125p-643 {- 2945339102184162 -643 (-4.53156e-194)}
; Y = 1.5850147740411235641744269742048345506191253662109375p-877 {+ 2634672318377839 -877 (1.57299e-264)}
; -1.653996657314728668808356815134175121784210205078125p-643 / 1.5850147740411235641744269742048345506191253662109375p-877 == -1.04352128724814985361035724054090678691864013671875p234
; [HW: -1.04352128724814985361035724054090678691864013671875p234] 

; mpf : - 196002453033452 234
; mpfd: - 196002453033452 234 (-2.88085e+070) class: Neg. norm. non-zero
; hwf : - 196002453033452 234 (-2.88085e+070) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101111100 #b1010011101101100010100110010111011011100001011100010)))
(assert (= y (fp #b0 #b00010010010 #b1001010111000011100001110011101000101110111101101111)))
(assert (= r (fp #b1 #b10011101001 #b0000101100100100001101100000100101101001000111101100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
