(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.0183896360965454253033612985746003687381744384765625p-105 {- 82819558271881 -105 (-2.51052e-032)}
; Y = 1.0713816102753082049048316548578441143035888671875p119 {+ 321474193436984 119 (7.12055e+035)}
; -1.0183896360965454253033612985746003687381744384765625p-105 / 1.0713816102753082049048316548578441143035888671875p119 == -1.9010773123777144899548829926061443984508514404296875p-225
; [HW: -1.9010773123777144899548829926061443984508514404296875p-225] 

; mpf : - 4058091448256283 -225
; mpfd: - 4058091448256283 -225 (-3.52574e-068) class: Neg. norm. non-zero
; hwf : - 4058091448256283 -225 (-3.52574e-068) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110010110 #b0000010010110101001011101110010110011110101110001001)))
(assert (= y (fp #b0 #b10001110110 #b0001001001000110000100001011000110101011000100111000)))
(assert (= r (fp #b1 #b01100011110 #b1110011010101101000000001011001111010100011100011011)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
