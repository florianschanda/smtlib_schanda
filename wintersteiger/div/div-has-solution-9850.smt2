(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1763818339259379808225958186085335910320281982421875p-444 {- 794353161543779 -444 (-2.58959e-134)}
; Y = -1.5192318210106121600944106830866076052188873291015625p-302 {- 2338412235622297 -302 (-1.86451e-091)}
; -1.1763818339259379808225958186085335910320281982421875p-444 / -1.5192318210106121600944106830866076052188873291015625p-302 == 1.5486534940314691244367395484005101025104522705078125p-143
; [HW: 1.5486534940314691244367395484005101025104522705078125p-143] 

; mpf : + 2470915671275645 -143
; mpfd: + 2470915671275645 -143 (1.38888e-043) class: Pos. norm. non-zero
; hwf : + 2470915671275645 -143 (1.38888e-043) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001000011 #b0010110100100111010111000010000001010010000001100011)))
(assert (= y (fp #b1 #b01011010001 #b1000010011101100011000000110101001001000011110011001)))
(assert (= r (fp #b0 #b01101110000 #b1000110001110100100011100010110110110011100001111101)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
