(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4945832992843153252948695808299817144870758056640625p-309 {+ 2227405162360513 -309 (1.43302e-093)}
; Y = 1.47327435498227554688810414518229663372039794921875p555 {+ 2131438208742188 555 (1.73753e+167)}
; 1.4945832992843153252948695808299817144870758056640625p-309 / 1.47327435498227554688810414518229663372039794921875p555 == 1.0144636633563719474437903045327402651309967041015625p-864
; [HW: 1.0144636633563719474437903045327402651309967041015625p-864] 

; mpf : + 65138548902169 -864
; mpfd: + 65138548902169 -864 (8.24746e-261) class: Pos. norm. non-zero
; hwf : + 65138548902169 -864 (8.24746e-261) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011001010 #b0111111010011101000000101101011110010010111011000001)))
(assert (= y (fp #b0 #b11000101010 #b0111100100101000100000100001010010101111001100101100)))
(assert (= r (fp #b0 #b00010011111 #b0000001110110011111001000000000100011000100100011001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
