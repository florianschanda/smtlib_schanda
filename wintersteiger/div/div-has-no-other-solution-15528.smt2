(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.9018172579763594765012157949968241155147552490234375p-170 {+ 4061423866978615 -170 (1.27078e-051)}
; Y = -1.092273497469192111708480297238565981388092041015625p625 {- 415562888818426 625 (-1.52082e+188)}
; 1.9018172579763594765012157949968241155147552490234375p-170 / -1.092273497469192111708480297238565981388092041015625p625 == -1.741154813682550983600094696157611906528472900390625p-795
; [HW: -1.741154813682550983600094696157611906528472900390625p-795] 

; mpf : - 3337864542724586 -795
; mpfd: - 3337864542724586 -795 (-8.35585e-240) class: Neg. norm. non-zero
; hwf : - 3337864542724586 -795 (-8.35585e-240) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010101 #b1110011011011101011111101110110111111010000100110111)))
(assert (= y (fp #b1 #b11001110000 #b0001011110011111001111000110010111101010111011111010)))
(assert (= r (fp #b1 #b00011100100 #b1011110110111100010100100110011000001010000111101010)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
