(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.2203769785893581190094892008346505463123321533203125p929 {+ 992489678656069 929 (5.53809e+279)}
; Y = 1.34794522762924007253104718984104692935943603515625p824 {+ 1567005997496388 824 (1.50796e+248)}
; 1.2203769785893581190094892008346505463123321533203125p929 / 1.34794522762924007253104718984104692935943603515625p824 == 1.810721910022637270998302483349107205867767333984375p104
; [HW: 1.810721910022637270998302483349107205867767333984375p104] 

; mpf : + 3651166891879046 104
; mpfd: + 3651166891879046 104 (3.67258e+031) class: Pos. norm. non-zero
; hwf : + 3651166891879046 104 (3.67258e+031) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100000 #b0011100001101010101000000010101111010101001001000101)))
(assert (= y (fp #b0 #b11100110111 #b0101100100010010111100000011110101110111100001000100)))
(assert (= r (fp #b0 #b10001100111 #b1100111110001011011110001001100110110010101010000110)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
