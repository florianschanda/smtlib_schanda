(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3065259924595185037077271772432141005992889404296875p99 {- 1380470345420059 99 (-8.28109e+029)}
; Y = -1.1339921385029938516453285046736709773540496826171875p182 {- 603446945032659 182 (-6.95135e+054)}
; -1.3065259924595185037077271772432141005992889404296875p99 / -1.1339921385029938516453285046736709773540496826171875p182 == 1.1521473104604498249869948267587460577487945556640625p-83
; [HW: 1.1521473104604498249869948267587460577487945556640625p-83] 

; mpf : + 685210570695105 -83
; mpfd: + 685210570695105 -83 (1.19129e-025) class: Pos. norm. non-zero
; hwf : + 685210570695105 -83 (1.19129e-025) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001100010 #b0100111001111000011111001100100011111100110100011011)))
(assert (= y (fp #b1 #b10010110101 #b0010001001001101010011110000110011001010100111010011)))
(assert (= r (fp #b0 #b01110101100 #b0010011011110011001000000100101010011010000111000001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
