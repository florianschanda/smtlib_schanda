(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.811566424026298083305164254852570593357086181640625p-678 {+ 3654970244831242 -678 (1.4445e-204)}
; Y = -1.9282606973775802128301393167930655181407928466796875p-490 {- 4180514530812347 -490 (-6.03209e-148)}
; 1.811566424026298083305164254852570593357086181640625p-678 / -1.9282606973775802128301393167930655181407928466796875p-490 == -1.878964215253688951889898817171342670917510986328125p-189
; [HW: -1.878964215253688951889898817171342670917510986328125p-189] 

; mpf : - 3958502912288514 -189
; mpfd: - 3958502912288514 -189 (-2.39469e-057) class: Neg. norm. non-zero
; hwf : - 3958502912288514 -189 (-2.39469e-057) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101011001 #b1100111111000010110100010011000110111001100000001010)))
(assert (= y (fp #b1 #b01000010101 #b1110110110100010011111100011100101100110000110111011)))
(assert (= r (fp #b1 #b01101000010 #b1110000100000011110011000111111011011110011100000010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
