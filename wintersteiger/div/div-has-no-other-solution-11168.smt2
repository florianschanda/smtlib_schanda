(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6292516147562194905873411698848940432071685791015625p-505 {- 2833897337738393 -505 (-1.55539e-152)}
; Y = -1.7396290558475921983472289866767823696136474609375p497 {- 3330993140307608 497 (-7.11811e+149)}
; -1.6292516147562194905873411698848940432071685791015625p-505 / -1.7396290558475921983472289866767823696136474609375p497 == 1.873102325210826091250737590598873794078826904296875p-1003
; [HW: 1.873102325210826091250737590598873794078826904296875p-1003] 

; mpf : + 3932103306475790 -1003
; mpfd: + 3932103306475790 -1003 (2.18512e-302) class: Pos. norm. non-zero
; hwf : + 3932103306475790 -1003 (2.18512e-302) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000110 #b1010000100010110101000100100001001010101010010011001)))
(assert (= y (fp #b1 #b10111110000 #b1011110101011000010101000110111000001001011010011000)))
(assert (= r (fp #b0 #b00000010100 #b1101111110000011101000100100110011010111100100001110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
