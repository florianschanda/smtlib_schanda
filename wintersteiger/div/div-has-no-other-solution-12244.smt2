(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4930168308734323989739323224057443439960479736328125p343 {- 2220350415808973 343 (-2.67518e+103)}
; Y = 1.4925967193474971583810884112608619034290313720703125p867 {+ 2218458401697317 867 (1.46875e+261)}
; -1.4930168308734323989739323224057443439960479736328125p343 / 1.4925967193474971583810884112608619034290313720703125p867 == -1.0002814635195760306629608749062754213809967041015625p-524
; [HW: -1.0002814635195760306629608749062754213809967041015625p-524] 

; mpf : - 1267599001881 -524
; mpfd: - 1267599001881 -524 (-1.8214e-158) class: Neg. norm. non-zero
; hwf : - 1267599001881 -524 (-1.8214e-158) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101010110 #b0111111000110110010110011101110011111010100111001101)))
(assert (= y (fp #b0 #b11101100010 #b0111111000011010110100011000111110110110111000100101)))
(assert (= r (fp #b1 #b00111110011 #b0000000000010010011100100010110010011100100100011001)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
