(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3554138838221525542593326463247649371623992919921875p389 {+ 1600641834743747 389 (1.70899e+117)}
; Y = -1.1468999857593218383300381901790387928485870361328125p870 {- 661578721126413 870 (-9.02863e+261)}
; 1.3554138838221525542593326463247649371623992919921875p389 / -1.1468999857593218383300381901790387928485870361328125p870 == -1.1818065224970606408305684453807771205902099609375p-481
; [HW: -1.1818065224970606408305684453807771205902099609375p-481] 

; mpf : - 818783786971288 -481
; mpfd: - 818783786971288 -481 (-1.89286e-145) class: Neg. norm. non-zero
; hwf : - 818783786971288 -481 (-1.89286e-145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110000100 #b0101101011111100011001110111111110001111011111000011)))
(assert (= y (fp #b1 #b11101100101 #b0010010110011011001111001100101010011110100000001101)))
(assert (= r (fp #b1 #b01000011110 #b0010111010001010110111110100110001010011000010011000)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
