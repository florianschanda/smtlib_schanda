(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5228119114987299642649531961069442331790924072265625p576 {- 2354535529810537 576 (-3.76638e+173)}
; Y = 1.2508061421396228229951930188690312206745147705078125p-302 {+ 1129530448282237 -302 (1.53508e-091)}
; -1.5228119114987299642649531961069442331790924072265625p576 / 1.2508061421396228229951930188690312206745147705078125p-302 == -1.2174643697334388559028184317867271602153778076171875p878
; [HW: -1.2174643697334388559028184317867271602153778076171875p878] 

; mpf : - 979372454497875 878
; mpfd: - 979372454497875 878 (-2.45354e+264) class: Neg. norm. non-zero
; hwf : - 979372454497875 878 (-2.45354e+264) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000111111 #b1000010111010111000000000101110111011000101001101001)))
(assert (= y (fp #b0 #b01011010001 #b0100000000110100110101001101001000100000001001111101)))
(assert (= r (fp #b1 #b11101101101 #b0011011110101011101111101011010000001100111001010011)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
