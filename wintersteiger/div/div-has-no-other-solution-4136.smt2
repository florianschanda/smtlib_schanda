(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8746454967017267545514869198086671531200408935546875p657 {+ 3939053133027179 657 (1.12105e+198)}
; Y = -1.9982841999621061557235179861891083419322967529296875p359 {- 4495872350959195 359 (-2.34653e+108)}
; 1.8746454967017267545514869198086671531200408935546875p657 / -1.9982841999621061557235179861891083419322967529296875p359 == -1.8762551360184662740948624559678137302398681640625p297
; [HW: -1.8762551360184662740948624559678137302398681640625p297] 

; mpf : - 3946302304054248 297
; mpfd: - 3946302304054248 297 (-4.7775e+089) class: Neg. norm. non-zero
; hwf : - 3946302304054248 297 (-4.7775e+089) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010010000 #b1101111111101000110001000110101111101101011101101011)))
(assert (= y (fp #b1 #b10101100110 #b1111111110001111100011011010011011110011011001011011)))
(assert (= r (fp #b1 #b10100101000 #b1110000001010010010000011011000000100110101111101000)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
