(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.630613103865634183620159092242829501628875732421875p-376 {- 2840028939584222 -376 (-1.05943e-113)}
; Y = 1.2242517652906814706881277743377722799777984619140625p-731 {+ 1009940166600289 -731 (1.08379e-220)}
; -1.630613103865634183620159092242829501628875732421875p-376 / 1.2242517652906814706881277743377722799777984619140625p-731 == -1.3319262835438656633613163648988120257854461669921875p355
; [HW: -1.3319262835438656633613163648988120257854461669921875p355] 

; mpf : - 1494863086882627 355
; mpfd: - 1494863086882627 355 (-9.77527e+106) class: Neg. norm. non-zero
; hwf : - 1494863086882627 355 (-9.77527e+106) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01010000111 #b1010000101101111110111000100000110001000001011011110)))
(assert (= y (fp #b0 #b00100100100 #b0011100101101000100100000100110111111110011001100001)))
(assert (= r (fp #b1 #b10101100010 #b0101010011111001000111101111010010000000111101000011)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
