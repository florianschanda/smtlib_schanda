(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.375276737962116246904997751698829233646392822265625p999 {+ 1690096177247002 999 (7.3681e+300)}
; Y = -1.3271515959409734275453729424043558537960052490234375p575 {- 1473359805573431 575 (-1.64122e+173)}
; 1.375276737962116246904997751698829233646392822265625p999 / -1.3271515959409734275453729424043558537960052490234375p575 == -1.036261978035012187859820187441073358058929443359375p424
; [HW: -1.036261978035012187859820187441073358058929443359375p424] 

; mpf : - 163309430766198 424
; mpfd: - 163309430766198 424 (-4.48939e+127) class: Neg. norm. non-zero
; hwf : - 163309430766198 424 (-4.48939e+127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11111100110 #b0110000000010010001000101110010001111111001100011010)))
(assert (= y (fp #b1 #b11000111110 #b0101001111000000001101001111110101100110100100110111)))
(assert (= r (fp #b1 #b10110100111 #b0000100101001000011101110000100110111111101001110110)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
