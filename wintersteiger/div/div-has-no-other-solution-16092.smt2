(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.49358111004807891930568075622431933879852294921875p-94 {- 2222891703289644 -94 (-7.54066e-029)}
; Y = 1.272670232110063803787625147379003465175628662109375p-54 {+ 1227997555725910 -54 (7.06474e-017)}
; -1.49358111004807891930568075622431933879852294921875p-94 / 1.272670232110063803787625147379003465175628662109375p-54 == -1.1735806121368523857739774030051194131374359130859375p-40
; [HW: -1.1735806121368523857739774030051194131374359130859375p-40] 

; mpf : - 781737580138271 -40
; mpfd: - 781737580138271 -40 (-1.06737e-012) class: Neg. norm. non-zero
; hwf : - 781737580138271 -40 (-1.06737e-012) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110100001 #b0111111001011011010101001110010110010100011100101100)))
(assert (= y (fp #b0 #b01111001001 #b0100010111001101101101110110000110000001011001010110)))
(assert (= r (fp #b1 #b01111010111 #b0010110001101111110001110110110001011000111100011111)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
