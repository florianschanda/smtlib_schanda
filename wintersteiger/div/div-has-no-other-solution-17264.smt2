(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.7240769308029235684642799242283217608928680419921875p-185 {+ 3260952595751619 -185 (3.51566e-056)}
; Y = -1.5562417556381220595795866756816394627094268798828125p411 {- 2505090163419757 411 (-8.2301e+123)}
; 1.7240769308029235684642799242283217608928680419921875p-185 / -1.5562417556381220595795866756816394627094268798828125p411 == -1.1078464670137204706179545610211789608001708984375p-596
; [HW: -1.1078464670137204706179545610211789608001708984375p-596] 

; mpf : - 485697308656216 -596
; mpfd: - 485697308656216 -596 (-4.27171e-180) class: Neg. norm. non-zero
; hwf : - 485697308656216 -596 (-4.27171e-180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000110 #b1011100101011101000110110001000110010110001011000011)))
(assert (= y (fp #b1 #b10110011010 #b1000111001100101110111000001010100100010101001101101)))
(assert (= r (fp #b1 #b00110101011 #b0001101110011011110100110111100011010000001001011000)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
