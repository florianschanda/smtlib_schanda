(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.05299605132059692635948522365652024745941162109375p-556 {+ 238672996979548 -556 (4.46426e-168)}
; Y = -1.638539481997060232032481508213095366954803466796875p-834 {- 2875726173183310 -834 (-1.43034e-251)}
; 1.05299605132059692635948522365652024745941162109375p-556 / -1.638539481997060232032481508213095366954803466796875p-834 == -1.2852861501234011942784718485199846327304840087890625p277
; [HW: -1.2852861501234011942784718485199846327304840087890625p277] 

; mpf : - 1284814599389713 277
; mpfd: - 1284814599389713 277 (-3.12111e+083) class: Neg. norm. non-zero
; hwf : - 1284814599389713 277 (-3.12111e+083) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111010011 #b0000110110010001001001100011001100111101001101011100)))
(assert (= y (fp #b1 #b00010111101 #b1010001101110111010100101101000001100001110101001110)))
(assert (= r (fp #b1 #b10100010100 #b0100100100001000100000110101110011001000001000010001)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
