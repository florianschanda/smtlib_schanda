(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.0525613425566024972113154944963753223419189453125p-680 {+ 236715242752008 -680 (2.09822e-205)}
; Y = 1.671964992298659691272177951759658753871917724609375p491 {+ 3026261288922262 491 (1.06894e+148)}
; 1.0525613425566024972113154944963753223419189453125p-680 / 1.671964992298659691272177951759658753871917724609375p491 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101010111 #b0000110101110100101010001111111101010000100000001000)))
(assert (= y (fp #b0 #b10111101010 #b1010110000000101111001011101000111111010110010010110)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
