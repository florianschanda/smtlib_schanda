(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3084384472105552443821352426311932504177093505859375p-610 {- 1389083275924191 -610 (-3.07933e-184)}
; Y = -1.6384487331645287699899427025229670107364654541015625p-1019 {- 2875317476774937 -1019 (-2.91654e-307)}
; -1.3084384472105552443821352426311932504177093505859375p-610 / -1.6384487331645287699899427025229670107364654541015625p-1019 == 1.597167394653129068871066920110024511814117431640625p408
; [HW: 1.597167394653129068871066920110024511814117431640625p408] 

; mpf : + 2689402856037642 408
; mpfd: + 2689402856037642 408 (1.05582e+123) class: Pos. norm. non-zero
; hwf : + 2689402856037642 408 (1.05582e+123) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110011101 #b0100111011110101110100100111001110011001001011011111)))
(assert (= y (fp #b1 #b00000000100 #b1010001101110001011000000100110100011101010000011001)))
(assert (= r (fp #b0 #b10110010111 #b1001100011011111111101100101111001000101110100001010)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
