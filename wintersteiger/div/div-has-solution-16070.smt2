(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.169780590586384505513706244528293609619140625p-817 {- 764623804499584 -817 (-1.33844e-246)}
; Y = 1.094667327965227254793489919393323361873626708984375p-92 {+ 426343742948358 -92 (2.21066e-028)}
; -1.169780590586384505513706244528293609619140625p-817 / 1.094667327965227254793489919393323361873626708984375p-92 == -1.0686174335364315712837424143799580633640289306640625p-725
; [HW: -1.0686174335364315712837424143799580633640289306640625p-725] 

; mpf : - 309025448105793 -725
; mpfd: - 309025448105793 -725 (-6.05446e-219) class: Neg. norm. non-zero
; hwf : - 309025448105793 -725 (-6.05446e-219) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001110 #b0010101101110110101111011010010000010000011010000000)))
(assert (= y (fp #b0 #b01110100011 #b0001100000111100000111100011010110011100010000000110)))
(assert (= r (fp #b1 #b00100101010 #b0001000110010000111010011000000011111001011101000001)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
