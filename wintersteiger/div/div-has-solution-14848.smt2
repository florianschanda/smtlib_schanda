(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.664753944888127445977943352772854268550872802734375p-285 {- 2993785618491238 -285 (-2.67794e-086)}
; Y = 1.3802641082013542561668373309657908976078033447265625p866 {+ 1712557295997993 866 (6.79107e+260)}
; -1.664753944888127445977943352772854268550872802734375p-285 / 1.3802641082013542561668373309657908976078033447265625p866 == -0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: -0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : - 1 -1023
; mpfd: - 1 -1023 (-4.94066e-324) class: Neg. denorm.
; hwf : - 1 -1023 (-4.94066e-324) class: Neg. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100010 #b1010101000101101010100001000010100101110011101100110)))
(assert (= y (fp #b0 #b11101100001 #b0110000101011000111111010001010010010001010000101001)))
(assert (= r (fp #b1 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
