(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.906351513543320219667975834454409778118133544921875p-319 {+ 4081844338660382 -319 (1.78498e-096)}
; Y = 1.0288319501119260745980454885284416377544403076171875p-1003 {+ 129847559780435 -1003 (1.20021e-302)}
; 1.906351513543320219667975834454409778118133544921875p-319 / 1.0288319501119260745980454885284416377544403076171875p-1003 == 1.8529279862818504032162536532268859446048736572265625p684
; [HW: 1.8529279862818504032162536532268859446048736572265625p684] 

; mpf : + 3841246161192809 684
; mpfd: + 3841246161192809 684 (1.48722e+206) class: Pos. norm. non-zero
; hwf : + 3841246161192809 684 (1.48722e+206) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000000 #b1110100000000110101001110001110101011001010000011110)))
(assert (= y (fp #b0 #b00000010100 #b0000011101100001100001111101101011001111100001010011)))
(assert (= r (fp #b0 #b11010101011 #b1101101001011001011111010000111011101100011101101001)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
