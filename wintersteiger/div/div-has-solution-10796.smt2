(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.172275792469963828779100367682985961437225341796875p-265 {- 775861194772686 -265 (-1.97734e-080)}
; Y = -1.8765009510899199884903509882860817015171051025390625p-502 {- 3947409356718449 -502 (-1.43315e-151)}
; -1.172275792469963828779100367682985961437225341796875p-265 / -1.8765009510899199884903509882860817015171051025390625p-502 == 1.24942733632943347998889294103719294071197509765625p236
; [HW: 1.24942733632943347998889294103719294071197509765625p236] 

; mpf : + 1123320858949252 236
; mpfd: + 1123320858949252 236 (1.37972e+071) class: Pos. norm. non-zero
; hwf : + 1123320858949252 236 (1.37972e+071) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011110110 #b0010110000011010010001000010111010001101000011001110)))
(assert (= y (fp #b1 #b01000001001 #b1110000001100010010111011100011111011000000101110001)))
(assert (= r (fp #b0 #b10011101011 #b0011111111011010011110000100110001000011011010000100)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
