(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2953541832291410873523318514344282448291778564453125p412 {+ 1330156989533077 412 (1.37008e+124)}
; Y = -1.645097977788532173093472010805271565914154052734375p660 {- 2905263012385894 660 (-7.87026e+198)}
; 1.2953541832291410873523318514344282448291778564453125p412 / -1.645097977788532173093472010805271565914154052734375p660 == -1.574804906113198565975608289591036736965179443359375p-249
; [HW: -1.574804906113198565975608289591036736965179443359375p-249] 

; mpf : - 2588691160982134 -249
; mpfd: - 2588691160982134 -249 (-1.74084e-075) class: Neg. norm. non-zero
; hwf : - 2588691160982134 -249 (-1.74084e-075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110011011 #b0100101110011100010101001110110110110100101110010101)))
(assert (= y (fp #b1 #b11010010011 #b1010010100100101001001000001110101010001010001100110)))
(assert (= r (fp #b1 #b01100000110 #b1001001100100110011010100001000101010110001001110110)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
