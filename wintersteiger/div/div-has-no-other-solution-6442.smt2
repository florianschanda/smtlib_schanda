(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2716441508306381980020205446635372936725616455078125p-593 {+ 1223376496458237 -593 (3.92264e-179)}
; Y = -1.735060978215510640865204550209455192089080810546875p315 {- 3310420347585966 315 (-1.15815e+095)}
; 1.2716441508306381980020205446635372936725616455078125p-593 / -1.735060978215510640865204550209455192089080810546875p315 == -1.465820702323106683451214848901145160198211669921875p-909
; [HW: -1.465820702323106683451214848901145160198211669921875p-909] 

; mpf : - 2097869941403806 -909
; mpfd: - 2097869941403806 -909 (-3.387e-274) class: Neg. norm. non-zero
; hwf : - 2097869941403806 -909 (-3.387e-274) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110101110 #b0100010110001010011110001001011111110111100111111101)))
(assert (= y (fp #b1 #b10100111010 #b1011110000101100111101001100111000000000010110101110)))
(assert (= r (fp #b1 #b00001110010 #b0111011101000000000001101000101001000111000010011110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
