(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6492387910022847652413702235207892954349517822265625p-681 {+ 2923911577232361 -681 (1.64383e-205)}
; Y = -1.6557221424850638857861895303358323872089385986328125p52 {- 2953109996554317 52 (-7.45671e+015)}
; 1.6492387910022847652413702235207892954349517822265625p-681 / -1.6557221424850638857861895303358323872089385986328125p52 == -1.9921685513330775751938972462085075676441192626953125p-734
; [HW: -1.9921685513330775751938972462085075676441192626953125p-734] 

; mpf : - 4468329918072373 -734
; mpfd: - 4468329918072373 -734 (-2.2045e-221) class: Neg. norm. non-zero
; hwf : - 4468329918072373 -734 (-2.2045e-221) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101010110 #b1010011000110100100000110110111010100110001111101001)))
(assert (= y (fp #b1 #b10000110011 #b1010011111011101011010000000010100111100100001001101)))
(assert (= r (fp #b1 #b00100100001 #b1111110111111110110000100001100000011000011000110101)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
