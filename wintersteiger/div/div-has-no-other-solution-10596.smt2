(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6853418621008724453957938749226741492748260498046875p-113 {- 3086505354778891 -113 (-1.62293e-034)}
; Y = -1.11239190750482119796060942462645471096038818359375p588 {- 506168152758172 588 (-1.12693e+177)}
; -1.6853418621008724453957938749226741492748260498046875p-113 / -1.11239190750482119796060942462645471096038818359375p588 == 1.5150612394162601415104063562466762959957122802734375p-701
; [HW: 1.5150612394162601415104063562466762959957122802734375p-701] 

; mpf : + 2319629605908055 -701
; mpfd: + 2319629605908055 -701 (1.44014e-211) class: Pos. norm. non-zero
; hwf : + 2319629605908055 -701 (1.44014e-211) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110001110 #b1010111101110010100100000111010001001101100100001011)))
(assert (= y (fp #b1 #b11001001011 #b0001110011000101101101110100111100010001011110011100)))
(assert (= r (fp #b0 #b00101000010 #b1000001111011011000011011010101010111010111001010111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
