(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.96268507692895877170258245314471423625946044921875p806 {+ 4335548153732396 806 (8.37582e+242)}
; Y = 1.4789208083057776565993890471872873604297637939453125p179 {+ 2156867573825877 179 (1.13322e+054)}
; 1.96268507692895877170258245314471423625946044921875p806 / 1.4789208083057776565993890471872873604297637939453125p179 == 1.3271062695894932925710918425465933978557586669921875p627
; [HW: 1.3271062695894932925710918425465933978557586669921875p627] 

; mpf : + 1473155673833795 627
; mpfd: + 1473155673833795 627 (7.39117e+188) class: Pos. norm. non-zero
; hwf : + 1473155673833795 627 (7.39117e+188) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100101 #b1111011001110010100001110111100111000001110100101100)))
(assert (= y (fp #b0 #b10010110010 #b0111101010011010100011011101100100001100000101010101)))
(assert (= r (fp #b0 #b11001110010 #b0101001110111101001111001000101000110100000101000011)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
