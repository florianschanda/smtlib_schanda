(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.287455351723867824631497569498606026172637939453125p723 {- 1294583814909266 723 (-5.68092e+217)}
; Y = 1.404470072007887093690214896923862397670745849609375p214 {+ 1821571265577238 214 (3.6977e+064)}
; -1.287455351723867824631497569498606026172637939453125p723 / 1.404470072007887093690214896923862397670745849609375p214 == -1.8333681541298629813496745555312372744083404541015625p508
; [HW: -1.8333681541298629813496745555312372744083404541015625p508] 

; mpf : - 3753156508401689 508
; mpfd: - 3753156508401689 508 (-1.53634e+153) class: Neg. norm. non-zero
; hwf : - 3753156508401689 508 (-1.53634e+153) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011010010 #b0100100110010110101011001000011010110110110101010010)))
(assert (= y (fp #b0 #b10011010101 #b0110011110001011010110011100001101111100000100010110)))
(assert (= r (fp #b1 #b10111111011 #b1101010101010111100111011000011110000100000000011001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
