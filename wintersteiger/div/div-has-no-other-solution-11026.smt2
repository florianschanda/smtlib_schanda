(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0019070855282461440793895235401578247547149658203125p-994 {+ 8588749674373 -994 (5.98428e-300)}
; Y = -1.83106314718888096848559143836610019207000732421875p-330 {- 3742775680001196 -330 (-8.37153e-100)}
; 1.0019070855282461440793895235401578247547149658203125p-994 / -1.83106314718888096848559143836610019207000732421875p-330 == -1.0943446566181103118964301756932400166988372802734375p-665
; [HW: -1.0943446566181103118964301756932400166988372802734375p-665] 

; mpf : - 424890560389719 -665
; mpfd: - 424890560389719 -665 (-7.14837e-201) class: Neg. norm. non-zero
; hwf : - 424890560389719 -665 (-7.14837e-201) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000011101 #b0000000001111100111110111001010111111001011110000101)))
(assert (= y (fp #b1 #b01010110101 #b1101010011000000100011011110111000010110010010101100)))
(assert (= r (fp #b1 #b00101100110 #b0001100000100110111110001010111010111010001001010111)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
