(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.005012647963182903509959942311979830265045166015625p1014 {- 22574959499130 1014 (-1.76436e+305)}
; Y = 1.315315064317726267972830100916326045989990234375p664 {+ 1420052806165616 664 (1.00681e+200)}
; -1.005012647963182903509959942311979830265045166015625p1014 / 1.315315064317726267972830100916326045989990234375p664 == -1.5281702083819712623125042227911762893199920654296875p349
; [HW: -1.5281702083819712623125042227911762893199920654296875p349] 

; mpf : - 2378667153657243 349
; mpfd: - 2378667153657243 349 (-1.75243e+105) class: Neg. norm. non-zero
; hwf : - 2378667153657243 349 (-1.75243e+105) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111110101 #b0000000101001000100000100100011100010001011101111010)))
(assert (= y (fp #b0 #b11010010111 #b0101000010111000011111001111000100101110010001110000)))
(assert (= r (fp #b1 #b10101011100 #b1000011100110110001010011010101110111000110110011011)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
