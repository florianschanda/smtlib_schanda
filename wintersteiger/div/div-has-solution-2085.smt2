(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4395643763513812363186161746853031218051910400390625p-28 {- 1979621961541425 -28 (-5.3628e-009)}
; Y = 1.10095298376366113046742611913941800594329833984375p187 {+ 454651820059964 187 (2.15962e+056)}
; -1.4395643763513812363186161746853031218051910400390625p-28 / 1.10095298376366113046742611913941800594329833984375p187 == -1.3075620826514866568146544523187913000583648681640625p-215
; [HW: -1.3075620826514866568146544523187913000583648681640625p-215] 

; mpf : - 1385136480822529 -215
; mpfd: - 1385136480822529 -215 (-2.48321e-065) class: Neg. norm. non-zero
; hwf : - 1385136480822529 -215 (-2.48321e-065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111100011 #b0111000010000111010010100111110011101010011100110001)))
(assert (= y (fp #b0 #b10010111010 #b0001100111011000000011100000001110110010110100111100)))
(assert (= r (fp #b1 #b01100101000 #b0100111010111100011000110111111001111010010100000001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
