(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0810300556907217472968341098749078810214996337890625p793 {+ 364926928614545 793 (5.6315e+238)}
; Y = -1.3380477579135519050623770453967154026031494140625p-165 {- 1522431756572904 -165 (-2.86103e-050)}
; 1.0810300556907217472968341098749078810214996337890625p793 / -1.3380477579135519050623770453967154026031494140625p-165 == -1.615831795684776306387675504083745181560516357421875p957
; [HW: -1.615831795684776306387675504083745181560516357421875p957] 

; mpf : - 2773459845568862 957
; mpfd: - 2773459845568862 957 (-1.96835e+288) class: Neg. norm. non-zero
; hwf : - 2773459845568862 957 (-1.96835e+288) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100011000 #b0001010010111110011000101011111100101111010010010001)))
(assert (= y (fp #b1 #b01101011010 #b0101011010001010010011000100000010111001100011101000)))
(assert (= r (fp #b1 #b11110111100 #b1001110110100111001001110000111001001101100101011110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
