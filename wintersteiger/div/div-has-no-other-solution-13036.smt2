(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.047407636676682241017033447860740125179290771484375p-703 {- 213505014871622 -703 (-2.48902e-212)}
; Y = -1.6086673258122072827092097213608212769031524658203125p-626 {- 2741193941720453 -626 (-5.77682e-189)}
; -1.047407636676682241017033447860740125179290771484375p-703 / -1.6086673258122072827092097213608212769031524658203125p-626 == 1.302205396815468763094258974888361990451812744140625p-78
; [HW: 1.302205396815468763094258974888361990451812744140625p-78] 

; mpf : + 1361012112487498 -78
; mpfd: + 1361012112487498 -78 (4.30864e-024) class: Pos. norm. non-zero
; hwf : + 1361012112487498 -78 (4.30864e-024) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101000000 #b0000110000100010111010000010100100011011011001000110)))
(assert (= y (fp #b1 #b00110001101 #b1001101111010001100111110011001010000001110110000101)))
(assert (= r (fp #b0 #b01110110001 #b0100110101011101010101010011011111111111010001001010)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
