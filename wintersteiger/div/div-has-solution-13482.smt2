(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.535902375177057077593190115294419229030609130859375p-51 {- 2413489737154358 -51 (-6.82078e-016)}
; Y = -1.8937133423518019981202087365090847015380859375p486 {- 4024927075591616 486 (-3.78349e+146)}
; -1.535902375177057077593190115294419229030609130859375p-51 / -1.8937133423518019981202087365090847015380859375p486 == 1.6221065150965461310050841348129324615001678466796875p-538
; [HW: 1.6221065150965461310050841348129324615001678466796875p-538] 

; mpf : + 2801718669573563 -538
; mpfd: + 2801718669573563 -538 (1.80278e-162) class: Pos. norm. non-zero
; hwf : + 2801718669573563 -538 (1.80278e-162) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01111001100 #b1000100100110000111001011110011100111011111100110110)))
(assert (= y (fp #b1 #b10111100101 #b1110010011001010011001011100100101100110010111000000)))
(assert (= r (fp #b0 #b00111100101 #b1001111101000010010111110110000011110111110110111011)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
