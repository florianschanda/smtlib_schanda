(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0897972626144223351474238370428793132305145263671875p275 {- 404410918449203 275 (-6.61599e+082)}
; Y = 1.8936947020847443301505563795217312872409820556640625p390 {+ 4024843127291841 390 (4.77538e+117)}
; -1.0897972626144223351474238370428793132305145263671875p275 / 1.8936947020847443301505563795217312872409820556640625p390 == -1.1509746121322284029275806460645981132984161376953125p-116
; [HW: -1.1509746121322284029275806460645981132984161376953125p-116] 

; mpf : - 679929206941109 -116
; mpfd: - 679929206941109 -116 (-1.38544e-035) class: Neg. norm. non-zero
; hwf : - 679929206941109 -116 (-1.38544e-035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100010010 #b0001011011111100111101000001001000110011000000110011)))
(assert (= y (fp #b0 #b10110000101 #b1110010011001001001011010000111000001111111111000001)))
(assert (= r (fp #b1 #b01110001011 #b0010011010100110010001011010110110100010010110110101)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
