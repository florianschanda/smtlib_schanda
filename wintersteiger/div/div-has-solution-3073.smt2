(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.2684233903875956617213205390726216137409210205078125p-213 {- 1208871480927101 -213 (-9.63552e-065)}
; Y = 1.1956021861501862080245928154909051954746246337890625p-669 {+ 880913932658833 -669 (4.88112e-202)}
; -1.2684233903875956617213205390726216137409210205078125p-213 / 1.1956021861501862080245928154909051954746246337890625p-669 == -1.06090755360015887021063463180325925350189208984375p456
; [HW: -1.06090755360015887021063463180325925350189208984375p456] 

; mpf : - 274303235697724 456
; mpfd: - 274303235697724 456 (-1.97404e+137) class: Neg. norm. non-zero
; hwf : - 274303235697724 456 (-1.97404e+137) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101010 #b0100010010110111011001010011001100110010001101111101)))
(assert (= y (fp #b0 #b00101100010 #b0011001000010010111111000010000010001010100010010001)))
(assert (= r (fp #b1 #b10111000111 #b0000111110010111101000110010111011001010110000111100)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
