(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.690487092506077981823864320176653563976287841796875p-1020 {+ 3109677412514510 -1020 (1.50458e-307)}
; Y = -1.753952790524421434525947915972210466861724853515625p-308 {- 3395501506460730 -308 (-3.36341e-093)}
; 1.690487092506077981823864320176653563976287841796875p-1020 / -1.753952790524421434525947915972210466861724853515625p-308 == -1.927631235730845826736867820727638900279998779296875p-713
; [HW: -1.927631235730845826736867820727638900279998779296875p-713] 

; mpf : - 4177679687574670 -713
; mpfd: - 4177679687574670 -713 (-4.47339e-215) class: Neg. norm. non-zero
; hwf : - 4177679687574670 -713 (-4.47339e-215) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000000011 #b1011000011000011110000110001100010011111101011001110)))
(assert (= y (fp #b1 #b01011001011 #b1100000100000011000011001101001000000111110000111010)))
(assert (= r (fp #b1 #b00100110110 #b1110110101111001001111011001110000110110010010001110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
