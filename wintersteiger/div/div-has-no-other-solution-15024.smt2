(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.39826081655840450679306741221807897090911865234375p285 {- 1793607265048700 285 (-8.69234e+085)}
; Y = 1.686757692215412163250221055932343006134033203125p-339 {+ 3092881686755152 -339 (1.50621e-102)}
; -1.39826081655840450679306741221807897090911865234375p285 / 1.686757692215412163250221055932343006134033203125p-339 == -1.6579273039767892239382263142033480107784271240234375p623
; [HW: -1.6579273039767892239382263142033480107784271240234375p623] 

; mpf : - 2963041161026743 623
; mpfd: - 2963041161026743 623 (-5.77102e+187) class: Neg. norm. non-zero
; hwf : - 2963041161026743 623 (-5.77102e+187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011100 #b0110010111110100011010111011111001100101100001111100)))
(assert (= y (fp #b0 #b01010101100 #b1010111111001111010110100010010001010111011101010000)))
(assert (= r (fp #b1 #b11001101110 #b1010100001101101111011000111110110111001110010110111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
