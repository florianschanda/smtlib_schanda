(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.42936128112207683216183795593678951263427734375p686 {+ 1933671305668704 686 (4.58901e+206)}
; Y = 1.38431210054817999122178662219084799289703369140625p935 {+ 1730787832822756 935 (4.0205e+281)}
; 1.42936128112207683216183795593678951263427734375p686 / 1.38431210054817999122178662219084799289703369140625p935 == 1.0325426473958130291208590278984047472476959228515625p-249
; [HW: 1.0325426473958130291208590278984047472476959228515625p-249] 

; mpf : + 146559054685433 -249
; mpfd: + 146559054685433 -249 (1.1414e-075) class: Pos. norm. non-zero
; hwf : + 146559054685433 -249 (1.1414e-075) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010101101 #b0110110111101010100111101111010010010110100001100000)))
(assert (= y (fp #b0 #b11110100110 #b0110001001100010010001110001111101001111101111100100)))
(assert (= r (fp #b0 #b01100000110 #b0000100001010100101101110000011001001010010011111001)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
