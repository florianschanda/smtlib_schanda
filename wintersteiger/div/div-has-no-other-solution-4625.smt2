(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.3385295332621593988875474678934551775455474853515625p-421 {- 1524601479853369 -421 (-2.47172e-127)}
; Y = -1.9306121355826120211673924131901003420352935791015625p-16 {- 4191104467036313 -16 (-2.94588e-005)}
; -1.3385295332621593988875474678934551775455474853515625p-421 / -1.9306121355826120211673924131901003420352935791015625p-16 == 1.3866374385533670743342327114078216254711151123046875p-406
; [HW: 1.3866374385533670743342327114078216254711151123046875p-406] 

; mpf : + 1741260224196427 -406
; mpfd: + 1741260224196427 -406 (8.39044e-123) class: Pos. norm. non-zero
; hwf : + 1741260224196427 -406 (8.39044e-123) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001011010 #b0101011010101001110111110001101000010111010100111001)))
(assert (= y (fp #b1 #b01111101111 #b1110111000111100100110001100111110010110100010011001)))
(assert (= r (fp #b0 #b01001101001 #b0110001011111010101010111101000111111110111101001011)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
