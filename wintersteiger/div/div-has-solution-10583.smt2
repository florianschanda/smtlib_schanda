(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6012796559841537824553370228386484086513519287109375p-261 {- 2707922834635695 -261 (-4.32154e-079)}
; Y = 1.8308976150884948008723540624487213790416717529296875p432 {+ 3742030189695579 432 (2.03059e+130)}
; -1.6012796559841537824553370228386484086513519287109375p-261 / 1.8308976150884948008723540624487213790416717529296875p432 == -1.7491744407638625258272213613963685929775238037109375p-694
; [HW: -1.7491744407638625258272213613963685929775238037109375p-694] 

; mpf : - 3373981732259631 -694
; mpfd: - 3373981732259631 -694 (-2.12822e-209) class: Neg. norm. non-zero
; hwf : - 3373981732259631 -694 (-2.12822e-209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011111010 #b1001100111101101011101101010101000110011101110101111)))
(assert (= y (fp #b0 #b10110101111 #b1101010010110101101101001100001100100001001001011011)))
(assert (= r (fp #b1 #b00101001001 #b1011111111001001111001010110101000010100011100101111)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
