(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4829265943489982060299325894447974860668182373046875p603 {+ 2174908030357451 603 (4.92274e+181)}
; Y = -1.2657549216235377542716378229670226573944091796875p516 {- 1196853765995640 516 (-2.71536e+155)}
; 1.4829265943489982060299325894447974860668182373046875p603 / -1.2657549216235377542716378229670226573944091796875p516 == -1.1715748199081874592053509331890381872653961181640625p87
; [HW: -1.1715748199081874592053509331890381872653961181640625p87] 

; mpf : - 772704295004673 87
; mpfd: - 772704295004673 87 (-1.81292e+026) class: Neg. norm. non-zero
; hwf : - 772704295004673 87 (-1.81292e+026) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001011010 #b0111101110100001000100111100100100011000111111001011)))
(assert (= y (fp #b1 #b11000000011 #b0100010000001000100000111011100100011111110001111000)))
(assert (= r (fp #b1 #b10001010110 #b0010101111101100010100111101000001010010101000000001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
