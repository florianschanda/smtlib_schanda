(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = 1.8473920755824970729719325390760786831378936767578125p-315 {+ 3816314635830045 -315 (2.76765e-095)}
; Y = -1.6430847124342784493222779929055832326412200927734375p355 {- 2896196071286679 355 (-1.20589e+107)}
; 1.8473920755824970729719325390760786831378936767578125p-315 / -1.6430847124342784493222779929055832326412200927734375p355 == -1.1243437794789843398035600330331362783908843994140625p-670
; [HW: -1.1243437794789843398035600330331362783908843994140625p-670] 

; mpf : - 559994598927393 -670
; mpfd: - 559994598927393 -670 (-2.2951e-202) class: Neg. norm. non-zero
; hwf : - 559994598927393 -670 (-2.2951e-202) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000100 #b1101100011101110101011111110001110000100001100011101)))
(assert (= y (fp #b1 #b10101100010 #b1010010010100001001100110010000001110110011110010111)))
(assert (= r (fp #b1 #b00101100001 #b0001111111010100111111100111001001010010110000100001)))
(assert (= (fp.div roundTowardZero x y) r))
(check-sat)
(exit)
