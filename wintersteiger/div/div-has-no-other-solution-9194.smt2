(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5013667146853564293706995158572681248188018798828125p-460 {- 2257954949432941 -460 (-5.043e-139)}
; Y = -1.624808510519375914782358449883759021759033203125p-159 {- 2813887375152976 -159 (-2.22348e-048)}
; -1.5013667146853564293706995158572681248188018798828125p-460 / -1.624808510519375914782358449883759021759033203125p-159 == 1.848053730596769472782625598483718931674957275390625p-302
; [HW: 1.848053730596769472782625598483718931674957275390625p-302] 

; mpf : + 3819294465105770 -302
; mpfd: + 3819294465105770 -302 (2.26807e-091) class: Pos. norm. non-zero
; hwf : + 3819294465105770 -302 (2.26807e-091) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000110011 #b1000000001011001100100011010101011100000011001101101)))
(assert (= y (fp #b1 #b01101100000 #b1001111111110011011100110101011011110001011101010000)))
(assert (= r (fp #b0 #b01011010001 #b1101100100011010000011001001111000101001111101101010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
