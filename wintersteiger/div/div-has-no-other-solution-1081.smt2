(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0479273977147809393528632426750846207141876220703125p-977 {+ 215845810489125 -977 (8.204e-295)}
; Y = -1.9651733626671592514156827746774069964885711669921875p-487 {- 4346754396455747 -487 (-4.91805e-147)}
; 1.0479273977147809393528632426750846207141876220703125p-977 / -1.9651733626671592514156827746774069964885711669921875p-487 == -1.0664986790707564612290525474236346781253814697265625p-491
; [HW: -1.0664986790707564612290525474236346781253814697265625p-491] 

; mpf : - 299483426283689 -491
; mpfd: - 299483426283689 -491 (-1.66814e-148) class: Neg. norm. non-zero
; hwf : - 299483426283689 -491 (-1.66814e-148) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00000101110 #b0000110001000100111110000100110111000100011100100101)))
(assert (= y (fp #b1 #b01000011000 #b1111011100010101100110011111101110100000001101000011)))
(assert (= r (fp #b1 #b01000010100 #b0001000100000110000011101011001111010110000010101001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
