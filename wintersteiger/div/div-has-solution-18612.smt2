(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1643058187680843662548113570665009319782257080078125p-289 {+ 739967624178749 -289 (1.17057e-087)}
; Y = -1.6290563065005996268297394635737873613834381103515625p39 {- 2833017747551161 39 (-8.95583e+011)}
; 1.1643058187680843662548113570665009319782257080078125p-289 / -1.6290563065005996268297394635737873613834381103515625p39 == -1.4294236658635173231601811494329012930393218994140625p-329
; [HW: -1.4294236658635173231601811494329012930393218994140625p-329] 

; mpf : - 1933952261567009 -329
; mpfd: - 1933952261567009 -329 (-1.30705e-099) class: Neg. norm. non-zero
; hwf : - 1933952261567009 -329 (-1.30705e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011011110 #b0010101000001111111100100011011000100110110000111101)))
(assert (= y (fp #b1 #b10000100110 #b1010000100001001110101011000011111000011001110111001)))
(assert (= r (fp #b1 #b01010110110 #b0110110111101110101101011001100100000011001000100001)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
