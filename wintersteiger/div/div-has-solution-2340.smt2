(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.749680106376079180563465342856943607330322265625p-319 {+ 3376259047722384 -319 (1.63829e-096)}
; Y = -1.9588445983629465541042691256734542548656463623046875p-691 {- 4318252175893579 -691 (-1.90666e-208)}
; 1.749680106376079180563465342856943607330322265625p-319 / -1.9588445983629465541042691256734542548656463623046875p-691 == -1.7864409538544598898823778654332272708415985107421875p371
; [HW: -1.7864409538544598898823778654332272708415985107421875p371] 

; mpf : - 3541815186727843 371
; mpfd: - 3541815186727843 371 (-8.59245e+111) class: Neg. norm. non-zero
; hwf : - 3541815186727843 371 (-8.59245e+111) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011000000 #b1011111111101011000010010001001101011000110110010000)))
(assert (= y (fp #b1 #b00101001100 #b1111010101110110110101101110111111101010010001001011)))
(assert (= r (fp #b1 #b10101110010 #b1100100101010100001100011100000100001010001110100011)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
