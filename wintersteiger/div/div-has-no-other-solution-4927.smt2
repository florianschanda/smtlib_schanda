(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.0165034345656163150550810314598493278026580810546875p491 {+ 74324861760043 491 (6.49885e+147)}
; Y = -1.4643395005319181922942561868694610893726348876953125p368 {- 2091199201568949 368 (-8.804e+110)}
; 1.0165034345656163150550810314598493278026580810546875p491 / -1.4643395005319181922942561868694610893726348876953125p368 == -1.388343938268924215861943594063632190227508544921875p122
; [HW: -1.388343938268924215861943594063632190227508544921875p122] 

; mpf : - 1748945615679518 122
; mpfd: - 1748945615679518 122 (-7.3817e+036) class: Neg. norm. non-zero
; hwf : - 1748945615679518 122 (-7.3817e+036) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111101010 #b0000010000111001100100011010111110111011001000101011)))
(assert (= y (fp #b1 #b10101101111 #b0111011011011110111101000001100100000110100010110101)))
(assert (= r (fp #b1 #b10001111001 #b0110001101101010100000100010001001110111000000011110)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
