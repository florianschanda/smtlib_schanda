(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.68914900771191778261481886147521436214447021484375p662 {- 3103651214334140 662 (-3.2324e+199)}
; Y = 1.73235270169401989193147528567351400852203369140625p911 {+ 3298223354452964 911 (2.9989e+274)}
; -1.68914900771191778261481886147521436214447021484375p662 / 1.73235270169401989193147528567351400852203369140625p911 == -1.95012136507784550332189610344357788562774658203125p-250
; [HW: -1.95012136507784550332189610344357788562774658203125p-250] 

; mpf : - 4278966225721332 -250
; mpfd: - 4278966225721332 -250 (-1.07786e-075) class: Neg. norm. non-zero
; hwf : - 4278966225721332 -250 (-1.07786e-075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11010010101 #b1011000001101100000100011100001000110001100010111100)))
(assert (= y (fp #b0 #b11110001110 #b1011101101111011011101110111011011101001101111100100)))
(assert (= r (fp #b1 #b01100000101 #b1111001100111011001001110101111000111101011111110100)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
