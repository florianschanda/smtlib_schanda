(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.61498565162086737956315118935890495777130126953125p552 {- 2769649151477940 552 (-2.38082e+166)}
; Y = 1.942438001366592725815962694468908011913299560546875p-259 {+ 4244363431774382 -259 (2.0969e-078)}
; -1.61498565162086737956315118935890495777130126953125p552 / 1.942438001366592725815962694468908011913299560546875p-259 == -1.662843962571419975660091949976049363613128662109375p810
; [HW: -1.662843962571419975660091949976049363613128662109375p810] 

; mpf : - 2985183822841430 810
; mpfd: - 2985183822841430 810 (-1.1354e+244) class: Neg. norm. non-zero
; hwf : - 2985183822841430 810 (-1.1354e+244) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11000100111 #b1001110101101111101100110001110100111000100010110100)))
(assert (= y (fp #b0 #b01011111100 #b1111000101000011100111011110101001100000100010101110)))
(assert (= r (fp #b1 #b11100101001 #b1010100110110000001001000101010110011000011001010110)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
