(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.6286518907925546795212312645162455737590789794921875p-674 {+ 2831196421119107 -674 (2.07784e-203)}
; Y = 1.4408063649650821869130368213518522679805755615234375p-379 {+ 1985215380999287 -379 (1.17014e-114)}
; 1.6286518907925546795212312645162455737590789794921875p-674 / 1.4408063649650821869130368213518522679805755615234375p-379 == 1.130375274842726707191786772455088794231414794921875p-295
; [HW: 1.130375274842726707191786772455088794231414794921875p-295] 

; mpf : + 587158039200030 -295
; mpfd: + 587158039200030 -295 (1.77572e-089) class: Pos. norm. non-zero
; hwf : + 587158039200030 -295 (1.77572e-089) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00101011101 #b1010000011101111010101001000111110000101110010000011)))
(assert (= y (fp #b0 #b01010000100 #b0111000011011000101011111001100101100100110001110111)))
(assert (= r (fp #b0 #b01011011000 #b0010000101100000010001100010010110101000000100011110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
