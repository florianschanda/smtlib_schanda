(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.74848781590016866260839378810487687587738037109375p-18 {+ 3370889448779356 -18 (6.66995e-006)}
; Y = -1.093712424565909113738371161161921918392181396484375p641 {- 422043240355014 641 (-9.98e+192)}
; 1.74848781590016866260839378810487687587738037109375p-18 / -1.093712424565909113738371161161921918392181396484375p641 == -1.598672353561437997626626383862458169460296630859375p-659
; [HW: -1.598672353561437997626626383862458169460296630859375p-659] 

; mpf : - 2696180588416310 -659
; mpfd: - 2696180588416310 -659 (-6.68332e-199) class: Neg. norm. non-zero
; hwf : - 2696180588416310 -659 (-6.68332e-199) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111101101 #b1011111110011100111001011100001010111110111001011100)))
(assert (= y (fp #b1 #b11010000000 #b0001011111111101100010011001011010111101010011000110)))
(assert (= r (fp #b1 #b00101101100 #b1001100101000010100101110110001110010000110100110110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
