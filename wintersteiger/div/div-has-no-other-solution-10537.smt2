(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.0380519524376607964910590453655458986759185791015625p181 {- 171370758818969 181 (-3.18162e+054)}
; Y = 1.153311642299133410460854065604507923126220703125p754 {+ 690454255129936 754 (1.09286e+227)}
; -1.0380519524376607964910590453655458986759185791015625p181 / 1.153311642299133410460854065604507923126220703125p754 == -1.800123946322605750225420706556178629398345947265625p-574
; [HW: -1.800123946322605750225420706556178629398345947265625p-574] 

; mpf : - 3603437906508698 -574
; mpfd: - 3603437906508698 -574 (-2.91129e-173) class: Neg. norm. non-zero
; hwf : - 3603437906508698 -574 (-2.91129e-173) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010110100 #b0000100110111101110001011101001101000100110010011001)))
(assert (= y (fp #b0 #b11011110001 #b0010011100111111011011101000100111000101010101010000)))
(assert (= r (fp #b1 #b00111000001 #b1100110011010100111011000100011000110011101110011010)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
