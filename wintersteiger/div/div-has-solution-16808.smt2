(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0994643806385766549027493965695612132549285888671875p-601 {- 447947747580531 -601 (-1.32481e-181)}
; Y = -1.492367509204993059057642312836833298206329345703125p-311 {- 2217426130984946 -311 (-3.57723e-094)}
; -1.0994643806385766549027493965695612132549285888671875p-601 / -1.492367509204993059057642312836833298206329345703125p-311 == 1.473449902731101435193750148755498230457305908203125p-291
; [HW: 1.473449902731101435193750148755498230457305908203125p-291] 

; mpf : + 2132228805518386 -291
; mpfd: + 2132228805518386 -291 (3.70345e-088) class: Pos. norm. non-zero
; hwf : + 2132228805518386 -291 (3.70345e-088) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00110100110 #b0001100101110110011111110110010111110101101001110011)))
(assert (= y (fp #b1 #b01011001000 #b0111111000001011110011000000110110100101111111110010)))
(assert (= r (fp #b0 #b01011011100 #b0111100100110100000000110100100010000110010000110010)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
