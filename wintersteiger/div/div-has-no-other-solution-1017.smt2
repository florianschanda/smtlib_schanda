(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0623462343043075239990002955892123281955718994140625p-301 {- 280782477580833 -301 (-2.60758e-091)}
; Y = 1.7668102678090009671763027654378674924373626708984375p-518 {+ 3453406436368487 -518 (2.05898e-156)}
; -1.0623462343043075239990002955892123281955718994140625p-301 / 1.7668102678090009671763027654378674924373626708984375p-518 == -1.2025583659548340076383965424611233174800872802734375p216
; [HW: -1.2025583659548340076383965424611233174800872802734375p216] 

; mpf : - 912241781434967 216
; mpfd: - 912241781434967 216 (-1.26644e+065) class: Neg. norm. non-zero
; hwf : - 912241781434967 216 (-1.26644e+065) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011010010 #b0000111111110101111011000011110101011101101000100001)))
(assert (= y (fp #b0 #b00111111001 #b1100010001001101101011010111111001111010000001100111)))
(assert (= r (fp #b1 #b10011010111 #b0011001111011010110111010111010101001110101001010111)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
