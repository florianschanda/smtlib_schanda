(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.3384078733645690117981530420365743339061737060546875p-390 {- 1524053572383915 -390 (-5.3075e-118)}
; Y = 1.6749015102160298429367912831366993486881256103515625p164 {+ 3039486189920697 164 (3.91659e+049)}
; -1.3384078733645690117981530420365743339061737060546875p-390 / 1.6749015102160298429367912831366993486881256103515625p164 == -1.5981929268090999674001295716152526438236236572265625p-555
; [HW: -1.5981929268090999674001295716152526438236236572265625p-555] 

; mpf : - 2694021442273129 -555
; mpfd: - 2694021442273129 -555 (-1.35513e-167) class: Neg. norm. non-zero
; hwf : - 2694021442273129 -555 (-1.35513e-167) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001111001 #b0101011010100001111001011111110011001111010010101011)))
(assert (= y (fp #b0 #b10010100011 #b1010110011000110010110000110101001100110000110111001)))
(assert (= r (fp #b1 #b00111010100 #b1001100100100011001010111111000101010111111101101001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
