(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.5191866181447750694388787451316602528095245361328125p-191 {+ 2338208660012557 -191 (4.84041e-058)}
; Y = 1.8053897572859047837567914029932580888271331787109375p-919 {+ 3627153010800815 -919 (4.07385e-277)}
; 1.5191866181447750694388787451316602528095245361328125p-191 / 1.8053897572859047837567914029932580888271331787109375p-919 == 1.68294587029075959350166158401407301425933837890625p727
; [HW: 1.68294587029075959350166158401407301425933837890625p727] 

; mpf : + 3075714766955684 727
; mpfd: + 3075714766955684 727 (1.18817e+219) class: Pos. norm. non-zero
; hwf : + 3075714766955684 727 (1.18817e+219) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000000 #b1000010011101001011010100000100101110011111000001101)))
(assert (= y (fp #b0 #b00001101000 #b1100111000101110000001011110110000010011100010101111)))
(assert (= r (fp #b0 #b11011010110 #b1010111011010101100010100110000111010110010010100100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
