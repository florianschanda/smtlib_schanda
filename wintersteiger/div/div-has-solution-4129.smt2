(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1652742275255951742707338780746795237064361572265625p130 {+ 744328949498217 130 (1.58609e+039)}
; Y = 1.3683259177433104714083356157061643898487091064453125p621 {+ 1658792465899669 621 (1.19074e+187)}
; 1.1652742275255951742707338780746795237064361572265625p130 / 1.3683259177433104714083356157061643898487091064453125p621 == 1.703211511841279612866628667688928544521331787109375p-492
; [HW: 1.703211511841279612866628667688928544521331787109375p-492] 

; mpf : + 3166983102691030 -492
; mpfd: + 3166983102691030 -492 (1.33202e-148) class: Pos. norm. non-zero
; hwf : + 3166983102691030 -492 (1.33202e-148) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010000001 #b0010101001001111011010010110101000011000000101101001)))
(assert (= y (fp #b0 #b11001101100 #b0101111001001010100110110111101011111010000010010101)))
(assert (= r (fp #b0 #b01000010011 #b1011010000000101101010110110110110000111011011010110)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
