(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.603386354839905880709238772396929562091827392578125p135 {- 2717410562817442 135 (-6.98373e+040)}
; Y = -1.7307004382892612337485616080812178552150726318359375p-637 {- 3290782221598975 -637 (-3.03469e-192)}
; -1.603386354839905880709238772396929562091827392578125p135 / -1.7307004382892612337485616080812178552150726318359375p-637 == 1.8528756558527239572953249080455861985683441162109375p771
; [HW: 1.8528756558527239572953249080455861985683441162109375p771] 

; mpf : + 3841010485891695 771
; mpfd: + 3841010485891695 771 (2.3013e+232) class: Pos. norm. non-zero
; hwf : + 3841010485891695 771 (2.3013e+232) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000110 #b1001101001110111100001110011010011100011110110100010)))
(assert (= y (fp #b1 #b00110000010 #b1011101100001111001011110001010110100000000011111111)))
(assert (= r (fp #b0 #b11100000010 #b1101101001010110000011110001100101110001001001101111)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
