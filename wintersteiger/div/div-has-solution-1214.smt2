(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.640825917575980508189559259335510432720184326171875p-286 {- 2886023363604542 -286 (-1.31973e-086)}
; Y = 1.8820741010187258535069076970103196799755096435546875p580 {+ 3972508592661099 580 (7.44791e+174)}
; -1.640825917575980508189559259335510432720184326171875p-286 / 1.8820741010187258535069076970103196799755096435546875p580 == -1.743635828884566141283585238852538168430328369140625p-867
; [HW: -1.743635828884566141283585238852538168430328369140625p-867] 

; mpf : - 3349038041863882 -867
; mpfd: - 3349038041863882 -867 (-1.77194e-261) class: Neg. norm. non-zero
; hwf : - 3349038041863882 -867 (-1.77194e-261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01011100001 #b1010010000001101001010101101011001101011000000111110)))
(assert (= y (fp #b0 #b11001000011 #b1110000111001111100110111011100010000110001001101011)))
(assert (= r (fp #b1 #b00010011100 #b1011111001011110111010101110110100110001011011001010)))
(assert (= (fp.div roundTowardZero x y) r))
(check-sat)
(exit)
