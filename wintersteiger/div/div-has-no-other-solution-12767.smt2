(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.31880712625275808846936342888511717319488525390625p-511 {+ 1435779654994980 -511 (1.96722e-154)}
; Y = -1.2724646503414180909175001943367533385753631591796875p-213 {- 1227071697749243 -213 (-9.66622e-065)}
; 1.31880712625275808846936342888511717319488525390625p-511 / -1.2724646503414180909175001943367533385753631591796875p-213 == -1.0364194603747189926679084237548522651195526123046875p-298
; [HW: -1.0364194603747189926679084237548522651195526123046875p-298] 

; mpf : - 164018668172619 -298
; mpfd: - 164018668172619 -298 (-2.03515e-090) class: Neg. norm. non-zero
; hwf : - 164018668172619 -298 (-2.03515e-090) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01000000000 #b0101000110011101010110000000010011111100110000100100)))
(assert (= y (fp #b1 #b01100101010 #b0100010111000000001111100100101010001000010011111011)))
(assert (= r (fp #b1 #b01011010101 #b0000100101010010110010010010011100111111010101001011)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
