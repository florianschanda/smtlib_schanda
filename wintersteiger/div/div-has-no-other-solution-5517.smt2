(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.869358541019974229158151501906104385852813720703125p54 {- 3915242801388914 54 (-3.36754e+016)}
; Y = 1.9133193153291945254323991321143694221973419189453125p169 {+ 4113224528186837 169 (1.43172e+051)}
; -1.869358541019974229158151501906104385852813720703125p54 / 1.9133193153291945254323991321143694221973419189453125p169 == -1.95404763443611972917324237641878426074981689453125p-116
; [HW: -1.95404763443611972917324237641878426074981689453125p-116] 

; mpf : - 4296648570940212 -116
; mpfd: - 4296648570940212 -116 (-2.3521e-035) class: Neg. norm. non-zero
; hwf : - 4296648570940212 -116 (-2.3521e-035) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10000110101 #b1101111010001110010010000000011000101101110101110010)))
(assert (= y (fp #b0 #b10010101000 #b1110100111001111010010110110111000100100110111010101)))
(assert (= r (fp #b1 #b01110001011 #b1111010000111100011101110011110010111010101100110100)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
