(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.193037400809555226288694029790349304676055908203125p-907 {- 869363166354482 -907 (-1.10268e-273)}
; Y = -1.5490195093026219996801273737219162285327911376953125p-910 {- 2472564057514421 -910 (-1.78962e-274)}
; -1.193037400809555226288694029790349304676055908203125p-907 / -1.5490195093026219996801273737219162285327911376953125p-910 == 1.540377501567643747648617136292159557342529296875p2
; [HW: 1.540377501567643747648617136292159557342529296875p2] 

; mpf : + 2433643914699440 2
; mpfd: + 2433643914699440 2 (6.16151) class: Pos. norm. non-zero
; hwf : + 2433643914699440 2 (6.16151) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001110100 #b0011000101101010111001100010101101100001110000110010)))
(assert (= y (fp #b1 #b00001110001 #b1000110010001100100010101110010101010010000110110101)))
(assert (= r (fp #b0 #b10000000001 #b1000101001010110001011100001000010111010001010110000)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
