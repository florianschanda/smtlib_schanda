(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.3297504331769813834540627794922329485416412353515625p-61 {+ 1485063927981113 -61 (5.76687e-019)}
; Y = -1.5766991577199525043084804565296508371829986572265625p616 {- 2597222111812457 616 (-4.28772e+185)}
; 1.3297504331769813834540627794922329485416412353515625p-61 / -1.5766991577199525043084804565296508371829986572265625p616 == -1.6867522591943526766300465169479139149188995361328125p-678
; [HW: -1.6867522591943526766300465169479139149188995361328125p-678] 

; mpf : - 3092857218603533 -678
; mpfd: - 3092857218603533 -678 (-1.34498e-204) class: Neg. norm. non-zero
; hwf : - 3092857218603533 -678 (-1.34498e-204) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000010 #b0101010001101010100001100011111001010110010000111001)))
(assert (= y (fp #b1 #b11001100111 #b1001001110100010100011100101011000001001101101101001)))
(assert (= r (fp #b1 #b00101011001 #b1010111111001110111111101111110110110001101000001101)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
