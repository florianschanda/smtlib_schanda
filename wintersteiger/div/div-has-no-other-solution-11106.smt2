(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.469891763205211088205714986543171107769012451171875p302 {+ 2116204369675454 302 (1.19769e+091)}
; Y = -1.3446907650652091259502185494056902825832366943359375p-690 {- 1552349201105727 -690 (-2.61773e-208)}
; 1.469891763205211088205714986543171107769012451171875p302 / -1.3446907650652091259502185494056902825832366943359375p-690 == -1.0931076507645460793582969927228987216949462890625p992
; [HW: -1.0931076507645460793582969927228987216949462890625p992] 

; mpf : - 419319581288552 992
; mpfd: - 419319581288552 992 (-4.57529e+298) class: Neg. norm. non-zero
; hwf : - 419319581288552 992 (-4.57529e+298) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100101101 #b0111100001001010110100111001101110100000010010111110)))
(assert (= y (fp #b1 #b00101001101 #b0101100000111101101001110110101100110000001100111111)))
(assert (= r (fp #b1 #b11111011111 #b0001011111010101111001110010101100001010100001101000)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
