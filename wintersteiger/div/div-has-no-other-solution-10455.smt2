(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.267835959433436077148371623479761183261871337890625p968 {- 1206225927100842 968 (-3.163e+291)}
; Y = 1.4192723608664847834148758920491673052310943603515625p419 {+ 1888234848165049 419 (1.92147e+126)}
; -1.267835959433436077148371623479761183261871337890625p968 / 1.4192723608664847834148758920491673052310943603515625p419 == -1.786599942888206893343294723308645188808441162109375p548
; [HW: -1.786599942888206893343294723308645188808441162109375p548] 

; mpf : - 3542531209680982 548
; mpfd: - 3542531209680982 548 (-1.64613e+165) class: Neg. norm. non-zero
; hwf : - 3542531209680982 548 (-1.64613e+165) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111000111 #b0100010010010000111001011011111001110101100110101010)))
(assert (= y (fp #b0 #b10110100010 #b0110101101010101011011101111011000001001110010111001)))
(assert (= r (fp #b1 #b11000100011 #b1100100101011110100111010010010110111101100001010110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
