(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.327810777512805628930436796508729457855224609375p-691 {- 1476328495454704 -691 (-1.29244e-208)}
; Y = -1.392778083040127956593323688139207661151885986328125p-410 {- 1768915228418818 -410 (-5.26725e-124)}
; -1.327810777512805628930436796508729457855224609375p-691 / -1.392778083040127956593323688139207661151885986328125p-410 == 1.906708317256812446061076116166077554225921630859375p-282
; [HW: 1.906708317256812446061076116166077554225921630859375p-282] 

; mpf : + 4083451239731510 -282
; mpfd: + 4083451239731510 -282 (2.45372e-085) class: Pos. norm. non-zero
; hwf : + 4083451239731510 -282 (2.45372e-085) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101001100 #b0101001111101011011010000011100010110001100111110000)))
(assert (= y (fp #b1 #b01001100101 #b0110010010001101000110101011110100111110001100000010)))
(assert (= r (fp #b0 #b01011100101 #b1110100000011110000010010100100110100001000100110110)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
