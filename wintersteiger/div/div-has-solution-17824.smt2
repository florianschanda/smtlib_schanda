(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6135438987940384780728209079825319349765777587890625p202 {+ 2763156073984273 202 (1.03715e+061)}
; Y = -1.0569255178893879332235883339308202266693115234375p-703 {- 256369741154520 -703 (-2.51164e-212)}
; 1.6135438987940384780728209079825319349765777587890625p202 / -1.0569255178893879332235883339308202266693115234375p-703 == -1.5266391732278179471649082188378088176250457763671875p905
; [HW: -1.5266391732278179471649082188378088176250457763671875p905] 

; mpf : - 2371771984307507 905
; mpfd: - 2371771984307507 905 (-4.12936e+272) class: Neg. norm. non-zero
; hwf : - 2371771984307507 905 (-4.12936e+272) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011001001 #b1001110100010001001101101000001111111011000100010001)))
(assert (= y (fp #b1 #b00101000000 #b0000111010010010101010111011010110100100100011011000)))
(assert (= r (fp #b1 #b11110001000 #b1000011011010001110100110010100111001110010100110011)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
