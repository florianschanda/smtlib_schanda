(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.718046850036526240756984407198615372180938720703125p-271 {+ 3233795526259058 -271 (4.528e-082)}
; Y = -1.15342030640525106122140641673468053340911865234375p738 {- 690943634757756 738 (-1.66772e+222)}
; 1.718046850036526240756984407198615372180938720703125p-271 / -1.15342030640525106122140641673468053340911865234375p738 == -1.4895236718963185129638304715626873075962066650390625p-1009
; [HW: -1.4895236718963185129638304715626873075962066650390625p-1009] 

; mpf : - 2204618626341297 -1009
; mpfd: - 2204618626341297 -1009 (-2.71507e-304) class: Neg. norm. non-zero
; hwf : - 2204618626341297 -1009 (-2.71507e-304) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011110000 #b1011011111010001111010110001100111100111000101110010)))
(assert (= y (fp #b1 #b11011100001 #b0010011101000110100011011001111010001101100001111100)))
(assert (= r (fp #b1 #b00000001110 #b0111110101010001011011000110000101101001100110110001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
