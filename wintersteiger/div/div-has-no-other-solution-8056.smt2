(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.5679942500941839167438729418790899217128753662109375p186 {+ 2558018693072751 186 (1.53788e+056)}
; Y = 1.278993130432949154595689833513461053371429443359375p323 {+ 1256473358256758 323 (2.18553e+097)}
; 1.5679942500941839167438729418790899217128753662109375p186 / 1.278993130432949154595689833513461053371429443359375p323 == 1.225959868575217104336161355604417622089385986328125p-137
; [HW: 1.225959868575217104336161355604417622089385986328125p-137] 

; mpf : + 1017632779916034 -137
; mpfd: + 1017632779916034 -137 (7.03666e-042) class: Pos. norm. non-zero
; hwf : + 1017632779916034 -137 (7.03666e-042) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10010111001 #b1001000101101000000100100011100001111000011101101111)))
(assert (= y (fp #b0 #b10101000010 #b0100011101101100000110000000001100000100101001110110)))
(assert (= r (fp #b0 #b01101110110 #b0011100111011000100000011000010110111101001100000010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
