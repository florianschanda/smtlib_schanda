(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.6492868427657843000133652822114527225494384765625p-669 {- 2924127983136552 -669 (-6.73332e-202)}
; Y = 1.9602225281499936482276780225220136344432830810546875p-251 {+ 4324457819969067 -251 (5.41722e-076)}
; -1.6492868427657843000133652822114527225494384765625p-669 / 1.9602225281499936482276780225220136344432830810546875p-251 == -1.6827547067549903925254284331458620727062225341796875p-419
; [HW: -1.6827547067549903925254284331458620727062225341796875p-419] 

; mpf : - 3074853842927227 -419
; mpfd: - 3074853842927227 -419 (-1.24295e-126) class: Neg. norm. non-zero
; hwf : - 3074853842927227 -419 (-1.24295e-126) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101100010 #b1010011000110111101010011001101101100110111100101000)))
(assert (= y (fp #b0 #b01100000100 #b1111010111010001001001001100001101001001011000101011)))
(assert (= r (fp #b1 #b01001011100 #b1010111011001001000000110011000010110011111001111011)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
