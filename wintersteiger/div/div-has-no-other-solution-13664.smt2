(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2629635732471353737338404243928380310535430908203125p-420 {+ 1184282650487813 -420 (4.66437e-127)}
; Y = -1.803033347874311242975409186328761279582977294921875p598 {- 3616540686252830 598 (-1.87043e+180)}
; 1.2629635732471353737338404243928380310535430908203125p-420 / -1.803033347874311242975409186328761279582977294921875p598 == -1.4009320179641802095460434429696761071681976318359375p-1019
; [HW: -1.4009320179641802095460434429696761071681976318359375p-1019] 

; mpf : - 1805637286704383 -1019
; mpfd: - 1805637286704383 -1019 (-2.49374e-307) class: Neg. norm. non-zero
; hwf : - 1805637286704383 -1019 (-2.49374e-307) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001011011 #b0100001101010001100101001010101100100010110000000101)))
(assert (= y (fp #b1 #b11001010101 #b1100110110010011100101111110111010110111101100011110)))
(assert (= r (fp #b1 #b00000000100 #b0110011010100011011110110001000100010011010011111111)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
