(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.67150821496650525688210109365172684192657470703125p-900 {+ 3024204146699380 -900 (1.97748e-271)}
; Y = -1.3609755192210013508002930393558926880359649658203125p-716 {- 1625689213853573 -716 (-3.94797e-216)}
; 1.67150821496650525688210109365172684192657470703125p-900 / -1.3609755192210013508002930393558926880359649658203125p-716 == -1.228169200224297430423803234589286148548126220703125p-184
; [HW: -1.228169200224297430423803234589286148548126220703125p-184] 

; mpf : - 1027582725107570 -184
; mpfd: - 1027582725107570 -184 (-5.00886e-056) class: Neg. norm. non-zero
; hwf : - 1027582725107570 -184 (-5.00886e-056) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001111011 #b1010101111100111111101100101111001000110110001110100)))
(assert (= y (fp #b1 #b00100110011 #b0101110001101000111001000100000110110101111110000101)))
(assert (= r (fp #b1 #b01101000111 #b0011101001101001010010111111010011101010111101110010)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
