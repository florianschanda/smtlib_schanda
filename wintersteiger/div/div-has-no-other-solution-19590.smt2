(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.6805284431326459326783151482231914997100830078125p69 {- 3064827642907208 69 (-9.92009e+020)}
; Y = 1.275955706087663177328295205370523035526275634765625p760 {+ 1242794015107162 760 (7.73806e+228)}
; -1.6805284431326459326783151482231914997100830078125p69 / 1.275955706087663177328295205370523035526275634765625p760 == -1.3170742801766091023552007754915393888950347900390625p-691
; [HW: -1.3170742801766091023552007754915393888950347900390625p-691] 

; mpf : - 1427975610052145 -691
; mpfd: - 1427975610052145 -691 (-1.28199e-208) class: Neg. norm. non-zero
; hwf : - 1427975610052145 -691 (-1.28199e-208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001000100 #b1010111000110111000111001010111101000000101001001000)))
(assert (= y (fp #b0 #b11011110111 #b0100011010100101000010000111110011001010100001011010)))
(assert (= r (fp #b1 #b00101001100 #b0101000100101011110001111010111111000010111000110001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
