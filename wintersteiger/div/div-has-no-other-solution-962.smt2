(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.4305115906865106811807208941900171339511871337890625p666 {+ 1938851839394449 666 (4.37994e+200)}
; Y = 1.35986028337473019433900844887830317020416259765625p1014 {+ 1620666638111876 1014 (2.38732e+305)}
; 1.4305115906865106811807208941900171339511871337890625p666 / 1.35986028337473019433900844887830317020416259765625p1014 == 1.0519548281360544539353440995910204946994781494140625p-348
; [HW: 1.0519548281360544539353440995910204946994781494140625p-348] 

; mpf : + 233983744633633 -348
; mpfd: + 233983744633633 -348 (1.83467e-105) class: Pos. norm. non-zero
; hwf : + 233983744633633 -348 (1.83467e-105) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010011001 #b0110111000110110000000011111001010001100001010010001)))
(assert (= y (fp #b0 #b11111110101 #b0101110000011111110011011011010000111001010010000100)))
(assert (= r (fp #b0 #b01010100011 #b0000110101001100111010010101111110110110101100100001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
