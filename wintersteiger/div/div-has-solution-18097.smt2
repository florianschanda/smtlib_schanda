(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.247082720487400653297527242102660238742828369140625p-716 {+ 1112761647916746 -716 (3.61758e-216)}
; Y = 1.4616453245051836962176139422808773815631866455078125p933 {+ 2079065711418877 933 (1.06128e+281)}
; 1.247082720487400653297527242102660238742828369140625p-716 / 1.4616453245051836962176139422808773815631866455078125p933 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100110011 #b0011111101000000110100000010101111100110011011001010)))
(assert (= y (fp #b0 #b11110100100 #b0111011000101110011000110101001100011001110111111101)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
