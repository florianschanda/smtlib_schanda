(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.598266850945633255065558842034079134464263916015625p-104 {- 2694354366986874 -104 (-7.88006e-032)}
; Y = 1.1699030631349571773824891351978294551372528076171875p-519 {+ 765175371823699 -519 (6.81682e-157)}
; -1.598266850945633255065558842034079134464263916015625p-104 / 1.1699030631349571773824891351978294551372528076171875p-519 == -1.3661532321001035317209471031674183905124664306640625p415
; [HW: -1.3661532321001035317209471031674183905124664306640625p415] 

; mpf : - 1649007559646529 415
; mpfd: - 1649007559646529 415 (-1.15597e+125) class: Neg. norm. non-zero
; hwf : - 1649007559646529 415 (-1.15597e+125) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110010111 #b1001100100101000000001000010111100010111101001111010)))
(assert (= y (fp #b0 #b00111111000 #b0010101101111110110001000110001110100111101001010011)))
(assert (= r (fp #b1 #b10110011110 #b0101110110111100001101111101110100110001110101000001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
