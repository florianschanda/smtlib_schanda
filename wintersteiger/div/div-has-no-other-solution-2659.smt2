(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.25789874741649843059576596715487539768218994140625p803 {+ 1161472702764260 803 (6.71015e+241)}
; Y = -1.888279593915693777006481468561105430126190185546875p822 {- 4000455648159534 822 (-5.28108e+247)}
; 1.25789874741649843059576596715487539768218994140625p803 / -1.888279593915693777006481468561105430126190185546875p822 == -1.3323225559071101287145211244933307170867919921875p-20
; [HW: -1.3323225559071101287145211244933307170867919921875p-20] 

; mpf : - 1496647738950072 -20
; mpfd: - 1496647738950072 -20 (-1.2706e-006) class: Neg. norm. non-zero
; hwf : - 1496647738950072 -20 (-1.2706e-006) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11100100010 #b0100001000000101101001101111110111010101010011100100)))
(assert (= y (fp #b1 #b11100110101 #b1110001101100110010010101001110110010010011100101110)))
(assert (= r (fp #b1 #b01111101011 #b0101010100010011000101110100110101011000000110111000)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
