(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4222413546263241723721648668288253247737884521484375p368 {- 1901606007355527 368 (-8.5509e+110)}
; Y = -1.84130093493684920957775830174796283245086669921875p268 {- 3788882577088044 268 (-8.733e+080)}
; -1.4222413546263241723721648668288253247737884521484375p368 / -1.84130093493684920957775830174796283245086669921875p268 == 1.5448222804221869441931858091265894472599029541015625p99
; [HW: 1.5448222804221869441931858091265894472599029541015625p99] 

; mpf : + 2453661419092505 99
; mpfd: + 2453661419092505 99 (9.79147e+029) class: Pos. norm. non-zero
; hwf : + 2453661419092505 99 (9.79147e+029) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10101101111 #b0110110000011000000000100110100100100011100010000111)))
(assert (= y (fp #b1 #b10100001011 #b1101011101011111011111111000000110100101111000101100)))
(assert (= r (fp #b0 #b10001100010 #b1000101101111001011110010001010010001011101000011001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
