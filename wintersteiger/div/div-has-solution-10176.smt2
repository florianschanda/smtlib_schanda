(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9719735577915511459679009931278415024280548095703125p-122 {- 4377379752684005 -122 (-3.70887e-037)}
; Y = -1.8967873857306372098463498332421295344829559326171875p-869 {- 4038771336207059 -869 (-4.81895e-262)}
; -1.9719735577915511459679009931278415024280548095703125p-122 / -1.8967873857306372098463498332421295344829559326171875p-869 == 1.0396386925738398954166541443555615842342376708984375p747
; [HW: 1.0396386925738398954166541443555615842342376708984375p747] 

; mpf : + 178516801104999 747
; mpfd: + 178516801104999 747 (7.69643e+224) class: Pos. norm. non-zero
; hwf : + 178516801104999 747 (7.69643e+224) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01110000101 #b1111100011010011010000100101001101001010100111100101)))
(assert (= y (fp #b1 #b00010011010 #b1110010110010011110110111010110100101101101011010011)))
(assert (= r (fp #b0 #b11011101010 #b0000101000100101110000101110100001000010110001100111)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
