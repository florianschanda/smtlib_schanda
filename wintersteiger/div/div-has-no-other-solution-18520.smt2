(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.9776127048254126261639385120361112058162689208984375p-258 {+ 4402776213164391 -258 (4.26975e-078)}
; Y = -1.5192555671432035335755017513292841613292694091796875p432 {- 2338519178696187 432 (-1.68496e+130)}
; 1.9776127048254126261639385120361112058162689208984375p-258 / -1.5192555671432035335755017513292841613292694091796875p432 == -1.3016985078712597356798141845501959323883056640625p-690
; [HW: -1.3016985078712597356798141845501959323883056640625p-690] 

; mpf : - 1358729287627240 -690
; mpfd: - 1358729287627240 -690 (-2.53404e-208) class: Neg. norm. non-zero
; hwf : - 1358729287627240 -690 (-2.53404e-208) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01011111101 #b1111101001000100110100111000001101100001000101100111)))
(assert (= y (fp #b1 #b10110101111 #b1000010011101101111011101100111100100101010111111011)))
(assert (= r (fp #b1 #b00101001101 #b0100110100111100000111010000100010001111000111101000)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
