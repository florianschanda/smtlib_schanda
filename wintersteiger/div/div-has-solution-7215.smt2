(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9937294582625872951808787547633983194828033447265625p753 {- 4475359617938473 753 (-9.44611e+226)}
; Y = 1.0181553408065300292406618609675206243991851806640625p147 {+ 81764386091073 147 (1.81645e+044)}
; -1.9937294582625872951808787547633983194828033447265625p753 / 1.0181553408065300292406618609675206243991851806640625p147 == -1.9581780680767806313014034458319656550884246826171875p606
; [HW: -1.9581780680767806313014034458319656550884246826171875p606] 

; mpf : - 4315250390345171 606
; mpfd: - 4315250390345171 606 (-5.20031e+182) class: Neg. norm. non-zero
; hwf : - 4315250390345171 606 (-5.20031e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110000 #b1111111001100101000011011100010001001111010000101001)))
(assert (= y (fp #b0 #b10010010010 #b0000010010100101110101000001001100000011000001000001)))
(assert (= r (fp #b1 #b11001011101 #b1111010101001011001010000110101000100010010111010011)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
