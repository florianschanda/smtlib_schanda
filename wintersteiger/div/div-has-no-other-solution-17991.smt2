(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.175711609634163767879044826258905231952667236328125p753 {- 791334739673090 753 (-5.57041e+226)}
; Y = 1.388983433492178232171454510535113513469696044921875p579 {+ 1751825646128670 579 (2.7483e+174)}
; -1.175711609634163767879044826258905231952667236328125p753 / 1.388983433492178232171454510535113513469696044921875p579 == -1.69290947794559798467162181623280048370361328125p173
; [HW: -1.69290947794559798467162181623280048370361328125p173] 

; mpf : - 3120586866677280 173
; mpfd: - 3120586866677280 173 (-2.02686e+052) class: Neg. norm. non-zero
; hwf : - 3120586866677280 173 (-2.02686e+052) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110000 #b0010110011111011011011111010000011101000000000000010)))
(assert (= y (fp #b0 #b11001000010 #b0110001110010100011010110001010110001000111000011110)))
(assert (= r (fp #b1 #b10010101100 #b1011000101100010100000111111101011011101011000100000)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
