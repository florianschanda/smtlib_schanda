(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.9942165631403054870673940968117676675319671630859375p730 {- 4477553343284255 730 (-1.12634e+220)}
; Y = 1.2071894294699607730336765598622150719165802001953125p472 {+ 933098237356021 472 (1.47209e+142)}
; -1.9942165631403054870673940968117676675319671630859375p730 / 1.2071894294699607730336765598622150719165802001953125p472 == -1.6519499876799812465577588227461092174053192138671875p258
; [HW: -1.6519499876799812465577588227461092174053192138671875p258] 

; mpf : - 2936121721579763 258
; mpfd: - 2936121721579763 258 (-7.65131e+077) class: Neg. norm. non-zero
; hwf : - 2936121721579763 258 (-7.65131e+077) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011011001 #b1111111010000100111110100000011111010100010000011111)))
(assert (= y (fp #b0 #b10111010111 #b0011010100001010010111011100111110100110011111110101)))
(assert (= r (fp #b1 #b10100000001 #b1010011011100110001100011100001110110110100011110011)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
