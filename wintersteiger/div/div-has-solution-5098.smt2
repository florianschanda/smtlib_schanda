(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5503491638074582414930091545102186501026153564453125p-408 {- 2478552289046933 -408 (-2.34526e-123)}
; Y = 1.4096888628099659701575774306547828018665313720703125p-725 {+ 1845074609888805 -725 (7.98687e-219)}
; -1.5503491638074582414930091545102186501026153564453125p-408 / 1.4096888628099659701575774306547828018665313720703125p-725 == -1.09978109688481939798521125339902937412261962890625p317
; [HW: -1.09978109688481939798521125339902937412261962890625p317] 

; mpf : - 449374110749092 317
; mpfd: - 449374110749092 317 (-2.9364e+095) class: Neg. norm. non-zero
; hwf : - 449374110749092 317 (-2.9364e+095) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01001100111 #b1000110011100011101011101100101111101111000110010101)))
(assert (= y (fp #b0 #b00100101010 #b0110100011100001010111101000101101001101111000100101)))
(assert (= r (fp #b1 #b10100111100 #b0001100110001011010000010000001111100001000110100100)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
