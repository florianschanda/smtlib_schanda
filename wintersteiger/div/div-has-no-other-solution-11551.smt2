(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.8998018872501492015913981958874501287937164306640625p231 {+ 4052347444127041 231 (6.55598e+069)}
; Y = -1.7587786434462671092404661976615898311138153076171875p852 {- 3417235215881299 852 (-5.28162e+256)}
; 1.8998018872501492015913981958874501287937164306640625p231 / -1.7587786434462671092404661976615898311138153076171875p852 == -1.0801824859139477208458401946700178086757659912109375p-621
; [HW: -1.0801824859139477208458401946700178086757659912109375p-621] 

; mpf : - 361109813683695 -621
; mpfd: - 361109813683695 -621 (-1.24128e-187) class: Neg. norm. non-zero
; hwf : - 361109813683695 -621 (-1.24128e-187) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10011100110 #b1110011001011001011010101001111010011110010101000001)))
(assert (= y (fp #b1 #b11101010011 #b1100001000111111010100010011001010000001010001010011)))
(assert (= r (fp #b1 #b00110010010 #b0001010010000110110101101110001010110110010111101111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
