(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2331897746931466119946207982138730585575103759765625p-335 {+ 1050193382414665 -335 (1.7619e-101)}
; Y = -1.2932677189678447593479404531535692512989044189453125p467 {- 1320760389863381 467 (-4.92829e+140)}
; 1.2331897746931466119946207982138730585575103759765625p-335 / -1.2932677189678447593479404531535692512989044189453125p467 == -1.907091248944733141712504220777191221714019775390625p-803
; [HW: -1.907091248944733141712504220777191221714019775390625p-803] 

; mpf : - 4085175810738538 -803
; mpfd: - 4085175810738538 -803 (-3.57507e-242) class: Neg. norm. non-zero
; hwf : - 4085175810738538 -803 (-3.57507e-242) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010110000 #b0011101110110010010100110011100000010001100101001001)))
(assert (= y (fp #b1 #b10111010010 #b0100101100010011100101111101110111110000011111010101)))
(assert (= r (fp #b1 #b00011011100 #b1110100000110111001000011101000010110100100101101010)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
