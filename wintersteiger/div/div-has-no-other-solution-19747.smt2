(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.409427617607380778252945674466900527477264404296875p258 {+ 1843898066091790 258 (6.52802e+077)}
; Y = 1.54921955267431155078838855843059718608856201171875p344 {+ 2473464972768620 344 (5.55177e+103)}
; 1.409427617607380778252945674466900527477264404296875p258 / 1.54921955267431155078838855843059718608856201171875p344 == 1.819532441575995473925786427571438252925872802734375p-87
; [HW: 1.819532441575995473925786427571438252925872802734375p-87] 

; mpf : + 3690845998499686 -87
; mpfd: + 3690845998499686 -87 (1.17585e-026) class: Pos. norm. non-zero
; hwf : + 3690845998499686 -87 (1.17585e-026) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10100000001 #b0110100011010000001111111001001110110011111100001110)))
(assert (= y (fp #b0 #b10101010111 #b1000110010011001101001110001000100001111010101101100)))
(assert (= r (fp #b0 #b01110101000 #b1101000111001100111000001100101010010100011101100110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
