(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.11911950436849227941138451569713652133941650390625p-562 {+ 536466555486500 -562 (7.41343e-170)}
; Y = -1.1520801493798946690816364935017190873622894287109375p300 {- 684908104077743 300 (-2.34683e+090)}
; 1.11911950436849227941138451569713652133941650390625p-562 / -1.1520801493798946690816364935017190873622894287109375p300 == -1.942780638952692040533065664931200444698333740234375p-863
; [HW: -1.942780638952692040533065664931200444698333740234375p-863] 

; mpf : - 4245906534279462 -863
; mpfd: - 4245906534279462 -863 (-3.15891e-260) class: Neg. norm. non-zero
; hwf : - 4245906534279462 -863 (-3.15891e-260) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00111001101 #b0001111001111110100111011010011110010100000100100100)))
(assert (= y (fp #b1 #b10100101011 #b0010011011101110101110011000001111110101000110101111)))
(assert (= r (fp #b1 #b00010100000 #b1111000101011010000100100110101110011010100100100110)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
