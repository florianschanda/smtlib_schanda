(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2385504650643899271500458780792541801929473876953125p-931 {+ 1074335785573045 -931 (6.82319e-281)}
; Y = -1.2057544099687367289419626104063354432582855224609375p-604 {- 926635484065039 -604 (-1.81611e-182)}
; 1.2385504650643899271500458780792541801929473876953125p-931 / -1.2057544099687367289419626104063354432582855224609375p-604 == -1.027199614469171518038592694210819900035858154296875p-327
; [HW: -1.027199614469171518038592694210819900035858154296875p-327] 

; mpf : - 122496173587982 -327
; mpfd: - 122496173587982 -327 (-3.75704e-099) class: Neg. norm. non-zero
; hwf : - 122496173587982 -327 (-3.75704e-099) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00001011100 #b0011110100010001101001001010110111100101101010110101)))
(assert (= y (fp #b1 #b00110100011 #b0011010010101100010100100010110111010010110100001111)))
(assert (= r (fp #b1 #b01010111000 #b0000011011110110100011011100111010011011111000001110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
