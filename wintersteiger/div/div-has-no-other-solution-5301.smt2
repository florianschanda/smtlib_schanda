(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.6525005667518548602146211123908869922161102294921875p-766 {+ 2938601309282691 -766 (4.2576e-231)}
; Y = 1.4197186389271914119802886489196680486202239990234375p-1016 {+ 1890244705872951 -1016 (2.02175e-306)}
; 1.6525005667518548602146211123908869922161102294921875p-766 / 1.4197186389271914119802886489196680486202239990234375p-1016 == 1.16396342306287170487166804377920925617218017578125p250
; [HW: 1.16396342306287170487166804377920925617218017578125p250] 

; mpf : + 738425611008340 250
; mpfd: + 738425611008340 250 (2.1059e+075) class: Pos. norm. non-zero
; hwf : + 738425611008340 250 (2.1059e+075) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000001 #b1010011100001010010001101111001011010010000110000011)))
(assert (= y (fp #b0 #b00000000111 #b0110101101110010101011100100001110110110110000110111)))
(assert (= r (fp #b0 #b10011111001 #b0010100111111001100000011100001111001011100101010100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
