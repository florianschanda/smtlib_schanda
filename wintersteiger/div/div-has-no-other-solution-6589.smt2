(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.8297956316999155479408045721356756985187530517578125p-185 {- 3737067297717405 -185 (-3.73124e-056)}
; Y = 1.0509787033663047228770892616012133657932281494140625p-348 {+ 229587669484321 -348 (1.83297e-105)}
; -1.8297956316999155479408045721356756985187530517578125p-185 / 1.0509787033663047228770892616012133657932281494140625p-348 == -1.741039685998436947755863002385012805461883544921875p163
; [HW: -1.741039685998436947755863002385012805461883544921875p163] 

; mpf : - 3337346053729310 163
; mpfd: - 3337346053729310 163 (-2.03563e+049) class: Neg. norm. non-zero
; hwf : - 3337346053729310 163 (-2.03563e+049) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101000110 #b1101010001101101011111001000110010000011110010011101)))
(assert (= y (fp #b0 #b01010100011 #b0000110100001100111100001011011111000000001100100001)))
(assert (= r (fp #b1 #b10010100010 #b1011110110110100110001101110000001100110110000011110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
