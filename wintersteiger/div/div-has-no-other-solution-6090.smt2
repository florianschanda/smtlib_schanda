(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.079304110059915888797377192531712353229522705078125p-413 {+ 357153960514786 -413 (5.10218e-125)}
; Y = 1.97210572449027754515782362432219088077545166015625p318 {+ 4377974978579140 318 (1.0531e+096)}
; 1.079304110059915888797377192531712353229522705078125p-413 / 1.97210572449027754515782362432219088077545166015625p318 == 1.0945702318661230112439852746319957077503204345703125p-732
; [HW: 1.0945702318661230112439852746319957077503204345703125p-732] 

; mpf : + 425906460992613 -732
; mpfd: + 425906460992613 -732 (4.84492e-221) class: Pos. norm. non-zero
; hwf : + 425906460992613 -732 (4.84492e-221) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01001100010 #b0001010001001101010001100010111100100101010011100010)))
(assert (= y (fp #b0 #b10100111101 #b1111100011011011111010111011011011110000101011000100)))
(assert (= r (fp #b0 #b00100100011 #b0001100000110101110000010011010100001010010001100101)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
