(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.4492080035507870494626558866002596914768218994140625p-366 {+ 2023052997403169 -366 (9.64167e-111)}
; Y = -1.1974379144944056196919746071216650307178497314453125p-834 {- 889181318145813 -834 (-1.04529e-251)}
; 1.4492080035507870494626558866002596914768218994140625p-366 / -1.1974379144944056196919746071216650307178497314453125p-834 == -1.210257321911079042564551855321042239665985107421875p468
; [HW: -1.210257321911079042564551855321042239665985107421875p468] 

; mpf : - 946914796610654 468
; mpfd: - 946914796610654 468 (-9.22392e+140) class: Neg. norm. non-zero
; hwf : - 946914796610654 468 (-9.22392e+140) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01010010001 #b0111001011111111010010111011010001011010001000100001)))
(assert (= y (fp #b1 #b00010111101 #b0011001010001011010010101000100110111110011100010101)))
(assert (= r (fp #b1 #b10111010011 #b0011010111010011011011001000000101011010010001011110)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
