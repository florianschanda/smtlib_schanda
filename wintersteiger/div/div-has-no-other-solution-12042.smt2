(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.79689543903188120310687736491672694683074951171875p-530 {- 3588898002277228 -530 (-5.1124e-160)}
; Y = 1.7411852222657824285079186665825545787811279296875p-109 {+ 3338001490808696 -109 (2.68272e-033)}
; -1.79689543903188120310687736491672694683074951171875p-530 / 1.7411852222657824285079186665825545787811279296875p-109 == -1.0319955717827673513653508052811957895755767822265625p-421
; [HW: -1.0319955717827673513653508052811957895755767822265625p-421] 

; mpf : - 144095245158377 -421
; mpfd: - 144095245158377 -421 (-1.90568e-127) class: Neg. norm. non-zero
; hwf : - 144095245158377 -421 (-1.90568e-127) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111101101 #b1100110000000001010101101110100011111001001101101100)))
(assert (= y (fp #b0 #b01110010010 #b1011110110111110010100001001000111101000111101111000)))
(assert (= r (fp #b1 #b01001011010 #b0000100000110000110111001001111001101100011111101001)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
