(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.833218795812804113865013277973048388957977294921875p-228 {- 3752483858340638 -228 (-4.24987e-069)}
; Y = 1.148139940586926144305834895931184291839599609375p-840 {+ 667162981225968 -840 (1.56602e-253)}
; -1.833218795812804113865013277973048388957977294921875p-228 / 1.148139940586926144305834895931184291839599609375p-840 == -1.59668584900518961688931085518561303615570068359375p612
; [HW: -1.59668584900518961688931085518561303615570068359375p612] 

; mpf : - 2687234167237020 612
; mpfd: - 2687234167237020 612 (-2.71379e+184) class: Neg. norm. non-zero
; hwf : - 2687234167237020 612 (-2.71379e+184) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100011011 #b1101010101001101110100111011011001101101101100011110)))
(assert (= y (fp #b0 #b00010110111 #b0010010111101100011111111100100000001101010111110000)))
(assert (= r (fp #b1 #b11001100011 #b1001100011000000011001110101111101110110100110011100)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
