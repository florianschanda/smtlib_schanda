(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.8759338423939799778139558839029632508754730224609375p-887 {+ 3944855326206735 -887 (1.81807e-267)}
; Y = -1.124182449846032216811408943613059818744659423828125p-619 {- 559268034852546 -619 (-5.16737e-187)}
; 1.8759338423939799778139558839029632508754730224609375p-887 / -1.124182449846032216811408943613059818744659423828125p-619 == -1.6687094186988129518312007348868064582347869873046875p-268
; [HW: -1.6687094186988129518312007348868064582347869873046875p-268] 

; mpf : - 3011599488871115 -268
; mpfd: - 3011599488871115 -268 (-3.51837e-081) class: Neg. norm. non-zero
; hwf : - 3011599488871115 -268 (-3.51837e-081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00010001000 #b1110000000111101001100110100011010001010101100001111)))
(assert (= y (fp #b1 #b00110010100 #b0001111111001010011010111100100011010011011011000010)))
(assert (= r (fp #b1 #b01011110011 #b1010101100110000100010100101101111010110101011001011)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
