(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.91533978318443143251670335303060710430145263671875p1000 {- 4122323906466796 1000 (-2.0523e+301)}
; Y = 1.9578222103868245795865732361562550067901611328125p394 {+ 4313647749785288 394 (7.89935e+118)}
; -1.91533978318443143251670335303060710430145263671875p1000 / 1.9578222103868245795865732361562550067901611328125p394 == -1.956602364630443791071456871577538549900054931640625p605
; [HW: -1.956602364630443791071456871577538549900054931640625p605] 

; mpf : - 4308154052891402 605
; mpfd: - 4308154052891402 605 (-2.59806e+182) class: Neg. norm. non-zero
; hwf : - 4308154052891402 605 (-2.59806e+182) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11111100111 #b1110101001010011101101010100000110000001001111101100)))
(assert (= y (fp #b0 #b10110001001 #b1111010100110011110101100001110011111110011011001000)))
(assert (= r (fp #b1 #b11001011100 #b1111010011100011111001000111111101011101001100001010)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
