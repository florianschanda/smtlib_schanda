(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1226805714482441800328160752542316913604736328125p-666 {- 552504175859912 -666 (-3.66673e-201)}
; Y = 1.445060370170144548040980225778184831142425537109375p-276 {+ 2004373717255638 -276 (1.19017e-083)}
; -1.1226805714482441800328160752542316913604736328125p-666 / 1.445060370170144548040980225778184831142425537109375p-276 == -1.553818227422647080260276197805069386959075927734375p-391
; [HW: -1.553818227422647080260276197805069386959075927734375p-391] 

; mpf : - 2494175562651622 -391
; mpfd: - 2494175562651622 -391 (-3.08086e-118) class: Neg. norm. non-zero
; hwf : - 2494175562651622 -391 (-3.08086e-118) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101100101 #b0001111101100111111111100111001000111001100011001000)))
(assert (= y (fp #b0 #b01011101011 #b0111000111101111011110011111011010100000010111010110)))
(assert (= r (fp #b1 #b01001111000 #b1000110111000111000010000000011010110101011111100110)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
