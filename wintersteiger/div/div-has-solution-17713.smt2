(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.6407937285445599595590238095610402524471282958984375p833 {- 2885878397094631 833 (-9.39811e+250)}
; Y = -1.6706426403474587960573671807651408016681671142578125p544 {- 3020305945167581 544 (-9.62058e+163)}
; -1.6407937285445599595590238095610402524471282958984375p833 / -1.6706426403474587960573671807651408016681671142578125p544 == 1.9642665509881982455198112802463583648204803466796875p288
; [HW: 1.9642665509881982455198112802463583648204803466796875p288] 

; mpf : + 4342670479716283 288
; mpfd: + 4342670479716283 288 (9.76875e+086) class: Pos. norm. non-zero
; hwf : + 4342670479716283 288 (9.76875e+086) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101000000 #b1010010000001011000011101100101110010100101011100111)))
(assert (= y (fp #b1 #b11000011111 #b1010101110101111001111000110111110011000011011011101)))
(assert (= r (fp #b0 #b10100011111 #b1111011011011010001011000011010100011110111110111011)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
