(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.41327102040355168099949878524057567119598388671875p353 {+ 1861207213492460 353 (2.59307e+106)}
; Y = -1.3038878557609285824270273224101401865482330322265625p998 {- 1368589233967337 998 (-3.49282e+300)}
; 1.41327102040355168099949878524057567119598388671875p353 / -1.3038878557609285824270273224101401865482330322265625p998 == -1.0838900095275363355540321208536624908447265625p-645
; [HW: -1.0838900095275363355540321208536624908447265625p-645] 

; mpf : - 377807015648320 -645
; mpfd: - 377807015648320 -645 (-7.424e-195) class: Neg. norm. non-zero
; hwf : - 377807015648320 -645 (-7.424e-195) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101100000 #b0110100111001100001000010010110100000100100011101100)))
(assert (= y (fp #b1 #b11111100101 #b0100110111001011100110000011001000100101000011101001)))
(assert (= r (fp #b1 #b00101111010 #b0001010101111001110100001100111101100001110001000000)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
