(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5164666966168696138339555545826442539691925048828125p-218 {- 2325959222433005 -218 (-3.59993e-066)}
; Y = -1.4660609575727032716230269215884618461132049560546875p-179 {- 2098951954856363 -179 (-1.9133e-054)}
; -1.5164666966168696138339555545826442539691925048828125p-218 / -1.4660609575727032716230269215884618461132049560546875p-179 == 1.03438174844218000458795359008945524692535400390625p-39
; [HW: 1.03438174844218000458795359008945524692535400390625p-39] 

; mpf : + 154841629472548 -39
; mpfd: + 154841629472548 -39 (1.88153e-012) class: Pos. norm. non-zero
; hwf : + 154841629472548 -39 (1.88153e-012) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100101 #b1000010000110111001010010101001101110001010011101101)))
(assert (= y (fp #b1 #b01101001100 #b0111011101001111110001010101101010110111100110101011)))
(assert (= r (fp #b0 #b01111011000 #b0000100011001101001111100000010100100011011100100100)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
