(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.5632255353049082646776923866127617657184600830078125p-682 {- 2536542310924733 -682 (-7.79049e-206)}
; Y = 1.890251735192561621801132787368260324001312255859375p-476 {+ 4009337382879158 -476 (9.68817e-144)}
; -1.5632255353049082646776923866127617657184600830078125p-682 / 1.890251735192561621801132787368260324001312255859375p-476 == -1.6539866158574494381383601648849435150623321533203125p-207
; [HW: -1.6539866158574494381383601648849435150623321533203125p-207] 

; mpf : - 2945293879480901 -207
; mpfd: - 2945293879480901 -207 (-8.04124e-063) class: Neg. norm. non-zero
; hwf : - 2945293879480901 -207 (-8.04124e-063) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00101010101 #b1001000000101111100011000111011001101000000110111101)))
(assert (= y (fp #b0 #b01000100011 #b1110001111100111100010011010011111011011111110110110)))
(assert (= r (fp #b1 #b01100110000 #b1010011101101011101010101011011100100001001001000101)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
