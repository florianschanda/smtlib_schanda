(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8556850813526313270784839914995245635509490966796875p-496 {- 3853663013526203 -496 (-9.0704e-150)}
; Y = 1.457689877021274948987183961435221135616302490234375p-328 {+ 2061251959604262 -328 (2.66579e-099)}
; -1.8556850813526313270784839914995245635509490966796875p-496 / 1.457689877021274948987183961435221135616302490234375p-328 == -1.2730314661611303872490452704369090497493743896484375p-168
; [HW: -1.2730314661611303872490452704369090497493743896484375p-168] 

; mpf : - 1229624409263687 -168
; mpfd: - 1229624409263687 -168 (-3.40251e-051) class: Neg. norm. non-zero
; hwf : - 1229624409263687 -168 (-3.40251e-051) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000001111 #b1101101100001110001011010111000000010101101010111011)))
(assert (= y (fp #b0 #b01010110111 #b0111010100101011001010011110110110000100010000100110)))
(assert (= r (fp #b1 #b01101010111 #b0100010111100101011000111110000111110000111001000111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
