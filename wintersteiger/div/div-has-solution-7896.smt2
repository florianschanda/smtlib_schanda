(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1674869894721400243042808142490684986114501953125p-185 {+ 754294343376136 -185 (2.38069e-056)}
; Y = 1.2695056935672968112527314588078297674655914306640625p673 {+ 1213745741123905 673 (4.97533e+202)}
; 1.1674869894721400243042808142490684986114501953125p-185 / 1.2695056935672968112527314588078297674655914306640625p673 == 1.83927806765720713855216672527603805065155029296875p-859
; [HW: 1.83927806765720713855216672527603805065155029296875p-859] 

; mpf : + 3779772392761228 -859
; mpfd: + 3779772392761228 -859 (4.78499e-259) class: Pos. norm. non-zero
; hwf : + 3779772392761228 -859 (4.78499e-259) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101000110 #b0010101011100000011011010110011001001001110100001000)))
(assert (= y (fp #b0 #b11010100000 #b0100010011111110010100110011101111110101000101000001)))
(assert (= r (fp #b0 #b00010100100 #b1101011011011010111011010110110011010110011110001100)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
