(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.4138558716747018362269727731472812592983245849609375p88 {- 1863841149459279 88 (-4.37567e+026)}
; Y = -1.491779443913758829154403429129160940647125244140625p910 {- 2214777720358474 910 (-1.29122e+274)}
; -1.4138558716747018362269727731472812592983245849609375p88 / -1.491779443913758829154403429129160940647125244140625p910 == 1.8955293658764722497522825506166554987430572509765625p-823
; [HW: 1.8955293658764722497522825506166554987430572509765625p-823] 

; mpf : + 4033105718460617 -823
; mpfd: + 4033105718460617 -823 (3.38879e-248) class: Pos. norm. non-zero
; hwf : + 4033105718460617 -823 (3.38879e-248) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10001010111 #b0110100111110010011101010101101000011001101101001111)))
(assert (= y (fp #b1 #b11110001101 #b0111110111100101010000011111010001110100011001001010)))
(assert (= r (fp #b0 #b00011001000 #b1110010101000001011010011001101100001100000011001001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
