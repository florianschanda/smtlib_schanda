(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.1593065748391409020001674434752203524112701416015625p758 {+ 717453031083225 758 (1.75766e+228)}
; Y = -1.6732175677850642525612556710257194936275482177734375p1002 {- 3031902387416087 1002 (-7.17147e+301)}
; 1.1593065748391409020001674434752203524112701416015625p758 / -1.6732175677850642525612556710257194936275482177734375p1002 == -1.3857212560513365584569100974476896226406097412109375p-245
; [HW: -1.3857212560513365584569100974476896226406097412109375p-245] 

; mpf : - 1737134105021679 -245
; mpfd: - 1737134105021679 -245 (-2.45091e-074) class: Neg. norm. non-zero
; hwf : - 1737134105021679 -245 (-2.45091e-074) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11011110101 #b0010100011001000010100001101000011111000110011011001)))
(assert (= y (fp #b1 #b11111101001 #b1010110001010111111111001000110010111010110000010111)))
(assert (= r (fp #b1 #b01100001010 #b0110001010111110101000001101010000011100110011101111)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
