(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.150019407398520154828247541445307433605194091796875p671 {+ 675627347258318 671 (1.12676e+202)}
; Y = -1.8669987568165729019398213495151139795780181884765625p694 {- 3904615278129801 694 (-1.53448e+209)}
; 1.150019407398520154828247541445307433605194091796875p671 / -1.8669987568165729019398213495151139795780181884765625p694 == -1.2319444811622937141493139279191382229328155517578125p-24
; [HW: -1.2319444811622937141493139279191382229328155517578125p-24] 

; mpf : - 1044585078933149 -24
; mpfd: - 1044585078933149 -24 (-7.34296e-008) class: Neg. norm. non-zero
; hwf : - 1044585078933149 -24 (-7.34296e-008) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11010011110 #b0010011001100111101011000000000010001010101111001110)))
(assert (= y (fp #b1 #b11010110101 #b1101110111110011101000010110101000110011001010001001)))
(assert (= r (fp #b1 #b01111100111 #b0011101101100000101101101010100100010100011010011101)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
