(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.31984959710379801123281140462495386600494384765625p580 {+ 1440474526331268 580 (5.22302e+174)}
; Y = -1.9726360197106826976920501692802645266056060791015625p714 {- 4380363215936153 714 (-1.70006e+215)}
; 1.31984959710379801123281140462495386600494384765625p580 / -1.9726360197106826976920501692802645266056060791015625p714 == -1.3381582653016488304587028324021957814693450927734375p-135
; [HW: -1.3381582653016488304587028324021957814693450927734375p-135] 

; mpf : - 1522929437604759 -135
; mpfd: - 1522929437604759 -135 (-3.07226e-041) class: Neg. norm. non-zero
; hwf : - 1522929437604759 -135 (-3.07226e-041) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001000011 #b0101000111100001101010011100011100110011000110000100)))
(assert (= y (fp #b1 #b11011001001 #b1111100011111110101011001001011110010001101010011001)))
(assert (= r (fp #b1 #b01101111000 #b0101011010010001100010100100001001010111101110010111)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
