(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1323297400835194981283393644844181835651397705078125p-512 {- 595960168130173 -512 (-8.4453e-155)}
; Y = 1.7064202154174419323595657260739244520664215087890625p-485 {+ 3181433818920977 -485 (1.7082e-146)}
; -1.1323297400835194981283393644844181835651397705078125p-512 / 1.7064202154174419323595657260739244520664215087890625p-485 == -1.327140559931209384814110308070667088031768798828125p-28
; [HW: -1.327140559931209384814110308070667088031768798828125p-28] 

; mpf : - 1473310103803970 -28
; mpfd: - 1473310103803970 -28 (-4.94398e-009) class: Neg. norm. non-zero
; hwf : - 1473310103803970 -28 (-4.94398e-009) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111111111 #b0010000111100000010111001010000111110010011001111101)))
(assert (= y (fp #b0 #b01000011010 #b1011010011010111111101001000101001110011100000010001)))
(assert (= r (fp #b1 #b01111100011 #b0101001110111111011110111101011000011001100001000010)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
