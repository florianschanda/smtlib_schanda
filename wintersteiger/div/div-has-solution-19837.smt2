(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5014558586136177442682537730433978140354156494140625p139 {- 2258356417995041 139 (-1.04636e+042)}
; Y = 1.10886137455905231519182052579708397388458251953125p613 {+ 490268045899188 613 (3.76933e+184)}
; -1.5014558586136177442682537730433978140354156494140625p139 / 1.10886137455905231519182052579708397388458251953125p613 == -1.3540519068135850044853896179120056331157684326171875p-474
; [HW: -1.3540519068135850044853896179120056331157684326171875p-474] 

; mpf : - 1594508035595475 -474
; mpfd: - 1594508035595475 -474 (-2.77599e-143) class: Neg. norm. non-zero
; hwf : - 1594508035595475 -474 (-2.77599e-143) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010001010 #b1000000001011111011010010100000100100010000100100001)))
(assert (= y (fp #b0 #b11001100100 #b0001101111011110010101101100101110000111010110110100)))
(assert (= r (fp #b1 #b01000100101 #b0101101010100011001001010101000011011001110011010011)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
