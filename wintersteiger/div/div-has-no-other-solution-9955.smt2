(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.0477926761335305538835882543935440480709075927734375p-508 {- 215239078426007 -508 (-1.25037e-153)}
; Y = 1.12939733304920775225355100701563060283660888671875p-497 {+ 582753780903148 -497 (2.76019e-150)}
; -1.0477926761335305538835882543935440480709075927734375p-508 / 1.12939733304920775225355100701563060283660888671875p-497 == -1.8554899068242767246061930563882924616336822509765625p-12
; [HW: -1.8554899068242767246061930563882924616336822509765625p-12] 

; mpf : - 3852784025593033 -12
; mpfd: - 3852784025593033 -12 (-0.000453) class: Neg. norm. non-zero
; hwf : - 3852784025593033 -12 (-0.000453) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000000011 #b0000110000111100001001000000110011111011010110010111)))
(assert (= y (fp #b0 #b01000001110 #b0010000100100000001011110000000110100010110011101100)))
(assert (= r (fp #b1 #b01111110011 #b1101101100000001011000101111001111011110010011001001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
