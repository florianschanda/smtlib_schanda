(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.154254083951684162201445360551588237285614013671875p-906 {- 694698635005182 -906 (-2.13366e-273)}
; Y = -1.26428822126592788066545836045406758785247802734375p521 {- 1190248334811644 521 (-8.67908e+156)}
; -1.154254083951684162201445360551588237285614013671875p-906 / -1.26428822126592788066545836045406758785247802734375p521 == 0.0000000000000002220446049250313080847263336181640625p-1022
; [HW: 0.0000000000000002220446049250313080847263336181640625p-1022] 

; mpf : + 1 -1023
; mpfd: + 1 -1023 (4.94066e-324) class: Pos. denorm.
; hwf : + 1 -1023 (4.94066e-324) class: Pos. denorm.

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00001110101 #b0010011101111101001100100001010111011000110011111110)))
(assert (= y (fp #b1 #b11000001000 #b0100001110101000011001001001001100001110000111111100)))
(assert (= r (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000001)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
