(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1984200191138600910534250942873768508434295654296875p769 {- 893604324144027 769 (-3.72114e+231)}
; Y = -1.17905994613545228588691315962933003902435302734375p-71 {- 806414306692604 -71 (-4.99351e-022)}
; -1.1984200191138600910534250942873768508434295654296875p769 / -1.17905994613545228588691315962933003902435302734375p-71 == 1.0164199225339334287099291032063774764537811279296875p840
; [HW: 1.0164199225339334287099291032063774764537811279296875p840] 

; mpf : + 73948757005275 840
; mpfd: + 73948757005275 840 (7.45194e+252) class: Pos. norm. non-zero
; hwf : + 73948757005275 840 (7.45194e+252) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11100000000 #b0011001011001011101001111000010011110111001110011011)))
(assert (= y (fp #b1 #b01110111000 #b0010110111010110110111110110010010101100110111111100)))
(assert (= r (fp #b0 #b11101000111 #b0000010000110100000110001001011001001001001111011011)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
