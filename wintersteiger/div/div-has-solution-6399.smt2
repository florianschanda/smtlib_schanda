(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.77270976244533695620475555188022553920745849609375p-614 {+ 3479975398214364 -614 (2.60748e-185)}
; Y = -1.45473550334433188169214190565980970859527587890625p-298 {- 2047946643413668 -298 (-2.85657e-090)}
; 1.77270976244533695620475555188022553920745849609375p-614 / -1.45473550334433188169214190565980970859527587890625p-298 == -1.2185787439503641405025291533092968165874481201171875p-316
; [HW: -1.2185787439503641405025291533092968165874481201171875p-316] 

; mpf : - 984391149805971 -316
; mpfd: - 984391149805971 -316 (-9.12799e-096) class: Neg. norm. non-zero
; hwf : - 984391149805971 -316 (-9.12799e-096) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00110011001 #b1100010111010000010011101001011100000000101011011100)))
(assert (= y (fp #b1 #b01011010101 #b0111010001101001100010111100001100110001101010100100)))
(assert (= r (fp #b1 #b01011000011 #b0011011111110100110001101100110011011110000110010011)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
