(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.747835548884929313118163918261416256427764892578125p-722 {+ 3367951899292578 -722 (7.92216e-218)}
; Y = -1.2393249214339989716648915418772958219051361083984375p-683 {- 1077823626990631 -683 (-3.08815e-206)}
; 1.747835548884929313118163918261416256427764892578125p-722 / -1.2393249214339989716648915418772958219051361083984375p-683 == -1.410312597331249140353293114458210766315460205078125p-39
; [HW: -1.410312597331249140353293114458210766315460205078125p-39] 

; mpf : - 1847883660446434 -39
; mpfd: - 1847883660446434 -39 (-2.56534e-012) class: Neg. norm. non-zero
; hwf : - 1847883660446434 -39 (-2.56534e-012) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100101101 #b1011111101110010001001101000100100111111001110100010)))
(assert (= y (fp #b1 #b00101010100 #b0011110101000100011001011110011010101101010000100111)))
(assert (= r (fp #b1 #b01111011000 #b0110100100001010001111110001001010101100101011100010)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
