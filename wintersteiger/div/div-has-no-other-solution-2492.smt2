(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.51913925697018914462432803702540695667266845703125p101 {+ 2337995364244340 101 (3.85148e+030)}
; Y = 1.2412103601401647257063132201437838375568389892578125p-572 {+ 1086314888045149 -572 (8.02949e-173)}
; 1.51913925697018914462432803702540695667266845703125p101 / 1.2412103601401647257063132201437838375568389892578125p-572 == 1.2239176418078228092412018668255768716335296630859375p673
; [HW: 1.2239176418078228092412018668255768716335296630859375p673] 

; mpf : + 1008435408207391 673
; mpfd: + 1008435408207391 673 (4.79666e+202) class: Pos. norm. non-zero
; hwf : + 1008435408207391 673 (4.79666e+202) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001100100 #b1000010011100110010011110111001011000001101101110100)))
(assert (= y (fp #b0 #b00111000011 #b0011110110111111111101100101000001000010001001011101)))
(assert (= r (fp #b0 #b11010100000 #b0011100101010010101010101010010010001111111000011111)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
