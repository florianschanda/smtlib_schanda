(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.32305964884629734257259769947268068790435791015625p363 {+ 1454931314162628 363 (2.48581e+109)}
; Y = 1.231734466268022742951870895922183990478515625p504 {+ 1043639255933568 504 (6.45112e+151)}
; 1.32305964884629734257259769947268068790435791015625p363 / 1.231734466268022742951870895922183990478515625p504 == 1.0741435634702798385120559032657183706760406494140625p-141
; [HW: 1.0741435634702798385120559032657183706760406494140625p-141] 

; mpf : + 333912924816673 -141
; mpfd: + 333912924816673 -141 (3.8533e-043) class: Pos. norm. non-zero
; hwf : + 333912924816673 -141 (3.8533e-043) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10101101010 #b0101001010110100000010011000001001110011101111000100)))
(assert (= y (fp #b0 #b10111110111 #b0011101101010010111100110011000111111010001010000000)))
(assert (= r (fp #b0 #b01101110010 #b0001001011111011000100101001010001010000010100100001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
