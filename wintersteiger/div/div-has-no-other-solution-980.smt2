(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.702104248880065728855015549925155937671661376953125p130 {- 3161996433631506 130 (-2.31678e+039)}
; Y = 1.2566807171583380675627950040507130324840545654296875p153 {+ 1155987182147483 153 (1.43488e+046)}
; -1.702104248880065728855015549925155937671661376953125p130 / 1.2566807171583380675627950040507130324840545654296875p153 == -1.35444447077133389711889321915805339813232421875p-23
; [HW: -1.35444447077133389711889321915805339813232421875p-23] 

; mpf : - 1596275986489312 -23
; mpfd: - 1596275986489312 -23 (-1.61462e-007) class: Neg. norm. non-zero
; hwf : - 1596275986489312 -23 (-1.61462e-007) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10010000001 #b1011001110111101000110101010001101010010100100010010)))
(assert (= y (fp #b0 #b10010011000 #b0100000110110101110100111101010110110101011110011011)))
(assert (= r (fp #b1 #b01111101000 #b0101101010111100110111110111001000110101111111100000)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
