(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.4180329951457169013195880324929021298885345458984375p309 {- 1882653241166823 309 (-1.47896e+093)}
; Y = 1.7070717958652850132494904755731113255023956298828125p-598 {+ 3184368276383085 -598 (1.64556e-180)}
; -1.4180329951457169013195880324929021298885345458984375p309 / 1.7070717958652850132494904755731113255023956298828125p-598 == -1.66136304118004662910834667854942381381988525390625p906
; [HW: -1.66136304118004662910834667854942381381988525390625p906] 

; mpf : - 2978514345815076 906
; mpfd: - 2978514345815076 906 (-8.98754e+272) class: Neg. norm. non-zero
; hwf : - 2978514345815076 906 (-8.98754e+272) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100110100 #b0110101100000100001101011101101011001100101111100111)))
(assert (= y (fp #b0 #b00110101001 #b1011010100000010101010000011111100101010010101101101)))
(assert (= r (fp #b1 #b11110001001 #b1010100101001111000101101001100010100110110000100100)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
