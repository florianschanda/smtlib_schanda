(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.0511517171828874683825461033848114311695098876953125p630 {+ 230366854444213 630 (4.68342e+189)}
; Y = -1.990475060683892127855187936802394688129425048828125p864 {- 4460703114215746 864 (-2.44835e+260)}
; 1.0511517171828874683825461033848114311695098876953125p630 / -1.990475060683892127855187936802394688129425048828125p864 == -1.0561817507241013647245608808589167892932891845703125p-235
; [HW: -1.0561817507241013647245608808589167892932891845703125p-235] 

; mpf : - 253020111626085 -235
; mpfd: - 253020111626085 -235 (-1.91289e-071) class: Neg. norm. non-zero
; hwf : - 253020111626085 -235 (-1.91289e-071) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11001110101 #b0000110100011000010001110110100001101111010010110101)))
(assert (= y (fp #b1 #b11101011111 #b1111110110001111110001100000100100100100000101000010)))
(assert (= r (fp #b1 #b01100010100 #b0000111001100001111011010101110111111101111101100101)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
