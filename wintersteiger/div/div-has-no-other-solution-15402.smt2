(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.1373455312521627558197678808937780559062957763671875p-708 {+ 618549283368243 -708 (8.44609e-214)}
; Y = -1.4884915223100947390122428259928710758686065673828125p-836 {- 2199970237849389 -836 (-3.2484e-252)}
; 1.1373455312521627558197678808937780559062957763671875p-708 / -1.4884915223100947390122428259928710758686065673828125p-836 == -1.5281854336490090506828209981904365122318267822265625p127
; [HW: -1.5281854336490090506828209981904365122318267822265625p127] 

; mpf : - 2378735722164201 127
; mpfd: - 2378735722164201 127 (-2.60007e+038) class: Neg. norm. non-zero
; hwf : - 2378735722164201 127 (-2.60007e+038) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100111011 #b0010001100101001000100111010010011111010110100110011)))
(assert (= y (fp #b1 #b00010111011 #b0111110100001101110001111100100010110001111100101101)))
(assert (= r (fp #b1 #b10001111110 #b1000011100110111001010010001101110111110111111101001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
