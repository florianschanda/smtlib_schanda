(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.520327901698570460808923598960973322391510009765625p-171 {+ 2343348544200154 -171 (5.07935e-052)}
; Y = -1.8678349024296017066859576516435481607913970947265625p746 {- 3908380943201065 746 (-6.91378e+224)}
; 1.520327901698570460808923598960973322391510009765625p-171 / -1.8678349024296017066859576516435481607913970947265625p746 == -1.627903943459875879540277310297824442386627197265625p-918
; [HW: -1.627903943459875879540277310297824442386627197265625p-918] 

; mpf : - 2827827965790362 -918
; mpfd: - 2827827965790362 -918 (-7.34671e-277) class: Neg. norm. non-zero
; hwf : - 2827827965790362 -918 (-7.34671e-277) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01101010100 #b1000010100110100001101011001100011111101110111011010)))
(assert (= y (fp #b1 #b11011101001 #b1101111000101010011011011001110001000011001100101001)))
(assert (= r (fp #b1 #b00001101001 #b1010000010111110010100000001011000110000100010011010)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
