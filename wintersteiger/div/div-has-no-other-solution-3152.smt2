(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.9930396592141914613449671378475613892078399658203125p-214 {- 4472253039201157 -214 (-7.57002e-065)}
; Y = 1.8270688174854934349156110329204238951206207275390625p601 {+ 3724786818237425 601 (1.51629e+181)}
; -1.9930396592141914613449671378475613892078399658203125p-214 / 1.8270688174854934349156110329204238951206207275390625p601 == -1.09083995093141350452015103655867278575897216796875p-815
; [HW: -1.09083995093141350452015103655867278575897216796875p-815] 

; mpf : - 409106769165068 -815
; mpfd: - 409106769165068 -815 (-4.99246e-246) class: Neg. norm. non-zero
; hwf : - 409106769165068 -815 (-4.99246e-246) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100101001 #b1111111000110111110110001101101111110100101110000101)))
(assert (= y (fp #b0 #b11001011000 #b1101001110111010110010000011001010100100001111110001)))
(assert (= r (fp #b1 #b00011010000 #b0001011101000001010010010111101001101011101100001100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
