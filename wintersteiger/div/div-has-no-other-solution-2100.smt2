(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.792640364001794051063143342616967856884002685546875p-724 {- 3569734847957294 -724 (-2.03131e-218)}
; Y = -1.7983566487667108635406520988908596336841583251953125p-216 {- 3595478705894517 -216 (-1.70764e-065)}
; -1.792640364001794051063143342616967856884002685546875p-724 / -1.7983566487667108635406520988908596336841583251953125p-216 == 1.9936427685033033530004331623786129057407379150390625p-509
; [HW: 1.9936427685033033530004331623786129057407379150390625p-509] 

; mpf : + 4474969201970865 -509
; mpfd: + 4474969201970865 -509 (1.18954e-153) class: Pos. norm. non-zero
; hwf : + 4474969201970865 -509 (1.18954e-153) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100101011 #b1100101011101010011110101001100011100000100100101110)))
(assert (= y (fp #b1 #b01100100111 #b1100110001100001000110011111000011111111010001110101)))
(assert (= r (fp #b0 #b01000000010 #b1111111001011111010111110101101010100000111010110001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
