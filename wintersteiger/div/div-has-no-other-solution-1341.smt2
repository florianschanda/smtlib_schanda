(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.2061897459761217188400905797607265412807464599609375p454 {+ 928596063145679 454 (5.61091e+136)}
; Y = -1.345564582852100787846438834094442427158355712890625p-486 {- 1556284526565162 -486 (-6.73483e-147)}
; 1.2061897459761217188400905797607265412807464599609375p454 / -1.345564582852100787846438834094442427158355712890625p-486 == -1.792838131068289708736074317130260169506072998046875p939
; [HW: -1.792838131068289708736074317130260169506072998046875p939] 

; mpf : - 3570625511644270 939
; mpfd: - 3570625511644270 939 (-8.33119e+282) class: Neg. norm. non-zero
; hwf : - 3570625511644270 939 (-8.33119e+282) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10111000101 #b0011010011001000110110011110011110111100111011001111)))
(assert (= y (fp #b1 #b01000011001 #b0101100001110110111010111010011000000001011100101010)))
(assert (= r (fp #b1 #b11110101010 #b1100101011110111011100001001001111110101110001101110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
