(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = 1.673802599480698649614396344986744225025177001953125p-71 {+ 3034537135942546 -71 (7.08883e-022)}
; Y = -1.9740376356193987117393362495931796729564666748046875p290 {- 4386675532820363 290 (-3.92694e+087)}
; 1.673802599480698649614396344986744225025177001953125p-71 / -1.9740376356193987117393362495931796729564666748046875p290 == -1.695816299830074314058947493322193622589111328125p-362
; [HW: -1.695816299830074314058947493322193622589111328125p-362] 

; mpf : - 3133678028633040 -362
; mpfd: - 3133678028633040 -362 (-1.80518e-109) class: Neg. norm. non-zero
; hwf : - 3133678028633040 -362 (-1.80518e-109) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110111000 #b1010110001111110010100111100000010111010101110010010)))
(assert (= y (fp #b1 #b10100100001 #b1111100101011010100001111100111000001110111110001011)))
(assert (= r (fp #b1 #b01010010101 #b1011001000100001000001000101101111001011001111010000)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
