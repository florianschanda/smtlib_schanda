(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.716613857916650776047617910080589354038238525390625p-62 {+ 3227341903481962 -62 (3.72231e-019)}
; Y = -1.126163029869682308259370984160341322422027587890625p-313 {- 568187774309034 -313 (-6.74858e-095)}
; 1.716613857916650776047617910080589354038238525390625p-62 / -1.126163029869682308259370984160341322422027587890625p-313 == -1.5243031536164834971458503787289373576641082763671875p251
; [HW: -1.5243031536164834971458503787289373576641082763671875p251] 

; mpf : - 2361251487256371 251
; mpfd: - 2361251487256371 251 (-5.5157e+075) class: Neg. norm. non-zero
; hwf : - 2361251487256371 251 (-5.5157e+075) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111000001 #b1011011101110100000000010111101110011100110001101010)))
(assert (= y (fp #b1 #b01011000110 #b0010000001001100001110000110011101000001001010101010)))
(assert (= r (fp #b1 #b10011111010 #b1000011000111000101110110100000111111000111100110011)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
