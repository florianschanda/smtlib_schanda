(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5926187241593183774313047251780517399311065673828125p241 {- 2668917465296685 241 (-5.62783e+072)}
; Y = 1.4793402366747250287204451524303294718265533447265625p-678 {+ 2158756511271977 -678 (1.17959e-204)}
; -1.5926187241593183774313047251780517399311065673828125p241 / 1.4793402366747250287204451524303294718265533447265625p-678 == -1.076573654035951843610519063076935708522796630859375p919
; [HW: -1.076573654035951843610519063076935708522796630859375p919] 

; mpf : - 344857079782710 919
; mpfd: - 344857079782710 919 (-4.771e+276) class: Neg. norm. non-zero
; hwf : - 344857079782710 919 (-4.771e+276) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10011110000 #b1001011110110101110111000101011101000010111100101101)))
(assert (= y (fp #b0 #b00101011001 #b0111101010110110000010101011000000101100110000101001)))
(assert (= r (fp #b1 #b11110010110 #b0001001110011010010101001011101111010001110100110110)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
