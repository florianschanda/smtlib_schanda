(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.6937245619664238471813177966396324336528778076171875p-101 {+ 3124257678769747 -101 (6.68057e-031)}
; Y = -1.0420572670651953028908565102028660476207733154296875p-797 {- 189409092283035 -797 (-1.25022e-240)}
; 1.6937245619664238471813177966396324336528778076171875p-101 / -1.0420572670651953028908565102028660476207733154296875p-797 == -1.6253661055851142958061927856761030852794647216796875p696
; [HW: -1.6253661055851142958061927856761030852794647216796875p696] 

; mpf : - 2816398560083259 696
; mpfd: - 2816398560083259 696 (-5.34353e+209) class: Neg. norm. non-zero
; hwf : - 2816398560083259 696 (-5.34353e+209) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01110011010 #b1011000110010111111011101101001000010011111001010011)))
(assert (= y (fp #b1 #b00011100010 #b0000101011000100010000111101101010011010101010011011)))
(assert (= r (fp #b1 #b11010110111 #b1010000000010111111111100011101110000011110100111011)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
