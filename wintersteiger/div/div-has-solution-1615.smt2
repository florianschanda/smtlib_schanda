(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.258493418460858048746331405709497630596160888671875p858 {- 1164150863058046 858 (-2.41873e+258)}
; Y = -1.289458947034372915396716052782721817493438720703125p-120 {- 1303607206003058 -120 (-9.70081e-037)}
; -1.258493418460858048746331405709497630596160888671875p858 / -1.289458947034372915396716052782721817493438720703125p-120 == 1.9519712843208656405380452270037494599819183349609375p977
; [HW: 1.9519712843208656405380452270037494599819183349609375p977] 

; mpf : + 4287297521334863 977
; mpfd: + 4287297521334863 977 (2.49333e+294) class: Pos. norm. non-zero
; hwf : + 4287297521334863 977 (2.49333e+294) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101011001 #b0100001000101100100111111110101010000101010001111110)))
(assert (= y (fp #b1 #b01110000111 #b0100101000011001111110110100011100001100000101110010)))
(assert (= r (fp #b0 #b11111010000 #b1111001110110100011000111101110011100011101001001111)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
