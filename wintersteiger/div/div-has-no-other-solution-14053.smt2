(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.7615751119953111381022381465299986302852630615234375p864 {- 3429829390596727 864 (-2.16679e+260)}
; Y = -1.2530898432340704662379948786110617220401763916015625p18 {- 1139815323680217 18 (-328490)}
; -1.7615751119953111381022381465299986302852630615234375p864 / -1.2530898432340704662379948786110617220401763916015625p18 == 1.4057851649718131614719140998204238712787628173828125p846
; [HW: 1.4057851649718131614719140998204238712787628173828125p846] 

; mpf : + 1827493917759533 846
; mpfd: + 1827493917759533 846 (6.59622e+254) class: Pos. norm. non-zero
; hwf : + 1827493917759533 846 (6.59622e+254) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11101011111 #b1100001011110110100101100010011101110111101001110111)))
(assert (= y (fp #b1 #b10000010001 #b0100000011001010011111101111011110100011110111011001)))
(assert (= r (fp #b0 #b11101001101 #b0110011111100001100010010101110011000001100000101101)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
