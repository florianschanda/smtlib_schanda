(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.135983445200021701992909584078006446361541748046875p294 {- 612414993131374 294 (-3.61569e+088)}
; Y = 1.4566993604324143252171097628888674080371856689453125p991 {+ 2056791069463765 991 (3.04857e+298)}
; -1.135983445200021701992909584078006446361541748046875p294 / 1.4566993604324143252171097628888674080371856689453125p991 == -1.5596676652110430527642392917186953127384185791015625p-698
; [HW: -1.5596676652110430527642392917186953127384185791015625p-698] 

; mpf : - 2520519088495769 -698
; mpfd: - 2520519088495769 -698 (-1.18603e-210) class: Neg. norm. non-zero
; hwf : - 2520519088495769 -698 (-1.18603e-210) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100100101 #b0010001011001111110011111010000111101110011101101110)))
(assert (= y (fp #b0 #b11111011110 #b0111010011101010001111111101000100101001010011010101)))
(assert (= r (fp #b1 #b00101000101 #b1000111101000110011000010100111010110101110010011001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
