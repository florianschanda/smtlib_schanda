(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.5861377780669025927551274435245431959629058837890625p-240 {- 2639729878889873 -240 (-8.97722e-073)}
; Y = 1.2090317138048718437204342990298755466938018798828125p-840 {+ 941395148400237 -840 (1.64908e-253)}
; -1.5861377780669025927551274435245431959629058837890625p-240 / 1.2090317138048718437204342990298755466938018798828125p-840 == -1.311907504125977563802507575019262731075286865234375p600
; [HW: -1.311907504125977563802507575019262731075286865234375p600] 

; mpf : - 1404706519355814 600
; mpfd: - 1404706519355814 600 (-5.44378e+180) class: Neg. norm. non-zero
; hwf : - 1404706519355814 600 (-5.44378e+180) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100001111 #b1001011000001101001000000001101110111111010110010001)))
(assert (= y (fp #b0 #b00010110111 #b0011010110000011000110100011011010011110011001101101)))
(assert (= r (fp #b1 #b11001010111 #b0100111111011001001010111001000110011001000110100110)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
