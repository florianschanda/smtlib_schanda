(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.0713441983195710616172391382860951125621795654296875p-555 {- 321305704967067 -555 (-9.08409e-168)}
; Y = 1.892339354020051711557925955276004970073699951171875p-844 {+ 4018739182252734 -844 (1.61318e-254)}
; -1.0713441983195710616172391382860951125621795654296875p-555 / 1.892339354020051711557925955276004970073699951171875p-844 == -1.13229606100367430343567320960573852062225341796875p288
; [HW: -1.13229606100367430343567320960573852062225341796875p288] 

; mpf : - 595808491038732 288
; mpfd: - 595808491038732 288 (-5.63117e+086) class: Neg. norm. non-zero
; hwf : - 595808491038732 288 (-5.63117e+086) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111010100 #b0001001001000011100111010000011010001010101110011011)))
(assert (= y (fp #b0 #b00010110011 #b1110010001110000010110100001011001110011001010111110)))
(assert (= r (fp #b1 #b10100011111 #b0010000111011110001001111001011101100110100000001100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
