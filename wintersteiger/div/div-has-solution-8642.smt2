(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.7735582101002627108954357026959769427776336669921875p-857 {- 3483796466756931 -857 (-1.84561e-258)}
; Y = -1.2572490594325465007585762577946297824382781982421875p-534 {- 1158546768201827 -534 (-2.23565e-161)}
; -1.7735582101002627108954357026959769427776336669921875p-857 / -1.2572490594325465007585762577946297824382781982421875p-534 == 1.4106657680863567971840666359639726579189300537109375p-323
; [HW: 1.4106657680863567971840666359639726579189300537109375p-323] 

; mpf : + 1849474200127535 -323
; mpfd: + 1849474200127535 -323 (8.25535e-098) class: Pos. norm. non-zero
; hwf : + 1849474200127535 -323 (8.25535e-098) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010100110 #b1100011000000111111010010010110111101110110101000011)))
(assert (= y (fp #b1 #b00111101001 #b0100000111011011000100110000100100110000100001100011)))
(assert (= r (fp #b0 #b01010111100 #b0110100100100001011001000100101110000100100000101111)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
