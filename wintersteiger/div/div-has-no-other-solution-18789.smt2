(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.823693697423411475000420978176407516002655029296875p-135 {- 3709586628783502 -135 (-4.187e-041)}
; Y = 1.584019542930307888894958523451350629329681396484375p816 {+ 2630190195918022 816 (6.92209e+245)}
; -1.823693697423411475000420978176407516002655029296875p-135 / 1.584019542930307888894958523451350629329681396484375p816 == -1.15130757417912032991580417728982865810394287109375p-951
; [HW: -1.15130757417912032991580417728982865810394287109375p-951] 

; mpf : - 681428734691420 -951
; mpfd: - 681428734691420 -951 (-6.04875e-287) class: Neg. norm. non-zero
; hwf : - 681428734691420 -951 (-6.04875e-287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01101111000 #b1101001011011101100101110001010001011010110110001110)))
(assert (= y (fp #b0 #b11100101111 #b1001010110000010010011100000010100011100010011000110)))
(assert (= r (fp #b1 #b00001001000 #b0010011010111100000101111101101010111100100001011100)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
