(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.831888815487599853071287725470028817653656005859375p-835 {- 3746494159443638 -835 (-7.99563e-252)}
; Y = 1.646972983731112005756358485086821019649505615234375p-661 {+ 2913707288450214 -661 (1.72131e-199)}
; -1.831888815487599853071287725470028817653656005859375p-835 / 1.646972983731112005756358485086821019649505615234375p-661 == -1.1122761779234366930069199952413327991962432861328125p-174
; [HW: -1.1122761779234366930069199952413327991962432861328125p-174] 

; mpf : - 505646953058573 -174
; mpfd: - 505646953058573 -174 (-4.64508e-053) class: Neg. norm. non-zero
; hwf : - 505646953058573 -174 (-4.64508e-053) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00010111100 #b1101010011110110101010100101100001101101011010110110)))
(assert (= y (fp #b0 #b00101101010 #b1010010110100000000001010111111010000101010010100110)))
(assert (= r (fp #b1 #b01101010001 #b0001110010111110001000011011000001001101000100001101)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
