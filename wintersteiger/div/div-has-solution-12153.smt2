(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.7856492289063776723878618213348090648651123046875p-762 {+ 3538249574546680 -762 (7.36104e-230)}
; Y = 0.1029204994712016318914038492948748171329498291015625p-1022 {+ 463512723067289 -1023 (2.29006e-309)}
; 1.7856492289063776723878618213348090648651123046875p-762 / 0.1029204994712016318914038492948748171329498291015625p-1022 == 1.0843619821129653058022768163937143981456756591796875p264
; [HW: 1.0843619821129653058022768163937143981456756591796875p264] 

; mpf : + 379932591208187 264
; mpfd: + 379932591208187 264 (3.21435e+079) class: Pos. norm. non-zero
; hwf : + 379932591208187 264 (3.21435e+079) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b00100000101 #b1100100100100000010011101101000001000111110011111000)))
(assert (= y (fp #b0 #b00000000000 #b0001101001011000111111110111001101010001000110011001)))
(assert (= r (fp #b0 #b10100000111 #b0001010110011000101111110011001000110011011011111011)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
