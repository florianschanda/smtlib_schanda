(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.2988813732712463089313814634806476533412933349609375p578 {- 1346042041292367 578 (-1.28501e+174)}
; Y = 1.9951299835282505501510286194388754665851593017578125p-219 {+ 4481667023003037 -219 (2.36811e-066)}
; -1.2988813732712463089313814634806476533412933349609375p578 / 1.9951299835282505501510286194388754665851593017578125p-219 == -1.302051880323369825731560922577045857906341552734375p796
; [HW: -1.302051880323369825731560922577045857906341552734375p796] 

; mpf : - 1360320735670886 796
; mpfd: - 1360320735670886 796 (-5.42631e+239) class: Neg. norm. non-zero
; hwf : - 1360320735670886 796 (-5.42631e+239) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11001000001 #b0100110010000011011111010101101110010101011001001111)))
(assert (= y (fp #b0 #b01100100100 #b1111111011000000110101101010111010000101110110011101)))
(assert (= r (fp #b1 #b11100011011 #b0100110101010011010001011010001110101111001001100110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
