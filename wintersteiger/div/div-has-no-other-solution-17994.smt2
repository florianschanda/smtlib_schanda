(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.8613164494551781569242621117155067622661590576171875p-568 {- 3879024440814419 -568 (-1.92656e-171)}
; Y = -1.693074358782513666454860867816023528575897216796875p-477 {- 3121329423952974 -477 (-4.33878e-144)}
; -1.8613164494551781569242621117155067622661590576171875p-568 / -1.693074358782513666454860867816023528575897216796875p-477 == 1.0993707628964666245252601584070362150669097900390625p-91
; [HW: 1.0993707628964666245252601584070362150669097900390625p-91] 

; mpf : + 447526130752049 -91
; mpfd: + 447526130752049 -91 (4.44032e-028) class: Pos. norm. non-zero
; hwf : + 447526130752049 -91 (4.44032e-028) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00111000111 #b1101110001111111001111000001110111101010101101010011)))
(assert (= y (fp #b1 #b01000100010 #b1011000101101101010100100011100010101010110001001110)))
(assert (= r (fp #b0 #b01110100100 #b0001100101110000010111001100000011010001101000110001)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
