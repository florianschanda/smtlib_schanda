(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = 1.3963166360516137132208314142189919948577880859375p-42 {+ 1784851454442776 -42 (3.17486e-013)}
; Y = 1.638447957056342385584457588265649974346160888671875p974 {+ 2875313981494398 974 (2.61606e+293)}
; 1.3963166360516137132208314142189919948577880859375p-42 / 1.638447957056342385584457588265649974346160888671875p974 == 1.7044381910796297940891008693142794072628021240234375p-1017
; [HW: 1.7044381910796297940891008693142794072628021240234375p-1017] 

; mpf : + 3172507574851767 -1017
; mpfd: + 3172507574851767 -1017 (1.2136e-306) class: Pos. norm. non-zero
; hwf : + 3172507574851767 -1017 (1.2136e-306) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b01111010101 #b0110010101110101000000011100111010110011110100011000)))
(assert (= y (fp #b0 #b11111001101 #b1010001101110001010100110100011111000001010001111110)))
(assert (= r (fp #b0 #b00000000110 #b1011010001010110000011111011000010111101100010110111)))
(assert (= (fp.div roundTowardNegative x y) r))
(check-sat)
(exit)
