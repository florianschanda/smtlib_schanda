(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.841939512352170016384889095206744968891143798828125p759 {- 3791758474097730 759 (-5.58524e+228)}
; Y = 1.6102148253802466282280647646985016763210296630859375p-197 {+ 2748163260198431 -197 (8.01631e-060)}
; -1.841939512352170016384889095206744968891143798828125p759 / 1.6102148253802466282280647646985016763210296630859375p-197 == -1.14390917492465771232446059002541005611419677734375p956
; [HW: -1.14390917492465771232446059002541005611419677734375p956] 

; mpf : - 648109306565884 956
; mpfd: - 648109306565884 956 (-6.96735e+287) class: Neg. norm. non-zero
; hwf : - 648109306565884 956 (-6.96735e+287) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b11011110110 #b1101011110001001010110010000111011000011010001000010)))
(assert (= y (fp #b0 #b01100111010 #b1001110000110111000010011110111010001010111000011111)))
(assert (= r (fp #b1 #b11110111011 #b0010010011010111001110110100111111100101010011111100)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
