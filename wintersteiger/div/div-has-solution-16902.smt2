(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.298714959723695105964225149364210665225982666015625p-481 {- 1345292581301626 -481 (-2.08011e-145)}
; Y = 1.942263481025176208305538239073939621448516845703125p-410 {+ 4243577462029810 -410 (7.34531e-124)}
; -1.298714959723695105964225149364210665225982666015625p-481 / 1.942263481025176208305538239073939621448516845703125p-410 == -1.337321092026299229615915464819408953189849853515625p-72
; [HW: -1.337321092026299229615915464819408953189849853515625p-72] 

; mpf : - 1519159144353850 -72
; mpfd: - 1519159144353850 -72 (-2.83189e-022) class: Neg. norm. non-zero
; hwf : - 1519159144353850 -72 (-2.83189e-022) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01000011110 #b0100110001111000100101010110011011010110110101111010)))
(assert (= y (fp #b0 #b01001100101 #b1111000100111000001011011111001100110111110111110010)))
(assert (= r (fp #b1 #b01110110111 #b0101011001011010101011001101001010000001000000111010)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
