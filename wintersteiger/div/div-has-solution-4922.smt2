(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = -1.1329514243186036281940687331371009349822998046875p282 {- 598759985019640 282 (-8.8038e+084)}
; Y = -1.9783750751687196878236818520235829055309295654296875p692 {- 4406209623958427 692 (-4.06505e+208)}
; -1.1329514243186036281940687331371009349822998046875p282 / -1.9783750751687196878236818520235829055309295654296875p692 == 1.1453353194130626580005127834738232195377349853515625p-411
; [HW: 1.1453353194130626580005127834738232195377349853515625p-411] 

; mpf : + 654532090352441 -411
; mpfd: + 654532090352441 -411 (2.16573e-124) class: Pos. norm. non-zero
; hwf : + 654532090352441 -411 (2.16573e-124) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b10100011001 #b0010001000001001000110101100001101100111101011111000)))
(assert (= y (fp #b1 #b11010110011 #b1111101001110110110010011111011100010010001110011011)))
(assert (= r (fp #b0 #b01001100100 #b0010010100110100101100100000101111010101001100111001)))
(assert (= (fp.div roundNearestTiesToEven x y) r))
(check-sat)
(exit)
