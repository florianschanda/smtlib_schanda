(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.2657006100401744230765643806080333888530731201171875p123 {+ 1196609168369043 123 (1.34592e+037)}
; Y = -1.1262620122374127351605466174078173935413360595703125p241 {- 568633551263461 241 (-3.97987e+072)}
; 1.2657006100401744230765643806080333888530731201171875p123 / -1.1262620122374127351605466174078173935413360595703125p241 == -1.1238065355021211733088648543343879282474517822265625p-118
; [HW: -1.1238065355021211733088648543343879282474517822265625p-118] 

; mpf : - 557575067153385 -118
; mpfd: - 557575067153385 -118 (-3.38183e-036) class: Neg. norm. non-zero
; hwf : - 557575067153385 -118 (-3.38183e-036) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10001111010 #b0100010000000100111101001000011010100110010110010011)))
(assert (= y (fp #b1 #b10011110000 #b0010000001010010101101010000110101001001011011100101)))
(assert (= r (fp #b1 #b01110001001 #b0001111110110001110010001111110100000011001111101001)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
