(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.325033953264713293407339733676053583621978759765625p-193 {- 1463822790805722 -193 (-1.05545e-058)}
; Y = 1.4174637073997740088771024602465331554412841796875p313 {+ 1880089397086328 313 (2.36538e+094)}
; -1.325033953264713293407339733676053583621978759765625p-193 / 1.4174637073997740088771024602465331554412841796875p313 == -1.8695843094217685642632886811043135821819305419921875p-507
; [HW: -1.8695843094217685642632886811043135821819305419921875p-507] 

; mpf : - 3916259571879107 -507
; mpfd: - 3916259571879107 -507 (-4.46208e-153) class: Neg. norm. non-zero
; hwf : - 3916259571879107 -507 (-4.46208e-153) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100111110 #b0101001100110101011011001101011101011100100011011010)))
(assert (= y (fp #b0 #b10100111000 #b0110101011011110111001101100101010001100100001111000)))
(assert (= r (fp #b1 #b01000000100 #b1101111010011101000100111100101000010100110011000011)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
