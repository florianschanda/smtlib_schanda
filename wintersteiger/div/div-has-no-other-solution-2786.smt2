(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to negative
; Precision: double (11/53)
; X = -1.9769755108779190067025410826317965984344482421875p-216 {- 4399906546739896 -216 (-1.87725e-065)}
; Y = 1.6058686122403906804123607798828743398189544677734375p-489 {+ 2728589656321303 -489 (1.00471e-147)}
; -1.9769755108779190067025410826317965984344482421875p-216 / 1.6058686122403906804123607798828743398189544677734375p-489 == -1.2310941852956371889149522758089005947113037109375p273
; [HW: -1.2310941852956371889149522758089005947113037109375p273] 

; mpf : - 1040755686784920 273
; mpfd: - 1040755686784920 273 (-1.86844e+082) class: Neg. norm. non-zero
; hwf : - 1040755686784920 273 (-1.86844e+082) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b01100100111 #b1111101000011011000100010010110000110110101010111000)))
(assert (= y (fp #b0 #b01000010110 #b1001101100011010001101001001001100111110110100010111)))
(assert (= r (fp #b1 #b10100010000 #b0011101100101000111111010001000000100011111110011000)))
(assert  (not (= (fp.div roundTowardNegative x y) r)))
(check-sat)
(exit)
