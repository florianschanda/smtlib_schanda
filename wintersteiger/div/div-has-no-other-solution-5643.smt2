(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.1404308350135494709576278182794339954853057861328125p-813 {- 632444256238349 -813 (-2.08777e-245)}
; Y = 1.7525084980110838817068952266708947718143463134765625p-546 {+ 3388996991235849 -546 (7.60821e-165)}
; -1.1404308350135494709576278182794339954853057861328125p-813 / 1.7525084980110838817068952266708947718143463134765625p-546 == -1.3014839429398723513742197610554285347461700439453125p-268
; [HW: -1.3014839429398723513742197610554285347461700439453125p-268] 

; mpf : - 1357762973082197 -268
; mpfd: - 1357762973082197 -268 (-2.7441e-081) class: Neg. norm. non-zero
; hwf : - 1357762973082197 -268 (-2.7441e-081) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011010010 #b0010001111110011010001100111001110111011101100001101)))
(assert (= y (fp #b0 #b00111011101 #b1100000010100100011001011001110011101011011100001001)))
(assert (= r (fp #b1 #b01011110011 #b0100110100101110000011010011101100110010001001010101)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
