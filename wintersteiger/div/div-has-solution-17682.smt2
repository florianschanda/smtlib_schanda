(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.5087769501087964219010473243542946875095367431640625p-821 {- 2291327682924673 -821 (-1.07894e-247)}
; Y = -1.5517461328593338265591228264383971691131591796875p-65 {- 2484843678348408 -65 (-4.20602e-020)}
; -1.5087769501087964219010473243542946875095367431640625p-821 / -1.5517461328593338265591228264383971691131591796875p-65 == 1.9446182827968645501215405602124519646167755126953125p-757
; [HW: 1.9446182827968645501215405602124519646167755126953125p-757] 

; mpf : + 4254182546411317 -757
; mpfd: + 4254182546411317 -757 (2.56524e-228) class: Pos. norm. non-zero
; hwf : + 4254182546411317 -757 (2.56524e-228) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status sat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011001010 #b1000001000111111001101001100100110101101000010000001)))
(assert (= y (fp #b1 #b01110111110 #b1000110100111111001111000000110001010011010001111000)))
(assert (= r (fp #b0 #b00100001010 #b1111000111010010100000001111011111010000111100110101)))
(assert (= (fp.div roundTowardPositive x y) r))
(check-sat)
(exit)
