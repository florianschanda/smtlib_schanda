(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.6731592034854052553072278897161595523357391357421875p-1010 {- 3031639537977891 -1010 (-1.5249e-304)}
; Y = 1.4039674118371416877693036440177820622920989990234375p-143 {+ 1819307485419575 -143 (1.25912e-043)}
; -1.6731592034854052553072278897161595523357391357421875p-1010 / 1.4039674118371416877693036440177820622920989990234375p-143 == -1.1917364957182419171743958941078744828701019287109375p-867
; [HW: -1.1917364957182419171743958941078744828701019287109375p-867] 

; mpf : - 863504410669999 -867
; mpfd: - 863504410669999 -867 (-1.21108e-261) class: Neg. norm. non-zero
; hwf : - 863504410669999 -867 (-1.21108e-261) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00000001101 #b1010110001010100001010010101101111111000101000100011)))
(assert (= y (fp #b0 #b01101110000 #b0110011101101010011010001000011001111101100000110111)))
(assert (= r (fp #b1 #b00010011100 #b0011000100010101101001001001101010001111001110101111)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
