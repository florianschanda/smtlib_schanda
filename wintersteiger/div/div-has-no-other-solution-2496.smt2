(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to positive
; Precision: double (11/53)
; X = -1.357780981412003651342956800363026559352874755859375p-749 {- 1611302294567350 -749 (-4.58525e-226)}
; Y = 1.138850789187793477452714796527288854122161865234375p85 {+ 625328362446246 85 (4.40572e+025)}
; -1.357780981412003651342956800363026559352874755859375p-749 / 1.138850789187793477452714796527288854122161865234375p85 == -1.192237819302339740801244261092506349086761474609375p-834
; [HW: -1.192237819302339740801244261092506349086761474609375p-834] 

; mpf : - 865762171376534 -834
; mpfd: - 865762171376534 -834 (-1.04075e-251) class: Neg. norm. non-zero
; hwf : - 865762171376534 -834 (-1.04075e-251) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00100010010 #b0101101110010111100010001100111001001011100110110110)))
(assert (= y (fp #b0 #b10001010100 #b0010001110001011101110011010111010010101110110100110)))
(assert (= r (fp #b1 #b00010111101 #b0011000100110110011111110110101011110101001110010110)))
(assert  (not (= (fp.div roundTowardPositive x y) r)))
(check-sat)
(exit)
