(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: to zero
; Precision: double (11/53)
; X = -1.164100571825031682493545304168947041034698486328125p-829 {- 739043274122498 -829 (-3.2518e-250)}
; Y = -1.2172424703239650423114426303072832524776458740234375p52 {- 978373108400055 52 (-5.48197e+015)}
; -1.164100571825031682493545304168947041034698486328125p-829 / -1.2172424703239650423114426303072832524776458740234375p52 == 1.9126847776108404364237003392190672457218170166015625p-882
; [HW: 1.9126847776108404364237003392190672457218170166015625p-882] 

; mpf : + 4110366824354905 -882
; mpfd: + 4110366824354905 -882 (5.93181e-266) class: Pos. norm. non-zero
; hwf : + 4110366824354905 -882 (5.93181e-266) class: Pos. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b1 #b00011000010 #b0010101000000010011111101011110100111110010100000010)))
(assert (= y (fp #b1 #b10000110011 #b0011011110011101001100111101100101010111111110110111)))
(assert (= r (fp #b0 #b00010001101 #b1110100110100101101101011010011101100101010001011001)))
(assert  (not (= (fp.div roundTowardZero x y) r)))
(check-sat)
(exit)
