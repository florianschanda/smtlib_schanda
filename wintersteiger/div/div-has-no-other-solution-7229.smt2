(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-info :source |Christoph M. Wintersteiger (cwinter@microsoft.com). Randomly generated floating-point testcases.|)
; Rounding mode: nearest, ties to even
; Precision: double (11/53)
; X = 1.989130445533485502807025113725103437900543212890625p408 {+ 4454647505925418 408 (1.31493e+123)}
; Y = -1.461841321145814998061496226000599563121795654296875p-75 {- 2079948401816590 -75 (-3.86946e-023)}
; 1.989130445533485502807025113725103437900543212890625p408 / -1.461841321145814998061496226000599563121795654296875p-75 == -1.360702024741216487058181883185170590877532958984375p483
; [HW: -1.360702024741216487058181883185170590877532958984375p483] 

; mpf : - 1624457504216326 483
; mpfd: - 1624457504216326 483 (-3.39822e+145) class: Neg. norm. non-zero
; hwf : - 1624457504216326 483 (-3.39822e+145) class: Neg. norm. non-zero

(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun y () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b10110010111 #b1111110100110111101001110010001100001011010100101010)))
(assert (= y (fp #b1 #b01110110100 #b0111011000111011001110111001101001000011010000001110)))
(assert (= r (fp #b1 #b10111100010 #b0101110001010110111101111100011111011101010100000110)))
(assert  (not (= (fp.div roundNearestTiesToEven x y) r)))
(check-sat)
(exit)
