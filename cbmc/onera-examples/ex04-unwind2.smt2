(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_ABVFP)
(set-info :source |Benchmarks generated by CBMC and post-processed to set appropriate logic and remove get-value commands.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_is_new_array#1| () Bool false)
(define-fun |__CPROVER_malloc_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_size#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_next_thread_id#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_pipe_count#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_thread_id!0#1| () (_ BitVec 64) (_ bv0 64))
(declare-fun array_of.0 () (Array (_ BitVec 64) (_ BitVec 1)))
(define-fun |__CPROVER_threads_exited#1| () (Array (_ BitVec 64) (_ BitVec 1)) array_of.0)
(declare-fun |argc'#0| () (_ BitVec 32))
(declare-fun |argv'#0| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |argv'#1| () (Array (_ BitVec 32) (_ BitVec 64)) (store |argv'#0| |argc'#0| (_ bv0 64)))
(define-fun |main::argc!0@1#1| () (_ BitVec 32) |argc'#0|)
(declare-fun |argv'| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |main::argv!0@1#1| () (_ BitVec 64) (concat (_ bv2 8) (_ bv0 56)))
(define-fun |main::1::x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(declare-fun |main::1::1::in0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun |main::1::x0!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b1000010001001101000000010011101010010010101000110000) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x1!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111000 #b1101010010010101000110000010101010011001001100001100) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x2!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111110111 #b1111100010100000100100000010110111100000000011010010) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::1::pre_x0!0@1#5| () (_ FloatingPoint 11 53) |main::1::x0!0@1#3|)
(define-fun |main::1::1::pre_x1!0@1#5| () (_ FloatingPoint 11 53) |main::1::x1!0@1#3|)
(define-fun |main::1::1::pre_x2!0@1#5| () (_ FloatingPoint 11 53) |main::1::x2!0@1#3|)
(declare-fun |main::1::1::in0!0@1#3| () (_ FloatingPoint 11 53))
(define-fun |main::1::x0!0@1#4| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1110000000110100011011011100010111010110001110001000) |main::1::1::pre_x0!0@1#5|) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b0011100000011101011111011011111101001000011111111101) |main::1::1::pre_x1!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b0101001100100110000101111100000110111101101001010001) |main::1::1::pre_x2!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b1000010001001101000000010011101010010010101000110000) |main::1::1::in0!0@1#3|)))
(define-fun |main::1::x1!0@1#4| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b1 #b01111111010 #b0100101011110100111100001101100001000100110100000001) |main::1::1::pre_x0!0@1#5|) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1110111110011101101100100010110100001110010101100000) |main::1::1::pre_x1!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b0010010101000110000010101010011001001100001011111000) |main::1::1::pre_x2!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111000 #b1101010010010101000110000010101010011001001100001100) |main::1::1::in0!0@1#3|)))
(define-fun |main::1::x2!0@1#4| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111000 #b1101000101001110001110111100110100110101101010000110) |main::1::1::pre_x0!0@1#5|) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b0100001011000011110010011110111011001011111110110001) |main::1::1::pre_x1!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1111011011110000000001101000110110111000101110101100) |main::1::1::pre_x2!0@1#5|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111110111 #b1111100010100000100100000010110111100000000011010010) |main::1::1::in0!0@1#3|)))
(declare-fun |main::1::x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B0 () Bool (= |main::1::x0!0@1#1| |main::1::x0!0@1#1|))
(declare-fun |main::1::x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B1 () Bool (= |main::1::x1!0@1#1| |main::1::x1!0@1#1|))
(declare-fun |main::1::x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B2 () Bool (= |main::1::x2!0@1#1| |main::1::x2!0@1#1|))
(define-fun B3 () Bool (= |main::1::1::in0!0@1#1| |main::1::1::in0!0@1#1|))
(declare-fun |main::1::1::pre_x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B4 () Bool (= |main::1::1::pre_x0!0@1#1| |main::1::1::pre_x0!0@1#1|))
(declare-fun |main::1::1::pre_x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B5 () Bool (= |main::1::1::pre_x1!0@1#1| |main::1::1::pre_x1!0@1#1|))
(declare-fun |main::1::1::pre_x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B6 () Bool (= |main::1::1::pre_x2!0@1#1| |main::1::1::pre_x2!0@1#1|))
(define-fun B7 () Bool (= |main::1::1::in0!0@1#3| |main::1::1::in0!0@1#3|))
(declare-fun |main::1::1::pre_x0!0@1#4| () (_ FloatingPoint 11 53))
(define-fun B8 () Bool (= |main::1::1::pre_x0!0@1#4| |main::1::1::pre_x0!0@1#4|))
(declare-fun |main::1::1::pre_x1!0@1#4| () (_ FloatingPoint 11 53))
(define-fun B9 () Bool (= |main::1::1::pre_x1!0@1#4| |main::1::1::pre_x1!0@1#4|))
(declare-fun |main::1::1::pre_x2!0@1#4| () (_ FloatingPoint 11 53))
(define-fun B10 () Bool (= |main::1::1::pre_x2!0@1#4| |main::1::1::pre_x2!0@1#4|))
(define-fun B11 () Bool (bvsge |argc'#0| (_ bv1 32)))
(define-fun B12 () Bool (not (bvsge |argc'#0| (_ bv268435457 32))))
(define-fun B13 () Bool (and (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(define-fun B14 () Bool (and (fp.leq |main::1::1::in0!0@1#3| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in0!0@1#3| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(define-fun B15 () Bool (fp.geq (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000001 #b1000010010000101011011010100100111100101111111110100) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0011011111001001001010011001100001001001111011110000) |main::1::x0!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0010010000111010001110101010100111010110011100110000) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0110111001101010110011011011110001111000100101011000) |main::1::x1!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0101010000111110011101100001001111101100110100011011) |main::1::x1!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1110001110110100010011000110100000111010101110001111) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(define-fun B16 () Bool (=> (and true B11 B12 B13) (fp.leq (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000001 #b1000010010000101011011010100100111100101111111110100) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0011011111001001001010011001100001001001111011110000) |main::1::x0!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0010010000111010001110101010100111010110011100110000) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0110111001101010110011011011110001111000100101011000) |main::1::x1!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0101010000111110011101100001001111101100110100011011) |main::1::x1!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1110001110110100010011000110100000111010101110001111) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp #b0 #b01111111111 #b0000000010110001110011011100010000000101011100010110))))
(define-fun B17 () Bool (=> (and true B11 B12 B13 B14 B15) (fp.leq (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000001 #b1000010010000101011011010100100111100101111111110100) |main::1::x0!0@1#4|) |main::1::x0!0@1#4|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0011011111001001001010011001100001001001111011110000) |main::1::x0!0@1#4|) |main::1::x1!0@1#4|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0010010000111010001110101010100111010110011100110000) |main::1::x0!0@1#4|) |main::1::x2!0@1#4|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0110111001101010110011011011110001111000100101011000) |main::1::x1!0@1#4|) |main::1::x1!0@1#4|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0101010000111110011101100001001111101100110100011011) |main::1::x1!0@1#4|) |main::1::x2!0@1#4|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1110001110110100010011000110100000111010101110001111) |main::1::x2!0@1#4|) |main::1::x2!0@1#4|)) (fp #b0 #b01111111111 #b0000000010110001110011011100010000000101011100010110))))
(assert (or (not B16) (not B17)))
(define-fun B18 () Bool (not (fp.leq (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000001 #b1000010010000101011011010100100111100101111111110100) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0011011111001001001010011001100001001001111011110000) |main::1::x0!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0010010000111010001110101010100111010110011100110000) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000010 #b0110111001101010110011011011110001111000100101011000) |main::1::x1!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0101010000111110011101100001001111101100110100011011) |main::1::x1!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1110001110110100010011000110100000111010101110001111) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp #b0 #b01111111111 #b0000000010110001110011011100010000000101011100010110))))
(declare-fun |symex::io::0| () (_ BitVec 32))
(assert (= |argc'#0| |symex::io::0|))
(check-sat)
(exit)
