(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_ABVFP)
(set-info :source |Benchmarks generated by CBMC and post-processed to set appropriate logic and remove get-value commands.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_is_new_array#1| () Bool false)
(define-fun |__CPROVER_malloc_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_size#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_next_thread_id#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_pipe_count#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_thread_id!0#1| () (_ BitVec 64) (_ bv0 64))
(declare-fun array_of.0 () (Array (_ BitVec 64) (_ BitVec 1)))
(define-fun |__CPROVER_threads_exited#1| () (Array (_ BitVec 64) (_ BitVec 1)) array_of.0)
(declare-fun |argc'#0| () (_ BitVec 32))
(declare-fun |argv'#0| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |argv'#1| () (Array (_ BitVec 32) (_ BitVec 64)) (store |argv'#0| |argc'#0| (_ bv0 64)))
(define-fun |main::argc!0@1#1| () (_ BitVec 32) |argc'#0|)
(declare-fun |argv'| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |main::argv!0@1#1| () (_ BitVec 64) (concat (_ bv2 8) (_ bv0 56)))
(define-fun |main::1::x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(declare-fun |main::1::1::in0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun |main::1::x0!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x1!0@1#3| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x2!0@1#3| () (_ FloatingPoint 11 53) |main::1::1::in0!0@1#1|)
(define-fun |main::1::x3!0@1#3| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(declare-fun |main::1::x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B0 () Bool (= |main::1::x0!0@1#1| |main::1::x0!0@1#1|))
(declare-fun |main::1::x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B1 () Bool (= |main::1::x1!0@1#1| |main::1::x1!0@1#1|))
(declare-fun |main::1::x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B2 () Bool (= |main::1::x2!0@1#1| |main::1::x2!0@1#1|))
(declare-fun |main::1::x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B3 () Bool (= |main::1::x3!0@1#1| |main::1::x3!0@1#1|))
(define-fun B4 () Bool (= |main::1::1::in0!0@1#1| |main::1::1::in0!0@1#1|))
(declare-fun |main::1::1::pre_x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B5 () Bool (= |main::1::1::pre_x0!0@1#1| |main::1::1::pre_x0!0@1#1|))
(declare-fun |main::1::1::pre_x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B6 () Bool (= |main::1::1::pre_x1!0@1#1| |main::1::1::pre_x1!0@1#1|))
(declare-fun |main::1::1::pre_x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B7 () Bool (= |main::1::1::pre_x2!0@1#1| |main::1::1::pre_x2!0@1#1|))
(declare-fun |main::1::1::pre_x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B8 () Bool (= |main::1::1::pre_x3!0@1#1| |main::1::1::pre_x3!0@1#1|))
(define-fun B9 () Bool (bvsge |argc'#0| (_ bv1 32)))
(define-fun B10 () Bool (not (bvsge |argc'#0| (_ bv268435457 32))))
(define-fun B11 () Bool (and (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (bvsge |argc'#0| (_ bv1 32)))
(assert (not (bvsge |argc'#0| (_ bv268435457 32))))
(assert (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (not (fp.leq (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1010000101001110100011001001110000010001011000010000) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000001 #b0100101011000010101100111001000101100010000100110010) |main::1::x0!0@1#3|) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b1010000101001110100011001001101010111010110100010010) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0010000100000111101001011000001111001010010011111001) |main::1::x0!0@1#3|) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.mul roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) |main::1::x2!0@1#3|)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b0000101000111101010000101111000010010111000100110000) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b0010000100000111101001011000001010011000100100010001) |main::1::x2!0@1#3|) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000001110110101111001110001001000011001001010))))
(declare-fun |symex::io::0| () (_ BitVec 32))
(assert (= |argc'#0| |symex::io::0|))
(check-sat)
(exit)
