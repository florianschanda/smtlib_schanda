(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_ABVFP)
(set-info :source |Benchmarks generated by CBMC and post-processed to set appropriate logic and remove get-value commands.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_is_new_array#1| () Bool false)
(define-fun |__CPROVER_malloc_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_size#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_next_thread_id#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_pipe_count#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_thread_id!0#1| () (_ BitVec 64) (_ bv0 64))
(declare-fun array_of.0 () (Array (_ BitVec 64) (_ BitVec 1)))
(define-fun |__CPROVER_threads_exited#1| () (Array (_ BitVec 64) (_ BitVec 1)) array_of.0)
(declare-fun |argc'#0| () (_ BitVec 32))
(declare-fun |argv'#0| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |argv'#1| () (Array (_ BitVec 32) (_ BitVec 64)) (store |argv'#0| |argc'#0| (_ bv0 64)))
(define-fun |main::argc!0@1#1| () (_ BitVec 32) |argc'#0|)
(declare-fun |argv'| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |main::argv!0@1#1| () (_ BitVec 64) (concat (_ bv2 8) (_ bv0 56)))
(define-fun |main::1::x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x4!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x4!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(declare-fun |main::1::1::in0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun |main::1::x0!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1010000001001110101001001010100011000001010101001101) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x1!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b0111001000010010110101110111001100011000111111000101) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x2!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111011 #b0010101010011001001100001011111000001101111011010011) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x3!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b0101010011001001100001011111000001101111011010010100) |main::1::1::in0!0@1#1|)))
(define-fun |main::1::x4!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111000 #b0001001101000000010011101010010010101000110000010101) |main::1::1::in0!0@1#1|)))
(declare-fun |main::1::x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B0 () Bool (= |main::1::x0!0@1#1| |main::1::x0!0@1#1|))
(declare-fun |main::1::x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B1 () Bool (= |main::1::x1!0@1#1| |main::1::x1!0@1#1|))
(declare-fun |main::1::x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B2 () Bool (= |main::1::x2!0@1#1| |main::1::x2!0@1#1|))
(declare-fun |main::1::x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B3 () Bool (= |main::1::x3!0@1#1| |main::1::x3!0@1#1|))
(declare-fun |main::1::x4!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B4 () Bool (= |main::1::x4!0@1#1| |main::1::x4!0@1#1|))
(define-fun B5 () Bool (= |main::1::1::in0!0@1#1| |main::1::1::in0!0@1#1|))
(declare-fun |main::1::1::pre_x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B6 () Bool (= |main::1::1::pre_x0!0@1#1| |main::1::1::pre_x0!0@1#1|))
(declare-fun |main::1::1::pre_x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B7 () Bool (= |main::1::1::pre_x1!0@1#1| |main::1::1::pre_x1!0@1#1|))
(declare-fun |main::1::1::pre_x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B8 () Bool (= |main::1::1::pre_x2!0@1#1| |main::1::1::pre_x2!0@1#1|))
(declare-fun |main::1::1::pre_x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B9 () Bool (= |main::1::1::pre_x3!0@1#1| |main::1::1::pre_x3!0@1#1|))
(declare-fun |main::1::1::pre_x4!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B10 () Bool (= |main::1::1::pre_x4!0@1#1| |main::1::1::pre_x4!0@1#1|))
(define-fun B11 () Bool (bvsge |argc'#0| (_ bv1 32)))
(define-fun B12 () Bool (not (bvsge |argc'#0| (_ bv268435457 32))))
(define-fun B13 () Bool (and (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (bvsge |argc'#0| (_ bv1 32)))
(assert (not (bvsge |argc'#0| (_ bv268435457 32))))
(assert (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (not (fp.leq (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0010010001011011000001011100100110001000110100010101) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1110001101101110111000111101011101011010100100010101) |main::1::x0!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0001001010111000000011011010001011111000010010100100) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b0000010110001110000101000000011110011101010101001110) |main::1::x0!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b0000110100110001101010111000010110001101000001101101) |main::1::x0!0@1#3|) |main::1::x4!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b10000000000 #b0111100010111100100001011111010010000101111100010110) |main::1::x1!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b0010110010010010010111000110110011011101001000101001) |main::1::x1!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b1101100011111010000110000111101101010000010000011000) |main::1::x1!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b0101000101011001010110110111000010110000100010100110) |main::1::x1!0@1#3|) |main::1::x4!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1111100101000000011010000010000110010000100000100101) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0011110001111111111010100000001001110100000001101101) |main::1::x2!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b1100001001000100011101011001001010010010100101010111) |main::1::x2!0@1#3|) |main::1::x4!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b0111110100111100101011010011110110000011100011101001) |main::1::x3!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b0100011110111000110101001110100010000011111101110110) |main::1::x3!0@1#3|) |main::1::x4!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0000010010001101101010101010110000011010111100110101) |main::1::x4!0@1#3|) |main::1::x4!0@1#3|)) (fp #b0 #b01111111111 #b0000000000010001111010110001101101110110100000000010))))
(declare-fun |symex::io::0| () (_ BitVec 32))
(assert (= |argc'#0| |symex::io::0|))
(check-sat)
(exit)
