(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_ABVFP)
(set-info :source |Benchmarks generated by CBMC and post-processed to set appropriate logic and remove get-value commands.|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun |__CPROVER_dead_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_deallocated#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_is_new_array#1| () Bool false)
(define-fun |__CPROVER_malloc_object#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_malloc_size#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_memory_leak#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_next_thread_id#1| () (_ BitVec 64) (_ bv0 64))
(define-fun |__CPROVER_pipe_count#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_rounding_mode!0#1| () (_ BitVec 32) (_ bv0 32))
(define-fun |__CPROVER_thread_id!0#1| () (_ BitVec 64) (_ bv0 64))
(declare-fun array_of.0 () (Array (_ BitVec 64) (_ BitVec 1)))
(define-fun |__CPROVER_threads_exited#1| () (Array (_ BitVec 64) (_ BitVec 1)) array_of.0)
(declare-fun |argc'#0| () (_ BitVec 32))
(declare-fun |argv'#0| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |argv'#1| () (Array (_ BitVec 32) (_ BitVec 64)) (store |argv'#0| |argc'#0| (_ bv0 64)))
(define-fun |main::argc!0@1#1| () (_ BitVec 32) |argc'#0|)
(declare-fun |argv'| () (Array (_ BitVec 32) (_ BitVec 64)))
(define-fun |main::argv!0@1#1| () (_ BitVec 64) (concat (_ bv2 8) (_ bv0 56)))
(define-fun |main::1::x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x0!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x1!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x2!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(define-fun |main::1::1::pre_x3!0@1#2| () (_ FloatingPoint 11 53) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
(declare-fun |main::1::1::in0!0@1#1| () (_ FloatingPoint 11 53))
(declare-fun |main::1::1::in1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun |main::1::x0!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b0011100111000000111010111110110111111010010001000000) |main::1::1::in0!0@1#1|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b0111010111110110111111010010000111111111001011100101) |main::1::1::in1!0@1#1|)))
(define-fun |main::1::x1!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111110111 #b0110000111100100111101110110010111111101100010101110) |main::1::1::in0!0@1#1|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111110 #b0101100010100000100100000010110111100000000011010010) |main::1::1::in1!0@1#1|)))
(define-fun |main::1::x2!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b1001010010101111010011110000110110000100010011010000) |main::1::1::in0!0@1#1|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111111 #b1001110100100001111111110010111001001000111010001010) |main::1::1::in1!0@1#1|)))
(define-fun |main::1::x3!0@1#3| () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b1011001011111110110001010110110101011100111110101011) |main::1::1::in0!0@1#1|)) (fp.mul roundNearestTiesToEven (fp #b0 #b01111111101 #b1001101011010100001011000011110010011110111011001100) |main::1::1::in1!0@1#1|)))
(declare-fun |main::1::x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B0 () Bool (= |main::1::x0!0@1#1| |main::1::x0!0@1#1|))
(declare-fun |main::1::x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B1 () Bool (= |main::1::x1!0@1#1| |main::1::x1!0@1#1|))
(declare-fun |main::1::x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B2 () Bool (= |main::1::x2!0@1#1| |main::1::x2!0@1#1|))
(declare-fun |main::1::x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B3 () Bool (= |main::1::x3!0@1#1| |main::1::x3!0@1#1|))
(define-fun B4 () Bool (= |main::1::1::in0!0@1#1| |main::1::1::in0!0@1#1|))
(define-fun B5 () Bool (= |main::1::1::in1!0@1#1| |main::1::1::in1!0@1#1|))
(declare-fun |main::1::1::pre_x0!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B6 () Bool (= |main::1::1::pre_x0!0@1#1| |main::1::1::pre_x0!0@1#1|))
(declare-fun |main::1::1::pre_x1!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B7 () Bool (= |main::1::1::pre_x1!0@1#1| |main::1::1::pre_x1!0@1#1|))
(declare-fun |main::1::1::pre_x2!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B8 () Bool (= |main::1::1::pre_x2!0@1#1| |main::1::1::pre_x2!0@1#1|))
(declare-fun |main::1::1::pre_x3!0@1#1| () (_ FloatingPoint 11 53))
(define-fun B9 () Bool (= |main::1::1::pre_x3!0@1#1| |main::1::1::pre_x3!0@1#1|))
(define-fun B10 () Bool (bvsge |argc'#0| (_ bv1 32)))
(define-fun B11 () Bool (not (bvsge |argc'#0| (_ bv268435457 32))))
(define-fun B12 () Bool (and (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.leq |main::1::1::in1!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.geq |main::1::1::in1!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))
(assert (bvsge |argc'#0| (_ bv1 32)))
(assert (not (bvsge |argc'#0| (_ bv268435457 32))))
(assert (fp.leq |main::1::1::in0!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (fp.leq |main::1::1::in1!0@1#1| (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (fp.geq |main::1::1::in0!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (fp.geq |main::1::1::in1!0@1#1| (fp #b1 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
(assert (not (fp.leq (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.add roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b1000101110011100101000010101001011000110100100011110) |main::1::x0!0@1#3|) |main::1::x0!0@1#3|) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b0101010000000000100001100100010101001000001001111100) |main::1::x0!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b0111010110111011011100010000001110111001111110111000) |main::1::x0!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111001 #b1111111101100111111100010011101011000110000110110100) |main::1::x0!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111010 #b1110010000110001111001110000110111101001100100101010) |main::1::x1!0@1#3|) |main::1::x1!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111011 #b0011100001111100011100101010010010110010101011010100) |main::1::x1!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111011 #b0010011000010010001011010100000100111111011100010111) |main::1::x1!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b0001010010110101111100011000101011100010011101000010) |main::1::x2!0@1#3|) |main::1::x2!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b1100010101011110111011100101111011001011111011111001) |main::1::x2!0@1#3|) |main::1::x3!0@1#3|)) (fp.mul roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp #b0 #b01111111100 #b0001110000101110011100010101010101011001111111001101) |main::1::x3!0@1#3|) |main::1::x3!0@1#3|)) (fp #b0 #b01111111111 #b0000000000001101101110110111010010100011100011110011))))
(declare-fun |symex::io::0| () (_ BitVec 32))
(assert (= |argc'#0| |symex::io::0|))
(check-sat)
(exit)
