(set-info :smt-lib-version 2.6)
(set-logic QF_FPLRA)
(set-info :source |
Generated by: Matthias GÃ¼demann
Generated on: 2019-03-10
Generator: SBV
Application: Numerical Approximation of Elementary Functions
Target Solver: z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; --- uninterpreted sorts ---
; --- literal constants ---
(define-fun s_2 () Bool false)
(define-fun s_1 () Bool true)
(define-fun s1 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 7378697629483821.0 73786976294838206464.0)))
(define-fun s3 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 1.0 1.0)))
(define-fun s8 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 6.0 1.0)))
(define-fun s9 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 1725329017245637.0 2251799813685248.0)))
(define-fun s13 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 6743802672015265.0 1125899906842624.0)))
(define-fun s14 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 8479827738375907.0 2251799813685248.0)))
(define-fun s18 () (_ FloatingPoint 11 53) (_ +zero 11 53))
(define-fun s25 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 2.0 1.0)))
(define-fun s32 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 24.0 1.0)))
(define-fun s36 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 120.0 1.0)))
(define-fun s40 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 720.0 1.0)))
(define-fun s44 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 5040.0 1.0)))
(define-fun s48 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 40320.0 1.0)))
(define-fun s52 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 362880.0 1.0)))
(define-fun s89 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 7737125245533627.0 77371252455336267181195264.0)))
; --- skolem constants ---
(declare-fun s0 () (_ FloatingPoint 11 53))
; --- constant tables ---
; --- skolemized tables ---
; --- arrays ---
; --- uninterpreted constants ---
; --- user given axioms ---
; --- formula ---
(define-fun s2 () Bool (fp.gt s0 s1))
(define-fun s4 () Bool (fp.lt s0 s3))
(define-fun s5 () Bool (and s2 s4))
(define-fun s6 () Bool (not s5))
(define-fun s7 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s0 s3))
(define-fun s10 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s7 s9))
(define-fun s11 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s8 s10))
(define-fun s12 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s7 s11))
(define-fun s15 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s7 s14))
(define-fun s16 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s13 s15))
(define-fun s17 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s12 s16))
(define-fun s19 () Bool (fp.lt s17 s18))
(define-fun s20 () (_ FloatingPoint 11 53) (fp.neg s17))
(define-fun s21 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s3 s20))
(define-fun s22 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s21 s3))
(define-fun s23 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s3 s22))
(define-fun s24 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s21))
(define-fun s26 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s24 s25))
(define-fun s27 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s23 s26))
(define-fun s28 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s24))
(define-fun s29 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s28 s8))
(define-fun s30 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s27 s29))
(define-fun s31 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s28))
(define-fun s33 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s31 s32))
(define-fun s34 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s30 s33))
(define-fun s35 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s31))
(define-fun s37 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s35 s36))
(define-fun s38 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s34 s37))
(define-fun s39 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s35))
(define-fun s41 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s39 s40))
(define-fun s42 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s38 s41))
(define-fun s43 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s39))
(define-fun s45 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s43 s44))
(define-fun s46 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s42 s45))
(define-fun s47 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s43))
(define-fun s49 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s47 s48))
(define-fun s50 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s46 s49))
(define-fun s51 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s20 s47))
(define-fun s53 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s51 s52))
(define-fun s54 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s50 s53))
(define-fun s55 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s3 s54))
(define-fun s56 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s3 s17))
(define-fun s57 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s56 s3))
(define-fun s58 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s3 s57))
(define-fun s59 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s56))
(define-fun s60 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s59 s25))
(define-fun s61 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s58 s60))
(define-fun s62 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s59))
(define-fun s63 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s62 s8))
(define-fun s64 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s61 s63))
(define-fun s65 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s62))
(define-fun s66 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s65 s32))
(define-fun s67 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s64 s66))
(define-fun s68 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s65))
(define-fun s69 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s68 s36))
(define-fun s70 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s67 s69))
(define-fun s71 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s68))
(define-fun s72 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s71 s40))
(define-fun s73 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s70 s72))
(define-fun s74 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s71))
(define-fun s75 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s74 s44))
(define-fun s76 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s73 s75))
(define-fun s77 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s74))
(define-fun s78 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s77 s48))
(define-fun s79 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s76 s78))
(define-fun s80 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s17 s77))
(define-fun s81 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s80 s52))
(define-fun s82 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s79 s81))
(define-fun s83 () (_ FloatingPoint 11 53) (ite s19 s55 s82))
(define-fun s84 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s0 s83))
(define-fun s85 () Bool (fp.lt s84 s18))
(define-fun s86 () (_ FloatingPoint 11 53) (fp.neg s84))
(define-fun s87 () (_ FloatingPoint 11 53) (ite s85 s86 s84))
(define-fun s88 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s87 s0))
(define-fun s90 () Bool (fp.leq s88 s89))
(define-fun s91 () Bool (or s6 s90))
(assert (not s91))
(check-sat)
(exit)
