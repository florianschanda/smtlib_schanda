(set-info :smt-lib-version 2.6)
(set-logic QF_FPLRA)
(set-info :source |
Generated by: Matthias GÃ¼demann
Generated on: 2019-03-10
Generator: SBV
Application: Numerical Approximation of Elementary Functions
Target Solver: z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; --- uninterpreted sorts ---
; --- literal constants ---
(define-fun s_2 () Bool false)
(define-fun s_1 () Bool true)
(define-fun s8 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 1.0 1.0)))
(define-fun s10 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 45000000000000000.0 1.0)))
(define-fun s12 () (_ FloatingPoint 11 53) (_ +zero 11 53))
(define-fun s15 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 1000.0 1.0)))
(define-fun s26 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) roundNearestTiesToEven (/ 1152921504606847.0 1152921504606846976.0)))
; --- skolem constants ---
(declare-fun s0 () (_ FloatingPoint 11 53))
(declare-fun s1 () (_ FloatingPoint 11 53))
(declare-fun s2 () (_ FloatingPoint 11 53))
(declare-fun s3 () (_ FloatingPoint 11 53))
(declare-fun s4 () (_ FloatingPoint 11 53))
(declare-fun s5 () (_ FloatingPoint 11 53))
(declare-fun s6 () (_ FloatingPoint 11 53))
(declare-fun s7 () (_ FloatingPoint 11 53))
; --- constant tables ---
; --- skolemized tables ---
; --- arrays ---
; --- uninterpreted constants ---
; --- user given axioms ---
; --- formula ---
(define-fun s9 () Bool (fp.geq s0 s8))
(define-fun s11 () Bool (fp.leq s0 s10))
(define-fun s13 () Bool (fp.geq s2 s12))
(define-fun s14 () Bool (fp.geq s5 s12))
(define-fun s16 () Bool (fp.leq s2 s15))
(define-fun s17 () Bool (fp.leq s5 s15))
(define-fun s18 () Bool (fp.geq s3 s12))
(define-fun s19 () Bool (fp.geq s6 s12))
(define-fun s20 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s3 s6))
(define-fun s21 () Bool (fp.leq s20 s8))
(define-fun s22 () Bool (fp.geq s4 s12))
(define-fun s23 () Bool (fp.geq s7 s12))
(define-fun s24 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s4 s7))
(define-fun s25 () Bool (fp.leq s24 s8))
(define-fun s27 () Bool (fp.gt s1 s26))
(define-fun s28 () Bool (fp.leq s1 s8))
(define-fun s29 () Bool (and s27 s28))
(define-fun s30 () Bool (and s25 s29))
(define-fun s31 () Bool (and s23 s30))
(define-fun s32 () Bool (and s22 s31))
(define-fun s33 () Bool (and s21 s32))
(define-fun s34 () Bool (and s19 s33))
(define-fun s35 () Bool (and s18 s34))
(define-fun s36 () Bool (and s17 s35))
(define-fun s37 () Bool (and s16 s36))
(define-fun s38 () Bool (and s14 s37))
(define-fun s39 () Bool (and s13 s38))
(define-fun s40 () Bool (and s11 s39))
(define-fun s41 () Bool (and s9 s40))
(define-fun s42 () Bool (not s41))
(define-fun s43 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s2 s8))
(define-fun s44 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s0 s43))
(define-fun s45 () Bool (fp.leq s3 s1))
(define-fun s46 () (_ FloatingPoint 11 53) (ite s45 s3 s1))
(define-fun s47 () Bool (fp.leq s4 s1))
(define-fun s48 () (_ FloatingPoint 11 53) (ite s47 s4 s1))
(define-fun s49 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s2 s48))
(define-fun s50 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s1 s46))
(define-fun s51 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s48 s50))
(define-fun s52 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s51 s1))
(define-fun s53 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s46 s52))
(define-fun s54 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s49 s53))
(define-fun s55 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s54 s1))
(define-fun s56 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s46 s55))
(define-fun s57 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s44 s56))
(define-fun s58 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s5 s8))
(define-fun s59 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s0 s58))
(define-fun s60 () Bool (fp.leq s6 s1))
(define-fun s61 () (_ FloatingPoint 11 53) (ite s60 s6 s1))
(define-fun s62 () Bool (fp.leq s7 s1))
(define-fun s63 () (_ FloatingPoint 11 53) (ite s62 s7 s1))
(define-fun s64 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s5 s63))
(define-fun s65 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s1 s61))
(define-fun s66 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s63 s65))
(define-fun s67 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s66 s1))
(define-fun s68 () (_ FloatingPoint 11 53) (fp.sub roundNearestTiesToEven s61 s67))
(define-fun s69 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s64 s68))
(define-fun s70 () (_ FloatingPoint 11 53) (fp.div roundNearestTiesToEven s69 s1))
(define-fun s71 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s61 s70))
(define-fun s72 () (_ FloatingPoint 11 53) (fp.mul roundNearestTiesToEven s59 s71))
(define-fun s73 () (_ FloatingPoint 11 53) (fp.add roundNearestTiesToEven s57 s72))
(define-fun s74 () Bool (fp.leq s73 s0))
(define-fun s75 () Bool (or s42 s74))
(assert (not s75))
(check-sat)
(exit)
