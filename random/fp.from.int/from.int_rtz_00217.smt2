(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status unsat)
;; (fp.from.int RTZ rounded_int)
(declare-const x Int)
(assert (= x 53862534246766321156777915402278733466256530870821262039410169892580872676002606081816061036637610379548365929143816192249598133998591920487906188604436573214354809718556319160817976261216952751902999888324056280349018408671790649849599414132634577143265301584159381935437869979355296437750603771884038750710))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0x7FD32CFA971F5C2F [Rational(53862534246766316297846354007614507699693600963375187324806694004351250777162283681297301636647506248763167920654207013330754706572971541963099950804267198377329580884629991745257583427298539516946260311024609906328385951845839571392846291071494902420750723316734565690866818983759392176042990770457606619136), 53862534246766316297846354007614507699693600963375187324806694004351250777162283681297301636647506248763167920654207013330754706572971541963099950804267198377329580884629991745257583427298539516946260311024609906328385951845839571392846291071494902420750723316734565690866818983759392176042990770457606619136.000000])

(declare-const z Float64)
(assert (= z (fp #b0 #b11111111101 #b0011001011001111101010010111000111110101110000101111)))
(assert (not (= y z)))
