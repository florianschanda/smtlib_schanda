(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-option :produce-models true)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status sat)
;; (fp.from.int RNA rounded_int)
(declare-const x Int)
(assert (= x 161281683139761963791017255683528060816288519400054857741662956515795199007849065242137008578266268769648322934854977889514763096808379385441995873381630702040917442465672351253135445125763352213335888115622509788822111264795969040942028457639728019515150620141574035391893909363741529294709506193252891791708))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0x7FECB587170E95BC [Rational(161281683139761958552398398806177898526806718784286820859191466405204981897679823884233443193761788753184065480450637035971401378871110280039095594512308400552710494721968671900777224273260704192919330480411808791120010893981167097672283133505543399930168018622526813897187757397950179876570320075203882778624), 161281683139761958552398398806177898526806718784286820859191466405204981897679823884233443193761788753184065480450637035971401378871110280039095594512308400552710494721968671900777224273260704192919330480411808791120010893981167097672283133505543399930168018622526813897187757397950179876570320075203882778624.000000])

(declare-const z Float64)
(assert (= z (fp #b0 #b11111111110 #b1100101101011000011100010111000011101001010110111100)))
(assert (= y z))
