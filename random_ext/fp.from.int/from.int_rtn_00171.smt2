(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status unsat)
;; (fp.from.int RTN rounded_int)
(declare-const x Int)
(assert (= x 11260112190775071308886549582732280977423328509405536098376437952169795579346954896333029758438209626290041495607070127723743274769029743129694673672383789886738544238155864744144959964285071612135926221912599411628570369098533766534026754686022912814875039320315316895443237332600002038160347334215230294635))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0x7FB008F14E06D0BF [Rational(11260112190775070669761948253381180823925959640968213212573726809174829437530909976881312546009348233682256990907639235298238126002569464930162710422758416076762349361058074553567354901388713393665448550117511102510887516234139202211414505476582383352486793623899673790962532822551559000041559628529751031808), 11260112190775070669761948253381180823925959640968213212573726809174829437530909976881312546009348233682256990907639235298238126002569464930162710422758416076762349361058074553567354901388713393665448550117511102510887516234139202211414505476582383352486793623899673790962532822551559000041559628529751031808.000000])

(declare-const z Float64)
(assert (= z (fp #b0 #b11111111011 #b0000000010001111000101001110000001101101000010111111)))
(assert (not (= y z)))
