(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-option :produce-models true)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status sat)
;; (fp.from.int RTN rounded_int)
(declare-const x Int)
(assert (= x (- 121721723092699779896255428534558992669013310527005460369678839949967810575589809274825476198810702470120119700844272834296098247822121939414594526453275940399816110058766703794599379657193205894608518607156829094725706748755837728330273137796569606744784536544281770534291906645442989140055073463886284119205)))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0xFFE5AACCB2616F7D [Rational(-121721723092699785960788975880136589833442029633156442566167133190499689953306332077220177579056965915664724302252371859443501923384436822938692811972784476367721751616095207425374246278599838842068210919043702065229088541950652216354149029168468448922113370429552279167717135868508230873528956985786109001728), -121721723092699785960788975880136589833442029633156442566167133190499689953306332077220177579056965915664724302252371859443501923384436822938692811972784476367721751616095207425374246278599838842068210919043702065229088541950652216354149029168468448922113370429552279167717135868508230873528956985786109001728.000000])

(declare-const z Float64)
(assert (= z ((_ to_fp 11 53) #xFFE5AACCB2616F7D)))
(assert (= y z))
