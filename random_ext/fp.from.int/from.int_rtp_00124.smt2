(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-option :produce-models true)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status sat)
;; (fp.from.int RTP rounded_int)
(declare-const x Int)
(assert (= x (- 174103055657825951680311660537839626859281690465282311978378246755197482436192208597485640663515714003283109613324179889283108747073271233871195777833472196911856796338339653627151754264205178182548316419312877483454295831213586717643727238039673942697671009145658081027997334668599964931585730015020164554097)))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0xFFEEFDCA98B0B176 [Rational(-174103055657825938302477883667103848794862700840256736807213256017459422496340883364249729252396715159965315313687975375750057849802968448996054186095905767241856241689184073273073985163247622412941728759939176873257393152148986611559023138486391733092122818077221315121379484816713873065846487398451200917504), -174103055657825938302477883667103848794862700840256736807213256017459422496340883364249729252396715159965315313687975375750057849802968448996054186095905767241856241689184073273073985163247622412941728759939176873257393152148986611559023138486391733092122818077221315121379484816713873065846487398451200917504.000000])

(declare-const z Float64)
(assert (= z (fp #b1 #b11111111110 #b1110111111011100101010011000101100001011000101110110)))
(assert (= y z))
