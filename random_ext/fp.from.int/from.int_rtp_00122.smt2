(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-option :produce-models true)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status sat)
;; (fp.from.int RTP rounded_int)
(declare-const x Int)
(assert (= x (- 35926097790271453286211712566486743817511572653427114439173120915974373390637740748665878834091557554490022365627510487147317171029736745548797956698436327003517577678602115184534331918331813759158929095084791564206864002874410905715723022912933873986728764337563286385792502099656656673873517873705938564419)))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0xFFC9948A00498FC7 [Rational(-35926097790271448602382599363928289868754900788626188023418465028592039100211043561553912404302150716578819776887511856833241572101741128591012436527572263911932332841256038880252126396537770495616232629573718580734797334484251169361928645571337106231234794653783258102897289863453923861164144947351961731072), -35926097790271448602382599363928289868754900788626188023418465028592039100211043561553912404302150716578819776887511856833241572101741128591012436527572263911932332841256038880252126396537770495616232629573718580734797334484251169361928645571337106231234794653783258102897289863453923861164144947351961731072.000000])

(declare-const z Float64)
(assert (= z (fp #b1 #b11111111100 #b1001100101001000101000000000010010011000111111000111)))
(assert (= y z))
