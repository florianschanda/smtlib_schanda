(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status unsat)
;; (fp.from.int RNA rounded_int)
(declare-const x Int)
(assert (= x 20123414373398677880793538145261977872440520102378703713506883783712155472783681670267058314583328900806370146339200731407631176360326476570384231805367938395443424739708355317037386817001050280676145153398798533598199613359099675812369023633384302237115822581366555409614979289703770960945632232740955396412))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0x7FBCA81D0D2D842C [Rational(20123414373398678477442785219865064882176999198811444759662655369012293882557619546211359164278580862260501605886956572073749630899751244335860131970946461071222956591762146249012450191680865913732706059004502637596529661321864999695703632908783506328307593829381407407646648568383909264560419621064255995904), 20123414373398678477442785219865064882176999198811444759662655369012293882557619546211359164278580862260501605886956572073749630899751244335860131970946461071222956591762146249012450191680865913732706059004502637596529661321864999695703632908783506328307593829381407407646648568383909264560419621064255995904.000000])

(declare-const z Float64)
(assert (= z (fp #b0 #b11111111011 #b1100101010000001110100001101001011011000010000101100)))
(assert (not (= y z)))
