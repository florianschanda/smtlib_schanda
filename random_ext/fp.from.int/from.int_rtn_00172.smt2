(set-info :smt-lib-version 2.6)
(set-logic QF_FPLIA)
(set-option :produce-models true)
(set-info :source |Random FP created by PyMPF|)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :category random)
(set-info :status sat)
;; (fp.from.int RTN rounded_int)
(declare-const x Int)
(assert (= x (- 154671589346832303443689159976584507533426806757452457718758156567535966316978376252933351370964573011777159012394084543639322668763463543291260255083077178055390938820552840919522188625467817586371126669307868495482700198024650513245262565002361920597190014704002483829343509490429087945989626128379076924674)))
(declare-const y Float64)
(assert (= y ((_ to_fp 11 53) x)))
;; y should be Float64(0xFFEB884F16E41F1C [Rational(-154671589346832322094180591920905844800966261869689964619809007178397734376995455645574774928866475402127798648534075290595030775444025640105290813278808884410353558970149329231373731959024893942448499359549699298715975176715469409566636468229074068631833774549793730486862669144866136410761797863913436479488), -154671589346832322094180591920905844800966261869689964619809007178397734376995455645574774928866475402127798648534075290595030775444025640105290813278808884410353558970149329231373731959024893942448499359549699298715975176715469409566636468229074068631833774549793730486862669144866136410761797863913436479488.000000])

(declare-const z Float64)
(assert (= z (fp #b1 #b11111111110 #b1011100010000100111100010110111001000001111100011100)))
(assert (= y z))
