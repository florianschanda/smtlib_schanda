(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32) (kitten_20 Float32)) Bool (not (fp.eq kitten_19 kitten_20)))
(define-fun spoon_16 ((kitten_21 Float32) (kitten_22 Float32)) Bool (ite (fp.lt kitten_21 kitten_22) true false))
(define-fun spoon_17 ((kitten_23 Float32) (kitten_24 Float32)) Bool (ite (fp.leq kitten_23 kitten_24) true false))
(define-fun spoon_18 ((kitten_25 Float32) (kitten_26 Float32)) Bool (ite (fp.lt kitten_26 kitten_25) true false))
(define-fun spoon_19 ((kitten_27 Float32) (kitten_28 Float32)) Bool (ite (fp.leq kitten_28 kitten_27) true false))
(define-fun spoon_20 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.eq kitten_29 kitten_30) true false))
(define-fun spoon_21 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (not (fp.eq kitten_31 kitten_32)) true false))
(declare-const cat_22 Bool)
(assert cat_22)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_23 ((kitten_33 Float64)) Bool (and (fp.isInfinite kitten_33) (fp.isPositive kitten_33)))
(define-fun spoon_24 ((kitten_34 Float64)) Bool (and (fp.isInfinite kitten_34) (fp.isNegative kitten_34)))
(define-fun spoon_25 ((kitten_35 Float64)) Bool (and (fp.isZero kitten_35) (fp.isPositive kitten_35)))
(define-fun spoon_26 ((kitten_36 Float64)) Bool (and (fp.isZero kitten_36) (fp.isNegative kitten_36)))
(declare-const cat_27 Int)
(define-fun spoon_28 ((kitten_37 Int)) Bool (and (<= (- cat_27) kitten_37) (<= kitten_37 cat_27)))
(define-fun spoon_29 ((kitten_38 Int)) Bool (and (<= (- 9007199254740992) kitten_38) (<= kitten_38 9007199254740992)))
(define-fun spoon_30 ((kitten_39 Float64) (kitten_40 Float64)) Bool (or (and (fp.isPositive kitten_39) (fp.isPositive kitten_40)) (and (fp.isNegative kitten_39) (fp.isNegative kitten_40))))
(define-fun spoon_31 ((kitten_41 Float64) (kitten_42 Float64)) Bool (or (and (fp.isPositive kitten_41) (fp.isNegative kitten_42)) (and (fp.isNegative kitten_41) (fp.isPositive kitten_42))))
(define-fun spoon_32 ((kitten_43 Float64) (kitten_44 Float64) (kitten_45 Float64)) Bool (and (=> (spoon_30 kitten_44 kitten_45) (fp.isPositive kitten_43)) (=> (spoon_31 kitten_44 kitten_45) (fp.isNegative kitten_43))))
(define-fun spoon_33 ((kitten_46 Float64) (kitten_47 Real)) Bool (or (and (fp.isPositive kitten_46) (< 0.0 kitten_47)) (and (fp.isNegative kitten_46) (< kitten_47 0.0))))
(define-fun spoon_34 ((kitten_48 Float64) (kitten_49 Float64)) Bool (not (fp.eq kitten_48 kitten_49)))
(define-fun spoon_35 ((kitten_50 Float64) (kitten_51 Float64)) Bool (ite (fp.lt kitten_50 kitten_51) true false))
(define-fun spoon_36 ((kitten_52 Float64) (kitten_53 Float64)) Bool (ite (fp.leq kitten_52 kitten_53) true false))
(define-fun spoon_37 ((kitten_54 Float64) (kitten_55 Float64)) Bool (ite (fp.lt kitten_55 kitten_54) true false))
(define-fun spoon_38 ((kitten_56 Float64) (kitten_57 Float64)) Bool (ite (fp.leq kitten_57 kitten_56) true false))
(define-fun spoon_39 ((kitten_58 Float64) (kitten_59 Float64)) Bool (ite (fp.eq kitten_58 kitten_59) true false))
(define-fun spoon_40 ((kitten_60 Float64) (kitten_61 Float64)) Bool (ite (not (fp.eq kitten_60 kitten_61)) true false))
(declare-const cat_41 Bool)
(assert cat_41)
(assert (= (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNA (to_real 1))))
(define-fun spoon_42 ((kitten_62 Bool)) Int (ite (= kitten_62 true) 1 0))
(define-fun spoon_43 ((kitten_63 Int)) Bool (ite (= kitten_63 0) false true))
(define-fun spoon_44 ((kitten_64 Int)) Bool (or (= kitten_64 0) (= kitten_64 1)))
(define-fun spoon_45 ((kitten_65 Float32) (kitten_66 Float32)) Bool (ite (fp.eq kitten_65 kitten_66) true false))
(define-fun spoon_46 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_67)))
(define-fun spoon_47 ((kitten_71 Float32)) Bool (and (spoon_1 kitten_71) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_71) (fp.leq kitten_71 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_48 ((kitten_72 Float32) (kitten_73 Float32)) Bool (ite (fp.eq kitten_72 kitten_73) true false))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(assert (<= 0 cat_54))
(assert (< cat_54 cat_55))
(assert (<= 0 cat_56))
(declare-const cat_57 Int)
(define-fun spoon_58 ((kitten_74 Float32)) Bool (and (spoon_1 kitten_74) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_74) (fp.leq kitten_74 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_59 ((kitten_75 Float32) (kitten_76 Float32)) Bool (ite (fp.eq kitten_75 kitten_76) true false))
(define-fun spoon_60 ((kitten_77 Float32) (kitten_78 Bool) (kitten_79 Bool) (kitten_80 Bool)) Bool (=> (or (= kitten_78 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_58 kitten_77)))
(define-fun spoon_61 ((kitten_81 Float32)) Bool (and (spoon_1 kitten_81) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_81) (fp.leq kitten_81 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_62 ((kitten_82 Float32) (kitten_83 Float32)) Bool (ite (fp.eq kitten_82 kitten_83) true false))
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(assert (<= 0 cat_63))
(assert (<= 0 cat_64))
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(assert (<= 0 cat_65))
(assert (< cat_65 cat_66))
(assert (<= 0 cat_67))
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(assert (<= 0 cat_68))
(assert (< cat_68 cat_69))
(assert (<= 0 cat_70))
(declare-const cat_71 Int)
(define-fun spoon_72 ((kitten_84 Float32)) Bool (and (spoon_1 kitten_84) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_84) (fp.leq kitten_84 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_73 ((kitten_85 Float32) (kitten_86 Float32)) Bool (ite (fp.eq kitten_85 kitten_86) true false))
(define-fun spoon_74 ((kitten_87 Float32)) Bool (and (spoon_1 kitten_87) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_87) (fp.leq kitten_87 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_75 ((kitten_88 Float32) (kitten_89 Float32)) Bool (ite (fp.eq kitten_88 kitten_89) true false))
(define-fun spoon_76 ((kitten_90 Float32)) Bool (and (spoon_1 kitten_90) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_90) (fp.leq kitten_90 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_77 ((kitten_91 Float32) (kitten_92 Float32)) Bool (ite (fp.eq kitten_91 kitten_92) true false))
(define-fun spoon_78 ((kitten_93 Float32) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_76 kitten_93)))
(define-fun spoon_79 ((kitten_97 Float32) (kitten_98 Bool) (kitten_99 Bool) (kitten_100 Bool)) Bool (=> (or (= kitten_98 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_72 kitten_97)))
(define-fun spoon_80 ((kitten_101 Float32)) Bool (and (spoon_1 kitten_101) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_101) (fp.leq kitten_101 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_81 ((kitten_102 Float32) (kitten_103 Float32)) Bool (ite (fp.eq kitten_102 kitten_103) true false))
(define-fun spoon_82 ((kitten_104 Float32) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_105 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_80 kitten_104)))
(define-fun spoon_83 ((kitten_108 Float32) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool)) Bool (=> (or (= kitten_109 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_74 kitten_108)))
(define-fun spoon_84 ((kitten_112 Float64)) Bool (and (spoon_2 kitten_112) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_112) (fp.leq kitten_112 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_85 ((kitten_113 Float64) (kitten_114 Float64)) Bool (ite (fp.eq kitten_113 kitten_114) true false))
(define-fun spoon_86 ((kitten_115 Float64) (kitten_116 Bool) (kitten_117 Bool) (kitten_118 Bool)) Bool (=> (or (= kitten_116 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_84 kitten_115)))
(define-fun spoon_87 ((kitten_119 Float64)) Bool (and (spoon_2 kitten_119) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_119) (fp.leq kitten_119 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_88 ((kitten_120 Float64) (kitten_121 Float64)) Bool (ite (fp.eq kitten_120 kitten_121) true false))
(define-fun spoon_89 ((kitten_122 Float64) (kitten_123 Bool) (kitten_124 Bool) (kitten_125 Bool)) Bool (=> (or (= kitten_123 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_87 kitten_122)))
(declare-const cat_90 Int)
(declare-const cat_91 Int)
(declare-const cat_92 Float64)
(declare-const cat_93 Int)
(declare-const cat_94 Float64)
(declare-const cat_95 Int)
(declare-const cat_96 Float32)
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(declare-const cat_109 Int)
(define-fun spoon_110 ((kitten_126 Float32)) Bool (and (spoon_1 kitten_126) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_126) (fp.leq kitten_126 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_111 ((kitten_127 Float32) (kitten_128 Float32)) Bool (ite (fp.eq kitten_127 kitten_128) true false))
(define-fun spoon_112 ((kitten_129 Float32) (kitten_130 Bool) (kitten_131 Bool) (kitten_132 Bool)) Bool (=> (or (= kitten_130 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_61 kitten_129)))
(define-fun spoon_113 ((kitten_133 Float32) (kitten_134 Bool) (kitten_135 Bool) (kitten_136 Bool)) Bool (=> (or (= kitten_134 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_110 kitten_133)))
(define-fun spoon_114 ((kitten_137 Float32) (kitten_138 Bool) (kitten_139 Bool) (kitten_140 Bool)) Bool (=> (or (= kitten_138 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_47 kitten_137)))
(declare-const cat_115 Bool)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Bool)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Float32)
(declare-const cat_130 Float32)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float32)
(declare-const cat_137 Float32)
(declare-const cat_138 Float32)
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float32)
(declare-const cat_152 Float32)
(declare-const cat_153 Float32)
(declare-const cat_154 Float32)
(declare-const cat_155 Float32)
(declare-const cat_156 Bool)
(declare-const cat_157 Bool)
(declare-const cat_158 Float32)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Bool)
(declare-const cat_163 Bool)
(declare-const cat_164 Float32)
(declare-const cat_165 Float32)
(declare-const cat_166 Float32)
(declare-const cat_167 Float32)
(declare-const cat_168 Float32)
(declare-const cat_169 Float32)
(declare-const cat_170 Float32)
(declare-const cat_171 Float32)
(declare-const cat_172 Float32)
(declare-const cat_173 Float32)
(declare-const cat_174 Float32)
(declare-const cat_175 Float32)
(declare-const cat_176 Float32)
(declare-const cat_177 Float32)
(declare-const cat_178 Bool)
(declare-const cat_179 Bool)
(declare-const cat_180 Bool)
(declare-const cat_181 Float32)
(declare-const cat_182 Float32)
(declare-const cat_183 Float32)
(declare-const cat_184 Float32)
(declare-const cat_185 Bool)
(declare-const cat_186 Float32)
(declare-const cat_187 Float32)
(declare-const cat_188 Float32)
(declare-const cat_189 Float32)
(declare-const cat_190 Bool)
(declare-const cat_191 Float32)
(declare-const cat_192 Float32)
(declare-const cat_193 Bool)
(declare-const cat_194 Bool)
(declare-const cat_195 Float32)
(assert (spoon_87 cat_92))
(assert (spoon_84 cat_94))
(assert (spoon_1 cat_96))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_96) (fp.leq cat_96 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_92) (fp.leq cat_92 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (= cat_171 cat_116))
(assert (= cat_172 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_172))
(assert (= cat_173 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_173))
(assert (= cat_174 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_174))
(assert (= cat_175 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_175))
(assert (= cat_176 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_176))
(assert (= cat_177 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_76 cat_177))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_58 cat_122)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_123)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_124)))
(assert (= cat_178 (spoon_43 1)))
(assert (= cat_179 (ite (not (= cat_125 true)) true false)))
(assert (= cat_179 true))
(assert (=> (= cat_180 true) (=> (spoon_110 cat_96) (and (= cat_130 (fp.mul RNE cat_96 cat_96)) (spoon_1 (fp.mul RNE cat_96 cat_96))))))
(assert (=> (= cat_180 true) (=> (spoon_110 cat_96) (= cat_184 cat_130))))
(assert (=> (= cat_180 true) (=> (spoon_110 cat_96) (= cat_185 cat_180))))
(assert (=> (= cat_180 true) (=> (not (spoon_110 cat_96)) (= cat_185 (spoon_43 0)))))
(assert (=> (= cat_180 true) (=> (not (spoon_110 cat_96)) (= cat_184 cat_176))))
(assert (=> (= cat_180 true) (= cat_186 ((_ to_fp 8 24) RNE (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE cat_92 cat_92))))))
(assert (=> (= cat_180 true) (and (= cat_131 cat_186) (spoon_1 cat_186))))
(declare-const cat_196 Float32)
(assert (=> (= cat_180 true) (and (= cat_132 cat_196) (spoon_80 cat_132))))
(assert (=> (= cat_180 true) (= cat_187 cat_132)))
(assert (=> (not (= cat_180 true)) (= cat_181 cat_177)))
(assert (=> (not (= cat_180 true)) (= cat_184 cat_176)))
(assert (=> (not (= cat_180 true)) (= cat_186 cat_173)))
(assert (=> (not (= cat_180 true)) (= cat_187 cat_172)))
(assert (=> (not (= cat_180 true)) (= cat_185 cat_180)))
(assert (=> (= cat_185 true) (and (= cat_133 (fp.sub RNE cat_186 cat_184)) (spoon_1 (fp.sub RNE cat_186 cat_184)))))
(assert (=> (= cat_185 true) (= cat_134 (fp.add RNE cat_133 (fp.mul RNE cat_181 cat_181)))))
(assert (=> (= cat_185 true) (and (= cat_135 cat_134) (spoon_1 cat_134))))
(assert (=> (= cat_185 true) (= cat_188 cat_135)))
(assert (=> (= cat_185 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188) (and (= cat_136 cat_188) (spoon_1 cat_188)))))
(declare-const cat_197 Float32)
(assert (=> (= cat_185 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188) (and (= cat_137 cat_197) (spoon_80 cat_137)))))
(assert (=> (= cat_185 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188) (= cat_189 cat_137))))
(assert (=> (= cat_185 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188) (= cat_190 cat_185))))
(assert (=> (= cat_185 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188)) (= cat_190 (spoon_43 0)))))
(assert (=> (= cat_185 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_188)) (= cat_189 cat_174))))
(assert (=> (not (= cat_185 true)) (= cat_188 cat_175)))
(assert (=> (not (= cat_185 true)) (= cat_189 cat_174)))
(assert (=> (not (= cat_185 true)) (= cat_190 cat_185)))
(assert (= cat_190 true))
(assert (and (= cat_142 (fp.mul RNE cat_189 cat_96)) (spoon_1 (fp.mul RNE cat_189 cat_96))))
(assert (and (= cat_138 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_92 cat_92)) cat_184)) (spoon_1 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_92 cat_92)) cat_184))))
(assert (= cat_139 (fp.mul RNE cat_187 cat_138)))
(assert (and (= cat_140 cat_139) (spoon_1 cat_139)))
(assert (= cat_141 (fp.mul RNE cat_140 cat_181)))
(assert (and (= cat_143 cat_141) (spoon_1 cat_141)))
(assert (= cat_144 (fp.sub RNE cat_143 cat_142)))
(assert (and (= cat_145 cat_144) (spoon_1 cat_144)))
(assert (= cat_191 cat_145))
(assert (not (spoon_1 (fp.mul RNE cat_189 cat_96))))
(check-sat)
