(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Int)) Bool (and (<= 0 kitten_3) (<= kitten_3 150000)))
(define-fun spoon_4 ((kitten_4 Int) (kitten_5 Bool) (kitten_6 Bool) (kitten_7 Bool)) Bool (=> (or (= kitten_5 true) (<= 0 150000)) (spoon_3 kitten_4)))
(declare-const cat_5 Int)
(declare-const cat_6 Int)
(assert (<= 0 cat_5))
(assert (<= 0 cat_6))
(declare-const cat_7 Int)
(declare-const cat_8 Int)
(declare-const cat_9 Int)
(assert (<= 0 cat_7))
(assert (< cat_7 cat_8))
(assert (<= 0 cat_9))
(declare-const cat_10 Int)
(declare-const cat_11 Int)
(declare-const cat_12 Int)
(assert (<= 0 cat_10))
(assert (< cat_10 cat_11))
(assert (<= 0 cat_12))
(define-fun spoon_13 ((kitten_8 Int)) Bool (and (<= 3 kitten_8) (<= kitten_8 30)))
(define-fun spoon_14 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_15 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_16 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_17 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(define-fun spoon_25 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(define-fun spoon_26 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(assert (<= 0 cat_27))
(assert (<= 0 cat_28))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (< cat_29 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (<= 0 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(assert (<= 0 cat_40))
(assert (< cat_40 cat_41))
(assert (<= 0 cat_42))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_43))
(assert (< cat_43 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(define-fun spoon_58 ((kitten_26 Float32) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_27 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_26 kitten_26)))
(define-fun spoon_59 ((kitten_30 Int) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_31 true) (<= 3 30)) (spoon_13 kitten_30)))
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (spoon_3 cat_54))
(assert (not false))
(check-sat)
