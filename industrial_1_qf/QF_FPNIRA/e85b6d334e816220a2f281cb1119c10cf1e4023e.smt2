(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Int)) Bool (and (<= 0 kitten_2) (<= kitten_2 150000)))
(define-fun spoon_3 ((kitten_3 Int) (kitten_4 Bool) (kitten_5 Bool) (kitten_6 Bool)) Bool (=> (or (= kitten_4 true) (<= 0 150000)) (spoon_2 kitten_3)))
(declare-const cat_4 Int)
(declare-const cat_5 Int)
(assert (<= 0 cat_4))
(assert (<= 0 cat_5))
(declare-const cat_6 Int)
(declare-const cat_7 Int)
(declare-const cat_8 Int)
(assert (<= 0 cat_6))
(assert (< cat_6 cat_7))
(assert (<= 0 cat_8))
(declare-const cat_9 Int)
(declare-const cat_10 Int)
(declare-const cat_11 Int)
(assert (<= 0 cat_9))
(assert (< cat_9 cat_10))
(assert (<= 0 cat_11))
(define-fun spoon_12 ((kitten_7 Int)) Bool (and (<= 3 kitten_7) (<= kitten_7 30)))
(define-fun spoon_13 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_14 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isNegative kitten_9)))
(define-fun spoon_15 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isPositive kitten_10)))
(define-fun spoon_16 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isNegative kitten_11)))
(declare-const cat_17 Int)
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- cat_17) kitten_12) (<= kitten_12 cat_17)))
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- 16777216) kitten_13) (<= kitten_13 16777216)))
(define-fun spoon_20 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isPositive kitten_15)) (and (fp.isNegative kitten_14) (fp.isNegative kitten_15))))
(define-fun spoon_21 ((kitten_16 Float32) (kitten_17 Float32)) Bool (or (and (fp.isPositive kitten_16) (fp.isNegative kitten_17)) (and (fp.isNegative kitten_16) (fp.isPositive kitten_17))))
(define-fun spoon_22 ((kitten_18 Float32) (kitten_19 Float32) (kitten_20 Float32)) Bool (and (=> (spoon_20 kitten_19 kitten_20) (fp.isPositive kitten_18)) (=> (spoon_21 kitten_19 kitten_20) (fp.isNegative kitten_18))))
(define-fun spoon_23 ((kitten_21 Real)) Real (* kitten_21 kitten_21))
(define-fun spoon_24 ((kitten_22 Float32) (kitten_23 Real)) Bool (or (and (fp.isPositive kitten_22) (< 0.0 kitten_23)) (and (fp.isNegative kitten_22) (< kitten_23 0.0))))
(define-fun spoon_25 ((kitten_24 Float32) (kitten_25 Float32)) Bool (not (fp.eq kitten_24 kitten_25)))
(define-fun spoon_26 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.lt kitten_26 kitten_27) true false))
(define-fun spoon_27 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.leq kitten_28 kitten_29) true false))
(define-fun spoon_28 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (fp.lt kitten_31 kitten_30) true false))
(define-fun spoon_29 ((kitten_32 Float32) (kitten_33 Float32)) Bool (ite (fp.leq kitten_33 kitten_32) true false))
(define-fun spoon_30 ((kitten_34 Float32) (kitten_35 Float32)) Bool (ite (fp.eq kitten_34 kitten_35) true false))
(define-fun spoon_31 ((kitten_36 Float32) (kitten_37 Float32)) Bool (ite (not (fp.eq kitten_36 kitten_37)) true false))
(declare-const cat_32 Bool)
(assert cat_32)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_33 ((kitten_38 Float32)) Bool (and (spoon_1 kitten_38) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_38) (fp.leq kitten_38 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_34 ((kitten_39 Float32) (kitten_40 Float32)) Bool (ite (fp.eq kitten_39 kitten_40) true false))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (< cat_37 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(assert (<= 0 cat_40))
(assert (< cat_40 cat_41))
(assert (<= 0 cat_42))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_43))
(assert (<= 0 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(assert (<= 0 cat_54))
(assert (<= 0 cat_55))
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_56))
(assert (< cat_56 cat_57))
(assert (<= 0 cat_58))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(define-fun spoon_66 ((kitten_41 Float32) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool)) Bool (=> (or (= kitten_42 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_33 kitten_41)))
(define-fun spoon_67 ((kitten_45 Int) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (<= 3 30)) (spoon_12 kitten_45)))
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(assert (spoon_2 cat_62))
(assert (not false))
(check-sat)
