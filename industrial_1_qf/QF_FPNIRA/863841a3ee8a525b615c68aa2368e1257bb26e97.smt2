(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Bool)) Int (ite (= kitten_18 true) 1 0))
(define-fun spoon_15 ((kitten_19 Int)) Bool (ite (= kitten_19 0) false true))
(define-fun spoon_16 ((kitten_20 Int)) Bool (or (= kitten_20 0) (= kitten_20 1)))
(define-fun spoon_17 ((kitten_21 Float32)) Bool (and (spoon_1 kitten_21) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_21) (fp.leq kitten_21 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(assert (<= 0 cat_18))
(assert (<= 0 cat_19))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(assert (<= 0 cat_20))
(assert (< cat_20 cat_21))
(assert (<= 0 cat_22))
(declare-const cat_23 Int)
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(assert (<= 0 cat_23))
(assert (< cat_23 cat_24))
(assert (<= 0 cat_25))
(define-fun spoon_26 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_22) (fp.leq kitten_22 (fp #b0 #b10010011 #b00000001101101110000000)))))
(define-fun spoon_27 ((kitten_23 Float32) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool)) Bool (=> (or (= kitten_24 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_26 kitten_23)))
(define-fun spoon_28 ((kitten_27 Int)) Bool (and (<= (- 128) kitten_27) (<= kitten_27 127)))
(define-fun spoon_29 ((kitten_28 Int)) Bool (and (<= 1 kitten_28) (<= kitten_28 30)))
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= 3 kitten_29) (<= kitten_29 30)))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_31))
(assert (<= 0 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(assert (<= 0 cat_34))
(assert (<= 0 cat_35))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(assert (<= 0 cat_36))
(assert (< cat_36 cat_37))
(assert (<= 0 cat_38))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_39))
(assert (< cat_39 cat_40))
(assert (<= 0 cat_41))
(define-fun spoon_42 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_30) (fp.leq kitten_30 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_43 ((kitten_31 Float32) (kitten_32 Bool) (kitten_33 Bool) (kitten_34 Bool)) Bool (=> (or (= kitten_32 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_42 kitten_31)))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(define-fun spoon_47 ((kitten_35 Float32) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_36 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_17 kitten_35)))
(define-fun spoon_48 ((kitten_39 Int) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (<= 1 30)) (spoon_29 kitten_39)))
(define-fun spoon_49 ((kitten_43 Int) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (<= 3 30)) (spoon_30 kitten_43)))
(declare-const cat_50 Float32)
(declare-const cat_51 Int)
(declare-const cat_52 Float32)
(declare-const cat_53 Int)
(declare-const cat_54 Float32)
(declare-const cat_55 Float32)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Float32)
(declare-const cat_59 Int)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_26 cat_50)))
(assert (= cat_54 cat_50))
(assert (= cat_55 cat_52))
(assert (not false))
(check-sat)
