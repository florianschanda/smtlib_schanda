(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32)) Bool (and (spoon_1 kitten_19) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_19) (fp.leq kitten_19 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_16 Int)
(declare-const cat_17 Int)
(assert (<= 0 cat_16))
(assert (<= 0 cat_17))
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_18))
(assert (< cat_18 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(define-fun spoon_24 ((kitten_20 Float32)) Bool (and (spoon_1 kitten_20) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_20) (fp.leq kitten_20 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_25 ((kitten_21 Float32) (kitten_22 Bool) (kitten_23 Bool) (kitten_24 Bool)) Bool (=> (or (= kitten_22 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_24 kitten_21)))
(define-fun spoon_26 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_27 ((kitten_26 Float32) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_27 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_26 kitten_26)))
(define-fun spoon_28 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_30) (fp.leq kitten_30 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_29 ((kitten_31 Float32) (kitten_32 Bool) (kitten_33 Bool) (kitten_34 Bool)) Bool (=> (or (= kitten_32 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_28 kitten_31)))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(define-fun spoon_36 ((kitten_35 Float32) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_36 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_15 kitten_35)))
(declare-const cat_37 Float32)
(declare-const cat_38 Float32)
(declare-const cat_39 Float32)
(declare-const cat_40 Float32)
(declare-const cat_41 Float32)
(declare-const cat_42 Float32)
(declare-const cat_43 Float32)
(declare-const cat_44 Float32)
(declare-const cat_45 Float32)
(declare-const cat_46 Float32)
(declare-const cat_47 Float32)
(declare-const cat_48 Float32)
(declare-const cat_49 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_28 cat_37)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_28 cat_38)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000)) (spoon_26 cat_39)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_24 cat_40)))
(assert (= cat_44 cat_37))
(assert (= cat_46 cat_38))
(declare-const cat_50 Float32)
(assert (and (= cat_41 cat_50) (spoon_26 cat_41)))
(assert (= cat_48 cat_39))
(assert (= cat_49 cat_41))
(assert (fp.lt cat_49 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (not (spoon_24 (fp.add RNE cat_49 (fp #b0 #b10000111 #b01101000000000000000000)))))
(check-sat)
