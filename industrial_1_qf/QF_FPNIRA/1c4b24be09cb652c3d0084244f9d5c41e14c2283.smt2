(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Bool)) Int (ite (= kitten_2 true) 1 0))
(define-fun spoon_3 ((kitten_3 Int)) Bool (ite (= kitten_3 0) false true))
(define-fun spoon_4 ((kitten_4 Int)) Bool (or (= kitten_4 0) (= kitten_4 1)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isInfinite kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isNegative kitten_6)))
(define-fun spoon_7 ((kitten_7 Float32)) Bool (and (fp.isZero kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_8 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isNegative kitten_8)))
(declare-const cat_9 Int)
(define-fun spoon_10 ((kitten_9 Int)) Bool (and (<= (- cat_9) kitten_9) (<= kitten_9 cat_9)))
(define-fun spoon_11 ((kitten_10 Int)) Bool (and (<= (- 16777216) kitten_10) (<= kitten_10 16777216)))
(define-fun spoon_12 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isPositive kitten_12)) (and (fp.isNegative kitten_11) (fp.isNegative kitten_12))))
(define-fun spoon_13 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isNegative kitten_14)) (and (fp.isNegative kitten_13) (fp.isPositive kitten_14))))
(define-fun spoon_14 ((kitten_15 Float32) (kitten_16 Float32) (kitten_17 Float32)) Bool (and (=> (spoon_12 kitten_16 kitten_17) (fp.isPositive kitten_15)) (=> (spoon_13 kitten_16 kitten_17) (fp.isNegative kitten_15))))
(define-fun spoon_15 ((kitten_18 Real)) Real (* kitten_18 kitten_18))
(define-fun spoon_16 ((kitten_19 Float32) (kitten_20 Real)) Bool (or (and (fp.isPositive kitten_19) (< 0.0 kitten_20)) (and (fp.isNegative kitten_19) (< kitten_20 0.0))))
(define-fun spoon_17 ((kitten_21 Float32) (kitten_22 Float32)) Bool (not (fp.eq kitten_21 kitten_22)))
(define-fun spoon_18 ((kitten_23 Float32) (kitten_24 Float32)) Bool (ite (fp.lt kitten_23 kitten_24) true false))
(define-fun spoon_19 ((kitten_25 Float32) (kitten_26 Float32)) Bool (ite (fp.leq kitten_25 kitten_26) true false))
(define-fun spoon_20 ((kitten_27 Float32) (kitten_28 Float32)) Bool (ite (fp.lt kitten_28 kitten_27) true false))
(define-fun spoon_21 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.leq kitten_30 kitten_29) true false))
(define-fun spoon_22 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (fp.eq kitten_31 kitten_32) true false))
(define-fun spoon_23 ((kitten_33 Float32) (kitten_34 Float32)) Bool (ite (not (fp.eq kitten_33 kitten_34)) true false))
(declare-const cat_24 Bool)
(assert cat_24)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_25 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_35) (fp.leq kitten_35 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_26 ((kitten_36 Float32) (kitten_37 Float32)) Bool (ite (fp.eq kitten_36 kitten_37) true false))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(assert (<= 0 cat_27))
(assert (<= 0 cat_28))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (< cat_29 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(define-fun spoon_35 ((kitten_38 Int)) Bool (and (<= 1 kitten_38) (<= kitten_38 30)))
(define-fun spoon_36 ((kitten_39 Int)) Bool (and (<= 3 kitten_39) (<= kitten_39 30)))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (<= 0 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(assert (<= 0 cat_42))
(assert (< cat_42 cat_43))
(assert (<= 0 cat_44))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(define-fun spoon_52 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_40)))
(define-fun spoon_53 ((kitten_44 Int) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (<= 1 30)) (spoon_35 kitten_44)))
(define-fun spoon_54 ((kitten_48 Int) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (<= 3 30)) (spoon_36 kitten_48)))
(declare-const cat_55 Bool)
(declare-const cat_56 Bool)
(declare-const cat_57 Bool)
(assert (= cat_56 cat_55))
(assert (= cat_57 (spoon_3 0)))
(assert (not (<= 1 1)))
(check-sat)
