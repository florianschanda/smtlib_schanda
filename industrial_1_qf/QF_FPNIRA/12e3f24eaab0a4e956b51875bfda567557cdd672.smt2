(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32) (kitten_20 Float32)) Bool (not (fp.eq kitten_19 kitten_20)))
(define-fun spoon_16 ((kitten_21 Float32) (kitten_22 Float32)) Bool (ite (fp.lt kitten_21 kitten_22) true false))
(define-fun spoon_17 ((kitten_23 Float32) (kitten_24 Float32)) Bool (ite (fp.leq kitten_23 kitten_24) true false))
(define-fun spoon_18 ((kitten_25 Float32) (kitten_26 Float32)) Bool (ite (fp.lt kitten_26 kitten_25) true false))
(define-fun spoon_19 ((kitten_27 Float32) (kitten_28 Float32)) Bool (ite (fp.leq kitten_28 kitten_27) true false))
(define-fun spoon_20 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.eq kitten_29 kitten_30) true false))
(define-fun spoon_21 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (not (fp.eq kitten_31 kitten_32)) true false))
(declare-const cat_22 Bool)
(assert cat_22)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_23 ((kitten_33 Float64)) Bool (and (fp.isInfinite kitten_33) (fp.isPositive kitten_33)))
(define-fun spoon_24 ((kitten_34 Float64)) Bool (and (fp.isInfinite kitten_34) (fp.isNegative kitten_34)))
(define-fun spoon_25 ((kitten_35 Float64)) Bool (and (fp.isZero kitten_35) (fp.isPositive kitten_35)))
(define-fun spoon_26 ((kitten_36 Float64)) Bool (and (fp.isZero kitten_36) (fp.isNegative kitten_36)))
(declare-const cat_27 Int)
(define-fun spoon_28 ((kitten_37 Int)) Bool (and (<= (- cat_27) kitten_37) (<= kitten_37 cat_27)))
(define-fun spoon_29 ((kitten_38 Int)) Bool (and (<= (- 9007199254740992) kitten_38) (<= kitten_38 9007199254740992)))
(define-fun spoon_30 ((kitten_39 Float64) (kitten_40 Float64)) Bool (or (and (fp.isPositive kitten_39) (fp.isPositive kitten_40)) (and (fp.isNegative kitten_39) (fp.isNegative kitten_40))))
(define-fun spoon_31 ((kitten_41 Float64) (kitten_42 Float64)) Bool (or (and (fp.isPositive kitten_41) (fp.isNegative kitten_42)) (and (fp.isNegative kitten_41) (fp.isPositive kitten_42))))
(define-fun spoon_32 ((kitten_43 Float64) (kitten_44 Float64) (kitten_45 Float64)) Bool (and (=> (spoon_30 kitten_44 kitten_45) (fp.isPositive kitten_43)) (=> (spoon_31 kitten_44 kitten_45) (fp.isNegative kitten_43))))
(define-fun spoon_33 ((kitten_46 Float64) (kitten_47 Real)) Bool (or (and (fp.isPositive kitten_46) (< 0.0 kitten_47)) (and (fp.isNegative kitten_46) (< kitten_47 0.0))))
(define-fun spoon_34 ((kitten_48 Float64) (kitten_49 Float64)) Bool (not (fp.eq kitten_48 kitten_49)))
(define-fun spoon_35 ((kitten_50 Float64) (kitten_51 Float64)) Bool (ite (fp.lt kitten_50 kitten_51) true false))
(define-fun spoon_36 ((kitten_52 Float64) (kitten_53 Float64)) Bool (ite (fp.leq kitten_52 kitten_53) true false))
(define-fun spoon_37 ((kitten_54 Float64) (kitten_55 Float64)) Bool (ite (fp.lt kitten_55 kitten_54) true false))
(define-fun spoon_38 ((kitten_56 Float64) (kitten_57 Float64)) Bool (ite (fp.leq kitten_57 kitten_56) true false))
(define-fun spoon_39 ((kitten_58 Float64) (kitten_59 Float64)) Bool (ite (fp.eq kitten_58 kitten_59) true false))
(define-fun spoon_40 ((kitten_60 Float64) (kitten_61 Float64)) Bool (ite (not (fp.eq kitten_60 kitten_61)) true false))
(declare-const cat_41 Bool)
(assert cat_41)
(assert (= (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNA (to_real 1))))
(define-fun spoon_42 ((kitten_62 Bool)) Int (ite (= kitten_62 true) 1 0))
(define-fun spoon_43 ((kitten_63 Int)) Bool (ite (= kitten_63 0) false true))
(define-fun spoon_44 ((kitten_64 Int)) Bool (or (= kitten_64 0) (= kitten_64 1)))
(define-fun spoon_45 ((kitten_65 Float32) (kitten_66 Float32)) Bool (ite (fp.eq kitten_65 kitten_66) true false))
(define-fun spoon_46 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_67)))
(define-fun spoon_47 ((kitten_71 Float32)) Bool (and (spoon_1 kitten_71) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_71) (fp.leq kitten_71 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_48 ((kitten_72 Float32) (kitten_73 Float32)) Bool (ite (fp.eq kitten_72 kitten_73) true false))
(define-fun spoon_49 ((kitten_74 Float32)) Bool (and (spoon_1 kitten_74) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_74) (fp.leq kitten_74 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_50 ((kitten_75 Float32) (kitten_76 Float32)) Bool (ite (fp.eq kitten_75 kitten_76) true false))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_51))
(assert (<= 0 cat_52))
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(assert (<= 0 cat_53))
(assert (< cat_53 cat_54))
(assert (<= 0 cat_55))
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_56))
(assert (< cat_56 cat_57))
(assert (<= 0 cat_58))
(define-fun spoon_59 ((kitten_77 Float32)) Bool (and (spoon_1 kitten_77) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_77) (fp.leq kitten_77 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_60 ((kitten_78 Float32) (kitten_79 Float32)) Bool (ite (fp.eq kitten_78 kitten_79) true false))
(define-fun spoon_61 ((kitten_80 Float32) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (=> (or (= kitten_81 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_59 kitten_80)))
(define-fun spoon_62 ((kitten_84 Float32)) Bool (and (spoon_1 kitten_84) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_84) (fp.leq kitten_84 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_63 ((kitten_85 Float32) (kitten_86 Float32)) Bool (ite (fp.eq kitten_85 kitten_86) true false))
(define-fun spoon_64 ((kitten_87 Float32) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_88 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_62 kitten_87)))
(define-fun spoon_65 ((kitten_91 Float64) (kitten_92 Float64)) Bool (ite (fp.eq kitten_91 kitten_92) true false))
(define-fun spoon_66 ((kitten_93 Float64) (kitten_94 Float64)) Bool (ite (fp.eq kitten_93 kitten_94) true false))
(define-fun spoon_67 ((kitten_95 Float64) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_95)))
(define-fun spoon_68 ((kitten_99 Float64)) Bool (and (spoon_2 kitten_99) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_99) (fp.leq kitten_99 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_69 ((kitten_100 Float64) (kitten_101 Float64)) Bool (ite (fp.eq kitten_100 kitten_101) true false))
(define-fun spoon_70 ((kitten_102 Float64) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool)) Bool (=> (or (= kitten_103 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_68 kitten_102)))
(define-fun spoon_71 ((kitten_106 Float64)) Bool (and (spoon_2 kitten_106) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_106) (fp.leq kitten_106 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_72 ((kitten_107 Float64) (kitten_108 Float64)) Bool (ite (fp.eq kitten_107 kitten_108) true false))
(define-fun spoon_73 ((kitten_109 Float64) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_110 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_71 kitten_109)))
(define-fun spoon_74 ((kitten_113 Float32) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool)) Bool (=> (or (= kitten_114 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_47 kitten_113)))
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Float64)
(declare-const cat_78 Int)
(declare-const cat_79 Float64)
(declare-const cat_80 Int)
(declare-const cat_81 Float32)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(define-fun spoon_85 ((kitten_117 Float32)) Bool (and (spoon_1 kitten_117) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_117) (fp.leq kitten_117 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_86 ((kitten_118 Float32) (kitten_119 Float32)) Bool (ite (fp.eq kitten_118 kitten_119) true false))
(define-fun spoon_87 ((kitten_120 Float32) (kitten_121 Bool) (kitten_122 Bool) (kitten_123 Bool)) Bool (=> (or (= kitten_121 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_85 kitten_120)))
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(declare-const cat_90 Int)
(declare-const cat_91 Int)
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(define-fun spoon_102 ((kitten_124 Float32) (kitten_125 Bool) (kitten_126 Bool) (kitten_127 Bool)) Bool (=> (or (= kitten_125 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_49 kitten_124)))
(declare-const cat_103 Float64)
(declare-const cat_104 Float64)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float64)
(declare-const cat_109 Float64)
(declare-const cat_110 Float64)
(declare-const cat_111 Float64)
(declare-const cat_112 Float64)
(declare-const cat_113 Float64)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float64)
(declare-const cat_125 Float32)
(declare-const cat_126 Float64)
(declare-const cat_127 Float32)
(declare-const cat_128 Float64)
(declare-const cat_129 Float32)
(declare-const cat_130 Float64)
(declare-const cat_131 Float32)
(declare-const cat_132 Float64)
(declare-const cat_133 Float32)
(declare-const cat_134 Float64)
(declare-const cat_135 Float64)
(declare-const cat_136 Float64)
(declare-const cat_137 Float64)
(declare-const cat_138 Float64)
(declare-const cat_139 Float64)
(declare-const cat_140 Float64)
(declare-const cat_141 Float64)
(declare-const cat_142 Float64)
(declare-const cat_143 Float64)
(declare-const cat_144 Float64)
(declare-const cat_145 Float64)
(declare-const cat_146 Float64)
(declare-const cat_147 Float64)
(declare-const cat_148 Float64)
(declare-const cat_149 Bool)
(declare-const cat_150 Bool)
(declare-const cat_151 Float64)
(declare-const cat_152 Float64)
(declare-const cat_153 Bool)
(declare-const cat_154 Bool)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float64)
(declare-const cat_160 Float64)
(declare-const cat_161 Float64)
(declare-const cat_162 Float64)
(declare-const cat_163 Float64)
(declare-const cat_164 Float64)
(declare-const cat_165 Float64)
(declare-const cat_166 Bool)
(declare-const cat_167 Bool)
(declare-const cat_168 Float64)
(declare-const cat_169 Float64)
(declare-const cat_170 Bool)
(declare-const cat_171 Bool)
(declare-const cat_172 Float64)
(declare-const cat_173 Float32)
(declare-const cat_174 Float32)
(declare-const cat_175 Float32)
(declare-const cat_176 Float32)
(declare-const cat_177 Float32)
(declare-const cat_178 Float32)
(declare-const cat_179 Float64)
(declare-const cat_180 Float64)
(declare-const cat_181 Float64)
(declare-const cat_182 Float64)
(declare-const cat_183 Float64)
(declare-const cat_184 Float64)
(declare-const cat_185 Float64)
(declare-const cat_186 Float64)
(declare-const cat_187 Float64)
(declare-const cat_188 Float64)
(declare-const cat_189 Float64)
(declare-const cat_190 Bool)
(declare-const cat_191 Bool)
(declare-const cat_192 Float64)
(declare-const cat_193 Float64)
(declare-const cat_194 Float64)
(declare-const cat_195 Float64)
(declare-const cat_196 Float64)
(declare-const cat_197 Float64)
(declare-const cat_198 Bool)
(declare-const cat_199 Bool)
(assert (spoon_71 cat_77))
(assert (spoon_68 cat_79))
(assert (spoon_1 cat_81))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_103)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_104)))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_81) (fp.leq cat_81 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_77) (fp.leq cat_77 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_59 cat_105)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_59 cat_106)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_59 cat_107)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_108)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_109)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_110)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_111)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_112)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_113)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_114)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_115)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_116)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_117)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_118)))
(assert (not (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_77)))
(check-sat)
