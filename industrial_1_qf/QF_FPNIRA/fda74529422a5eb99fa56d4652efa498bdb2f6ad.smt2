(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32)) Bool (and (spoon_1 kitten_18) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_18) (fp.leq kitten_18 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_15 Int)
(declare-const cat_16 Int)
(assert (<= 0 cat_15))
(assert (<= 0 cat_16))
(declare-const cat_17 Int)
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(assert (<= 0 cat_17))
(assert (< cat_17 cat_18))
(assert (<= 0 cat_19))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(assert (<= 0 cat_20))
(assert (< cat_20 cat_21))
(assert (<= 0 cat_22))
(define-fun spoon_23 ((kitten_19 Float32)) Bool (and (spoon_1 kitten_19) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_19) (fp.leq kitten_19 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_24 ((kitten_20 Float32) (kitten_21 Bool) (kitten_22 Bool) (kitten_23 Bool)) Bool (=> (or (= kitten_21 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_23 kitten_20)))
(define-fun spoon_25 ((kitten_24 Float32)) Bool (and (spoon_1 kitten_24) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_24) (fp.leq kitten_24 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_26 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_25) (fp.leq kitten_25 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_27 ((kitten_26 Float32) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_27 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_26 kitten_26)))
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(define-fun spoon_35 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_30) (fp.leq kitten_30 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_36 ((kitten_31 Float32) (kitten_32 Bool) (kitten_33 Bool) (kitten_34 Bool)) Bool (=> (or (= kitten_32 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_35 kitten_31)))
(define-fun spoon_37 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) kitten_35) (fp.leq kitten_35 (fp #b0 #b10110110 #b00000000000000000000000)))))
(define-fun spoon_38 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000))) (spoon_37 kitten_36)))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(assert (<= 0 cat_39))
(assert (<= 0 cat_40))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(define-fun spoon_62 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_40)))
(define-fun spoon_63 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_25 kitten_44)))
(define-fun spoon_64 ((kitten_48 Float32) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_14 kitten_48)))
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Float32)
(declare-const cat_99 Float32)
(declare-const cat_100 Float32)
(declare-const cat_101 Float32)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float32)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Float32)
(declare-const cat_115 Float32)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_26 cat_65)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_26 cat_66)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_23 cat_67)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_35 cat_68)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_35 cat_69)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_35 cat_70)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_35 cat_71)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_35 cat_72)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_37 cat_73)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_37 cat_74)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_37 cat_75)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_37 cat_76)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_37 cat_77)))
(assert (= cat_91 cat_78))
(assert (= cat_92 cat_79))
(assert (= cat_93 cat_80))
(assert (= cat_94 cat_81))
(assert (= cat_95 cat_82))
(assert (= cat_96 (fp.sub RNE (fp.mul RNE cat_91 cat_93) (fp.mul RNE cat_92 cat_92))))
(assert (= cat_97 cat_96))
(assert (= cat_98 cat_96))
(assert (=> (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_99 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_100 (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (=> (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_101 cat_95)))
(assert (=> (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_102 cat_93)))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_103 (fp.sub RNE (fp.mul RNE cat_92 cat_95) (fp.mul RNE cat_93 cat_94)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_104 (fp.sub RNE (fp.mul RNE cat_91 cat_95) (fp.mul RNE cat_92 cat_94)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_105 (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_106 cat_95))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_107 cat_93))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_97 cat_103) (= cat_108 cat_97)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_97 cat_103) (= cat_109 (fp.add RNE cat_95 cat_92))))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_97 cat_103) (= cat_110 cat_93)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_97 cat_103)) (= cat_110 cat_98)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_97 cat_103)) (= cat_109 cat_104)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_97 cat_103)) (= cat_108 cat_103)))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_107 cat_110))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_106 cat_109))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_103 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_105 cat_108))))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_102 cat_107)))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_101 cat_106)))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_100 cat_97)))
(assert (=> (not (fp.lt cat_96 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_99 cat_105)))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_111 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_112 (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_115 cat_100))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_91 (fp.neg cat_94)) (= cat_113 cat_100)))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_91 (fp.neg cat_94)) (= cat_115 cat_100)))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.neg cat_94))) (= cat_114 (fp.neg cat_94))))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.neg cat_94))) (= cat_115 cat_91)))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.neg cat_94))) (= cat_113 cat_114)))))
(assert (=> (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_94) (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_112 cat_113))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (= cat_116 cat_102))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_117 (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_120 cat_100)))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_91 (fp.add RNE (fp.neg cat_94) cat_92)) (= cat_118 cat_100))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_91 (fp.add RNE (fp.neg cat_94) cat_92)) (= cat_120 cat_100))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.add RNE (fp.neg cat_94) cat_92))) (= cat_119 (fp.add RNE (fp.neg cat_94) cat_92)))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.add RNE (fp.neg cat_94) cat_92))) (= cat_120 cat_91))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_91 (fp.add RNE (fp.neg cat_94) cat_92))) (= cat_118 cat_119))))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_102 cat_101) (=> (not (fp.lt (fp.add RNE (fp.neg cat_94) cat_92) (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_117 cat_118)))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_102 cat_101)) (= cat_116 cat_101))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_102 cat_101)) (= cat_120 cat_100))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_102 cat_101)) (= cat_117 cat_99))))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_111 cat_116)))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_115 cat_120)))
(assert (=> (not (fp.lt cat_101 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_112 cat_117)))
(assert (not (fp.lt cat_115 (fp #b0 #b01101011 #b00001100011011110111101))))
(assert (not (spoon_1 (fp.div RNE cat_112 cat_115))))
(check-sat)
