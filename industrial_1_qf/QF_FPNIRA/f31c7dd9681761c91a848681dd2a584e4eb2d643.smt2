(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float64)) Bool (and (fp.isInfinite kitten_19) (fp.isPositive kitten_19)))
(define-fun spoon_16 ((kitten_20 Float64)) Bool (and (fp.isInfinite kitten_20) (fp.isNegative kitten_20)))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isZero kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isZero kitten_22) (fp.isNegative kitten_22)))
(declare-const cat_19 Int)
(define-fun spoon_20 ((kitten_23 Int)) Bool (and (<= (- cat_19) kitten_23) (<= kitten_23 cat_19)))
(define-fun spoon_21 ((kitten_24 Int)) Bool (and (<= (- 9007199254740992) kitten_24) (<= kitten_24 9007199254740992)))
(define-fun spoon_22 ((kitten_25 Float64) (kitten_26 Float64)) Bool (or (and (fp.isPositive kitten_25) (fp.isPositive kitten_26)) (and (fp.isNegative kitten_25) (fp.isNegative kitten_26))))
(define-fun spoon_23 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isNegative kitten_28)) (and (fp.isNegative kitten_27) (fp.isPositive kitten_28))))
(define-fun spoon_24 ((kitten_29 Float64) (kitten_30 Float64) (kitten_31 Float64)) Bool (and (=> (spoon_22 kitten_30 kitten_31) (fp.isPositive kitten_29)) (=> (spoon_23 kitten_30 kitten_31) (fp.isNegative kitten_29))))
(define-fun spoon_25 ((kitten_32 Float64) (kitten_33 Real)) Bool (or (and (fp.isPositive kitten_32) (< 0.0 kitten_33)) (and (fp.isNegative kitten_32) (< kitten_33 0.0))))
(define-fun spoon_26 ((kitten_34 Bool)) Int (ite (= kitten_34 true) 1 0))
(define-fun spoon_27 ((kitten_35 Int)) Bool (ite (= kitten_35 0) false true))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (< cat_35 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(define-fun spoon_41 ((kitten_38 Float64)) Bool (and (spoon_2 kitten_38) (and (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) kitten_38) (fp.leq kitten_38 (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_42 ((kitten_39 Float64) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000))) (spoon_41 kitten_39)))
(define-fun spoon_43 ((kitten_43 Float64)) Bool (and (spoon_2 kitten_43) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_43) (fp.leq kitten_43 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_44 ((kitten_44 Float64) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_43 kitten_44)))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(define-fun spoon_49 ((kitten_48 Float32) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_48)))
(declare-const cat_50 Float64)
(declare-const cat_51 Float64)
(declare-const cat_52 Float64)
(declare-const cat_53 Float64)
(declare-const cat_54 Float64)
(declare-const cat_55 Float32)
(declare-const cat_56 Float64)
(declare-const cat_57 Float64)
(declare-const cat_58 Float32)
(declare-const cat_59 Float64)
(declare-const cat_60 Float64)
(declare-const cat_61 Float32)
(declare-const cat_62 Float64)
(declare-const cat_63 Float64)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float64)
(declare-const cat_68 Float64)
(declare-const cat_69 Float64)
(declare-const cat_70 Float64)
(declare-const cat_71 Float64)
(declare-const cat_72 Float64)
(declare-const cat_73 Float64)
(declare-const cat_74 Float64)
(declare-const cat_75 Float64)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_41 cat_50)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_41 cat_51)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_43 cat_52)))
(assert (= cat_68 cat_50))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69) (and (= cat_54 cat_53) (spoon_2 cat_53))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69) (= cat_71 cat_54)))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (and (= cat_57 cat_56) (spoon_2 cat_56)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_72 cat_57))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (not (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_72 cat_52))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (not (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_72 cat_67))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (= cat_71 cat_72)))
(assert (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_73)))
(assert (fp.lt cat_73 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))))
(assert (not (spoon_43 cat_62)))
(check-sat)
