(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Float32)) Bool (and (spoon_1 kitten_32) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_32) (fp.leq kitten_32 (fp #b0 #b10010011 #b00000001101101110000000)))))
(define-fun spoon_23 ((kitten_33 Float32) (kitten_34 Float32)) Bool (ite (fp.eq kitten_33 kitten_34) true false))
(define-fun spoon_24 ((kitten_35 Float32) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_36 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_22 kitten_35)))
(declare-const cat_25 Float32)
(declare-const cat_26 Int)
(declare-const cat_27 Float32)
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(declare-const cat_30 Float32)
(declare-const cat_31 Float32)
(declare-const cat_32 Float32)
(declare-const cat_33 Float32)
(declare-const cat_34 Float32)
(declare-const cat_35 Float32)
(declare-const cat_36 Float32)
(declare-const cat_37 Float32)
(declare-const cat_38 Float32)
(declare-const cat_39 Float32)
(declare-const cat_40 Float32)
(declare-const cat_41 Float32)
(declare-const cat_42 Float32)
(declare-const cat_43 Float32)
(declare-const cat_44 Float32)
(declare-const cat_45 Float32)
(assert (spoon_22 cat_25))
(assert (spoon_22 cat_27))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_22 cat_30)))
(assert (=> (fp.lt cat_25 cat_27) (= cat_33 cat_30)))
(assert (=> (fp.lt cat_25 cat_27) (= cat_34 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (not (fp.lt cat_25 cat_27)) (and (= cat_32 (fp.sub RNE cat_25 cat_27)) (spoon_1 (fp.sub RNE cat_25 cat_27)))))
(assert (=> (not (fp.lt cat_25 cat_27)) (= cat_35 cat_30)))
(assert (=> (not (fp.lt cat_25 cat_27)) (= cat_36 cat_32)))
(assert (=> (not (fp.lt cat_25 cat_27)) (= cat_34 cat_36)))
(assert (= cat_38 cat_39))
(assert (= cat_40 cat_38))
(assert (= cat_37 cat_31))
(assert (= cat_38 cat_34))
(assert (= cat_41 cat_34))
(assert (= cat_44 cat_40))
(assert (= cat_43 cat_34))
(assert (= cat_45 cat_42))
(assert (not (fp.eq cat_42 (fp.max (fp #b0 #b00000000 #b00000000000000000000000) (fp.sub RNE cat_25 cat_27)))))
(check-sat)
