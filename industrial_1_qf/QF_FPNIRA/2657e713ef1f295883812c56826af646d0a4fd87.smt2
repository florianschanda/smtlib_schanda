(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Float32) (kitten_33 Float32)) Bool (ite (fp.eq kitten_32 kitten_33) true false))
(define-fun spoon_23 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_24 ((kitten_35 Float32) (kitten_36 Float32)) Bool (ite (fp.eq kitten_35 kitten_36) true false))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_25))
(assert (<= 0 cat_26))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(assert (<= 0 cat_27))
(assert (< cat_27 cat_28))
(assert (<= 0 cat_29))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(assert (<= 0 cat_30))
(assert (< cat_30 cat_31))
(assert (<= 0 cat_32))
(define-fun spoon_33 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_34 ((kitten_38 Float32) (kitten_39 Float32)) Bool (ite (fp.eq kitten_38 kitten_39) true false))
(define-fun spoon_35 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_33 kitten_40)))
(define-fun spoon_36 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_44) (fp.leq kitten_44 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_37 ((kitten_45 Float32) (kitten_46 Float32)) Bool (ite (fp.eq kitten_45 kitten_46) true false))
(define-fun spoon_38 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_47) (fp.leq kitten_47 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_39 ((kitten_48 Float32) (kitten_49 Float32)) Bool (ite (fp.eq kitten_48 kitten_49) true false))
(define-fun spoon_40 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_38 kitten_50)))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(define-fun spoon_48 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_49 ((kitten_55 Float32) (kitten_56 Float32)) Bool (ite (fp.eq kitten_55 kitten_56) true false))
(define-fun spoon_50 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_48 kitten_57)))
(define-fun spoon_51 ((kitten_61 Float32)) Bool (and (spoon_1 kitten_61) (and (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) kitten_61) (fp.leq kitten_61 (fp #b0 #b10110110 #b00000000000000000000000)))))
(define-fun spoon_52 ((kitten_62 Float32) (kitten_63 Float32)) Bool (ite (fp.eq kitten_62 kitten_63) true false))
(define-fun spoon_53 ((kitten_64 Float32) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000))) (spoon_51 kitten_64)))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(assert (<= 0 cat_54))
(assert (<= 0 cat_55))
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_56))
(assert (< cat_56 cat_57))
(assert (<= 0 cat_58))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(define-fun spoon_77 ((kitten_68 Float32) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_69 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_68)))
(define-fun spoon_78 ((kitten_72 Float32) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool)) Bool (=> (or (= kitten_73 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_36 kitten_72)))
(define-fun spoon_79 ((kitten_76 Float32) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_23 kitten_76)))
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Float32)
(declare-const cat_99 Float32)
(declare-const cat_100 Float32)
(declare-const cat_101 Float32)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float32)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Float32)
(declare-const cat_115 Float32)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Float32)
(declare-const cat_130 Float32)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float32)
(declare-const cat_137 Float32)
(declare-const cat_138 Float32)
(declare-const cat_139 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_38 cat_80)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_38 cat_81)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_33 cat_82)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_48 cat_83)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_48 cat_84)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_48 cat_85)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_48 cat_86)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_48 cat_87)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_51 cat_88)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_51 cat_89)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_51 cat_90)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_51 cat_91)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_51 cat_92)))
(assert (= cat_106 cat_93))
(assert (= cat_107 cat_94))
(assert (= cat_108 cat_95))
(assert (= cat_109 cat_96))
(assert (= cat_110 cat_97))
(assert (= cat_111 (fp.sub RNE (fp.mul RNE cat_106 cat_108) (fp.mul RNE cat_107 cat_107))))
(assert (= cat_112 cat_111))
(assert (= cat_113 cat_111))
(assert (=> (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_114 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_115 (fp #b0 #b01111111 #b00000000000000000000000))))
(assert (=> (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_116 cat_110)))
(assert (=> (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101)) (= cat_117 cat_108)))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_118 (fp.sub RNE (fp.mul RNE cat_107 cat_110) (fp.mul RNE cat_108 cat_109)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_119 (fp.sub RNE (fp.mul RNE cat_106 cat_110) (fp.mul RNE cat_107 cat_109)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_120 (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_121 cat_110))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_122 cat_108))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_112 cat_118) (= cat_123 cat_112)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_112 cat_118) (= cat_124 (fp.add RNE cat_110 cat_107))))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_112 cat_118) (= cat_125 cat_108)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_112 cat_118)) (= cat_125 cat_113)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_112 cat_118)) (= cat_124 cat_119)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_112 cat_118)) (= cat_123 cat_118)))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_122 cat_125))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_121 cat_124))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (=> (not (fp.lt cat_118 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_120 cat_123))))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_117 cat_122)))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_116 cat_121)))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_115 cat_112)))
(assert (=> (not (fp.lt cat_111 (fp #b0 #b01101011 #b00001100011011110111101))) (= cat_114 cat_120)))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_126 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_127 (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_130 cat_115))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_106 (fp.neg cat_109)) (= cat_128 cat_115)))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_106 (fp.neg cat_109)) (= cat_130 cat_115)))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.neg cat_109))) (= cat_129 (fp.neg cat_109))))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.neg cat_109))) (= cat_130 cat_106)))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.neg cat_109))) (= cat_128 cat_129)))))
(assert (=> (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000)) (=> (not (fp.lt (fp.neg cat_109) (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_127 cat_128))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (= cat_131 cat_117))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_132 (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_135 cat_115)))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_106 (fp.add RNE (fp.neg cat_109) cat_107)) (= cat_133 cat_115))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_106 (fp.add RNE (fp.neg cat_109) cat_107)) (= cat_135 cat_115))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.add RNE (fp.neg cat_109) cat_107))) (= cat_134 (fp.add RNE (fp.neg cat_109) cat_107)))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.add RNE (fp.neg cat_109) cat_107))) (= cat_135 cat_106))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_106 (fp.add RNE (fp.neg cat_109) cat_107))) (= cat_133 cat_134))))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (fp.lt cat_117 cat_116) (=> (not (fp.lt (fp.add RNE (fp.neg cat_109) cat_107) (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_132 cat_133)))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_117 cat_116)) (= cat_131 cat_116))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_117 cat_116)) (= cat_135 cat_115))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (=> (not (fp.lt cat_117 cat_116)) (= cat_132 cat_114))))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_126 cat_131)))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_130 cat_135)))
(assert (=> (not (fp.lt cat_116 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_127 cat_132)))
(assert (not (fp.lt cat_130 (fp #b0 #b01101011 #b00001100011011110111101))))
(assert (and (= cat_98 (fp.div RNE cat_127 cat_130)) (spoon_1 (fp.div RNE cat_127 cat_130))))
(assert (not (spoon_38 cat_98)))
(check-sat)
