(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32) (kitten_20 Float32)) Bool (not (fp.eq kitten_19 kitten_20)))
(define-fun spoon_16 ((kitten_21 Float32) (kitten_22 Float32)) Bool (ite (fp.lt kitten_21 kitten_22) true false))
(define-fun spoon_17 ((kitten_23 Float32) (kitten_24 Float32)) Bool (ite (fp.leq kitten_23 kitten_24) true false))
(define-fun spoon_18 ((kitten_25 Float32) (kitten_26 Float32)) Bool (ite (fp.lt kitten_26 kitten_25) true false))
(define-fun spoon_19 ((kitten_27 Float32) (kitten_28 Float32)) Bool (ite (fp.leq kitten_28 kitten_27) true false))
(define-fun spoon_20 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.eq kitten_29 kitten_30) true false))
(define-fun spoon_21 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (not (fp.eq kitten_31 kitten_32)) true false))
(declare-const cat_22 Bool)
(assert cat_22)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_23 ((kitten_33 Float64)) Bool (and (fp.isInfinite kitten_33) (fp.isPositive kitten_33)))
(define-fun spoon_24 ((kitten_34 Float64)) Bool (and (fp.isInfinite kitten_34) (fp.isNegative kitten_34)))
(define-fun spoon_25 ((kitten_35 Float64)) Bool (and (fp.isZero kitten_35) (fp.isPositive kitten_35)))
(define-fun spoon_26 ((kitten_36 Float64)) Bool (and (fp.isZero kitten_36) (fp.isNegative kitten_36)))
(declare-const cat_27 Int)
(define-fun spoon_28 ((kitten_37 Int)) Bool (and (<= (- cat_27) kitten_37) (<= kitten_37 cat_27)))
(define-fun spoon_29 ((kitten_38 Int)) Bool (and (<= (- 9007199254740992) kitten_38) (<= kitten_38 9007199254740992)))
(define-fun spoon_30 ((kitten_39 Float64) (kitten_40 Float64)) Bool (or (and (fp.isPositive kitten_39) (fp.isPositive kitten_40)) (and (fp.isNegative kitten_39) (fp.isNegative kitten_40))))
(define-fun spoon_31 ((kitten_41 Float64) (kitten_42 Float64)) Bool (or (and (fp.isPositive kitten_41) (fp.isNegative kitten_42)) (and (fp.isNegative kitten_41) (fp.isPositive kitten_42))))
(define-fun spoon_32 ((kitten_43 Float64) (kitten_44 Float64) (kitten_45 Float64)) Bool (and (=> (spoon_30 kitten_44 kitten_45) (fp.isPositive kitten_43)) (=> (spoon_31 kitten_44 kitten_45) (fp.isNegative kitten_43))))
(define-fun spoon_33 ((kitten_46 Float64) (kitten_47 Real)) Bool (or (and (fp.isPositive kitten_46) (< 0.0 kitten_47)) (and (fp.isNegative kitten_46) (< kitten_47 0.0))))
(define-fun spoon_34 ((kitten_48 Float64) (kitten_49 Float64)) Bool (not (fp.eq kitten_48 kitten_49)))
(define-fun spoon_35 ((kitten_50 Float64) (kitten_51 Float64)) Bool (ite (fp.lt kitten_50 kitten_51) true false))
(define-fun spoon_36 ((kitten_52 Float64) (kitten_53 Float64)) Bool (ite (fp.leq kitten_52 kitten_53) true false))
(define-fun spoon_37 ((kitten_54 Float64) (kitten_55 Float64)) Bool (ite (fp.lt kitten_55 kitten_54) true false))
(define-fun spoon_38 ((kitten_56 Float64) (kitten_57 Float64)) Bool (ite (fp.leq kitten_57 kitten_56) true false))
(define-fun spoon_39 ((kitten_58 Float64) (kitten_59 Float64)) Bool (ite (fp.eq kitten_58 kitten_59) true false))
(define-fun spoon_40 ((kitten_60 Float64) (kitten_61 Float64)) Bool (ite (not (fp.eq kitten_60 kitten_61)) true false))
(declare-const cat_41 Bool)
(assert cat_41)
(assert (= (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNA (to_real 1))))
(define-fun spoon_42 ((kitten_62 Bool)) Int (ite (= kitten_62 true) 1 0))
(define-fun spoon_43 ((kitten_63 Int)) Bool (ite (= kitten_63 0) false true))
(define-fun spoon_44 ((kitten_64 Int)) Bool (or (= kitten_64 0) (= kitten_64 1)))
(define-fun spoon_45 ((kitten_65 Float32) (kitten_66 Float32)) Bool (ite (fp.eq kitten_65 kitten_66) true false))
(define-fun spoon_46 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_67)))
(define-fun spoon_47 ((kitten_71 Float32)) Bool (and (spoon_1 kitten_71) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_71) (fp.leq kitten_71 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_48 ((kitten_72 Float32) (kitten_73 Float32)) Bool (ite (fp.eq kitten_72 kitten_73) true false))
(define-fun spoon_49 ((kitten_74 Float32) (kitten_75 Bool) (kitten_76 Bool) (kitten_77 Bool)) Bool (=> (or (= kitten_75 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_47 kitten_74)))
(define-fun spoon_50 ((kitten_78 Float32)) Bool (and (spoon_1 kitten_78) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_78) (fp.leq kitten_78 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_51 ((kitten_79 Float32) (kitten_80 Float32)) Bool (ite (fp.eq kitten_79 kitten_80) true false))
(define-fun spoon_52 ((kitten_81 Float32) (kitten_82 Bool) (kitten_83 Bool) (kitten_84 Bool)) Bool (=> (or (= kitten_82 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_50 kitten_81)))
(define-fun spoon_53 ((kitten_85 Float32)) Bool (and (spoon_1 kitten_85) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_85) (fp.leq kitten_85 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_54 ((kitten_86 Float32) (kitten_87 Float32)) Bool (ite (fp.eq kitten_86 kitten_87) true false))
(define-fun spoon_55 ((kitten_88 Float32)) Bool (and (spoon_1 kitten_88) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_88) (fp.leq kitten_88 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_56 ((kitten_89 Float32) (kitten_90 Float32)) Bool (ite (fp.eq kitten_89 kitten_90) true false))
(define-fun spoon_57 ((kitten_91 Float32) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_92 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_55 kitten_91)))
(define-fun spoon_58 ((kitten_95 Float32) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_53 kitten_95)))
(define-fun spoon_59 ((kitten_99 Float64) (kitten_100 Float64)) Bool (ite (fp.eq kitten_99 kitten_100) true false))
(define-fun spoon_60 ((kitten_101 Float64) (kitten_102 Float64)) Bool (ite (fp.eq kitten_101 kitten_102) true false))
(define-fun spoon_61 ((kitten_103 Float64) (kitten_104 Bool) (kitten_105 Bool) (kitten_106 Bool)) Bool (=> (or (= kitten_104 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_103)))
(define-fun spoon_62 ((kitten_107 Float64)) Bool (and (spoon_2 kitten_107) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_107) (fp.leq kitten_107 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_63 ((kitten_108 Float64) (kitten_109 Float64)) Bool (ite (fp.eq kitten_108 kitten_109) true false))
(define-fun spoon_64 ((kitten_110 Float64) (kitten_111 Bool) (kitten_112 Bool) (kitten_113 Bool)) Bool (=> (or (= kitten_111 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_62 kitten_110)))
(declare-const cat_65 Float64)
(declare-const cat_66 Int)
(declare-const cat_67 Float32)
(declare-const cat_68 Int)
(declare-const cat_69 Float32)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Float32)
(declare-const cat_74 Int)
(declare-const cat_75 Float32)
(declare-const cat_76 Int)
(declare-const cat_77 Float32)
(declare-const cat_78 Int)
(declare-const cat_79 Float32)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Float32)
(assert (= cat_73 cat_83))
(assert (= cat_75 ((_ to_fp 8 24) RNE (fp.mul RNE cat_65 cat_65))))
(assert (= cat_77 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) (fp.mul RNE (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_75) (fp.mul RNE cat_73 cat_73)))))
(assert (= cat_79 (fp.sqrt RNE cat_77)))
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float64)
(declare-const cat_87 Float64)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Float64)
(declare-const cat_99 Float64)
(declare-const cat_100 Float32)
(declare-const cat_101 Float64)
(declare-const cat_102 Float64)
(declare-const cat_103 Float64)
(declare-const cat_104 Float64)
(declare-const cat_105 Float64)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float64)
(declare-const cat_110 Float64)
(declare-const cat_111 Float64)
(declare-const cat_112 Float64)
(declare-const cat_113 Float64)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(assert (spoon_47 cat_69))
(assert (spoon_62 cat_65))
(assert (spoon_1 cat_67))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_67) (fp.leq cat_67 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_65) (fp.leq cat_65 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_47 cat_84)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_47 cat_85)))
(assert (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011100001)) cat_69))
(assert (fp.leq cat_69 (fp #b0 #b10000101 #b01100111111101011100001)))
(assert (and (= cat_88 cat_69) (spoon_1 cat_69)))
(declare-const cat_121 Float32)
(assert (and (= cat_89 cat_121) (spoon_55 cat_89)))
(assert (= cat_89 cat_73))
(assert (spoon_55 cat_73))
(assert (= ((_ to_fp 8 24) RNE (fp.mul RNE cat_65 cat_65)) cat_75))
(assert (spoon_50 cat_75))
(assert (and (= cat_90 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_75)) (spoon_1 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_75))))
(assert (= cat_91 (fp.mul RNE cat_90 (fp.mul RNE cat_73 cat_73))))
(assert (and (= cat_92 cat_91) (spoon_1 cat_91)))
(assert (= cat_93 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_92)))
(assert (and (= cat_94 cat_93) (spoon_1 cat_93)))
(assert (not (spoon_50 cat_94)))
(check-sat)
