(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Int)) Bool (or (= kitten_19 0) (= kitten_19 1)))
(define-fun spoon_16 ((kitten_20 Int)) Bool (and (<= 3 kitten_20) (<= kitten_20 30)))
(define-fun spoon_17 ((kitten_21 Float32)) Bool (and (spoon_1 kitten_21) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_21) (fp.leq kitten_21 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(assert (<= 0 cat_18))
(assert (<= 0 cat_19))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(assert (<= 0 cat_20))
(assert (< cat_20 cat_21))
(assert (<= 0 cat_22))
(declare-const cat_23 Int)
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(assert (<= 0 cat_23))
(assert (< cat_23 cat_24))
(assert (<= 0 cat_25))
(declare-const cat_26 Int)
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(assert (<= 0 cat_26))
(assert (<= 0 cat_27))
(assert (<= 0 cat_28))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(assert (<= 0 cat_29))
(assert (<= 0 cat_30))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_31))
(assert (< cat_31 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(define-fun spoon_37 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_38 ((kitten_23 Float32) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool)) Bool (=> (or (= kitten_24 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_37 kitten_23)))
(define-fun spoon_39 ((kitten_28 Float32)) Bool (and (spoon_1 kitten_28) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_28) (fp.leq kitten_28 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_40 ((kitten_29 Float32) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_30 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_39 kitten_29)))
(define-fun spoon_41 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_34) (fp.leq kitten_34 (fp #b0 #b10010011 #b00000001101101110000000)))))
(define-fun spoon_42 ((kitten_35 Float32) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_36 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_41 kitten_35)))
(define-fun spoon_43 ((kitten_40 Int)) Bool (and (<= 1 kitten_40) (<= kitten_40 30)))
(define-fun spoon_44 ((kitten_41 Int) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_42 true) (<= 1 30)) (spoon_43 kitten_41)))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Float32)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(define-fun spoon_54 ((kitten_46 Float32) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool) (kitten_50 Bool)) Bool (=> (or (= kitten_47 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_17 kitten_46)))
(define-fun spoon_55 ((kitten_51 Int) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool) (kitten_55 Bool)) Bool (=> (or (= kitten_52 true) (<= 3 30)) (spoon_16 kitten_51)))
(declare-const cat_56 Bool)
(declare-const cat_57 Int)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(declare-const cat_60 Bool)
(declare-const cat_61 Bool)
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(assert (spoon_41 cat_47))
(assert (= cat_60 cat_56))
(assert (= cat_61 (distinct 0 0)))
(assert (=> (<= 1 30) (spoon_43 cat_57)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_39 cat_58)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_37 cat_59)))
(assert (= cat_62 cat_57))
(assert (not (<= 1 1)))
(check-sat)
