(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Bool)) Int (ite (= kitten_18 true) 1 0))
(define-fun spoon_15 ((kitten_19 Int)) Bool (ite (= kitten_19 0) false true))
(define-fun spoon_16 ((kitten_20 Int)) Bool (or (= kitten_20 0) (= kitten_20 1)))
(define-fun spoon_17 ((kitten_21 Float32) (kitten_22 Bool) (kitten_23 Bool) (kitten_24 Bool)) Bool (=> (or (= kitten_22 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_21)))
(define-fun spoon_18 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_24))
(assert (< cat_24 cat_25))
(assert (<= 0 cat_26))
(define-fun spoon_27 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_28 ((kitten_27 Float32) (kitten_28 Bool) (kitten_29 Bool) (kitten_30 Bool)) Bool (=> (or (= kitten_28 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_27 kitten_27)))
(define-fun spoon_29 ((kitten_31 Float32)) Bool (and (spoon_1 kitten_31) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_31) (fp.leq kitten_31 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_30 ((kitten_32 Float32) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_29 kitten_32)))
(define-fun spoon_31 ((kitten_36 Float32)) Bool (and (spoon_1 kitten_36) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_36) (fp.leq kitten_36 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_32 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_31 kitten_37)))
(define-fun spoon_33 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_34 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_35 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_34 kitten_43)))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(define-fun spoon_39 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_47) (fp.leq kitten_47 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_40 ((kitten_48 Float32) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_39 kitten_48)))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(assert (<= 0 cat_41))
(assert (<= 0 cat_42))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_43))
(assert (< cat_43 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(assert (<= 0 cat_46))
(assert (< cat_46 cat_47))
(assert (<= 0 cat_48))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Float32)
(declare-const cat_56 Int)
(define-fun spoon_57 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) kitten_52) (fp.leq kitten_52 (fp #b0 #b01111111 #b00000000000000001010100)))))
(define-fun spoon_58 ((kitten_53 Float32) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100))) (spoon_57 kitten_53)))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(assert (= cat_55 (fp #b0 #b01101110 #b01001111100010110101100)))
(define-fun spoon_61 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_33 kitten_57)))
(define-fun spoon_62 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_18 kitten_61)))
(declare-const cat_63 Float32)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_39 cat_63)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_27 cat_64)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_27 cat_65)))
(assert (= cat_74 cat_66))
(assert (= cat_75 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_29 cat_75))
(assert (spoon_1 cat_55))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100)) (spoon_57 cat_67)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_31 cat_68)))
(assert (= cat_77 cat_69))
(assert (= cat_78 cat_70))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_77))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_78))
(assert (not (spoon_1 (fp.div RNE cat_76 (fp.mul RNE cat_77 cat_78)))))
(check-sat)
