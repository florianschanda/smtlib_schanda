(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Bool)) Int (ite (= kitten_3 true) 1 0))
(define-fun spoon_4 ((kitten_4 Int)) Bool (ite (= kitten_4 0) false true))
(define-fun spoon_5 ((kitten_5 Int)) Bool (or (= kitten_5 0) (= kitten_5 1)))
(define-fun spoon_6 ((kitten_6 Int)) Bool (and (<= 0 kitten_6) (<= kitten_6 150000)))
(define-fun spoon_7 ((kitten_7 Int) (kitten_8 Bool) (kitten_9 Bool) (kitten_10 Bool)) Bool (=> (or (= kitten_8 true) (<= 0 150000)) (spoon_6 kitten_7)))
(declare-const cat_8 Int)
(declare-const cat_9 Int)
(assert (<= 0 cat_8))
(assert (<= 0 cat_9))
(declare-const cat_10 Int)
(declare-const cat_11 Int)
(declare-const cat_12 Int)
(assert (<= 0 cat_10))
(assert (< cat_10 cat_11))
(assert (<= 0 cat_12))
(declare-const cat_13 Int)
(declare-const cat_14 Int)
(declare-const cat_15 Int)
(assert (<= 0 cat_13))
(assert (< cat_13 cat_14))
(assert (<= 0 cat_15))
(define-fun spoon_16 ((kitten_11 Int)) Bool (and (<= 3 kitten_11) (<= kitten_11 30)))
(define-fun spoon_17 ((kitten_12 Float32)) Bool (and (fp.isInfinite kitten_12) (fp.isPositive kitten_12)))
(define-fun spoon_18 ((kitten_13 Float32)) Bool (and (fp.isInfinite kitten_13) (fp.isNegative kitten_13)))
(define-fun spoon_19 ((kitten_14 Float32)) Bool (and (fp.isZero kitten_14) (fp.isPositive kitten_14)))
(define-fun spoon_20 ((kitten_15 Float32)) Bool (and (fp.isZero kitten_15) (fp.isNegative kitten_15)))
(declare-const cat_21 Int)
(define-fun spoon_22 ((kitten_16 Int)) Bool (and (<= (- cat_21) kitten_16) (<= kitten_16 cat_21)))
(define-fun spoon_23 ((kitten_17 Int)) Bool (and (<= (- 16777216) kitten_17) (<= kitten_17 16777216)))
(define-fun spoon_24 ((kitten_18 Float32) (kitten_19 Float32)) Bool (or (and (fp.isPositive kitten_18) (fp.isPositive kitten_19)) (and (fp.isNegative kitten_18) (fp.isNegative kitten_19))))
(define-fun spoon_25 ((kitten_20 Float32) (kitten_21 Float32)) Bool (or (and (fp.isPositive kitten_20) (fp.isNegative kitten_21)) (and (fp.isNegative kitten_20) (fp.isPositive kitten_21))))
(define-fun spoon_26 ((kitten_22 Float32) (kitten_23 Float32) (kitten_24 Float32)) Bool (and (=> (spoon_24 kitten_23 kitten_24) (fp.isPositive kitten_22)) (=> (spoon_25 kitten_23 kitten_24) (fp.isNegative kitten_22))))
(define-fun spoon_27 ((kitten_25 Real)) Real (* kitten_25 kitten_25))
(define-fun spoon_28 ((kitten_26 Float32) (kitten_27 Real)) Bool (or (and (fp.isPositive kitten_26) (< 0.0 kitten_27)) (and (fp.isNegative kitten_26) (< kitten_27 0.0))))
(define-fun spoon_29 ((kitten_28 Float32)) Bool (and (spoon_1 kitten_28) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_28) (fp.leq kitten_28 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (< cat_35 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(assert (<= 0 cat_38))
(assert (<= 0 cat_39))
(assert (<= 0 cat_40))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(assert (<= 0 cat_41))
(assert (<= 0 cat_42))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_43))
(assert (< cat_43 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(assert (<= 0 cat_46))
(assert (< cat_46 cat_47))
(assert (<= 0 cat_48))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(assert (<= 0 cat_54))
(assert (< cat_54 cat_55))
(assert (<= 0 cat_56))
(define-fun spoon_57 ((kitten_29 Int)) Bool (and (<= 1 kitten_29) (<= kitten_29 32)))
(define-fun spoon_58 ((kitten_30 Int) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_31 true) (<= 1 32)) (spoon_57 kitten_30)))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (<= 0 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(assert (<= 0 cat_62))
(assert (<= 0 cat_63))
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(assert (<= 0 cat_64))
(assert (< cat_64 cat_65))
(assert (<= 0 cat_66))
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(assert (<= 0 cat_67))
(assert (< cat_67 cat_68))
(assert (<= 0 cat_69))
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(define-fun spoon_77 ((kitten_34 Float32) (kitten_35 Bool) (kitten_36 Bool) (kitten_37 Bool)) Bool (=> (or (= kitten_35 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_34)))
(define-fun spoon_78 ((kitten_38 Int) (kitten_39 Bool) (kitten_40 Bool) (kitten_41 Bool)) Bool (=> (or (= kitten_39 true) (<= 3 30)) (spoon_16 kitten_38)))
(assert (spoon_6 cat_70))
(assert (spoon_57 cat_74))
(assert (<= 1 cat_74))
(assert (not (<= 1 1)))
(check-sat)
