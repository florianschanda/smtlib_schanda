(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isInfinite kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isNegative kitten_6)))
(define-fun spoon_7 ((kitten_7 Float32)) Bool (and (fp.isZero kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_8 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isNegative kitten_8)))
(declare-const cat_9 Int)
(define-fun spoon_10 ((kitten_9 Int)) Bool (and (<= (- cat_9) kitten_9) (<= kitten_9 cat_9)))
(define-fun spoon_11 ((kitten_10 Int)) Bool (and (<= (- 16777216) kitten_10) (<= kitten_10 16777216)))
(define-fun spoon_12 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isPositive kitten_12)) (and (fp.isNegative kitten_11) (fp.isNegative kitten_12))))
(define-fun spoon_13 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isNegative kitten_14)) (and (fp.isNegative kitten_13) (fp.isPositive kitten_14))))
(define-fun spoon_14 ((kitten_15 Float32) (kitten_16 Float32) (kitten_17 Float32)) Bool (and (=> (spoon_12 kitten_16 kitten_17) (fp.isPositive kitten_15)) (=> (spoon_13 kitten_16 kitten_17) (fp.isNegative kitten_15))))
(define-fun spoon_15 ((kitten_18 Real)) Real (* kitten_18 kitten_18))
(define-fun spoon_16 ((kitten_19 Float32) (kitten_20 Real)) Bool (or (and (fp.isPositive kitten_19) (< 0.0 kitten_20)) (and (fp.isNegative kitten_19) (< kitten_20 0.0))))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isInfinite kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isInfinite kitten_22) (fp.isNegative kitten_22)))
(define-fun spoon_19 ((kitten_23 Float64)) Bool (and (fp.isZero kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_20 ((kitten_24 Float64)) Bool (and (fp.isZero kitten_24) (fp.isNegative kitten_24)))
(declare-const cat_21 Int)
(define-fun spoon_22 ((kitten_25 Int)) Bool (and (<= (- cat_21) kitten_25) (<= kitten_25 cat_21)))
(define-fun spoon_23 ((kitten_26 Int)) Bool (and (<= (- 9007199254740992) kitten_26) (<= kitten_26 9007199254740992)))
(define-fun spoon_24 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isPositive kitten_28)) (and (fp.isNegative kitten_27) (fp.isNegative kitten_28))))
(define-fun spoon_25 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isNegative kitten_30)) (and (fp.isNegative kitten_29) (fp.isPositive kitten_30))))
(define-fun spoon_26 ((kitten_31 Float64) (kitten_32 Float64) (kitten_33 Float64)) Bool (and (=> (spoon_24 kitten_32 kitten_33) (fp.isPositive kitten_31)) (=> (spoon_25 kitten_32 kitten_33) (fp.isNegative kitten_31))))
(define-fun spoon_27 ((kitten_34 Float64) (kitten_35 Real)) Bool (or (and (fp.isPositive kitten_34) (< 0.0 kitten_35)) (and (fp.isNegative kitten_34) (< kitten_35 0.0))))
(define-fun spoon_28 ((kitten_36 Bool)) Int (ite (= kitten_36 true) 1 0))
(define-fun spoon_29 ((kitten_37 Int)) Bool (ite (= kitten_37 0) false true))
(define-fun spoon_30 ((kitten_38 Int)) Bool (or (= kitten_38 0) (= kitten_38 1)))
(define-fun spoon_31 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_39)))
(define-fun spoon_32 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (< cat_35 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(assert (<= 0 cat_38))
(assert (< cat_38 cat_39))
(assert (<= 0 cat_40))
(declare-const cat_41 Int)
(define-fun spoon_42 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_44) (fp.leq kitten_44 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_43 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_42 kitten_45)))
(define-fun spoon_44 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_45))
(assert (<= 0 cat_46))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-const cat_53 Int)
(define-fun spoon_54 ((kitten_50 Float32)) Bool (and (spoon_1 kitten_50) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_50) (fp.leq kitten_50 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_55 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_51) (fp.leq kitten_51 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_56 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_52) (fp.leq kitten_52 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_57 ((kitten_53 Float32) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_56 kitten_53)))
(define-fun spoon_58 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_54 kitten_57)))
(define-fun spoon_59 ((kitten_61 Float32)) Bool (and (spoon_1 kitten_61) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_61) (fp.leq kitten_61 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_60 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_59 kitten_62)))
(define-fun spoon_61 ((kitten_66 Float32) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool)) Bool (=> (or (= kitten_67 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_55 kitten_66)))
(define-fun spoon_62 ((kitten_70 Float64)) Bool (and (spoon_3 kitten_70) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_70) (fp.leq kitten_70 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_63 ((kitten_71 Float64) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_72 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_62 kitten_71)))
(define-fun spoon_64 ((kitten_75 Float64)) Bool (and (spoon_3 kitten_75) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_75) (fp.leq kitten_75 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_65 ((kitten_76 Float64) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_64 kitten_76)))
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Float64)
(declare-const cat_69 Int)
(declare-const cat_70 Float64)
(declare-const cat_71 Int)
(declare-const cat_72 Float32)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(define-fun spoon_86 ((kitten_80 Float32)) Bool (and (spoon_1 kitten_80) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_80) (fp.leq kitten_80 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_87 ((kitten_81 Float32) (kitten_82 Bool) (kitten_83 Bool) (kitten_84 Bool)) Bool (=> (or (= kitten_82 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_44 kitten_81)))
(define-fun spoon_88 ((kitten_85 Float32) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (=> (or (= kitten_86 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_86 kitten_85)))
(define-fun spoon_89 ((kitten_89 Float32) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool)) Bool (=> (or (= kitten_90 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_32 kitten_89)))
(declare-const cat_90 Bool)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Float32)
(declare-const cat_99 Float32)
(declare-const cat_100 Bool)
(declare-const cat_101 Float32)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float32)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Float32)
(declare-const cat_115 Float32)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Float32)
(declare-const cat_130 Float32)
(declare-const cat_131 Bool)
(declare-const cat_132 Bool)
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float32)
(declare-const cat_137 Bool)
(declare-const cat_138 Bool)
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float32)
(declare-const cat_152 Float32)
(declare-const cat_153 Bool)
(declare-const cat_154 Bool)
(declare-const cat_155 Bool)
(declare-const cat_156 Float32)
(declare-const cat_157 Float32)
(declare-const cat_158 Float32)
(declare-const cat_159 Float32)
(declare-const cat_160 Bool)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 Float32)
(declare-const cat_164 Float32)
(declare-const cat_165 Bool)
(declare-const cat_166 Float32)
(declare-const cat_167 Float32)
(declare-const cat_168 Bool)
(declare-const cat_169 Bool)
(declare-const cat_170 Float32)
(assert (spoon_64 cat_68))
(assert (spoon_62 cat_70))
(assert (spoon_1 cat_72))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_72) (fp.leq cat_72 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_68) (fp.leq cat_68 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (= cat_146 cat_91))
(assert (= cat_147 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_147))
(assert (= cat_148 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_148))
(assert (= cat_149 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_149))
(assert (= cat_150 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_150))
(assert (= cat_151 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_151))
(assert (= cat_152 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_56 cat_152))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_42 cat_97)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_98)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_99)))
(assert (= cat_153 (spoon_29 1)))
(assert (= cat_154 (ite (not (= cat_100 true)) true false)))
(assert (= cat_154 true))
(assert (=> (= cat_155 true) (=> (spoon_86 cat_72) (and (= cat_105 (fp.mul RNE cat_72 cat_72)) (spoon_1 (fp.mul RNE cat_72 cat_72))))))
(assert (=> (= cat_155 true) (=> (spoon_86 cat_72) (= cat_159 cat_105))))
(assert (=> (= cat_155 true) (=> (spoon_86 cat_72) (= cat_160 cat_155))))
(assert (=> (= cat_155 true) (=> (not (spoon_86 cat_72)) (= cat_160 (spoon_29 0)))))
(assert (=> (= cat_155 true) (=> (not (spoon_86 cat_72)) (= cat_159 cat_151))))
(assert (=> (= cat_155 true) (= cat_161 ((_ to_fp 8 24) RNE (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE cat_68 cat_68))))))
(assert (=> (= cat_155 true) (and (= cat_106 cat_161) (spoon_1 cat_161))))
(declare-const cat_171 Float32)
(assert (=> (= cat_155 true) (and (= cat_107 cat_171) (spoon_59 cat_107))))
(assert (=> (= cat_155 true) (= cat_162 cat_107)))
(assert (=> (not (= cat_155 true)) (= cat_156 cat_152)))
(assert (=> (not (= cat_155 true)) (= cat_159 cat_151)))
(assert (=> (not (= cat_155 true)) (= cat_161 cat_148)))
(assert (=> (not (= cat_155 true)) (= cat_162 cat_147)))
(assert (=> (not (= cat_155 true)) (= cat_160 cat_155)))
(assert (= cat_160 true))
(assert (and (= cat_108 (fp.sub RNE cat_161 cat_159)) (spoon_1 (fp.sub RNE cat_161 cat_159))))
(assert (= cat_109 (fp.add RNE cat_108 (fp.mul RNE cat_156 cat_156))))
(assert (and (= cat_110 cat_109) (spoon_1 cat_109)))
(assert (= cat_163 cat_110))
(assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_163))
(assert (not (spoon_54 cat_163)))
(check-sat)
