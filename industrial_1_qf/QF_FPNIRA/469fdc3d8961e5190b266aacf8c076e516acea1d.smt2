(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Float32)) Bool (and (spoon_1 kitten_32) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_32) (fp.leq kitten_32 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_23 ((kitten_33 Float32) (kitten_34 Float32)) Bool (ite (fp.eq kitten_33 kitten_34) true false))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(assert (<= 0 cat_24))
(assert (<= 0 cat_25))
(declare-const cat_26 Int)
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(assert (<= 0 cat_26))
(assert (< cat_26 cat_27))
(assert (<= 0 cat_28))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (< cat_29 cat_30))
(assert (<= 0 cat_31))
(define-fun spoon_32 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_35) (fp.leq kitten_35 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_33 ((kitten_36 Float32) (kitten_37 Float32)) Bool (ite (fp.eq kitten_36 kitten_37) true false))
(define-fun spoon_34 ((kitten_38 Float32) (kitten_39 Bool) (kitten_40 Bool) (kitten_41 Bool)) Bool (=> (or (= kitten_39 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_32 kitten_38)))
(define-fun spoon_35 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_36 ((kitten_43 Float32) (kitten_44 Float32)) Bool (ite (fp.eq kitten_43 kitten_44) true false))
(define-fun spoon_37 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_35 kitten_45)))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(define-fun spoon_43 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_49) (fp.leq kitten_49 (fp #b0 #b10001000 #b01101000000000000000000)))))
(define-fun spoon_44 ((kitten_50 Float32) (kitten_51 Float32)) Bool (ite (fp.eq kitten_50 kitten_51) true false))
(define-fun spoon_45 ((kitten_52 Float32) (kitten_53 Bool) (kitten_54 Bool) (kitten_55 Bool)) Bool (=> (or (= kitten_53 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b01101000000000000000000))) (spoon_43 kitten_52)))
(define-fun spoon_46 ((kitten_56 Float32)) Bool (and (spoon_1 kitten_56) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_56) (fp.leq kitten_56 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_47 ((kitten_57 Float32) (kitten_58 Float32)) Bool (ite (fp.eq kitten_57 kitten_58) true false))
(define-fun spoon_48 ((kitten_59 Float32) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool)) Bool (=> (or (= kitten_60 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_46 kitten_59)))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(define-fun spoon_53 ((kitten_63 Float32) (kitten_64 Bool) (kitten_65 Bool) (kitten_66 Bool)) Bool (=> (or (= kitten_64 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_22 kitten_63)))
(declare-const cat_54 Float32)
(declare-const cat_55 Float32)
(declare-const cat_56 Float32)
(declare-const cat_57 Float32)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(declare-const cat_60 Float32)
(declare-const cat_61 Float32)
(declare-const cat_62 Float32)
(declare-const cat_63 Float32)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000)) (spoon_35 cat_54)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_32 cat_55)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b01101000000000000000000)) (spoon_43 cat_56)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_46 cat_57)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_32 cat_58)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_32 cat_59)))
(assert (= cat_68 cat_58))
(assert (= cat_69 cat_60))
(assert (= cat_70 cat_59))
(assert (= cat_71 cat_61))
(assert (= cat_72 cat_57))
(assert (= cat_73 (fp.sub RNE cat_71 cat_69)))
(assert (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_73))
(assert (not (spoon_35 (fp.sub RNE cat_73 (fp #b0 #b10000111 #b01101000000000000000000)))))
(check-sat)
