(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Bool)) Int (ite (= kitten_19 true) 1 0))
(define-fun spoon_16 ((kitten_20 Int)) Bool (ite (= kitten_20 0) false true))
(define-fun spoon_17 ((kitten_21 Int)) Bool (or (= kitten_21 0) (= kitten_21 1)))
(define-fun spoon_18 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_24))
(assert (< cat_24 cat_25))
(assert (<= 0 cat_26))
(define-fun spoon_27 ((kitten_23 Int)) Bool (and (<= 1 kitten_23) (<= kitten_23 30)))
(define-fun spoon_28 ((kitten_24 Int) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool)) Bool (=> (or (= kitten_25 true) (<= 1 30)) (spoon_27 kitten_24)))
(define-fun spoon_29 ((kitten_28 Int)) Bool (and (<= 3 kitten_28) (<= kitten_28 30)))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(assert (<= 0 cat_32))
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (< cat_35 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(assert (<= 0 cat_38))
(assert (< cat_38 cat_39))
(assert (<= 0 cat_40))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(define-fun spoon_43 ((kitten_29 Int)) Bool (and (<= 0 kitten_29) (<= kitten_29 2)))
(define-fun spoon_44 ((kitten_30 Int) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_31 true) (<= 0 2)) (spoon_43 kitten_30)))
(define-fun spoon_45 ((kitten_34 Int)) Bool (and (<= (- 30) kitten_34) (<= kitten_34 30)))
(define-fun spoon_46 ((kitten_35 Int) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_36 true) (<= (- 30) 30)) (spoon_45 kitten_35)))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(define-fun spoon_54 ((kitten_39 Int)) Bool (and (<= (- 128) kitten_39) (<= kitten_39 127)))
(define-fun spoon_55 ((kitten_40 Int) (kitten_41 Int) (kitten_42 Int)) Bool (and (<= kitten_40 kitten_42) (<= kitten_42 kitten_41)))
(declare-const cat_56 Int)
(define-fun spoon_57 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_18 kitten_43)))
(define-fun spoon_58 ((kitten_47 Int) (kitten_48 Bool) (kitten_49 Bool) (kitten_50 Bool)) Bool (=> (or (= kitten_48 true) (<= 3 30)) (spoon_29 kitten_47)))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Bool)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Bool)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Bool)
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(declare-const cat_86 Bool)
(declare-const cat_87 Int)
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(declare-const cat_90 Int)
(declare-const cat_91 Int)
(declare-const cat_92 Bool)
(declare-const cat_93 Int)
(declare-const cat_94 Bool)
(declare-const cat_95 Int)
(assert (= cat_74 cat_59))
(assert (= cat_75 0))
(assert (spoon_45 cat_75))
(assert (=> (<= 1 30) (spoon_27 cat_60)))
(assert (= cat_76 cat_60))
(assert (=> (= cat_78 true) (and (= cat_62 (- cat_77 1)) (spoon_27 (- cat_77 1)))))
(assert (=> (= cat_78 true) (= cat_79 cat_77)))
(assert (=> (= cat_78 true) (= cat_80 cat_62)))
(assert (=> (not (= cat_78 true)) (= cat_80 cat_77)))
(assert (= cat_80 cat_52))
(assert (spoon_27 cat_52))
(assert (= cat_81 cat_61))
(assert (= cat_82 1))
(assert (<= 1 cat_82))
(assert (<= cat_82 cat_52))
(assert (and (<= (- cat_90) cat_89) (<= cat_89 cat_90)))
(assert (and (and (=> (<= 1 cat_52) (spoon_55 1 cat_52 cat_90)) (=> (<= (- 30) 30) (spoon_45 cat_89))) (and (<= 1 cat_90) (<= cat_90 cat_52))))
(assert (not (= cat_90 cat_52)))
(assert (= cat_91 (+ cat_90 1)))
(assert (not (<= cat_93 cat_91)))
(check-sat)
