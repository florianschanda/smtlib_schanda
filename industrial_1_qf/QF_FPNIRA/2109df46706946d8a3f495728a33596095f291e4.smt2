(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Bool)) Int (ite (= kitten_18 true) 1 0))
(define-fun spoon_15 ((kitten_19 Int)) Bool (ite (= kitten_19 0) false true))
(define-fun spoon_16 ((kitten_20 Int)) Bool (or (= kitten_20 0) (= kitten_20 1)))
(define-fun spoon_17 ((kitten_21 Float32)) Bool (and (spoon_1 kitten_21) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_21) (fp.leq kitten_21 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(assert (<= 0 cat_18))
(assert (<= 0 cat_19))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(assert (<= 0 cat_20))
(assert (< cat_20 cat_21))
(assert (<= 0 cat_22))
(declare-const cat_23 Int)
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(assert (<= 0 cat_23))
(assert (< cat_23 cat_24))
(assert (<= 0 cat_25))
(define-fun spoon_26 ((kitten_22 Int)) Bool (and (<= 1 kitten_22) (<= kitten_22 30)))
(define-fun spoon_27 ((kitten_23 Int) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool)) Bool (=> (or (= kitten_24 true) (<= 1 30)) (spoon_26 kitten_23)))
(define-fun spoon_28 ((kitten_27 Int)) Bool (and (<= 3 kitten_27) (<= kitten_27 30)))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (< cat_37 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(define-fun spoon_42 ((kitten_28 Int)) Bool (and (<= 0 kitten_28) (<= kitten_28 2)))
(define-fun spoon_43 ((kitten_29 Int) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool)) Bool (=> (or (= kitten_30 true) (<= 0 2)) (spoon_42 kitten_29)))
(define-fun spoon_44 ((kitten_33 Int)) Bool (and (<= (- 30) kitten_33) (<= kitten_33 30)))
(define-fun spoon_45 ((kitten_34 Int) (kitten_35 Bool) (kitten_36 Bool) (kitten_37 Bool)) Bool (=> (or (= kitten_35 true) (<= (- 30) 30)) (spoon_44 kitten_34)))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(define-fun spoon_53 ((kitten_38 Int)) Bool (and (<= (- 128) kitten_38) (<= kitten_38 127)))
(define-fun spoon_54 ((kitten_39 Int) (kitten_40 Int) (kitten_41 Int)) Bool (and (<= kitten_39 kitten_41) (<= kitten_41 kitten_40)))
(declare-const cat_55 Int)
(define-fun spoon_56 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_17 kitten_42)))
(define-fun spoon_57 ((kitten_46 Int) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool)) Bool (=> (or (= kitten_47 true) (<= 3 30)) (spoon_28 kitten_46)))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Bool)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Bool)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Bool)
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(declare-const cat_85 Bool)
(declare-const cat_86 Int)
(declare-const cat_87 Int)
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(declare-const cat_90 Int)
(declare-const cat_91 Bool)
(declare-const cat_92 Int)
(declare-const cat_93 Bool)
(declare-const cat_94 Int)
(assert (= cat_73 cat_58))
(assert (= cat_74 0))
(assert (spoon_44 cat_74))
(assert (=> (<= 1 30) (spoon_26 cat_59)))
(assert (= cat_75 cat_59))
(assert (=> (= cat_77 true) (and (= cat_61 (- cat_76 1)) (spoon_26 (- cat_76 1)))))
(assert (=> (= cat_77 true) (= cat_78 cat_76)))
(assert (=> (= cat_77 true) (= cat_79 cat_61)))
(assert (=> (not (= cat_77 true)) (= cat_79 cat_76)))
(assert (= cat_79 cat_51))
(assert (spoon_26 cat_51))
(assert (= cat_80 cat_60))
(assert (= cat_81 1))
(assert (<= 1 cat_81))
(assert (<= cat_81 cat_51))
(assert (and (<= (- cat_89) cat_88) (<= cat_88 cat_89)))
(assert (and (and (=> (<= 1 cat_51) (spoon_54 1 cat_51 cat_89)) (=> (<= (- 30) 30) (spoon_44 cat_88))) (and (<= 1 cat_89) (<= cat_89 cat_51))))
(assert (not (= cat_89 cat_51)))
(assert (= cat_90 (+ cat_89 1)))
(assert (not (<= cat_92 cat_90)))
(check-sat)
