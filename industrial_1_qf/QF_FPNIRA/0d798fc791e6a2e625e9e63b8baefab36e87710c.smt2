(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Bool)) Int (ite (= kitten_32 true) 1 0))
(define-fun spoon_23 ((kitten_33 Int)) Bool (ite (= kitten_33 0) false true))
(define-fun spoon_24 ((kitten_34 Int)) Bool (or (= kitten_34 0) (= kitten_34 1)))
(define-fun spoon_25 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_35) (fp.leq kitten_35 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_26 ((kitten_36 Float32) (kitten_37 Float32)) Bool (ite (fp.eq kitten_36 kitten_37) true false))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(assert (<= 0 cat_27))
(assert (<= 0 cat_28))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (< cat_29 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(define-fun spoon_35 ((kitten_38 Float32)) Bool (and (spoon_1 kitten_38) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_38) (fp.leq kitten_38 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_36 ((kitten_39 Float32) (kitten_40 Float32)) Bool (ite (fp.eq kitten_39 kitten_40) true false))
(define-fun spoon_37 ((kitten_41 Float32) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool)) Bool (=> (or (= kitten_42 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_35 kitten_41)))
(define-fun spoon_38 ((kitten_45 Float32)) Bool (and (spoon_1 kitten_45) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_45) (fp.leq kitten_45 (fp #b0 #b10001001 #b01110111000000000000000)))))
(define-fun spoon_39 ((kitten_46 Float32) (kitten_47 Float32)) Bool (ite (fp.eq kitten_46 kitten_47) true false))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(assert (<= 0 cat_42))
(assert (< cat_42 cat_43))
(assert (<= 0 cat_44))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(define-fun spoon_48 ((kitten_48 Int)) Bool (and (<= 1 kitten_48) (<= kitten_48 100)))
(define-fun spoon_49 ((kitten_49 Int)) Bool (and (<= 3 kitten_49) (<= kitten_49 100)))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (<= 0 cat_51))
(assert (<= 0 cat_52))
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(assert (<= 0 cat_53))
(assert (<= 0 cat_54))
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(assert (<= 0 cat_55))
(assert (< cat_55 cat_56))
(assert (<= 0 cat_57))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(assert (<= 0 cat_58))
(assert (< cat_58 cat_59))
(assert (<= 0 cat_60))
(define-fun spoon_61 ((kitten_50 Float32)) Bool (and (spoon_1 kitten_50) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_50) (fp.leq kitten_50 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_62 ((kitten_51 Float32) (kitten_52 Float32)) Bool (ite (fp.eq kitten_51 kitten_52) true false))
(define-fun spoon_63 ((kitten_53 Float32) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_61 kitten_53)))
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(define-fun spoon_72 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_57)))
(define-fun spoon_73 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001001 #b01110111000000000000000))) (spoon_38 kitten_61)))
(define-fun spoon_74 ((kitten_65 Int) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool)) Bool (=> (or (= kitten_66 true) (<= 1 100)) (spoon_48 kitten_65)))
(define-fun spoon_75 ((kitten_69 Int) (kitten_70 Bool) (kitten_71 Bool) (kitten_72 Bool)) Bool (=> (or (= kitten_70 true) (<= 3 100)) (spoon_49 kitten_69)))
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Int)
(declare-const cat_80 Float32)
(declare-const cat_81 Bool)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Int)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_35 cat_76)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_35 cat_77)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_61 cat_78)))
(assert (not (= cat_81 true)))
(assert (= cat_82 cat_76))
(assert (= cat_83 (fp #b0 #b10001100 #b01101010100000000000000)))
(assert (= cat_84 cat_79))
(assert (= cat_85 1))
(assert (<= 1 cat_85))
(assert (and (spoon_61 cat_91) (spoon_35 cat_90)))
(assert (not false))
(check-sat)
