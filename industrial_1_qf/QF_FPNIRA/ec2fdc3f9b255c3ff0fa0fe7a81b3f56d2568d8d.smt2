(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isInfinite kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isNegative kitten_6)))
(define-fun spoon_7 ((kitten_7 Float32)) Bool (and (fp.isZero kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_8 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isNegative kitten_8)))
(declare-const cat_9 Int)
(define-fun spoon_10 ((kitten_9 Int)) Bool (and (<= (- cat_9) kitten_9) (<= kitten_9 cat_9)))
(define-fun spoon_11 ((kitten_10 Int)) Bool (and (<= (- 16777216) kitten_10) (<= kitten_10 16777216)))
(define-fun spoon_12 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isPositive kitten_12)) (and (fp.isNegative kitten_11) (fp.isNegative kitten_12))))
(define-fun spoon_13 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isNegative kitten_14)) (and (fp.isNegative kitten_13) (fp.isPositive kitten_14))))
(define-fun spoon_14 ((kitten_15 Float32) (kitten_16 Float32) (kitten_17 Float32)) Bool (and (=> (spoon_12 kitten_16 kitten_17) (fp.isPositive kitten_15)) (=> (spoon_13 kitten_16 kitten_17) (fp.isNegative kitten_15))))
(define-fun spoon_15 ((kitten_18 Real)) Real (* kitten_18 kitten_18))
(define-fun spoon_16 ((kitten_19 Float32) (kitten_20 Real)) Bool (or (and (fp.isPositive kitten_19) (< 0.0 kitten_20)) (and (fp.isNegative kitten_19) (< kitten_20 0.0))))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isInfinite kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isInfinite kitten_22) (fp.isNegative kitten_22)))
(define-fun spoon_19 ((kitten_23 Float64)) Bool (and (fp.isZero kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_20 ((kitten_24 Float64)) Bool (and (fp.isZero kitten_24) (fp.isNegative kitten_24)))
(declare-const cat_21 Int)
(define-fun spoon_22 ((kitten_25 Int)) Bool (and (<= (- cat_21) kitten_25) (<= kitten_25 cat_21)))
(define-fun spoon_23 ((kitten_26 Int)) Bool (and (<= (- 9007199254740992) kitten_26) (<= kitten_26 9007199254740992)))
(define-fun spoon_24 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isPositive kitten_28)) (and (fp.isNegative kitten_27) (fp.isNegative kitten_28))))
(define-fun spoon_25 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isNegative kitten_30)) (and (fp.isNegative kitten_29) (fp.isPositive kitten_30))))
(define-fun spoon_26 ((kitten_31 Float64) (kitten_32 Float64) (kitten_33 Float64)) Bool (and (=> (spoon_24 kitten_32 kitten_33) (fp.isPositive kitten_31)) (=> (spoon_25 kitten_32 kitten_33) (fp.isNegative kitten_31))))
(define-fun spoon_27 ((kitten_34 Float64) (kitten_35 Real)) Bool (or (and (fp.isPositive kitten_34) (< 0.0 kitten_35)) (and (fp.isNegative kitten_34) (< kitten_35 0.0))))
(define-fun spoon_28 ((kitten_36 Bool)) Int (ite (= kitten_36 true) 1 0))
(define-fun spoon_29 ((kitten_37 Int)) Bool (ite (= kitten_37 0) false true))
(define-fun spoon_30 ((kitten_38 Int)) Bool (or (= kitten_38 0) (= kitten_38 1)))
(define-fun spoon_31 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_39) (fp.leq kitten_39 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_32 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_40)))
(define-fun spoon_33 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_44) (fp.leq kitten_44 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_34 ((kitten_45 Float32)) Bool (and (spoon_1 kitten_45) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_45) (fp.leq kitten_45 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_35 ((kitten_46 Float32) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool)) Bool (=> (or (= kitten_47 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_34 kitten_46)))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(assert (<= 0 cat_38))
(assert (< cat_38 cat_39))
(assert (<= 0 cat_40))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(define-fun spoon_45 ((kitten_50 Float32)) Bool (and (spoon_1 kitten_50) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_50) (fp.leq kitten_50 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_46 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_51) (fp.leq kitten_51 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_47 ((kitten_52 Float32) (kitten_53 Bool) (kitten_54 Bool) (kitten_55 Bool)) Bool (=> (or (= kitten_53 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_46 kitten_52)))
(define-fun spoon_48 ((kitten_56 Float32)) Bool (and (spoon_1 kitten_56) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_56) (fp.leq kitten_56 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_49 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_48 kitten_57)))
(define-fun spoon_50 ((kitten_61 Float32)) Bool (and (spoon_1 kitten_61) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_61) (fp.leq kitten_61 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_51 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_50 kitten_62)))
(define-fun spoon_52 ((kitten_66 Float32)) Bool (and (spoon_1 kitten_66) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_66) (fp.leq kitten_66 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_53 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_52 kitten_67)))
(define-fun spoon_54 ((kitten_71 Float32) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_72 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_45 kitten_71)))
(define-fun spoon_55 ((kitten_75 Float64) (kitten_76 Bool) (kitten_77 Bool) (kitten_78 Bool)) Bool (=> (or (= kitten_76 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_75)))
(define-fun spoon_56 ((kitten_79 Float64)) Bool (and (spoon_3 kitten_79) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_79) (fp.leq kitten_79 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_57 ((kitten_80 Float64) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (=> (or (= kitten_81 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_56 kitten_80)))
(define-fun spoon_58 ((kitten_84 Float32) (kitten_85 Bool) (kitten_86 Bool) (kitten_87 Bool)) Bool (=> (or (= kitten_85 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_33 kitten_84)))
(define-fun spoon_59 ((kitten_88 Float64)) Bool (and (spoon_3 kitten_88) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_88) (fp.leq kitten_88 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(define-fun spoon_60 ((kitten_89 Float64) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool)) Bool (=> (or (= kitten_90 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_59 kitten_89)))
(define-fun spoon_61 ((kitten_93 Float64)) Bool (and (spoon_3 kitten_93) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_93) (fp.leq kitten_93 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_62 ((kitten_94 Float64) (kitten_95 Bool) (kitten_96 Bool) (kitten_97 Bool)) Bool (=> (or (= kitten_95 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_61 kitten_94)))
(declare-const cat_63 Float32)
(declare-const cat_64 Int)
(declare-const cat_65 Float32)
(declare-const cat_66 Int)
(declare-const cat_67 Float64)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(declare-const cat_86 Bool)
(declare-const cat_87 Float64)
(declare-const cat_88 Float64)
(declare-const cat_89 Float64)
(declare-const cat_90 Float64)
(declare-const cat_91 Float64)
(declare-const cat_92 Float64)
(declare-const cat_93 Float64)
(declare-const cat_94 Float64)
(declare-const cat_95 Float64)
(declare-const cat_96 Float64)
(declare-const cat_97 Float64)
(declare-const cat_98 Float32)
(declare-const cat_99 Float64)
(declare-const cat_100 Float64)
(declare-const cat_101 Float64)
(declare-const cat_102 Float64)
(declare-const cat_103 Float64)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float64)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float64)
(declare-const cat_110 Float64)
(declare-const cat_111 Float64)
(declare-const cat_112 Float64)
(declare-const cat_113 Float64)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float64)
(declare-const cat_120 Float64)
(declare-const cat_121 Float64)
(declare-const cat_122 Float64)
(declare-const cat_123 Float64)
(declare-const cat_124 Float64)
(declare-const cat_125 Float64)
(declare-const cat_126 Float64)
(declare-const cat_127 Float64)
(declare-const cat_128 Float64)
(declare-const cat_129 Float64)
(declare-const cat_130 Float64)
(declare-const cat_131 Float64)
(declare-const cat_132 Float64)
(declare-const cat_133 Float64)
(declare-const cat_134 Float64)
(declare-const cat_135 Float64)
(declare-const cat_136 Float64)
(declare-const cat_137 Float64)
(declare-const cat_138 Bool)
(declare-const cat_139 Bool)
(declare-const cat_140 Float64)
(declare-const cat_141 Float64)
(declare-const cat_142 Bool)
(declare-const cat_143 Bool)
(declare-const cat_144 Float64)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Bool)
(declare-const cat_150 Float64)
(declare-const cat_151 Float64)
(declare-const cat_152 Float64)
(declare-const cat_153 Float64)
(declare-const cat_154 Float64)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float64)
(declare-const cat_160 Float64)
(declare-const cat_161 Float64)
(declare-const cat_162 Float64)
(declare-const cat_163 Float64)
(declare-const cat_164 Float64)
(declare-const cat_165 Bool)
(declare-const cat_166 Bool)
(assert (spoon_31 cat_63))
(assert (spoon_31 cat_65))
(assert (spoon_56 cat_67))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_87)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_88)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_89)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_90)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_91)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_61 cat_92)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_61 cat_93)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_61 cat_94)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_95)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_96)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_59 cat_97)))
(assert (= cat_147 cat_98))
(assert (= cat_148 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_34 cat_148))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_99)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_100)))
(assert (= cat_149 (spoon_29 1)))
(assert (= cat_150 (fp.mul RNE cat_67 cat_67)))
(assert (and (= cat_101 ((_ to_fp 11 53) RNE (fp.mul RNE cat_63 cat_63))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_63 cat_63)))))
(assert (= cat_151 cat_101))
(assert (and (= cat_102 ((_ to_fp 11 53) RNE (fp.mul RNE cat_65 cat_65))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_65 cat_65)))))
(assert (= cat_152 cat_102))
(assert (= cat_153 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_67)))
(assert (and (= cat_103 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_150)) (spoon_3 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_150))))
(assert (= cat_154 cat_103))
(declare-const cat_167 Float32)
(assert (and (= cat_105 cat_167) (spoon_48 cat_105)))
(assert (= cat_106 ((_ to_fp 11 53) RNE cat_105)))
(assert (= cat_155 cat_106))
(declare-const cat_168 Float32)
(assert (and (= cat_108 cat_168) (spoon_48 cat_108)))
(assert (= cat_109 ((_ to_fp 11 53) RNE cat_108)))
(assert (= cat_156 cat_109))
(assert (and (= cat_114 (fp.mul RNE cat_153 ((_ to_fp 11 53) RNE cat_65))) (spoon_3 (fp.mul RNE cat_153 ((_ to_fp 11 53) RNE cat_65)))))
(assert (= cat_115 (fp.mul RNE cat_114 cat_156)))
(assert (and (= cat_116 cat_115) (spoon_3 cat_115)))
(assert (and (= cat_110 (fp.sub RNE cat_154 cat_151)) (spoon_3 (fp.sub RNE cat_154 cat_151))))
(assert (= cat_111 (fp.sub RNE cat_110 cat_152)))
(assert (and (= cat_112 cat_111) (spoon_3 cat_111)))
(assert (= cat_113 (fp.mul RNE cat_112 cat_155)))
(assert (and (= cat_117 cat_113) (spoon_3 cat_113)))
(assert (= cat_118 (fp.add RNE cat_117 cat_116)))
(assert (and (= cat_119 cat_118) (spoon_3 cat_118)))
(assert (= cat_157 cat_119))
(assert (and (= cat_120 (fp.add RNE cat_154 cat_151)) (spoon_3 (fp.add RNE cat_154 cat_151))))
(assert (= cat_121 (fp.add RNE cat_120 cat_152)))
(assert (not (spoon_3 cat_121)))
(check-sat)
