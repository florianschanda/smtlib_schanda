(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Bool)) Int (ite (= kitten_32 true) 1 0))
(define-fun spoon_23 ((kitten_33 Int)) Bool (ite (= kitten_33 0) false true))
(define-fun spoon_24 ((kitten_34 Int)) Bool (or (= kitten_34 0) (= kitten_34 1)))
(define-fun spoon_25 ((kitten_35 Float32) (kitten_36 Float32)) Bool (ite (fp.eq kitten_35 kitten_36) true false))
(define-fun spoon_26 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_37)))
(define-fun spoon_27 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_28 ((kitten_42 Float32) (kitten_43 Float32)) Bool (ite (fp.eq kitten_42 kitten_43) true false))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(assert (<= 0 cat_29))
(assert (<= 0 cat_30))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_31))
(assert (< cat_31 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(define-fun spoon_37 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_44) (fp.leq kitten_44 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_38 ((kitten_45 Float32) (kitten_46 Float32)) Bool (ite (fp.eq kitten_45 kitten_46) true false))
(define-fun spoon_39 ((kitten_47 Float32) (kitten_48 Bool) (kitten_49 Bool) (kitten_50 Bool)) Bool (=> (or (= kitten_48 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_37 kitten_47)))
(define-fun spoon_40 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_51) (fp.leq kitten_51 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_41 ((kitten_52 Float32) (kitten_53 Float32)) Bool (ite (fp.eq kitten_52 kitten_53) true false))
(define-fun spoon_42 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_40 kitten_54)))
(define-fun spoon_43 ((kitten_58 Float32)) Bool (and (spoon_1 kitten_58) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_58) (fp.leq kitten_58 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_44 ((kitten_59 Float32) (kitten_60 Float32)) Bool (ite (fp.eq kitten_59 kitten_60) true false))
(define-fun spoon_45 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_43 kitten_61)))
(define-fun spoon_46 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_65) (fp.leq kitten_65 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_47 ((kitten_66 Float32) (kitten_67 Float32)) Bool (ite (fp.eq kitten_66 kitten_67) true false))
(define-fun spoon_48 ((kitten_68 Float32)) Bool (and (spoon_1 kitten_68) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_68) (fp.leq kitten_68 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_49 ((kitten_69 Float32) (kitten_70 Float32)) Bool (ite (fp.eq kitten_69 kitten_70) true false))
(define-fun spoon_50 ((kitten_71 Float32) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_72 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_48 kitten_71)))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(define-fun spoon_54 ((kitten_75 Float32)) Bool (and (spoon_1 kitten_75) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_75) (fp.leq kitten_75 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_55 ((kitten_76 Float32) (kitten_77 Float32)) Bool (ite (fp.eq kitten_76 kitten_77) true false))
(define-fun spoon_56 ((kitten_78 Float32) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool)) Bool (=> (or (= kitten_79 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_54 kitten_78)))
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_57))
(assert (<= 0 cat_58))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(assert (<= 0 cat_62))
(assert (< cat_62 cat_63))
(assert (<= 0 cat_64))
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Float32)
(declare-const cat_72 Int)
(define-fun spoon_73 ((kitten_82 Float32)) Bool (and (spoon_1 kitten_82) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) kitten_82) (fp.leq kitten_82 (fp #b0 #b01111111 #b00000000000000001010100)))))
(define-fun spoon_74 ((kitten_83 Float32) (kitten_84 Float32)) Bool (ite (fp.eq kitten_83 kitten_84) true false))
(define-fun spoon_75 ((kitten_85 Float32) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (=> (or (= kitten_86 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100))) (spoon_73 kitten_85)))
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(assert (= cat_71 (fp #b0 #b01101110 #b01001111100010110101100)))
(define-fun spoon_78 ((kitten_89 Float32) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool)) Bool (=> (or (= kitten_90 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_46 kitten_89)))
(define-fun spoon_79 ((kitten_93 Float32) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_27 kitten_93)))
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_54 cat_80)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_37 cat_81)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_37 cat_82)))
(assert (= cat_91 cat_83))
(assert (= cat_92 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_40 cat_92))
(assert (spoon_1 cat_71))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100)) (spoon_73 cat_84)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_43 cat_85)))
(assert (= cat_94 cat_86))
(assert (= cat_95 cat_87))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_94))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_95))
(assert (not (not (fp.isZero (fp.mul RNE cat_94 cat_95)))))
(check-sat)
