(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float64)) Bool (and (fp.isInfinite kitten_19) (fp.isPositive kitten_19)))
(define-fun spoon_16 ((kitten_20 Float64)) Bool (and (fp.isInfinite kitten_20) (fp.isNegative kitten_20)))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isZero kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isZero kitten_22) (fp.isNegative kitten_22)))
(declare-const cat_19 Int)
(define-fun spoon_20 ((kitten_23 Int)) Bool (and (<= (- cat_19) kitten_23) (<= kitten_23 cat_19)))
(define-fun spoon_21 ((kitten_24 Int)) Bool (and (<= (- 9007199254740992) kitten_24) (<= kitten_24 9007199254740992)))
(define-fun spoon_22 ((kitten_25 Float64) (kitten_26 Float64)) Bool (or (and (fp.isPositive kitten_25) (fp.isPositive kitten_26)) (and (fp.isNegative kitten_25) (fp.isNegative kitten_26))))
(define-fun spoon_23 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isNegative kitten_28)) (and (fp.isNegative kitten_27) (fp.isPositive kitten_28))))
(define-fun spoon_24 ((kitten_29 Float64) (kitten_30 Float64) (kitten_31 Float64)) Bool (and (=> (spoon_22 kitten_30 kitten_31) (fp.isPositive kitten_29)) (=> (spoon_23 kitten_30 kitten_31) (fp.isNegative kitten_29))))
(define-fun spoon_25 ((kitten_32 Float64) (kitten_33 Real)) Bool (or (and (fp.isPositive kitten_32) (< 0.0 kitten_33)) (and (fp.isNegative kitten_32) (< kitten_33 0.0))))
(define-fun spoon_26 ((kitten_34 Bool)) Int (ite (= kitten_34 true) 1 0))
(define-fun spoon_27 ((kitten_35 Int)) Bool (ite (= kitten_35 0) false true))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_37)))
(define-fun spoon_30 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(assert (<= 0 cat_31))
(assert (<= 0 cat_32))
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(assert (<= 0 cat_33))
(assert (< cat_33 cat_34))
(assert (<= 0 cat_35))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(assert (<= 0 cat_36))
(assert (< cat_36 cat_37))
(assert (<= 0 cat_38))
(declare-const cat_39 Int)
(define-fun spoon_40 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_41 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_40 kitten_43)))
(define-fun spoon_42 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_47) (fp.leq kitten_47 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(assert (<= 0 cat_43))
(assert (<= 0 cat_44))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(define-fun spoon_52 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_48) (fp.leq kitten_48 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_53 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_54 ((kitten_50 Float32)) Bool (and (spoon_1 kitten_50) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_50) (fp.leq kitten_50 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_55 ((kitten_51 Float32) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_52 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_54 kitten_51)))
(define-fun spoon_56 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_52 kitten_55)))
(define-fun spoon_57 ((kitten_59 Float32)) Bool (and (spoon_1 kitten_59) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_59) (fp.leq kitten_59 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_58 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_57 kitten_60)))
(define-fun spoon_59 ((kitten_64 Float32) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_53 kitten_64)))
(define-fun spoon_60 ((kitten_68 Float64)) Bool (and (spoon_2 kitten_68) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_68) (fp.leq kitten_68 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_61 ((kitten_69 Float64) (kitten_70 Bool) (kitten_71 Bool) (kitten_72 Bool)) Bool (=> (or (= kitten_70 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_60 kitten_69)))
(define-fun spoon_62 ((kitten_73 Float64)) Bool (and (spoon_2 kitten_73) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_73) (fp.leq kitten_73 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_63 ((kitten_74 Float64) (kitten_75 Bool) (kitten_76 Bool) (kitten_77 Bool)) Bool (=> (or (= kitten_75 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_62 kitten_74)))
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Float64)
(declare-const cat_67 Int)
(declare-const cat_68 Float64)
(declare-const cat_69 Int)
(declare-const cat_70 Float32)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(define-fun spoon_84 ((kitten_78 Float32)) Bool (and (spoon_1 kitten_78) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_78) (fp.leq kitten_78 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_85 ((kitten_79 Float32) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (=> (or (= kitten_80 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_42 kitten_79)))
(define-fun spoon_86 ((kitten_83 Float32) (kitten_84 Bool) (kitten_85 Bool) (kitten_86 Bool)) Bool (=> (or (= kitten_84 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_84 kitten_83)))
(define-fun spoon_87 ((kitten_87 Float32) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_88 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_30 kitten_87)))
(declare-const cat_88 Bool)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Bool)
(declare-const cat_99 Float32)
(declare-const cat_100 Float32)
(declare-const cat_101 Float32)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float32)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Float32)
(declare-const cat_115 Float32)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Bool)
(declare-const cat_130 Bool)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Bool)
(declare-const cat_136 Bool)
(declare-const cat_137 Float32)
(declare-const cat_138 Float32)
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Bool)
(declare-const cat_152 Bool)
(declare-const cat_153 Bool)
(declare-const cat_154 Float32)
(declare-const cat_155 Float32)
(declare-const cat_156 Float32)
(declare-const cat_157 Float32)
(declare-const cat_158 Bool)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 Bool)
(declare-const cat_164 Float32)
(declare-const cat_165 Float32)
(declare-const cat_166 Bool)
(declare-const cat_167 Bool)
(declare-const cat_168 Float32)
(assert (spoon_62 cat_66))
(assert (spoon_60 cat_68))
(assert (spoon_1 cat_70))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_70) (fp.leq cat_70 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_66) (fp.leq cat_66 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (= cat_144 cat_89))
(assert (= cat_145 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_145))
(assert (= cat_146 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_146))
(assert (= cat_147 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_147))
(assert (= cat_148 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_148))
(assert (= cat_149 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_149))
(assert (= cat_150 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_54 cat_150))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_40 cat_95)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_96)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_97)))
(assert (= cat_151 (spoon_27 1)))
(assert (= cat_152 (ite (not (= cat_98 true)) true false)))
(assert (= cat_152 true))
(assert (=> (= cat_153 true) (=> (spoon_84 cat_70) (and (= cat_103 (fp.mul RNE cat_70 cat_70)) (spoon_1 (fp.mul RNE cat_70 cat_70))))))
(assert (=> (= cat_153 true) (=> (spoon_84 cat_70) (= cat_157 cat_103))))
(assert (=> (= cat_153 true) (=> (spoon_84 cat_70) (= cat_158 cat_153))))
(assert (=> (= cat_153 true) (=> (not (spoon_84 cat_70)) (= cat_158 (spoon_27 0)))))
(assert (=> (= cat_153 true) (=> (not (spoon_84 cat_70)) (= cat_157 cat_149))))
(assert (=> (= cat_153 true) (= cat_159 ((_ to_fp 8 24) RNE (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE cat_66 cat_66))))))
(assert (=> (= cat_153 true) (and (= cat_104 cat_159) (spoon_1 cat_159))))
(declare-const cat_169 Float32)
(assert (=> (= cat_153 true) (and (= cat_105 cat_169) (spoon_57 cat_105))))
(assert (=> (= cat_153 true) (= cat_160 cat_105)))
(assert (=> (not (= cat_153 true)) (= cat_154 cat_150)))
(assert (=> (not (= cat_153 true)) (= cat_157 cat_149)))
(assert (=> (not (= cat_153 true)) (= cat_159 cat_146)))
(assert (=> (not (= cat_153 true)) (= cat_160 cat_145)))
(assert (=> (not (= cat_153 true)) (= cat_158 cat_153)))
(assert (=> (= cat_158 true) (and (= cat_106 (fp.sub RNE cat_159 cat_157)) (spoon_1 (fp.sub RNE cat_159 cat_157)))))
(assert (=> (= cat_158 true) (= cat_107 (fp.add RNE cat_106 (fp.mul RNE cat_154 cat_154)))))
(assert (=> (= cat_158 true) (and (= cat_108 cat_107) (spoon_1 cat_107))))
(assert (=> (= cat_158 true) (= cat_161 cat_108)))
(assert (=> (= cat_158 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161) (and (= cat_109 cat_161) (spoon_1 cat_161)))))
(declare-const cat_170 Float32)
(assert (=> (= cat_158 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161) (and (= cat_110 cat_170) (spoon_57 cat_110)))))
(assert (=> (= cat_158 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161) (= cat_162 cat_110))))
(assert (=> (= cat_158 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161) (= cat_163 cat_158))))
(assert (=> (= cat_158 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161)) (= cat_163 (spoon_27 0)))))
(assert (=> (= cat_158 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_161)) (= cat_162 cat_147))))
(assert (=> (not (= cat_158 true)) (= cat_161 cat_148)))
(assert (=> (not (= cat_158 true)) (= cat_162 cat_147)))
(assert (=> (not (= cat_158 true)) (= cat_163 cat_158)))
(assert (= cat_163 true))
(assert (and (= cat_115 (fp.mul RNE cat_162 cat_70)) (spoon_1 (fp.mul RNE cat_162 cat_70))))
(assert (and (= cat_111 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_66 cat_66)) cat_157)) (spoon_1 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_66 cat_66)) cat_157))))
(assert (= cat_112 (fp.mul RNE cat_160 cat_111)))
(assert (and (= cat_113 cat_112) (spoon_1 cat_112)))
(assert (= cat_114 (fp.mul RNE cat_113 cat_154)))
(assert (and (= cat_116 cat_114) (spoon_1 cat_114)))
(assert (= cat_117 (fp.sub RNE cat_116 cat_115)))
(assert (and (= cat_118 cat_117) (spoon_1 cat_117)))
(assert (= cat_164 cat_118))
(assert (and (= cat_119 (fp.mul RNE cat_162 cat_70)) (spoon_1 (fp.mul RNE cat_162 cat_70))))
(assert (= cat_120 (fp.mul RNE cat_119 cat_154)))
(assert (and (= cat_121 cat_120) (spoon_1 cat_120)))
(assert (and (= cat_122 (fp.mul RNE cat_160 cat_161)) (spoon_1 (fp.mul RNE cat_160 cat_161))))
(assert (= cat_123 (fp.sub RNE cat_122 cat_121)))
(assert (and (= cat_124 cat_123) (spoon_1 cat_123)))
(assert (= cat_165 cat_124))
(assert (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_165))
(assert (and (= cat_133 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_165)) (spoon_1 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_165))))
(assert (and (= cat_134 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_164)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_164))))
(assert (= cat_135 (ite (fp.leq cat_134 cat_133) true false)))
(assert (and (= cat_131 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_164)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_164))))
(assert (not (spoon_1 (fp.mul RNE (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) cat_165))))
(check-sat)
