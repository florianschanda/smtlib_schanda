(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32) (kitten_20 Float32)) Bool (not (fp.eq kitten_19 kitten_20)))
(define-fun spoon_16 ((kitten_21 Float32) (kitten_22 Float32)) Bool (ite (fp.lt kitten_21 kitten_22) true false))
(define-fun spoon_17 ((kitten_23 Float32) (kitten_24 Float32)) Bool (ite (fp.leq kitten_23 kitten_24) true false))
(define-fun spoon_18 ((kitten_25 Float32) (kitten_26 Float32)) Bool (ite (fp.lt kitten_26 kitten_25) true false))
(define-fun spoon_19 ((kitten_27 Float32) (kitten_28 Float32)) Bool (ite (fp.leq kitten_28 kitten_27) true false))
(define-fun spoon_20 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.eq kitten_29 kitten_30) true false))
(define-fun spoon_21 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (not (fp.eq kitten_31 kitten_32)) true false))
(declare-const cat_22 Bool)
(assert cat_22)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_23 ((kitten_33 Float64)) Bool (and (fp.isInfinite kitten_33) (fp.isPositive kitten_33)))
(define-fun spoon_24 ((kitten_34 Float64)) Bool (and (fp.isInfinite kitten_34) (fp.isNegative kitten_34)))
(define-fun spoon_25 ((kitten_35 Float64)) Bool (and (fp.isZero kitten_35) (fp.isPositive kitten_35)))
(define-fun spoon_26 ((kitten_36 Float64)) Bool (and (fp.isZero kitten_36) (fp.isNegative kitten_36)))
(declare-const cat_27 Int)
(define-fun spoon_28 ((kitten_37 Int)) Bool (and (<= (- cat_27) kitten_37) (<= kitten_37 cat_27)))
(define-fun spoon_29 ((kitten_38 Int)) Bool (and (<= (- 9007199254740992) kitten_38) (<= kitten_38 9007199254740992)))
(define-fun spoon_30 ((kitten_39 Float64) (kitten_40 Float64)) Bool (or (and (fp.isPositive kitten_39) (fp.isPositive kitten_40)) (and (fp.isNegative kitten_39) (fp.isNegative kitten_40))))
(define-fun spoon_31 ((kitten_41 Float64) (kitten_42 Float64)) Bool (or (and (fp.isPositive kitten_41) (fp.isNegative kitten_42)) (and (fp.isNegative kitten_41) (fp.isPositive kitten_42))))
(define-fun spoon_32 ((kitten_43 Float64) (kitten_44 Float64) (kitten_45 Float64)) Bool (and (=> (spoon_30 kitten_44 kitten_45) (fp.isPositive kitten_43)) (=> (spoon_31 kitten_44 kitten_45) (fp.isNegative kitten_43))))
(define-fun spoon_33 ((kitten_46 Float64) (kitten_47 Real)) Bool (or (and (fp.isPositive kitten_46) (< 0.0 kitten_47)) (and (fp.isNegative kitten_46) (< kitten_47 0.0))))
(define-fun spoon_34 ((kitten_48 Float64) (kitten_49 Float64)) Bool (not (fp.eq kitten_48 kitten_49)))
(define-fun spoon_35 ((kitten_50 Float64) (kitten_51 Float64)) Bool (ite (fp.lt kitten_50 kitten_51) true false))
(define-fun spoon_36 ((kitten_52 Float64) (kitten_53 Float64)) Bool (ite (fp.leq kitten_52 kitten_53) true false))
(define-fun spoon_37 ((kitten_54 Float64) (kitten_55 Float64)) Bool (ite (fp.lt kitten_55 kitten_54) true false))
(define-fun spoon_38 ((kitten_56 Float64) (kitten_57 Float64)) Bool (ite (fp.leq kitten_57 kitten_56) true false))
(define-fun spoon_39 ((kitten_58 Float64) (kitten_59 Float64)) Bool (ite (fp.eq kitten_58 kitten_59) true false))
(define-fun spoon_40 ((kitten_60 Float64) (kitten_61 Float64)) Bool (ite (not (fp.eq kitten_60 kitten_61)) true false))
(declare-const cat_41 Bool)
(assert cat_41)
(assert (= (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNA (to_real 1))))
(define-fun spoon_42 ((kitten_62 Bool)) Int (ite (= kitten_62 true) 1 0))
(define-fun spoon_43 ((kitten_63 Int)) Bool (ite (= kitten_63 0) false true))
(define-fun spoon_44 ((kitten_64 Int)) Bool (or (= kitten_64 0) (= kitten_64 1)))
(define-fun spoon_45 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_65) (fp.leq kitten_65 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_46 ((kitten_66 Float32) (kitten_67 Float32)) Bool (ite (fp.eq kitten_66 kitten_67) true false))
(define-fun spoon_47 ((kitten_68 Float32) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_69 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_45 kitten_68)))
(define-fun spoon_48 ((kitten_72 Float32)) Bool (and (spoon_1 kitten_72) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_72) (fp.leq kitten_72 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_49 ((kitten_73 Float32) (kitten_74 Float32)) Bool (ite (fp.eq kitten_73 kitten_74) true false))
(define-fun spoon_50 ((kitten_75 Float32)) Bool (and (spoon_1 kitten_75) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_75) (fp.leq kitten_75 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_51 ((kitten_76 Float32) (kitten_77 Float32)) Bool (ite (fp.eq kitten_76 kitten_77) true false))
(define-fun spoon_52 ((kitten_78 Float32) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool)) Bool (=> (or (= kitten_79 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_50 kitten_78)))
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(assert (<= 0 cat_53))
(assert (<= 0 cat_54))
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(assert (<= 0 cat_55))
(assert (< cat_55 cat_56))
(assert (<= 0 cat_57))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(assert (<= 0 cat_58))
(assert (< cat_58 cat_59))
(assert (<= 0 cat_60))
(declare-const cat_61 Int)
(define-fun spoon_62 ((kitten_82 Float32)) Bool (and (spoon_1 kitten_82) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_82) (fp.leq kitten_82 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_63 ((kitten_83 Float32) (kitten_84 Float32)) Bool (ite (fp.eq kitten_83 kitten_84) true false))
(define-fun spoon_64 ((kitten_85 Float32)) Bool (and (spoon_1 kitten_85) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_85) (fp.leq kitten_85 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_65 ((kitten_86 Float32) (kitten_87 Float32)) Bool (ite (fp.eq kitten_86 kitten_87) true false))
(define-fun spoon_66 ((kitten_88 Float32) (kitten_89 Bool) (kitten_90 Bool) (kitten_91 Bool)) Bool (=> (or (= kitten_89 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_64 kitten_88)))
(define-fun spoon_67 ((kitten_92 Float32)) Bool (and (spoon_1 kitten_92) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_92) (fp.leq kitten_92 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_68 ((kitten_93 Float32) (kitten_94 Float32)) Bool (ite (fp.eq kitten_93 kitten_94) true false))
(define-fun spoon_69 ((kitten_95 Float32) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_67 kitten_95)))
(define-fun spoon_70 ((kitten_99 Float32)) Bool (and (spoon_1 kitten_99) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_99) (fp.leq kitten_99 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_71 ((kitten_100 Float32) (kitten_101 Float32)) Bool (ite (fp.eq kitten_100 kitten_101) true false))
(define-fun spoon_72 ((kitten_102 Float32) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool)) Bool (=> (or (= kitten_103 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_70 kitten_102)))
(define-fun spoon_73 ((kitten_106 Float32)) Bool (and (spoon_1 kitten_106) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_106) (fp.leq kitten_106 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_74 ((kitten_107 Float32) (kitten_108 Float32)) Bool (ite (fp.eq kitten_107 kitten_108) true false))
(define-fun spoon_75 ((kitten_109 Float32) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_110 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_73 kitten_109)))
(define-fun spoon_76 ((kitten_113 Float32) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool)) Bool (=> (or (= kitten_114 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_62 kitten_113)))
(define-fun spoon_77 ((kitten_117 Float64) (kitten_118 Float64)) Bool (ite (fp.eq kitten_117 kitten_118) true false))
(define-fun spoon_78 ((kitten_119 Float64) (kitten_120 Float64)) Bool (ite (fp.eq kitten_119 kitten_120) true false))
(define-fun spoon_79 ((kitten_121 Float64) (kitten_122 Bool) (kitten_123 Bool) (kitten_124 Bool)) Bool (=> (or (= kitten_122 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_121)))
(define-fun spoon_80 ((kitten_125 Float64)) Bool (and (spoon_2 kitten_125) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_125) (fp.leq kitten_125 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_81 ((kitten_126 Float64) (kitten_127 Float64)) Bool (ite (fp.eq kitten_126 kitten_127) true false))
(define-fun spoon_82 ((kitten_128 Float64) (kitten_129 Bool) (kitten_130 Bool) (kitten_131 Bool)) Bool (=> (or (= kitten_129 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_80 kitten_128)))
(define-fun spoon_83 ((kitten_132 Float32) (kitten_133 Bool) (kitten_134 Bool) (kitten_135 Bool)) Bool (=> (or (= kitten_133 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_48 kitten_132)))
(define-fun spoon_84 ((kitten_136 Float64)) Bool (and (spoon_2 kitten_136) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_136) (fp.leq kitten_136 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(define-fun spoon_85 ((kitten_137 Float64) (kitten_138 Float64)) Bool (ite (fp.eq kitten_137 kitten_138) true false))
(define-fun spoon_86 ((kitten_139 Float64) (kitten_140 Bool) (kitten_141 Bool) (kitten_142 Bool)) Bool (=> (or (= kitten_140 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_84 kitten_139)))
(define-fun spoon_87 ((kitten_143 Float64)) Bool (and (spoon_2 kitten_143) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_143) (fp.leq kitten_143 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_88 ((kitten_144 Float64) (kitten_145 Float64)) Bool (ite (fp.eq kitten_144 kitten_145) true false))
(define-fun spoon_89 ((kitten_146 Float64) (kitten_147 Bool) (kitten_148 Bool) (kitten_149 Bool)) Bool (=> (or (= kitten_147 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_87 kitten_146)))
(declare-const cat_90 Float32)
(declare-const cat_91 Int)
(declare-const cat_92 Float32)
(declare-const cat_93 Int)
(declare-const cat_94 Float64)
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(declare-const cat_111 Int)
(declare-const cat_112 Int)
(declare-const cat_113 Bool)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float64)
(declare-const cat_120 Float64)
(declare-const cat_121 Float64)
(declare-const cat_122 Float64)
(declare-const cat_123 Float64)
(declare-const cat_124 Float64)
(declare-const cat_125 Float32)
(declare-const cat_126 Float64)
(declare-const cat_127 Float64)
(declare-const cat_128 Float64)
(declare-const cat_129 Float64)
(declare-const cat_130 Float64)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float64)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float64)
(declare-const cat_137 Float64)
(declare-const cat_138 Float64)
(declare-const cat_139 Float64)
(declare-const cat_140 Float64)
(declare-const cat_141 Float64)
(declare-const cat_142 Float64)
(declare-const cat_143 Float64)
(declare-const cat_144 Float64)
(declare-const cat_145 Float64)
(declare-const cat_146 Float64)
(declare-const cat_147 Float64)
(declare-const cat_148 Float64)
(declare-const cat_149 Float64)
(declare-const cat_150 Float64)
(declare-const cat_151 Float64)
(declare-const cat_152 Float64)
(declare-const cat_153 Float64)
(declare-const cat_154 Float64)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float64)
(declare-const cat_160 Float64)
(declare-const cat_161 Float64)
(declare-const cat_162 Float64)
(declare-const cat_163 Float64)
(declare-const cat_164 Float64)
(declare-const cat_165 Bool)
(declare-const cat_166 Bool)
(declare-const cat_167 Float64)
(declare-const cat_168 Float64)
(declare-const cat_169 Bool)
(declare-const cat_170 Bool)
(declare-const cat_171 Float64)
(declare-const cat_172 Float32)
(declare-const cat_173 Float32)
(declare-const cat_174 Float32)
(declare-const cat_175 Float32)
(declare-const cat_176 Bool)
(declare-const cat_177 Float64)
(declare-const cat_178 Float64)
(declare-const cat_179 Float64)
(declare-const cat_180 Float64)
(declare-const cat_181 Float64)
(declare-const cat_182 Float64)
(declare-const cat_183 Float64)
(declare-const cat_184 Float64)
(declare-const cat_185 Float64)
(declare-const cat_186 Float64)
(declare-const cat_187 Float64)
(declare-const cat_188 Float64)
(declare-const cat_189 Float64)
(declare-const cat_190 Float64)
(declare-const cat_191 Float64)
(declare-const cat_192 Bool)
(declare-const cat_193 Bool)
(assert (spoon_45 cat_90))
(assert (spoon_45 cat_92))
(assert (spoon_80 cat_94))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_114)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_115)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_116)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_117)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_118)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_87 cat_119)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_87 cat_120)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_87 cat_121)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_122)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_123)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_84 cat_124)))
(assert (= cat_174 cat_125))
(assert (= cat_175 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_50 cat_175))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_126)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_127)))
(assert (= cat_176 (spoon_43 1)))
(assert (= cat_177 (fp.mul RNE cat_94 cat_94)))
(assert (and (= cat_128 ((_ to_fp 11 53) RNE (fp.mul RNE cat_90 cat_90))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_90 cat_90)))))
(assert (= cat_178 cat_128))
(assert (and (= cat_129 ((_ to_fp 11 53) RNE (fp.mul RNE cat_92 cat_92))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_92 cat_92)))))
(assert (= cat_179 cat_129))
(assert (= cat_180 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_94)))
(assert (and (= cat_130 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_177)) (spoon_2 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_177))))
(assert (= cat_181 cat_130))
(declare-const cat_194 Float32)
(assert (and (= cat_132 cat_194) (spoon_67 cat_132)))
(assert (= cat_133 ((_ to_fp 11 53) RNE cat_132)))
(assert (= cat_182 cat_133))
(declare-const cat_195 Float32)
(assert (and (= cat_135 cat_195) (spoon_67 cat_135)))
(assert (= cat_136 ((_ to_fp 11 53) RNE cat_135)))
(assert (= cat_183 cat_136))
(assert (and (= cat_141 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_92))) (spoon_2 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_92)))))
(assert (= cat_142 (fp.mul RNE cat_141 cat_183)))
(assert (and (= cat_143 cat_142) (spoon_2 cat_142)))
(assert (and (= cat_137 (fp.sub RNE cat_181 cat_178)) (spoon_2 (fp.sub RNE cat_181 cat_178))))
(assert (= cat_138 (fp.sub RNE cat_137 cat_179)))
(assert (and (= cat_139 cat_138) (spoon_2 cat_138)))
(assert (= cat_140 (fp.mul RNE cat_139 cat_182)))
(assert (and (= cat_144 cat_140) (spoon_2 cat_140)))
(assert (= cat_145 (fp.add RNE cat_144 cat_143)))
(assert (and (= cat_146 cat_145) (spoon_2 cat_145)))
(assert (= cat_184 cat_146))
(assert (and (= cat_147 (fp.add RNE cat_181 cat_178)) (spoon_2 (fp.add RNE cat_181 cat_178))))
(assert (= cat_148 (fp.add RNE cat_147 cat_179)))
(assert (and (= cat_149 cat_148) (spoon_2 cat_148)))
(assert (= cat_185 cat_149))
(assert (and (= cat_150 (fp.div RNE cat_184 cat_185)) (spoon_2 (fp.div RNE cat_184 cat_185))))
(assert (= cat_186 cat_150))
(assert (=> (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (= cat_187 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_186) (= cat_188 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_186)) (and (= cat_151 cat_186) (spoon_2 cat_186)))))
(assert (=> (not (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_186)) (= cat_189 cat_151))))
(assert (=> (not (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_186)) (= cat_188 cat_189))))
(assert (=> (not (fp.lt cat_186 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (= cat_187 cat_188)))
(assert (and (= cat_152 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_90))) (spoon_2 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_90)))))
(assert (= cat_190 cat_152))
(assert (and (= cat_157 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_92))) (spoon_2 (fp.mul RNE cat_180 ((_ to_fp 11 53) RNE cat_92)))))
(assert (= cat_158 (fp.mul RNE cat_157 cat_182)))
(assert (and (= cat_159 cat_158) (spoon_2 cat_158)))
(assert (and (= cat_153 (fp.sub RNE cat_181 cat_178)) (spoon_2 (fp.sub RNE cat_181 cat_178))))
(assert (= cat_154 (fp.sub RNE cat_153 cat_179)))
(assert (and (= cat_155 cat_154) (spoon_2 cat_154)))
(assert (= cat_156 (fp.mul RNE cat_155 cat_183)))
(assert (and (= cat_160 cat_156) (spoon_2 cat_156)))
(assert (= cat_161 (fp.sub RNE cat_160 cat_159)))
(assert (and (= cat_162 cat_161) (spoon_2 cat_161)))
(assert (= cat_191 cat_162))
(assert (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_191))
(assert (and (= cat_168 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_191)) (spoon_2 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_191))))
(assert (= cat_169 (ite (fp.leq cat_190 cat_168) true false)))
(assert (not (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_191))))
(check-sat)
