(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Bool)) Int (ite (= kitten_19 true) 1 0))
(define-fun spoon_16 ((kitten_20 Int)) Bool (ite (= kitten_20 0) false true))
(define-fun spoon_17 ((kitten_21 Int)) Bool (or (= kitten_21 0) (= kitten_21 1)))
(define-fun spoon_18 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_24))
(assert (< cat_24 cat_25))
(assert (<= 0 cat_26))
(define-fun spoon_27 ((kitten_23 Float32)) Bool (and (spoon_1 kitten_23) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_23) (fp.leq kitten_23 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_28 ((kitten_24 Float32) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool)) Bool (=> (or (= kitten_25 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_27 kitten_24)))
(define-fun spoon_29 ((kitten_28 Float32)) Bool (and (spoon_1 kitten_28) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_28) (fp.leq kitten_28 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(assert (<= 0 cat_34))
(assert (<= 0 cat_35))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(assert (<= 0 cat_36))
(assert (< cat_36 cat_37))
(assert (<= 0 cat_38))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_39))
(assert (< cat_39 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(define-fun spoon_49 ((kitten_29 Float32) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool)) Bool (=> (or (= kitten_30 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_29 kitten_29)))
(define-fun spoon_50 ((kitten_33 Float32) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_34 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_18 kitten_33)))
(declare-const cat_51 Float32)
(declare-const cat_52 Float32)
(declare-const cat_53 Bool)
(declare-const cat_54 Float32)
(declare-const cat_55 Float32)
(declare-const cat_56 Bool)
(declare-const cat_57 Bool)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_27 cat_51)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_27 cat_52)))
(assert (= cat_56 cat_53))
(assert (= cat_57 (spoon_16 0)))
(assert (= cat_58 cat_54))
(assert (= cat_59 cat_55))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_58))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_59))
(assert (not (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_59)))
(check-sat)
