(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float64)) Bool (and (fp.isInfinite kitten_19) (fp.isPositive kitten_19)))
(define-fun spoon_16 ((kitten_20 Float64)) Bool (and (fp.isInfinite kitten_20) (fp.isNegative kitten_20)))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isZero kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isZero kitten_22) (fp.isNegative kitten_22)))
(declare-const cat_19 Int)
(define-fun spoon_20 ((kitten_23 Int)) Bool (and (<= (- cat_19) kitten_23) (<= kitten_23 cat_19)))
(define-fun spoon_21 ((kitten_24 Int)) Bool (and (<= (- 9007199254740992) kitten_24) (<= kitten_24 9007199254740992)))
(define-fun spoon_22 ((kitten_25 Float64) (kitten_26 Float64)) Bool (or (and (fp.isPositive kitten_25) (fp.isPositive kitten_26)) (and (fp.isNegative kitten_25) (fp.isNegative kitten_26))))
(define-fun spoon_23 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isNegative kitten_28)) (and (fp.isNegative kitten_27) (fp.isPositive kitten_28))))
(define-fun spoon_24 ((kitten_29 Float64) (kitten_30 Float64) (kitten_31 Float64)) Bool (and (=> (spoon_22 kitten_30 kitten_31) (fp.isPositive kitten_29)) (=> (spoon_23 kitten_30 kitten_31) (fp.isNegative kitten_29))))
(define-fun spoon_25 ((kitten_32 Float64) (kitten_33 Real)) Bool (or (and (fp.isPositive kitten_32) (< 0.0 kitten_33)) (and (fp.isNegative kitten_32) (< kitten_33 0.0))))
(define-fun spoon_26 ((kitten_34 Bool)) Int (ite (= kitten_34 true) 1 0))
(define-fun spoon_27 ((kitten_35 Int)) Bool (ite (= kitten_35 0) false true))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_30 ((kitten_38 Float32) (kitten_39 Bool) (kitten_40 Bool) (kitten_41 Bool)) Bool (=> (or (= kitten_39 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_38)))
(define-fun spoon_31 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_32 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_43) (fp.leq kitten_43 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_33 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_32 kitten_44)))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(assert (<= 0 cat_34))
(assert (<= 0 cat_35))
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(assert (<= 0 cat_36))
(assert (< cat_36 cat_37))
(assert (<= 0 cat_38))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_39))
(assert (< cat_39 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(define-fun spoon_43 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_44 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_49) (fp.leq kitten_49 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_45 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_44 kitten_50)))
(define-fun spoon_46 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_47 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_46 kitten_55)))
(define-fun spoon_48 ((kitten_59 Float32)) Bool (and (spoon_1 kitten_59) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_59) (fp.leq kitten_59 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_49 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_48 kitten_60)))
(define-fun spoon_50 ((kitten_64 Float32)) Bool (and (spoon_1 kitten_64) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_64) (fp.leq kitten_64 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_51 ((kitten_65 Float32) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool)) Bool (=> (or (= kitten_66 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_50 kitten_65)))
(define-fun spoon_52 ((kitten_69 Float32) (kitten_70 Bool) (kitten_71 Bool) (kitten_72 Bool)) Bool (=> (or (= kitten_70 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_43 kitten_69)))
(define-fun spoon_53 ((kitten_73 Float64) (kitten_74 Bool) (kitten_75 Bool) (kitten_76 Bool)) Bool (=> (or (= kitten_74 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_73)))
(define-fun spoon_54 ((kitten_77 Float64)) Bool (and (spoon_2 kitten_77) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_77) (fp.leq kitten_77 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_55 ((kitten_78 Float64) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool)) Bool (=> (or (= kitten_79 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_54 kitten_78)))
(define-fun spoon_56 ((kitten_82 Float32) (kitten_83 Bool) (kitten_84 Bool) (kitten_85 Bool)) Bool (=> (or (= kitten_83 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_31 kitten_82)))
(define-fun spoon_57 ((kitten_86 Float64)) Bool (and (spoon_2 kitten_86) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_86) (fp.leq kitten_86 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(define-fun spoon_58 ((kitten_87 Float64) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_88 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_57 kitten_87)))
(define-fun spoon_59 ((kitten_91 Float64)) Bool (and (spoon_2 kitten_91) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_91) (fp.leq kitten_91 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_60 ((kitten_92 Float64) (kitten_93 Bool) (kitten_94 Bool) (kitten_95 Bool)) Bool (=> (or (= kitten_93 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_59 kitten_92)))
(declare-const cat_61 Float32)
(declare-const cat_62 Int)
(declare-const cat_63 Float32)
(declare-const cat_64 Int)
(declare-const cat_65 Float64)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(declare-const cat_84 Bool)
(declare-const cat_85 Float64)
(declare-const cat_86 Float64)
(declare-const cat_87 Float64)
(declare-const cat_88 Float64)
(declare-const cat_89 Float64)
(declare-const cat_90 Float64)
(declare-const cat_91 Float64)
(declare-const cat_92 Float64)
(declare-const cat_93 Float64)
(declare-const cat_94 Float64)
(declare-const cat_95 Float64)
(declare-const cat_96 Float32)
(declare-const cat_97 Float64)
(declare-const cat_98 Float64)
(declare-const cat_99 Float64)
(declare-const cat_100 Float64)
(declare-const cat_101 Float64)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float64)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float64)
(declare-const cat_108 Float64)
(declare-const cat_109 Float64)
(declare-const cat_110 Float64)
(declare-const cat_111 Float64)
(declare-const cat_112 Float64)
(declare-const cat_113 Float64)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float64)
(declare-const cat_120 Float64)
(declare-const cat_121 Float64)
(declare-const cat_122 Float64)
(declare-const cat_123 Float64)
(declare-const cat_124 Float64)
(declare-const cat_125 Float64)
(declare-const cat_126 Float64)
(declare-const cat_127 Float64)
(declare-const cat_128 Float64)
(declare-const cat_129 Float64)
(declare-const cat_130 Float64)
(declare-const cat_131 Float64)
(declare-const cat_132 Float64)
(declare-const cat_133 Float64)
(declare-const cat_134 Float64)
(declare-const cat_135 Float64)
(declare-const cat_136 Bool)
(declare-const cat_137 Bool)
(declare-const cat_138 Float64)
(declare-const cat_139 Float64)
(declare-const cat_140 Bool)
(declare-const cat_141 Bool)
(declare-const cat_142 Float64)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Bool)
(declare-const cat_148 Float64)
(declare-const cat_149 Float64)
(declare-const cat_150 Float64)
(declare-const cat_151 Float64)
(declare-const cat_152 Float64)
(declare-const cat_153 Float64)
(declare-const cat_154 Float64)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float64)
(declare-const cat_160 Float64)
(declare-const cat_161 Float64)
(declare-const cat_162 Float64)
(declare-const cat_163 Bool)
(declare-const cat_164 Bool)
(assert (spoon_29 cat_61))
(assert (spoon_29 cat_63))
(assert (spoon_54 cat_65))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_85)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_86)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_87)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_88)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_89)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_59 cat_90)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_59 cat_91)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_59 cat_92)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_93)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_94)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_57 cat_95)))
(assert (= cat_145 cat_96))
(assert (= cat_146 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_32 cat_146))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_97)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_98)))
(assert (= cat_147 (spoon_27 1)))
(assert (= cat_148 (fp.mul RNE cat_65 cat_65)))
(assert (and (= cat_99 ((_ to_fp 11 53) RNE (fp.mul RNE cat_61 cat_61))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_61 cat_61)))))
(assert (= cat_149 cat_99))
(assert (and (= cat_100 ((_ to_fp 11 53) RNE (fp.mul RNE cat_63 cat_63))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_63 cat_63)))))
(assert (= cat_150 cat_100))
(assert (= cat_151 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_65)))
(assert (and (= cat_101 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_148)) (spoon_2 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_148))))
(assert (= cat_152 cat_101))
(declare-const cat_165 Float32)
(assert (and (= cat_103 cat_165) (spoon_46 cat_103)))
(assert (= cat_104 ((_ to_fp 11 53) RNE cat_103)))
(assert (= cat_153 cat_104))
(declare-const cat_166 Float32)
(assert (and (= cat_106 cat_166) (spoon_46 cat_106)))
(assert (= cat_107 ((_ to_fp 11 53) RNE cat_106)))
(assert (= cat_154 cat_107))
(assert (and (= cat_112 (fp.mul RNE cat_151 ((_ to_fp 11 53) RNE cat_63))) (spoon_2 (fp.mul RNE cat_151 ((_ to_fp 11 53) RNE cat_63)))))
(assert (= cat_113 (fp.mul RNE cat_112 cat_154)))
(assert (and (= cat_114 cat_113) (spoon_2 cat_113)))
(assert (and (= cat_108 (fp.sub RNE cat_152 cat_149)) (spoon_2 (fp.sub RNE cat_152 cat_149))))
(assert (= cat_109 (fp.sub RNE cat_108 cat_150)))
(assert (and (= cat_110 cat_109) (spoon_2 cat_109)))
(assert (= cat_111 (fp.mul RNE cat_110 cat_153)))
(assert (and (= cat_115 cat_111) (spoon_2 cat_111)))
(assert (= cat_116 (fp.add RNE cat_115 cat_114)))
(assert (not (spoon_2 cat_116)))
(check-sat)
