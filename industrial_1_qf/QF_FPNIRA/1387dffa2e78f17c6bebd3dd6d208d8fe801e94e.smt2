(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Int)) Bool (or (= kitten_19 0) (= kitten_19 1)))
(define-fun spoon_16 ((kitten_20 Float32)) Bool (and (spoon_1 kitten_20) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_20) (fp.leq kitten_20 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_17 Int)
(declare-const cat_18 Int)
(assert (<= 0 cat_17))
(assert (<= 0 cat_18))
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(assert (<= 0 cat_19))
(assert (< cat_19 cat_20))
(assert (<= 0 cat_21))
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(declare-const cat_24 Int)
(assert (<= 0 cat_22))
(assert (< cat_22 cat_23))
(assert (<= 0 cat_24))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(define-fun spoon_27 ((kitten_21 Float32)) Bool (and (spoon_1 kitten_21) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_21) (fp.leq kitten_21 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_28 ((kitten_22 Float32) (kitten_23 Bool) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool)) Bool (=> (or (= kitten_23 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_27 kitten_22)))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(define-fun spoon_32 ((kitten_27 Float32) (kitten_28 Bool) (kitten_29 Bool) (kitten_30 Bool) (kitten_31 Bool)) Bool (=> (or (= kitten_28 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_27)))
(define-fun spoon_33 ((kitten_32 Float32) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_16 kitten_32)))
(declare-const cat_34 Float32)
(declare-const cat_35 Float32)
(declare-const cat_36 Float32)
(declare-const cat_37 Float32)
(declare-const cat_38 Float32)
(declare-const cat_39 Float32)
(declare-const cat_40 Float32)
(declare-const cat_41 Float32)
(declare-const cat_42 Float32)
(declare-const cat_43 Float32)
(declare-const cat_44 Float32)
(declare-const cat_45 Float32)
(declare-const cat_46 Float32)
(declare-const cat_47 Float32)
(declare-const cat_48 Float32)
(declare-const cat_49 Float32)
(declare-const cat_50 Float32)
(declare-const cat_51 Float32)
(declare-const cat_52 Float32)
(declare-const cat_53 Float32)
(declare-const cat_54 Float32)
(declare-const cat_55 Float32)
(declare-const cat_56 Float32)
(declare-const cat_57 Float32)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(declare-const cat_60 Float32)
(declare-const cat_61 Float32)
(declare-const cat_62 Float32)
(declare-const cat_63 Float32)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(assert (spoon_27 cat_34))
(assert (spoon_27 cat_35))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_27 cat_36)))
(assert (and (= cat_38 cat_37) (spoon_1 cat_37)))
(assert (= cat_65 cat_38))
(assert (=> (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_67 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_69 cat_39)))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34) (= cat_71 (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34) (= cat_73 cat_40))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34)) (= cat_73 cat_35))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34)) (= cat_71 cat_34))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34)) (= cat_73 cat_50))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_34)) (= cat_71 cat_49))))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (= cat_69 cat_73)))
(assert (=> (not (fp.lt cat_34 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (= cat_67 cat_71)))
(assert (not (fp.lt cat_69 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (fp.lt (fp #b0 #b10001011 #b00000000000000000000000) cat_69))
(assert (= cat_69 cat_78))
(assert (= cat_79 (fp #b0 #b10001011 #b00000000000000000000000)))
(assert (not (not (fp.isZero cat_65))))
(check-sat)
