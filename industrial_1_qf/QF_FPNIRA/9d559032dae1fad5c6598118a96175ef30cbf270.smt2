(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float64)) Bool (and (fp.isInfinite kitten_19) (fp.isPositive kitten_19)))
(define-fun spoon_16 ((kitten_20 Float64)) Bool (and (fp.isInfinite kitten_20) (fp.isNegative kitten_20)))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isZero kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isZero kitten_22) (fp.isNegative kitten_22)))
(declare-const cat_19 Int)
(define-fun spoon_20 ((kitten_23 Int)) Bool (and (<= (- cat_19) kitten_23) (<= kitten_23 cat_19)))
(define-fun spoon_21 ((kitten_24 Int)) Bool (and (<= (- 9007199254740992) kitten_24) (<= kitten_24 9007199254740992)))
(define-fun spoon_22 ((kitten_25 Float64) (kitten_26 Float64)) Bool (or (and (fp.isPositive kitten_25) (fp.isPositive kitten_26)) (and (fp.isNegative kitten_25) (fp.isNegative kitten_26))))
(define-fun spoon_23 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isNegative kitten_28)) (and (fp.isNegative kitten_27) (fp.isPositive kitten_28))))
(define-fun spoon_24 ((kitten_29 Float64) (kitten_30 Float64) (kitten_31 Float64)) Bool (and (=> (spoon_22 kitten_30 kitten_31) (fp.isPositive kitten_29)) (=> (spoon_23 kitten_30 kitten_31) (fp.isNegative kitten_29))))
(define-fun spoon_25 ((kitten_32 Float64) (kitten_33 Real)) Bool (or (and (fp.isPositive kitten_32) (< 0.0 kitten_33)) (and (fp.isNegative kitten_32) (< kitten_33 0.0))))
(define-fun spoon_26 ((kitten_34 Bool)) Int (ite (= kitten_34 true) 1 0))
(define-fun spoon_27 ((kitten_35 Int)) Bool (ite (= kitten_35 0) false true))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_37)))
(define-fun spoon_30 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_31 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_30 kitten_42)))
(define-fun spoon_32 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_46) (fp.leq kitten_46 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_33 ((kitten_47 Float32) (kitten_48 Bool) (kitten_49 Bool) (kitten_50 Bool)) Bool (=> (or (= kitten_48 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_32 kitten_47)))
(define-fun spoon_34 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_51) (fp.leq kitten_51 (fp #b0 #b10000101 #b01100111111101011101000)))))
(define-fun spoon_35 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_52) (fp.leq kitten_52 (fp #b0 #b10001011 #b01101010100000000000000)))))
(define-fun spoon_36 ((kitten_53 Float32) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_35 kitten_53)))
(define-fun spoon_37 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_34 kitten_57)))
(define-fun spoon_38 ((kitten_61 Float64) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_61)))
(define-fun spoon_39 ((kitten_65 Float64)) Bool (and (spoon_2 kitten_65) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_65) (fp.leq kitten_65 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_40 ((kitten_66 Float64) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool)) Bool (=> (or (= kitten_67 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_39 kitten_66)))
(declare-const cat_41 Float64)
(declare-const cat_42 Int)
(declare-const cat_43 Float32)
(declare-const cat_44 Int)
(declare-const cat_45 Float32)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Float32)
(declare-const cat_50 Int)
(declare-const cat_51 Float32)
(declare-const cat_52 Int)
(declare-const cat_53 Float32)
(declare-const cat_54 Int)
(declare-const cat_55 Float32)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(declare-const cat_59 Float32)
(assert (= cat_49 cat_59))
(assert (= cat_51 ((_ to_fp 8 24) RNE (fp.mul RNE cat_41 cat_41))))
(assert (= cat_53 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) (fp.mul RNE (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_51) (fp.mul RNE cat_49 cat_49)))))
(assert (= cat_55 (fp.sqrt RNE cat_53)))
(declare-const cat_60 Float32)
(declare-const cat_61 Float32)
(declare-const cat_62 Float64)
(declare-const cat_63 Float64)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float64)
(declare-const cat_75 Float64)
(declare-const cat_76 Float32)
(declare-const cat_77 Float64)
(declare-const cat_78 Float64)
(declare-const cat_79 Float64)
(declare-const cat_80 Float64)
(declare-const cat_81 Float64)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float64)
(declare-const cat_86 Float64)
(declare-const cat_87 Float64)
(declare-const cat_88 Float64)
(declare-const cat_89 Float64)
(declare-const cat_90 Float64)
(declare-const cat_91 Float64)
(declare-const cat_92 Float64)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(assert (spoon_30 cat_45))
(assert (spoon_39 cat_41))
(assert (spoon_1 cat_43))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_43) (fp.leq cat_43 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_41) (fp.leq cat_41 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_30 cat_60)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_30 cat_61)))
(assert (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011100001)) cat_45))
(assert (fp.leq cat_45 (fp #b0 #b10000101 #b01100111111101011100001)))
(assert (and (= cat_64 cat_45) (spoon_1 cat_45)))
(declare-const cat_97 Float32)
(assert (and (= cat_65 cat_97) (spoon_35 cat_65)))
(assert (= cat_65 cat_49))
(assert (spoon_35 cat_49))
(assert (= ((_ to_fp 8 24) RNE (fp.mul RNE cat_41 cat_41)) cat_51))
(assert (spoon_32 cat_51))
(assert (and (= cat_66 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_51)) (spoon_1 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_51))))
(assert (= cat_67 (fp.mul RNE cat_66 (fp.mul RNE cat_49 cat_49))))
(assert (and (= cat_68 cat_67) (spoon_1 cat_67)))
(assert (= cat_69 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_68)))
(assert (and (= cat_70 cat_69) (spoon_1 cat_69)))
(assert (and (= cat_71 cat_70) (spoon_1 cat_70)))
(assert (= cat_71 cat_53))
(assert (spoon_32 cat_53))
(assert (not (or (fp.isZero cat_53) (fp.isPositive cat_53))))
(check-sat)
