(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Bool)) Int (ite (= kitten_3 true) 1 0))
(define-fun spoon_4 ((kitten_4 Int)) Bool (ite (= kitten_4 0) false true))
(define-fun spoon_5 ((kitten_5 Int)) Bool (or (= kitten_5 0) (= kitten_5 1)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_7 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_8 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_9 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-const cat_10 Int)
(define-fun spoon_11 ((kitten_10 Int)) Bool (and (<= (- cat_10) kitten_10) (<= kitten_10 cat_10)))
(define-fun spoon_12 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_13 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_14 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_15 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_13 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_14 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_16 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(define-fun spoon_17 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(define-fun spoon_18 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_24))
(assert (< cat_24 cat_25))
(assert (<= 0 cat_26))
(define-fun spoon_27 ((kitten_23 Int)) Bool (and (<= 1 kitten_23) (<= kitten_23 30)))
(define-fun spoon_28 ((kitten_24 Int)) Bool (and (<= 3 kitten_24) (<= kitten_24 30)))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_29))
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (< cat_37 cat_38))
(assert (<= 0 cat_39))
(define-fun spoon_40 ((kitten_25 Int)) Bool (and (<= 3 kitten_25) (<= kitten_25 100)))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (<= 0 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(assert (<= 0 cat_46))
(assert (< cat_46 cat_47))
(assert (<= 0 cat_48))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(assert (<= 0 cat_49))
(assert (< cat_49 cat_50))
(assert (<= 0 cat_51))
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(define-fun spoon_55 ((kitten_26 Float32) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_27 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_18 kitten_26)))
(define-fun spoon_56 ((kitten_30 Int) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_31 true) (<= 1 30)) (spoon_27 kitten_30)))
(define-fun spoon_57 ((kitten_34 Int) (kitten_35 Bool) (kitten_36 Bool) (kitten_37 Bool)) Bool (=> (or (= kitten_35 true) (<= 3 30)) (spoon_28 kitten_34)))
(define-fun spoon_58 ((kitten_38 Int) (kitten_39 Bool) (kitten_40 Bool) (kitten_41 Bool)) Bool (=> (or (= kitten_39 true) (<= 3 100)) (spoon_40 kitten_38)))
(assert (not (<= 1 1)))
(check-sat)
