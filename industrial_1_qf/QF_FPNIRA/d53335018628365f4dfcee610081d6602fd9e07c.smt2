(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isInfinite kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isNegative kitten_6)))
(define-fun spoon_7 ((kitten_7 Float32)) Bool (and (fp.isZero kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_8 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isNegative kitten_8)))
(declare-const cat_9 Int)
(define-fun spoon_10 ((kitten_9 Int)) Bool (and (<= (- cat_9) kitten_9) (<= kitten_9 cat_9)))
(define-fun spoon_11 ((kitten_10 Int)) Bool (and (<= (- 16777216) kitten_10) (<= kitten_10 16777216)))
(define-fun spoon_12 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isPositive kitten_12)) (and (fp.isNegative kitten_11) (fp.isNegative kitten_12))))
(define-fun spoon_13 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isNegative kitten_14)) (and (fp.isNegative kitten_13) (fp.isPositive kitten_14))))
(define-fun spoon_14 ((kitten_15 Float32) (kitten_16 Float32) (kitten_17 Float32)) Bool (and (=> (spoon_12 kitten_16 kitten_17) (fp.isPositive kitten_15)) (=> (spoon_13 kitten_16 kitten_17) (fp.isNegative kitten_15))))
(define-fun spoon_15 ((kitten_18 Real)) Real (* kitten_18 kitten_18))
(define-fun spoon_16 ((kitten_19 Float32) (kitten_20 Real)) Bool (or (and (fp.isPositive kitten_19) (< 0.0 kitten_20)) (and (fp.isNegative kitten_19) (< kitten_20 0.0))))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isInfinite kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isInfinite kitten_22) (fp.isNegative kitten_22)))
(define-fun spoon_19 ((kitten_23 Float64)) Bool (and (fp.isZero kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_20 ((kitten_24 Float64)) Bool (and (fp.isZero kitten_24) (fp.isNegative kitten_24)))
(declare-const cat_21 Int)
(define-fun spoon_22 ((kitten_25 Int)) Bool (and (<= (- cat_21) kitten_25) (<= kitten_25 cat_21)))
(define-fun spoon_23 ((kitten_26 Int)) Bool (and (<= (- 9007199254740992) kitten_26) (<= kitten_26 9007199254740992)))
(define-fun spoon_24 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isPositive kitten_28)) (and (fp.isNegative kitten_27) (fp.isNegative kitten_28))))
(define-fun spoon_25 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isNegative kitten_30)) (and (fp.isNegative kitten_29) (fp.isPositive kitten_30))))
(define-fun spoon_26 ((kitten_31 Float64) (kitten_32 Float64) (kitten_33 Float64)) Bool (and (=> (spoon_24 kitten_32 kitten_33) (fp.isPositive kitten_31)) (=> (spoon_25 kitten_32 kitten_33) (fp.isNegative kitten_31))))
(define-fun spoon_27 ((kitten_34 Float64) (kitten_35 Real)) Bool (or (and (fp.isPositive kitten_34) (< 0.0 kitten_35)) (and (fp.isNegative kitten_34) (< kitten_35 0.0))))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(assert (<= 0 cat_30))
(assert (<= 0 cat_31))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(assert (<= 0 cat_35))
(assert (< cat_35 cat_36))
(assert (<= 0 cat_37))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(define-fun spoon_41 ((kitten_38 Float64)) Bool (and (spoon_3 kitten_38) (and (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) kitten_38) (fp.leq kitten_38 (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_42 ((kitten_39 Float64) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000))) (spoon_41 kitten_39)))
(define-fun spoon_43 ((kitten_44 Float64)) Bool (and (spoon_3 kitten_44) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_44) (fp.leq kitten_44 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_44 ((kitten_45 Float64) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_43 kitten_45)))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(define-fun spoon_49 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_50)))
(declare-const cat_50 Float64)
(declare-const cat_51 Float64)
(declare-const cat_52 Float64)
(declare-const cat_53 Float64)
(declare-const cat_54 Float64)
(declare-const cat_55 Float32)
(declare-const cat_56 Float64)
(declare-const cat_57 Float64)
(declare-const cat_58 Float32)
(declare-const cat_59 Float64)
(declare-const cat_60 Float64)
(declare-const cat_61 Float32)
(declare-const cat_62 Float64)
(declare-const cat_63 Float64)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float64)
(declare-const cat_68 Float64)
(declare-const cat_69 Float64)
(declare-const cat_70 Float64)
(declare-const cat_71 Float64)
(declare-const cat_72 Float64)
(declare-const cat_73 Float64)
(declare-const cat_74 Float64)
(declare-const cat_75 Float64)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_41 cat_50)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_41 cat_51)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_43 cat_52)))
(assert (= cat_68 cat_50))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69) (and (= cat_54 cat_53) (spoon_3 cat_53))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69) (= cat_71 cat_54)))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (and (= cat_57 cat_56) (spoon_3 cat_56)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_72 cat_57))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (not (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_72 cat_52))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (=> (not (fp.lt cat_69 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_72 cat_67))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_69)) (= cat_71 cat_72)))
(assert (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_73)))
(assert (fp.lt cat_73 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))))
(assert (and (= cat_63 cat_62) (spoon_3 cat_62)))
(assert (= cat_75 cat_63))
(assert (not false))
(check-sat)
