(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Bool)) Int (ite (= kitten_19 true) 1 0))
(define-fun spoon_16 ((kitten_20 Int)) Bool (ite (= kitten_20 0) false true))
(define-fun spoon_17 ((kitten_21 Int)) Bool (or (= kitten_21 0) (= kitten_21 1)))
(define-fun spoon_18 ((kitten_22 Float32) (kitten_23 Bool) (kitten_24 Bool) (kitten_25 Bool)) Bool (=> (or (= kitten_23 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_22)))
(define-fun spoon_19 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(assert (<= 0 cat_20))
(assert (<= 0 cat_21))
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(declare-const cat_24 Int)
(assert (<= 0 cat_22))
(assert (< cat_22 cat_23))
(assert (<= 0 cat_24))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(declare-const cat_27 Int)
(assert (<= 0 cat_25))
(assert (< cat_25 cat_26))
(assert (<= 0 cat_27))
(define-fun spoon_28 ((kitten_27 Float32)) Bool (and (spoon_1 kitten_27) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_27) (fp.leq kitten_27 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_29 ((kitten_28 Float32) (kitten_29 Bool) (kitten_30 Bool) (kitten_31 Bool)) Bool (=> (or (= kitten_29 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_28 kitten_28)))
(define-fun spoon_30 ((kitten_32 Float32)) Bool (and (spoon_1 kitten_32) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_32) (fp.leq kitten_32 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_31 ((kitten_33 Float32) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_34 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_30 kitten_33)))
(define-fun spoon_32 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_37) (fp.leq kitten_37 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_33 ((kitten_38 Float32) (kitten_39 Bool) (kitten_40 Bool) (kitten_41 Bool)) Bool (=> (or (= kitten_39 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_32 kitten_38)))
(define-fun spoon_34 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_42) (fp.leq kitten_42 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_35 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_43) (fp.leq kitten_43 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_36 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_35 kitten_44)))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(define-fun spoon_40 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_41 ((kitten_49 Float32) (kitten_50 Bool) (kitten_51 Bool) (kitten_52 Bool)) Bool (=> (or (= kitten_50 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_40 kitten_49)))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Float32)
(declare-const cat_57 Int)
(define-fun spoon_58 ((kitten_53 Float32)) Bool (and (spoon_1 kitten_53) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) kitten_53) (fp.leq kitten_53 (fp #b0 #b01111111 #b00000000000000001010100)))))
(define-fun spoon_59 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100))) (spoon_58 kitten_54)))
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (= cat_56 (fp #b0 #b01101110 #b01001111100010110101100)))
(define-fun spoon_62 ((kitten_58 Float32) (kitten_59 Bool) (kitten_60 Bool) (kitten_61 Bool)) Bool (=> (or (= kitten_59 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_34 kitten_58)))
(define-fun spoon_63 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_19 kitten_62)))
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_40 cat_64)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_28 cat_65)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_28 cat_66)))
(assert (= cat_75 cat_67))
(assert (= cat_76 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_30 cat_76))
(assert (spoon_1 cat_56))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100)) (spoon_58 cat_68)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_32 cat_69)))
(assert (= cat_78 cat_70))
(assert (= cat_79 cat_71))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_78))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_79))
(assert (and (= cat_72 (fp.div RNE cat_77 (fp.mul RNE cat_78 cat_79))) (spoon_1 (fp.div RNE cat_77 (fp.mul RNE cat_78 cat_79)))))
(assert (not (spoon_58 cat_72)))
(check-sat)
