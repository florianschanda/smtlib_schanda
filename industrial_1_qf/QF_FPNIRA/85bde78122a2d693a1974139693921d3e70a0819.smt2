(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32)) Bool (and (spoon_1 kitten_18) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_18) (fp.leq kitten_18 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_15 Int)
(declare-const cat_16 Int)
(assert (<= 0 cat_15))
(assert (<= 0 cat_16))
(declare-const cat_17 Int)
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(assert (<= 0 cat_17))
(assert (< cat_17 cat_18))
(assert (<= 0 cat_19))
(declare-const cat_20 Int)
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(assert (<= 0 cat_20))
(assert (< cat_20 cat_21))
(assert (<= 0 cat_22))
(define-fun spoon_23 ((kitten_19 Float32)) Bool (and (spoon_1 kitten_19) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_19) (fp.leq kitten_19 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_24 ((kitten_20 Float32) (kitten_21 Bool) (kitten_22 Bool) (kitten_23 Bool)) Bool (=> (or (= kitten_21 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_23 kitten_20)))
(define-fun spoon_25 ((kitten_24 Float32)) Bool (and (spoon_1 kitten_24) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_24) (fp.leq kitten_24 (fp #b0 #b11111110 #b11111111111111111111111)))))
(define-fun spoon_26 ((kitten_25 Float32) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool)) Bool (=> (or (= kitten_26 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_25 kitten_25)))
(define-fun spoon_27 ((kitten_29 Float32)) Bool (and (spoon_1 kitten_29) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_29) (fp.leq kitten_29 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_28 ((kitten_30 Float32) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_31 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_27 kitten_30)))
(define-fun spoon_29 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_34) (fp.leq kitten_34 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_30 ((kitten_35 Float32) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_36 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_29 kitten_35)))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(define-fun spoon_36 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) kitten_39) (fp.leq kitten_39 (fp #b0 #b10100111 #b11010001101010011001011)))))
(define-fun spoon_37 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) (fp #b0 #b10100111 #b11010001101010011001011))) (spoon_36 kitten_40)))
(define-fun spoon_38 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) kitten_44) (fp.leq kitten_44 (fp #b0 #b10011010 #b00000001011111011111100)))))
(define-fun spoon_39 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100))) (spoon_38 kitten_45)))
(define-fun spoon_40 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_41 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_40 kitten_50)))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(define-fun spoon_50 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_14 kitten_54)))
(declare-const cat_51 Float32)
(declare-const cat_52 Float32)
(declare-const cat_53 Float32)
(declare-const cat_54 Float32)
(declare-const cat_55 Float32)
(declare-const cat_56 Float32)
(declare-const cat_57 Float32)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(declare-const cat_60 Float32)
(declare-const cat_61 Float32)
(declare-const cat_62 Float32)
(declare-const cat_63 Float32)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_29 cat_51)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_23 cat_52)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_40 cat_53)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_40 cat_54)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_38 cat_55)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_38 cat_56)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_38 cat_57)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_38 cat_58)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) (fp #b0 #b10100111 #b11010001101010011001011)) (spoon_36 cat_59)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_23 cat_60)))
(assert (= cat_69 cat_53))
(assert (= cat_71 cat_54))
(assert (= cat_73 cat_55))
(assert (= cat_74 (fp.add RNE (fp.mul RNE cat_70 cat_70) (fp.mul RNE cat_72 cat_72))))
(assert (not (fp.lt cat_74 (fp #b0 #b01110001 #b10100011011011100010111))))
(assert (= cat_75 cat_57))
(assert (and (= cat_61 (fp.div RNE cat_76 cat_74)) (spoon_1 (fp.div RNE cat_76 cat_74))))
(assert (and (= cat_62 cat_61) (spoon_1 cat_61)))
(assert (= cat_77 cat_59))
(assert (= cat_78 cat_62))
(assert (not (fp.leq cat_78 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (not (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) cat_78)))
(assert (= cat_79 cat_58))
(assert (and (= cat_63 cat_74) (spoon_1 cat_74)))
(declare-const cat_85 Float32)
(assert (and (= cat_64 cat_85) (spoon_27 cat_64)))
(assert (and (= cat_65 cat_64) (spoon_1 cat_64)))
(assert (= cat_81 cat_56))
(assert (= cat_82 cat_65))
(assert (not (spoon_1 (fp.div RNE (fp.abs cat_80) cat_82))))
(check-sat)
