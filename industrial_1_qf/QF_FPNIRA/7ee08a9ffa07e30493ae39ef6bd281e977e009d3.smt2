(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Bool)) Int (ite (= kitten_19 true) 1 0))
(define-fun spoon_16 ((kitten_20 Int)) Bool (ite (= kitten_20 0) false true))
(define-fun spoon_17 ((kitten_21 Int)) Bool (or (= kitten_21 0) (= kitten_21 1)))
(define-fun spoon_18 ((kitten_22 Float32) (kitten_23 Bool) (kitten_24 Bool) (kitten_25 Bool)) Bool (=> (or (= kitten_23 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_22)))
(define-fun spoon_19 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10000110 #b01101000000000000000000)))))
(define-fun spoon_20 ((kitten_27 Float32)) Bool (and (spoon_1 kitten_27) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_27) (fp.leq kitten_27 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_21 ((kitten_28 Float32) (kitten_29 Bool) (kitten_30 Bool) (kitten_31 Bool)) Bool (=> (or (= kitten_29 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_20 kitten_28)))
(declare-const cat_22 Float32)
(declare-const cat_23 Int)
(declare-const cat_24 Float32)
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(define-fun spoon_27 ((kitten_32 Float32) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_19 kitten_32)))
(declare-const cat_28 Float32)
(declare-const cat_29 Float32)
(declare-const cat_30 Float32)
(declare-const cat_31 Float32)
(declare-const cat_32 Float32)
(declare-const cat_33 Float32)
(declare-const cat_34 Float32)
(declare-const cat_35 Float32)
(declare-const cat_36 Float32)
(assert (spoon_20 cat_22))
(assert (spoon_20 cat_24))
(assert (or (not (fp.eq cat_22 (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq cat_24 (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_28)))
(declare-const cat_37 Float32)
(assert (and (= cat_29 cat_37) (and (spoon_1 cat_29) (=> (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_24) (fp.eq cat_22 (fp #b0 #b00000000 #b00000000000000000000000))) (fp.eq cat_29 (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (= cat_31 cat_28))
(assert (= cat_32 cat_29))
(assert (=> (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32) (= cat_33 cat_32)))
(assert (=> (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32) (= cat_34 (fp #b0 #b10000110 #b01101000000000000000000))))
(assert (=> (not (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32)) (=> (fp.lt cat_32 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))) (= cat_35 cat_32))))
(assert (=> (not (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32)) (=> (fp.lt cat_32 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))) (= cat_36 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))))))
(assert (=> (not (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32)) (=> (not (fp.lt cat_32 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)))) (= cat_36 cat_32))))
(assert (=> (not (fp.lt (fp #b0 #b10000110 #b01101000000000000000000) cat_32)) (= cat_34 cat_36)))
(assert (not (spoon_19 cat_34)))
(check-sat)
