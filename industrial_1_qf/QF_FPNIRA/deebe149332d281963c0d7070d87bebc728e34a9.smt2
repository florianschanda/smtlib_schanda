(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Bool)) Int (ite (= kitten_2 true) 1 0))
(define-fun spoon_3 ((kitten_3 Int)) Bool (ite (= kitten_3 0) false true))
(define-fun spoon_4 ((kitten_4 Int)) Bool (or (= kitten_4 0) (= kitten_4 1)))
(define-fun spoon_5 ((kitten_5 Int)) Bool (and (<= 0 kitten_5) (<= kitten_5 150000)))
(define-fun spoon_6 ((kitten_6 Int) (kitten_7 Bool) (kitten_8 Bool) (kitten_9 Bool)) Bool (=> (or (= kitten_7 true) (<= 0 150000)) (spoon_5 kitten_6)))
(declare-const cat_7 Int)
(declare-const cat_8 Int)
(assert (<= 0 cat_7))
(assert (<= 0 cat_8))
(declare-const cat_9 Int)
(declare-const cat_10 Int)
(declare-const cat_11 Int)
(assert (<= 0 cat_9))
(assert (< cat_9 cat_10))
(assert (<= 0 cat_11))
(declare-const cat_12 Int)
(declare-const cat_13 Int)
(declare-const cat_14 Int)
(assert (<= 0 cat_12))
(assert (< cat_12 cat_13))
(assert (<= 0 cat_14))
(define-fun spoon_15 ((kitten_10 Int)) Bool (and (<= 3 kitten_10) (<= kitten_10 30)))
(define-fun spoon_16 ((kitten_11 Float32)) Bool (and (fp.isInfinite kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_17 ((kitten_12 Float32)) Bool (and (fp.isInfinite kitten_12) (fp.isNegative kitten_12)))
(define-fun spoon_18 ((kitten_13 Float32)) Bool (and (fp.isZero kitten_13) (fp.isPositive kitten_13)))
(define-fun spoon_19 ((kitten_14 Float32)) Bool (and (fp.isZero kitten_14) (fp.isNegative kitten_14)))
(declare-const cat_20 Int)
(define-fun spoon_21 ((kitten_15 Int)) Bool (and (<= (- cat_20) kitten_15) (<= kitten_15 cat_20)))
(define-fun spoon_22 ((kitten_16 Int)) Bool (and (<= (- 16777216) kitten_16) (<= kitten_16 16777216)))
(define-fun spoon_23 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isPositive kitten_18)) (and (fp.isNegative kitten_17) (fp.isNegative kitten_18))))
(define-fun spoon_24 ((kitten_19 Float32) (kitten_20 Float32)) Bool (or (and (fp.isPositive kitten_19) (fp.isNegative kitten_20)) (and (fp.isNegative kitten_19) (fp.isPositive kitten_20))))
(define-fun spoon_25 ((kitten_21 Float32) (kitten_22 Float32) (kitten_23 Float32)) Bool (and (=> (spoon_23 kitten_22 kitten_23) (fp.isPositive kitten_21)) (=> (spoon_24 kitten_22 kitten_23) (fp.isNegative kitten_21))))
(define-fun spoon_26 ((kitten_24 Real)) Real (* kitten_24 kitten_24))
(define-fun spoon_27 ((kitten_25 Float32) (kitten_26 Real)) Bool (or (and (fp.isPositive kitten_25) (< 0.0 kitten_26)) (and (fp.isNegative kitten_25) (< kitten_26 0.0))))
(define-fun spoon_28 ((kitten_27 Float32) (kitten_28 Float32)) Bool (not (fp.eq kitten_27 kitten_28)))
(define-fun spoon_29 ((kitten_29 Float32) (kitten_30 Float32)) Bool (ite (fp.lt kitten_29 kitten_30) true false))
(define-fun spoon_30 ((kitten_31 Float32) (kitten_32 Float32)) Bool (ite (fp.leq kitten_31 kitten_32) true false))
(define-fun spoon_31 ((kitten_33 Float32) (kitten_34 Float32)) Bool (ite (fp.lt kitten_34 kitten_33) true false))
(define-fun spoon_32 ((kitten_35 Float32) (kitten_36 Float32)) Bool (ite (fp.leq kitten_36 kitten_35) true false))
(define-fun spoon_33 ((kitten_37 Float32) (kitten_38 Float32)) Bool (ite (fp.eq kitten_37 kitten_38) true false))
(define-fun spoon_34 ((kitten_39 Float32) (kitten_40 Float32)) Bool (ite (not (fp.eq kitten_39 kitten_40)) true false))
(declare-const cat_35 Bool)
(assert cat_35)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_36 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_37 ((kitten_42 Float32) (kitten_43 Float32)) Bool (ite (fp.eq kitten_42 kitten_43) true false))
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(assert (<= 0 cat_40))
(assert (< cat_40 cat_41))
(assert (<= 0 cat_42))
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(assert (<= 0 cat_43))
(assert (< cat_43 cat_44))
(assert (<= 0 cat_45))
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(assert (<= 0 cat_46))
(assert (<= 0 cat_47))
(assert (<= 0 cat_48))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(assert (<= 0 cat_54))
(assert (< cat_54 cat_55))
(assert (<= 0 cat_56))
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_57))
(assert (<= 0 cat_58))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(assert (<= 0 cat_62))
(assert (< cat_62 cat_63))
(assert (<= 0 cat_64))
(define-fun spoon_65 ((kitten_44 Int)) Bool (and (<= 1 kitten_44) (<= kitten_44 32)))
(define-fun spoon_66 ((kitten_45 Int) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (<= 1 32)) (spoon_65 kitten_45)))
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(assert (<= 0 cat_67))
(assert (<= 0 cat_68))
(assert (<= 0 cat_69))
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(assert (<= 0 cat_70))
(assert (<= 0 cat_71))
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(assert (<= 0 cat_72))
(assert (< cat_72 cat_73))
(assert (<= 0 cat_74))
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(assert (<= 0 cat_75))
(assert (< cat_75 cat_76))
(assert (<= 0 cat_77))
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(define-fun spoon_85 ((kitten_49 Float32) (kitten_50 Bool) (kitten_51 Bool) (kitten_52 Bool)) Bool (=> (or (= kitten_50 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_36 kitten_49)))
(define-fun spoon_86 ((kitten_53 Int) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (<= 3 30)) (spoon_15 kitten_53)))
(assert (spoon_5 cat_78))
(assert (spoon_65 cat_82))
(assert (<= 1 cat_82))
(assert (not (<= cat_82 32)))
(check-sat)
