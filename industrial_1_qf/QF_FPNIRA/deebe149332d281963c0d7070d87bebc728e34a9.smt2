(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Bool)) Int (ite (= kitten_2 true) 1 0))
(define-fun spoon_3 ((kitten_3 Int)) Bool (ite (= kitten_3 0) false true))
(define-fun spoon_4 ((kitten_4 Int)) Bool (or (= kitten_4 0) (= kitten_4 1)))
(define-fun spoon_5 ((kitten_5 Int)) Bool (and (<= 0 kitten_5) (<= kitten_5 150000)))
(define-fun spoon_6 ((kitten_6 Int) (kitten_7 Bool) (kitten_8 Bool) (kitten_9 Bool)) Bool (=> (or (= kitten_7 true) (<= 0 150000)) (spoon_5 kitten_6)))
(declare-const cat_7 Int)
(declare-const cat_8 Int)
(assert (<= 0 cat_7))
(assert (<= 0 cat_8))
(declare-const cat_9 Int)
(declare-const cat_10 Int)
(declare-const cat_11 Int)
(assert (<= 0 cat_9))
(assert (< cat_9 cat_10))
(assert (<= 0 cat_11))
(declare-const cat_12 Int)
(declare-const cat_13 Int)
(declare-const cat_14 Int)
(assert (<= 0 cat_12))
(assert (< cat_12 cat_13))
(assert (<= 0 cat_14))
(define-fun spoon_15 ((kitten_10 Int)) Bool (and (<= 3 kitten_10) (<= kitten_10 30)))
(define-fun spoon_16 ((kitten_11 Float32)) Bool (and (fp.isInfinite kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_17 ((kitten_12 Float32)) Bool (and (fp.isInfinite kitten_12) (fp.isNegative kitten_12)))
(define-fun spoon_18 ((kitten_13 Float32)) Bool (and (fp.isZero kitten_13) (fp.isPositive kitten_13)))
(define-fun spoon_19 ((kitten_14 Float32)) Bool (and (fp.isZero kitten_14) (fp.isNegative kitten_14)))
(declare-const cat_20 Int)
(define-fun spoon_21 ((kitten_15 Int)) Bool (and (<= (- cat_20) kitten_15) (<= kitten_15 cat_20)))
(define-fun spoon_22 ((kitten_16 Int)) Bool (and (<= (- 16777216) kitten_16) (<= kitten_16 16777216)))
(define-fun spoon_23 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isPositive kitten_18)) (and (fp.isNegative kitten_17) (fp.isNegative kitten_18))))
(define-fun spoon_24 ((kitten_19 Float32) (kitten_20 Float32)) Bool (or (and (fp.isPositive kitten_19) (fp.isNegative kitten_20)) (and (fp.isNegative kitten_19) (fp.isPositive kitten_20))))
(define-fun spoon_25 ((kitten_21 Float32) (kitten_22 Float32) (kitten_23 Float32)) Bool (and (=> (spoon_23 kitten_22 kitten_23) (fp.isPositive kitten_21)) (=> (spoon_24 kitten_22 kitten_23) (fp.isNegative kitten_21))))
(define-fun spoon_26 ((kitten_24 Real)) Real (* kitten_24 kitten_24))
(define-fun spoon_27 ((kitten_25 Float32) (kitten_26 Real)) Bool (or (and (fp.isPositive kitten_25) (< 0.0 kitten_26)) (and (fp.isNegative kitten_25) (< kitten_26 0.0))))
(define-fun spoon_28 ((kitten_27 Float32)) Bool (and (spoon_1 kitten_27) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_27) (fp.leq kitten_27 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(assert (<= 0 cat_29))
(assert (<= 0 cat_30))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_31))
(assert (< cat_31 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (<= 0 cat_38))
(assert (<= 0 cat_39))
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(assert (<= 0 cat_42))
(assert (< cat_42 cat_43))
(assert (<= 0 cat_44))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(assert (<= 0 cat_53))
(assert (< cat_53 cat_54))
(assert (<= 0 cat_55))
(define-fun spoon_56 ((kitten_28 Int)) Bool (and (<= 1 kitten_28) (<= kitten_28 32)))
(define-fun spoon_57 ((kitten_29 Int) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool)) Bool (=> (or (= kitten_30 true) (<= 1 32)) (spoon_56 kitten_29)))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(assert (<= 0 cat_58))
(assert (<= 0 cat_59))
(assert (<= 0 cat_60))
(declare-const cat_61 Int)
(declare-const cat_62 Int)
(assert (<= 0 cat_61))
(assert (<= 0 cat_62))
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(assert (<= 0 cat_63))
(assert (< cat_63 cat_64))
(assert (<= 0 cat_65))
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(assert (<= 0 cat_66))
(assert (< cat_66 cat_67))
(assert (<= 0 cat_68))
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(define-fun spoon_76 ((kitten_33 Float32) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_34 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_28 kitten_33)))
(define-fun spoon_77 ((kitten_37 Int) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (<= 3 30)) (spoon_15 kitten_37)))
(assert (spoon_5 cat_69))
(assert (spoon_56 cat_73))
(assert (<= 1 cat_73))
(assert (not (<= cat_73 32)))
(check-sat)
