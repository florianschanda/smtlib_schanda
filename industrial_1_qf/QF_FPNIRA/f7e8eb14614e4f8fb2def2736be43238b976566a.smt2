(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (and (fp.isInfinite kitten_2) (fp.isPositive kitten_2)))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isNegative kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isZero kitten_4) (fp.isPositive kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isNegative kitten_5)))
(declare-const cat_6 Int)
(define-fun spoon_7 ((kitten_6 Int)) Bool (and (<= (- cat_6) kitten_6) (<= kitten_6 cat_6)))
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- 16777216) kitten_7) (<= kitten_7 16777216)))
(define-fun spoon_9 ((kitten_8 Float32) (kitten_9 Float32)) Bool (or (and (fp.isPositive kitten_8) (fp.isPositive kitten_9)) (and (fp.isNegative kitten_8) (fp.isNegative kitten_9))))
(define-fun spoon_10 ((kitten_10 Float32) (kitten_11 Float32)) Bool (or (and (fp.isPositive kitten_10) (fp.isNegative kitten_11)) (and (fp.isNegative kitten_10) (fp.isPositive kitten_11))))
(define-fun spoon_11 ((kitten_12 Float32) (kitten_13 Float32) (kitten_14 Float32)) Bool (and (=> (spoon_9 kitten_13 kitten_14) (fp.isPositive kitten_12)) (=> (spoon_10 kitten_13 kitten_14) (fp.isNegative kitten_12))))
(define-fun spoon_12 ((kitten_15 Real)) Real (* kitten_15 kitten_15))
(define-fun spoon_13 ((kitten_16 Float32) (kitten_17 Real)) Bool (or (and (fp.isPositive kitten_16) (< 0.0 kitten_17)) (and (fp.isNegative kitten_16) (< kitten_17 0.0))))
(define-fun spoon_14 ((kitten_18 Float32) (kitten_19 Float32)) Bool (not (fp.eq kitten_18 kitten_19)))
(define-fun spoon_15 ((kitten_20 Float32) (kitten_21 Float32)) Bool (ite (fp.lt kitten_20 kitten_21) true false))
(define-fun spoon_16 ((kitten_22 Float32) (kitten_23 Float32)) Bool (ite (fp.leq kitten_22 kitten_23) true false))
(define-fun spoon_17 ((kitten_24 Float32) (kitten_25 Float32)) Bool (ite (fp.lt kitten_25 kitten_24) true false))
(define-fun spoon_18 ((kitten_26 Float32) (kitten_27 Float32)) Bool (ite (fp.leq kitten_27 kitten_26) true false))
(define-fun spoon_19 ((kitten_28 Float32) (kitten_29 Float32)) Bool (ite (fp.eq kitten_28 kitten_29) true false))
(define-fun spoon_20 ((kitten_30 Float32) (kitten_31 Float32)) Bool (ite (not (fp.eq kitten_30 kitten_31)) true false))
(declare-const cat_21 Bool)
(assert cat_21)
(assert (= (fp #b0 #b01111111 #b00000000000000000000000) ((_ to_fp 8 24) RNA (to_real 1))))
(define-fun spoon_22 ((kitten_32 Float32) (kitten_33 Float32)) Bool (ite (fp.eq kitten_32 kitten_33) true false))
(define-fun spoon_23 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001011 #b00000000000000000000000)))))
(define-fun spoon_24 ((kitten_35 Float32) (kitten_36 Float32)) Bool (ite (fp.eq kitten_35 kitten_36) true false))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_25))
(assert (<= 0 cat_26))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(assert (<= 0 cat_27))
(assert (< cat_27 cat_28))
(assert (<= 0 cat_29))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(assert (<= 0 cat_30))
(assert (< cat_30 cat_31))
(assert (<= 0 cat_32))
(define-fun spoon_33 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_34 ((kitten_38 Float32) (kitten_39 Float32)) Bool (ite (fp.eq kitten_38 kitten_39) true false))
(define-fun spoon_35 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_33 kitten_40)))
(define-fun spoon_36 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_44) (fp.leq kitten_44 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_37 ((kitten_45 Float32) (kitten_46 Float32)) Bool (ite (fp.eq kitten_45 kitten_46) true false))
(define-fun spoon_38 ((kitten_47 Float32) (kitten_48 Bool) (kitten_49 Bool) (kitten_50 Bool)) Bool (=> (or (= kitten_48 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_36 kitten_47)))
(define-fun spoon_39 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_51) (fp.leq kitten_51 (fp #b0 #b10001100 #b00000000000000000000000)))))
(define-fun spoon_40 ((kitten_52 Float32) (kitten_53 Float32)) Bool (ite (fp.eq kitten_52 kitten_53) true false))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(define-fun spoon_44 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b10110110 #b00000000000000000000000)))))
(define-fun spoon_45 ((kitten_55 Float32) (kitten_56 Float32)) Bool (ite (fp.eq kitten_55 kitten_56) true false))
(define-fun spoon_46 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000))) (spoon_44 kitten_57)))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(assert (<= 0 cat_47))
(assert (<= 0 cat_48))
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(assert (<= 0 cat_49))
(assert (< cat_49 cat_50))
(assert (<= 0 cat_51))
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(assert (<= 0 cat_52))
(assert (< cat_52 cat_53))
(assert (<= 0 cat_54))
(define-fun spoon_55 ((kitten_61 Float32)) Bool (and (spoon_1 kitten_61) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_61) (fp.leq kitten_61 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_56 ((kitten_62 Float32) (kitten_63 Float32)) Bool (ite (fp.eq kitten_62 kitten_63) true false))
(define-fun spoon_57 ((kitten_64 Float32) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_55 kitten_64)))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(define-fun spoon_67 ((kitten_68 Float32) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_69 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_68)))
(define-fun spoon_68 ((kitten_72 Float32) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool)) Bool (=> (or (= kitten_73 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_39 kitten_72)))
(define-fun spoon_69 ((kitten_76 Float32) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_23 kitten_76)))
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float32)
(declare-const cat_83 Float32)
(declare-const cat_84 Float32)
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_44 cat_70)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_44 cat_71)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_44 cat_72)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000)) (spoon_36 cat_73)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_33 cat_74)))
(assert (= cat_83 cat_75))
(assert (= cat_78 (fp.sub RNE cat_77 cat_76)))
(assert (= cat_84 cat_78))
(assert (and (= cat_79 (fp.sqrt RNE cat_83)) (spoon_1 (fp.sqrt RNE cat_83))))
(assert (= cat_85 cat_79))
(assert (=> (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_85) (fp.abs cat_84)) (= cat_86 (fp #b0 #b10110110 #b00000000000000000000000))))
(assert (=> (not (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_85) (fp.abs cat_84))) (and (= cat_80 (fp.div RNE (fp.abs cat_84) cat_85)) (spoon_1 (fp.div RNE (fp.abs cat_84) cat_85)))))
(assert (=> (not (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_85) (fp.abs cat_84))) (and (= cat_81 cat_80) (spoon_1 cat_80))))
(assert (=> (not (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_85) (fp.abs cat_84))) (= cat_87 cat_81)))
(assert (=> (not (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_85) (fp.abs cat_84))) (= cat_86 cat_87)))
(assert (not (fp.lt cat_86 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (not (fp.lt (fp #b0 #b10001100 #b01101010100000000000000) cat_86)))
(assert (not (spoon_33 cat_86)))
(check-sat)
