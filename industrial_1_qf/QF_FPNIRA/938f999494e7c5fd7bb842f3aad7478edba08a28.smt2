(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float64)) Bool (and (fp.isInfinite kitten_19) (fp.isPositive kitten_19)))
(define-fun spoon_16 ((kitten_20 Float64)) Bool (and (fp.isInfinite kitten_20) (fp.isNegative kitten_20)))
(define-fun spoon_17 ((kitten_21 Float64)) Bool (and (fp.isZero kitten_21) (fp.isPositive kitten_21)))
(define-fun spoon_18 ((kitten_22 Float64)) Bool (and (fp.isZero kitten_22) (fp.isNegative kitten_22)))
(declare-const cat_19 Int)
(define-fun spoon_20 ((kitten_23 Int)) Bool (and (<= (- cat_19) kitten_23) (<= kitten_23 cat_19)))
(define-fun spoon_21 ((kitten_24 Int)) Bool (and (<= (- 9007199254740992) kitten_24) (<= kitten_24 9007199254740992)))
(define-fun spoon_22 ((kitten_25 Float64) (kitten_26 Float64)) Bool (or (and (fp.isPositive kitten_25) (fp.isPositive kitten_26)) (and (fp.isNegative kitten_25) (fp.isNegative kitten_26))))
(define-fun spoon_23 ((kitten_27 Float64) (kitten_28 Float64)) Bool (or (and (fp.isPositive kitten_27) (fp.isNegative kitten_28)) (and (fp.isNegative kitten_27) (fp.isPositive kitten_28))))
(define-fun spoon_24 ((kitten_29 Float64) (kitten_30 Float64) (kitten_31 Float64)) Bool (and (=> (spoon_22 kitten_30 kitten_31) (fp.isPositive kitten_29)) (=> (spoon_23 kitten_30 kitten_31) (fp.isNegative kitten_29))))
(define-fun spoon_25 ((kitten_32 Float64) (kitten_33 Real)) Bool (or (and (fp.isPositive kitten_32) (< 0.0 kitten_33)) (and (fp.isNegative kitten_32) (< kitten_33 0.0))))
(define-fun spoon_26 ((kitten_34 Bool)) Int (ite (= kitten_34 true) 1 0))
(define-fun spoon_27 ((kitten_35 Int)) Bool (ite (= kitten_35 0) false true))
(define-fun spoon_28 ((kitten_36 Int)) Bool (or (= kitten_36 0) (= kitten_36 1)))
(define-fun spoon_29 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_37)))
(define-fun spoon_30 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10000101 #b01101000000000000000000)))))
(define-fun spoon_31 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_32))
(assert (<= 0 cat_33))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (< cat_37 cat_38))
(assert (<= 0 cat_39))
(define-fun spoon_40 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_43) (fp.leq kitten_43 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_41 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_40 kitten_44)))
(define-fun spoon_42 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b01111111 #b00000000000000000000000)))))
(define-fun spoon_43 ((kitten_49 Float32) (kitten_50 Bool) (kitten_51 Bool) (kitten_52 Bool)) Bool (=> (or (= kitten_50 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_42 kitten_49)))
(define-fun spoon_44 ((kitten_53 Float64) (kitten_54 Bool) (kitten_55 Bool) (kitten_56 Bool)) Bool (=> (or (= kitten_54 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_53)))
(define-fun spoon_45 ((kitten_57 Float64)) Bool (and (spoon_2 kitten_57) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_57) (fp.leq kitten_57 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(define-fun spoon_46 ((kitten_58 Float64) (kitten_59 Bool) (kitten_60 Bool) (kitten_61 Bool)) Bool (=> (or (= kitten_59 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_45 kitten_58)))
(define-fun spoon_47 ((kitten_62 Float64)) Bool (and (spoon_2 kitten_62) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_62) (fp.leq kitten_62 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(define-fun spoon_48 ((kitten_63 Float64) (kitten_64 Bool) (kitten_65 Bool) (kitten_66 Bool)) Bool (=> (or (= kitten_64 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_47 kitten_63)))
(define-fun spoon_49 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_30 kitten_67)))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Float64)
(declare-const cat_53 Int)
(declare-const cat_54 Float64)
(declare-const cat_55 Int)
(declare-const cat_56 Float32)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(define-fun spoon_60 ((kitten_71 Float32)) Bool (and (spoon_1 kitten_71) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_71) (fp.leq kitten_71 (fp #b0 #b10000111 #b01101000000000000000000)))))
(define-fun spoon_61 ((kitten_72 Float32) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool)) Bool (=> (or (= kitten_73 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_60 kitten_72)))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(define-fun spoon_76 ((kitten_76 Float32) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_31 kitten_76)))
(declare-const cat_77 Float64)
(declare-const cat_78 Float64)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(declare-const cat_82 Float64)
(declare-const cat_83 Float64)
(declare-const cat_84 Float64)
(declare-const cat_85 Float64)
(declare-const cat_86 Float64)
(declare-const cat_87 Float64)
(declare-const cat_88 Float64)
(declare-const cat_89 Float64)
(declare-const cat_90 Float64)
(declare-const cat_91 Float64)
(declare-const cat_92 Float64)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(declare-const cat_98 Float64)
(declare-const cat_99 Float32)
(declare-const cat_100 Float64)
(declare-const cat_101 Float32)
(declare-const cat_102 Float64)
(declare-const cat_103 Float32)
(declare-const cat_104 Float64)
(declare-const cat_105 Float32)
(declare-const cat_106 Float64)
(declare-const cat_107 Float32)
(declare-const cat_108 Float64)
(declare-const cat_109 Float64)
(declare-const cat_110 Float64)
(declare-const cat_111 Float64)
(declare-const cat_112 Float64)
(declare-const cat_113 Float64)
(declare-const cat_114 Float64)
(declare-const cat_115 Float64)
(declare-const cat_116 Float64)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float64)
(declare-const cat_120 Float64)
(declare-const cat_121 Float64)
(declare-const cat_122 Float64)
(declare-const cat_123 Bool)
(declare-const cat_124 Bool)
(declare-const cat_125 Float64)
(declare-const cat_126 Float64)
(declare-const cat_127 Bool)
(declare-const cat_128 Bool)
(declare-const cat_129 Float64)
(declare-const cat_130 Float64)
(declare-const cat_131 Float64)
(declare-const cat_132 Float64)
(declare-const cat_133 Float64)
(declare-const cat_134 Float64)
(declare-const cat_135 Float64)
(declare-const cat_136 Float64)
(declare-const cat_137 Float64)
(declare-const cat_138 Float64)
(declare-const cat_139 Float64)
(declare-const cat_140 Bool)
(declare-const cat_141 Bool)
(declare-const cat_142 Float64)
(declare-const cat_143 Float64)
(declare-const cat_144 Bool)
(declare-const cat_145 Bool)
(declare-const cat_146 Float64)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float32)
(declare-const cat_152 Float32)
(declare-const cat_153 Float64)
(declare-const cat_154 Float64)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float64)
(declare-const cat_160 Float64)
(declare-const cat_161 Float64)
(declare-const cat_162 Float64)
(declare-const cat_163 Float64)
(declare-const cat_164 Bool)
(declare-const cat_165 Bool)
(declare-const cat_166 Float64)
(declare-const cat_167 Float64)
(declare-const cat_168 Float64)
(declare-const cat_169 Float64)
(declare-const cat_170 Float64)
(declare-const cat_171 Float64)
(declare-const cat_172 Bool)
(declare-const cat_173 Bool)
(assert (spoon_47 cat_52))
(assert (spoon_45 cat_54))
(assert (spoon_1 cat_56))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_77)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_78)))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_56) (fp.leq cat_56 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_52) (fp.leq cat_52 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_40 cat_79)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_40 cat_80)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_40 cat_81)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_82)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_83)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_84)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_85)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_86)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_87)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_88)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_89)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_90)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_91)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_92)))
(declare-const cat_174 Float32)
(assert (and (= cat_94 cat_174) (spoon_40 cat_94)))
(assert (= cat_147 cat_80))
(assert (= cat_148 cat_94))
(assert (= cat_149 cat_79))
(assert (= cat_150 cat_95))
(assert (= cat_151 cat_81))
(assert (= cat_152 cat_96))
(declare-const cat_175 Float32)
(assert (and (= cat_97 cat_175) (spoon_42 cat_97)))
(assert (= cat_98 ((_ to_fp 11 53) RNE cat_97)))
(assert (= cat_153 cat_82))
(assert (= cat_154 cat_98))
(declare-const cat_176 Float32)
(assert (and (= cat_99 cat_176) (spoon_42 cat_99)))
(assert (= cat_100 ((_ to_fp 11 53) RNE cat_99)))
(assert (= cat_155 cat_83))
(assert (= cat_156 cat_100))
(declare-const cat_177 Float32)
(assert (and (= cat_101 cat_177) (spoon_42 cat_101)))
(assert (= cat_102 ((_ to_fp 11 53) RNE cat_101)))
(assert (= cat_157 cat_102))
(declare-const cat_178 Float32)
(assert (and (= cat_103 cat_178) (spoon_42 cat_103)))
(assert (= cat_104 ((_ to_fp 11 53) RNE cat_103)))
(assert (= cat_158 cat_104))
(declare-const cat_179 Float32)
(assert (and (= cat_105 cat_179) (spoon_42 cat_105)))
(assert (= cat_106 ((_ to_fp 11 53) RNE cat_105)))
(assert (= cat_159 cat_106))
(declare-const cat_180 Float32)
(assert (and (= cat_107 cat_180) (spoon_42 cat_107)))
(assert (= cat_108 ((_ to_fp 11 53) RNE cat_107)))
(assert (= cat_160 cat_108))
(assert (and (= cat_111 (fp.mul RNE cat_156 cat_158)) (spoon_2 (fp.mul RNE cat_156 cat_158))))
(assert (= cat_112 (fp.mul RNE cat_111 cat_160)))
(assert (and (= cat_113 cat_112) (spoon_2 cat_112)))
(assert (and (= cat_109 (fp.mul RNE cat_154 cat_157)) (spoon_2 (fp.mul RNE cat_154 cat_157))))
(assert (= cat_110 (fp.add RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_109)))
(assert (and (= cat_114 cat_110) (spoon_2 cat_110)))
(assert (= cat_115 (fp.add RNE cat_114 cat_113)))
(assert (and (= cat_116 cat_115) (spoon_2 cat_115)))
(assert (= cat_161 cat_116))
(assert (and (= cat_117 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_54) cat_159)) (spoon_2 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_54) cat_159))))
(assert (= cat_118 (fp.mul RNE cat_117 cat_156)))
(assert (and (= cat_119 cat_118) (spoon_2 cat_118)))
(assert (= cat_162 cat_119))
(assert (=> (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161) (and (= cat_120 (fp.div RNE cat_162 cat_161)) (spoon_2 (fp.div RNE cat_162 cat_161)))))
(assert (=> (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161) (= cat_163 cat_120)))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161) (and (= cat_126 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_161)) (spoon_2 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_161))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161) (= cat_127 (ite (fp.leq cat_162 cat_126) true false)))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161) (and (= cat_125 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_161)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_161))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161) (= cat_128 (ite (fp.leq cat_125 cat_162) true false)))))
(declare-const cat_181 Bool)
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161) (= cat_165 cat_181))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_161)) (= cat_165 false))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (= cat_165 true) (= cat_164 true))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_122 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_161)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_161)))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_123 (ite (fp.leq cat_162 cat_122) true false))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_121 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_161)) (spoon_2 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_161)))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_124 (ite (fp.leq cat_121 cat_162) true false))))))
(declare-const cat_182 Bool)
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_164 cat_182)))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_165 true)) (=> (not (fp.lt cat_161 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (= cat_164 false)))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (= cat_164 true) (and (= cat_129 (fp.div RNE cat_162 cat_161)) (spoon_2 (fp.div RNE cat_162 cat_161))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (= cat_164 true) (= cat_166 cat_129))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_164 true)) (=> (fp.lt cat_162 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_167 (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_164 true)) (=> (not (fp.lt cat_162 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (= cat_168 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_164 true)) (=> (not (fp.lt cat_162 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (= cat_167 cat_168)))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (=> (not (= cat_164 true)) (= cat_166 cat_167))))
(assert (=> (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_161)) (= cat_163 cat_166)))
(assert (and (= cat_130 (fp.mul RNE cat_154 cat_158)) (spoon_2 (fp.mul RNE cat_154 cat_158))))
(assert (= cat_169 cat_130))
(assert (and (= cat_131 (fp.mul RNE cat_156 cat_157)) (spoon_2 (fp.mul RNE cat_156 cat_157))))
(assert (= cat_132 (fp.mul RNE cat_131 cat_160)))
(assert (and (= cat_133 cat_132) (spoon_2 cat_132)))
(assert (= cat_170 cat_133))
(assert (not (spoon_2 (fp.sub RNE cat_169 cat_170))))
(check-sat)
