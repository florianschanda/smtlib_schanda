(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_FPNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unknown)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float32)) Bool (and (fp.isInfinite kitten_3) (fp.isPositive kitten_3)))
(define-fun spoon_4 ((kitten_4 Float32)) Bool (and (fp.isInfinite kitten_4) (fp.isNegative kitten_4)))
(define-fun spoon_5 ((kitten_5 Float32)) Bool (and (fp.isZero kitten_5) (fp.isPositive kitten_5)))
(define-fun spoon_6 ((kitten_6 Float32)) Bool (and (fp.isZero kitten_6) (fp.isNegative kitten_6)))
(declare-const cat_7 Int)
(define-fun spoon_8 ((kitten_7 Int)) Bool (and (<= (- cat_7) kitten_7) (<= kitten_7 cat_7)))
(define-fun spoon_9 ((kitten_8 Int)) Bool (and (<= (- 16777216) kitten_8) (<= kitten_8 16777216)))
(define-fun spoon_10 ((kitten_9 Float32) (kitten_10 Float32)) Bool (or (and (fp.isPositive kitten_9) (fp.isPositive kitten_10)) (and (fp.isNegative kitten_9) (fp.isNegative kitten_10))))
(define-fun spoon_11 ((kitten_11 Float32) (kitten_12 Float32)) Bool (or (and (fp.isPositive kitten_11) (fp.isNegative kitten_12)) (and (fp.isNegative kitten_11) (fp.isPositive kitten_12))))
(define-fun spoon_12 ((kitten_13 Float32) (kitten_14 Float32) (kitten_15 Float32)) Bool (and (=> (spoon_10 kitten_14 kitten_15) (fp.isPositive kitten_13)) (=> (spoon_11 kitten_14 kitten_15) (fp.isNegative kitten_13))))
(define-fun spoon_13 ((kitten_16 Real)) Real (* kitten_16 kitten_16))
(define-fun spoon_14 ((kitten_17 Float32) (kitten_18 Real)) Bool (or (and (fp.isPositive kitten_17) (< 0.0 kitten_18)) (and (fp.isNegative kitten_17) (< kitten_18 0.0))))
(define-fun spoon_15 ((kitten_19 Float32)) Bool (and (spoon_1 kitten_19) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_19) (fp.leq kitten_19 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-const cat_16 Int)
(declare-const cat_17 Int)
(assert (<= 0 cat_16))
(assert (<= 0 cat_17))
(declare-const cat_18 Int)
(declare-const cat_19 Int)
(declare-const cat_20 Int)
(assert (<= 0 cat_18))
(assert (< cat_18 cat_19))
(assert (<= 0 cat_20))
(declare-const cat_21 Int)
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(assert (<= 0 cat_21))
(assert (< cat_21 cat_22))
(assert (<= 0 cat_23))
(define-fun spoon_24 ((kitten_20 Float32)) Bool (and (spoon_1 kitten_20) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_20) (fp.leq kitten_20 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(assert (<= 0 cat_25))
(assert (<= 0 cat_26))
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(assert (<= 0 cat_27))
(assert (< cat_27 cat_28))
(assert (<= 0 cat_29))
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(assert (<= 0 cat_30))
(assert (< cat_30 cat_31))
(assert (<= 0 cat_32))
(define-fun spoon_33 ((kitten_21 Float32)) Bool (and (spoon_1 kitten_21) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_21) (fp.leq kitten_21 (fp #b0 #b10011010 #b00000000000000000000000)))))
(define-fun spoon_34 ((kitten_22 Float32) (kitten_23 Bool) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool)) Bool (=> (or (= kitten_23 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_33 kitten_22)))
(define-fun spoon_35 ((kitten_27 Float32)) Bool (and (spoon_1 kitten_27) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_27) (fp.leq kitten_27 (fp #b0 #b10001100 #b01101010100000000000000)))))
(define-fun spoon_36 ((kitten_28 Float32) (kitten_29 Bool) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool)) Bool (=> (or (= kitten_29 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_35 kitten_28)))
(define-fun spoon_37 ((kitten_33 Float32)) Bool (and (spoon_1 kitten_33) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_33) (fp.leq kitten_33 (fp #b0 #b10111111 #b00000000000000000110000)))))
(define-fun spoon_38 ((kitten_34 Float32) (kitten_35 Bool) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool)) Bool (=> (or (= kitten_35 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_37 kitten_34)))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(define-fun spoon_42 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) kitten_39) (fp.leq kitten_39 (fp #b0 #b10110110 #b00000000000000000000000)))))
(define-fun spoon_43 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000))) (spoon_42 kitten_40)))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(define-fun spoon_53 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_45)))
(define-fun spoon_54 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_24 kitten_50)))
(define-fun spoon_55 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_15 kitten_55)))
(declare-const cat_56 Float32)
(declare-const cat_57 Float32)
(declare-const cat_58 Float32)
(declare-const cat_59 Float32)
(declare-const cat_60 Float32)
(declare-const cat_61 Float32)
(declare-const cat_62 Float32)
(declare-const cat_63 Float32)
(declare-const cat_64 Float32)
(declare-const cat_65 Float32)
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 Float32)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_42 cat_56)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_42 cat_57)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_42 cat_58)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000)) (spoon_37 cat_59)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_35 cat_60)))
(assert (= cat_69 cat_61))
(assert (= cat_64 (fp.sub RNE cat_63 cat_62)))
(assert (= cat_70 cat_64))
(assert (and (= cat_65 (fp.sqrt RNE cat_69)) (spoon_1 (fp.sqrt RNE cat_69))))
(assert (= cat_71 cat_65))
(assert (not (fp.leq (fp.mul RNE (fp #b0 #b10110110 #b00000000000000000000000) cat_71) (fp.abs cat_70))))
(assert (not (not (fp.isZero cat_71))))
(check-sat)
