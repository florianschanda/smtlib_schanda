(set-info :source "Generated by Martin Brain on 2017-09-11 17:04:10+01:00 from revision 3122, file edge-cases.cpp (e9e19ccafc765b17a02ad5b1823da64784bdb15f6a6f20b565946f120425794c01655acf4691d527ae598c5ed453a1d66c9a6ec8728a695adf9acfc5091b43c9  edge-cases.cpp), benchmark negative_square_root_3_unsat using cbmc revision 6561 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function negative_square_root_3_unsat --round-to-zero edge-cases.cpp")
(set-logic QF_ABVFP)
(set-info :status unsat)
; SMT 2

; find_symbols
(declare-fun |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2| () Bool)
; convert
(define-fun |B0| () Bool (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|))

; find_symbols
(declare-fun |goto_symex::&92;guard#1| () Bool)
; convert
(define-fun |B1| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B2| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B3| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B4| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B5| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B6| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B7| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B8| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B9| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; convert
(define-fun |B10| () Bool (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|))

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::a@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |smtlib_sqrt::smtlib_sqrt(float)::f@1#1| () (_ FloatingPoint 8 24) |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::a@1#1|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.0(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.0(_ bv3 64)) (_ bv115 8)))
(assert (= (select string.0(_ bv4 64)) (_ bv113 8)))
(assert (= (select string.0(_ bv5 64)) (_ bv114 8)))
(assert (= (select string.0(_ bv6 64)) (_ bv116 8)))
(assert (= (select string.0(_ bv7 64)) (_ bv32 8)))
(assert (= (select string.0(_ bv8 64)) (_ bv82 8)))
(assert (= (select string.0(_ bv9 64)) (_ bv78 8)))
(assert (= (select string.0(_ bv10 64)) (_ bv69 8)))
(assert (= (select string.0(_ bv11 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_sqrt(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_sqrt$1!0@1#2| () (_ FloatingPoint 8 24) ( fp.sqrt RNE |smtlib_sqrt::smtlib_sqrt(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_sqrt(float)#return_value!0#1| () (_ FloatingPoint 8 24) |smtlib_sqrt(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_sqrt$1!0@1#2|)

; set_to true (equal)
(define-fun |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::1::sqrt@1#2| () (_ FloatingPoint 8 24) |smtlib_sqrt(float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_isNaN::smtlib_isNaN(float)::f@1#1| () (_ FloatingPoint 8 24) |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::1::sqrt@1#2|)

; the following is a substitute for a string
(declare-fun string.1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.1(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.1(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.1(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.1(_ bv5 64)) (_ bv78 8)))
(assert (= (select string.1(_ bv6 64)) (_ bv97 8)))
(assert (= (select string.1(_ bv7 64)) (_ bv78 8)))
(assert (= (select string.1(_ bv8 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@1#2| () Bool ( fp.isNaN |smtlib_isNaN::smtlib_isNaN(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNaN(float)#return_value!0#1| () Bool |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@1#2|)

; set_to true
(assert (= |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2| |smtlib_isNaN(float)#return_value!0#1|))

; set_to true
(assert (= |goto_symex::&92;guard#1| (not (fp.eq |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::a@1#1| (fp #b0 #b00000000 #b00000000000000000000000)))))

; set_to true (equal)
(define-fun |smtlib_isPositive::smtlib_isPositive(float)::f@1#1| () (_ FloatingPoint 8 24) |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::1::sqrt@1#2|)

; the following is a substitute for a string
(declare-fun string.2 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.2(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.2(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.2(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.2(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.2(_ bv5 64)) (_ bv80 8)))
(assert (= (select string.2(_ bv6 64)) (_ bv111 8)))
(assert (= (select string.2(_ bv7 64)) (_ bv115 8)))
(assert (= (select string.2(_ bv8 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv9 64)) (_ bv116 8)))
(assert (= (select string.2(_ bv10 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv11 64)) (_ bv118 8)))
(assert (= (select string.2(_ bv12 64)) (_ bv101 8)))
(assert (= (select string.2(_ bv13 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isPositive(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isPositive$1!0@1#2| () Bool ( fp.isPositive |smtlib_isPositive::smtlib_isPositive(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isPositive(float)#return_value!0#1| () Bool |smtlib_isPositive(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isPositive$1!0@1#2|)

; set_to true (equal)
(define-fun |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2| () Bool |smtlib_isPositive(float)#return_value!0#1|)

; set_to false
(assert (not (=> (and (not |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|) |goto_symex::&92;guard#1|) |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)))

; convert
(define-fun |B11| () Bool |negative_square_root_3_unsat(float)::$tmp::return_value_smtlib_isNaN$2!0@1#2|)

; convert
(define-fun |B12| () Bool (fp.eq |negative_square_root_3_unsat::negative_square_root_3_unsat(float)::a@1#1| (fp #b0 #b00000000 #b00000000000000000000000)))

(check-sat)


(exit)
; end of SMT2 file
