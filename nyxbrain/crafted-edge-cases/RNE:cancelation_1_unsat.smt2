(set-info :source "Generated by Martin Brain on 2017-09-11 17:05:20+01:00 from revision 3122, file rewrite-rules.cpp (fdf03bf392b41a809f35d488ae2fd86b392eb758ad972ab139c17ad7613a9481bc2942baec2db40aedf37ca11151a5363c8a0bc29aa2e8ecd70d2a4c1592fbfd  rewrite-rules.cpp), benchmark cancelation_1_unsat using cbmc revision 6561 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function cancelation_1_unsat --round-to-nearest rewrite-rules.cpp")
(set-logic QF_ABVFP)
(set-info :status unsat)
; SMT 2

; find_symbols
(declare-fun |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2| () Bool)
; convert
(define-fun |B0| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B1| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B2| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B3| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B4| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B5| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B6| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B7| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B8| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B9| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; convert
(define-fun |B10| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|)

; find_symbols
(declare-fun |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2| () Bool)
; convert
(define-fun |B11| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; convert
(define-fun |B12| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; convert
(define-fun |B13| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; convert
(define-fun |B14| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; convert
(define-fun |B15| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; convert
(define-fun |B16| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|)

; find_symbols
(declare-fun |goto_symex::&92;guard#1| () Bool)
; convert
(define-fun |B17| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B18| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B19| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B20| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B21| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B22| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B23| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B24| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B25| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B26| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B27| () Bool |goto_symex::&92;guard#1|)

; convert
(define-fun |B28| () Bool (not |goto_symex::&92;guard#1|))

; convert
(define-fun |B29| () Bool (not |goto_symex::&92;guard#1|))

; convert
(define-fun |B30| () Bool (not |goto_symex::&92;guard#1|))

; convert
(define-fun |B31| () Bool (not |goto_symex::&92;guard#1|))

; convert
(define-fun |B32| () Bool (not |goto_symex::&92;guard#1|))

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |cancelation_1_unsat::cancelation_1_unsat(float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |cancelation_1_unsat::cancelation_1_unsat(float)::1::cancel@1#2| () (_ FloatingPoint 8 24) (fp.sub roundNearestTiesToEven |cancelation_1_unsat::cancelation_1_unsat(float)::f@1#1| |cancelation_1_unsat::cancelation_1_unsat(float)::f@1#1|))

; set_to true (equal)
(define-fun |smtlib_isNaN::smtlib_isNaN(float)::f@1#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::f@1#1|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.0(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.0(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.0(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.0(_ bv5 64)) (_ bv78 8)))
(assert (= (select string.0(_ bv6 64)) (_ bv97 8)))
(assert (= (select string.0(_ bv7 64)) (_ bv78 8)))
(assert (= (select string.0(_ bv8 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@1#2| () Bool ( fp.isNaN |smtlib_isNaN::smtlib_isNaN(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNaN(float)#return_value!0#1| () Bool |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@1#2|)

; set_to true (equal)
(define-fun |cancelation_1_unsat::cancelation_1_unsat(float)::1::isNaN@1#2| () Bool |smtlib_isNaN(float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_isInfinite::smtlib_isInfinite(float)::f@1#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::f@1#1|)

; the following is a substitute for a string
(declare-fun string.1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.1(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.1(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.1(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.1(_ bv5 64)) (_ bv73 8)))
(assert (= (select string.1(_ bv6 64)) (_ bv110 8)))
(assert (= (select string.1(_ bv7 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv8 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv9 64)) (_ bv110 8)))
(assert (= (select string.1(_ bv10 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv11 64)) (_ bv116 8)))
(assert (= (select string.1(_ bv12 64)) (_ bv101 8)))
(assert (= (select string.1(_ bv13 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isInfinite(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isInfinite$1!0@1#2| () Bool ( fp.isInfinite |smtlib_isInfinite::smtlib_isInfinite(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isInfinite(float)#return_value!0#1| () Bool |smtlib_isInfinite(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isInfinite$1!0@1#2|)

; set_to true (equal)
(define-fun |cancelation_1_unsat::cancelation_1_unsat(float)::1::isInf@1#2| () Bool |smtlib_isInfinite(float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_isPositive::smtlib_isPositive(float)::f@2#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::1::cancel@1#2|)

; the following is a substitute for a string
(declare-fun string.2 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.2(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.2(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.2(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.2(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.2(_ bv5 64)) (_ bv80 8)))
(assert (= (select string.2(_ bv6 64)) (_ bv111 8)))
(assert (= (select string.2(_ bv7 64)) (_ bv115 8)))
(assert (= (select string.2(_ bv8 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv9 64)) (_ bv116 8)))
(assert (= (select string.2(_ bv10 64)) (_ bv105 8)))
(assert (= (select string.2(_ bv11 64)) (_ bv118 8)))
(assert (= (select string.2(_ bv12 64)) (_ bv101 8)))
(assert (= (select string.2(_ bv13 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isPositive(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isPositive$1!0@2#2| () Bool ( fp.isPositive |smtlib_isPositive::smtlib_isPositive(float)::f@2#1| ) )

; set_to true (equal)
(define-fun |smtlib_isPositive(float)#return_value!0#3| () Bool |smtlib_isPositive(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isPositive$1!0@2#2|)

; set_to true
(assert (= |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2| |smtlib_isPositive(float)#return_value!0#3|))

; set_to true (equal)
(define-fun |smtlib_isZero::smtlib_isZero(float)::f@1#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::1::cancel@1#2|)

; the following is a substitute for a string
(declare-fun string.3 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.3(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.3(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.3(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.3(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.3(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.3(_ bv5 64)) (_ bv90 8)))
(assert (= (select string.3(_ bv6 64)) (_ bv101 8)))
(assert (= (select string.3(_ bv7 64)) (_ bv114 8)))
(assert (= (select string.3(_ bv8 64)) (_ bv111 8)))
(assert (= (select string.3(_ bv9 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isZero(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isZero$1!0@1#2| () Bool ( fp.isZero |smtlib_isZero::smtlib_isZero(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isZero(float)#return_value!0#1| () Bool |smtlib_isZero(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isZero$1!0@1#2|)

; set_to true (equal)
(define-fun |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isZero$2!0@1#2| () Bool |smtlib_isZero(float)#return_value!0#1|)

; set_to true (equal)
(define-fun |cancelation_1_unsat(float)::$tmp::tmp_if_expr$3!0@1#2| () Bool |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isZero$2!0@1#2|)

; set_to true (equal)
(define-fun |cancelation_1_unsat(float)::$tmp::tmp_if_expr$3!0@1#5| () Bool (and |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2| |cancelation_1_unsat(float)::$tmp::tmp_if_expr$3!0@1#2|))

; set_to true (equal)
(define-fun |cancelation_1_unsat::cancelation_1_unsat(float)::1::posZero@1#2| () Bool |cancelation_1_unsat(float)::$tmp::tmp_if_expr$3!0@1#5|)

; set_to true (equal)
(define-fun |smtlib_isNegative::smtlib_isNegative(float)::f@2#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::1::cancel@1#2|)

; the following is a substitute for a string
(declare-fun string.4 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.4(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.4(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.4(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.4(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.4(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.4(_ bv5 64)) (_ bv78 8)))
(assert (= (select string.4(_ bv6 64)) (_ bv101 8)))
(assert (= (select string.4(_ bv7 64)) (_ bv103 8)))
(assert (= (select string.4(_ bv8 64)) (_ bv97 8)))
(assert (= (select string.4(_ bv9 64)) (_ bv116 8)))
(assert (= (select string.4(_ bv10 64)) (_ bv105 8)))
(assert (= (select string.4(_ bv11 64)) (_ bv118 8)))
(assert (= (select string.4(_ bv12 64)) (_ bv101 8)))
(assert (= (select string.4(_ bv13 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isNegative(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNegative$1!0@2#2| () Bool ( fp.isNegative |smtlib_isNegative::smtlib_isNegative(float)::f@2#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNegative(float)#return_value!0#3| () Bool |smtlib_isNegative(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNegative$1!0@2#2|)

; set_to true
(assert (= |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2| |smtlib_isNegative(float)#return_value!0#3|))

; set_to true
(assert (= |goto_symex::&92;guard#1| (not (and (not |cancelation_1_unsat::cancelation_1_unsat(float)::1::isInf@1#2|) (not |cancelation_1_unsat::cancelation_1_unsat(float)::1::isNaN@1#2|)))))

; set_to true (equal)
(define-fun |smtlib_isNaN::smtlib_isNaN(float)::f@2#1| () (_ FloatingPoint 8 24) |cancelation_1_unsat::cancelation_1_unsat(float)::1::cancel@1#2|)

; set_to true (equal)
(define-fun |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@2#2| () Bool ( fp.isNaN |smtlib_isNaN::smtlib_isNaN(float)::f@2#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNaN(float)#return_value!0#3| () Bool |smtlib_isNaN(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNaN$1!0@2#2|)

; set_to true (equal)
(define-fun |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNaN$7!0@1#2| () Bool |smtlib_isNaN(float)#return_value!0#3|)

; convert
(define-fun |B33| () Bool (=> true (=> |goto_symex::&92;guard#1| |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNaN$7!0@1#2|)))

; convert
(define-fun |B34| () Bool (=> true (=> (not |goto_symex::&92;guard#1|) |cancelation_1_unsat::cancelation_1_unsat(float)::1::posZero@1#2|)))

; set_to true
(assert (or (not |B33|) (not |B34|)))

; convert
(define-fun |B35| () Bool (not |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isPositive$1!0@1#2|))

; convert
(define-fun |B36| () Bool (not |cancelation_1_unsat(float)::$tmp::return_value_smtlib_isNegative$4!0@1#2|))

; convert
(define-fun |B37| () Bool (and (not |cancelation_1_unsat::cancelation_1_unsat(float)::1::isInf@1#2|) (not |cancelation_1_unsat::cancelation_1_unsat(float)::1::isNaN@1#2|)))

(check-sat)


(exit)
; end of SMT2 file
