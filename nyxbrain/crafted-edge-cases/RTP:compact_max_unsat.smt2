(set-info :source "Generated by Martin Brain on 2016-04-03 18:34:21+01:00 from revision 2796, file rewrite-rules.cpp (c0b2da853d54cfbdc1ad49f73403e801f6652730d16a6ccd9157a6ef5270fecae2404a0241f938fc6f82c2882bcbe5c51c876f4fa19baeeceee8687cc549c740  rewrite-rules.cpp), benchmark compact_max_unsat using cbmc revision  command /home/martin/working-copies/cbmc-trunk/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function compact_max_unsat --round-to-plus-inf rewrite-rules.cpp")
(set-logic QF_ABVFP)
(set-info :status unsat)
; SMT 2

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::recipg@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp #b0 #b01111111 #b00000000000000000000000) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::frecipg@1#2| () (_ FloatingPoint 8 24) (fp.mul roundNearestTiesToEven |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::recipg@1#2|))

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::divide@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp.mul roundNearestTiesToEven |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| (fp #b0 #b01111111 #b00000000000000000000000)) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::f@1#1| () (_ FloatingPoint 8 24) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::frecipg@1#2|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::g@1#1| () (_ FloatingPoint 8 24) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::divide@1#2|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv61 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2| () Bool ( = |smtlib_equal::smtlib_equal(float,float)::f@1#1| |smtlib_equal::smtlib_equal(float,float)::g@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_equal(float,float)#return_value!0#1| () Bool |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2|)

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::equal@1#2| () Bool |smtlib_equal(float,float)#return_value!0#1|)

; set_to false
(assert (not |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::equal@1#2|))

(check-sat)


(exit)
; end of SMT2 file
(set-info :source "Generated by Martin Brain on 2016-04-03 18:35:35+01:00 from revision 2796, file rewrite-rules.cpp (c0b2da853d54cfbdc1ad49f73403e801f6652730d16a6ccd9157a6ef5270fecae2404a0241f938fc6f82c2882bcbe5c51c876f4fa19baeeceee8687cc549c740  rewrite-rules.cpp), benchmark compact_max_unsat using cbmc revision 6525 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function compact_max_unsat --round-to-plus-inf rewrite-rules.cpp")
(set-logic QF_ABVFP)
(set-info :status unsat)
; SMT 2

; find_symbols
(declare-fun |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2| () Bool)
; convert
(define-fun |B0| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B1| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B2| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B3| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B4| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B5| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B6| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B7| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B8| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B9| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B10| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B11| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B12| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B13| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B14| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B15| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B16| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B17| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B18| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B19| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B20| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B21| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B22| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B23| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; convert
(define-fun |B24| () Bool |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|)

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |compact_max_unsat::compact_max_unsat(float,float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |compact_max_unsat::compact_max_unsat(float,float)::g@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::f@1#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::f@1#1|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::g@1#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::g@1#1|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv61 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2| () Bool ( = |smtlib_equal::smtlib_equal(float,float)::f@1#1| |smtlib_equal::smtlib_equal(float,float)::g@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_equal(float,float)#return_value!0#1| () Bool |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2|)

; set_to true
(assert (= |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2| |smtlib_equal(float,float)#return_value!0#1|))

; set_to true (equal)
(define-fun |smtlib_max::smtlib_max(float,float)::f@1#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::f@1#1|)

; set_to true (equal)
(define-fun |smtlib_max::smtlib_max(float,float)::g@1#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::g@1#1|)

; the following is a substitute for a string
(declare-fun string.1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.1(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.1(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.1(_ bv3 64)) (_ bv109 8)))
(assert (= (select string.1(_ bv4 64)) (_ bv97 8)))
(assert (= (select string.1(_ bv5 64)) (_ bv120 8)))
(assert (= (select string.1(_ bv6 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_max(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_max$1!0@1#2| () (_ FloatingPoint 8 24) ( fp.max |smtlib_max::smtlib_max(float,float)::f@1#1| |smtlib_max::smtlib_max(float,float)::g@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_max(float,float)#return_value!0#1| () (_ FloatingPoint 8 24) |smtlib_max(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_max$1!0@1#2|)

; set_to true (equal)
(define-fun |compact_max_unsat::compact_max_unsat(float,float)::1::1::max@1#2| () (_ FloatingPoint 8 24) |smtlib_max(float,float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::f@2#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::f@1#1|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::g@2#1| () (_ FloatingPoint 8 24) |compact_max_unsat::compact_max_unsat(float,float)::1::1::max@1#2|)

; set_to true (equal)
(define-fun |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@2#2| () Bool ( = |smtlib_equal::smtlib_equal(float,float)::f@2#1| |smtlib_equal::smtlib_equal(float,float)::g@2#1| ) )

; set_to true (equal)
(define-fun |smtlib_equal(float,float)#return_value!0#3| () Bool |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@2#2|)

; set_to true (equal)
(define-fun |compact_max_unsat::compact_max_unsat(float,float)::1::1::res@1#2| () Bool |smtlib_equal(float,float)#return_value!0#3|)

; set_to false
(assert (not (=> |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2| |compact_max_unsat::compact_max_unsat(float,float)::1::1::res@1#2|)))

; convert
(define-fun |B25| () Bool (not |compact_max_unsat(float,float)::$tmp::return_value_smtlib_equal$1!0@1#2|))

(check-sat)


(exit)
; end of SMT2 file
