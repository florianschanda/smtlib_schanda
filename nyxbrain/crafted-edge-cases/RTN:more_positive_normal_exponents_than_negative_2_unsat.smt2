(set-info :source "Generated by Martin Brain on 2017-07-10 15:35:40+01:00 from revision 2796, file edge-cases.cpp (0eebb57316aa8739600302d1ebe6d92e053e38860cd37760ba9f3264c05770159d045cbf84a26b6ba0dff97369b1a416558ddf5ef5ffc4a5f54968ab7884d3b3  edge-cases.cpp), benchmark more_positive_normal_exponents_than_negative_2_unsat using cbmc revision 6561 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function more_positive_normal_exponents_than_negative_2_unsat --round-to-minus-inf edge-cases.cpp")
(set-logic QF_ABVFP)
(set-info :status unsat)
; SMT 2

; find_symbols
(declare-fun |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::n@1#2| () Bool)
; convert
(define-fun |B0| () Bool |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::n@1#2|)

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::recipf@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp #b0 #b01111111 #b00000000000000000000000) |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::f@1#1|))

; set_to true (equal)
(define-fun |smtlib_isNormal::smtlib_isNormal(float)::f@1#1| () (_ FloatingPoint 8 24) |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::f@1#1|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.0(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.0(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.0(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.0(_ bv5 64)) (_ bv78 8)))
(assert (= (select string.0(_ bv6 64)) (_ bv111 8)))
(assert (= (select string.0(_ bv7 64)) (_ bv114 8)))
(assert (= (select string.0(_ bv8 64)) (_ bv109 8)))
(assert (= (select string.0(_ bv9 64)) (_ bv97 8)))
(assert (= (select string.0(_ bv10 64)) (_ bv108 8)))
(assert (= (select string.0(_ bv11 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isNormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNormal$1!0@1#2| () Bool ( fp.isNormal |smtlib_isNormal::smtlib_isNormal(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNormal(float)#return_value!0#1| () Bool |smtlib_isNormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNormal$1!0@1#2|)

; set_to true
(assert (= |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::n@1#2| |smtlib_isNormal(float)#return_value!0#1|))

; set_to true (equal)
(define-fun |smtlib_isNormal::smtlib_isNormal(float)::f@2#1| () (_ FloatingPoint 8 24) |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::recipf@1#2|)

; set_to true (equal)
(define-fun |smtlib_isNormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNormal$1!0@2#2| () Bool ( fp.isNormal |smtlib_isNormal::smtlib_isNormal(float)::f@2#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNormal(float)#return_value!0#3| () Bool |smtlib_isNormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNormal$1!0@2#2|)

; set_to true (equal)
(define-fun |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::rn@1#2| () Bool |smtlib_isNormal(float)#return_value!0#3|)

; set_to true (equal)
(define-fun |smtlib_isSubnormal::smtlib_isSubnormal(float)::f@1#1| () (_ FloatingPoint 8 24) |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::recipf@1#2|)

; the following is a substitute for a string
(declare-fun string.1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.1(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.1(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.1(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.1(_ bv5 64)) (_ bv83 8)))
(assert (= (select string.1(_ bv6 64)) (_ bv117 8)))
(assert (= (select string.1(_ bv7 64)) (_ bv98 8)))
(assert (= (select string.1(_ bv8 64)) (_ bv110 8)))
(assert (= (select string.1(_ bv9 64)) (_ bv111 8)))
(assert (= (select string.1(_ bv10 64)) (_ bv114 8)))
(assert (= (select string.1(_ bv11 64)) (_ bv109 8)))
(assert (= (select string.1(_ bv12 64)) (_ bv97 8)))
(assert (= (select string.1(_ bv13 64)) (_ bv108 8)))
(assert (= (select string.1(_ bv14 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isSubnormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isSubnormal$1!0@1#2| () Bool ( fp.isSubnormal |smtlib_isSubnormal::smtlib_isSubnormal(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isSubnormal(float)#return_value!0#1| () Bool |smtlib_isSubnormal(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isSubnormal$1!0@1#2|)

; set_to true (equal)
(define-fun |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::rs@1#2| () Bool |smtlib_isSubnormal(float)#return_value!0#1|)

; set_to false
(assert (not (=> |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::n@1#2| (or |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::rn@1#2| |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::rs@1#2|))))

; convert
(define-fun |B1| () Bool (not |more_positive_normal_exponents_than_negative_2_unsat::more_positive_normal_exponents_than_negative_2_unsat(float)::1::n@1#2|))

(check-sat)


(exit)
; end of SMT2 file
