(set-info :source "Generated by Martin Brain on 2017-07-10 15:36:00+01:00 from revision 2796, file edge-cases.cpp (0eebb57316aa8739600302d1ebe6d92e053e38860cd37760ba9f3264c05770159d045cbf84a26b6ba0dff97369b1a416558ddf5ef5ffc4a5f54968ab7884d3b3  edge-cases.cpp), benchmark reciprocal_is_injective_sat using cbmc revision 6561 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function reciprocal_is_injective_sat --round-to-minus-inf edge-cases.cpp")
(set-logic QF_ABVFP)
(set-info :status sat)
; SMT 2

; find_symbols
(declare-fun |goto_symex::&92;guard#1| () Bool)
; convert
(define-fun |B0| () Bool |goto_symex::&92;guard#1|)

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::a@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::b@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::equal@1#2| () Bool (fp.eq |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::a@1#1| |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::b@1#1|))

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipa@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp #b0 #b01111111 #b00000000000000000000000) |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::a@1#1|))

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipb@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp #b0 #b01111111 #b00000000000000000000000) |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::b@1#1|))

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipEqual@1#2| () Bool (fp.eq |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipa@1#2| |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipb@1#2|))

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::aRange@1#2| () Bool (and (fp.lt |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::a@1#1| (fp #b0 #b10000000 #b00000000000000000000000)) (fp.geq |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::a@1#1| (fp #b0 #b01111111 #b00000000000000000000000))))

; set_to true (equal)
(define-fun |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::bRange@1#2| () Bool (and (fp.lt |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::b@1#1| (fp #b0 #b10000000 #b00000000000000000000000)) (fp.geq |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::b@1#1| (fp #b0 #b01111111 #b00000000000000000000000))))

; set_to true
(assert (= |goto_symex::&92;guard#1| (not (or (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::aRange@1#2|) (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::bRange@1#2|) (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipEqual@1#2|)))))

; set_to false
(assert (not (=> |goto_symex::&92;guard#1| |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::equal@1#2|)))

; convert
(define-fun |B1| () Bool (or (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::aRange@1#2|) (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::bRange@1#2|) (not |reciprocal_is_injective_sat::reciprocal_is_injective_sat(float,float)::1::recipEqual@1#2|)))

(check-sat)


(exit)
; end of SMT2 file
