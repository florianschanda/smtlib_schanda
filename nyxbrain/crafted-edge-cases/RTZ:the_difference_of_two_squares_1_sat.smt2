(set-info :source "Generated by Martin Brain on 2017-07-11 16:09:26+01:00 from revision 2796, file edge-cases.cpp (4b120bd2a1986fe21b7a39c5fedd26a17da569bd481d1a75242dbf30da5d275efd5ffe0104db4c456209c4349f800bc0f6f63c396c054e124d8bb73d097227e0  edge-cases.cpp), benchmark the_difference_of_two_squares_1_sat using cbmc revision 6561 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function the_difference_of_two_squares_1_sat --round-to-zero edge-cases.cpp")
(set-logic QF_ABVFP)
(set-info :status sat)
; SMT 2

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::g@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |multiplyOut::multiplyOut(float,float)::f@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::f@1#1|)

; set_to true (equal)
(define-fun |multiplyOut::multiplyOut(float,float)::g@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::g@1#1|)

; set_to true (equal)
(define-fun |multiplyOut::multiplyOut(float,float)::1::f2@1#2| () (_ FloatingPoint 8 24) (fp.mul roundNearestTiesToEven |multiplyOut::multiplyOut(float,float)::f@1#1| |multiplyOut::multiplyOut(float,float)::f@1#1|))

; set_to true (equal)
(define-fun |multiplyOut::multiplyOut(float,float)::1::g2@1#2| () (_ FloatingPoint 8 24) (fp.mul roundNearestTiesToEven |multiplyOut::multiplyOut(float,float)::g@1#1| |multiplyOut::multiplyOut(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |multiplyOut::multiplyOut(float,float)::1::diff@1#2| () (_ FloatingPoint 8 24) (fp.sub roundNearestTiesToEven |multiplyOut::multiplyOut(float,float)::1::f2@1#2| |multiplyOut::multiplyOut(float,float)::1::g2@1#2|))

; set_to true (equal)
(define-fun |multiplyOut(float,float)#return_value!0#1| () (_ FloatingPoint 8 24) |multiplyOut::multiplyOut(float,float)::1::diff@1#2|)

; set_to true (equal)
(define-fun |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::one@1#2| () (_ FloatingPoint 8 24) |multiplyOut(float,float)#return_value!0#1|)

; set_to true (equal)
(define-fun |factor::factor(float,float)::f@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::f@1#1|)

; set_to true (equal)
(define-fun |factor::factor(float,float)::g@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::g@1#1|)

; set_to true (equal)
(define-fun |factor::factor(float,float)::1::fpg@1#2| () (_ FloatingPoint 8 24) (fp.add roundNearestTiesToEven |factor::factor(float,float)::f@1#1| |factor::factor(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |factor::factor(float,float)::1::fmg@1#2| () (_ FloatingPoint 8 24) (fp.sub roundNearestTiesToEven |factor::factor(float,float)::f@1#1| |factor::factor(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |factor::factor(float,float)::1::prod@1#2| () (_ FloatingPoint 8 24) (fp.mul roundNearestTiesToEven |factor::factor(float,float)::1::fpg@1#2| |factor::factor(float,float)::1::fmg@1#2|))

; set_to true (equal)
(define-fun |factor(float,float)#return_value!0#1| () (_ FloatingPoint 8 24) |factor::factor(float,float)::1::prod@1#2|)

; set_to true (equal)
(define-fun |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::two@1#2| () (_ FloatingPoint 8 24) |factor(float,float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::f@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::one@1#2|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::g@1#1| () (_ FloatingPoint 8 24) |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::two@1#2|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv61 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2| () Bool ( = |smtlib_equal::smtlib_equal(float,float)::f@1#1| |smtlib_equal::smtlib_equal(float,float)::g@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_equal(float,float)#return_value!0#1| () Bool |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2|)

; set_to true (equal)
(define-fun |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::res@1#2| () Bool |smtlib_equal(float,float)#return_value!0#1|)

; set_to false
(assert (not |the_difference_of_two_squares_1_sat::the_difference_of_two_squares_1_sat(float,float)::1::res@1#2|))

(check-sat)


(exit)
; end of SMT2 file
