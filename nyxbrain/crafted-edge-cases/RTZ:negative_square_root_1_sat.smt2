(set-info :source "Generated by Martin Brain on 2016-04-03 18:34:20+01:00 from revision 2796, file edge-cases.cpp (60bd30e63af58eacb9e259778fcbc5857834a6b2a936e7ca184971dedc36326c93ea4a98426232ff16acfdd80db4b14bb033fab703de4fd0797cb440d6ff328d  edge-cases.cpp), benchmark negative_square_root_1_sat using cbmc revision  command /home/martin/working-copies/cbmc-trunk/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function negative_square_root_1_sat --round-to-zero edge-cases.cpp")
(set-logic QF_ABVFP)
; SMT 2

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; find_symbols
(declare-fun |nondet_symex::nondet1| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet1|)

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::recipg@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp #b0 #b01111111 #b00000000000000000000000) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::frecipg@1#2| () (_ FloatingPoint 8 24) (fp.mul roundNearestTiesToEven |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::recipg@1#2|))

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::divide@1#2| () (_ FloatingPoint 8 24) (fp.div roundNearestTiesToEven (fp.mul roundNearestTiesToEven |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::f@1#1| (fp #b0 #b01111111 #b00000000000000000000000)) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::g@1#1|))

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::f@1#1| () (_ FloatingPoint 8 24) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::frecipg@1#2|)

; set_to true (equal)
(define-fun |smtlib_equal::smtlib_equal(float,float)::g@1#1| () (_ FloatingPoint 8 24) |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::divide@1#2|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv61 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2| () Bool ( = |smtlib_equal::smtlib_equal(float,float)::f@1#1| |smtlib_equal::smtlib_equal(float,float)::g@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_equal(float,float)#return_value!0#1| () Bool |smtlib_equal(float,float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_equal$1!0@1#2|)

; set_to true (equal)
(define-fun |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::equal@1#2| () Bool |smtlib_equal(float,float)#return_value!0#1|)

; set_to false
(assert (not |divide_is_almost_multiply_by_reciprocal_sat::divide_is_almost_multiply_by_reciprocal_sat(float,float)::1::equal@1#2|))

(check-sat)


(exit)
; end of SMT2 file
(set-info :source "Generated by Martin Brain on 2016-04-03 18:35:25+01:00 from revision 2796, file edge-cases.cpp (60bd30e63af58eacb9e259778fcbc5857834a6b2a936e7ca184971dedc36326c93ea4a98426232ff16acfdd80db4b14bb033fab703de4fd0797cb440d6ff328d  edge-cases.cpp), benchmark negative_square_root_1_sat using cbmc revision 6525 command /home/martin/working-copies/cbmc-subversion/src/cbmc//cbmc --slice-formula --smt2 --fpa --outfile tmp.smt2 --function negative_square_root_1_sat --round-to-zero edge-cases.cpp")
(set-logic QF_ABVFP)
; SMT 2

; find_symbols
(declare-fun |nondet_symex::nondet0| () (_ FloatingPoint 8 24))
; set_to true (equal)
(define-fun |negative_square_root_1_sat::negative_square_root_1_sat(float)::a@1#1| () (_ FloatingPoint 8 24) |nondet_symex::nondet0|)

; set_to true (equal)
(define-fun |smtlib_sqrt::smtlib_sqrt(float)::f@1#1| () (_ FloatingPoint 8 24) |negative_square_root_1_sat::negative_square_root_1_sat(float)::a@1#1|)

; the following is a substitute for a string
(declare-fun string.0 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.0(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.0(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.0(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.0(_ bv3 64)) (_ bv115 8)))
(assert (= (select string.0(_ bv4 64)) (_ bv113 8)))
(assert (= (select string.0(_ bv5 64)) (_ bv114 8)))
(assert (= (select string.0(_ bv6 64)) (_ bv116 8)))
(assert (= (select string.0(_ bv7 64)) (_ bv32 8)))
(assert (= (select string.0(_ bv8 64)) (_ bv82 8)))
(assert (= (select string.0(_ bv9 64)) (_ bv78 8)))
(assert (= (select string.0(_ bv10 64)) (_ bv69 8)))
(assert (= (select string.0(_ bv11 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_sqrt(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_sqrt$1!0@1#2| () (_ FloatingPoint 8 24) ( fp.sqrt RNE |smtlib_sqrt::smtlib_sqrt(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_sqrt(float)#return_value!0#1| () (_ FloatingPoint 8 24) |smtlib_sqrt(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_sqrt$1!0@1#2|)

; set_to true (equal)
(define-fun |negative_square_root_1_sat::negative_square_root_1_sat(float)::1::sqrt@1#2| () (_ FloatingPoint 8 24) |smtlib_sqrt(float)#return_value!0#1|)

; set_to true (equal)
(define-fun |smtlib_isNegative::smtlib_isNegative(float)::f@1#1| () (_ FloatingPoint 8 24) |negative_square_root_1_sat::negative_square_root_1_sat(float)::1::sqrt@1#2|)

; the following is a substitute for a string
(declare-fun string.1 () (Array (_ BitVec 64) (_ BitVec 8)))
(assert (= (select string.1(_ bv0 64)) (_ bv102 8)))
(assert (= (select string.1(_ bv1 64)) (_ bv112 8)))
(assert (= (select string.1(_ bv2 64)) (_ bv46 8)))
(assert (= (select string.1(_ bv3 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv4 64)) (_ bv115 8)))
(assert (= (select string.1(_ bv5 64)) (_ bv78 8)))
(assert (= (select string.1(_ bv6 64)) (_ bv101 8)))
(assert (= (select string.1(_ bv7 64)) (_ bv103 8)))
(assert (= (select string.1(_ bv8 64)) (_ bv97 8)))
(assert (= (select string.1(_ bv9 64)) (_ bv116 8)))
(assert (= (select string.1(_ bv10 64)) (_ bv105 8)))
(assert (= (select string.1(_ bv11 64)) (_ bv118 8)))
(assert (= (select string.1(_ bv12 64)) (_ bv101 8)))
(assert (= (select string.1(_ bv13 64)) (_ bv0 8)))
; set_to true (equal)
(define-fun |smtlib_isNegative(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNegative$1!0@1#2| () Bool ( fp.isNegative |smtlib_isNegative::smtlib_isNegative(float)::f@1#1| ) )

; set_to true (equal)
(define-fun |smtlib_isNegative(float)#return_value!0#1| () Bool |smtlib_isNegative(float)::$tmp::return_value___CPROVER_uninterpreted_smt_escape_float_isNegative$1!0@1#2|)

; set_to true (equal)
(define-fun |negative_square_root_1_sat(float)::$tmp::return_value_smtlib_isNegative$1!0@1#2| () Bool |smtlib_isNegative(float)#return_value!0#1|)

; set_to false
(assert (not |negative_square_root_1_sat(float)::$tmp::return_value_smtlib_isNegative$1!0@1#2|))

(check-sat)


(exit)
; end of SMT2 file
