(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

type double

logic value1 : double -> real

predicate no_overflow1(m: fpa_rounding_mode, x: real) =
  (abs_real(float64(m, x)) <= 0x1.FFFFFFFFFFFFFp1023)

axiom Bounded_real_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> no_overflow1(m, x)))

axiom Round_value1 :
  (forall m:fpa_rounding_mode. forall x:double.
  (float64(m, value1(x)) = value1(x)))

axiom Bounded_value1 :
  (forall x:double. (abs_real(value1(x)) <= 0x1.FFFFFFFFFFFFFp1023))

axiom Exact_rounding_for_integers1 :
  (forall m:fpa_rounding_mode. forall i:int. ((((-9007199254740992) <= i) and
  (i <= 9007199254740992)) -> (float64(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le1 : (forall x:real. (float64(Down, x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= float64(Up, x)))

axiom Round_down_neg1 :
  (forall x:real. (float64(Down, (-x)) = (-float64(Up, x))))

axiom Round_up_neg1 :
  (forall x:real. (float64(Up, (-x)) = (-float64(Down, x))))

logic round_logic1 : fpa_rounding_mode, real -> double

axiom Round_logic_def1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

logic class2 : double -> class

predicate is_finite1(x: double) = (class2(x) = Finite)

predicate is_infinite1(x: double) = (class2(x) = Infinite)

predicate is_NaN1(x: double) = (class2(x) = NaN)

predicate is_not_NaN3(x: double) = (is_finite1(x) or is_infinite1(x))

axiom is_not_NaN4 : (forall x:double. (is_not_NaN3(x) -> (not is_NaN1(x))))

axiom is_not_NaN5 : (forall x:double. ((not is_NaN1(x)) -> is_not_NaN3(x)))

logic sign2 : double -> sign

predicate same_sign_real2(x: double, y: real) = same_sign_real(sign2(x), y)

predicate same_sign1(x: double, y: double) = (sign2(x) = sign2(y))

predicate diff_sign1(x: double, y: double) = (not (sign2(x) = sign2(y)))

predicate sign_zero_result1(m: fpa_rounding_mode, x: double) =
  ((value1(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign2(x) = Pos)) and
  ((m = ToZero) -> (sign2(x) = Pos))) and ((m = Up) -> (sign2(x) = Pos))) and
  ((m = Down) -> (sign2(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign2(x) = Pos))))

predicate is_minus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Neg))

predicate is_plus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero1(x: double) = (is_finite1(x) and (value1(x) = 0.0))

predicate is_gen_zero_plus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero_minus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Neg))

axiom finite_sign1 :
  (forall x:double. (((class2(x) = Finite) and (not (value1(x) = 0.0))) ->
  same_sign_real2(x, value1(x))))

axiom finite_sign_pos11 :
  (forall x:double. (((class2(x) = Finite) and (0.0 <  value1(x))) ->
  (sign2(x) = Pos)))

axiom finite_sign_pos21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Pos))) -> (0.0 <  value1(x))))

axiom finite_sign_neg11 :
  (forall x:double. (((class2(x) = Finite) and (value1(x) <  0.0)) ->
  (sign2(x) = Neg)))

axiom finite_sign_neg21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Neg))) -> (value1(x) <  0.0)))

axiom diff_sign_trans1 :
  (forall x:double. forall y:double. forall z:double. ((diff_sign1(x, y) and
  diff_sign1(y, z)) -> same_sign1(x, z)))

axiom diff_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and ((value1(x) * value1(y)) <  0.0))) ->
  diff_sign1(x, y)))

axiom same_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and same_sign1(x, y))) ->
  (0.0 <= (value1(x) * value1(y)))))

predicate overflow_value1(m: fpa_rounding_mode, x: double) =
  (((sign2(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite1(x)) and
  ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and ((m = Up) ->
  (is_finite1(x) and (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and
  ((m = Down) -> is_infinite1(x))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))) and ((sign2(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite1(x)) and ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = Up) ->
  is_infinite1(x))) and ((m = Down) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))))

axiom round12 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  is_finite1(round_logic1(m, x))))

axiom round13 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

axiom round22 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  same_sign_real2(round_logic1(m, x), x)))

axiom round23 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  overflow_value1(m, round_logic1(m, x))))

axiom round_of_zero1 :
  (forall m:fpa_rounding_mode. is_gen_zero1(round_logic1(m, 0.0)))

axiom round_logic_le1 :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite1(round_logic1(m,
  x)) -> (abs_real(value1(round_logic1(m, x))) <= 0x1.FFFFFFFFFFFFFp1023)))

axiom round_no_overflow2 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> is_finite1(round_logic1(m,
  x))))

axiom round_no_overflow3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> (value1(round_logic1(m,
  x)) = float64(m, x))))

logic min1 : real

axiom positive_constant3 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> is_finite1(round_logic1(m, x))))

axiom positive_constant4 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (0.0 <  value1(round_logic1(m, x)))))

axiom positive_constant5 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (sign2(round_logic1(m, x)) = Pos)))

axiom negative_constant3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  is_finite1(round_logic1(m, x))))

axiom negative_constant4 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (value1(round_logic1(m, x)) <  0.0)))

axiom negative_constant5 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (sign2(round_logic1(m, x)) = Neg)))

axiom is_gen_zero_comp11 :
  (forall x:double. forall y:double. ((is_gen_zero1(x) and
  ((value1(x) = value1(y)) and is_finite1(y))) -> is_gen_zero1(y)))

axiom is_gen_zero_comp21 :
  (forall x:double. forall y:double. ((is_finite1(x) and
  ((not is_gen_zero1(x)) and (value1(x) = value1(y)))) ->
  (not is_gen_zero1(y))))

predicate add_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and same_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((same_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not same_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) + value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) + value1(y)))) and ((same_sign1(x,
  y) -> same_sign1(r, x)) and ((not same_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) + value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) + value1(y))) and overflow_value1(m, r))))))))

predicate sub_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and diff_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((diff_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not diff_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) - value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) - value1(y)))) and ((diff_sign1(x,
  y) -> same_sign1(r, x)) and ((not diff_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) - value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) - value1(y))) and overflow_value1(m, r))))))))

predicate product_sign1(z: double, x: double, y: double) = ((same_sign1(x,
  y) -> (sign2(z) = Pos)) and (diff_sign1(x, y) -> (sign2(z) = Neg)))

predicate mul_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_gen_zero1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  (is_infinite1(y) and (not (value1(x) = 0.0)))) -> is_infinite1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and (is_finite1(y) and (not (value1(y) = 0.0)))) ->
  is_infinite1(r)) and (((is_infinite1(x) and is_infinite1(y)) ->
  is_infinite1(r)) and (((is_finite1(x) and (is_finite1(y) and
  no_overflow1(m, (value1(x) * value1(y))))) -> (is_finite1(r) and
  (value1(r) = float64(m, (value1(x) * value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) * value1(y)))))) -> overflow_value1(m, r)) and
  ((not is_NaN1(r)) -> product_sign1(r, x, y))))))))))

predicate neg_post1(x: double, r: double) = ((is_NaN1(x) -> is_NaN1(r)) and
  ((is_infinite1(x) -> is_infinite1(r)) and ((is_finite1(x) ->
  (is_finite1(r) and (value1(r) = (-value1(x))))) and ((not is_NaN1(x)) ->
  diff_sign1(r, x)))))

predicate div_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> is_gen_zero1(r)) and (((is_infinite1(x) and
  is_finite1(y)) -> is_infinite1(r)) and (((is_infinite1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and (is_finite1(y) and
  ((not (value1(y) = 0.0)) and no_overflow1(m, (value1(x) / value1(y)))))) ->
  (is_finite1(r) and (value1(r) = float64(m, (value1(x) / value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  (not no_overflow1(m, (value1(x) / value1(y))))))) -> overflow_value1(m,
  r)) and (((is_finite1(x) and (is_gen_zero1(y) and
  (not (value1(x) = 0.0)))) -> is_infinite1(r)) and (((is_gen_zero1(x) and
  is_gen_zero1(y)) -> is_NaN1(r)) and ((not is_NaN1(r)) -> product_sign1(r,
  x, y))))))))))

predicate fma_post1(m: fpa_rounding_mode, x: double, y: double, z: double,
  r: double) = (((is_NaN1(x) or (is_NaN1(y) or is_NaN1(z))) ->
  is_NaN1(r)) and (((is_gen_zero1(x) and is_infinite1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_infinite1(y) and is_finite1(z))) ->
  (is_infinite1(r) and product_sign1(r, x, y))) and (((is_finite1(x) and
  (is_finite1(y) and is_infinite1(z))) -> (is_infinite1(r) and same_sign1(r,
  z))) and (((is_infinite1(x) and (is_infinite1(y) and is_infinite1(z))) ->
  ((product_sign1(z, x, y) -> (is_infinite1(r) and same_sign1(r, z))) and
  ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and (((is_finite1(x) and
  (is_finite1(y) and (is_finite1(z) and no_overflow1(m,
  ((value1(x) * value1(y)) + value1(z)))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, ((value1(x) * value1(y)) + value1(z)))) and
  ((product_sign1(z, x, y) -> same_sign1(r, z)) and ((not product_sign1(z, x,
  y)) -> ((((value1(x) * value1(y)) + value1(z)) = 0.0) -> (((m = Down) ->
  (sign2(r) = Neg)) and ((not (m = Down)) -> (sign2(r) = Pos))))))))) and
  ((is_finite1(x) and (is_finite1(y) and (is_finite1(z) and
  (not no_overflow1(m, ((value1(x) * value1(y)) + value1(z))))))) ->
  (same_sign_real(sign2(r), ((value1(x) * value1(y)) + value1(z))) and
  overflow_value1(m, r))))))))))))))

predicate sqrt_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_plus_infinity1(x) ->
  is_plus_infinity1(r)) and ((is_minus_infinity1(x) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) <  0.0)) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) = 0.0)) -> (is_finite1(r) and
  ((value1(r) = 0.0) and same_sign1(r, x)))) and ((is_finite1(x) and
  (0.0 <  value1(x))) -> (is_finite1(r) and
  ((value1(r) = float64(m, sqrt_real(value1(x)))) and
  (sign2(r) = Pos)))))))))

predicate roundToIntegral_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_infinite1(x) -> (is_infinite1(r) and
  same_sign1(x, r))) and (is_finite1(x) -> (same_sign1(x, r) and
  (value1(r) = real_of_int(integer_round(m, value1(x))))))))

predicate of_real_exact_post1(x: real, r: double) = (is_finite1(r) and
  (value1(r) = x))

predicate le1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <= value1(y)))) or ((is_minus_infinity1(x) and
  is_not_NaN3(y)) or (is_not_NaN3(x) and is_plus_infinity1(y))))

predicate lt1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <  value1(y)))) or ((is_minus_infinity1(x) and
  (is_not_NaN3(y) and (not is_minus_infinity1(y)))) or (is_not_NaN3(x) and
  ((not is_plus_infinity1(x)) and is_plus_infinity1(y)))))

predicate eq1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) = value1(y)))) or (is_infinite1(x) and (is_infinite1(y) and
  same_sign1(x, y))))

predicate ne1(x: double, y: double) = (not eq1(x, y))

predicate rem_post1(x: double, y: double, r: double) = (((is_NaN1(x) or
  (is_NaN1(y) or (is_infinite1(x) or is_gen_zero1(y)))) -> is_NaN1(r)) and
  ((not (is_NaN1(x) or (is_NaN1(y) or (is_infinite1(x) or
  is_gen_zero1(y))))) -> ((is_infinite1(y) -> eq1(x, r)) and
  ((not is_infinite1(y)) -> (is_finite1(r) and (((value1(r) = 0.0) ->
  same_sign1(x, r)) and
  (value1(r) = (value1(x) - (value1(y) * real_of_int(integer_round(NearestTiesToEven, (value1(x) / value1(y)))))))))))))

axiom le_lt_trans1 :
  (forall x:double. forall y:double. forall z:double. ((le1(x, y) and lt1(y,
  z)) -> lt1(x, z)))

axiom lt_le_trans1 :
  (forall x:double. forall y:double. forall z:double. ((lt1(x, y) and le1(y,
  z)) -> lt1(x, z)))

axiom le_ge_asym1 :
  (forall x:double. forall y:double. ((le1(x, y) and le1(y, x)) -> eq1(x,
  y)))

axiom not_lt_ge1 :
  (forall x:double. forall y:double. (((not lt1(x, y)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(y, x)))

axiom not_gt_le1 :
  (forall x:double. forall y:double. (((not lt1(y, x)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(x, y)))

predicate single_to_double_cast(x: single, r: double) = ((is_NaN(x) ->
  is_NaN1(r)) and (is_finite(x) -> (is_finite1(r) and
  ((value1(r) = value(x)) and (sign2(r) = sign1(x))))))

predicate double_to_single_cast(m: fpa_rounding_mode, x: double, r: single) =
  ((is_NaN1(x) -> is_NaN(r)) and ((is_infinite1(x) -> (is_infinite(r) and
  (sign1(r) = sign2(x)))) and (((is_finite1(x) and no_overflow(m,
  value1(x))) -> (is_finite(r) and ((value(r) = float32(m, value1(x))) and
  (sign1(r) = sign2(x))))) and ((is_finite1(x) and (not no_overflow(m,
  value1(x)))) -> ((sign1(r) = sign2(x)) and overflow_value(m, r))))))

predicate smt2_single_eq(x: single, y: single) = (((is_finite(x) and
  (is_finite(y) and ((value(x) = value(y)) and same_sign(x, y)))) or
  (is_infinite(x) and (is_infinite(y) and same_sign(x, y)))) or
  (is_NaN(x) and is_NaN(y)))

logic b911 : single

logic b772 : single

logic b856 : single

logic b832 : single

logic b155 : single

logic b896 : single

logic b531 : single

logic b244 : double

logic b777 : single

logic b906 : single

logic b770 : single

logic b866 : single

logic b162 : single

logic b891 : single

logic b227 : double

logic b210 : double

logic b379 : double

logic b328 : double

logic b807 : single

logic b827 : single

logic b787 : single

logic b362 : double

logic b881 : single

logic b851 : single

logic b817 : single

logic b261 : double

logic b528 : single

logic b871 : single

logic b846 : single

logic b312 : double

logic b194 : double

logic b345 : double

logic b782 : single

logic b916 : single

logic b886 : single

logic b295 : double

logic b413 : double

logic b185 : double

logic b792 : single

logic b861 : single

logic b837 : single

logic b812 : single

logic b901 : single

logic b797 : single

logic b822 : single

logic b765 : single

logic b278 : double

logic b172 : double

logic b876 : single

logic b153 : single

logic b802 : single

logic b396 : double

logic s_mul__t_3__t_9__t_9 : single

axiom eq_0 : mul_post(NearestTiesToEven, b153, b153, s_mul__t_3__t_9__t_9)

logic ust_10 : single

axiom eq_1 : mul_post(NearestTiesToEven, b153, b153, ust_10)

logic s_neg__t_10 : single

axiom eq_2 : neg_post(ust_10, s_neg__t_10)

logic ust_11 : single

axiom eq_3 : neg_post(ust_10, ust_11)

logic s_mul__t_3__t_9__t_11 : single

axiom eq_4 : mul_post(NearestTiesToEven, b153, ust_11, s_mul__t_3__t_9__t_11)

logic ust_12 : single

axiom eq_5 : mul_post(NearestTiesToEven, b153, ust_11, ust_12)

logic double_of_single__t_3__t_12 : double

axiom eq_6 : single_to_double_cast(ust_12, double_of_single__t_3__t_12)

logic ust_13 : double

axiom eq_7 : single_to_double_cast(ust_12, ust_13)

logic d_div__t_3__t_13__t_14 : double

axiom eq_8 : div_post1(NearestTiesToEven, ust_13, b172,
  d_div__t_3__t_13__t_14)

logic ust_15 : double

axiom eq_9 : div_post1(NearestTiesToEven, ust_13, b172, ust_15)

logic single_of_double__t_3__t_15 : single

axiom eq_10 : double_to_single_cast(NearestTiesToEven, ust_15,
  single_of_double__t_3__t_15)

logic ust_16 : single

axiom eq_11 : double_to_single_cast(NearestTiesToEven, ust_15, ust_16)

predicate ust_19() = (not smt2_single_eq(ust_16, b916))

logic s_mul__t_3__t_11__t_16 : single

axiom eq_12 : mul_post(NearestTiesToEven, ust_11, ust_16,
  s_mul__t_3__t_11__t_16)

logic ust_20 : single

axiom eq_13 : mul_post(NearestTiesToEven, ust_11, ust_16, ust_20)

logic double_of_single__t_3__t_20 : double

axiom eq_14 : single_to_double_cast(ust_20, double_of_single__t_3__t_20)

logic ust_21 : double

axiom eq_15 : single_to_double_cast(ust_20, ust_21)

logic d_div__t_3__t_21__t_22 : double

axiom eq_16 : div_post1(NearestTiesToEven, ust_21, b194,
  d_div__t_3__t_21__t_22)

logic ust_23 : double

axiom eq_17 : div_post1(NearestTiesToEven, ust_21, b194, ust_23)

logic single_of_double__t_3__t_23 : single

axiom eq_18 : double_to_single_cast(NearestTiesToEven, ust_23,
  single_of_double__t_3__t_23)

logic ust_24 : single

axiom eq_19 : double_to_single_cast(NearestTiesToEven, ust_23, ust_24)

predicate ust_27() = (not smt2_single_eq(ust_24, b911))

logic s_mul__t_3__t_11__t_24 : single

axiom eq_20 : mul_post(NearestTiesToEven, ust_11, ust_24,
  s_mul__t_3__t_11__t_24)

logic ust_28 : single

axiom eq_21 : mul_post(NearestTiesToEven, ust_11, ust_24, ust_28)

logic double_of_single__t_3__t_28 : double

axiom eq_22 : single_to_double_cast(ust_28, double_of_single__t_3__t_28)

logic ust_29 : double

axiom eq_23 : single_to_double_cast(ust_28, ust_29)

logic d_div__t_3__t_29__t_30 : double

axiom eq_24 : div_post1(NearestTiesToEven, ust_29, b210,
  d_div__t_3__t_29__t_30)

logic ust_31 : double

axiom eq_25 : div_post1(NearestTiesToEven, ust_29, b210, ust_31)

logic single_of_double__t_3__t_31 : single

axiom eq_26 : double_to_single_cast(NearestTiesToEven, ust_31,
  single_of_double__t_3__t_31)

logic ust_32 : single

axiom eq_27 : double_to_single_cast(NearestTiesToEven, ust_31, ust_32)

predicate ust_35() = (not smt2_single_eq(ust_32, b906))

logic s_mul__t_3__t_11__t_32 : single

axiom eq_28 : mul_post(NearestTiesToEven, ust_11, ust_32,
  s_mul__t_3__t_11__t_32)

logic ust_36 : single

axiom eq_29 : mul_post(NearestTiesToEven, ust_11, ust_32, ust_36)

logic double_of_single__t_3__t_36 : double

axiom eq_30 : single_to_double_cast(ust_36, double_of_single__t_3__t_36)

logic ust_37 : double

axiom eq_31 : single_to_double_cast(ust_36, ust_37)

logic d_div__t_3__t_37__t_38 : double

axiom eq_32 : div_post1(NearestTiesToEven, ust_37, b227,
  d_div__t_3__t_37__t_38)

logic ust_39 : double

axiom eq_33 : div_post1(NearestTiesToEven, ust_37, b227, ust_39)

logic single_of_double__t_3__t_39 : single

axiom eq_34 : double_to_single_cast(NearestTiesToEven, ust_39,
  single_of_double__t_3__t_39)

logic ust_40 : single

axiom eq_35 : double_to_single_cast(NearestTiesToEven, ust_39, ust_40)

predicate ust_43() = (not smt2_single_eq(ust_40, b901))

logic s_mul__t_3__t_11__t_40 : single

axiom eq_36 : mul_post(NearestTiesToEven, ust_11, ust_40,
  s_mul__t_3__t_11__t_40)

logic ust_44 : single

axiom eq_37 : mul_post(NearestTiesToEven, ust_11, ust_40, ust_44)

logic double_of_single__t_3__t_44 : double

axiom eq_38 : single_to_double_cast(ust_44, double_of_single__t_3__t_44)

logic ust_45 : double

axiom eq_39 : single_to_double_cast(ust_44, ust_45)

logic d_div__t_3__t_45__t_46 : double

axiom eq_40 : div_post1(NearestTiesToEven, ust_45, b244,
  d_div__t_3__t_45__t_46)

logic ust_47 : double

axiom eq_41 : div_post1(NearestTiesToEven, ust_45, b244, ust_47)

logic single_of_double__t_3__t_47 : single

axiom eq_42 : double_to_single_cast(NearestTiesToEven, ust_47,
  single_of_double__t_3__t_47)

logic ust_48 : single

axiom eq_43 : double_to_single_cast(NearestTiesToEven, ust_47, ust_48)

predicate ust_51() = (not smt2_single_eq(ust_48, b896))

logic s_mul__t_3__t_11__t_48 : single

axiom eq_44 : mul_post(NearestTiesToEven, ust_11, ust_48,
  s_mul__t_3__t_11__t_48)

logic ust_52 : single

axiom eq_45 : mul_post(NearestTiesToEven, ust_11, ust_48, ust_52)

logic double_of_single__t_3__t_52 : double

axiom eq_46 : single_to_double_cast(ust_52, double_of_single__t_3__t_52)

logic ust_53 : double

axiom eq_47 : single_to_double_cast(ust_52, ust_53)

logic d_div__t_3__t_53__t_54 : double

axiom eq_48 : div_post1(NearestTiesToEven, ust_53, b261,
  d_div__t_3__t_53__t_54)

logic ust_55 : double

axiom eq_49 : div_post1(NearestTiesToEven, ust_53, b261, ust_55)

logic single_of_double__t_3__t_55 : single

axiom eq_50 : double_to_single_cast(NearestTiesToEven, ust_55,
  single_of_double__t_3__t_55)

logic ust_56 : single

axiom eq_51 : double_to_single_cast(NearestTiesToEven, ust_55, ust_56)

predicate ust_59() = (not smt2_single_eq(ust_56, b891))

logic s_mul__t_3__t_11__t_56 : single

axiom eq_52 : mul_post(NearestTiesToEven, ust_11, ust_56,
  s_mul__t_3__t_11__t_56)

logic ust_60 : single

axiom eq_53 : mul_post(NearestTiesToEven, ust_11, ust_56, ust_60)

logic double_of_single__t_3__t_60 : double

axiom eq_54 : single_to_double_cast(ust_60, double_of_single__t_3__t_60)

logic ust_61 : double

axiom eq_55 : single_to_double_cast(ust_60, ust_61)

logic d_div__t_3__t_61__t_62 : double

axiom eq_56 : div_post1(NearestTiesToEven, ust_61, b278,
  d_div__t_3__t_61__t_62)

logic ust_63 : double

axiom eq_57 : div_post1(NearestTiesToEven, ust_61, b278, ust_63)

logic single_of_double__t_3__t_63 : single

axiom eq_58 : double_to_single_cast(NearestTiesToEven, ust_63,
  single_of_double__t_3__t_63)

logic ust_64 : single

axiom eq_59 : double_to_single_cast(NearestTiesToEven, ust_63, ust_64)

predicate ust_67() = (not smt2_single_eq(ust_64, b886))

logic s_mul__t_3__t_11__t_64 : single

axiom eq_60 : mul_post(NearestTiesToEven, ust_11, ust_64,
  s_mul__t_3__t_11__t_64)

logic ust_68 : single

axiom eq_61 : mul_post(NearestTiesToEven, ust_11, ust_64, ust_68)

logic double_of_single__t_3__t_68 : double

axiom eq_62 : single_to_double_cast(ust_68, double_of_single__t_3__t_68)

logic ust_69 : double

axiom eq_63 : single_to_double_cast(ust_68, ust_69)

logic d_div__t_3__t_69__t_70 : double

axiom eq_64 : div_post1(NearestTiesToEven, ust_69, b295,
  d_div__t_3__t_69__t_70)

logic ust_71 : double

axiom eq_65 : div_post1(NearestTiesToEven, ust_69, b295, ust_71)

logic single_of_double__t_3__t_71 : single

axiom eq_66 : double_to_single_cast(NearestTiesToEven, ust_71,
  single_of_double__t_3__t_71)

logic ust_72 : single

axiom eq_67 : double_to_single_cast(NearestTiesToEven, ust_71, ust_72)

predicate ust_75() = (not smt2_single_eq(ust_72, b881))

logic s_mul__t_3__t_11__t_72 : single

axiom eq_68 : mul_post(NearestTiesToEven, ust_11, ust_72,
  s_mul__t_3__t_11__t_72)

logic ust_76 : single

axiom eq_69 : mul_post(NearestTiesToEven, ust_11, ust_72, ust_76)

logic double_of_single__t_3__t_76 : double

axiom eq_70 : single_to_double_cast(ust_76, double_of_single__t_3__t_76)

logic ust_77 : double

axiom eq_71 : single_to_double_cast(ust_76, ust_77)

logic d_div__t_3__t_77__t_78 : double

axiom eq_72 : div_post1(NearestTiesToEven, ust_77, b312,
  d_div__t_3__t_77__t_78)

logic ust_79 : double

axiom eq_73 : div_post1(NearestTiesToEven, ust_77, b312, ust_79)

logic single_of_double__t_3__t_79 : single

axiom eq_74 : double_to_single_cast(NearestTiesToEven, ust_79,
  single_of_double__t_3__t_79)

logic ust_80 : single

axiom eq_75 : double_to_single_cast(NearestTiesToEven, ust_79, ust_80)

predicate ust_83() = (not smt2_single_eq(ust_80, b876))

logic s_mul__t_3__t_11__t_80 : single

axiom eq_76 : mul_post(NearestTiesToEven, ust_11, ust_80,
  s_mul__t_3__t_11__t_80)

logic ust_84 : single

axiom eq_77 : mul_post(NearestTiesToEven, ust_11, ust_80, ust_84)

logic double_of_single__t_3__t_84 : double

axiom eq_78 : single_to_double_cast(ust_84, double_of_single__t_3__t_84)

logic ust_85 : double

axiom eq_79 : single_to_double_cast(ust_84, ust_85)

logic d_div__t_3__t_85__t_86 : double

axiom eq_80 : div_post1(NearestTiesToEven, ust_85, b328,
  d_div__t_3__t_85__t_86)

logic ust_87 : double

axiom eq_81 : div_post1(NearestTiesToEven, ust_85, b328, ust_87)

logic single_of_double__t_3__t_87 : single

axiom eq_82 : double_to_single_cast(NearestTiesToEven, ust_87,
  single_of_double__t_3__t_87)

logic ust_88 : single

axiom eq_83 : double_to_single_cast(NearestTiesToEven, ust_87, ust_88)

predicate ust_91() = (not smt2_single_eq(ust_88, b871))

logic s_mul__t_3__t_11__t_88 : single

axiom eq_84 : mul_post(NearestTiesToEven, ust_11, ust_88,
  s_mul__t_3__t_11__t_88)

logic ust_92 : single

axiom eq_85 : mul_post(NearestTiesToEven, ust_11, ust_88, ust_92)

logic double_of_single__t_3__t_92 : double

axiom eq_86 : single_to_double_cast(ust_92, double_of_single__t_3__t_92)

logic ust_93 : double

axiom eq_87 : single_to_double_cast(ust_92, ust_93)

logic d_div__t_3__t_93__t_94 : double

axiom eq_88 : div_post1(NearestTiesToEven, ust_93, b345,
  d_div__t_3__t_93__t_94)

logic ust_95 : double

axiom eq_89 : div_post1(NearestTiesToEven, ust_93, b345, ust_95)

logic single_of_double__t_3__t_95 : single

axiom eq_90 : double_to_single_cast(NearestTiesToEven, ust_95,
  single_of_double__t_3__t_95)

logic ust_96 : single

axiom eq_91 : double_to_single_cast(NearestTiesToEven, ust_95, ust_96)

predicate ust_99() = (not smt2_single_eq(ust_96, b866))

logic s_mul__t_3__t_11__t_96 : single

axiom eq_92 : mul_post(NearestTiesToEven, ust_11, ust_96,
  s_mul__t_3__t_11__t_96)

logic ust_100 : single

axiom eq_93 : mul_post(NearestTiesToEven, ust_11, ust_96, ust_100)

logic double_of_single__t_3__t_100 : double

axiom eq_94 : single_to_double_cast(ust_100, double_of_single__t_3__t_100)

logic ust_101 : double

axiom eq_95 : single_to_double_cast(ust_100, ust_101)

logic d_div__t_3__t_101__t_102 : double

axiom eq_96 : div_post1(NearestTiesToEven, ust_101, b362,
  d_div__t_3__t_101__t_102)

logic ust_103 : double

axiom eq_97 : div_post1(NearestTiesToEven, ust_101, b362, ust_103)

logic single_of_double__t_3__t_103 : single

axiom eq_98 : double_to_single_cast(NearestTiesToEven, ust_103,
  single_of_double__t_3__t_103)

logic ust_104 : single

axiom eq_99 : double_to_single_cast(NearestTiesToEven, ust_103, ust_104)

predicate ust_107() = (not smt2_single_eq(ust_104, b861))

logic s_mul__t_3__t_11__t_104 : single

axiom eq_100 : mul_post(NearestTiesToEven, ust_11, ust_104,
  s_mul__t_3__t_11__t_104)

logic ust_108 : single

axiom eq_101 : mul_post(NearestTiesToEven, ust_11, ust_104, ust_108)

logic double_of_single__t_3__t_108 : double

axiom eq_102 : single_to_double_cast(ust_108, double_of_single__t_3__t_108)

logic ust_109 : double

axiom eq_103 : single_to_double_cast(ust_108, ust_109)

logic d_div__t_3__t_109__t_110 : double

axiom eq_104 : div_post1(NearestTiesToEven, ust_109, b379,
  d_div__t_3__t_109__t_110)

logic ust_111 : double

axiom eq_105 : div_post1(NearestTiesToEven, ust_109, b379, ust_111)

logic single_of_double__t_3__t_111 : single

axiom eq_106 : double_to_single_cast(NearestTiesToEven, ust_111,
  single_of_double__t_3__t_111)

logic ust_112 : single

axiom eq_107 : double_to_single_cast(NearestTiesToEven, ust_111, ust_112)

predicate ust_115() = (not smt2_single_eq(ust_112, b856))

logic s_mul__t_3__t_11__t_112 : single

axiom eq_108 : mul_post(NearestTiesToEven, ust_11, ust_112,
  s_mul__t_3__t_11__t_112)

logic ust_116 : single

axiom eq_109 : mul_post(NearestTiesToEven, ust_11, ust_112, ust_116)

logic double_of_single__t_3__t_116 : double

axiom eq_110 : single_to_double_cast(ust_116, double_of_single__t_3__t_116)

logic ust_117 : double

axiom eq_111 : single_to_double_cast(ust_116, ust_117)

logic d_div__t_3__t_117__t_118 : double

axiom eq_112 : div_post1(NearestTiesToEven, ust_117, b396,
  d_div__t_3__t_117__t_118)

logic ust_119 : double

axiom eq_113 : div_post1(NearestTiesToEven, ust_117, b396, ust_119)

logic single_of_double__t_3__t_119 : single

axiom eq_114 : double_to_single_cast(NearestTiesToEven, ust_119,
  single_of_double__t_3__t_119)

logic ust_120 : single

axiom eq_115 : double_to_single_cast(NearestTiesToEven, ust_119, ust_120)

predicate ust_123() = (not smt2_single_eq(ust_120, b851))

logic s_mul__t_3__t_11__t_120 : single

axiom eq_116 : mul_post(NearestTiesToEven, ust_11, ust_120,
  s_mul__t_3__t_11__t_120)

logic ust_124 : single

axiom eq_117 : mul_post(NearestTiesToEven, ust_11, ust_120, ust_124)

logic double_of_single__t_3__t_124 : double

axiom eq_118 : single_to_double_cast(ust_124, double_of_single__t_3__t_124)

logic ust_125 : double

axiom eq_119 : single_to_double_cast(ust_124, ust_125)

logic d_div__t_3__t_125__t_126 : double

axiom eq_120 : div_post1(NearestTiesToEven, ust_125, b413,
  d_div__t_3__t_125__t_126)

logic ust_127 : double

axiom eq_121 : div_post1(NearestTiesToEven, ust_125, b413, ust_127)

logic single_of_double__t_3__t_127 : single

axiom eq_122 : double_to_single_cast(NearestTiesToEven, ust_127,
  single_of_double__t_3__t_127)

logic ust_128 : single

axiom eq_123 : double_to_single_cast(NearestTiesToEven, ust_127, ust_128)

predicate ust_131() = (not smt2_single_eq(ust_128, b846))

predicate ust_135() = (not smt2_single_eq(b770, b837))

predicate ust_138() = (not smt2_single_eq(b837, b832))

predicate ust_141() = (not smt2_single_eq(b832, b827))

predicate ust_144() = (not smt2_single_eq(b827, b822))

predicate ust_147() = (not smt2_single_eq(b822, b817))

predicate ust_150() = (not smt2_single_eq(b817, b812))

predicate ust_153() = (not smt2_single_eq(b812, b807))

predicate ust_156() = (not smt2_single_eq(b807, b802))

predicate ust_159() = (not smt2_single_eq(b802, b797))

predicate ust_162() = (not smt2_single_eq(b797, b792))

predicate ust_165() = (not smt2_single_eq(b792, b787))

predicate ust_168() = (not smt2_single_eq(b787, b782))

predicate ust_171() = (not smt2_single_eq(b782, b777))

logic s_add__t_3__t_9__t_16 : single

axiom eq_124 : add_post(NearestTiesToEven, b153, ust_16,
  s_add__t_3__t_9__t_16)

logic ust_172 : single

axiom eq_125 : add_post(NearestTiesToEven, b153, ust_16, ust_172)

logic s_add__t_3__t_24__t_172 : single

axiom eq_126 : add_post(NearestTiesToEven, ust_24, ust_172,
  s_add__t_3__t_24__t_172)

logic ust_173 : single

axiom eq_127 : add_post(NearestTiesToEven, ust_24, ust_172, ust_173)

logic s_add__t_3__t_32__t_173 : single

axiom eq_128 : add_post(NearestTiesToEven, ust_32, ust_173,
  s_add__t_3__t_32__t_173)

logic ust_174 : single

axiom eq_129 : add_post(NearestTiesToEven, ust_32, ust_173, ust_174)

logic s_add__t_3__t_40__t_174 : single

axiom eq_130 : add_post(NearestTiesToEven, ust_40, ust_174,
  s_add__t_3__t_40__t_174)

logic ust_175 : single

axiom eq_131 : add_post(NearestTiesToEven, ust_40, ust_174, ust_175)

logic s_add__t_3__t_48__t_175 : single

axiom eq_132 : add_post(NearestTiesToEven, ust_48, ust_175,
  s_add__t_3__t_48__t_175)

logic ust_176 : single

axiom eq_133 : add_post(NearestTiesToEven, ust_48, ust_175, ust_176)

logic s_add__t_3__t_56__t_176 : single

axiom eq_134 : add_post(NearestTiesToEven, ust_56, ust_176,
  s_add__t_3__t_56__t_176)

logic ust_177 : single

axiom eq_135 : add_post(NearestTiesToEven, ust_56, ust_176, ust_177)

logic s_add__t_3__t_64__t_177 : single

axiom eq_136 : add_post(NearestTiesToEven, ust_64, ust_177,
  s_add__t_3__t_64__t_177)

logic ust_178 : single

axiom eq_137 : add_post(NearestTiesToEven, ust_64, ust_177, ust_178)

logic s_add__t_3__t_72__t_178 : single

axiom eq_138 : add_post(NearestTiesToEven, ust_72, ust_178,
  s_add__t_3__t_72__t_178)

logic ust_179 : single

axiom eq_139 : add_post(NearestTiesToEven, ust_72, ust_178, ust_179)

logic s_add__t_3__t_80__t_179 : single

axiom eq_140 : add_post(NearestTiesToEven, ust_80, ust_179,
  s_add__t_3__t_80__t_179)

logic ust_180 : single

axiom eq_141 : add_post(NearestTiesToEven, ust_80, ust_179, ust_180)

logic s_add__t_3__t_88__t_180 : single

axiom eq_142 : add_post(NearestTiesToEven, ust_88, ust_180,
  s_add__t_3__t_88__t_180)

logic ust_181 : single

axiom eq_143 : add_post(NearestTiesToEven, ust_88, ust_180, ust_181)

logic s_add__t_3__t_96__t_181 : single

axiom eq_144 : add_post(NearestTiesToEven, ust_96, ust_181,
  s_add__t_3__t_96__t_181)

logic ust_182 : single

axiom eq_145 : add_post(NearestTiesToEven, ust_96, ust_181, ust_182)

logic s_add__t_3__t_104__t_182 : single

axiom eq_146 : add_post(NearestTiesToEven, ust_104, ust_182,
  s_add__t_3__t_104__t_182)

logic ust_183 : single

axiom eq_147 : add_post(NearestTiesToEven, ust_104, ust_182, ust_183)

logic s_add__t_3__t_112__t_183 : single

axiom eq_148 : add_post(NearestTiesToEven, ust_112, ust_183,
  s_add__t_3__t_112__t_183)

logic ust_184 : single

axiom eq_149 : add_post(NearestTiesToEven, ust_112, ust_183, ust_184)

logic s_add__t_3__t_120__t_184 : single

axiom eq_150 : add_post(NearestTiesToEven, ust_120, ust_184,
  s_add__t_3__t_120__t_184)

logic ust_185 : single

axiom eq_151 : add_post(NearestTiesToEven, ust_120, ust_184, ust_185)

logic s_add__t_3__t_128__t_185 : single

axiom eq_152 : add_post(NearestTiesToEven, ust_128, ust_185,
  s_add__t_3__t_128__t_185)

logic ust_186 : single

axiom eq_153 : add_post(NearestTiesToEven, ust_128, ust_185, ust_186)

predicate ust_188() = (not smt2_single_eq(b777, ust_186))

predicate ust_191() = (not smt2_single_eq(b770, b772))

predicate ust_194() = (not smt2_single_eq(b153, b765))

predicate ust_197() = (not le(b155, b153))

logic s_neg__t_9 : single

axiom eq_154 : neg_post(b153, s_neg__t_9)

logic ust_198 : single

axiom eq_155 : neg_post(b153, ust_198)

predicate ust_200() = (ust_197 and smt2_single_eq(b765, ust_198))

predicate ust_201() = (ust_194 and ust_200)

predicate ust_203() = (not le(b155, b770))

predicate ust_204() = (ust_201 and ust_203)

logic s_neg__t_132 : single

axiom eq_156 : neg_post(b770, s_neg__t_132)

logic ust_205 : single

axiom eq_157 : neg_post(b770, ust_205)

predicate ust_207() = (ust_204 and smt2_single_eq(b772, ust_205))

predicate ust_208() = (ust_191 and ust_207)

logic double_of_single__t_3__t_121 : double

axiom eq_158 : single_to_double_cast(b851, double_of_single__t_3__t_121)

logic ust_209 : double

axiom eq_159 : single_to_double_cast(b851, ust_209)

predicate ust_212() = (not le1(b185, ust_209))

predicate ust_213() = (ust_208 and ust_212)

predicate ust_215() = (ust_213 and smt2_single_eq(b777, ust_185))

predicate ust_218() = (not le(b772, b162))

predicate ust_219() = (ust_215 and ust_218)

predicate ust_222() = (ust_219 and le(b765, b531))

predicate ust_225() = (ust_222 and le(b528, b153))

predicate ust_227() = (ust_225 and le(b153, b531))

predicate ust_228() = (ust_188 and ust_227)

logic double_of_single__t_3__t_113 : double

axiom eq_160 : single_to_double_cast(b856, double_of_single__t_3__t_113)

logic ust_229 : double

axiom eq_161 : single_to_double_cast(b856, ust_229)

predicate ust_231() = (not le1(b185, ust_229))

predicate ust_232() = (ust_228 and ust_231)

predicate ust_234() = (ust_232 and smt2_single_eq(b782, ust_184))

predicate ust_235() = (ust_171 and ust_234)

logic double_of_single__t_3__t_105 : double

axiom eq_162 : single_to_double_cast(b861, double_of_single__t_3__t_105)

logic ust_236 : double

axiom eq_163 : single_to_double_cast(b861, ust_236)

predicate ust_238() = (not le1(b185, ust_236))

predicate ust_239() = (ust_235 and ust_238)

predicate ust_241() = (ust_239 and smt2_single_eq(b787, ust_183))

predicate ust_242() = (ust_168 and ust_241)

logic double_of_single__t_3__t_97 : double

axiom eq_164 : single_to_double_cast(b866, double_of_single__t_3__t_97)

logic ust_243 : double

axiom eq_165 : single_to_double_cast(b866, ust_243)

predicate ust_245() = (not le1(b185, ust_243))

predicate ust_246() = (ust_242 and ust_245)

predicate ust_248() = (ust_246 and smt2_single_eq(b792, ust_182))

predicate ust_249() = (ust_165 and ust_248)

logic double_of_single__t_3__t_89 : double

axiom eq_166 : single_to_double_cast(b871, double_of_single__t_3__t_89)

logic ust_250 : double

axiom eq_167 : single_to_double_cast(b871, ust_250)

predicate ust_252() = (not le1(b185, ust_250))

predicate ust_253() = (ust_249 and ust_252)

predicate ust_255() = (ust_253 and smt2_single_eq(b797, ust_181))

predicate ust_256() = (ust_162 and ust_255)

logic double_of_single__t_3__t_81 : double

axiom eq_168 : single_to_double_cast(b876, double_of_single__t_3__t_81)

logic ust_257 : double

axiom eq_169 : single_to_double_cast(b876, ust_257)

predicate ust_259() = (not le1(b185, ust_257))

predicate ust_260() = (ust_256 and ust_259)

predicate ust_262() = (ust_260 and smt2_single_eq(b802, ust_180))

predicate ust_263() = (ust_159 and ust_262)

logic double_of_single__t_3__t_73 : double

axiom eq_170 : single_to_double_cast(b881, double_of_single__t_3__t_73)

logic ust_264 : double

axiom eq_171 : single_to_double_cast(b881, ust_264)

predicate ust_266() = (not le1(b185, ust_264))

predicate ust_267() = (ust_263 and ust_266)

predicate ust_269() = (ust_267 and smt2_single_eq(b807, ust_179))

predicate ust_270() = (ust_156 and ust_269)

logic double_of_single__t_3__t_65 : double

axiom eq_172 : single_to_double_cast(b886, double_of_single__t_3__t_65)

logic ust_271 : double

axiom eq_173 : single_to_double_cast(b886, ust_271)

predicate ust_273() = (not le1(b185, ust_271))

predicate ust_274() = (ust_270 and ust_273)

predicate ust_276() = (ust_274 and smt2_single_eq(b812, ust_178))

predicate ust_277() = (ust_153 and ust_276)

logic double_of_single__t_3__t_57 : double

axiom eq_174 : single_to_double_cast(b891, double_of_single__t_3__t_57)

logic ust_278 : double

axiom eq_175 : single_to_double_cast(b891, ust_278)

predicate ust_280() = (not le1(b185, ust_278))

predicate ust_281() = (ust_277 and ust_280)

predicate ust_283() = (ust_281 and smt2_single_eq(b817, ust_177))

predicate ust_284() = (ust_150 and ust_283)

logic double_of_single__t_3__t_49 : double

axiom eq_176 : single_to_double_cast(b896, double_of_single__t_3__t_49)

logic ust_285 : double

axiom eq_177 : single_to_double_cast(b896, ust_285)

predicate ust_287() = (not le1(b185, ust_285))

predicate ust_288() = (ust_284 and ust_287)

predicate ust_290() = (ust_288 and smt2_single_eq(b822, ust_176))

predicate ust_291() = (ust_147 and ust_290)

logic double_of_single__t_3__t_41 : double

axiom eq_178 : single_to_double_cast(b901, double_of_single__t_3__t_41)

logic ust_292 : double

axiom eq_179 : single_to_double_cast(b901, ust_292)

predicate ust_294() = (not le1(b185, ust_292))

predicate ust_295() = (ust_291 and ust_294)

predicate ust_297() = (ust_295 and smt2_single_eq(b827, ust_175))

predicate ust_298() = (ust_144 and ust_297)

logic double_of_single__t_3__t_33 : double

axiom eq_180 : single_to_double_cast(b906, double_of_single__t_3__t_33)

logic ust_299 : double

axiom eq_181 : single_to_double_cast(b906, ust_299)

predicate ust_301() = (not le1(b185, ust_299))

predicate ust_302() = (ust_298 and ust_301)

predicate ust_304() = (ust_302 and smt2_single_eq(b832, ust_174))

predicate ust_305() = (ust_141 and ust_304)

logic double_of_single__t_3__t_25 : double

axiom eq_182 : single_to_double_cast(b911, double_of_single__t_3__t_25)

logic ust_306 : double

axiom eq_183 : single_to_double_cast(b911, ust_306)

predicate ust_308() = (not le1(b185, ust_306))

predicate ust_309() = (ust_305 and ust_308)

predicate ust_311() = (ust_309 and smt2_single_eq(b837, ust_173))

predicate ust_312() = (ust_138 and ust_311)

logic double_of_single__t_3__t_17 : double

axiom eq_184 : single_to_double_cast(b916, double_of_single__t_3__t_17)

logic ust_313 : double

axiom eq_185 : single_to_double_cast(b916, ust_313)

predicate ust_315() = (not le1(b185, ust_313))

predicate ust_316() = (ust_312 and ust_315)

predicate ust_318() = (ust_316 and smt2_single_eq(b770, ust_172))

predicate ust_319() = (ust_135 and ust_318)

predicate ust_321() = (not le(b155, ust_128))

predicate ust_322() = (ust_319 and ust_321)

logic s_neg__t_128 : single

axiom eq_186 : neg_post(ust_128, s_neg__t_128)

logic ust_323 : single

axiom eq_187 : neg_post(ust_128, ust_323)

predicate ust_325() = (ust_322 and smt2_single_eq(b846, ust_323))

predicate ust_326() = (ust_131 and ust_325)

predicate ust_328() = (not le(b155, ust_120))

predicate ust_329() = (ust_326 and ust_328)

logic s_neg__t_120 : single

axiom eq_188 : neg_post(ust_120, s_neg__t_120)

logic ust_330 : single

axiom eq_189 : neg_post(ust_120, ust_330)

predicate ust_332() = (ust_329 and smt2_single_eq(b851, ust_330))

predicate ust_333() = (ust_123 and ust_332)

predicate ust_335() = (not le(b155, ust_112))

predicate ust_336() = (ust_333 and ust_335)

logic s_neg__t_112 : single

axiom eq_190 : neg_post(ust_112, s_neg__t_112)

logic ust_337 : single

axiom eq_191 : neg_post(ust_112, ust_337)

predicate ust_339() = (ust_336 and smt2_single_eq(b856, ust_337))

predicate ust_340() = (ust_115 and ust_339)

predicate ust_342() = (not le(b155, ust_104))

predicate ust_343() = (ust_340 and ust_342)

logic s_neg__t_104 : single

axiom eq_192 : neg_post(ust_104, s_neg__t_104)

logic ust_344 : single

axiom eq_193 : neg_post(ust_104, ust_344)

predicate ust_346() = (ust_343 and smt2_single_eq(b861, ust_344))

predicate ust_347() = (ust_107 and ust_346)

predicate ust_349() = (not le(b155, ust_96))

predicate ust_350() = (ust_347 and ust_349)

logic s_neg__t_96 : single

axiom eq_194 : neg_post(ust_96, s_neg__t_96)

logic ust_351 : single

axiom eq_195 : neg_post(ust_96, ust_351)

predicate ust_353() = (ust_350 and smt2_single_eq(b866, ust_351))

predicate ust_354() = (ust_99 and ust_353)

predicate ust_356() = (not le(b155, ust_88))

predicate ust_357() = (ust_354 and ust_356)

logic s_neg__t_88 : single

axiom eq_196 : neg_post(ust_88, s_neg__t_88)

logic ust_358 : single

axiom eq_197 : neg_post(ust_88, ust_358)

predicate ust_360() = (ust_357 and smt2_single_eq(b871, ust_358))

predicate ust_361() = (ust_91 and ust_360)

predicate ust_363() = (not le(b155, ust_80))

predicate ust_364() = (ust_361 and ust_363)

logic s_neg__t_80 : single

axiom eq_198 : neg_post(ust_80, s_neg__t_80)

logic ust_365 : single

axiom eq_199 : neg_post(ust_80, ust_365)

predicate ust_367() = (ust_364 and smt2_single_eq(b876, ust_365))

predicate ust_368() = (ust_83 and ust_367)

predicate ust_370() = (not le(b155, ust_72))

predicate ust_371() = (ust_368 and ust_370)

logic s_neg__t_72 : single

axiom eq_200 : neg_post(ust_72, s_neg__t_72)

logic ust_372 : single

axiom eq_201 : neg_post(ust_72, ust_372)

predicate ust_374() = (ust_371 and smt2_single_eq(b881, ust_372))

predicate ust_375() = (ust_75 and ust_374)

predicate ust_377() = (not le(b155, ust_64))

predicate ust_378() = (ust_375 and ust_377)

logic s_neg__t_64 : single

axiom eq_202 : neg_post(ust_64, s_neg__t_64)

logic ust_379 : single

axiom eq_203 : neg_post(ust_64, ust_379)

predicate ust_381() = (ust_378 and smt2_single_eq(b886, ust_379))

predicate ust_382() = (ust_67 and ust_381)

predicate ust_384() = (not le(b155, ust_56))

predicate ust_385() = (ust_382 and ust_384)

logic s_neg__t_56 : single

axiom eq_204 : neg_post(ust_56, s_neg__t_56)

logic ust_386 : single

axiom eq_205 : neg_post(ust_56, ust_386)

predicate ust_388() = (ust_385 and smt2_single_eq(b891, ust_386))

predicate ust_389() = (ust_59 and ust_388)

predicate ust_391() = (not le(b155, ust_48))

predicate ust_392() = (ust_389 and ust_391)

logic s_neg__t_48 : single

axiom eq_206 : neg_post(ust_48, s_neg__t_48)

logic ust_393 : single

axiom eq_207 : neg_post(ust_48, ust_393)

predicate ust_395() = (ust_392 and smt2_single_eq(b896, ust_393))

predicate ust_396() = (ust_51 and ust_395)

predicate ust_398() = (not le(b155, ust_40))

predicate ust_399() = (ust_396 and ust_398)

logic s_neg__t_40 : single

axiom eq_208 : neg_post(ust_40, s_neg__t_40)

logic ust_400 : single

axiom eq_209 : neg_post(ust_40, ust_400)

predicate ust_402() = (ust_399 and smt2_single_eq(b901, ust_400))

predicate ust_403() = (ust_43 and ust_402)

predicate ust_405() = (not le(b155, ust_32))

predicate ust_406() = (ust_403 and ust_405)

logic s_neg__t_32 : single

axiom eq_210 : neg_post(ust_32, s_neg__t_32)

logic ust_407 : single

axiom eq_211 : neg_post(ust_32, ust_407)

predicate ust_409() = (ust_406 and smt2_single_eq(b906, ust_407))

predicate ust_410() = (ust_35 and ust_409)

predicate ust_412() = (not le(b155, ust_24))

predicate ust_413() = (ust_410 and ust_412)

logic s_neg__t_24 : single

axiom eq_212 : neg_post(ust_24, s_neg__t_24)

logic ust_414 : single

axiom eq_213 : neg_post(ust_24, ust_414)

predicate ust_416() = (ust_413 and smt2_single_eq(b911, ust_414))

predicate ust_417() = (ust_27 and ust_416)

predicate ust_419() = (not le(b155, ust_16))

predicate ust_420() = (ust_417 and ust_419)

logic s_neg__t_16 : single

axiom eq_214 : neg_post(ust_16, s_neg__t_16)

logic ust_421 : single

axiom eq_215 : neg_post(ust_16, ust_421)

predicate ust_423() = (ust_420 and smt2_single_eq(b916, ust_421))

logic double_of_single__t_3__t_129 : double

axiom eq_216 : single_to_double_cast(b846, double_of_single__t_3__t_129)

logic ust_424 : double

axiom eq_217 : single_to_double_cast(b846, ust_424)

predicate ust_426() = (not le1(b185, ust_424))

predicate ust_427() = (ust_423 and ust_426)

predicate ust_428() = (ust_19 and ust_427)

axiom ax_1 : ust_428

goal g_1 : false
