(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

logic x0 : single

logic x1 : single

logic x2 : single

logic sfp_0_127_0 : single

axiom eq_0 : is_finite(sfp_0_127_0)

axiom eq_01 : (value(sfp_0_127_0) = 1.0)

logic ust_10 : single

axiom eq_1 : (value(ust_10) = 1.0)

axiom eq_11 : (sign1(ust_10) = Pos)

axiom eq_12 : is_finite(ust_10)

logic sfp_1_127_0 : single

axiom eq_2 : is_finite(sfp_1_127_0)

axiom eq_21 : (value(sfp_1_127_0) = (-1.0))

logic ust_12 : single

axiom eq_3 : (value(ust_12) = (-1.0))

axiom eq_31 : (sign1(ust_12) = Neg)

axiom eq_32 : is_finite(ust_12)

predicate ust_16() = (le(ust_12, x0) and le(x0, ust_10))

axiom ax_1 : ust_16

predicate ust_20() = (le(ust_12, x1) and le(x1, ust_10))

axiom ax_2 : ust_20

predicate ust_24() = (le(ust_12, x2) and le(x2, ust_10))

axiom ax_3 : ust_24

logic sfp_0_0_0 : single

axiom eq_4 : is_finite(sfp_0_0_0)

axiom eq_41 : (value(sfp_0_0_0) = 0.0)

logic ust_26 : single

axiom eq_5 : (value(ust_26) = 0.0)

axiom eq_51 : (sign1(ust_26) = Pos)

axiom eq_52 : is_finite(ust_26)

logic sfp_1_124_2751463 : single

axiom eq_6 : is_finite(sfp_1_124_2751463)

axiom eq_61 : (value(sfp_1_124_2751463) = ((-11140071.0) / 67108864.0))

logic ust_29 : single

axiom eq_7 : (value(ust_29) = ((-11140071.0) / 67108864.0))

axiom eq_71 : (sign1(ust_29) = Neg)

axiom eq_72 : is_finite(ust_29)

logic sfp_0_125_805305 : single

axiom eq_8 : is_finite(sfp_0_125_805305)

axiom eq_81 : (value(sfp_0_125_805305) = (9193913.0 / 33554432.0))

logic ust_31 : single

axiom eq_9 : (value(ust_31) = (9193913.0 / 33554432.0))

axiom eq_91 : (sign1(ust_31) = Pos)

axiom eq_92 : is_finite(ust_31)

logic s_mul__t_3__t_13__t_31 : single

axiom eq_10 : mul_post(NearestTiesToEven, x0, ust_31, s_mul__t_3__t_13__t_31)

logic ust_32 : single

axiom eq_111 : mul_post(NearestTiesToEven, x0, ust_31, ust_32)

logic s_add__t_3__t_26__t_32 : single

axiom eq_121 : add_post(NearestTiesToEven, ust_26, ust_32,
  s_add__t_3__t_26__t_32)

logic ust_33 : single

axiom eq_13 : add_post(NearestTiesToEven, ust_26, ust_32, ust_33)

logic sfp_1_126_3674209 : single

axiom eq_14 : is_finite(sfp_1_126_3674209)

axiom eq_141 : (value(sfp_1_126_3674209) = ((-12062817.0) / 16777216.0))

logic ust_36 : single

axiom eq_15 : (value(ust_36) = ((-12062817.0) / 16777216.0))

axiom eq_151 : (sign1(ust_36) = Neg)

axiom eq_152 : is_finite(ust_36)

logic s_mul__t_3__t_17__t_36 : single

axiom eq_16 : mul_post(NearestTiesToEven, x1, ust_36, s_mul__t_3__t_17__t_36)

logic ust_37 : single

axiom eq_17 : mul_post(NearestTiesToEven, x1, ust_36, ust_37)

logic s_add__t_3__t_33__t_37 : single

axiom eq_18 : add_post(NearestTiesToEven, ust_33, ust_37,
  s_add__t_3__t_33__t_37)

logic ust_38 : single

axiom eq_19 : add_post(NearestTiesToEven, ust_33, ust_37, ust_38)

logic sfp_0_123_3422552 : single

axiom eq_20 : is_finite(sfp_0_123_3422552)

axiom eq_201 : (value(sfp_0_123_3422552) = (1476395.0 / 16777216.0))

logic ust_40 : single

axiom eq_211 : (value(ust_40) = (1476395.0 / 16777216.0))

axiom eq_212 : (sign1(ust_40) = Pos)

axiom eq_213 : is_finite(ust_40)

logic s_mul__t_3__t_21__t_40 : single

axiom eq_22 : mul_post(NearestTiesToEven, x2, ust_40, s_mul__t_3__t_21__t_40)

logic ust_41 : single

axiom eq_23 : mul_post(NearestTiesToEven, x2, ust_40, ust_41)

logic s_add__t_3__t_38__t_41 : single

axiom eq_24 : add_post(NearestTiesToEven, ust_38, ust_41,
  s_add__t_3__t_38__t_41)

logic ust_42 : single

axiom eq_25 : add_post(NearestTiesToEven, ust_38, ust_41, ust_42)

axiom ax_4 : le(ust_42, ust_29)

logic sfp_0_125_7918845 : single

axiom eq_26 : is_finite(sfp_0_125_7918845)

axiom eq_261 : (value(sfp_0_125_7918845) = (16307453.0 / 33554432.0))

logic ust_45 : single

axiom eq_27 : (value(ust_45) = (16307453.0 / 33554432.0))

axiom eq_271 : (sign1(ust_45) = Pos)

axiom eq_272 : is_finite(ust_45)

logic sfp_1_126_4261412 : single

axiom eq_28 : is_finite(sfp_1_126_4261412)

axiom eq_281 : (value(sfp_1_126_4261412) = ((-3162505.0) / 4194304.0))

logic ust_48 : single

axiom eq_29 : (value(ust_48) = ((-3162505.0) / 4194304.0))

axiom eq_291 : (sign1(ust_48) = Neg)

axiom eq_292 : is_finite(ust_48)

logic s_mul__t_3__t_13__t_48 : single

axiom eq_30 : mul_post(NearestTiesToEven, x0, ust_48, s_mul__t_3__t_13__t_48)

logic ust_49 : single

axiom eq_311 : mul_post(NearestTiesToEven, x0, ust_48, ust_49)

logic s_add__t_3__t_26__t_49 : single

axiom eq_321 : add_post(NearestTiesToEven, ust_26, ust_49,
  s_add__t_3__t_26__t_49)

logic ust_50 : single

axiom eq_33 : add_post(NearestTiesToEven, ust_26, ust_49, ust_50)

logic sfp_0_126_1677721 : single

axiom eq_34 : is_finite(sfp_0_126_1677721)

axiom eq_341 : (value(sfp_0_126_1677721) = (10066329.0 / 16777216.0))

logic ust_52 : single

axiom eq_35 : (value(ust_52) = (10066329.0 / 16777216.0))

axiom eq_351 : (sign1(ust_52) = Pos)

axiom eq_352 : is_finite(ust_52)

logic s_mul__t_3__t_17__t_52 : single

axiom eq_36 : mul_post(NearestTiesToEven, x1, ust_52, s_mul__t_3__t_17__t_52)

logic ust_53 : single

axiom eq_37 : mul_post(NearestTiesToEven, x1, ust_52, ust_53)

logic s_add__t_3__t_50__t_53 : single

axiom eq_38 : add_post(NearestTiesToEven, ust_50, ust_53,
  s_add__t_3__t_50__t_53)

logic ust_54 : single

axiom eq_39 : add_post(NearestTiesToEven, ust_50, ust_53, ust_54)

logic sfp_1_125_5066719 : single

axiom eq_40 : is_finite(sfp_1_125_5066719)

axiom eq_401 : (value(sfp_1_125_5066719) = ((-13455327.0) / 33554432.0))

logic ust_57 : single

axiom eq_411 : (value(ust_57) = ((-13455327.0) / 33554432.0))

axiom eq_412 : (sign1(ust_57) = Neg)

axiom eq_413 : is_finite(ust_57)

logic s_mul__t_3__t_21__t_57 : single

axiom eq_42 : mul_post(NearestTiesToEven, x2, ust_57, s_mul__t_3__t_21__t_57)

logic ust_58 : single

axiom eq_43 : mul_post(NearestTiesToEven, x2, ust_57, ust_58)

logic s_add__t_3__t_54__t_58 : single

axiom eq_44 : add_post(NearestTiesToEven, ust_54, ust_58,
  s_add__t_3__t_54__t_58)

logic ust_59 : single

axiom eq_45 : add_post(NearestTiesToEven, ust_54, ust_58, ust_59)

axiom ax_5 : le(ust_45, ust_59)

logic sfp_0_126_805305 : single

axiom eq_46 : is_finite(sfp_0_126_805305)

axiom eq_461 : (value(sfp_0_126_805305) = (9193913.0 / 16777216.0))

logic ust_62 : single

axiom eq_47 : (value(ust_62) = (9193913.0 / 16777216.0))

axiom eq_471 : (sign1(ust_62) = Pos)

axiom eq_472 : is_finite(ust_62)

logic sfp_0_126_5939134 : single

axiom eq_48 : is_finite(sfp_0_126_5939134)

axiom eq_481 : (value(sfp_0_126_5939134) = (7163871.0 / 8388608.0))

logic ust_64 : single

axiom eq_49 : (value(ust_64) = (7163871.0 / 8388608.0))

axiom eq_491 : (sign1(ust_64) = Pos)

axiom eq_492 : is_finite(ust_64)

logic s_mul__t_3__t_13__t_64 : single

axiom eq_50 : mul_post(NearestTiesToEven, x0, ust_64, s_mul__t_3__t_13__t_64)

logic ust_65 : single

axiom eq_511 : mul_post(NearestTiesToEven, x0, ust_64, ust_65)

logic s_add__t_3__t_26__t_65 : single

axiom eq_521 : add_post(NearestTiesToEven, ust_26, ust_65,
  s_add__t_3__t_26__t_65)

logic ust_66 : single

axiom eq_53 : add_post(NearestTiesToEven, ust_26, ust_65, ust_66)

logic sfp_0_126_838860 : single

axiom eq_54 : is_finite(sfp_0_126_838860)

axiom eq_541 : (value(sfp_0_126_838860) = (2306867.0 / 4194304.0))

logic ust_68 : single

axiom eq_55 : (value(ust_68) = (2306867.0 / 4194304.0))

axiom eq_551 : (sign1(ust_68) = Pos)

axiom eq_552 : is_finite(ust_68)

logic s_mul__t_3__t_17__t_68 : single

axiom eq_56 : mul_post(NearestTiesToEven, x1, ust_68, s_mul__t_3__t_17__t_68)

logic ust_69 : single

axiom eq_57 : mul_post(NearestTiesToEven, x1, ust_68, ust_69)

logic s_add__t_3__t_66__t_69 : single

axiom eq_58 : add_post(NearestTiesToEven, ust_66, ust_69,
  s_add__t_3__t_66__t_69)

logic ust_70 : single

axiom eq_59 : add_post(NearestTiesToEven, ust_66, ust_69, ust_70)

logic sfp_0_125_7012876 : single

axiom eq_60 : is_finite(sfp_0_125_7012876)

axiom eq_601 : (value(sfp_0_125_7012876) = (3850371.0 / 8388608.0))

logic ust_72 : single

axiom eq_611 : (value(ust_72) = (3850371.0 / 8388608.0))

axiom eq_612 : (sign1(ust_72) = Pos)

axiom eq_613 : is_finite(ust_72)

logic s_mul__t_3__t_21__t_72 : single

axiom eq_62 : mul_post(NearestTiesToEven, x2, ust_72, s_mul__t_3__t_21__t_72)

logic ust_73 : single

axiom eq_63 : mul_post(NearestTiesToEven, x2, ust_72, ust_73)

logic s_add__t_3__t_70__t_73 : single

axiom eq_64 : add_post(NearestTiesToEven, ust_70, ust_73,
  s_add__t_3__t_70__t_73)

logic ust_74 : single

axiom eq_65 : add_post(NearestTiesToEven, ust_70, ust_73, ust_74)

axiom ax_6 : le(ust_74, ust_62)

logic sfp_0_126_4680843 : single

axiom eq_66 : is_finite(sfp_0_126_4680843)

axiom eq_661 : (value(sfp_0_126_4680843) = (13069451.0 / 16777216.0))

logic ust_77 : single

axiom eq_67 : (value(ust_77) = (13069451.0 / 16777216.0))

axiom eq_671 : (sign1(ust_77) = Pos)

axiom eq_672 : is_finite(ust_77)

logic sfp_1_123_4898947 : single

axiom eq_68 : is_finite(sfp_1_123_4898947)

axiom eq_681 : (value(sfp_1_123_4898947) = ((-13287555.0) / 134217728.0))

logic ust_80 : single

axiom eq_69 : (value(ust_80) = ((-13287555.0) / 134217728.0))

axiom eq_691 : (sign1(ust_80) = Neg)

axiom eq_692 : is_finite(ust_80)

logic s_mul__t_3__t_13__t_80 : single

axiom eq_70 : mul_post(NearestTiesToEven, x0, ust_80, s_mul__t_3__t_13__t_80)

logic ust_81 : single

axiom eq_711 : mul_post(NearestTiesToEven, x0, ust_80, ust_81)

logic s_add__t_3__t_26__t_81 : single

axiom eq_721 : add_post(NearestTiesToEven, ust_26, ust_81,
  s_add__t_3__t_26__t_81)

logic ust_82 : single

axiom eq_73 : add_post(NearestTiesToEven, ust_26, ust_81, ust_82)

logic sfp_1_126_620756 : single

axiom eq_74 : is_finite(sfp_1_126_620756)

axiom eq_741 : (value(sfp_1_126_620756) = ((-2252341.0) / 4194304.0))

logic ust_85 : single

axiom eq_75 : (value(ust_85) = ((-2252341.0) / 4194304.0))

axiom eq_751 : (sign1(ust_85) = Neg)

axiom eq_752 : is_finite(ust_85)

logic s_mul__t_3__t_17__t_85 : single

axiom eq_76 : mul_post(NearestTiesToEven, x1, ust_85, s_mul__t_3__t_17__t_85)

logic ust_86 : single

axiom eq_77 : mul_post(NearestTiesToEven, x1, ust_85, ust_86)

logic s_add__t_3__t_82__t_86 : single

axiom eq_78 : add_post(NearestTiesToEven, ust_82, ust_86,
  s_add__t_3__t_82__t_86)

logic ust_87 : single

axiom eq_79 : add_post(NearestTiesToEven, ust_82, ust_86, ust_87)

logic sfp_0_126_5486150 : single

axiom eq_80 : is_finite(sfp_0_126_5486150)

axiom eq_801 : (value(sfp_0_126_5486150) = (6937379.0 / 8388608.0))

logic ust_89 : single

axiom eq_811 : (value(ust_89) = (6937379.0 / 8388608.0))

axiom eq_812 : (sign1(ust_89) = Pos)

axiom eq_813 : is_finite(ust_89)

logic s_mul__t_3__t_21__t_89 : single

axiom eq_82 : mul_post(NearestTiesToEven, x2, ust_89, s_mul__t_3__t_21__t_89)

logic ust_90 : single

axiom eq_83 : mul_post(NearestTiesToEven, x2, ust_89, ust_90)

logic s_add__t_3__t_87__t_90 : single

axiom eq_84 : add_post(NearestTiesToEven, ust_87, ust_90,
  s_add__t_3__t_87__t_90)

logic ust_91 : single

axiom eq_85 : add_post(NearestTiesToEven, ust_87, ust_90, ust_91)

axiom ax_7 : le(ust_91, ust_77)

logic sfp_1_126_8019508 : single

axiom eq_86 : is_finite(sfp_1_126_8019508)

axiom eq_861 : (value(sfp_1_126_8019508) = ((-4102029.0) / 4194304.0))

logic ust_95 : single

axiom eq_87 : (value(ust_95) = ((-4102029.0) / 4194304.0))

axiom eq_871 : (sign1(ust_95) = Neg)

axiom eq_872 : is_finite(ust_95)

logic sfp_0_126_4731174 : single

axiom eq_88 : is_finite(sfp_0_126_4731174)

axiom eq_881 : (value(sfp_0_126_4731174) = (6559891.0 / 8388608.0))

logic ust_97 : single

axiom eq_89 : (value(ust_97) = (6559891.0 / 8388608.0))

axiom eq_891 : (sign1(ust_97) = Pos)

axiom eq_892 : is_finite(ust_97)

logic s_mul__t_3__t_13__t_97 : single

axiom eq_90 : mul_post(NearestTiesToEven, x0, ust_97, s_mul__t_3__t_13__t_97)

logic ust_98 : single

axiom eq_911 : mul_post(NearestTiesToEven, x0, ust_97, ust_98)

logic s_add__t_3__t_26__t_98 : single

axiom eq_921 : add_post(NearestTiesToEven, ust_26, ust_98,
  s_add__t_3__t_26__t_98)

logic ust_99 : single

axiom eq_93 : add_post(NearestTiesToEven, ust_26, ust_98, ust_99)

logic sfp_0_125_7985955 : single

axiom eq_94 : is_finite(sfp_0_125_7985955)

axiom eq_941 : (value(sfp_0_125_7985955) = (16374563.0 / 33554432.0))

logic ust_101 : single

axiom eq_95 : (value(ust_101) = (16374563.0 / 33554432.0))

axiom eq_951 : (sign1(ust_101) = Pos)

axiom eq_952 : is_finite(ust_101)

logic s_mul__t_3__t_17__t_101 : single

axiom eq_96 : mul_post(NearestTiesToEven, x1, ust_101,
  s_mul__t_3__t_17__t_101)

logic ust_102 : single

axiom eq_97 : mul_post(NearestTiesToEven, x1, ust_101, ust_102)

logic s_add__t_3__t_99__t_102 : single

axiom eq_98 : add_post(NearestTiesToEven, ust_99, ust_102,
  s_add__t_3__t_99__t_102)

logic ust_103 : single

axiom eq_99 : add_post(NearestTiesToEven, ust_99, ust_102, ust_103)

logic sfp_1_125_8019509 : single

axiom eq_100 : is_finite(sfp_1_125_8019509)

axiom eq_1001 : (value(sfp_1_125_8019509) = ((-16408117.0) / 33554432.0))

logic ust_106 : single

axiom eq_101 : (value(ust_106) = ((-16408117.0) / 33554432.0))

axiom eq_1011 : (sign1(ust_106) = Neg)

axiom eq_1012 : is_finite(ust_106)

logic s_mul__t_3__t_21__t_106 : single

axiom eq_102 : mul_post(NearestTiesToEven, x2, ust_106,
  s_mul__t_3__t_21__t_106)

logic ust_107 : single

axiom eq_103 : mul_post(NearestTiesToEven, x2, ust_106, ust_107)

logic s_add__t_3__t_103__t_107 : single

axiom eq_104 : add_post(NearestTiesToEven, ust_103, ust_107,
  s_add__t_3__t_103__t_107)

logic ust_108 : single

axiom eq_105 : add_post(NearestTiesToEven, ust_103, ust_107, ust_108)

axiom ax_8 : le(ust_95, ust_108)

logic sfp_1_126_8304721 : single

axiom eq_106 : is_finite(sfp_1_126_8304721)

axiom eq_1061 : (value(sfp_1_126_8304721) = ((-16693329.0) / 16777216.0))

logic ust_112 : single

axiom eq_107 : (value(ust_112) = ((-16693329.0) / 16777216.0))

axiom eq_1071 : (sign1(ust_112) = Neg)

axiom eq_1072 : is_finite(ust_112)

logic sfp_0_126_6845104 : single

axiom eq_108 : is_finite(sfp_0_126_6845104)

axiom eq_1081 : (value(sfp_0_126_6845104) = (952107.0 / 1048576.0))

logic ust_114 : single

axiom eq_109 : (value(ust_114) = (952107.0 / 1048576.0))

axiom eq_1091 : (sign1(ust_114) = Pos)

axiom eq_1092 : is_finite(ust_114)

logic s_mul__t_3__t_13__t_114 : single

axiom eq_110 : mul_post(NearestTiesToEven, x0, ust_114,
  s_mul__t_3__t_13__t_114)

logic ust_115 : single

axiom eq_1111 : mul_post(NearestTiesToEven, x0, ust_114, ust_115)

logic s_add__t_3__t_26__t_115 : single

axiom eq_112 : add_post(NearestTiesToEven, ust_26, ust_115,
  s_add__t_3__t_26__t_115)

logic ust_116 : single

axiom eq_113 : add_post(NearestTiesToEven, ust_26, ust_115, ust_116)

logic sfp_0_126_4143972 : single

axiom eq_114 : is_finite(sfp_0_126_4143972)

axiom eq_1141 : (value(sfp_0_126_4143972) = (3133145.0 / 4194304.0))

logic ust_118 : single

axiom eq_115 : (value(ust_118) = (3133145.0 / 4194304.0))

axiom eq_1151 : (sign1(ust_118) = Pos)

axiom eq_1152 : is_finite(ust_118)

logic s_mul__t_3__t_17__t_118 : single

axiom eq_116 : mul_post(NearestTiesToEven, x1, ust_118,
  s_mul__t_3__t_17__t_118)

logic ust_119 : single

axiom eq_117 : mul_post(NearestTiesToEven, x1, ust_118, ust_119)

logic s_add__t_3__t_116__t_119 : single

axiom eq_118 : add_post(NearestTiesToEven, ust_116, ust_119,
  s_add__t_3__t_116__t_119)

logic ust_120 : single

axiom eq_119 : add_post(NearestTiesToEven, ust_116, ust_119, ust_120)

logic sfp_1_124_5905580 : single

axiom eq_120 : is_finite(sfp_1_124_5905580)

axiom eq_1201 : (value(sfp_1_124_5905580) = ((-3573547.0) / 16777216.0))

logic ust_123 : single

axiom eq_1211 : (value(ust_123) = ((-3573547.0) / 16777216.0))

axiom eq_1212 : (sign1(ust_123) = Neg)

axiom eq_1213 : is_finite(ust_123)

logic s_mul__t_3__t_21__t_123 : single

axiom eq_122 : mul_post(NearestTiesToEven, x2, ust_123,
  s_mul__t_3__t_21__t_123)

logic ust_124 : single

axiom eq_123 : mul_post(NearestTiesToEven, x2, ust_123, ust_124)

logic s_add__t_3__t_120__t_124 : single

axiom eq_124 : add_post(NearestTiesToEven, ust_120, ust_124,
  s_add__t_3__t_120__t_124)

logic ust_125 : single

axiom eq_125 : add_post(NearestTiesToEven, ust_120, ust_124, ust_125)

axiom ax_9 : le(ust_125, ust_112)

logic sfp_0_126_5184160 : single

axiom eq_126 : is_finite(sfp_0_126_5184160)

axiom eq_1261 : (value(sfp_0_126_5184160) = (424149.0 / 524288.0))

logic ust_128 : single

axiom eq_127 : (value(ust_128) = (424149.0 / 524288.0))

axiom eq_1271 : (sign1(ust_128) = Pos)

axiom eq_1272 : is_finite(ust_128)

logic sfp_1_124_8120173 : single

axiom eq_128 : is_finite(sfp_1_124_8120173)

axiom eq_1281 : (value(sfp_1_124_8120173) = ((-16508781.0) / 67108864.0))

logic ust_131 : single

axiom eq_129 : (value(ust_131) = ((-16508781.0) / 67108864.0))

axiom eq_1291 : (sign1(ust_131) = Neg)

axiom eq_1292 : is_finite(ust_131)

logic s_mul__t_3__t_13__t_131 : single

axiom eq_130 : mul_post(NearestTiesToEven, x0, ust_131,
  s_mul__t_3__t_13__t_131)

logic ust_132 : single

axiom eq_131 : mul_post(NearestTiesToEven, x0, ust_131, ust_132)

logic s_add__t_3__t_26__t_132 : single

axiom eq_132 : add_post(NearestTiesToEven, ust_26, ust_132,
  s_add__t_3__t_26__t_132)

logic ust_133 : single

axiom eq_133 : add_post(NearestTiesToEven, ust_26, ust_132, ust_133)

logic sfp_1_124_8187280 : single

axiom eq_134 : is_finite(sfp_1_124_8187280)

axiom eq_1341 : (value(sfp_1_124_8187280) = ((-1035993.0) / 4194304.0))

logic ust_136 : single

axiom eq_135 : (value(ust_136) = ((-1035993.0) / 4194304.0))

axiom eq_1351 : (sign1(ust_136) = Neg)

axiom eq_1352 : is_finite(ust_136)

logic s_mul__t_3__t_17__t_136 : single

axiom eq_136 : mul_post(NearestTiesToEven, x1, ust_136,
  s_mul__t_3__t_17__t_136)

logic ust_137 : single

axiom eq_137 : mul_post(NearestTiesToEven, x1, ust_136, ust_137)

logic s_add__t_3__t_133__t_137 : single

axiom eq_138 : add_post(NearestTiesToEven, ust_133, ust_137,
  s_add__t_3__t_133__t_137)

logic ust_138 : single

axiom eq_139 : add_post(NearestTiesToEven, ust_133, ust_137, ust_138)

logic sfp_0_126_4009755 : single

axiom eq_140 : is_finite(sfp_0_126_4009755)

axiom eq_1401 : (value(sfp_0_126_4009755) = (12398363.0 / 16777216.0))

logic ust_140 : single

axiom eq_1411 : (value(ust_140) = (12398363.0 / 16777216.0))

axiom eq_1412 : (sign1(ust_140) = Pos)

axiom eq_1413 : is_finite(ust_140)

logic s_mul__t_3__t_21__t_140 : single

axiom eq_142 : mul_post(NearestTiesToEven, x2, ust_140,
  s_mul__t_3__t_21__t_140)

logic ust_141 : single

axiom eq_143 : mul_post(NearestTiesToEven, x2, ust_140, ust_141)

logic s_add__t_3__t_138__t_141 : single

axiom eq_144 : add_post(NearestTiesToEven, ust_138, ust_141,
  s_add__t_3__t_138__t_141)

logic ust_142 : single

axiom eq_145 : add_post(NearestTiesToEven, ust_138, ust_141, ust_142)

axiom ax_10 : le(ust_142, ust_128)

logic sfp_0_125_335544 : single

axiom eq_146 : is_finite(sfp_0_125_335544)

axiom eq_1461 : (value(sfp_0_125_335544) = (1090519.0 / 4194304.0))

logic ust_145 : single

axiom eq_147 : (value(ust_145) = (1090519.0 / 4194304.0))

axiom eq_1471 : (sign1(ust_145) = Pos)

axiom eq_1472 : is_finite(ust_145)

logic sfp_0_126_671089 : single

axiom eq_148 : is_finite(sfp_0_126_671089)

axiom eq_1481 : (value(sfp_0_126_671089) = (9059697.0 / 16777216.0))

logic ust_147 : single

axiom eq_149 : (value(ust_147) = (9059697.0 / 16777216.0))

axiom eq_1491 : (sign1(ust_147) = Pos)

axiom eq_1492 : is_finite(ust_147)

logic s_mul__t_3__t_13__t_147 : single

axiom eq_150 : mul_post(NearestTiesToEven, x0, ust_147,
  s_mul__t_3__t_13__t_147)

logic ust_148 : single

axiom eq_1511 : mul_post(NearestTiesToEven, x0, ust_147, ust_148)

logic s_add__t_3__t_26__t_148 : single

axiom eq_1521 : add_post(NearestTiesToEven, ust_26, ust_148,
  s_add__t_3__t_26__t_148)

logic ust_149 : single

axiom eq_153 : add_post(NearestTiesToEven, ust_26, ust_148, ust_149)

logic sfp_1_121_6643778 : single

axiom eq_154 : is_finite(sfp_1_121_6643778)

axiom eq_1541 : (value(sfp_1_121_6643778) = ((-7516193.0) / 268435456.0))

logic ust_152 : single

axiom eq_155 : (value(ust_152) = ((-7516193.0) / 268435456.0))

axiom eq_1551 : (sign1(ust_152) = Neg)

axiom eq_1552 : is_finite(ust_152)

logic s_mul__t_3__t_17__t_152 : single

axiom eq_156 : mul_post(NearestTiesToEven, x1, ust_152,
  s_mul__t_3__t_17__t_152)

logic ust_153 : single

axiom eq_157 : mul_post(NearestTiesToEven, x1, ust_152, ust_153)

logic s_add__t_3__t_149__t_153 : single

axiom eq_158 : add_post(NearestTiesToEven, ust_149, ust_153,
  s_add__t_3__t_149__t_153)

logic ust_154 : single

axiom eq_159 : add_post(NearestTiesToEven, ust_149, ust_153, ust_154)

logic sfp_0_126_5519704 : single

axiom eq_160 : is_finite(sfp_0_126_5519704)

axiom eq_1601 : (value(sfp_0_126_5519704) = (1738539.0 / 2097152.0))

logic ust_156 : single

axiom eq_161 : (value(ust_156) = (1738539.0 / 2097152.0))

axiom eq_1611 : (sign1(ust_156) = Pos)

axiom eq_1612 : is_finite(ust_156)

logic s_mul__t_3__t_21__t_156 : single

axiom eq_162 : mul_post(NearestTiesToEven, x2, ust_156,
  s_mul__t_3__t_21__t_156)

logic ust_157 : single

axiom eq_163 : mul_post(NearestTiesToEven, x2, ust_156, ust_157)

logic s_add__t_3__t_154__t_157 : single

axiom eq_164 : add_post(NearestTiesToEven, ust_154, ust_157,
  s_add__t_3__t_154__t_157)

logic ust_158 : single

axiom eq_165 : add_post(NearestTiesToEven, ust_154, ust_157, ust_158)

axiom ax_11 : le(ust_145, ust_158)

goal g_1 : false
