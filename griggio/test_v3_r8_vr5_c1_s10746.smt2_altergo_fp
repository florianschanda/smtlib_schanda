(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

logic x0 : single

logic x1 : single

logic x2 : single

logic sfp_0_129_2097152 : single

axiom eq_0 : is_finite(sfp_0_129_2097152)

axiom eq_01 : (value(sfp_0_129_2097152) = 5.0)

logic ust_10 : single

axiom eq_1 : (value(ust_10) = 5.0)

axiom eq_11 : (sign1(ust_10) = Pos)

axiom eq_12 : is_finite(ust_10)

logic sfp_1_129_2097152 : single

axiom eq_2 : is_finite(sfp_1_129_2097152)

axiom eq_21 : (value(sfp_1_129_2097152) = (-5.0))

logic ust_12 : single

axiom eq_3 : (value(ust_12) = (-5.0))

axiom eq_31 : (sign1(ust_12) = Neg)

axiom eq_32 : is_finite(ust_12)

predicate ust_16() = (le(ust_12, x0) and le(x0, ust_10))

axiom ax_1 : ust_16

predicate ust_20() = (le(ust_12, x1) and le(x1, ust_10))

axiom ax_2 : ust_20

predicate ust_24() = (le(ust_12, x2) and le(x2, ust_10))

axiom ax_3 : ust_24

logic sfp_0_0_0 : single

axiom eq_4 : is_finite(sfp_0_0_0)

axiom eq_41 : (value(sfp_0_0_0) = 0.0)

logic ust_26 : single

axiom eq_5 : (value(ust_26) = 0.0)

axiom eq_51 : (sign1(ust_26) = Pos)

axiom eq_52 : is_finite(ust_26)

logic sfp_0_124_6777994 : single

axiom eq_6 : is_finite(sfp_0_124_6777994)

axiom eq_61 : (value(sfp_0_124_6777994) = (7583301.0 / 33554432.0))

logic ust_28 : single

axiom eq_7 : (value(ust_28) = (7583301.0 / 33554432.0))

axiom eq_71 : (sign1(ust_28) = Pos)

axiom eq_72 : is_finite(ust_28)

logic sfp_1_126_3137339 : single

axiom eq_8 : is_finite(sfp_1_126_3137339)

axiom eq_81 : (value(sfp_1_126_3137339) = ((-11525947.0) / 16777216.0))

logic ust_31 : single

axiom eq_9 : (value(ust_31) = ((-11525947.0) / 16777216.0))

axiom eq_91 : (sign1(ust_31) = Neg)

axiom eq_92 : is_finite(ust_31)

logic s_mul__t_3__t_13__t_31 : single

axiom eq_10 : mul_post(NearestTiesToEven, x0, ust_31, s_mul__t_3__t_13__t_31)

logic ust_32 : single

axiom eq_111 : mul_post(NearestTiesToEven, x0, ust_31, ust_32)

logic s_add__t_3__t_26__t_32 : single

axiom eq_121 : add_post(NearestTiesToEven, ust_26, ust_32,
  s_add__t_3__t_26__t_32)

logic ust_33 : single

axiom eq_13 : add_post(NearestTiesToEven, ust_26, ust_32, ust_33)

logic sfp_0_125_1845494 : single

axiom eq_14 : is_finite(sfp_0_125_1845494)

axiom eq_141 : (value(sfp_0_125_1845494) = (5117051.0 / 16777216.0))

logic ust_35 : single

axiom eq_15 : (value(ust_35) = (5117051.0 / 16777216.0))

axiom eq_151 : (sign1(ust_35) = Pos)

axiom eq_152 : is_finite(ust_35)

logic s_mul__t_3__t_17__t_35 : single

axiom eq_16 : mul_post(NearestTiesToEven, x1, ust_35, s_mul__t_3__t_17__t_35)

logic ust_36 : single

axiom eq_17 : mul_post(NearestTiesToEven, x1, ust_35, ust_36)

logic s_add__t_3__t_33__t_36 : single

axiom eq_18 : add_post(NearestTiesToEven, ust_33, ust_36,
  s_add__t_3__t_33__t_36)

logic ust_37 : single

axiom eq_19 : add_post(NearestTiesToEven, ust_33, ust_36, ust_37)

logic sfp_0_123_7583302 : single

axiom eq_20 : is_finite(sfp_0_123_7583302)

axiom eq_201 : (value(sfp_0_123_7583302) = (7985955.0 / 67108864.0))

logic ust_39 : single

axiom eq_211 : (value(ust_39) = (7985955.0 / 67108864.0))

axiom eq_212 : (sign1(ust_39) = Pos)

axiom eq_213 : is_finite(ust_39)

logic s_mul__t_3__t_21__t_39 : single

axiom eq_22 : mul_post(NearestTiesToEven, x2, ust_39, s_mul__t_3__t_21__t_39)

logic ust_40 : single

axiom eq_23 : mul_post(NearestTiesToEven, x2, ust_39, ust_40)

logic s_add__t_3__t_37__t_40 : single

axiom eq_24 : add_post(NearestTiesToEven, ust_37, ust_40,
  s_add__t_3__t_37__t_40)

logic ust_41 : single

axiom eq_25 : add_post(NearestTiesToEven, ust_37, ust_40, ust_41)

axiom ax_4 : le(ust_41, ust_28)

logic sfp_0_126_5855248 : single

axiom eq_26 : is_finite(sfp_0_126_5855248)

axiom eq_261 : (value(sfp_0_126_5855248) = (890241.0 / 1048576.0))

logic ust_44 : single

axiom eq_27 : (value(ust_44) = (890241.0 / 1048576.0))

axiom eq_271 : (sign1(ust_44) = Pos)

axiom eq_272 : is_finite(ust_44)

logic sfp_1_126_5452595 : single

axiom eq_28 : is_finite(sfp_1_126_5452595)

axiom eq_281 : (value(sfp_1_126_5452595) = ((-13841203.0) / 16777216.0))

logic ust_47 : single

axiom eq_29 : (value(ust_47) = ((-13841203.0) / 16777216.0))

axiom eq_291 : (sign1(ust_47) = Neg)

axiom eq_292 : is_finite(ust_47)

logic s_mul__t_3__t_13__t_47 : single

axiom eq_30 : mul_post(NearestTiesToEven, x0, ust_47, s_mul__t_3__t_13__t_47)

logic ust_48 : single

axiom eq_311 : mul_post(NearestTiesToEven, x0, ust_47, ust_48)

logic s_add__t_3__t_26__t_48 : single

axiom eq_321 : add_post(NearestTiesToEven, ust_26, ust_48,
  s_add__t_3__t_26__t_48)

logic ust_49 : single

axiom eq_33 : add_post(NearestTiesToEven, ust_26, ust_48, ust_49)

logic sfp_1_123_6509559 : single

axiom eq_34 : is_finite(sfp_1_123_6509559)

axiom eq_341 : (value(sfp_1_123_6509559) = ((-14898167.0) / 134217728.0))

logic ust_52 : single

axiom eq_35 : (value(ust_52) = ((-14898167.0) / 134217728.0))

axiom eq_351 : (sign1(ust_52) = Neg)

axiom eq_352 : is_finite(ust_52)

logic s_mul__t_3__t_17__t_52 : single

axiom eq_36 : mul_post(NearestTiesToEven, x1, ust_52, s_mul__t_3__t_17__t_52)

logic ust_53 : single

axiom eq_37 : mul_post(NearestTiesToEven, x1, ust_52, ust_53)

logic s_add__t_3__t_49__t_53 : single

axiom eq_38 : add_post(NearestTiesToEven, ust_49, ust_53,
  s_add__t_3__t_49__t_53)

logic ust_54 : single

axiom eq_39 : add_post(NearestTiesToEven, ust_49, ust_53, ust_54)

logic sfp_1_126_3758096 : single

axiom eq_40 : is_finite(sfp_1_126_3758096)

axiom eq_401 : (value(sfp_1_126_3758096) = ((-759169.0) / 1048576.0))

logic ust_57 : single

axiom eq_411 : (value(ust_57) = ((-759169.0) / 1048576.0))

axiom eq_412 : (sign1(ust_57) = Neg)

axiom eq_413 : is_finite(ust_57)

logic s_mul__t_3__t_21__t_57 : single

axiom eq_42 : mul_post(NearestTiesToEven, x2, ust_57, s_mul__t_3__t_21__t_57)

logic ust_58 : single

axiom eq_43 : mul_post(NearestTiesToEven, x2, ust_57, ust_58)

logic s_add__t_3__t_54__t_58 : single

axiom eq_44 : add_post(NearestTiesToEven, ust_54, ust_58,
  s_add__t_3__t_54__t_58)

logic ust_59 : single

axiom eq_45 : add_post(NearestTiesToEven, ust_54, ust_58, ust_59)

axiom ax_5 : le(ust_44, ust_59)

logic sfp_1_126_3288334 : single

axiom eq_46 : is_finite(sfp_1_126_3288334)

axiom eq_461 : (value(sfp_1_126_3288334) = ((-5838471.0) / 8388608.0))

logic ust_63 : single

axiom eq_47 : (value(ust_63) = ((-5838471.0) / 8388608.0))

axiom eq_471 : (sign1(ust_63) = Neg)

axiom eq_472 : is_finite(ust_63)

logic sfp_0_125_2080374 : single

axiom eq_48 : is_finite(sfp_0_125_2080374)

axiom eq_481 : (value(sfp_0_125_2080374) = (5234491.0 / 16777216.0))

logic ust_65 : single

axiom eq_49 : (value(ust_65) = (5234491.0 / 16777216.0))

axiom eq_491 : (sign1(ust_65) = Pos)

axiom eq_492 : is_finite(ust_65)

logic s_mul__t_3__t_13__t_65 : single

axiom eq_50 : mul_post(NearestTiesToEven, x0, ust_65, s_mul__t_3__t_13__t_65)

logic ust_66 : single

axiom eq_511 : mul_post(NearestTiesToEven, x0, ust_65, ust_66)

logic s_add__t_3__t_26__t_66 : single

axiom eq_521 : add_post(NearestTiesToEven, ust_26, ust_66,
  s_add__t_3__t_26__t_66)

logic ust_67 : single

axiom eq_53 : add_post(NearestTiesToEven, ust_26, ust_66, ust_67)

logic sfp_1_126_6073352 : single

axiom eq_54 : is_finite(sfp_1_126_6073352)

axiom eq_541 : (value(sfp_1_126_6073352) = ((-1807745.0) / 2097152.0))

logic ust_70 : single

axiom eq_55 : (value(ust_70) = ((-1807745.0) / 2097152.0))

axiom eq_551 : (sign1(ust_70) = Neg)

axiom eq_552 : is_finite(ust_70)

logic s_mul__t_3__t_17__t_70 : single

axiom eq_56 : mul_post(NearestTiesToEven, x1, ust_70, s_mul__t_3__t_17__t_70)

logic ust_71 : single

axiom eq_57 : mul_post(NearestTiesToEven, x1, ust_70, ust_71)

logic s_add__t_3__t_67__t_71 : single

axiom eq_58 : add_post(NearestTiesToEven, ust_67, ust_71,
  s_add__t_3__t_67__t_71)

logic ust_72 : single

axiom eq_59 : add_post(NearestTiesToEven, ust_67, ust_71, ust_72)

logic sfp_1_124_5167382 : single

axiom eq_60 : is_finite(sfp_1_124_5167382)

axiom eq_601 : (value(sfp_1_124_5167382) = ((-6777995.0) / 33554432.0))

logic ust_75 : single

axiom eq_611 : (value(ust_75) = ((-6777995.0) / 33554432.0))

axiom eq_612 : (sign1(ust_75) = Neg)

axiom eq_613 : is_finite(ust_75)

logic s_mul__t_3__t_21__t_75 : single

axiom eq_62 : mul_post(NearestTiesToEven, x2, ust_75, s_mul__t_3__t_21__t_75)

logic ust_76 : single

axiom eq_63 : mul_post(NearestTiesToEven, x2, ust_75, ust_76)

logic s_add__t_3__t_72__t_76 : single

axiom eq_64 : add_post(NearestTiesToEven, ust_72, ust_76,
  s_add__t_3__t_72__t_76)

logic ust_77 : single

axiom eq_65 : add_post(NearestTiesToEven, ust_72, ust_76, ust_77)

axiom ax_6 : le(ust_63, ust_77)

logic sfp_0_125_5804917 : single

axiom eq_66 : is_finite(sfp_0_125_5804917)

axiom eq_661 : (value(sfp_0_125_5804917) = (14193525.0 / 33554432.0))

logic ust_80 : single

axiom eq_67 : (value(ust_80) = (14193525.0 / 33554432.0))

axiom eq_671 : (sign1(ust_80) = Pos)

axiom eq_672 : is_finite(ust_80)

logic sfp_1_125_3791651 : single

axiom eq_68 : is_finite(sfp_1_125_3791651)

axiom eq_681 : (value(sfp_1_125_3791651) = ((-12180259.0) / 33554432.0))

logic ust_83 : single

axiom eq_69 : (value(ust_83) = ((-12180259.0) / 33554432.0))

axiom eq_691 : (sign1(ust_83) = Neg)

axiom eq_692 : is_finite(ust_83)

logic s_mul__t_3__t_13__t_83 : single

axiom eq_70 : mul_post(NearestTiesToEven, x0, ust_83, s_mul__t_3__t_13__t_83)

logic ust_84 : single

axiom eq_711 : mul_post(NearestTiesToEven, x0, ust_83, ust_84)

logic s_add__t_3__t_26__t_84 : single

axiom eq_721 : add_post(NearestTiesToEven, ust_26, ust_84,
  s_add__t_3__t_26__t_84)

logic ust_85 : single

axiom eq_73 : add_post(NearestTiesToEven, ust_26, ust_84, ust_85)

logic sfp_0_125_5972688 : single

axiom eq_74 : is_finite(sfp_0_125_5972688)

axiom eq_741 : (value(sfp_0_125_5972688) = (897581.0 / 2097152.0))

logic ust_87 : single

axiom eq_75 : (value(ust_87) = (897581.0 / 2097152.0))

axiom eq_751 : (sign1(ust_87) = Pos)

axiom eq_752 : is_finite(ust_87)

logic s_mul__t_3__t_17__t_87 : single

axiom eq_76 : mul_post(NearestTiesToEven, x1, ust_87, s_mul__t_3__t_17__t_87)

logic ust_88 : single

axiom eq_77 : mul_post(NearestTiesToEven, x1, ust_87, ust_88)

logic s_add__t_3__t_85__t_88 : single

axiom eq_78 : add_post(NearestTiesToEven, ust_85, ust_88,
  s_add__t_3__t_85__t_88)

logic ust_89 : single

axiom eq_79 : add_post(NearestTiesToEven, ust_85, ust_88, ust_89)

logic sfp_1_126_1627390 : single

axiom eq_80 : is_finite(sfp_1_126_1627390)

axiom eq_801 : (value(sfp_1_126_1627390) = ((-5007999.0) / 8388608.0))

logic ust_92 : single

axiom eq_811 : (value(ust_92) = ((-5007999.0) / 8388608.0))

axiom eq_812 : (sign1(ust_92) = Neg)

axiom eq_813 : is_finite(ust_92)

logic s_mul__t_3__t_21__t_92 : single

axiom eq_82 : mul_post(NearestTiesToEven, x2, ust_92, s_mul__t_3__t_21__t_92)

logic ust_93 : single

axiom eq_83 : mul_post(NearestTiesToEven, x2, ust_92, ust_93)

logic s_add__t_3__t_89__t_93 : single

axiom eq_84 : add_post(NearestTiesToEven, ust_89, ust_93,
  s_add__t_3__t_89__t_93)

logic ust_94 : single

axiom eq_85 : add_post(NearestTiesToEven, ust_89, ust_93, ust_94)

axiom ax_7 : le(ust_80, ust_94)

logic sfp_0_125_4395631 : single

axiom eq_86 : is_finite(sfp_0_125_4395631)

axiom eq_861 : (value(sfp_0_125_4395631) = (12784239.0 / 33554432.0))

logic ust_97 : single

axiom eq_87 : (value(ust_97) = (12784239.0 / 33554432.0))

axiom eq_871 : (sign1(ust_97) = Pos)

axiom eq_872 : is_finite(ust_97)

logic sfp_1_121_6106906 : single

axiom eq_88 : is_finite(sfp_1_121_6106906)

axiom eq_881 : (value(sfp_1_121_6106906) = ((-7247757.0) / 268435456.0))

logic ust_100 : single

axiom eq_89 : (value(ust_100) = ((-7247757.0) / 268435456.0))

axiom eq_891 : (sign1(ust_100) = Neg)

axiom eq_892 : is_finite(ust_100)

logic s_mul__t_3__t_13__t_100 : single

axiom eq_90 : mul_post(NearestTiesToEven, x0, ust_100,
  s_mul__t_3__t_13__t_100)

logic ust_101 : single

axiom eq_911 : mul_post(NearestTiesToEven, x0, ust_100, ust_101)

logic s_add__t_3__t_26__t_101 : single

axiom eq_921 : add_post(NearestTiesToEven, ust_26, ust_101,
  s_add__t_3__t_26__t_101)

logic ust_102 : single

axiom eq_93 : add_post(NearestTiesToEven, ust_26, ust_101, ust_102)

logic sfp_1_126_2768241 : single

axiom eq_94 : is_finite(sfp_1_126_2768241)

axiom eq_941 : (value(sfp_1_126_2768241) = ((-11156849.0) / 16777216.0))

logic ust_105 : single

axiom eq_95 : (value(ust_105) = ((-11156849.0) / 16777216.0))

axiom eq_951 : (sign1(ust_105) = Neg)

axiom eq_952 : is_finite(ust_105)

logic s_mul__t_3__t_17__t_105 : single

axiom eq_96 : mul_post(NearestTiesToEven, x1, ust_105,
  s_mul__t_3__t_17__t_105)

logic ust_106 : single

axiom eq_97 : mul_post(NearestTiesToEven, x1, ust_105, ust_106)

logic s_add__t_3__t_102__t_106 : single

axiom eq_98 : add_post(NearestTiesToEven, ust_102, ust_106,
  s_add__t_3__t_102__t_106)

logic ust_107 : single

axiom eq_99 : add_post(NearestTiesToEven, ust_102, ust_106, ust_107)

logic sfp_1_126_4177526 : single

axiom eq_100 : is_finite(sfp_1_126_4177526)

axiom eq_1001 : (value(sfp_1_126_4177526) = ((-6283067.0) / 8388608.0))

logic ust_110 : single

axiom eq_101 : (value(ust_110) = ((-6283067.0) / 8388608.0))

axiom eq_1011 : (sign1(ust_110) = Neg)

axiom eq_1012 : is_finite(ust_110)

logic s_mul__t_3__t_21__t_110 : single

axiom eq_102 : mul_post(NearestTiesToEven, x2, ust_110,
  s_mul__t_3__t_21__t_110)

logic ust_111 : single

axiom eq_103 : mul_post(NearestTiesToEven, x2, ust_110, ust_111)

logic s_add__t_3__t_107__t_111 : single

axiom eq_104 : add_post(NearestTiesToEven, ust_107, ust_111,
  s_add__t_3__t_107__t_111)

logic ust_112 : single

axiom eq_105 : add_post(NearestTiesToEven, ust_107, ust_111, ust_112)

axiom ax_8 : le(ust_97, ust_112)

logic sfp_0_126_2080374 : single

axiom eq_106 : is_finite(sfp_0_126_2080374)

axiom eq_1061 : (value(sfp_0_126_2080374) = (5234491.0 / 8388608.0))

logic ust_115 : single

axiom eq_107 : (value(ust_115) = (5234491.0 / 8388608.0))

axiom eq_1071 : (sign1(ust_115) = Pos)

axiom eq_1072 : is_finite(ust_115)

logic sfp_0_125_5033164 : single

axiom eq_108 : is_finite(sfp_0_125_5033164)

axiom eq_1081 : (value(sfp_0_125_5033164) = (3355443.0 / 8388608.0))

logic ust_117 : single

axiom eq_109 : (value(ust_117) = (3355443.0 / 8388608.0))

axiom eq_1091 : (sign1(ust_117) = Pos)

axiom eq_1092 : is_finite(ust_117)

logic s_mul__t_3__t_13__t_117 : single

axiom eq_110 : mul_post(NearestTiesToEven, x0, ust_117,
  s_mul__t_3__t_13__t_117)

logic ust_118 : single

axiom eq_1111 : mul_post(NearestTiesToEven, x0, ust_117, ust_118)

logic s_add__t_3__t_26__t_118 : single

axiom eq_112 : add_post(NearestTiesToEven, ust_26, ust_118,
  s_add__t_3__t_26__t_118)

logic ust_119 : single

axiom eq_113 : add_post(NearestTiesToEven, ust_26, ust_118, ust_119)

logic sfp_1_126_4009755 : single

axiom eq_114 : is_finite(sfp_1_126_4009755)

axiom eq_1141 : (value(sfp_1_126_4009755) = ((-12398363.0) / 16777216.0))

logic ust_122 : single

axiom eq_115 : (value(ust_122) = ((-12398363.0) / 16777216.0))

axiom eq_1151 : (sign1(ust_122) = Neg)

axiom eq_1152 : is_finite(ust_122)

logic s_mul__t_3__t_17__t_122 : single

axiom eq_116 : mul_post(NearestTiesToEven, x1, ust_122,
  s_mul__t_3__t_17__t_122)

logic ust_123 : single

axiom eq_117 : mul_post(NearestTiesToEven, x1, ust_122, ust_123)

logic s_add__t_3__t_119__t_123 : single

axiom eq_118 : add_post(NearestTiesToEven, ust_119, ust_123,
  s_add__t_3__t_119__t_123)

logic ust_124 : single

axiom eq_119 : add_post(NearestTiesToEven, ust_119, ust_123, ust_124)

logic sfp_1_126_33553 : single

axiom eq_120 : is_finite(sfp_1_126_33553)

axiom eq_1201 : (value(sfp_1_126_33553) = ((-8422161.0) / 16777216.0))

logic ust_127 : single

axiom eq_1211 : (value(ust_127) = ((-8422161.0) / 16777216.0))

axiom eq_1212 : (sign1(ust_127) = Neg)

axiom eq_1213 : is_finite(ust_127)

logic s_mul__t_3__t_21__t_127 : single

axiom eq_122 : mul_post(NearestTiesToEven, x2, ust_127,
  s_mul__t_3__t_21__t_127)

logic ust_128 : single

axiom eq_123 : mul_post(NearestTiesToEven, x2, ust_127, ust_128)

logic s_add__t_3__t_124__t_128 : single

axiom eq_124 : add_post(NearestTiesToEven, ust_124, ust_128,
  s_add__t_3__t_124__t_128)

logic ust_129 : single

axiom eq_125 : add_post(NearestTiesToEven, ust_124, ust_128, ust_129)

axiom ax_9 : le(ust_129, ust_115)

logic sfp_0_126_6207569 : single

axiom eq_126 : is_finite(sfp_0_126_6207569)

axiom eq_1261 : (value(sfp_0_126_6207569) = (14596177.0 / 16777216.0))

logic ust_132 : single

axiom eq_127 : (value(ust_132) = (14596177.0 / 16777216.0))

axiom eq_1271 : (sign1(ust_132) = Pos)

axiom eq_1272 : is_finite(ust_132)

logic sfp_0_126_4882169 : single

axiom eq_128 : is_finite(sfp_0_126_4882169)

axiom eq_1281 : (value(sfp_0_126_4882169) = (13270777.0 / 16777216.0))

logic ust_134 : single

axiom eq_129 : (value(ust_134) = (13270777.0 / 16777216.0))

axiom eq_1291 : (sign1(ust_134) = Pos)

axiom eq_1292 : is_finite(ust_134)

logic s_mul__t_3__t_13__t_134 : single

axiom eq_130 : mul_post(NearestTiesToEven, x0, ust_134,
  s_mul__t_3__t_13__t_134)

logic ust_135 : single

axiom eq_131 : mul_post(NearestTiesToEven, x0, ust_134, ust_135)

logic s_add__t_3__t_26__t_135 : single

axiom eq_132 : add_post(NearestTiesToEven, ust_26, ust_135,
  s_add__t_3__t_26__t_135)

logic ust_136 : single

axiom eq_133 : add_post(NearestTiesToEven, ust_26, ust_135, ust_136)

logic s_mul__t_3__t_17__t_39 : single

axiom eq_134 : mul_post(NearestTiesToEven, x1, ust_39,
  s_mul__t_3__t_17__t_39)

logic ust_137 : single

axiom eq_135 : mul_post(NearestTiesToEven, x1, ust_39, ust_137)

logic s_add__t_3__t_136__t_137 : single

axiom eq_136 : add_post(NearestTiesToEven, ust_136, ust_137,
  s_add__t_3__t_136__t_137)

logic ust_138 : single

axiom eq_137 : add_post(NearestTiesToEven, ust_136, ust_137, ust_138)

logic sfp_0_126_4932502 : single

axiom eq_138 : is_finite(sfp_0_126_4932502)

axiom eq_1381 : (value(sfp_0_126_4932502) = (6660555.0 / 8388608.0))

logic ust_140 : single

axiom eq_139 : (value(ust_140) = (6660555.0 / 8388608.0))

axiom eq_1391 : (sign1(ust_140) = Pos)

axiom eq_1392 : is_finite(ust_140)

logic s_mul__t_3__t_21__t_140 : single

axiom eq_140 : mul_post(NearestTiesToEven, x2, ust_140,
  s_mul__t_3__t_21__t_140)

logic ust_141 : single

axiom eq_1411 : mul_post(NearestTiesToEven, x2, ust_140, ust_141)

logic s_add__t_3__t_138__t_141 : single

axiom eq_142 : add_post(NearestTiesToEven, ust_138, ust_141,
  s_add__t_3__t_138__t_141)

logic ust_142 : single

axiom eq_143 : add_post(NearestTiesToEven, ust_138, ust_141, ust_142)

axiom ax_10 : le(ust_142, ust_132)

logic sfp_1_125_3388998 : single

axiom eq_144 : is_finite(sfp_1_125_3388998)

axiom eq_1441 : (value(sfp_1_125_3388998) = ((-5888803.0) / 16777216.0))

logic ust_146 : single

axiom eq_145 : (value(ust_146) = ((-5888803.0) / 16777216.0))

axiom eq_1451 : (sign1(ust_146) = Neg)

axiom eq_1452 : is_finite(ust_146)

logic sfp_1_126_4915724 : single

axiom eq_146 : is_finite(sfp_1_126_4915724)

axiom eq_1461 : (value(sfp_1_126_4915724) = ((-3326083.0) / 4194304.0))

logic ust_149 : single

axiom eq_147 : (value(ust_149) = ((-3326083.0) / 4194304.0))

axiom eq_1471 : (sign1(ust_149) = Neg)

axiom eq_1472 : is_finite(ust_149)

logic s_mul__t_3__t_13__t_149 : single

axiom eq_148 : mul_post(NearestTiesToEven, x0, ust_149,
  s_mul__t_3__t_13__t_149)

logic ust_150 : single

axiom eq_149 : mul_post(NearestTiesToEven, x0, ust_149, ust_150)

logic s_add__t_3__t_26__t_150 : single

axiom eq_150 : add_post(NearestTiesToEven, ust_26, ust_150,
  s_add__t_3__t_26__t_150)

logic ust_151 : single

axiom eq_1511 : add_post(NearestTiesToEven, ust_26, ust_150, ust_151)

logic sfp_0_126_2415918 : single

axiom eq_1521 : is_finite(sfp_0_126_2415918)

axiom eq_1522 : (value(sfp_0_126_2415918) = (5402263.0 / 8388608.0))

logic ust_153 : single

axiom eq_153 : (value(ust_153) = (5402263.0 / 8388608.0))

axiom eq_1531 : (sign1(ust_153) = Pos)

axiom eq_1532 : is_finite(ust_153)

logic s_mul__t_3__t_17__t_153 : single

axiom eq_154 : mul_post(NearestTiesToEven, x1, ust_153,
  s_mul__t_3__t_17__t_153)

logic ust_154 : single

axiom eq_155 : mul_post(NearestTiesToEven, x1, ust_153, ust_154)

logic s_add__t_3__t_151__t_154 : single

axiom eq_156 : add_post(NearestTiesToEven, ust_151, ust_154,
  s_add__t_3__t_151__t_154)

logic ust_155 : single

axiom eq_157 : add_post(NearestTiesToEven, ust_151, ust_154, ust_155)

logic sfp_1_125_1979711 : single

axiom eq_158 : is_finite(sfp_1_125_1979711)

axiom eq_1581 : (value(sfp_1_125_1979711) = ((-10368319.0) / 33554432.0))

logic ust_158 : single

axiom eq_159 : (value(ust_158) = ((-10368319.0) / 33554432.0))

axiom eq_1591 : (sign1(ust_158) = Neg)

axiom eq_1592 : is_finite(ust_158)

logic s_mul__t_3__t_21__t_158 : single

axiom eq_160 : mul_post(NearestTiesToEven, x2, ust_158,
  s_mul__t_3__t_21__t_158)

logic ust_159 : single

axiom eq_161 : mul_post(NearestTiesToEven, x2, ust_158, ust_159)

logic s_add__t_3__t_155__t_159 : single

axiom eq_162 : add_post(NearestTiesToEven, ust_155, ust_159,
  s_add__t_3__t_155__t_159)

logic ust_160 : single

axiom eq_163 : add_post(NearestTiesToEven, ust_155, ust_159, ust_160)

axiom ax_11 : le(ust_160, ust_146)

goal g_1 : false
