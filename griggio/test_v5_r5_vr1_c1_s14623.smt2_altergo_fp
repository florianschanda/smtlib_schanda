(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

logic x0 : single

logic x1 : single

logic x2 : single

logic x3 : single

logic x4 : single

logic sfp_0_127_0 : single

axiom eq_0 : is_finite(sfp_0_127_0)

axiom eq_01 : (value(sfp_0_127_0) = 1.0)

logic ust_10 : single

axiom eq_1 : (value(ust_10) = 1.0)

axiom eq_11 : (sign1(ust_10) = Pos)

axiom eq_12 : is_finite(ust_10)

logic sfp_1_127_0 : single

axiom eq_2 : is_finite(sfp_1_127_0)

axiom eq_21 : (value(sfp_1_127_0) = (-1.0))

logic ust_12 : single

axiom eq_3 : (value(ust_12) = (-1.0))

axiom eq_31 : (sign1(ust_12) = Neg)

axiom eq_32 : is_finite(ust_12)

predicate ust_16() = (le(ust_12, x0) and le(x0, ust_10))

axiom ax_1 : ust_16

predicate ust_20() = (le(ust_12, x1) and le(x1, ust_10))

axiom ax_2 : ust_20

predicate ust_24() = (le(ust_12, x2) and le(x2, ust_10))

axiom ax_3 : ust_24

predicate ust_28() = (le(ust_12, x3) and le(x3, ust_10))

axiom ax_4 : ust_28

predicate ust_32() = (le(ust_12, x4) and le(x4, ust_10))

axiom ax_5 : ust_32

logic sfp_0_0_0 : single

axiom eq_4 : is_finite(sfp_0_0_0)

axiom eq_41 : (value(sfp_0_0_0) = 0.0)

logic ust_34 : single

axiom eq_5 : (value(ust_34) = 0.0)

axiom eq_51 : (sign1(ust_34) = Pos)

axiom eq_52 : is_finite(ust_34)

logic sfp_1_124_2013266 : single

axiom eq_6 : is_finite(sfp_1_124_2013266)

axiom eq_61 : (value(sfp_1_124_2013266) = ((-5200937.0) / 33554432.0))

logic ust_37 : single

axiom eq_7 : (value(ust_37) = ((-5200937.0) / 33554432.0))

axiom eq_71 : (sign1(ust_37) = Neg)

axiom eq_72 : is_finite(ust_37)

logic sfp_1_123_5301600 : single

axiom eq_8 : is_finite(sfp_1_123_5301600)

axiom eq_81 : (value(sfp_1_123_5301600) = ((-427819.0) / 4194304.0))

logic ust_40 : single

axiom eq_9 : (value(ust_40) = ((-427819.0) / 4194304.0))

axiom eq_91 : (sign1(ust_40) = Neg)

axiom eq_92 : is_finite(ust_40)

logic s_mul__t_3__t_13__t_40 : single

axiom eq_10 : mul_post(NearestTiesToEven, x0, ust_40, s_mul__t_3__t_13__t_40)

logic ust_41 : single

axiom eq_111 : mul_post(NearestTiesToEven, x0, ust_40, ust_41)

logic s_add__t_3__t_34__t_41 : single

axiom eq_121 : add_post(NearestTiesToEven, ust_34, ust_41,
  s_add__t_3__t_34__t_41)

logic ust_42 : single

axiom eq_13 : add_post(NearestTiesToEven, ust_34, ust_41, ust_42)

logic sfp_1_124_5033165 : single

axiom eq_14 : is_finite(sfp_1_124_5033165)

axiom eq_141 : (value(sfp_1_124_5033165) = ((-13421773.0) / 67108864.0))

logic ust_45 : single

axiom eq_15 : (value(ust_45) = ((-13421773.0) / 67108864.0))

axiom eq_151 : (sign1(ust_45) = Neg)

axiom eq_152 : is_finite(ust_45)

logic s_mul__t_3__t_17__t_45 : single

axiom eq_16 : mul_post(NearestTiesToEven, x1, ust_45, s_mul__t_3__t_17__t_45)

logic ust_46 : single

axiom eq_17 : mul_post(NearestTiesToEven, x1, ust_45, ust_46)

logic s_add__t_3__t_42__t_46 : single

axiom eq_18 : add_post(NearestTiesToEven, ust_42, ust_46,
  s_add__t_3__t_42__t_46)

logic ust_47 : single

axiom eq_19 : add_post(NearestTiesToEven, ust_42, ust_46, ust_47)

logic sfp_1_124_6912213 : single

axiom eq_20 : is_finite(sfp_1_124_6912213)

axiom eq_201 : (value(sfp_1_124_6912213) = ((-15300821.0) / 67108864.0))

logic ust_50 : single

axiom eq_211 : (value(ust_50) = ((-15300821.0) / 67108864.0))

axiom eq_212 : (sign1(ust_50) = Neg)

axiom eq_213 : is_finite(ust_50)

logic s_mul__t_3__t_21__t_50 : single

axiom eq_22 : mul_post(NearestTiesToEven, x2, ust_50, s_mul__t_3__t_21__t_50)

logic ust_51 : single

axiom eq_23 : mul_post(NearestTiesToEven, x2, ust_50, ust_51)

logic s_add__t_3__t_47__t_51 : single

axiom eq_24 : add_post(NearestTiesToEven, ust_47, ust_51,
  s_add__t_3__t_47__t_51)

logic ust_52 : single

axiom eq_25 : add_post(NearestTiesToEven, ust_47, ust_51, ust_52)

logic sfp_0_125_301990 : single

axiom eq_26 : is_finite(sfp_0_125_301990)

axiom eq_261 : (value(sfp_0_125_301990) = (4345299.0 / 16777216.0))

logic ust_54 : single

axiom eq_27 : (value(ust_54) = (4345299.0 / 16777216.0))

axiom eq_271 : (sign1(ust_54) = Pos)

axiom eq_272 : is_finite(ust_54)

logic s_mul__t_3__t_25__t_54 : single

axiom eq_28 : mul_post(NearestTiesToEven, x3, ust_54, s_mul__t_3__t_25__t_54)

logic ust_55 : single

axiom eq_29 : mul_post(NearestTiesToEven, x3, ust_54, ust_55)

logic s_add__t_3__t_52__t_55 : single

axiom eq_30 : add_post(NearestTiesToEven, ust_52, ust_55,
  s_add__t_3__t_52__t_55)

logic ust_56 : single

axiom eq_311 : add_post(NearestTiesToEven, ust_52, ust_55, ust_56)

logic sfp_0_126_4278190 : single

axiom eq_321 : is_finite(sfp_0_126_4278190)

axiom eq_322 : (value(sfp_0_126_4278190) = (6333399.0 / 8388608.0))

logic ust_58 : single

axiom eq_33 : (value(ust_58) = (6333399.0 / 8388608.0))

axiom eq_331 : (sign1(ust_58) = Pos)

axiom eq_332 : is_finite(ust_58)

logic s_mul__t_3__t_29__t_58 : single

axiom eq_34 : mul_post(NearestTiesToEven, x4, ust_58, s_mul__t_3__t_29__t_58)

logic ust_59 : single

axiom eq_35 : mul_post(NearestTiesToEven, x4, ust_58, ust_59)

logic s_add__t_3__t_56__t_59 : single

axiom eq_36 : add_post(NearestTiesToEven, ust_56, ust_59,
  s_add__t_3__t_56__t_59)

logic ust_60 : single

axiom eq_37 : add_post(NearestTiesToEven, ust_56, ust_59, ust_60)

axiom ax_6 : le(ust_37, ust_60)

logic sfp_0_126_4076862 : single

axiom eq_38 : is_finite(sfp_0_126_4076862)

axiom eq_381 : (value(sfp_0_126_4076862) = (6232735.0 / 8388608.0))

logic ust_63 : single

axiom eq_39 : (value(ust_63) = (6232735.0 / 8388608.0))

axiom eq_391 : (sign1(ust_63) = Pos)

axiom eq_392 : is_finite(ust_63)

logic sfp_0_119_6643777 : single

axiom eq_40 : is_finite(sfp_0_119_6643777)

axiom eq_401 : (value(sfp_0_119_6643777) = (15032385.0 / 2147483648.0))

logic ust_65 : single

axiom eq_411 : (value(ust_65) = (15032385.0 / 2147483648.0))

axiom eq_412 : (sign1(ust_65) = Pos)

axiom eq_413 : is_finite(ust_65)

logic s_mul__t_3__t_13__t_65 : single

axiom eq_42 : mul_post(NearestTiesToEven, x0, ust_65, s_mul__t_3__t_13__t_65)

logic ust_66 : single

axiom eq_43 : mul_post(NearestTiesToEven, x0, ust_65, ust_66)

logic s_add__t_3__t_34__t_66 : single

axiom eq_44 : add_post(NearestTiesToEven, ust_34, ust_66,
  s_add__t_3__t_34__t_66)

logic ust_67 : single

axiom eq_45 : add_post(NearestTiesToEven, ust_34, ust_66, ust_67)

logic sfp_1_124_2818572 : single

axiom eq_46 : is_finite(sfp_1_124_2818572)

axiom eq_461 : (value(sfp_1_124_2818572) = ((-2801795.0) / 16777216.0))

logic ust_70 : single

axiom eq_47 : (value(ust_70) = ((-2801795.0) / 16777216.0))

axiom eq_471 : (sign1(ust_70) = Neg)

axiom eq_472 : is_finite(ust_70)

logic s_mul__t_3__t_17__t_70 : single

axiom eq_48 : mul_post(NearestTiesToEven, x1, ust_70, s_mul__t_3__t_17__t_70)

logic ust_71 : single

axiom eq_49 : mul_post(NearestTiesToEven, x1, ust_70, ust_71)

logic s_add__t_3__t_67__t_71 : single

axiom eq_50 : add_post(NearestTiesToEven, ust_67, ust_71,
  s_add__t_3__t_67__t_71)

logic ust_72 : single

axiom eq_511 : add_post(NearestTiesToEven, ust_67, ust_71, ust_72)

logic sfp_1_126_2701132 : single

axiom eq_521 : is_finite(sfp_1_126_2701132)

axiom eq_522 : (value(sfp_1_126_2701132) = ((-2772435.0) / 4194304.0))

logic ust_75 : single

axiom eq_53 : (value(ust_75) = ((-2772435.0) / 4194304.0))

axiom eq_531 : (sign1(ust_75) = Neg)

axiom eq_532 : is_finite(ust_75)

logic s_mul__t_3__t_21__t_75 : single

axiom eq_54 : mul_post(NearestTiesToEven, x2, ust_75, s_mul__t_3__t_21__t_75)

logic ust_76 : single

axiom eq_55 : mul_post(NearestTiesToEven, x2, ust_75, ust_76)

logic s_add__t_3__t_72__t_76 : single

axiom eq_56 : add_post(NearestTiesToEven, ust_72, ust_76,
  s_add__t_3__t_72__t_76)

logic ust_77 : single

axiom eq_57 : add_post(NearestTiesToEven, ust_72, ust_76, ust_77)

logic sfp_1_124_67108 : single

axiom eq_58 : is_finite(sfp_1_124_67108)

axiom eq_581 : (value(sfp_1_124_67108) = ((-2113929.0) / 16777216.0))

logic ust_80 : single

axiom eq_59 : (value(ust_80) = ((-2113929.0) / 16777216.0))

axiom eq_591 : (sign1(ust_80) = Neg)

axiom eq_592 : is_finite(ust_80)

logic s_mul__t_3__t_25__t_80 : single

axiom eq_60 : mul_post(NearestTiesToEven, x3, ust_80, s_mul__t_3__t_25__t_80)

logic ust_81 : single

axiom eq_611 : mul_post(NearestTiesToEven, x3, ust_80, ust_81)

logic s_add__t_3__t_77__t_81 : single

axiom eq_62 : add_post(NearestTiesToEven, ust_77, ust_81,
  s_add__t_3__t_77__t_81)

logic ust_82 : single

axiom eq_63 : add_post(NearestTiesToEven, ust_77, ust_81, ust_82)

logic sfp_1_126_1426062 : single

axiom eq_64 : is_finite(sfp_1_126_1426062)

axiom eq_641 : (value(sfp_1_126_1426062) = ((-4907335.0) / 8388608.0))

logic ust_85 : single

axiom eq_65 : (value(ust_85) = ((-4907335.0) / 8388608.0))

axiom eq_651 : (sign1(ust_85) = Neg)

axiom eq_652 : is_finite(ust_85)

logic s_mul__t_3__t_29__t_85 : single

axiom eq_66 : mul_post(NearestTiesToEven, x4, ust_85, s_mul__t_3__t_29__t_85)

logic ust_86 : single

axiom eq_67 : mul_post(NearestTiesToEven, x4, ust_85, ust_86)

logic s_add__t_3__t_82__t_86 : single

axiom eq_68 : add_post(NearestTiesToEven, ust_82, ust_86,
  s_add__t_3__t_82__t_86)

logic ust_87 : single

axiom eq_69 : add_post(NearestTiesToEven, ust_82, ust_86, ust_87)

axiom ax_7 : le(ust_63, ust_87)

logic sfp_0_126_6627000 : single

axiom eq_70 : is_finite(sfp_0_126_6627000)

axiom eq_701 : (value(sfp_0_126_6627000) = (1876951.0 / 2097152.0))

logic ust_90 : single

axiom eq_711 : (value(ust_90) = (1876951.0 / 2097152.0))

axiom eq_712 : (sign1(ust_90) = Pos)

axiom eq_713 : is_finite(ust_90)

logic sfp_0_123_6509559 : single

axiom eq_721 : is_finite(sfp_0_123_6509559)

axiom eq_722 : (value(sfp_0_123_6509559) = (14898167.0 / 134217728.0))

logic ust_92 : single

axiom eq_73 : (value(ust_92) = (14898167.0 / 134217728.0))

axiom eq_731 : (sign1(ust_92) = Pos)

axiom eq_732 : is_finite(ust_92)

logic s_mul__t_3__t_13__t_92 : single

axiom eq_74 : mul_post(NearestTiesToEven, x0, ust_92, s_mul__t_3__t_13__t_92)

logic ust_93 : single

axiom eq_75 : mul_post(NearestTiesToEven, x0, ust_92, ust_93)

logic s_add__t_3__t_34__t_93 : single

axiom eq_76 : add_post(NearestTiesToEven, ust_34, ust_93,
  s_add__t_3__t_34__t_93)

logic ust_94 : single

axiom eq_77 : add_post(NearestTiesToEven, ust_34, ust_93, ust_94)

logic sfp_1_125_8153727 : single

axiom eq_78 : is_finite(sfp_1_125_8153727)

axiom eq_781 : (value(sfp_1_125_8153727) = ((-16542335.0) / 33554432.0))

logic ust_97 : single

axiom eq_79 : (value(ust_97) = ((-16542335.0) / 33554432.0))

axiom eq_791 : (sign1(ust_97) = Neg)

axiom eq_792 : is_finite(ust_97)

logic s_mul__t_3__t_17__t_97 : single

axiom eq_80 : mul_post(NearestTiesToEven, x1, ust_97, s_mul__t_3__t_17__t_97)

logic ust_98 : single

axiom eq_811 : mul_post(NearestTiesToEven, x1, ust_97, ust_98)

logic s_add__t_3__t_94__t_98 : single

axiom eq_82 : add_post(NearestTiesToEven, ust_94, ust_98,
  s_add__t_3__t_94__t_98)

logic ust_99 : single

axiom eq_83 : add_post(NearestTiesToEven, ust_94, ust_98, ust_99)

logic sfp_1_125_6140460 : single

axiom eq_84 : is_finite(sfp_1_125_6140460)

axiom eq_841 : (value(sfp_1_125_6140460) = ((-3632267.0) / 8388608.0))

logic ust_102 : single

axiom eq_85 : (value(ust_102) = ((-3632267.0) / 8388608.0))

axiom eq_851 : (sign1(ust_102) = Neg)

axiom eq_852 : is_finite(ust_102)

logic s_mul__t_3__t_21__t_102 : single

axiom eq_86 : mul_post(NearestTiesToEven, x2, ust_102,
  s_mul__t_3__t_21__t_102)

logic ust_103 : single

axiom eq_87 : mul_post(NearestTiesToEven, x2, ust_102, ust_103)

logic s_add__t_3__t_99__t_103 : single

axiom eq_88 : add_post(NearestTiesToEven, ust_99, ust_103,
  s_add__t_3__t_99__t_103)

logic ust_104 : single

axiom eq_89 : add_post(NearestTiesToEven, ust_99, ust_103, ust_104)

logic sfp_0_123_3154116 : single

axiom eq_90 : is_finite(sfp_0_123_3154116)

axiom eq_901 : (value(sfp_0_123_3154116) = (2885681.0 / 33554432.0))

logic ust_106 : single

axiom eq_911 : (value(ust_106) = (2885681.0 / 33554432.0))

axiom eq_912 : (sign1(ust_106) = Pos)

axiom eq_913 : is_finite(ust_106)

logic s_mul__t_3__t_25__t_106 : single

axiom eq_921 : mul_post(NearestTiesToEven, x3, ust_106,
  s_mul__t_3__t_25__t_106)

logic ust_107 : single

axiom eq_93 : mul_post(NearestTiesToEven, x3, ust_106, ust_107)

logic s_add__t_3__t_104__t_107 : single

axiom eq_94 : add_post(NearestTiesToEven, ust_104, ust_107,
  s_add__t_3__t_104__t_107)

logic ust_108 : single

axiom eq_95 : add_post(NearestTiesToEven, ust_104, ust_107, ust_108)

logic sfp_1_126_2768241 : single

axiom eq_96 : is_finite(sfp_1_126_2768241)

axiom eq_961 : (value(sfp_1_126_2768241) = ((-11156849.0) / 16777216.0))

logic ust_111 : single

axiom eq_97 : (value(ust_111) = ((-11156849.0) / 16777216.0))

axiom eq_971 : (sign1(ust_111) = Neg)

axiom eq_972 : is_finite(ust_111)

logic s_mul__t_3__t_29__t_111 : single

axiom eq_98 : mul_post(NearestTiesToEven, x4, ust_111,
  s_mul__t_3__t_29__t_111)

logic ust_112 : single

axiom eq_99 : mul_post(NearestTiesToEven, x4, ust_111, ust_112)

logic s_add__t_3__t_108__t_112 : single

axiom eq_100 : add_post(NearestTiesToEven, ust_108, ust_112,
  s_add__t_3__t_108__t_112)

logic ust_113 : single

axiom eq_101 : add_post(NearestTiesToEven, ust_108, ust_112, ust_113)

axiom ax_8 : le(ust_113, ust_90)

logic sfp_0_126_2516582 : single

axiom eq_102 : is_finite(sfp_0_126_2516582)

axiom eq_1021 : (value(sfp_0_126_2516582) = (5452595.0 / 8388608.0))

logic ust_116 : single

axiom eq_103 : (value(ust_116) = (5452595.0 / 8388608.0))

axiom eq_1031 : (sign1(ust_116) = Pos)

axiom eq_1032 : is_finite(ust_116)

logic sfp_0_125_6207570 : single

axiom eq_104 : is_finite(sfp_0_125_6207570)

axiom eq_1041 : (value(sfp_0_125_6207570) = (7298089.0 / 16777216.0))

logic ust_118 : single

axiom eq_105 : (value(ust_118) = (7298089.0 / 16777216.0))

axiom eq_1051 : (sign1(ust_118) = Pos)

axiom eq_1052 : is_finite(ust_118)

logic s_mul__t_3__t_13__t_118 : single

axiom eq_106 : mul_post(NearestTiesToEven, x0, ust_118,
  s_mul__t_3__t_13__t_118)

logic ust_119 : single

axiom eq_107 : mul_post(NearestTiesToEven, x0, ust_118, ust_119)

logic s_add__t_3__t_34__t_119 : single

axiom eq_108 : add_post(NearestTiesToEven, ust_34, ust_119,
  s_add__t_3__t_34__t_119)

logic ust_120 : single

axiom eq_109 : add_post(NearestTiesToEven, ust_34, ust_119, ust_120)

logic sfp_1_123_738197 : single

axiom eq_110 : is_finite(sfp_1_123_738197)

axiom eq_1101 : (value(sfp_1_123_738197) = ((-9126805.0) / 134217728.0))

logic ust_123 : single

axiom eq_1111 : (value(ust_123) = ((-9126805.0) / 134217728.0))

axiom eq_1112 : (sign1(ust_123) = Neg)

axiom eq_1113 : is_finite(ust_123)

logic s_mul__t_3__t_17__t_123 : single

axiom eq_112 : mul_post(NearestTiesToEven, x1, ust_123,
  s_mul__t_3__t_17__t_123)

logic ust_124 : single

axiom eq_113 : mul_post(NearestTiesToEven, x1, ust_123, ust_124)

logic s_add__t_3__t_120__t_124 : single

axiom eq_114 : add_post(NearestTiesToEven, ust_120, ust_124,
  s_add__t_3__t_120__t_124)

logic ust_125 : single

axiom eq_115 : add_post(NearestTiesToEven, ust_120, ust_124, ust_125)

logic sfp_1_125_3053452 : single

axiom eq_116 : is_finite(sfp_1_125_3053452)

axiom eq_1161 : (value(sfp_1_125_3053452) = ((-2860515.0) / 8388608.0))

logic ust_128 : single

axiom eq_117 : (value(ust_128) = ((-2860515.0) / 8388608.0))

axiom eq_1171 : (sign1(ust_128) = Neg)

axiom eq_1172 : is_finite(ust_128)

logic s_mul__t_3__t_21__t_128 : single

axiom eq_118 : mul_post(NearestTiesToEven, x2, ust_128,
  s_mul__t_3__t_21__t_128)

logic ust_129 : single

axiom eq_119 : mul_post(NearestTiesToEven, x2, ust_128, ust_129)

logic s_add__t_3__t_125__t_129 : single

axiom eq_120 : add_post(NearestTiesToEven, ust_125, ust_129,
  s_add__t_3__t_125__t_129)

logic ust_130 : single

axiom eq_1211 : add_post(NearestTiesToEven, ust_125, ust_129, ust_130)

logic s_mul__t_3__t_25__t_40 : single

axiom eq_122 : mul_post(NearestTiesToEven, x3, ust_40,
  s_mul__t_3__t_25__t_40)

logic ust_131 : single

axiom eq_123 : mul_post(NearestTiesToEven, x3, ust_40, ust_131)

logic s_add__t_3__t_130__t_131 : single

axiom eq_124 : add_post(NearestTiesToEven, ust_130, ust_131,
  s_add__t_3__t_130__t_131)

logic ust_132 : single

axiom eq_125 : add_post(NearestTiesToEven, ust_130, ust_131, ust_132)

logic sfp_1_126_7918846 : single

axiom eq_126 : is_finite(sfp_1_126_7918846)

axiom eq_1261 : (value(sfp_1_126_7918846) = ((-8153727.0) / 8388608.0))

logic ust_135 : single

axiom eq_127 : (value(ust_135) = ((-8153727.0) / 8388608.0))

axiom eq_1271 : (sign1(ust_135) = Neg)

axiom eq_1272 : is_finite(ust_135)

logic s_mul__t_3__t_29__t_135 : single

axiom eq_128 : mul_post(NearestTiesToEven, x4, ust_135,
  s_mul__t_3__t_29__t_135)

logic ust_136 : single

axiom eq_129 : mul_post(NearestTiesToEven, x4, ust_135, ust_136)

logic s_add__t_3__t_132__t_136 : single

axiom eq_130 : add_post(NearestTiesToEven, ust_132, ust_136,
  s_add__t_3__t_132__t_136)

logic ust_137 : single

axiom eq_131 : add_post(NearestTiesToEven, ust_132, ust_136, ust_137)

axiom ax_9 : le(ust_116, ust_137)

logic sfp_0_124_3221225 : single

axiom eq_132 : is_finite(sfp_0_124_3221225)

axiom eq_1321 : (value(sfp_0_124_3221225) = (11609833.0 / 67108864.0))

logic ust_140 : single

axiom eq_133 : (value(ust_140) = (11609833.0 / 67108864.0))

axiom eq_1331 : (sign1(ust_140) = Pos)

axiom eq_1332 : is_finite(ust_140)

logic sfp_1_126_2097152 : single

axiom eq_134 : is_finite(sfp_1_126_2097152)

axiom eq_1341 : (value(sfp_1_126_2097152) = ((-5.0) / 8.0))

logic ust_143 : single

axiom eq_135 : (value(ust_143) = ((-5.0) / 8.0))

axiom eq_1351 : (sign1(ust_143) = Neg)

axiom eq_1352 : is_finite(ust_143)

logic s_mul__t_3__t_13__t_143 : single

axiom eq_136 : mul_post(NearestTiesToEven, x0, ust_143,
  s_mul__t_3__t_13__t_143)

logic ust_144 : single

axiom eq_137 : mul_post(NearestTiesToEven, x0, ust_143, ust_144)

logic s_add__t_3__t_34__t_144 : single

axiom eq_138 : add_post(NearestTiesToEven, ust_34, ust_144,
  s_add__t_3__t_34__t_144)

logic ust_145 : single

axiom eq_139 : add_post(NearestTiesToEven, ust_34, ust_144, ust_145)

logic sfp_0_126_33553 : single

axiom eq_140 : is_finite(sfp_0_126_33553)

axiom eq_1401 : (value(sfp_0_126_33553) = (8422161.0 / 16777216.0))

logic ust_147 : single

axiom eq_1411 : (value(ust_147) = (8422161.0 / 16777216.0))

axiom eq_1412 : (sign1(ust_147) = Pos)

axiom eq_1413 : is_finite(ust_147)

logic s_mul__t_3__t_17__t_147 : single

axiom eq_142 : mul_post(NearestTiesToEven, x1, ust_147,
  s_mul__t_3__t_17__t_147)

logic ust_148 : single

axiom eq_143 : mul_post(NearestTiesToEven, x1, ust_147, ust_148)

logic s_add__t_3__t_145__t_148 : single

axiom eq_144 : add_post(NearestTiesToEven, ust_145, ust_148,
  s_add__t_3__t_145__t_148)

logic ust_149 : single

axiom eq_145 : add_post(NearestTiesToEven, ust_145, ust_148, ust_149)

logic sfp_1_121_2348810 : single

axiom eq_146 : is_finite(sfp_1_121_2348810)

axiom eq_1461 : (value(sfp_1_121_2348810) = ((-5368709.0) / 268435456.0))

logic ust_152 : single

axiom eq_147 : (value(ust_152) = ((-5368709.0) / 268435456.0))

axiom eq_1471 : (sign1(ust_152) = Neg)

axiom eq_1472 : is_finite(ust_152)

logic s_mul__t_3__t_21__t_152 : single

axiom eq_148 : mul_post(NearestTiesToEven, x2, ust_152,
  s_mul__t_3__t_21__t_152)

logic ust_153 : single

axiom eq_149 : mul_post(NearestTiesToEven, x2, ust_152, ust_153)

logic s_add__t_3__t_149__t_153 : single

axiom eq_150 : add_post(NearestTiesToEven, ust_149, ust_153,
  s_add__t_3__t_149__t_153)

logic ust_154 : single

axiom eq_1511 : add_post(NearestTiesToEven, ust_149, ust_153, ust_154)

logic sfp_1_122_201327 : single

axiom eq_1521 : is_finite(sfp_1_122_201327)

axiom eq_1522 : (value(sfp_1_122_201327) = ((-8589935.0) / 268435456.0))

logic ust_157 : single

axiom eq_153 : (value(ust_157) = ((-8589935.0) / 268435456.0))

axiom eq_1531 : (sign1(ust_157) = Neg)

axiom eq_1532 : is_finite(ust_157)

logic s_mul__t_3__t_25__t_157 : single

axiom eq_154 : mul_post(NearestTiesToEven, x3, ust_157,
  s_mul__t_3__t_25__t_157)

logic ust_158 : single

axiom eq_155 : mul_post(NearestTiesToEven, x3, ust_157, ust_158)

logic s_add__t_3__t_154__t_158 : single

axiom eq_156 : add_post(NearestTiesToEven, ust_154, ust_158,
  s_add__t_3__t_154__t_158)

logic ust_159 : single

axiom eq_157 : add_post(NearestTiesToEven, ust_154, ust_158, ust_159)

logic sfp_1_123_67108 : single

axiom eq_158 : is_finite(sfp_1_123_67108)

axiom eq_1581 : (value(sfp_1_123_67108) = ((-2113929.0) / 33554432.0))

logic ust_162 : single

axiom eq_159 : (value(ust_162) = ((-2113929.0) / 33554432.0))

axiom eq_1591 : (sign1(ust_162) = Neg)

axiom eq_1592 : is_finite(ust_162)

logic s_mul__t_3__t_29__t_162 : single

axiom eq_160 : mul_post(NearestTiesToEven, x4, ust_162,
  s_mul__t_3__t_29__t_162)

logic ust_163 : single

axiom eq_161 : mul_post(NearestTiesToEven, x4, ust_162, ust_163)

logic s_add__t_3__t_159__t_163 : single

axiom eq_162 : add_post(NearestTiesToEven, ust_159, ust_163,
  s_add__t_3__t_159__t_163)

logic ust_164 : single

axiom eq_163 : add_post(NearestTiesToEven, ust_159, ust_163, ust_164)

axiom ax_10 : le(ust_140, ust_164)

goal g_1 : false
