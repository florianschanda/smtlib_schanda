(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

logic b80 : single

logic b23 : single

logic b56 : single

logic b20 : single

logic b92 : single

logic b98 : single

logic b65 : single

logic b17 : single

logic b14 : single

logic b29 : single

logic b50 : single

logic b68 : single

logic b32 : single

logic b89 : single

logic b71 : single

logic b44 : single

logic b41 : single

logic b47 : single

logic b53 : single

logic b83 : single

logic b38 : single

logic b35 : single

logic b62 : single

logic b11 : single

logic b95 : single

logic b26 : single

logic b74 : single

logic b59 : single

logic b101 : single

logic b77 : single

logic b169 : single

logic b86 : single

logic b10 : single

logic s_div__t_3__t_12__t_9 : single

axiom eq_0 : div_post(NearestTiesToEven, b10, b11, s_div__t_3__t_12__t_9)

logic ust_13 : single

axiom eq_1 : div_post(NearestTiesToEven, b10, b11, ust_13)

logic s_div__t_3__t_13__t_14 : single

axiom eq_2 : div_post(NearestTiesToEven, ust_13, b14, s_div__t_3__t_13__t_14)

logic ust_15 : single

axiom eq_3 : div_post(NearestTiesToEven, ust_13, b14, ust_15)

logic s_div__t_3__t_15__t_16 : single

axiom eq_4 : div_post(NearestTiesToEven, ust_15, b17, s_div__t_3__t_15__t_16)

logic ust_17 : single

axiom eq_5 : div_post(NearestTiesToEven, ust_15, b17, ust_17)

logic s_div__t_3__t_17__t_18 : single

axiom eq_6 : div_post(NearestTiesToEven, ust_17, b20, s_div__t_3__t_17__t_18)

logic ust_19 : single

axiom eq_7 : div_post(NearestTiesToEven, ust_17, b20, ust_19)

logic s_div__t_3__t_19__t_20 : single

axiom eq_8 : div_post(NearestTiesToEven, ust_19, b23, s_div__t_3__t_19__t_20)

logic ust_21 : single

axiom eq_9 : div_post(NearestTiesToEven, ust_19, b23, ust_21)

logic s_div__t_3__t_21__t_22 : single

axiom eq_10 : div_post(NearestTiesToEven, ust_21, b26,
  s_div__t_3__t_21__t_22)

logic ust_23 : single

axiom eq_11 : div_post(NearestTiesToEven, ust_21, b26, ust_23)

logic s_div__t_3__t_23__t_24 : single

axiom eq_12 : div_post(NearestTiesToEven, ust_23, b29,
  s_div__t_3__t_23__t_24)

logic ust_25 : single

axiom eq_13 : div_post(NearestTiesToEven, ust_23, b29, ust_25)

logic s_div__t_3__t_25__t_26 : single

axiom eq_14 : div_post(NearestTiesToEven, ust_25, b32,
  s_div__t_3__t_25__t_26)

logic ust_27 : single

axiom eq_15 : div_post(NearestTiesToEven, ust_25, b32, ust_27)

logic s_div__t_3__t_27__t_28 : single

axiom eq_16 : div_post(NearestTiesToEven, ust_27, b35,
  s_div__t_3__t_27__t_28)

logic ust_29 : single

axiom eq_17 : div_post(NearestTiesToEven, ust_27, b35, ust_29)

logic s_div__t_3__t_29__t_30 : single

axiom eq_18 : div_post(NearestTiesToEven, ust_29, b38,
  s_div__t_3__t_29__t_30)

logic ust_31 : single

axiom eq_19 : div_post(NearestTiesToEven, ust_29, b38, ust_31)

logic s_div__t_3__t_31__t_32 : single

axiom eq_20 : div_post(NearestTiesToEven, ust_31, b41,
  s_div__t_3__t_31__t_32)

logic ust_33 : single

axiom eq_21 : div_post(NearestTiesToEven, ust_31, b41, ust_33)

logic s_div__t_3__t_33__t_34 : single

axiom eq_22 : div_post(NearestTiesToEven, ust_33, b44,
  s_div__t_3__t_33__t_34)

logic ust_35 : single

axiom eq_23 : div_post(NearestTiesToEven, ust_33, b44, ust_35)

logic s_div__t_3__t_35__t_36 : single

axiom eq_24 : div_post(NearestTiesToEven, ust_35, b47,
  s_div__t_3__t_35__t_36)

logic ust_37 : single

axiom eq_25 : div_post(NearestTiesToEven, ust_35, b47, ust_37)

logic s_div__t_3__t_37__t_38 : single

axiom eq_26 : div_post(NearestTiesToEven, ust_37, b50,
  s_div__t_3__t_37__t_38)

logic ust_39 : single

axiom eq_27 : div_post(NearestTiesToEven, ust_37, b50, ust_39)

logic s_div__t_3__t_39__t_40 : single

axiom eq_28 : div_post(NearestTiesToEven, ust_39, b53,
  s_div__t_3__t_39__t_40)

logic ust_41 : single

axiom eq_29 : div_post(NearestTiesToEven, ust_39, b53, ust_41)

logic s_div__t_3__t_41__t_42 : single

axiom eq_30 : div_post(NearestTiesToEven, ust_41, b56,
  s_div__t_3__t_41__t_42)

logic ust_43 : single

axiom eq_31 : div_post(NearestTiesToEven, ust_41, b56, ust_43)

logic s_div__t_3__t_43__t_44 : single

axiom eq_32 : div_post(NearestTiesToEven, ust_43, b59,
  s_div__t_3__t_43__t_44)

logic ust_45 : single

axiom eq_33 : div_post(NearestTiesToEven, ust_43, b59, ust_45)

logic s_div__t_3__t_45__t_46 : single

axiom eq_34 : div_post(NearestTiesToEven, ust_45, b62,
  s_div__t_3__t_45__t_46)

logic ust_47 : single

axiom eq_35 : div_post(NearestTiesToEven, ust_45, b62, ust_47)

logic s_div__t_3__t_47__t_48 : single

axiom eq_36 : div_post(NearestTiesToEven, ust_47, b65,
  s_div__t_3__t_47__t_48)

logic ust_49 : single

axiom eq_37 : div_post(NearestTiesToEven, ust_47, b65, ust_49)

logic s_div__t_3__t_49__t_50 : single

axiom eq_38 : div_post(NearestTiesToEven, ust_49, b68,
  s_div__t_3__t_49__t_50)

logic ust_51 : single

axiom eq_39 : div_post(NearestTiesToEven, ust_49, b68, ust_51)

logic s_div__t_3__t_51__t_52 : single

axiom eq_40 : div_post(NearestTiesToEven, ust_51, b71,
  s_div__t_3__t_51__t_52)

logic ust_53 : single

axiom eq_41 : div_post(NearestTiesToEven, ust_51, b71, ust_53)

logic s_div__t_3__t_53__t_54 : single

axiom eq_42 : div_post(NearestTiesToEven, ust_53, b74,
  s_div__t_3__t_53__t_54)

logic ust_55 : single

axiom eq_43 : div_post(NearestTiesToEven, ust_53, b74, ust_55)

logic s_div__t_3__t_55__t_56 : single

axiom eq_44 : div_post(NearestTiesToEven, ust_55, b77,
  s_div__t_3__t_55__t_56)

logic ust_57 : single

axiom eq_45 : div_post(NearestTiesToEven, ust_55, b77, ust_57)

logic s_div__t_3__t_57__t_58 : single

axiom eq_46 : div_post(NearestTiesToEven, ust_57, b80,
  s_div__t_3__t_57__t_58)

logic ust_59 : single

axiom eq_47 : div_post(NearestTiesToEven, ust_57, b80, ust_59)

logic s_div__t_3__t_59__t_60 : single

axiom eq_48 : div_post(NearestTiesToEven, ust_59, b83,
  s_div__t_3__t_59__t_60)

logic ust_61 : single

axiom eq_49 : div_post(NearestTiesToEven, ust_59, b83, ust_61)

logic s_div__t_3__t_61__t_62 : single

axiom eq_50 : div_post(NearestTiesToEven, ust_61, b86,
  s_div__t_3__t_61__t_62)

logic ust_63 : single

axiom eq_51 : div_post(NearestTiesToEven, ust_61, b86, ust_63)

logic s_div__t_3__t_63__t_64 : single

axiom eq_52 : div_post(NearestTiesToEven, ust_63, b89,
  s_div__t_3__t_63__t_64)

logic ust_65 : single

axiom eq_53 : div_post(NearestTiesToEven, ust_63, b89, ust_65)

logic s_div__t_3__t_65__t_66 : single

axiom eq_54 : div_post(NearestTiesToEven, ust_65, b92,
  s_div__t_3__t_65__t_66)

logic ust_67 : single

axiom eq_55 : div_post(NearestTiesToEven, ust_65, b92, ust_67)

logic s_div__t_3__t_67__t_68 : single

axiom eq_56 : div_post(NearestTiesToEven, ust_67, b95,
  s_div__t_3__t_67__t_68)

logic ust_69 : single

axiom eq_57 : div_post(NearestTiesToEven, ust_67, b95, ust_69)

logic s_div__t_3__t_69__t_70 : single

axiom eq_58 : div_post(NearestTiesToEven, ust_69, b98,
  s_div__t_3__t_69__t_70)

logic ust_71 : single

axiom eq_59 : div_post(NearestTiesToEven, ust_69, b98, ust_71)

predicate ust_74() = (lt(b11, b169) and lt(ust_71, b101))

predicate ust_76() = (ust_74 and le(b101, b11))

predicate ust_78() = (ust_76 and lt(b14, b169))

predicate ust_80() = (ust_78 and le(b101, b14))

predicate ust_82() = (ust_80 and lt(b17, b169))

predicate ust_84() = (ust_82 and le(b101, b17))

predicate ust_86() = (ust_84 and lt(b20, b169))

predicate ust_88() = (ust_86 and le(b101, b20))

predicate ust_90() = (ust_88 and lt(b23, b169))

predicate ust_92() = (ust_90 and le(b101, b23))

predicate ust_94() = (ust_92 and lt(b26, b169))

predicate ust_96() = (ust_94 and le(b101, b26))

predicate ust_98() = (ust_96 and lt(b29, b169))

predicate ust_100() = (ust_98 and le(b101, b29))

predicate ust_102() = (ust_100 and lt(b32, b169))

predicate ust_104() = (ust_102 and le(b101, b32))

predicate ust_106() = (ust_104 and lt(b35, b169))

predicate ust_108() = (ust_106 and le(b101, b35))

predicate ust_110() = (ust_108 and lt(b38, b169))

predicate ust_112() = (ust_110 and le(b101, b38))

predicate ust_114() = (ust_112 and lt(b41, b169))

predicate ust_116() = (ust_114 and le(b101, b41))

predicate ust_118() = (ust_116 and lt(b44, b169))

predicate ust_120() = (ust_118 and le(b101, b44))

predicate ust_122() = (ust_120 and lt(b47, b169))

predicate ust_124() = (ust_122 and le(b101, b47))

predicate ust_126() = (ust_124 and lt(b50, b169))

predicate ust_128() = (ust_126 and le(b101, b50))

predicate ust_130() = (ust_128 and lt(b53, b169))

predicate ust_132() = (ust_130 and le(b101, b53))

predicate ust_134() = (ust_132 and lt(b56, b169))

predicate ust_136() = (ust_134 and le(b101, b56))

predicate ust_138() = (ust_136 and lt(b59, b169))

predicate ust_140() = (ust_138 and le(b101, b59))

predicate ust_142() = (ust_140 and lt(b62, b169))

predicate ust_144() = (ust_142 and le(b101, b62))

predicate ust_146() = (ust_144 and lt(b65, b169))

predicate ust_148() = (ust_146 and le(b101, b65))

predicate ust_150() = (ust_148 and lt(b68, b169))

predicate ust_152() = (ust_150 and le(b101, b68))

predicate ust_154() = (ust_152 and lt(b71, b169))

predicate ust_156() = (ust_154 and le(b101, b71))

predicate ust_158() = (ust_156 and lt(b74, b169))

predicate ust_160() = (ust_158 and le(b101, b74))

predicate ust_162() = (ust_160 and lt(b77, b169))

predicate ust_164() = (ust_162 and le(b101, b77))

predicate ust_166() = (ust_164 and lt(b80, b169))

predicate ust_168() = (ust_166 and le(b101, b80))

predicate ust_170() = (ust_168 and lt(b83, b169))

predicate ust_172() = (ust_170 and le(b101, b83))

predicate ust_174() = (ust_172 and lt(b86, b169))

predicate ust_176() = (ust_174 and le(b101, b86))

predicate ust_178() = (ust_176 and lt(b89, b169))

predicate ust_180() = (ust_178 and le(b101, b89))

predicate ust_182() = (ust_180 and lt(b92, b169))

predicate ust_184() = (ust_182 and le(b101, b92))

predicate ust_186() = (ust_184 and lt(b95, b169))

predicate ust_188() = (ust_186 and le(b101, b95))

predicate ust_190() = (ust_188 and lt(b98, b169))

predicate ust_192() = (ust_190 and le(b101, b98))

axiom ax_1 : ust_192

goal g_1 : false
