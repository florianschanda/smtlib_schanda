(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

type double

logic value1 : double -> real

predicate no_overflow1(m: fpa_rounding_mode, x: real) =
  (abs_real(float64(m, x)) <= 0x1.FFFFFFFFFFFFFp1023)

axiom Bounded_real_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> no_overflow1(m, x)))

axiom Round_value1 :
  (forall m:fpa_rounding_mode. forall x:double.
  (float64(m, value1(x)) = value1(x)))

axiom Bounded_value1 :
  (forall x:double. (abs_real(value1(x)) <= 0x1.FFFFFFFFFFFFFp1023))

axiom Exact_rounding_for_integers1 :
  (forall m:fpa_rounding_mode. forall i:int. ((((-9007199254740992) <= i) and
  (i <= 9007199254740992)) -> (float64(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le1 : (forall x:real. (float64(Down, x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= float64(Up, x)))

axiom Round_down_neg1 :
  (forall x:real. (float64(Down, (-x)) = (-float64(Up, x))))

axiom Round_up_neg1 :
  (forall x:real. (float64(Up, (-x)) = (-float64(Down, x))))

logic round_logic1 : fpa_rounding_mode, real -> double

axiom Round_logic_def1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

logic class2 : double -> class

predicate is_finite1(x: double) = (class2(x) = Finite)

predicate is_infinite1(x: double) = (class2(x) = Infinite)

predicate is_NaN1(x: double) = (class2(x) = NaN)

predicate is_not_NaN3(x: double) = (is_finite1(x) or is_infinite1(x))

axiom is_not_NaN4 : (forall x:double. (is_not_NaN3(x) -> (not is_NaN1(x))))

axiom is_not_NaN5 : (forall x:double. ((not is_NaN1(x)) -> is_not_NaN3(x)))

logic sign2 : double -> sign

predicate same_sign_real2(x: double, y: real) = same_sign_real(sign2(x), y)

predicate same_sign1(x: double, y: double) = (sign2(x) = sign2(y))

predicate diff_sign1(x: double, y: double) = (not (sign2(x) = sign2(y)))

predicate sign_zero_result1(m: fpa_rounding_mode, x: double) =
  ((value1(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign2(x) = Pos)) and
  ((m = ToZero) -> (sign2(x) = Pos))) and ((m = Up) -> (sign2(x) = Pos))) and
  ((m = Down) -> (sign2(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign2(x) = Pos))))

predicate is_minus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Neg))

predicate is_plus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero1(x: double) = (is_finite1(x) and (value1(x) = 0.0))

predicate is_gen_zero_plus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero_minus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Neg))

axiom finite_sign1 :
  (forall x:double. (((class2(x) = Finite) and (not (value1(x) = 0.0))) ->
  same_sign_real2(x, value1(x))))

axiom finite_sign_pos11 :
  (forall x:double. (((class2(x) = Finite) and (0.0 <  value1(x))) ->
  (sign2(x) = Pos)))

axiom finite_sign_pos21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Pos))) -> (0.0 <  value1(x))))

axiom finite_sign_neg11 :
  (forall x:double. (((class2(x) = Finite) and (value1(x) <  0.0)) ->
  (sign2(x) = Neg)))

axiom finite_sign_neg21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Neg))) -> (value1(x) <  0.0)))

axiom diff_sign_trans1 :
  (forall x:double. forall y:double. forall z:double. ((diff_sign1(x, y) and
  diff_sign1(y, z)) -> same_sign1(x, z)))

axiom diff_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and ((value1(x) * value1(y)) <  0.0))) ->
  diff_sign1(x, y)))

axiom same_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and same_sign1(x, y))) ->
  (0.0 <= (value1(x) * value1(y)))))

predicate overflow_value1(m: fpa_rounding_mode, x: double) =
  (((sign2(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite1(x)) and
  ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and ((m = Up) ->
  (is_finite1(x) and (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and
  ((m = Down) -> is_infinite1(x))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))) and ((sign2(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite1(x)) and ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = Up) ->
  is_infinite1(x))) and ((m = Down) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))))

axiom round12 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  is_finite1(round_logic1(m, x))))

axiom round13 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

axiom round22 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  same_sign_real2(round_logic1(m, x), x)))

axiom round23 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  overflow_value1(m, round_logic1(m, x))))

axiom round_of_zero1 :
  (forall m:fpa_rounding_mode. is_gen_zero1(round_logic1(m, 0.0)))

axiom round_logic_le1 :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite1(round_logic1(m,
  x)) -> (abs_real(value1(round_logic1(m, x))) <= 0x1.FFFFFFFFFFFFFp1023)))

axiom round_no_overflow2 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> is_finite1(round_logic1(m,
  x))))

axiom round_no_overflow3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> (value1(round_logic1(m,
  x)) = float64(m, x))))

logic min1 : real

axiom positive_constant3 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> is_finite1(round_logic1(m, x))))

axiom positive_constant4 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (0.0 <  value1(round_logic1(m, x)))))

axiom positive_constant5 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (sign2(round_logic1(m, x)) = Pos)))

axiom negative_constant3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  is_finite1(round_logic1(m, x))))

axiom negative_constant4 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (value1(round_logic1(m, x)) <  0.0)))

axiom negative_constant5 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (sign2(round_logic1(m, x)) = Neg)))

axiom is_gen_zero_comp11 :
  (forall x:double. forall y:double. ((is_gen_zero1(x) and
  ((value1(x) = value1(y)) and is_finite1(y))) -> is_gen_zero1(y)))

axiom is_gen_zero_comp21 :
  (forall x:double. forall y:double. ((is_finite1(x) and
  ((not is_gen_zero1(x)) and (value1(x) = value1(y)))) ->
  (not is_gen_zero1(y))))

predicate add_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and same_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((same_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not same_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) + value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) + value1(y)))) and ((same_sign1(x,
  y) -> same_sign1(r, x)) and ((not same_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) + value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) + value1(y))) and overflow_value1(m, r))))))))

predicate sub_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and diff_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((diff_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not diff_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) - value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) - value1(y)))) and ((diff_sign1(x,
  y) -> same_sign1(r, x)) and ((not diff_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) - value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) - value1(y))) and overflow_value1(m, r))))))))

predicate product_sign1(z: double, x: double, y: double) = ((same_sign1(x,
  y) -> (sign2(z) = Pos)) and (diff_sign1(x, y) -> (sign2(z) = Neg)))

predicate mul_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_gen_zero1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  (is_infinite1(y) and (not (value1(x) = 0.0)))) -> is_infinite1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and (is_finite1(y) and (not (value1(y) = 0.0)))) ->
  is_infinite1(r)) and (((is_infinite1(x) and is_infinite1(y)) ->
  is_infinite1(r)) and (((is_finite1(x) and (is_finite1(y) and
  no_overflow1(m, (value1(x) * value1(y))))) -> (is_finite1(r) and
  (value1(r) = float64(m, (value1(x) * value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) * value1(y)))))) -> overflow_value1(m, r)) and
  ((not is_NaN1(r)) -> product_sign1(r, x, y))))))))))

predicate neg_post1(x: double, r: double) = ((is_NaN1(x) -> is_NaN1(r)) and
  ((is_infinite1(x) -> is_infinite1(r)) and ((is_finite1(x) ->
  (is_finite1(r) and (value1(r) = (-value1(x))))) and ((not is_NaN1(x)) ->
  diff_sign1(r, x)))))

predicate div_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> is_gen_zero1(r)) and (((is_infinite1(x) and
  is_finite1(y)) -> is_infinite1(r)) and (((is_infinite1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and (is_finite1(y) and
  ((not (value1(y) = 0.0)) and no_overflow1(m, (value1(x) / value1(y)))))) ->
  (is_finite1(r) and (value1(r) = float64(m, (value1(x) / value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  (not no_overflow1(m, (value1(x) / value1(y))))))) -> overflow_value1(m,
  r)) and (((is_finite1(x) and (is_gen_zero1(y) and
  (not (value1(x) = 0.0)))) -> is_infinite1(r)) and (((is_gen_zero1(x) and
  is_gen_zero1(y)) -> is_NaN1(r)) and ((not is_NaN1(r)) -> product_sign1(r,
  x, y))))))))))

predicate fma_post1(m: fpa_rounding_mode, x: double, y: double, z: double,
  r: double) = (((is_NaN1(x) or (is_NaN1(y) or is_NaN1(z))) ->
  is_NaN1(r)) and (((is_gen_zero1(x) and is_infinite1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_infinite1(y) and is_finite1(z))) ->
  (is_infinite1(r) and product_sign1(r, x, y))) and (((is_finite1(x) and
  (is_finite1(y) and is_infinite1(z))) -> (is_infinite1(r) and same_sign1(r,
  z))) and (((is_infinite1(x) and (is_infinite1(y) and is_infinite1(z))) ->
  ((product_sign1(z, x, y) -> (is_infinite1(r) and same_sign1(r, z))) and
  ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and (((is_finite1(x) and
  (is_finite1(y) and (is_finite1(z) and no_overflow1(m,
  ((value1(x) * value1(y)) + value1(z)))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, ((value1(x) * value1(y)) + value1(z)))) and
  ((product_sign1(z, x, y) -> same_sign1(r, z)) and ((not product_sign1(z, x,
  y)) -> ((((value1(x) * value1(y)) + value1(z)) = 0.0) -> (((m = Down) ->
  (sign2(r) = Neg)) and ((not (m = Down)) -> (sign2(r) = Pos))))))))) and
  ((is_finite1(x) and (is_finite1(y) and (is_finite1(z) and
  (not no_overflow1(m, ((value1(x) * value1(y)) + value1(z))))))) ->
  (same_sign_real(sign2(r), ((value1(x) * value1(y)) + value1(z))) and
  overflow_value1(m, r))))))))))))))

predicate sqrt_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_plus_infinity1(x) ->
  is_plus_infinity1(r)) and ((is_minus_infinity1(x) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) <  0.0)) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) = 0.0)) -> (is_finite1(r) and
  ((value1(r) = 0.0) and same_sign1(r, x)))) and ((is_finite1(x) and
  (0.0 <  value1(x))) -> (is_finite1(r) and
  ((value1(r) = float64(m, sqrt_real(value1(x)))) and
  (sign2(r) = Pos)))))))))

predicate roundToIntegral_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_infinite1(x) -> (is_infinite1(r) and
  same_sign1(x, r))) and (is_finite1(x) -> (same_sign1(x, r) and
  (value1(r) = real_of_int(integer_round(m, value1(x))))))))

predicate of_real_exact_post1(x: real, r: double) = (is_finite1(r) and
  (value1(r) = x))

predicate le1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <= value1(y)))) or ((is_minus_infinity1(x) and
  is_not_NaN3(y)) or (is_not_NaN3(x) and is_plus_infinity1(y))))

predicate lt1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <  value1(y)))) or ((is_minus_infinity1(x) and
  (is_not_NaN3(y) and (not is_minus_infinity1(y)))) or (is_not_NaN3(x) and
  ((not is_plus_infinity1(x)) and is_plus_infinity1(y)))))

predicate eq1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) = value1(y)))) or (is_infinite1(x) and (is_infinite1(y) and
  same_sign1(x, y))))

predicate ne1(x: double, y: double) = (not eq1(x, y))

predicate rem_post1(x: double, y: double, r: double) = (((is_NaN1(x) or
  (is_NaN1(y) or (is_infinite1(x) or is_gen_zero1(y)))) -> is_NaN1(r)) and
  ((not (is_NaN1(x) or (is_NaN1(y) or (is_infinite1(x) or
  is_gen_zero1(y))))) -> ((is_infinite1(y) -> eq1(x, r)) and
  ((not is_infinite1(y)) -> (is_finite1(r) and (((value1(r) = 0.0) ->
  same_sign1(x, r)) and
  (value1(r) = (value1(x) - (value1(y) * real_of_int(integer_round(NearestTiesToEven, (value1(x) / value1(y)))))))))))))

axiom le_lt_trans1 :
  (forall x:double. forall y:double. forall z:double. ((le1(x, y) and lt1(y,
  z)) -> lt1(x, z)))

axiom lt_le_trans1 :
  (forall x:double. forall y:double. forall z:double. ((lt1(x, y) and le1(y,
  z)) -> lt1(x, z)))

axiom le_ge_asym1 :
  (forall x:double. forall y:double. ((le1(x, y) and le1(y, x)) -> eq1(x,
  y)))

axiom not_lt_ge1 :
  (forall x:double. forall y:double. (((not lt1(x, y)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(y, x)))

axiom not_gt_le1 :
  (forall x:double. forall y:double. (((not lt1(y, x)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(x, y)))

predicate single_to_double_cast(x: single, r: double) = ((is_NaN(x) ->
  is_NaN1(r)) and (is_finite(x) -> (is_finite1(r) and
  ((value1(r) = value(x)) and (sign2(r) = sign1(x))))))

logic b21 : single

logic b18 : single

logic b8 : single

logic b13 : double

logic s_mul__t_3__t_9__t_9 : single

axiom eq_0 : mul_post(NearestTiesToEven, b8, b8, s_mul__t_3__t_9__t_9)

logic ust_12 : single

axiom eq_1 : mul_post(NearestTiesToEven, b8, b8, ust_12)

logic s_add__t_3__t_9__t_12 : single

axiom eq_2 : add_post(NearestTiesToEven, b8, ust_12, s_add__t_3__t_9__t_12)

logic ust_13 : single

axiom eq_3 : add_post(NearestTiesToEven, b8, ust_12, ust_13)

logic double_of_single__t_3__t_13 : double

axiom eq_4 : single_to_double_cast(ust_13, double_of_single__t_3__t_13)

logic ust_14 : double

axiom eq_5 : single_to_double_cast(ust_13, ust_14)

predicate ust_17() = (le(b8, b18) and lt1(ust_14, b13))

predicate ust_20() = (ust_17 and le(b21, b8))

axiom ax_1 : ust_20

goal g_1 : false
