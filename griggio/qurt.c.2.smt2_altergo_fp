(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type double

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : double -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float64(m, x)) <= 0x1.FFFFFFFFFFFFFp1023)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:double.
  (float64(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:double. (abs_real(value(x)) <= 0x1.FFFFFFFFFFFFFp1023))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-9007199254740992) <= i) and
  (i <= 9007199254740992)) -> (float64(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float64(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float64(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float64(Down, (-x)) = (-float64(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float64(Up, (-x)) = (-float64(Down, x))))

logic round_logic : fpa_rounding_mode, real -> double

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float64(m, x))))

logic class1 : double -> class

predicate is_finite(x: double) = (class1(x) = Finite)

predicate is_infinite(x: double) = (class1(x) = Infinite)

predicate is_NaN(x: double) = (class1(x) = NaN)

predicate is_not_NaN(x: double) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:double. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:double. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : double -> sign

predicate same_sign_real1(x: double, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: double, y: double) = (sign1(x) = sign1(y))

predicate diff_sign(x: double, y: double) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: double) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: double) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: double) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: double) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: double) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: double) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:double. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:double. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:double. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:double. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:double. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:double. forall y:double. forall z:double. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:double. forall y:double. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:double. forall y:double. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: double) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and
  (value(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and ((m = Up) ->
  (is_finite(x) and (value(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = Up) ->
  is_infinite(x))) and ((m = Down) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float64(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFFFFFFFFFp1023)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> (value(round_logic(m,
  x)) = float64(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min))) ->
  is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min))) ->
  (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min))) ->
  (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:double. forall y:double. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:double. forall y:double. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float64(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float64(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: double, x: double, y: double) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float64(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: double, r: double) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float64(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: double, y: double, z: double,
  r: double) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float64(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float64(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: double) = (is_finite(r) and
  (value(r) = x))

predicate le(x: double, y: double) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: double, y: double) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: double, y: double) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: double, y: double) = (not eq(x, y))

predicate rem_post(x: double, y: double, r: double) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:double. forall y:double. forall z:double. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:double. forall y:double. forall z:double. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:double. forall y:double. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:double. forall y:double. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:double. forall y:double. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

predicate smt2_double_eq(x: double, y: double) = (((is_finite(x) and
  (is_finite(y) and ((value(x) = value(y)) and same_sign(x, y)))) or
  (is_infinite(x) and (is_infinite(y) and same_sign(x, y)))) or
  (is_NaN(x) and is_NaN(y)))

logic b114 : double

logic b585 : double

logic b310 : double

logic b136 : double

logic b102 : double

logic b558 : double

logic b547 : double

logic b148 : double

logic b623 : double

logic b596 : double

logic b634 : double

logic b145 : double

logic d_div__t_3__t_9__t_10 : double

axiom eq_0 : div_post(NearestTiesToEven, b310, b145, d_div__t_3__t_9__t_10)

logic ust_11 : double

axiom eq_1 : div_post(NearestTiesToEven, b310, b145, ust_11)

logic d_mul__t_3__t_11__t_12 : double

axiom eq_2 : mul_post(NearestTiesToEven, ust_11, b136,
  d_mul__t_3__t_11__t_12)

logic ust_13 : double

axiom eq_3 : mul_post(NearestTiesToEven, ust_11, b136, ust_13)

logic d_mul__t_3__t_11__t_11 : double

axiom eq_4 : mul_post(NearestTiesToEven, ust_11, ust_11,
  d_mul__t_3__t_11__t_11)

logic ust_14 : double

axiom eq_5 : mul_post(NearestTiesToEven, ust_11, ust_11, ust_14)

logic d_neg__t_14 : double

axiom eq_6 : neg_post(ust_14, d_neg__t_14)

logic ust_15 : double

axiom eq_7 : neg_post(ust_14, ust_15)

logic d_add__t_3__t_9__t_15 : double

axiom eq_8 : add_post(NearestTiesToEven, b310, ust_15, d_add__t_3__t_9__t_15)

logic ust_16 : double

axiom eq_9 : add_post(NearestTiesToEven, b310, ust_15, ust_16)

logic d_div__t_3__t_16__t_13 : double

axiom eq_10 : div_post(NearestTiesToEven, ust_16, ust_13,
  d_div__t_3__t_16__t_13)

logic ust_17 : double

axiom eq_11 : div_post(NearestTiesToEven, ust_16, ust_13, ust_17)

logic d_add__t_3__t_11__t_17 : double

axiom eq_12 : add_post(NearestTiesToEven, ust_11, ust_17,
  d_add__t_3__t_11__t_17)

logic ust_18 : double

axiom eq_13 : add_post(NearestTiesToEven, ust_11, ust_17, ust_18)

logic d_mul__t_3__t_12__t_18 : double

axiom eq_14 : mul_post(NearestTiesToEven, b136, ust_18,
  d_mul__t_3__t_12__t_18)

logic ust_19 : double

axiom eq_15 : mul_post(NearestTiesToEven, b136, ust_18, ust_19)

logic d_mul__t_3__t_18__t_18 : double

axiom eq_16 : mul_post(NearestTiesToEven, ust_18, ust_18,
  d_mul__t_3__t_18__t_18)

logic ust_20 : double

axiom eq_17 : mul_post(NearestTiesToEven, ust_18, ust_18, ust_20)

logic d_neg__t_20 : double

axiom eq_18 : neg_post(ust_20, d_neg__t_20)

logic ust_21 : double

axiom eq_19 : neg_post(ust_20, ust_21)

logic d_add__t_3__t_9__t_21 : double

axiom eq_20 : add_post(NearestTiesToEven, b310, ust_21,
  d_add__t_3__t_9__t_21)

logic ust_22 : double

axiom eq_21 : add_post(NearestTiesToEven, b310, ust_21, ust_22)

logic d_div__t_3__t_22__t_19 : double

axiom eq_22 : div_post(NearestTiesToEven, ust_22, ust_19,
  d_div__t_3__t_22__t_19)

logic ust_23 : double

axiom eq_23 : div_post(NearestTiesToEven, ust_22, ust_19, ust_23)

logic d_add__t_3__t_18__t_23 : double

axiom eq_24 : add_post(NearestTiesToEven, ust_18, ust_23,
  d_add__t_3__t_18__t_23)

logic ust_24 : double

axiom eq_25 : add_post(NearestTiesToEven, ust_18, ust_23, ust_24)

logic d_mul__t_3__t_24__t_24 : double

axiom eq_26 : mul_post(NearestTiesToEven, ust_24, ust_24,
  d_mul__t_3__t_24__t_24)

logic ust_25 : double

axiom eq_27 : mul_post(NearestTiesToEven, ust_24, ust_24, ust_25)

logic d_neg__t_25 : double

axiom eq_28 : neg_post(ust_25, d_neg__t_25)

logic ust_26 : double

axiom eq_29 : neg_post(ust_25, ust_26)

logic d_add__t_3__t_9__t_26 : double

axiom eq_30 : add_post(NearestTiesToEven, b310, ust_26,
  d_add__t_3__t_9__t_26)

logic ust_27 : double

axiom eq_31 : add_post(NearestTiesToEven, b310, ust_26, ust_27)

predicate ust_30() = (not smt2_double_eq(ust_27, b547))

predicate ust_33() = (not smt2_double_eq(ust_22, b558))

logic d_div__t_3__t_34__t_10 : double

axiom eq_32 : div_post(NearestTiesToEven, b102, b145, d_div__t_3__t_34__t_10)

logic ust_35 : double

axiom eq_33 : div_post(NearestTiesToEven, b102, b145, ust_35)

logic d_mul__t_3__t_12__t_35 : double

axiom eq_34 : mul_post(NearestTiesToEven, b136, ust_35,
  d_mul__t_3__t_12__t_35)

logic ust_36 : double

axiom eq_35 : mul_post(NearestTiesToEven, b136, ust_35, ust_36)

logic d_mul__t_3__t_35__t_35 : double

axiom eq_36 : mul_post(NearestTiesToEven, ust_35, ust_35,
  d_mul__t_3__t_35__t_35)

logic ust_37 : double

axiom eq_37 : mul_post(NearestTiesToEven, ust_35, ust_35, ust_37)

logic d_neg__t_37 : double

axiom eq_38 : neg_post(ust_37, d_neg__t_37)

logic ust_38 : double

axiom eq_39 : neg_post(ust_37, ust_38)

logic d_add__t_3__t_34__t_38 : double

axiom eq_40 : add_post(NearestTiesToEven, b102, ust_38,
  d_add__t_3__t_34__t_38)

logic ust_39 : double

axiom eq_41 : add_post(NearestTiesToEven, b102, ust_38, ust_39)

logic d_div__t_3__t_39__t_36 : double

axiom eq_42 : div_post(NearestTiesToEven, ust_39, ust_36,
  d_div__t_3__t_39__t_36)

logic ust_40 : double

axiom eq_43 : div_post(NearestTiesToEven, ust_39, ust_36, ust_40)

logic d_add__t_3__t_35__t_40 : double

axiom eq_44 : add_post(NearestTiesToEven, ust_35, ust_40,
  d_add__t_3__t_35__t_40)

logic ust_41 : double

axiom eq_45 : add_post(NearestTiesToEven, ust_35, ust_40, ust_41)

logic d_mul__t_3__t_12__t_41 : double

axiom eq_46 : mul_post(NearestTiesToEven, b136, ust_41,
  d_mul__t_3__t_12__t_41)

logic ust_42 : double

axiom eq_47 : mul_post(NearestTiesToEven, b136, ust_41, ust_42)

logic d_mul__t_3__t_41__t_41 : double

axiom eq_48 : mul_post(NearestTiesToEven, ust_41, ust_41,
  d_mul__t_3__t_41__t_41)

logic ust_43 : double

axiom eq_49 : mul_post(NearestTiesToEven, ust_41, ust_41, ust_43)

logic d_neg__t_43 : double

axiom eq_50 : neg_post(ust_43, d_neg__t_43)

logic ust_44 : double

axiom eq_51 : neg_post(ust_43, ust_44)

logic d_add__t_3__t_34__t_44 : double

axiom eq_52 : add_post(NearestTiesToEven, b102, ust_44,
  d_add__t_3__t_34__t_44)

logic ust_45 : double

axiom eq_53 : add_post(NearestTiesToEven, b102, ust_44, ust_45)

logic d_div__t_3__t_45__t_42 : double

axiom eq_54 : div_post(NearestTiesToEven, ust_45, ust_42,
  d_div__t_3__t_45__t_42)

logic ust_46 : double

axiom eq_55 : div_post(NearestTiesToEven, ust_45, ust_42, ust_46)

logic d_add__t_3__t_41__t_46 : double

axiom eq_56 : add_post(NearestTiesToEven, ust_41, ust_46,
  d_add__t_3__t_41__t_46)

logic ust_47 : double

axiom eq_57 : add_post(NearestTiesToEven, ust_41, ust_46, ust_47)

logic d_mul__t_3__t_47__t_47 : double

axiom eq_58 : mul_post(NearestTiesToEven, ust_47, ust_47,
  d_mul__t_3__t_47__t_47)

logic ust_48 : double

axiom eq_59 : mul_post(NearestTiesToEven, ust_47, ust_47, ust_48)

logic d_neg__t_48 : double

axiom eq_60 : neg_post(ust_48, d_neg__t_48)

logic ust_49 : double

axiom eq_61 : neg_post(ust_48, ust_49)

logic d_add__t_3__t_34__t_49 : double

axiom eq_62 : add_post(NearestTiesToEven, b102, ust_49,
  d_add__t_3__t_34__t_49)

logic ust_50 : double

axiom eq_63 : add_post(NearestTiesToEven, b102, ust_49, ust_50)

predicate ust_53() = (not smt2_double_eq(ust_50, b585))

predicate ust_56() = (not smt2_double_eq(ust_45, b596))

logic d_div__t_3__t_57__t_10 : double

axiom eq_64 : div_post(NearestTiesToEven, b114, b145, d_div__t_3__t_57__t_10)

logic ust_58 : double

axiom eq_65 : div_post(NearestTiesToEven, b114, b145, ust_58)

logic d_mul__t_3__t_12__t_58 : double

axiom eq_66 : mul_post(NearestTiesToEven, b136, ust_58,
  d_mul__t_3__t_12__t_58)

logic ust_59 : double

axiom eq_67 : mul_post(NearestTiesToEven, b136, ust_58, ust_59)

logic d_mul__t_3__t_58__t_58 : double

axiom eq_68 : mul_post(NearestTiesToEven, ust_58, ust_58,
  d_mul__t_3__t_58__t_58)

logic ust_60 : double

axiom eq_69 : mul_post(NearestTiesToEven, ust_58, ust_58, ust_60)

logic d_neg__t_60 : double

axiom eq_70 : neg_post(ust_60, d_neg__t_60)

logic ust_61 : double

axiom eq_71 : neg_post(ust_60, ust_61)

logic d_add__t_3__t_57__t_61 : double

axiom eq_72 : add_post(NearestTiesToEven, b114, ust_61,
  d_add__t_3__t_57__t_61)

logic ust_62 : double

axiom eq_73 : add_post(NearestTiesToEven, b114, ust_61, ust_62)

logic d_div__t_3__t_62__t_59 : double

axiom eq_74 : div_post(NearestTiesToEven, ust_62, ust_59,
  d_div__t_3__t_62__t_59)

logic ust_63 : double

axiom eq_75 : div_post(NearestTiesToEven, ust_62, ust_59, ust_63)

logic d_add__t_3__t_58__t_63 : double

axiom eq_76 : add_post(NearestTiesToEven, ust_58, ust_63,
  d_add__t_3__t_58__t_63)

logic ust_64 : double

axiom eq_77 : add_post(NearestTiesToEven, ust_58, ust_63, ust_64)

logic d_mul__t_3__t_12__t_64 : double

axiom eq_78 : mul_post(NearestTiesToEven, b136, ust_64,
  d_mul__t_3__t_12__t_64)

logic ust_65 : double

axiom eq_79 : mul_post(NearestTiesToEven, b136, ust_64, ust_65)

logic d_mul__t_3__t_64__t_64 : double

axiom eq_80 : mul_post(NearestTiesToEven, ust_64, ust_64,
  d_mul__t_3__t_64__t_64)

logic ust_66 : double

axiom eq_81 : mul_post(NearestTiesToEven, ust_64, ust_64, ust_66)

logic d_neg__t_66 : double

axiom eq_82 : neg_post(ust_66, d_neg__t_66)

logic ust_67 : double

axiom eq_83 : neg_post(ust_66, ust_67)

logic d_add__t_3__t_57__t_67 : double

axiom eq_84 : add_post(NearestTiesToEven, b114, ust_67,
  d_add__t_3__t_57__t_67)

logic ust_68 : double

axiom eq_85 : add_post(NearestTiesToEven, b114, ust_67, ust_68)

logic d_div__t_3__t_68__t_65 : double

axiom eq_86 : div_post(NearestTiesToEven, ust_68, ust_65,
  d_div__t_3__t_68__t_65)

logic ust_69 : double

axiom eq_87 : div_post(NearestTiesToEven, ust_68, ust_65, ust_69)

logic d_add__t_3__t_64__t_69 : double

axiom eq_88 : add_post(NearestTiesToEven, ust_64, ust_69,
  d_add__t_3__t_64__t_69)

logic ust_70 : double

axiom eq_89 : add_post(NearestTiesToEven, ust_64, ust_69, ust_70)

logic d_mul__t_3__t_70__t_70 : double

axiom eq_90 : mul_post(NearestTiesToEven, ust_70, ust_70,
  d_mul__t_3__t_70__t_70)

logic ust_71 : double

axiom eq_91 : mul_post(NearestTiesToEven, ust_70, ust_70, ust_71)

logic d_neg__t_71 : double

axiom eq_92 : neg_post(ust_71, d_neg__t_71)

logic ust_72 : double

axiom eq_93 : neg_post(ust_71, ust_72)

logic d_add__t_3__t_57__t_72 : double

axiom eq_94 : add_post(NearestTiesToEven, b114, ust_72,
  d_add__t_3__t_57__t_72)

logic ust_73 : double

axiom eq_95 : add_post(NearestTiesToEven, b114, ust_72, ust_73)

predicate ust_76() = (not smt2_double_eq(ust_73, b623))

predicate ust_79() = (not smt2_double_eq(ust_68, b634))

predicate ust_81() = (not eq(b102, b102))

predicate ust_83() = (not eq(b102, b114))

predicate ust_84() = (ust_81 and ust_83)

predicate ust_86() = (not eq(b310, b102))

predicate ust_87() = (ust_84 and ust_86)

predicate ust_89() = (not le(b102, ust_68))

predicate ust_90() = (ust_87 and ust_89)

logic d_neg__t_68 : double

axiom eq_96 : neg_post(ust_68, d_neg__t_68)

logic ust_91 : double

axiom eq_97 : neg_post(ust_68, ust_91)

predicate ust_93() = (ust_90 and smt2_double_eq(b634, ust_91))

predicate ust_94() = (ust_79 and ust_93)

predicate ust_97() = (not le(b634, b148))

predicate ust_98() = (ust_94 and ust_97)

predicate ust_100() = (not le(b102, ust_73))

predicate ust_101() = (ust_98 and ust_100)

logic d_neg__t_73 : double

axiom eq_98 : neg_post(ust_73, d_neg__t_73)

logic ust_102 : double

axiom eq_99 : neg_post(ust_73, ust_102)

predicate ust_104() = (ust_101 and smt2_double_eq(b623, ust_102))

predicate ust_105() = (ust_76 and ust_104)

predicate ust_107() = (not le(b102, ust_45))

predicate ust_108() = (ust_105 and ust_107)

logic d_neg__t_45 : double

axiom eq_100 : neg_post(ust_45, d_neg__t_45)

logic ust_109 : double

axiom eq_101 : neg_post(ust_45, ust_109)

predicate ust_111() = (ust_108 and smt2_double_eq(b596, ust_109))

predicate ust_112() = (ust_56 and ust_111)

predicate ust_114() = (not le(b596, b148))

predicate ust_115() = (ust_112 and ust_114)

predicate ust_117() = (not le(b102, ust_50))

predicate ust_118() = (ust_115 and ust_117)

logic d_neg__t_50 : double

axiom eq_102 : neg_post(ust_50, d_neg__t_50)

logic ust_119 : double

axiom eq_103 : neg_post(ust_50, ust_119)

predicate ust_121() = (ust_118 and smt2_double_eq(b585, ust_119))

predicate ust_122() = (ust_53 and ust_121)

predicate ust_124() = (not le(b102, ust_22))

predicate ust_125() = (ust_122 and ust_124)

logic d_neg__t_22 : double

axiom eq_104 : neg_post(ust_22, d_neg__t_22)

logic ust_126 : double

axiom eq_105 : neg_post(ust_22, ust_126)

predicate ust_128() = (ust_125 and smt2_double_eq(b558, ust_126))

predicate ust_129() = (ust_33 and ust_128)

predicate ust_131() = (not le(b558, b148))

predicate ust_132() = (ust_129 and ust_131)

predicate ust_134() = (not le(b102, ust_27))

predicate ust_135() = (ust_132 and ust_134)

logic d_neg__t_27 : double

axiom eq_106 : neg_post(ust_27, d_neg__t_27)

logic ust_136 : double

axiom eq_107 : neg_post(ust_27, ust_136)

predicate ust_138() = (ust_135 and smt2_double_eq(b547, ust_136))

predicate ust_139() = (ust_30 and ust_138)

axiom ax_1 : ust_139

goal g_1 : false
