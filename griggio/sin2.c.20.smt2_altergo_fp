(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo real arithmetic *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom CompatOrderMult :
  (forall x:real. forall y:real. forall z:real. ((x <= y) -> ((0.0 <= z) ->
  ((x * z) <= (y * z)))))

axiom CompatOrderMult1 :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

function sqr(x: real) : real = (x * x)

axiom Sqrt_positive : (forall x:real. ((0.0 <= x) -> (0.0 <= sqrt_real(x))))

axiom Sqrt_square : (forall x:real. ((0.0 <= x) -> (sqr(sqrt_real(x)) = x)))

axiom Square_sqrt : (forall x:real. ((0.0 <= x) -> (sqrt_real((x * x)) = x)))

axiom Sqrt_mul :
  (forall x:real. forall y:real. (((0.0 <= x) and (0.0 <= y)) ->
  (sqrt_real((x * y)) = (sqrt_real(x) * sqrt_real(y)))))

axiom Sqrt_le :
  (forall x:real. forall y:real. (((0.0 <= x) and (x <= y)) ->
  (sqrt_real(x) <= sqrt_real(y))))

type class = Finite | Infinite | NaN

logic match_class : class, 'a, 'a, 'a -> 'a

axiom match_class_Finite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Finite, z, z1,
  z2) = z))

axiom match_class_Infinite :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(Infinite, z, z1,
  z2) = z1))

axiom match_class_NaN :
  (forall z:'a. forall z1:'a. forall z2:'a. (match_class(NaN, z, z1,
  z2) = z2))

type sign = Neg | Pos

logic match_sign : sign, 'a, 'a -> 'a

axiom match_sign_Neg :
  (forall z:'a. forall z1:'a. (match_sign(Neg, z, z1) = z))

axiom match_sign_Pos :
  (forall z:'a. forall z1:'a. (match_sign(Pos, z, z1) = z1))

logic same_sign_real : sign, real -> prop

axiom Neg_case : (forall x:real. ((x <  0.0) -> same_sign_real(Neg, x)))

axiom Pos_case : (forall x:real. ((0.0 <  x) -> same_sign_real(Pos, x)))

axiom same_sign_real_inversion :
  (forall z:sign. forall z1:real. (same_sign_real(z, z1) -> (((z1 <  0.0) and
  (z = Neg)) or ((0.0 <  z1) and (z = Pos)))))

axiom same_sign_real_zero1 : (forall b:sign. (not same_sign_real(b, 0.0)))

axiom same_sign_real_zero2 :
  (forall x:real. (not (same_sign_real(Neg, x) and same_sign_real(Pos, x))))

axiom same_sign_real_zero3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> (not (x = 0.0))))

axiom same_sign_real_correct2 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((x <  0.0) ->
  (b = Neg))))

axiom same_sign_real_correct21 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Neg) ->
  (x <  0.0))))

axiom same_sign_real_correct3 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((0.0 <  x) ->
  (b = Pos))))

axiom same_sign_real_correct31 :
  (forall b:sign. forall x:real. (same_sign_real(b, x) -> ((b = Pos) ->
  (0.0 <  x))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

logic value : single -> real

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  (abs_real(float32(m, x)) <= 0x1.FFFFFEp127)

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> no_overflow(m, x)))

axiom Round_value :
  (forall m:fpa_rounding_mode. forall x:single.
  (float32(m, value(x)) = value(x)))

axiom Bounded_value :
  (forall x:single. (abs_real(value(x)) <= 0x1.FFFFFEp127))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. ((((-16777216) <= i) and
  (i <= 16777216)) -> (float32(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le : (forall x:real. (float32(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up, x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down, (-x)) = (-float32(Up, x))))

axiom Round_up_neg :
  (forall x:real. (float32(Up, (-x)) = (-float32(Down, x))))

logic round_logic : fpa_rounding_mode, real -> single

axiom Round_logic_def :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

logic class1 : single -> class

predicate is_finite(x: single) = (class1(x) = Finite)

predicate is_infinite(x: single) = (class1(x) = Infinite)

predicate is_NaN(x: single) = (class1(x) = NaN)

predicate is_not_NaN(x: single) = (is_finite(x) or is_infinite(x))

axiom is_not_NaN1 : (forall x:single. (is_not_NaN(x) -> (not is_NaN(x))))

axiom is_not_NaN2 : (forall x:single. ((not is_NaN(x)) -> is_not_NaN(x)))

logic sign1 : single -> sign

predicate same_sign_real1(x: single, y: real) = same_sign_real(sign1(x), y)

predicate same_sign(x: single, y: single) = (sign1(x) = sign1(y))

predicate diff_sign(x: single, y: single) = (not (sign1(x) = sign1(y)))

predicate sign_zero_result(m: fpa_rounding_mode, x: single) =
  ((value(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign1(x) = Pos)) and
  ((m = ToZero) -> (sign1(x) = Pos))) and ((m = Up) -> (sign1(x) = Pos))) and
  ((m = Down) -> (sign1(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign1(x) = Pos))))

predicate is_minus_infinity(x: single) = (is_infinite(x) and
  (sign1(x) = Neg))

predicate is_plus_infinity(x: single) = (is_infinite(x) and (sign1(x) = Pos))

predicate is_gen_zero(x: single) = (is_finite(x) and (value(x) = 0.0))

predicate is_gen_zero_plus(x: single) = (is_gen_zero(x) and (sign1(x) = Pos))

predicate is_gen_zero_minus(x: single) = (is_gen_zero(x) and
  (sign1(x) = Neg))

axiom finite_sign :
  (forall x:single. (((class1(x) = Finite) and (not (value(x) = 0.0))) ->
  same_sign_real1(x, value(x))))

axiom finite_sign_pos1 :
  (forall x:single. (((class1(x) = Finite) and (0.0 <  value(x))) ->
  (sign1(x) = Pos)))

axiom finite_sign_pos2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Pos))) -> (0.0 <  value(x))))

axiom finite_sign_neg1 :
  (forall x:single. (((class1(x) = Finite) and (value(x) <  0.0)) ->
  (sign1(x) = Neg)))

axiom finite_sign_neg2 :
  (forall x:single. (((class1(x) = Finite) and ((not (value(x) = 0.0)) and
  (sign1(x) = Neg))) -> (value(x) <  0.0)))

axiom diff_sign_trans :
  (forall x:single. forall y:single. forall z:single. ((diff_sign(x, y) and
  diff_sign(y, z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and ((value(x) * value(y)) <  0.0))) -> diff_sign(x,
  y)))

axiom same_sign_product :
  (forall x:single. forall y:single. (((class1(x) = Finite) and
  ((class1(y) = Finite) and same_sign(x, y))) ->
  (0.0 <= (value(x) * value(y)))))

predicate overflow_value(m: fpa_rounding_mode, x: single) =
  (((sign1(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = ToZero) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Up) -> (is_finite(x) and (value(x) = (-0x1.FFFFFEp127))))) and
  ((m = Down) -> is_infinite(x))) and ((m = NearestTiesToAway) ->
  is_infinite(x)))) and ((sign1(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite(x)) and ((m = ToZero) -> (is_finite(x) and
  (value(x) = 0x1.FFFFFEp127)))) and ((m = Up) -> is_infinite(x))) and
  ((m = Down) -> (is_finite(x) and (value(x) = 0x1.FFFFFEp127)))) and
  ((m = NearestTiesToAway) -> is_infinite(x)))))

axiom round1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  is_finite(round_logic(m, x))))

axiom round11 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow(m, x) ->
  (value(round_logic(m, x)) = float32(m, x))))

axiom round2 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  same_sign_real1(round_logic(m, x), x)))

axiom round21 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow(m, x)) ->
  overflow_value(m, round_logic(m, x))))

axiom round_of_zero :
  (forall m:fpa_rounding_mode. is_gen_zero(round_logic(m, 0.0)))

axiom round_logic_le :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite(round_logic(m,
  x)) -> (abs_real(value(round_logic(m, x))) <= 0x1.FFFFFEp127)))

axiom round_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> is_finite(round_logic(m, x))))

axiom round_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFEp127) -> (value(round_logic(m,
  x)) = float32(m, x))))

logic min : real

axiom positive_constant :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> is_finite(round_logic(m, x))))

axiom positive_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (0.0 <  value(round_logic(m, x)))))

axiom positive_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. (((min <= x) and
  (x <= 0x1.FFFFFEp127)) -> (sign1(round_logic(m, x)) = Pos)))

axiom negative_constant :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> is_finite(round_logic(m, x))))

axiom negative_constant1 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (value(round_logic(m, x)) <  0.0)))

axiom negative_constant2 :
  (forall m:fpa_rounding_mode. forall x:real. ((((-0x1.FFFFFEp127) <= x) and
  (x <= (-min))) -> (sign1(round_logic(m, x)) = Neg)))

axiom is_gen_zero_comp1 :
  (forall x:single. forall y:single. ((is_gen_zero(x) and
  ((value(x) = value(y)) and is_finite(y))) -> is_gen_zero(y)))

axiom is_gen_zero_comp2 :
  (forall x:single. forall y:single. ((is_finite(x) and
  ((not is_gen_zero(x)) and (value(x) = value(y)))) -> (not is_gen_zero(y))))

predicate add_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and same_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((same_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not same_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) + value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) + value(y)))) and ((same_sign(x, y) ->
  same_sign(r, x)) and ((not same_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) + value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) + value(y))) and overflow_value(m, r))))))))

predicate sub_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> (is_infinite(r) and diff_sign(r, y))) and
  (((is_infinite(x) and is_finite(y)) -> (is_infinite(r) and same_sign(r,
  x))) and (((is_infinite(x) and is_infinite(y)) -> ((diff_sign(x, y) ->
  (is_infinite(r) and same_sign(r, x))) and ((not diff_sign(x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and no_overflow(m,
  (value(x) - value(y))))) -> (is_finite(r) and
  ((value(r) = float32(m, (value(x) - value(y)))) and ((diff_sign(x, y) ->
  same_sign(r, x)) and ((not diff_sign(x, y)) -> sign_zero_result(m,
  r)))))) and ((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) - value(y)))))) -> (same_sign_real(sign1(r),
  (value(x) - value(y))) and overflow_value(m, r))))))))

predicate product_sign(z: single, x: single, y: single) = ((same_sign(x,
  y) -> (sign1(z) = Pos)) and (diff_sign(x, y) -> (sign1(z) = Neg)))

predicate mul_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_gen_zero(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_infinite(y) and
  (not (value(x) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_gen_zero(y)) -> is_NaN(r)) and (((is_infinite(x) and (is_finite(y) and
  (not (value(y) = 0.0)))) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_infinite(r)) and (((is_finite(x) and
  (is_finite(y) and no_overflow(m, (value(x) * value(y))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) * value(y)))))) and
  (((is_finite(x) and (is_finite(y) and (not no_overflow(m,
  (value(x) * value(y)))))) -> overflow_value(m, r)) and ((not is_NaN(r)) ->
  product_sign(r, x, y))))))))))

predicate neg_post(x: single, r: single) = ((is_NaN(x) -> is_NaN(r)) and
  ((is_infinite(x) -> is_infinite(r)) and ((is_finite(x) -> (is_finite(r) and
  (value(r) = (-value(x))))) and ((not is_NaN(x)) -> diff_sign(r, x)))))

predicate div_post(m: fpa_rounding_mode, x: single, y: single, r: single) =
  (((is_NaN(x) or is_NaN(y)) -> is_NaN(r)) and (((is_finite(x) and
  is_infinite(y)) -> is_gen_zero(r)) and (((is_infinite(x) and
  is_finite(y)) -> is_infinite(r)) and (((is_infinite(x) and
  is_infinite(y)) -> is_NaN(r)) and (((is_finite(x) and (is_finite(y) and
  ((not (value(y) = 0.0)) and no_overflow(m, (value(x) / value(y)))))) ->
  (is_finite(r) and (value(r) = float32(m, (value(x) / value(y)))))) and
  (((is_finite(x) and (is_finite(y) and ((not (value(y) = 0.0)) and
  (not no_overflow(m, (value(x) / value(y))))))) -> overflow_value(m, r)) and
  (((is_finite(x) and (is_gen_zero(y) and (not (value(x) = 0.0)))) ->
  is_infinite(r)) and (((is_gen_zero(x) and is_gen_zero(y)) -> is_NaN(r)) and
  ((not is_NaN(r)) -> product_sign(r, x, y))))))))))

predicate fma_post(m: fpa_rounding_mode, x: single, y: single, z: single,
  r: single) = (((is_NaN(x) or (is_NaN(y) or is_NaN(z))) -> is_NaN(r)) and
  (((is_gen_zero(x) and is_infinite(y)) -> is_NaN(r)) and
  (((is_infinite(x) and is_gen_zero(y)) -> is_NaN(r)) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_finite(x) and
  ((not (value(x) = 0.0)) and (is_infinite(y) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_finite(z)))) ->
  (is_infinite(r) and product_sign(r, x, y))) and (((is_infinite(x) and
  (is_finite(y) and ((not (value(y) = 0.0)) and is_infinite(z)))) ->
  ((product_sign(z, x, y) -> (is_infinite(r) and same_sign(r, z))) and
  ((not product_sign(z, x, y)) -> is_NaN(r)))) and (((is_infinite(x) and
  (is_infinite(y) and is_finite(z))) -> (is_infinite(r) and product_sign(r,
  x, y))) and (((is_finite(x) and (is_finite(y) and is_infinite(z))) ->
  (is_infinite(r) and same_sign(r, z))) and (((is_infinite(x) and
  (is_infinite(y) and is_infinite(z))) -> ((product_sign(z, x, y) ->
  (is_infinite(r) and same_sign(r, z))) and ((not product_sign(z, x, y)) ->
  is_NaN(r)))) and (((is_finite(x) and (is_finite(y) and (is_finite(z) and
  no_overflow(m, ((value(x) * value(y)) + value(z)))))) -> (is_finite(r) and
  ((value(r) = float32(m, ((value(x) * value(y)) + value(z)))) and
  ((product_sign(z, x, y) -> same_sign(r, z)) and ((not product_sign(z, x,
  y)) -> ((((value(x) * value(y)) + value(z)) = 0.0) -> (((m = Down) ->
  (sign1(r) = Neg)) and ((not (m = Down)) -> (sign1(r) = Pos))))))))) and
  ((is_finite(x) and (is_finite(y) and (is_finite(z) and (not no_overflow(m,
  ((value(x) * value(y)) + value(z))))))) -> (same_sign_real(sign1(r),
  ((value(x) * value(y)) + value(z))) and overflow_value(m, r))))))))))))))

predicate sqrt_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_plus_infinity(x) ->
  is_plus_infinity(r)) and ((is_minus_infinity(x) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) <  0.0)) -> is_NaN(r)) and
  (((is_finite(x) and (value(x) = 0.0)) -> (is_finite(r) and
  ((value(r) = 0.0) and same_sign(r, x)))) and ((is_finite(x) and
  (0.0 <  value(x))) -> (is_finite(r) and
  ((value(r) = float32(m, sqrt_real(value(x)))) and (sign1(r) = Pos)))))))))

predicate roundToIntegral_post(m: fpa_rounding_mode, x: single, r: single) =
  ((is_NaN(x) -> is_NaN(r)) and ((is_infinite(x) -> (is_infinite(r) and
  same_sign(x, r))) and (is_finite(x) -> (same_sign(x, r) and
  (value(r) = real_of_int(integer_round(m, value(x))))))))

predicate of_real_exact_post(x: real, r: single) = (is_finite(r) and
  (value(r) = x))

predicate le(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <= value(y)))) or ((is_minus_infinity(x) and is_not_NaN(y)) or
  (is_not_NaN(x) and is_plus_infinity(y))))

predicate lt(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) <  value(y)))) or ((is_minus_infinity(x) and (is_not_NaN(y) and
  (not is_minus_infinity(y)))) or (is_not_NaN(x) and
  ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate eq(x: single, y: single) = ((is_finite(x) and (is_finite(y) and
  (value(x) = value(y)))) or (is_infinite(x) and (is_infinite(y) and
  same_sign(x, y))))

predicate ne(x: single, y: single) = (not eq(x, y))

predicate rem_post(x: single, y: single, r: single) = (((is_NaN(x) or
  (is_NaN(y) or (is_infinite(x) or is_gen_zero(y)))) -> is_NaN(r)) and
  ((not (is_NaN(x) or (is_NaN(y) or (is_infinite(x) or is_gen_zero(y))))) ->
  ((is_infinite(y) -> eq(x, r)) and ((not is_infinite(y)) ->
  (is_finite(r) and (((value(r) = 0.0) -> same_sign(x, r)) and
  (value(r) = (value(x) - (value(y) * real_of_int(integer_round(NearestTiesToEven, (value(x) / value(y)))))))))))))

axiom le_lt_trans :
  (forall x:single. forall y:single. forall z:single. ((le(x, y) and lt(y,
  z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:single. forall y:single. forall z:single. ((lt(x, y) and le(y,
  z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:single. forall y:single. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:single. forall y:single. (((not lt(x, y)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:single. forall y:single. (((not lt(y, x)) and (is_not_NaN(x) and
  is_not_NaN(y))) -> le(x, y)))

type double

logic value1 : double -> real

predicate no_overflow1(m: fpa_rounding_mode, x: real) =
  (abs_real(float64(m, x)) <= 0x1.FFFFFFFFFFFFFp1023)

axiom Bounded_real_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> no_overflow1(m, x)))

axiom Round_value1 :
  (forall m:fpa_rounding_mode. forall x:double.
  (float64(m, value1(x)) = value1(x)))

axiom Bounded_value1 :
  (forall x:double. (abs_real(value1(x)) <= 0x1.FFFFFFFFFFFFFp1023))

axiom Exact_rounding_for_integers1 :
  (forall m:fpa_rounding_mode. forall i:int. ((((-9007199254740992) <= i) and
  (i <= 9007199254740992)) -> (float64(m, real_of_int(i)) = real_of_int(i))))

axiom Round_down_le1 : (forall x:real. (float64(Down, x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= float64(Up, x)))

axiom Round_down_neg1 :
  (forall x:real. (float64(Down, (-x)) = (-float64(Up, x))))

axiom Round_up_neg1 :
  (forall x:real. (float64(Up, (-x)) = (-float64(Down, x))))

logic round_logic1 : fpa_rounding_mode, real -> double

axiom Round_logic_def1 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

logic class2 : double -> class

predicate is_finite1(x: double) = (class2(x) = Finite)

predicate is_infinite1(x: double) = (class2(x) = Infinite)

predicate is_NaN1(x: double) = (class2(x) = NaN)

predicate is_not_NaN3(x: double) = (is_finite1(x) or is_infinite1(x))

axiom is_not_NaN4 : (forall x:double. (is_not_NaN3(x) -> (not is_NaN1(x))))

axiom is_not_NaN5 : (forall x:double. ((not is_NaN1(x)) -> is_not_NaN3(x)))

logic sign2 : double -> sign

predicate same_sign_real2(x: double, y: real) = same_sign_real(sign2(x), y)

predicate same_sign1(x: double, y: double) = (sign2(x) = sign2(y))

predicate diff_sign1(x: double, y: double) = (not (sign2(x) = sign2(y)))

predicate sign_zero_result1(m: fpa_rounding_mode, x: double) =
  ((value1(x) = 0.0) -> ((((((m = NearestTiesToEven) -> (sign2(x) = Pos)) and
  ((m = ToZero) -> (sign2(x) = Pos))) and ((m = Up) -> (sign2(x) = Pos))) and
  ((m = Down) -> (sign2(x) = Neg))) and ((m = NearestTiesToAway) ->
  (sign2(x) = Pos))))

predicate is_minus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Neg))

predicate is_plus_infinity1(x: double) = (is_infinite1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero1(x: double) = (is_finite1(x) and (value1(x) = 0.0))

predicate is_gen_zero_plus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Pos))

predicate is_gen_zero_minus1(x: double) = (is_gen_zero1(x) and
  (sign2(x) = Neg))

axiom finite_sign1 :
  (forall x:double. (((class2(x) = Finite) and (not (value1(x) = 0.0))) ->
  same_sign_real2(x, value1(x))))

axiom finite_sign_pos11 :
  (forall x:double. (((class2(x) = Finite) and (0.0 <  value1(x))) ->
  (sign2(x) = Pos)))

axiom finite_sign_pos21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Pos))) -> (0.0 <  value1(x))))

axiom finite_sign_neg11 :
  (forall x:double. (((class2(x) = Finite) and (value1(x) <  0.0)) ->
  (sign2(x) = Neg)))

axiom finite_sign_neg21 :
  (forall x:double. (((class2(x) = Finite) and ((not (value1(x) = 0.0)) and
  (sign2(x) = Neg))) -> (value1(x) <  0.0)))

axiom diff_sign_trans1 :
  (forall x:double. forall y:double. forall z:double. ((diff_sign1(x, y) and
  diff_sign1(y, z)) -> same_sign1(x, z)))

axiom diff_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and ((value1(x) * value1(y)) <  0.0))) ->
  diff_sign1(x, y)))

axiom same_sign_product1 :
  (forall x:double. forall y:double. (((class2(x) = Finite) and
  ((class2(y) = Finite) and same_sign1(x, y))) ->
  (0.0 <= (value1(x) * value1(y)))))

predicate overflow_value1(m: fpa_rounding_mode, x: double) =
  (((sign2(x) = Neg) -> ((((((m = NearestTiesToEven) -> is_infinite1(x)) and
  ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and ((m = Up) ->
  (is_finite1(x) and (value1(x) = (-0x1.FFFFFFFFFFFFFp1023))))) and
  ((m = Down) -> is_infinite1(x))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))) and ((sign2(x) = Pos) -> ((((((m = NearestTiesToEven) ->
  is_infinite1(x)) and ((m = ToZero) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = Up) ->
  is_infinite1(x))) and ((m = Down) -> (is_finite1(x) and
  (value1(x) = 0x1.FFFFFFFFFFFFFp1023)))) and ((m = NearestTiesToAway) ->
  is_infinite1(x)))))

axiom round12 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  is_finite1(round_logic1(m, x))))

axiom round13 :
  (forall m:fpa_rounding_mode. forall x:real. (no_overflow1(m, x) ->
  (value1(round_logic1(m, x)) = float64(m, x))))

axiom round22 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  same_sign_real2(round_logic1(m, x), x)))

axiom round23 :
  (forall m:fpa_rounding_mode. forall x:real. ((not no_overflow1(m, x)) ->
  overflow_value1(m, round_logic1(m, x))))

axiom round_of_zero1 :
  (forall m:fpa_rounding_mode. is_gen_zero1(round_logic1(m, 0.0)))

axiom round_logic_le1 :
  (forall m:fpa_rounding_mode. forall x:real. (is_finite1(round_logic1(m,
  x)) -> (abs_real(value1(round_logic1(m, x))) <= 0x1.FFFFFFFFFFFFFp1023)))

axiom round_no_overflow2 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> is_finite1(round_logic1(m,
  x))))

axiom round_no_overflow3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((abs_real(x) <= 0x1.FFFFFFFFFFFFFp1023) -> (value1(round_logic1(m,
  x)) = float64(m, x))))

logic min1 : real

axiom positive_constant3 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> is_finite1(round_logic1(m, x))))

axiom positive_constant4 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (0.0 <  value1(round_logic1(m, x)))))

axiom positive_constant5 :
  (forall m:fpa_rounding_mode. forall x:real. (((min1 <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023)) -> (sign2(round_logic1(m, x)) = Pos)))

axiom negative_constant3 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  is_finite1(round_logic1(m, x))))

axiom negative_constant4 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (value1(round_logic1(m, x)) <  0.0)))

axiom negative_constant5 :
  (forall m:fpa_rounding_mode. forall x:real.
  ((((-0x1.FFFFFFFFFFFFFp1023) <= x) and (x <= (-min1))) ->
  (sign2(round_logic1(m, x)) = Neg)))

axiom is_gen_zero_comp11 :
  (forall x:double. forall y:double. ((is_gen_zero1(x) and
  ((value1(x) = value1(y)) and is_finite1(y))) -> is_gen_zero1(y)))

axiom is_gen_zero_comp21 :
  (forall x:double. forall y:double. ((is_finite1(x) and
  ((not is_gen_zero1(x)) and (value1(x) = value1(y)))) ->
  (not is_gen_zero1(y))))

predicate add_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and same_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((same_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not same_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) + value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) + value1(y)))) and ((same_sign1(x,
  y) -> same_sign1(r, x)) and ((not same_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) + value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) + value1(y))) and overflow_value1(m, r))))))))

predicate sub_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> (is_infinite1(r) and diff_sign1(r, y))) and
  (((is_infinite1(x) and is_finite1(y)) -> (is_infinite1(r) and same_sign1(r,
  x))) and (((is_infinite1(x) and is_infinite1(y)) -> ((diff_sign1(x, y) ->
  (is_infinite1(r) and same_sign1(r, x))) and ((not diff_sign1(x, y)) ->
  is_NaN1(r)))) and (((is_finite1(x) and (is_finite1(y) and no_overflow1(m,
  (value1(x) - value1(y))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, (value1(x) - value1(y)))) and ((diff_sign1(x,
  y) -> same_sign1(r, x)) and ((not diff_sign1(x, y)) -> sign_zero_result1(m,
  r)))))) and ((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) - value1(y)))))) -> (same_sign_real(sign2(r),
  (value1(x) - value1(y))) and overflow_value1(m, r))))))))

predicate product_sign1(z: double, x: double, y: double) = ((same_sign1(x,
  y) -> (sign2(z) = Pos)) and (diff_sign1(x, y) -> (sign2(z) = Neg)))

predicate mul_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_gen_zero1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  (is_infinite1(y) and (not (value1(x) = 0.0)))) -> is_infinite1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and (is_finite1(y) and (not (value1(y) = 0.0)))) ->
  is_infinite1(r)) and (((is_infinite1(x) and is_infinite1(y)) ->
  is_infinite1(r)) and (((is_finite1(x) and (is_finite1(y) and
  no_overflow1(m, (value1(x) * value1(y))))) -> (is_finite1(r) and
  (value1(r) = float64(m, (value1(x) * value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and (not no_overflow1(m,
  (value1(x) * value1(y)))))) -> overflow_value1(m, r)) and
  ((not is_NaN1(r)) -> product_sign1(r, x, y))))))))))

predicate neg_post1(x: double, r: double) = ((is_NaN1(x) -> is_NaN1(r)) and
  ((is_infinite1(x) -> is_infinite1(r)) and ((is_finite1(x) ->
  (is_finite1(r) and (value1(r) = (-value1(x))))) and ((not is_NaN1(x)) ->
  diff_sign1(r, x)))))

predicate div_post1(m: fpa_rounding_mode, x: double, y: double, r: double) =
  (((is_NaN1(x) or is_NaN1(y)) -> is_NaN1(r)) and (((is_finite1(x) and
  is_infinite1(y)) -> is_gen_zero1(r)) and (((is_infinite1(x) and
  is_finite1(y)) -> is_infinite1(r)) and (((is_infinite1(x) and
  is_infinite1(y)) -> is_NaN1(r)) and (((is_finite1(x) and (is_finite1(y) and
  ((not (value1(y) = 0.0)) and no_overflow1(m, (value1(x) / value1(y)))))) ->
  (is_finite1(r) and (value1(r) = float64(m, (value1(x) / value1(y)))))) and
  (((is_finite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  (not no_overflow1(m, (value1(x) / value1(y))))))) -> overflow_value1(m,
  r)) and (((is_finite1(x) and (is_gen_zero1(y) and
  (not (value1(x) = 0.0)))) -> is_infinite1(r)) and (((is_gen_zero1(x) and
  is_gen_zero1(y)) -> is_NaN1(r)) and ((not is_NaN1(r)) -> product_sign1(r,
  x, y))))))))))

predicate fma_post1(m: fpa_rounding_mode, x: double, y: double, z: double,
  r: double) = (((is_NaN1(x) or (is_NaN1(y) or is_NaN1(z))) ->
  is_NaN1(r)) and (((is_gen_zero1(x) and is_infinite1(y)) -> is_NaN1(r)) and
  (((is_infinite1(x) and is_gen_zero1(y)) -> is_NaN1(r)) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_finite1(x) and ((not (value1(x) = 0.0)) and (is_infinite1(y) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_finite1(z)))) -> (is_infinite1(r) and product_sign1(r, x, y))) and
  (((is_infinite1(x) and (is_finite1(y) and ((not (value1(y) = 0.0)) and
  is_infinite1(z)))) -> ((product_sign1(z, x, y) -> (is_infinite1(r) and
  same_sign1(r, z))) and ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and
  (((is_infinite1(x) and (is_infinite1(y) and is_finite1(z))) ->
  (is_infinite1(r) and product_sign1(r, x, y))) and (((is_finite1(x) and
  (is_finite1(y) and is_infinite1(z))) -> (is_infinite1(r) and same_sign1(r,
  z))) and (((is_infinite1(x) and (is_infinite1(y) and is_infinite1(z))) ->
  ((product_sign1(z, x, y) -> (is_infinite1(r) and same_sign1(r, z))) and
  ((not product_sign1(z, x, y)) -> is_NaN1(r)))) and (((is_finite1(x) and
  (is_finite1(y) and (is_finite1(z) and no_overflow1(m,
  ((value1(x) * value1(y)) + value1(z)))))) -> (is_finite1(r) and
  ((value1(r) = float64(m, ((value1(x) * value1(y)) + value1(z)))) and
  ((product_sign1(z, x, y) -> same_sign1(r, z)) and ((not product_sign1(z, x,
  y)) -> ((((value1(x) * value1(y)) + value1(z)) = 0.0) -> (((m = Down) ->
  (sign2(r) = Neg)) and ((not (m = Down)) -> (sign2(r) = Pos))))))))) and
  ((is_finite1(x) and (is_finite1(y) and (is_finite1(z) and
  (not no_overflow1(m, ((value1(x) * value1(y)) + value1(z))))))) ->
  (same_sign_real(sign2(r), ((value1(x) * value1(y)) + value1(z))) and
  overflow_value1(m, r))))))))))))))

predicate sqrt_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_plus_infinity1(x) ->
  is_plus_infinity1(r)) and ((is_minus_infinity1(x) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) <  0.0)) -> is_NaN1(r)) and
  (((is_finite1(x) and (value1(x) = 0.0)) -> (is_finite1(r) and
  ((value1(r) = 0.0) and same_sign1(r, x)))) and ((is_finite1(x) and
  (0.0 <  value1(x))) -> (is_finite1(r) and
  ((value1(r) = float64(m, sqrt_real(value1(x)))) and
  (sign2(r) = Pos)))))))))

predicate roundToIntegral_post1(m: fpa_rounding_mode, x: double, r: double) =
  ((is_NaN1(x) -> is_NaN1(r)) and ((is_infinite1(x) -> (is_infinite1(r) and
  same_sign1(x, r))) and (is_finite1(x) -> (same_sign1(x, r) and
  (value1(r) = real_of_int(integer_round(m, value1(x))))))))

predicate of_real_exact_post1(x: real, r: double) = (is_finite1(r) and
  (value1(r) = x))

predicate le1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <= value1(y)))) or ((is_minus_infinity1(x) and
  is_not_NaN3(y)) or (is_not_NaN3(x) and is_plus_infinity1(y))))

predicate lt1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) <  value1(y)))) or ((is_minus_infinity1(x) and
  (is_not_NaN3(y) and (not is_minus_infinity1(y)))) or (is_not_NaN3(x) and
  ((not is_plus_infinity1(x)) and is_plus_infinity1(y)))))

predicate eq1(x: double, y: double) = ((is_finite1(x) and (is_finite1(y) and
  (value1(x) = value1(y)))) or (is_infinite1(x) and (is_infinite1(y) and
  same_sign1(x, y))))

predicate ne1(x: double, y: double) = (not eq1(x, y))

predicate rem_post1(x: double, y: double, r: double) = (((is_NaN1(x) or
  (is_NaN1(y) or (is_infinite1(x) or is_gen_zero1(y)))) -> is_NaN1(r)) and
  ((not (is_NaN1(x) or (is_NaN1(y) or (is_infinite1(x) or
  is_gen_zero1(y))))) -> ((is_infinite1(y) -> eq1(x, r)) and
  ((not is_infinite1(y)) -> (is_finite1(r) and (((value1(r) = 0.0) ->
  same_sign1(x, r)) and
  (value1(r) = (value1(x) - (value1(y) * real_of_int(integer_round(NearestTiesToEven, (value1(x) / value1(y)))))))))))))

axiom le_lt_trans1 :
  (forall x:double. forall y:double. forall z:double. ((le1(x, y) and lt1(y,
  z)) -> lt1(x, z)))

axiom lt_le_trans1 :
  (forall x:double. forall y:double. forall z:double. ((lt1(x, y) and le1(y,
  z)) -> lt1(x, z)))

axiom le_ge_asym1 :
  (forall x:double. forall y:double. ((le1(x, y) and le1(y, x)) -> eq1(x,
  y)))

axiom not_lt_ge1 :
  (forall x:double. forall y:double. (((not lt1(x, y)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(y, x)))

axiom not_gt_le1 :
  (forall x:double. forall y:double. (((not lt1(y, x)) and
  (is_not_NaN3(x) and is_not_NaN3(y))) -> le1(x, y)))

predicate single_to_double_cast(x: single, r: double) = ((is_NaN(x) ->
  is_NaN1(r)) and (is_finite(x) -> (is_finite1(r) and
  ((value1(r) = value(x)) and (sign2(r) = sign1(x))))))

predicate double_to_single_cast(m: fpa_rounding_mode, x: double, r: single) =
  ((is_NaN1(x) -> is_NaN(r)) and ((is_infinite1(x) -> (is_infinite(r) and
  (sign1(r) = sign2(x)))) and (((is_finite1(x) and no_overflow(m,
  value1(x))) -> (is_finite(r) and ((value(r) = float32(m, value1(x))) and
  (sign1(r) = sign2(x))))) and ((is_finite1(x) and (not no_overflow(m,
  value1(x)))) -> ((sign1(r) = sign2(x)) and overflow_value(m, r))))))

predicate smt2_single_eq(x: single, y: single) = (((is_finite(x) and
  (is_finite(y) and ((value(x) = value(y)) and same_sign(x, y)))) or
  (is_infinite(x) and (is_infinite(y) and same_sign(x, y)))) or
  (is_NaN(x) and is_NaN(y)))

logic b306 : double

logic b1175 : single

logic b217 : double

logic b390 : double

logic b1086 : single

logic b1031 : single

logic b357 : double

logic b1110 : single

logic b1160 : single

logic b1011 : single

logic b1115 : single

logic b685 : single

logic b1056 : single

logic b1145 : single

logic b1076 : single

logic b1021 : single

logic b1066 : single

logic b1016 : single

logic b1046 : single

logic b1155 : single

logic b1026 : single

logic b289 : double

logic b1125 : single

logic b1140 : single

logic b1120 : single

logic b198 : single

logic b996 : single

logic b1180 : single

logic b207 : single

logic b441 : double

logic b1006 : single

logic b1095 : single

logic b200 : single

logic b1190 : single

logic b1100 : single

logic b526 : double

logic b994 : single

logic b1130 : single

logic b1051 : single

logic b989 : single

logic b1165 : single

logic b1071 : single

logic b340 : double

logic b1081 : single

logic b1061 : single

logic b323 : double

logic b1001 : single

logic b475 : double

logic b1150 : single

logic b543 : double

logic b424 : double

logic b682 : single

logic b1036 : single

logic b1135 : single

logic b255 : double

logic b239 : double

logic b407 : double

logic b1170 : single

logic b1041 : single

logic b492 : double

logic b272 : double

logic b458 : double

logic b1185 : single

logic b509 : double

logic b1105 : single

logic b373 : double

logic b230 : double

logic s_mul__t_3__t_9__t_9 : single

axiom eq_0 : mul_post(NearestTiesToEven, b198, b198, s_mul__t_3__t_9__t_9)

logic ust_10 : single

axiom eq_1 : mul_post(NearestTiesToEven, b198, b198, ust_10)

logic s_neg__t_10 : single

axiom eq_2 : neg_post(ust_10, s_neg__t_10)

logic ust_11 : single

axiom eq_3 : neg_post(ust_10, ust_11)

logic s_mul__t_3__t_9__t_11 : single

axiom eq_4 : mul_post(NearestTiesToEven, b198, ust_11, s_mul__t_3__t_9__t_11)

logic ust_12 : single

axiom eq_5 : mul_post(NearestTiesToEven, b198, ust_11, ust_12)

logic double_of_single__t_3__t_12 : double

axiom eq_6 : single_to_double_cast(ust_12, double_of_single__t_3__t_12)

logic ust_13 : double

axiom eq_7 : single_to_double_cast(ust_12, ust_13)

logic d_div__t_3__t_13__t_14 : double

axiom eq_8 : div_post1(NearestTiesToEven, ust_13, b217,
  d_div__t_3__t_13__t_14)

logic ust_15 : double

axiom eq_9 : div_post1(NearestTiesToEven, ust_13, b217, ust_15)

logic single_of_double__t_3__t_15 : single

axiom eq_10 : double_to_single_cast(NearestTiesToEven, ust_15,
  single_of_double__t_3__t_15)

logic ust_16 : single

axiom eq_11 : double_to_single_cast(NearestTiesToEven, ust_15, ust_16)

predicate ust_19() = (not smt2_single_eq(ust_16, b1190))

logic s_mul__t_3__t_11__t_16 : single

axiom eq_12 : mul_post(NearestTiesToEven, ust_11, ust_16,
  s_mul__t_3__t_11__t_16)

logic ust_20 : single

axiom eq_13 : mul_post(NearestTiesToEven, ust_11, ust_16, ust_20)

logic double_of_single__t_3__t_20 : double

axiom eq_14 : single_to_double_cast(ust_20, double_of_single__t_3__t_20)

logic ust_21 : double

axiom eq_15 : single_to_double_cast(ust_20, ust_21)

logic d_div__t_3__t_21__t_22 : double

axiom eq_16 : div_post1(NearestTiesToEven, ust_21, b239,
  d_div__t_3__t_21__t_22)

logic ust_23 : double

axiom eq_17 : div_post1(NearestTiesToEven, ust_21, b239, ust_23)

logic single_of_double__t_3__t_23 : single

axiom eq_18 : double_to_single_cast(NearestTiesToEven, ust_23,
  single_of_double__t_3__t_23)

logic ust_24 : single

axiom eq_19 : double_to_single_cast(NearestTiesToEven, ust_23, ust_24)

predicate ust_27() = (not smt2_single_eq(ust_24, b1185))

logic s_mul__t_3__t_11__t_24 : single

axiom eq_20 : mul_post(NearestTiesToEven, ust_11, ust_24,
  s_mul__t_3__t_11__t_24)

logic ust_28 : single

axiom eq_21 : mul_post(NearestTiesToEven, ust_11, ust_24, ust_28)

logic double_of_single__t_3__t_28 : double

axiom eq_22 : single_to_double_cast(ust_28, double_of_single__t_3__t_28)

logic ust_29 : double

axiom eq_23 : single_to_double_cast(ust_28, ust_29)

logic d_div__t_3__t_29__t_30 : double

axiom eq_24 : div_post1(NearestTiesToEven, ust_29, b255,
  d_div__t_3__t_29__t_30)

logic ust_31 : double

axiom eq_25 : div_post1(NearestTiesToEven, ust_29, b255, ust_31)

logic single_of_double__t_3__t_31 : single

axiom eq_26 : double_to_single_cast(NearestTiesToEven, ust_31,
  single_of_double__t_3__t_31)

logic ust_32 : single

axiom eq_27 : double_to_single_cast(NearestTiesToEven, ust_31, ust_32)

predicate ust_35() = (not smt2_single_eq(ust_32, b1180))

logic s_mul__t_3__t_11__t_32 : single

axiom eq_28 : mul_post(NearestTiesToEven, ust_11, ust_32,
  s_mul__t_3__t_11__t_32)

logic ust_36 : single

axiom eq_29 : mul_post(NearestTiesToEven, ust_11, ust_32, ust_36)

logic double_of_single__t_3__t_36 : double

axiom eq_30 : single_to_double_cast(ust_36, double_of_single__t_3__t_36)

logic ust_37 : double

axiom eq_31 : single_to_double_cast(ust_36, ust_37)

logic d_div__t_3__t_37__t_38 : double

axiom eq_32 : div_post1(NearestTiesToEven, ust_37, b272,
  d_div__t_3__t_37__t_38)

logic ust_39 : double

axiom eq_33 : div_post1(NearestTiesToEven, ust_37, b272, ust_39)

logic single_of_double__t_3__t_39 : single

axiom eq_34 : double_to_single_cast(NearestTiesToEven, ust_39,
  single_of_double__t_3__t_39)

logic ust_40 : single

axiom eq_35 : double_to_single_cast(NearestTiesToEven, ust_39, ust_40)

predicate ust_43() = (not smt2_single_eq(ust_40, b1175))

logic s_mul__t_3__t_11__t_40 : single

axiom eq_36 : mul_post(NearestTiesToEven, ust_11, ust_40,
  s_mul__t_3__t_11__t_40)

logic ust_44 : single

axiom eq_37 : mul_post(NearestTiesToEven, ust_11, ust_40, ust_44)

logic double_of_single__t_3__t_44 : double

axiom eq_38 : single_to_double_cast(ust_44, double_of_single__t_3__t_44)

logic ust_45 : double

axiom eq_39 : single_to_double_cast(ust_44, ust_45)

logic d_div__t_3__t_45__t_46 : double

axiom eq_40 : div_post1(NearestTiesToEven, ust_45, b289,
  d_div__t_3__t_45__t_46)

logic ust_47 : double

axiom eq_41 : div_post1(NearestTiesToEven, ust_45, b289, ust_47)

logic single_of_double__t_3__t_47 : single

axiom eq_42 : double_to_single_cast(NearestTiesToEven, ust_47,
  single_of_double__t_3__t_47)

logic ust_48 : single

axiom eq_43 : double_to_single_cast(NearestTiesToEven, ust_47, ust_48)

predicate ust_51() = (not smt2_single_eq(ust_48, b1170))

logic s_mul__t_3__t_11__t_48 : single

axiom eq_44 : mul_post(NearestTiesToEven, ust_11, ust_48,
  s_mul__t_3__t_11__t_48)

logic ust_52 : single

axiom eq_45 : mul_post(NearestTiesToEven, ust_11, ust_48, ust_52)

logic double_of_single__t_3__t_52 : double

axiom eq_46 : single_to_double_cast(ust_52, double_of_single__t_3__t_52)

logic ust_53 : double

axiom eq_47 : single_to_double_cast(ust_52, ust_53)

logic d_div__t_3__t_53__t_54 : double

axiom eq_48 : div_post1(NearestTiesToEven, ust_53, b306,
  d_div__t_3__t_53__t_54)

logic ust_55 : double

axiom eq_49 : div_post1(NearestTiesToEven, ust_53, b306, ust_55)

logic single_of_double__t_3__t_55 : single

axiom eq_50 : double_to_single_cast(NearestTiesToEven, ust_55,
  single_of_double__t_3__t_55)

logic ust_56 : single

axiom eq_51 : double_to_single_cast(NearestTiesToEven, ust_55, ust_56)

predicate ust_59() = (not smt2_single_eq(ust_56, b1165))

logic s_mul__t_3__t_11__t_56 : single

axiom eq_52 : mul_post(NearestTiesToEven, ust_11, ust_56,
  s_mul__t_3__t_11__t_56)

logic ust_60 : single

axiom eq_53 : mul_post(NearestTiesToEven, ust_11, ust_56, ust_60)

logic double_of_single__t_3__t_60 : double

axiom eq_54 : single_to_double_cast(ust_60, double_of_single__t_3__t_60)

logic ust_61 : double

axiom eq_55 : single_to_double_cast(ust_60, ust_61)

logic d_div__t_3__t_61__t_62 : double

axiom eq_56 : div_post1(NearestTiesToEven, ust_61, b323,
  d_div__t_3__t_61__t_62)

logic ust_63 : double

axiom eq_57 : div_post1(NearestTiesToEven, ust_61, b323, ust_63)

logic single_of_double__t_3__t_63 : single

axiom eq_58 : double_to_single_cast(NearestTiesToEven, ust_63,
  single_of_double__t_3__t_63)

logic ust_64 : single

axiom eq_59 : double_to_single_cast(NearestTiesToEven, ust_63, ust_64)

predicate ust_67() = (not smt2_single_eq(ust_64, b1160))

logic s_mul__t_3__t_11__t_64 : single

axiom eq_60 : mul_post(NearestTiesToEven, ust_11, ust_64,
  s_mul__t_3__t_11__t_64)

logic ust_68 : single

axiom eq_61 : mul_post(NearestTiesToEven, ust_11, ust_64, ust_68)

logic double_of_single__t_3__t_68 : double

axiom eq_62 : single_to_double_cast(ust_68, double_of_single__t_3__t_68)

logic ust_69 : double

axiom eq_63 : single_to_double_cast(ust_68, ust_69)

logic d_div__t_3__t_69__t_70 : double

axiom eq_64 : div_post1(NearestTiesToEven, ust_69, b340,
  d_div__t_3__t_69__t_70)

logic ust_71 : double

axiom eq_65 : div_post1(NearestTiesToEven, ust_69, b340, ust_71)

logic single_of_double__t_3__t_71 : single

axiom eq_66 : double_to_single_cast(NearestTiesToEven, ust_71,
  single_of_double__t_3__t_71)

logic ust_72 : single

axiom eq_67 : double_to_single_cast(NearestTiesToEven, ust_71, ust_72)

predicate ust_75() = (not smt2_single_eq(ust_72, b1155))

logic s_mul__t_3__t_11__t_72 : single

axiom eq_68 : mul_post(NearestTiesToEven, ust_11, ust_72,
  s_mul__t_3__t_11__t_72)

logic ust_76 : single

axiom eq_69 : mul_post(NearestTiesToEven, ust_11, ust_72, ust_76)

logic double_of_single__t_3__t_76 : double

axiom eq_70 : single_to_double_cast(ust_76, double_of_single__t_3__t_76)

logic ust_77 : double

axiom eq_71 : single_to_double_cast(ust_76, ust_77)

logic d_div__t_3__t_77__t_78 : double

axiom eq_72 : div_post1(NearestTiesToEven, ust_77, b357,
  d_div__t_3__t_77__t_78)

logic ust_79 : double

axiom eq_73 : div_post1(NearestTiesToEven, ust_77, b357, ust_79)

logic single_of_double__t_3__t_79 : single

axiom eq_74 : double_to_single_cast(NearestTiesToEven, ust_79,
  single_of_double__t_3__t_79)

logic ust_80 : single

axiom eq_75 : double_to_single_cast(NearestTiesToEven, ust_79, ust_80)

predicate ust_83() = (not smt2_single_eq(ust_80, b1150))

logic s_mul__t_3__t_11__t_80 : single

axiom eq_76 : mul_post(NearestTiesToEven, ust_11, ust_80,
  s_mul__t_3__t_11__t_80)

logic ust_84 : single

axiom eq_77 : mul_post(NearestTiesToEven, ust_11, ust_80, ust_84)

logic double_of_single__t_3__t_84 : double

axiom eq_78 : single_to_double_cast(ust_84, double_of_single__t_3__t_84)

logic ust_85 : double

axiom eq_79 : single_to_double_cast(ust_84, ust_85)

logic d_div__t_3__t_85__t_86 : double

axiom eq_80 : div_post1(NearestTiesToEven, ust_85, b373,
  d_div__t_3__t_85__t_86)

logic ust_87 : double

axiom eq_81 : div_post1(NearestTiesToEven, ust_85, b373, ust_87)

logic single_of_double__t_3__t_87 : single

axiom eq_82 : double_to_single_cast(NearestTiesToEven, ust_87,
  single_of_double__t_3__t_87)

logic ust_88 : single

axiom eq_83 : double_to_single_cast(NearestTiesToEven, ust_87, ust_88)

predicate ust_91() = (not smt2_single_eq(ust_88, b1145))

logic s_mul__t_3__t_11__t_88 : single

axiom eq_84 : mul_post(NearestTiesToEven, ust_11, ust_88,
  s_mul__t_3__t_11__t_88)

logic ust_92 : single

axiom eq_85 : mul_post(NearestTiesToEven, ust_11, ust_88, ust_92)

logic double_of_single__t_3__t_92 : double

axiom eq_86 : single_to_double_cast(ust_92, double_of_single__t_3__t_92)

logic ust_93 : double

axiom eq_87 : single_to_double_cast(ust_92, ust_93)

logic d_div__t_3__t_93__t_94 : double

axiom eq_88 : div_post1(NearestTiesToEven, ust_93, b390,
  d_div__t_3__t_93__t_94)

logic ust_95 : double

axiom eq_89 : div_post1(NearestTiesToEven, ust_93, b390, ust_95)

logic single_of_double__t_3__t_95 : single

axiom eq_90 : double_to_single_cast(NearestTiesToEven, ust_95,
  single_of_double__t_3__t_95)

logic ust_96 : single

axiom eq_91 : double_to_single_cast(NearestTiesToEven, ust_95, ust_96)

predicate ust_99() = (not smt2_single_eq(ust_96, b1140))

logic s_mul__t_3__t_11__t_96 : single

axiom eq_92 : mul_post(NearestTiesToEven, ust_11, ust_96,
  s_mul__t_3__t_11__t_96)

logic ust_100 : single

axiom eq_93 : mul_post(NearestTiesToEven, ust_11, ust_96, ust_100)

logic double_of_single__t_3__t_100 : double

axiom eq_94 : single_to_double_cast(ust_100, double_of_single__t_3__t_100)

logic ust_101 : double

axiom eq_95 : single_to_double_cast(ust_100, ust_101)

logic d_div__t_3__t_101__t_102 : double

axiom eq_96 : div_post1(NearestTiesToEven, ust_101, b407,
  d_div__t_3__t_101__t_102)

logic ust_103 : double

axiom eq_97 : div_post1(NearestTiesToEven, ust_101, b407, ust_103)

logic single_of_double__t_3__t_103 : single

axiom eq_98 : double_to_single_cast(NearestTiesToEven, ust_103,
  single_of_double__t_3__t_103)

logic ust_104 : single

axiom eq_99 : double_to_single_cast(NearestTiesToEven, ust_103, ust_104)

predicate ust_107() = (not smt2_single_eq(ust_104, b1135))

logic s_mul__t_3__t_11__t_104 : single

axiom eq_100 : mul_post(NearestTiesToEven, ust_11, ust_104,
  s_mul__t_3__t_11__t_104)

logic ust_108 : single

axiom eq_101 : mul_post(NearestTiesToEven, ust_11, ust_104, ust_108)

logic double_of_single__t_3__t_108 : double

axiom eq_102 : single_to_double_cast(ust_108, double_of_single__t_3__t_108)

logic ust_109 : double

axiom eq_103 : single_to_double_cast(ust_108, ust_109)

logic d_div__t_3__t_109__t_110 : double

axiom eq_104 : div_post1(NearestTiesToEven, ust_109, b424,
  d_div__t_3__t_109__t_110)

logic ust_111 : double

axiom eq_105 : div_post1(NearestTiesToEven, ust_109, b424, ust_111)

logic single_of_double__t_3__t_111 : single

axiom eq_106 : double_to_single_cast(NearestTiesToEven, ust_111,
  single_of_double__t_3__t_111)

logic ust_112 : single

axiom eq_107 : double_to_single_cast(NearestTiesToEven, ust_111, ust_112)

predicate ust_115() = (not smt2_single_eq(ust_112, b1130))

logic s_mul__t_3__t_11__t_112 : single

axiom eq_108 : mul_post(NearestTiesToEven, ust_11, ust_112,
  s_mul__t_3__t_11__t_112)

logic ust_116 : single

axiom eq_109 : mul_post(NearestTiesToEven, ust_11, ust_112, ust_116)

logic double_of_single__t_3__t_116 : double

axiom eq_110 : single_to_double_cast(ust_116, double_of_single__t_3__t_116)

logic ust_117 : double

axiom eq_111 : single_to_double_cast(ust_116, ust_117)

logic d_div__t_3__t_117__t_118 : double

axiom eq_112 : div_post1(NearestTiesToEven, ust_117, b441,
  d_div__t_3__t_117__t_118)

logic ust_119 : double

axiom eq_113 : div_post1(NearestTiesToEven, ust_117, b441, ust_119)

logic single_of_double__t_3__t_119 : single

axiom eq_114 : double_to_single_cast(NearestTiesToEven, ust_119,
  single_of_double__t_3__t_119)

logic ust_120 : single

axiom eq_115 : double_to_single_cast(NearestTiesToEven, ust_119, ust_120)

predicate ust_123() = (not smt2_single_eq(ust_120, b1125))

logic s_mul__t_3__t_11__t_120 : single

axiom eq_116 : mul_post(NearestTiesToEven, ust_11, ust_120,
  s_mul__t_3__t_11__t_120)

logic ust_124 : single

axiom eq_117 : mul_post(NearestTiesToEven, ust_11, ust_120, ust_124)

logic double_of_single__t_3__t_124 : double

axiom eq_118 : single_to_double_cast(ust_124, double_of_single__t_3__t_124)

logic ust_125 : double

axiom eq_119 : single_to_double_cast(ust_124, ust_125)

logic d_div__t_3__t_125__t_126 : double

axiom eq_120 : div_post1(NearestTiesToEven, ust_125, b458,
  d_div__t_3__t_125__t_126)

logic ust_127 : double

axiom eq_121 : div_post1(NearestTiesToEven, ust_125, b458, ust_127)

logic single_of_double__t_3__t_127 : single

axiom eq_122 : double_to_single_cast(NearestTiesToEven, ust_127,
  single_of_double__t_3__t_127)

logic ust_128 : single

axiom eq_123 : double_to_single_cast(NearestTiesToEven, ust_127, ust_128)

predicate ust_131() = (not smt2_single_eq(ust_128, b1120))

logic s_mul__t_3__t_11__t_128 : single

axiom eq_124 : mul_post(NearestTiesToEven, ust_11, ust_128,
  s_mul__t_3__t_11__t_128)

logic ust_132 : single

axiom eq_125 : mul_post(NearestTiesToEven, ust_11, ust_128, ust_132)

logic double_of_single__t_3__t_132 : double

axiom eq_126 : single_to_double_cast(ust_132, double_of_single__t_3__t_132)

logic ust_133 : double

axiom eq_127 : single_to_double_cast(ust_132, ust_133)

logic d_div__t_3__t_133__t_134 : double

axiom eq_128 : div_post1(NearestTiesToEven, ust_133, b475,
  d_div__t_3__t_133__t_134)

logic ust_135 : double

axiom eq_129 : div_post1(NearestTiesToEven, ust_133, b475, ust_135)

logic single_of_double__t_3__t_135 : single

axiom eq_130 : double_to_single_cast(NearestTiesToEven, ust_135,
  single_of_double__t_3__t_135)

logic ust_136 : single

axiom eq_131 : double_to_single_cast(NearestTiesToEven, ust_135, ust_136)

predicate ust_139() = (not smt2_single_eq(ust_136, b1115))

logic s_mul__t_3__t_11__t_136 : single

axiom eq_132 : mul_post(NearestTiesToEven, ust_11, ust_136,
  s_mul__t_3__t_11__t_136)

logic ust_140 : single

axiom eq_133 : mul_post(NearestTiesToEven, ust_11, ust_136, ust_140)

logic double_of_single__t_3__t_140 : double

axiom eq_134 : single_to_double_cast(ust_140, double_of_single__t_3__t_140)

logic ust_141 : double

axiom eq_135 : single_to_double_cast(ust_140, ust_141)

logic d_div__t_3__t_141__t_142 : double

axiom eq_136 : div_post1(NearestTiesToEven, ust_141, b492,
  d_div__t_3__t_141__t_142)

logic ust_143 : double

axiom eq_137 : div_post1(NearestTiesToEven, ust_141, b492, ust_143)

logic single_of_double__t_3__t_143 : single

axiom eq_138 : double_to_single_cast(NearestTiesToEven, ust_143,
  single_of_double__t_3__t_143)

logic ust_144 : single

axiom eq_139 : double_to_single_cast(NearestTiesToEven, ust_143, ust_144)

predicate ust_147() = (not smt2_single_eq(ust_144, b1110))

logic s_mul__t_3__t_11__t_144 : single

axiom eq_140 : mul_post(NearestTiesToEven, ust_11, ust_144,
  s_mul__t_3__t_11__t_144)

logic ust_148 : single

axiom eq_141 : mul_post(NearestTiesToEven, ust_11, ust_144, ust_148)

logic double_of_single__t_3__t_148 : double

axiom eq_142 : single_to_double_cast(ust_148, double_of_single__t_3__t_148)

logic ust_149 : double

axiom eq_143 : single_to_double_cast(ust_148, ust_149)

logic d_div__t_3__t_149__t_150 : double

axiom eq_144 : div_post1(NearestTiesToEven, ust_149, b509,
  d_div__t_3__t_149__t_150)

logic ust_151 : double

axiom eq_145 : div_post1(NearestTiesToEven, ust_149, b509, ust_151)

logic single_of_double__t_3__t_151 : single

axiom eq_146 : double_to_single_cast(NearestTiesToEven, ust_151,
  single_of_double__t_3__t_151)

logic ust_152 : single

axiom eq_147 : double_to_single_cast(NearestTiesToEven, ust_151, ust_152)

predicate ust_155() = (not smt2_single_eq(ust_152, b1105))

logic s_mul__t_3__t_11__t_152 : single

axiom eq_148 : mul_post(NearestTiesToEven, ust_11, ust_152,
  s_mul__t_3__t_11__t_152)

logic ust_156 : single

axiom eq_149 : mul_post(NearestTiesToEven, ust_11, ust_152, ust_156)

logic double_of_single__t_3__t_156 : double

axiom eq_150 : single_to_double_cast(ust_156, double_of_single__t_3__t_156)

logic ust_157 : double

axiom eq_151 : single_to_double_cast(ust_156, ust_157)

logic d_div__t_3__t_157__t_158 : double

axiom eq_152 : div_post1(NearestTiesToEven, ust_157, b526,
  d_div__t_3__t_157__t_158)

logic ust_159 : double

axiom eq_153 : div_post1(NearestTiesToEven, ust_157, b526, ust_159)

logic single_of_double__t_3__t_159 : single

axiom eq_154 : double_to_single_cast(NearestTiesToEven, ust_159,
  single_of_double__t_3__t_159)

logic ust_160 : single

axiom eq_155 : double_to_single_cast(NearestTiesToEven, ust_159, ust_160)

predicate ust_163() = (not smt2_single_eq(ust_160, b1100))

logic s_mul__t_3__t_11__t_160 : single

axiom eq_156 : mul_post(NearestTiesToEven, ust_11, ust_160,
  s_mul__t_3__t_11__t_160)

logic ust_164 : single

axiom eq_157 : mul_post(NearestTiesToEven, ust_11, ust_160, ust_164)

logic double_of_single__t_3__t_164 : double

axiom eq_158 : single_to_double_cast(ust_164, double_of_single__t_3__t_164)

logic ust_165 : double

axiom eq_159 : single_to_double_cast(ust_164, ust_165)

logic d_div__t_3__t_165__t_166 : double

axiom eq_160 : div_post1(NearestTiesToEven, ust_165, b543,
  d_div__t_3__t_165__t_166)

logic ust_167 : double

axiom eq_161 : div_post1(NearestTiesToEven, ust_165, b543, ust_167)

logic single_of_double__t_3__t_167 : single

axiom eq_162 : double_to_single_cast(NearestTiesToEven, ust_167,
  single_of_double__t_3__t_167)

logic ust_168 : single

axiom eq_163 : double_to_single_cast(NearestTiesToEven, ust_167, ust_168)

predicate ust_171() = (not smt2_single_eq(ust_168, b1095))

predicate ust_175() = (not smt2_single_eq(b994, b1086))

predicate ust_178() = (not smt2_single_eq(b1086, b1081))

predicate ust_181() = (not smt2_single_eq(b1081, b1076))

predicate ust_184() = (not smt2_single_eq(b1076, b1071))

predicate ust_187() = (not smt2_single_eq(b1071, b1066))

predicate ust_190() = (not smt2_single_eq(b1066, b1061))

predicate ust_193() = (not smt2_single_eq(b1061, b1056))

predicate ust_196() = (not smt2_single_eq(b1056, b1051))

predicate ust_199() = (not smt2_single_eq(b1051, b1046))

predicate ust_202() = (not smt2_single_eq(b1046, b1041))

predicate ust_205() = (not smt2_single_eq(b1041, b1036))

predicate ust_208() = (not smt2_single_eq(b1036, b1031))

predicate ust_211() = (not smt2_single_eq(b1031, b1026))

predicate ust_214() = (not smt2_single_eq(b1026, b1021))

predicate ust_217() = (not smt2_single_eq(b1021, b1016))

predicate ust_220() = (not smt2_single_eq(b1016, b1011))

predicate ust_223() = (not smt2_single_eq(b1011, b1006))

predicate ust_226() = (not smt2_single_eq(b1006, b1001))

logic s_add__t_3__t_9__t_16 : single

axiom eq_164 : add_post(NearestTiesToEven, b198, ust_16,
  s_add__t_3__t_9__t_16)

logic ust_227 : single

axiom eq_165 : add_post(NearestTiesToEven, b198, ust_16, ust_227)

logic s_add__t_3__t_24__t_227 : single

axiom eq_166 : add_post(NearestTiesToEven, ust_24, ust_227,
  s_add__t_3__t_24__t_227)

logic ust_228 : single

axiom eq_167 : add_post(NearestTiesToEven, ust_24, ust_227, ust_228)

logic s_add__t_3__t_32__t_228 : single

axiom eq_168 : add_post(NearestTiesToEven, ust_32, ust_228,
  s_add__t_3__t_32__t_228)

logic ust_229 : single

axiom eq_169 : add_post(NearestTiesToEven, ust_32, ust_228, ust_229)

logic s_add__t_3__t_40__t_229 : single

axiom eq_170 : add_post(NearestTiesToEven, ust_40, ust_229,
  s_add__t_3__t_40__t_229)

logic ust_230 : single

axiom eq_171 : add_post(NearestTiesToEven, ust_40, ust_229, ust_230)

logic s_add__t_3__t_48__t_230 : single

axiom eq_172 : add_post(NearestTiesToEven, ust_48, ust_230,
  s_add__t_3__t_48__t_230)

logic ust_231 : single

axiom eq_173 : add_post(NearestTiesToEven, ust_48, ust_230, ust_231)

logic s_add__t_3__t_56__t_231 : single

axiom eq_174 : add_post(NearestTiesToEven, ust_56, ust_231,
  s_add__t_3__t_56__t_231)

logic ust_232 : single

axiom eq_175 : add_post(NearestTiesToEven, ust_56, ust_231, ust_232)

logic s_add__t_3__t_64__t_232 : single

axiom eq_176 : add_post(NearestTiesToEven, ust_64, ust_232,
  s_add__t_3__t_64__t_232)

logic ust_233 : single

axiom eq_177 : add_post(NearestTiesToEven, ust_64, ust_232, ust_233)

logic s_add__t_3__t_72__t_233 : single

axiom eq_178 : add_post(NearestTiesToEven, ust_72, ust_233,
  s_add__t_3__t_72__t_233)

logic ust_234 : single

axiom eq_179 : add_post(NearestTiesToEven, ust_72, ust_233, ust_234)

logic s_add__t_3__t_80__t_234 : single

axiom eq_180 : add_post(NearestTiesToEven, ust_80, ust_234,
  s_add__t_3__t_80__t_234)

logic ust_235 : single

axiom eq_181 : add_post(NearestTiesToEven, ust_80, ust_234, ust_235)

logic s_add__t_3__t_88__t_235 : single

axiom eq_182 : add_post(NearestTiesToEven, ust_88, ust_235,
  s_add__t_3__t_88__t_235)

logic ust_236 : single

axiom eq_183 : add_post(NearestTiesToEven, ust_88, ust_235, ust_236)

logic s_add__t_3__t_96__t_236 : single

axiom eq_184 : add_post(NearestTiesToEven, ust_96, ust_236,
  s_add__t_3__t_96__t_236)

logic ust_237 : single

axiom eq_185 : add_post(NearestTiesToEven, ust_96, ust_236, ust_237)

logic s_add__t_3__t_104__t_237 : single

axiom eq_186 : add_post(NearestTiesToEven, ust_104, ust_237,
  s_add__t_3__t_104__t_237)

logic ust_238 : single

axiom eq_187 : add_post(NearestTiesToEven, ust_104, ust_237, ust_238)

logic s_add__t_3__t_112__t_238 : single

axiom eq_188 : add_post(NearestTiesToEven, ust_112, ust_238,
  s_add__t_3__t_112__t_238)

logic ust_239 : single

axiom eq_189 : add_post(NearestTiesToEven, ust_112, ust_238, ust_239)

logic s_add__t_3__t_120__t_239 : single

axiom eq_190 : add_post(NearestTiesToEven, ust_120, ust_239,
  s_add__t_3__t_120__t_239)

logic ust_240 : single

axiom eq_191 : add_post(NearestTiesToEven, ust_120, ust_239, ust_240)

logic s_add__t_3__t_128__t_240 : single

axiom eq_192 : add_post(NearestTiesToEven, ust_128, ust_240,
  s_add__t_3__t_128__t_240)

logic ust_241 : single

axiom eq_193 : add_post(NearestTiesToEven, ust_128, ust_240, ust_241)

logic s_add__t_3__t_136__t_241 : single

axiom eq_194 : add_post(NearestTiesToEven, ust_136, ust_241,
  s_add__t_3__t_136__t_241)

logic ust_242 : single

axiom eq_195 : add_post(NearestTiesToEven, ust_136, ust_241, ust_242)

logic s_add__t_3__t_144__t_242 : single

axiom eq_196 : add_post(NearestTiesToEven, ust_144, ust_242,
  s_add__t_3__t_144__t_242)

logic ust_243 : single

axiom eq_197 : add_post(NearestTiesToEven, ust_144, ust_242, ust_243)

logic s_add__t_3__t_152__t_243 : single

axiom eq_198 : add_post(NearestTiesToEven, ust_152, ust_243,
  s_add__t_3__t_152__t_243)

logic ust_244 : single

axiom eq_199 : add_post(NearestTiesToEven, ust_152, ust_243, ust_244)

logic s_add__t_3__t_160__t_244 : single

axiom eq_200 : add_post(NearestTiesToEven, ust_160, ust_244,
  s_add__t_3__t_160__t_244)

logic ust_245 : single

axiom eq_201 : add_post(NearestTiesToEven, ust_160, ust_244, ust_245)

logic s_add__t_3__t_168__t_245 : single

axiom eq_202 : add_post(NearestTiesToEven, ust_168, ust_245,
  s_add__t_3__t_168__t_245)

logic ust_246 : single

axiom eq_203 : add_post(NearestTiesToEven, ust_168, ust_245, ust_246)

predicate ust_248() = (not smt2_single_eq(b1001, ust_246))

predicate ust_251() = (not smt2_single_eq(b994, b996))

predicate ust_254() = (not smt2_single_eq(b198, b989))

predicate ust_257() = (not le(b200, b198))

logic s_neg__t_9 : single

axiom eq_204 : neg_post(b198, s_neg__t_9)

logic ust_258 : single

axiom eq_205 : neg_post(b198, ust_258)

predicate ust_260() = (ust_257 and smt2_single_eq(b989, ust_258))

predicate ust_261() = (ust_254 and ust_260)

predicate ust_263() = (not le(b200, b994))

predicate ust_264() = (ust_261 and ust_263)

logic s_neg__t_172 : single

axiom eq_206 : neg_post(b994, s_neg__t_172)

logic ust_265 : single

axiom eq_207 : neg_post(b994, ust_265)

predicate ust_267() = (ust_264 and smt2_single_eq(b996, ust_265))

predicate ust_268() = (ust_251 and ust_267)

logic double_of_single__t_3__t_161 : double

axiom eq_208 : single_to_double_cast(b1100, double_of_single__t_3__t_161)

logic ust_269 : double

axiom eq_209 : single_to_double_cast(b1100, ust_269)

predicate ust_272() = (not le1(b230, ust_269))

predicate ust_273() = (ust_268 and ust_272)

predicate ust_275() = (ust_273 and smt2_single_eq(b1001, ust_245))

predicate ust_278() = (not le(b996, b207))

predicate ust_279() = (ust_275 and ust_278)

predicate ust_282() = (ust_279 and le(b989, b685))

predicate ust_285() = (ust_282 and le(b682, b198))

predicate ust_287() = (ust_285 and le(b198, b685))

predicate ust_288() = (ust_248 and ust_287)

logic double_of_single__t_3__t_153 : double

axiom eq_210 : single_to_double_cast(b1105, double_of_single__t_3__t_153)

logic ust_289 : double

axiom eq_211 : single_to_double_cast(b1105, ust_289)

predicate ust_291() = (not le1(b230, ust_289))

predicate ust_292() = (ust_288 and ust_291)

predicate ust_294() = (ust_292 and smt2_single_eq(b1006, ust_244))

predicate ust_295() = (ust_226 and ust_294)

logic double_of_single__t_3__t_145 : double

axiom eq_212 : single_to_double_cast(b1110, double_of_single__t_3__t_145)

logic ust_296 : double

axiom eq_213 : single_to_double_cast(b1110, ust_296)

predicate ust_298() = (not le1(b230, ust_296))

predicate ust_299() = (ust_295 and ust_298)

predicate ust_301() = (ust_299 and smt2_single_eq(b1011, ust_243))

predicate ust_302() = (ust_223 and ust_301)

logic double_of_single__t_3__t_137 : double

axiom eq_214 : single_to_double_cast(b1115, double_of_single__t_3__t_137)

logic ust_303 : double

axiom eq_215 : single_to_double_cast(b1115, ust_303)

predicate ust_305() = (not le1(b230, ust_303))

predicate ust_306() = (ust_302 and ust_305)

predicate ust_308() = (ust_306 and smt2_single_eq(b1016, ust_242))

predicate ust_309() = (ust_220 and ust_308)

logic double_of_single__t_3__t_129 : double

axiom eq_216 : single_to_double_cast(b1120, double_of_single__t_3__t_129)

logic ust_310 : double

axiom eq_217 : single_to_double_cast(b1120, ust_310)

predicate ust_312() = (not le1(b230, ust_310))

predicate ust_313() = (ust_309 and ust_312)

predicate ust_315() = (ust_313 and smt2_single_eq(b1021, ust_241))

predicate ust_316() = (ust_217 and ust_315)

logic double_of_single__t_3__t_121 : double

axiom eq_218 : single_to_double_cast(b1125, double_of_single__t_3__t_121)

logic ust_317 : double

axiom eq_219 : single_to_double_cast(b1125, ust_317)

predicate ust_319() = (not le1(b230, ust_317))

predicate ust_320() = (ust_316 and ust_319)

predicate ust_322() = (ust_320 and smt2_single_eq(b1026, ust_240))

predicate ust_323() = (ust_214 and ust_322)

logic double_of_single__t_3__t_113 : double

axiom eq_220 : single_to_double_cast(b1130, double_of_single__t_3__t_113)

logic ust_324 : double

axiom eq_221 : single_to_double_cast(b1130, ust_324)

predicate ust_326() = (not le1(b230, ust_324))

predicate ust_327() = (ust_323 and ust_326)

predicate ust_329() = (ust_327 and smt2_single_eq(b1031, ust_239))

predicate ust_330() = (ust_211 and ust_329)

logic double_of_single__t_3__t_105 : double

axiom eq_222 : single_to_double_cast(b1135, double_of_single__t_3__t_105)

logic ust_331 : double

axiom eq_223 : single_to_double_cast(b1135, ust_331)

predicate ust_333() = (not le1(b230, ust_331))

predicate ust_334() = (ust_330 and ust_333)

predicate ust_336() = (ust_334 and smt2_single_eq(b1036, ust_238))

predicate ust_337() = (ust_208 and ust_336)

logic double_of_single__t_3__t_97 : double

axiom eq_224 : single_to_double_cast(b1140, double_of_single__t_3__t_97)

logic ust_338 : double

axiom eq_225 : single_to_double_cast(b1140, ust_338)

predicate ust_340() = (not le1(b230, ust_338))

predicate ust_341() = (ust_337 and ust_340)

predicate ust_343() = (ust_341 and smt2_single_eq(b1041, ust_237))

predicate ust_344() = (ust_205 and ust_343)

logic double_of_single__t_3__t_89 : double

axiom eq_226 : single_to_double_cast(b1145, double_of_single__t_3__t_89)

logic ust_345 : double

axiom eq_227 : single_to_double_cast(b1145, ust_345)

predicate ust_347() = (not le1(b230, ust_345))

predicate ust_348() = (ust_344 and ust_347)

predicate ust_350() = (ust_348 and smt2_single_eq(b1046, ust_236))

predicate ust_351() = (ust_202 and ust_350)

logic double_of_single__t_3__t_81 : double

axiom eq_228 : single_to_double_cast(b1150, double_of_single__t_3__t_81)

logic ust_352 : double

axiom eq_229 : single_to_double_cast(b1150, ust_352)

predicate ust_354() = (not le1(b230, ust_352))

predicate ust_355() = (ust_351 and ust_354)

predicate ust_357() = (ust_355 and smt2_single_eq(b1051, ust_235))

predicate ust_358() = (ust_199 and ust_357)

logic double_of_single__t_3__t_73 : double

axiom eq_230 : single_to_double_cast(b1155, double_of_single__t_3__t_73)

logic ust_359 : double

axiom eq_231 : single_to_double_cast(b1155, ust_359)

predicate ust_361() = (not le1(b230, ust_359))

predicate ust_362() = (ust_358 and ust_361)

predicate ust_364() = (ust_362 and smt2_single_eq(b1056, ust_234))

predicate ust_365() = (ust_196 and ust_364)

logic double_of_single__t_3__t_65 : double

axiom eq_232 : single_to_double_cast(b1160, double_of_single__t_3__t_65)

logic ust_366 : double

axiom eq_233 : single_to_double_cast(b1160, ust_366)

predicate ust_368() = (not le1(b230, ust_366))

predicate ust_369() = (ust_365 and ust_368)

predicate ust_371() = (ust_369 and smt2_single_eq(b1061, ust_233))

predicate ust_372() = (ust_193 and ust_371)

logic double_of_single__t_3__t_57 : double

axiom eq_234 : single_to_double_cast(b1165, double_of_single__t_3__t_57)

logic ust_373 : double

axiom eq_235 : single_to_double_cast(b1165, ust_373)

predicate ust_375() = (not le1(b230, ust_373))

predicate ust_376() = (ust_372 and ust_375)

predicate ust_378() = (ust_376 and smt2_single_eq(b1066, ust_232))

predicate ust_379() = (ust_190 and ust_378)

logic double_of_single__t_3__t_49 : double

axiom eq_236 : single_to_double_cast(b1170, double_of_single__t_3__t_49)

logic ust_380 : double

axiom eq_237 : single_to_double_cast(b1170, ust_380)

predicate ust_382() = (not le1(b230, ust_380))

predicate ust_383() = (ust_379 and ust_382)

predicate ust_385() = (ust_383 and smt2_single_eq(b1071, ust_231))

predicate ust_386() = (ust_187 and ust_385)

logic double_of_single__t_3__t_41 : double

axiom eq_238 : single_to_double_cast(b1175, double_of_single__t_3__t_41)

logic ust_387 : double

axiom eq_239 : single_to_double_cast(b1175, ust_387)

predicate ust_389() = (not le1(b230, ust_387))

predicate ust_390() = (ust_386 and ust_389)

predicate ust_392() = (ust_390 and smt2_single_eq(b1076, ust_230))

predicate ust_393() = (ust_184 and ust_392)

logic double_of_single__t_3__t_33 : double

axiom eq_240 : single_to_double_cast(b1180, double_of_single__t_3__t_33)

logic ust_394 : double

axiom eq_241 : single_to_double_cast(b1180, ust_394)

predicate ust_396() = (not le1(b230, ust_394))

predicate ust_397() = (ust_393 and ust_396)

predicate ust_399() = (ust_397 and smt2_single_eq(b1081, ust_229))

predicate ust_400() = (ust_181 and ust_399)

logic double_of_single__t_3__t_25 : double

axiom eq_242 : single_to_double_cast(b1185, double_of_single__t_3__t_25)

logic ust_401 : double

axiom eq_243 : single_to_double_cast(b1185, ust_401)

predicate ust_403() = (not le1(b230, ust_401))

predicate ust_404() = (ust_400 and ust_403)

predicate ust_406() = (ust_404 and smt2_single_eq(b1086, ust_228))

predicate ust_407() = (ust_178 and ust_406)

logic double_of_single__t_3__t_17 : double

axiom eq_244 : single_to_double_cast(b1190, double_of_single__t_3__t_17)

logic ust_408 : double

axiom eq_245 : single_to_double_cast(b1190, ust_408)

predicate ust_410() = (not le1(b230, ust_408))

predicate ust_411() = (ust_407 and ust_410)

predicate ust_413() = (ust_411 and smt2_single_eq(b994, ust_227))

predicate ust_414() = (ust_175 and ust_413)

predicate ust_416() = (not le(b200, ust_168))

predicate ust_417() = (ust_414 and ust_416)

logic s_neg__t_168 : single

axiom eq_246 : neg_post(ust_168, s_neg__t_168)

logic ust_418 : single

axiom eq_247 : neg_post(ust_168, ust_418)

predicate ust_420() = (ust_417 and smt2_single_eq(b1095, ust_418))

predicate ust_421() = (ust_171 and ust_420)

predicate ust_423() = (not le(b200, ust_160))

predicate ust_424() = (ust_421 and ust_423)

logic s_neg__t_160 : single

axiom eq_248 : neg_post(ust_160, s_neg__t_160)

logic ust_425 : single

axiom eq_249 : neg_post(ust_160, ust_425)

predicate ust_427() = (ust_424 and smt2_single_eq(b1100, ust_425))

predicate ust_428() = (ust_163 and ust_427)

predicate ust_430() = (not le(b200, ust_152))

predicate ust_431() = (ust_428 and ust_430)

logic s_neg__t_152 : single

axiom eq_250 : neg_post(ust_152, s_neg__t_152)

logic ust_432 : single

axiom eq_251 : neg_post(ust_152, ust_432)

predicate ust_434() = (ust_431 and smt2_single_eq(b1105, ust_432))

predicate ust_435() = (ust_155 and ust_434)

predicate ust_437() = (not le(b200, ust_144))

predicate ust_438() = (ust_435 and ust_437)

logic s_neg__t_144 : single

axiom eq_252 : neg_post(ust_144, s_neg__t_144)

logic ust_439 : single

axiom eq_253 : neg_post(ust_144, ust_439)

predicate ust_441() = (ust_438 and smt2_single_eq(b1110, ust_439))

predicate ust_442() = (ust_147 and ust_441)

predicate ust_444() = (not le(b200, ust_136))

predicate ust_445() = (ust_442 and ust_444)

logic s_neg__t_136 : single

axiom eq_254 : neg_post(ust_136, s_neg__t_136)

logic ust_446 : single

axiom eq_255 : neg_post(ust_136, ust_446)

predicate ust_448() = (ust_445 and smt2_single_eq(b1115, ust_446))

predicate ust_449() = (ust_139 and ust_448)

predicate ust_451() = (not le(b200, ust_128))

predicate ust_452() = (ust_449 and ust_451)

logic s_neg__t_128 : single

axiom eq_256 : neg_post(ust_128, s_neg__t_128)

logic ust_453 : single

axiom eq_257 : neg_post(ust_128, ust_453)

predicate ust_455() = (ust_452 and smt2_single_eq(b1120, ust_453))

predicate ust_456() = (ust_131 and ust_455)

predicate ust_458() = (not le(b200, ust_120))

predicate ust_459() = (ust_456 and ust_458)

logic s_neg__t_120 : single

axiom eq_258 : neg_post(ust_120, s_neg__t_120)

logic ust_460 : single

axiom eq_259 : neg_post(ust_120, ust_460)

predicate ust_462() = (ust_459 and smt2_single_eq(b1125, ust_460))

predicate ust_463() = (ust_123 and ust_462)

predicate ust_465() = (not le(b200, ust_112))

predicate ust_466() = (ust_463 and ust_465)

logic s_neg__t_112 : single

axiom eq_260 : neg_post(ust_112, s_neg__t_112)

logic ust_467 : single

axiom eq_261 : neg_post(ust_112, ust_467)

predicate ust_469() = (ust_466 and smt2_single_eq(b1130, ust_467))

predicate ust_470() = (ust_115 and ust_469)

predicate ust_472() = (not le(b200, ust_104))

predicate ust_473() = (ust_470 and ust_472)

logic s_neg__t_104 : single

axiom eq_262 : neg_post(ust_104, s_neg__t_104)

logic ust_474 : single

axiom eq_263 : neg_post(ust_104, ust_474)

predicate ust_476() = (ust_473 and smt2_single_eq(b1135, ust_474))

predicate ust_477() = (ust_107 and ust_476)

predicate ust_479() = (not le(b200, ust_96))

predicate ust_480() = (ust_477 and ust_479)

logic s_neg__t_96 : single

axiom eq_264 : neg_post(ust_96, s_neg__t_96)

logic ust_481 : single

axiom eq_265 : neg_post(ust_96, ust_481)

predicate ust_483() = (ust_480 and smt2_single_eq(b1140, ust_481))

predicate ust_484() = (ust_99 and ust_483)

predicate ust_486() = (not le(b200, ust_88))

predicate ust_487() = (ust_484 and ust_486)

logic s_neg__t_88 : single

axiom eq_266 : neg_post(ust_88, s_neg__t_88)

logic ust_488 : single

axiom eq_267 : neg_post(ust_88, ust_488)

predicate ust_490() = (ust_487 and smt2_single_eq(b1145, ust_488))

predicate ust_491() = (ust_91 and ust_490)

predicate ust_493() = (not le(b200, ust_80))

predicate ust_494() = (ust_491 and ust_493)

logic s_neg__t_80 : single

axiom eq_268 : neg_post(ust_80, s_neg__t_80)

logic ust_495 : single

axiom eq_269 : neg_post(ust_80, ust_495)

predicate ust_497() = (ust_494 and smt2_single_eq(b1150, ust_495))

predicate ust_498() = (ust_83 and ust_497)

predicate ust_500() = (not le(b200, ust_72))

predicate ust_501() = (ust_498 and ust_500)

logic s_neg__t_72 : single

axiom eq_270 : neg_post(ust_72, s_neg__t_72)

logic ust_502 : single

axiom eq_271 : neg_post(ust_72, ust_502)

predicate ust_504() = (ust_501 and smt2_single_eq(b1155, ust_502))

predicate ust_505() = (ust_75 and ust_504)

predicate ust_507() = (not le(b200, ust_64))

predicate ust_508() = (ust_505 and ust_507)

logic s_neg__t_64 : single

axiom eq_272 : neg_post(ust_64, s_neg__t_64)

logic ust_509 : single

axiom eq_273 : neg_post(ust_64, ust_509)

predicate ust_511() = (ust_508 and smt2_single_eq(b1160, ust_509))

predicate ust_512() = (ust_67 and ust_511)

predicate ust_514() = (not le(b200, ust_56))

predicate ust_515() = (ust_512 and ust_514)

logic s_neg__t_56 : single

axiom eq_274 : neg_post(ust_56, s_neg__t_56)

logic ust_516 : single

axiom eq_275 : neg_post(ust_56, ust_516)

predicate ust_518() = (ust_515 and smt2_single_eq(b1165, ust_516))

predicate ust_519() = (ust_59 and ust_518)

predicate ust_521() = (not le(b200, ust_48))

predicate ust_522() = (ust_519 and ust_521)

logic s_neg__t_48 : single

axiom eq_276 : neg_post(ust_48, s_neg__t_48)

logic ust_523 : single

axiom eq_277 : neg_post(ust_48, ust_523)

predicate ust_525() = (ust_522 and smt2_single_eq(b1170, ust_523))

predicate ust_526() = (ust_51 and ust_525)

predicate ust_528() = (not le(b200, ust_40))

predicate ust_529() = (ust_526 and ust_528)

logic s_neg__t_40 : single

axiom eq_278 : neg_post(ust_40, s_neg__t_40)

logic ust_530 : single

axiom eq_279 : neg_post(ust_40, ust_530)

predicate ust_532() = (ust_529 and smt2_single_eq(b1175, ust_530))

predicate ust_533() = (ust_43 and ust_532)

predicate ust_535() = (not le(b200, ust_32))

predicate ust_536() = (ust_533 and ust_535)

logic s_neg__t_32 : single

axiom eq_280 : neg_post(ust_32, s_neg__t_32)

logic ust_537 : single

axiom eq_281 : neg_post(ust_32, ust_537)

predicate ust_539() = (ust_536 and smt2_single_eq(b1180, ust_537))

predicate ust_540() = (ust_35 and ust_539)

predicate ust_542() = (not le(b200, ust_24))

predicate ust_543() = (ust_540 and ust_542)

logic s_neg__t_24 : single

axiom eq_282 : neg_post(ust_24, s_neg__t_24)

logic ust_544 : single

axiom eq_283 : neg_post(ust_24, ust_544)

predicate ust_546() = (ust_543 and smt2_single_eq(b1185, ust_544))

predicate ust_547() = (ust_27 and ust_546)

predicate ust_549() = (not le(b200, ust_16))

predicate ust_550() = (ust_547 and ust_549)

logic s_neg__t_16 : single

axiom eq_284 : neg_post(ust_16, s_neg__t_16)

logic ust_551 : single

axiom eq_285 : neg_post(ust_16, ust_551)

predicate ust_553() = (ust_550 and smt2_single_eq(b1190, ust_551))

logic double_of_single__t_3__t_169 : double

axiom eq_286 : single_to_double_cast(b1095, double_of_single__t_3__t_169)

logic ust_554 : double

axiom eq_287 : single_to_double_cast(b1095, ust_554)

predicate ust_556() = (not le1(b230, ust_554))

predicate ust_557() = (ust_553 and ust_556)

predicate ust_558() = (ust_19 and ust_557)

axiom ax_1 : ust_558

goal g_1 : false
