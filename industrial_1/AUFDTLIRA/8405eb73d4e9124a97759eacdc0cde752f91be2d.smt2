;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic AUFDTLIRA)

(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-fun cat_2 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(define-fun spoon_7 ((kitten_5 Int)) Bool (or (= kitten_5 0) (= kitten_5 1)))
(declare-fun spoon_8 (Bool) potato_5)
(declare-fun spoon_9 (potato_5) Bool)
(declare-fun spoon_10 (potato_5) Bool)
(declare-sort potato_10 0)
(declare-fun spoon_11 (potato_10) Int)
(assert (forall ((kitten_6 potato_10)) (let ((_let_0 (spoon_11 kitten_6))) (and (<= 0 _let_0) (<= _let_0 999))) ))
(define-fun spoon_12 ((kitten_7 Int)) Bool (and (<= 0 kitten_7) (<= kitten_7 999)))
(declare-fun spoon_13 (Int) potato_5)
(declare-fun spoon_14 (potato_5) Bool)
(declare-fun spoon_15 (potato_5) Int)
(declare-fun spoon_16 (potato_10 potato_10) Bool)
(declare-fun cat_17 () potato_10)
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a potato_10)))))

(define-fun spoon_18 ((kitten_8 potato_11)) potato_10 (get_potato_11_a kitten_8))
(define-fun spoon_19 ((kitten_9 potato_10)) Int (spoon_11 kitten_9))
(declare-fun spoon_20 (Int) potato_10)
(assert (forall ((kitten_10 potato_10)) (! (= (spoon_20 (spoon_19 kitten_10)) kitten_10) :pattern ((spoon_19 kitten_10)))))
(assert (forall ((kitten_11 potato_10)) (! (spoon_12 (spoon_19 kitten_11)) :pattern ((spoon_19 kitten_11)))))
(assert (forall ((kitten_12 Int)) (! (=> (spoon_12 kitten_12) (= (spoon_19 (spoon_20 kitten_12)) kitten_12)) :pattern ((spoon_19 (spoon_20 kitten_12))))))
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a Bool) (get_potato_12_b potato_10)))))

(define-fun spoon_21 ((kitten_13 potato_12)) Bool (get_potato_12_a kitten_13))
(define-fun spoon_22 ((kitten_14 potato_12)) potato_10 (get_potato_12_b kitten_14))
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_23 ((kitten_15 potato_13)) potato_12 (get_potato_13_a kitten_15))
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_12)))))

(define-fun spoon_24 ((kitten_16 potato_14)) potato_12 (get_potato_14_a kitten_16))
(define-fun spoon_25 ((kitten_17 potato_14) (kitten_18 potato_14)) Bool (let ((_let_0 (get_potato_14_a kitten_17))) (let ((_let_1 (get_potato_14_a kitten_18))) (ite (and (= (get_potato_12_a _let_0) (get_potato_12_a _let_1)) (= (spoon_19 (get_potato_12_b _let_0)) (spoon_19 (get_potato_12_b _let_1)))) true false))))
(declare-fun cat_26 () Int)
(declare-fun spoon_27 (potato_14) Int)
(declare-fun cat_28 () Int)
(declare-fun spoon_29 (potato_14) Int)
(assert (<= 0 cat_26))
(assert (forall ((kitten_19 potato_14)) (<= 0 (spoon_27 kitten_19)) ))
(assert (<= 0 cat_28))
(assert (forall ((kitten_20 potato_14)) (<= 0 (spoon_29 kitten_20)) ))
(declare-fun cat_30 () Int)
(declare-fun cat_31 () Int)
(declare-fun cat_32 () Int)
(assert (<= 0 cat_30))
(assert (< cat_30 cat_31))
(assert (<= 0 cat_32))
(declare-fun cat_33 () Int)
(declare-fun cat_34 () Int)
(declare-fun cat_35 () Int)
(assert (<= 0 cat_33))
(assert (< cat_33 cat_34))
(assert (<= 0 cat_35))
(declare-fun spoon_36 (potato_14 potato_14) Bool)
(declare-fun cat_37 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_38 ((kitten_21 potato_15)) potato_14 (get_potato_15_a kitten_21))
(declare-fun cat_39 () potato_14)
(declare-fun cat_40 () Int)
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a (Array Int Bool))))))

(declare-fun spoon_41 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((kitten_22 (Array Int Bool))) (forall ((kitten_23 Int)) (! (= (spoon_41 kitten_22 kitten_23 kitten_23) kitten_22) :pattern ((spoon_41 kitten_22 kitten_23 kitten_23)))) ))
(assert (forall ((kitten_24 (Array Int Bool))) (forall ((kitten_25 Int)) (forall ((kitten_26 Int)) (forall ((kitten_27 Int)) (! (= (select (spoon_41 kitten_24 kitten_25 kitten_26) kitten_27) (select kitten_24 (- kitten_27 (- kitten_26 kitten_25)))) :pattern ((select (spoon_41 kitten_24 kitten_25 kitten_26) kitten_27)))) ) ) ))
(define-fun spoon_42 ((kitten_28 (Array Int Bool)) (kitten_29 Int) (kitten_30 Int) (kitten_31 (Array Int Bool)) (kitten_32 Int) (kitten_33 Int)) Bool (ite (and (ite (<= kitten_29 kitten_30) (and (<= kitten_32 kitten_33) (= (- kitten_30 kitten_29) (- kitten_33 kitten_32))) (< kitten_33 kitten_32)) (forall ((kitten_34 Int)) (=> (and (<= kitten_29 kitten_34) (<= kitten_34 kitten_30)) (= (select kitten_28 kitten_34) (select kitten_31 (+ (- kitten_32 kitten_29) kitten_34)))) )) true false))
(assert (forall ((kitten_35 (Array Int Bool)) (kitten_36 (Array Int Bool))) (forall ((kitten_37 Int) (kitten_38 Int) (kitten_39 Int) (kitten_40 Int)) (=> (= (spoon_42 kitten_36 kitten_39 kitten_40 kitten_35 kitten_37 kitten_38) true) (and (ite (<= kitten_37 kitten_38) (and (<= kitten_39 kitten_40) (= (- kitten_38 kitten_37) (- kitten_40 kitten_39))) (< kitten_40 kitten_39)) (forall ((kitten_41 Int)) (=> (and (<= kitten_37 kitten_41) (<= kitten_41 kitten_38)) (= (select kitten_35 kitten_41) (select kitten_36 (+ (- kitten_39 kitten_37) kitten_41)))) ))) ) ))
(declare-fun cat_43 () (Array Int Bool))
(declare-fun cat_44 () Int)
(declare-fun cat_45 () Int)
(declare-fun cat_46 () Int)
(define-fun spoon_47 ((kitten_42 Int) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_43 true) (<= 0 999)) (spoon_12 kitten_42)))
(declare-fun cat_48 () potato_10)
(assert (= (spoon_11 cat_48) 999))
(assert (= cat_39 (mk_potato_14 (mk_potato_12 (distinct 0 0) cat_48))))
(declare-fun cat_49 () Bool)
(declare-fun cat_50 () potato_10)
(declare-fun cat_51 () Int)
(assert (= (mk_potato_14 (mk_potato_12 (distinct 0 0) cat_48)) cat_39))
(assert (= (mk_potato_12 cat_49 cat_50) (get_potato_14_a cat_39)))
(assert (= cat_51 0))
(assert (<= 0 cat_51))
(assert (<= cat_51 999))
(assert (not (not (= cat_49 true))))
(check-sat)
(exit)
