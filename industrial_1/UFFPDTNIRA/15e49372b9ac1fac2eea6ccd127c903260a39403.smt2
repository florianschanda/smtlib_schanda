(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_23 ((kitten_23 Int)) Bool (or (= kitten_23 0) (= kitten_23 1)))
(declare-fun spoon_24 (Bool) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_27 (potato_11 potato_11) Bool)
(declare-fun spoon_28 (Float32) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Float32)
(declare-const cat_31 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_32 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(declare-sort potato_13 0)
(define-fun spoon_33 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_34 (potato_13 potato_13) Bool)
(declare-fun spoon_35 (Float32) potato_5)
(declare-fun spoon_36 (potato_5) Bool)
(declare-fun spoon_37 (potato_5) Float32)
(declare-const cat_38 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_39 ((kitten_26 potato_14)) potato_13 (get_potato_14_a kitten_26))
(declare-fun spoon_40 (potato_13) Float32)
(declare-fun spoon_41 (Float32) potato_13)
(assert (forall ((kitten_27 potato_13)) (! (= (spoon_41 (spoon_40 kitten_27)) kitten_27) :pattern ((spoon_40 kitten_27)))))
(assert (forall ((kitten_28 potato_13)) (! (spoon_33 (spoon_40 kitten_28)) :pattern ((spoon_40 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_33 kitten_29) (= (spoon_40 (spoon_41 kitten_29)) kitten_29)) :pattern ((spoon_40 (spoon_41 kitten_29))))))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))
(define-fun spoon_42 ((kitten_30 potato_15)) potato_13 (get_potato_15_a kitten_30))
(define-fun spoon_43 ((kitten_31 potato_15)) potato_13 (get_potato_15_b kitten_31))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_44 ((kitten_32 potato_16)) potato_15 (get_potato_16_a kitten_32))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15)))))
(define-fun spoon_45 ((kitten_33 potato_17)) potato_15 (get_potato_17_a kitten_33))
(define-fun spoon_46 ((kitten_34 potato_17) (kitten_35 potato_17)) Bool (ite (and (= (spoon_40 (get_potato_15_a (get_potato_17_a kitten_34))) (spoon_40 (get_potato_15_a (get_potato_17_a kitten_35)))) (= (spoon_40 (get_potato_15_b (get_potato_17_a kitten_34))) (spoon_40 (get_potato_15_b (get_potato_17_a kitten_35))))) true false))
(declare-const cat_47 Int)
(declare-fun spoon_48 (potato_17) Int)
(declare-const cat_49 Int)
(declare-fun spoon_50 (potato_17) Int)
(assert (<= 0 cat_47))
(assert (forall ((kitten_36 potato_17)) (<= 0 (spoon_48 kitten_36))))
(assert (<= 0 cat_49))
(assert (forall ((kitten_37 potato_17)) (<= 0 (spoon_50 kitten_37))))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(assert (<= 0 cat_54))
(assert (< cat_54 cat_55))
(assert (<= 0 cat_56))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-const cat_58 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_59 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(declare-sort potato_19 0)
(define-fun spoon_60 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_39) (fp.leq kitten_39 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_61 (potato_19 potato_19) Bool)
(declare-fun spoon_62 (Float32) potato_5)
(declare-fun spoon_63 (potato_5) Bool)
(declare-fun spoon_64 (potato_5) Float32)
(declare-const cat_65 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_66 ((kitten_40 potato_20)) potato_19 (get_potato_20_a kitten_40))
(define-fun spoon_67 ((kitten_41 Float32) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_42 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_60 kitten_41)))
(declare-sort potato_21 0)
(define-fun spoon_68 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_46) (fp.leq kitten_46 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_69 (potato_21 potato_21) Bool)
(declare-fun spoon_70 (Float32) potato_5)
(declare-fun spoon_71 (potato_5) Bool)
(declare-fun spoon_72 (potato_5) Float32)
(declare-const cat_73 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_74 ((kitten_47 potato_22)) potato_21 (get_potato_22_a kitten_47))
(declare-fun spoon_75 (potato_21) Float32)
(declare-fun spoon_76 (Float32) potato_21)
(assert (forall ((kitten_48 potato_21)) (! (= (spoon_76 (spoon_75 kitten_48)) kitten_48) :pattern ((spoon_75 kitten_48)))))
(assert (forall ((kitten_49 potato_21)) (! (spoon_68 (spoon_75 kitten_49)) :pattern ((spoon_75 kitten_49)))))
(assert (forall ((kitten_50 Float32)) (! (=> (spoon_68 kitten_50) (= (spoon_75 (spoon_76 kitten_50)) kitten_50)) :pattern ((spoon_75 (spoon_76 kitten_50))))))
(declare-const cat_77 potato_17)
(declare-const cat_78 Int)
(declare-const cat_79 potato_17)
(declare-const cat_80 Int)
(declare-const cat_81 potato_17)
(declare-const cat_82 Int)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21) (get_potato_23_b potato_21)))))
(define-fun spoon_83 ((kitten_51 potato_23)) potato_21 (get_potato_23_a kitten_51))
(define-fun spoon_84 ((kitten_52 potato_23)) potato_21 (get_potato_23_b kitten_52))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_85 ((kitten_53 potato_24)) potato_23 (get_potato_24_a kitten_53))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_23)))))
(define-fun spoon_86 ((kitten_54 potato_25)) potato_23 (get_potato_25_a kitten_54))
(define-fun spoon_87 ((kitten_55 potato_25) (kitten_56 potato_25)) Bool (ite (and (= (spoon_75 (get_potato_23_a (get_potato_25_a kitten_55))) (spoon_75 (get_potato_23_a (get_potato_25_a kitten_56)))) (= (spoon_75 (get_potato_23_b (get_potato_25_a kitten_55))) (spoon_75 (get_potato_23_b (get_potato_25_a kitten_56))))) true false))
(declare-const cat_88 Int)
(declare-fun spoon_89 (potato_25) Int)
(declare-const cat_90 Int)
(declare-fun spoon_91 (potato_25) Int)
(assert (<= 0 cat_88))
(assert (forall ((kitten_57 potato_25)) (<= 0 (spoon_89 kitten_57))))
(assert (<= 0 cat_90))
(assert (forall ((kitten_58 potato_25)) (<= 0 (spoon_91 kitten_58))))
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(assert (<= 0 cat_92))
(assert (< cat_92 cat_93))
(assert (<= 0 cat_94))
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(declare-const cat_97 Int)
(assert (<= 0 cat_95))
(assert (< cat_95 cat_96))
(assert (<= 0 cat_97))
(declare-fun spoon_98 (potato_25 potato_25) Bool)
(declare-const cat_99 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_100 ((kitten_59 potato_26)) potato_25 (get_potato_26_a kitten_59))
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(define-fun spoon_109 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_60)))
(define-fun spoon_110 ((kitten_65 Float32) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool)) Bool (=> (or (= kitten_66 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_68 kitten_65)))
(define-fun spoon_111 ((kitten_70 Float32) (kitten_71 Bool) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_71 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_33 kitten_70)))
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(assert (spoon_60 cat_112))
(assert (spoon_60 cat_113))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_112))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_113))
(assert (not (fp.lt cat_113 cat_112)))
(assert (not (not (fp.isZero cat_113))))
(check-sat)
(exit)
