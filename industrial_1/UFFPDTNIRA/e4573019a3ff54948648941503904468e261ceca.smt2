(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_23 ((kitten_23 Int)) Bool (or (= kitten_23 0) (= kitten_23 1)))
(declare-fun spoon_24 (Bool) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_27 (potato_11 potato_11) Bool)
(declare-fun spoon_28 (Float32) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Float32)
(declare-const cat_31 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_32 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(define-fun spoon_33 ((kitten_25 Float32) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_26 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_25)))
(declare-fun spoon_34 (Float32) Float32)
(declare-fun spoon_35 (Float32 Float32) Bool)
(declare-sort potato_13 0)
(define-fun spoon_36 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_30) (fp.leq kitten_30 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_37 (potato_13 potato_13) Bool)
(declare-fun spoon_38 (Float32) potato_5)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (potato_5) Float32)
(declare-const cat_41 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_42 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(define-fun spoon_43 ((kitten_32 Float32) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_36 kitten_32)))
(declare-sort potato_15 0)
(define-fun spoon_44 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_37) (fp.leq kitten_37 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_45 (potato_15 potato_15) Bool)
(declare-fun spoon_46 (Float32) potato_5)
(declare-fun spoon_47 (potato_5) Bool)
(declare-fun spoon_48 (potato_5) Float32)
(declare-const cat_49 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_50 ((kitten_38 potato_16)) potato_15 (get_potato_16_a kitten_38))
(define-fun spoon_51 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_44 kitten_39)))
(assert (forall ((kitten_44 Float32)) (! (=> (spoon_51 kitten_44 true true true true) (spoon_43 (spoon_34 kitten_44) true false true true)) :pattern ((spoon_34 kitten_44)))))
(declare-sort potato_17 0)
(define-fun spoon_52 ((kitten_45 Float32)) Bool (and (spoon_1 kitten_45) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_45) (fp.leq kitten_45 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_53 (potato_17 potato_17) Bool)
(declare-fun spoon_54 (Float32) potato_5)
(declare-fun spoon_55 (potato_5) Bool)
(declare-fun spoon_56 (potato_5) Float32)
(declare-const cat_57 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_58 ((kitten_46 potato_18)) potato_17 (get_potato_18_a kitten_46))
(declare-fun spoon_59 (potato_17) Float32)
(declare-fun spoon_60 (Float32) potato_17)
(assert (forall ((kitten_47 potato_17)) (! (= (spoon_60 (spoon_59 kitten_47)) kitten_47) :pattern ((spoon_59 kitten_47)))))
(assert (forall ((kitten_48 potato_17)) (! (spoon_52 (spoon_59 kitten_48)) :pattern ((spoon_59 kitten_48)))))
(assert (forall ((kitten_49 Float32)) (! (=> (spoon_52 kitten_49) (= (spoon_59 (spoon_60 kitten_49)) kitten_49)) :pattern ((spoon_59 (spoon_60 kitten_49))))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_17) (get_potato_19_b potato_17)))))
(define-fun spoon_61 ((kitten_50 potato_19)) potato_17 (get_potato_19_a kitten_50))
(define-fun spoon_62 ((kitten_51 potato_19)) potato_17 (get_potato_19_b kitten_51))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_63 ((kitten_52 potato_20)) potato_19 (get_potato_20_a kitten_52))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_19)))))
(define-fun spoon_64 ((kitten_53 potato_21)) potato_19 (get_potato_21_a kitten_53))
(define-fun spoon_65 ((kitten_54 potato_21) (kitten_55 potato_21)) Bool (ite (and (= (spoon_59 (get_potato_19_a (get_potato_21_a kitten_54))) (spoon_59 (get_potato_19_a (get_potato_21_a kitten_55)))) (= (spoon_59 (get_potato_19_b (get_potato_21_a kitten_54))) (spoon_59 (get_potato_19_b (get_potato_21_a kitten_55))))) true false))
(declare-const cat_66 Int)
(declare-fun spoon_67 (potato_21) Int)
(declare-const cat_68 Int)
(declare-fun spoon_69 (potato_21) Int)
(assert (<= 0 cat_66))
(assert (forall ((kitten_56 potato_21)) (<= 0 (spoon_67 kitten_56))))
(assert (<= 0 cat_68))
(assert (forall ((kitten_57 potato_21)) (<= 0 (spoon_69 kitten_57))))
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(declare-const cat_72 Int)
(assert (<= 0 cat_70))
(assert (< cat_70 cat_71))
(assert (<= 0 cat_72))
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(assert (<= 0 cat_73))
(assert (< cat_73 cat_74))
(assert (<= 0 cat_75))
(declare-fun spoon_76 (potato_21 potato_21) Bool)
(declare-const cat_77 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_78 ((kitten_58 potato_22)) potato_21 (get_potato_22_a kitten_58))
(declare-fun spoon_79 (potato_21 potato_21) Float32)
(declare-fun spoon_80 (Float32 potato_21 potato_21) Bool)
(declare-sort potato_23 0)
(define-fun spoon_81 ((kitten_59 Float32)) Bool (and (spoon_1 kitten_59) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_59) (fp.leq kitten_59 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_82 (potato_23 potato_23) Bool)
(declare-fun spoon_83 (Float32) potato_5)
(declare-fun spoon_84 (potato_5) Bool)
(declare-fun spoon_85 (potato_5) Float32)
(declare-const cat_86 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_87 ((kitten_60 potato_24)) potato_23 (get_potato_24_a kitten_60))
(define-fun spoon_88 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_81 kitten_61)))
(assert (forall ((kitten_66 potato_21) (kitten_67 potato_21)) (! (spoon_88 (spoon_79 kitten_66 kitten_67) true false true true) :pattern ((spoon_79 kitten_66 kitten_67)))))
(declare-sort potato_25 0)
(define-fun spoon_89 ((kitten_68 Float32)) Bool (and (spoon_1 kitten_68) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_68) (fp.leq kitten_68 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_90 (potato_25 potato_25) Bool)
(declare-fun spoon_91 (Float32) potato_5)
(declare-fun spoon_92 (potato_5) Bool)
(declare-fun spoon_93 (potato_5) Float32)
(declare-const cat_94 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_95 ((kitten_69 potato_26)) potato_25 (get_potato_26_a kitten_69))
(define-fun spoon_96 ((kitten_70 Float32) (kitten_71 Bool) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_71 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_89 kitten_70)))
(declare-sort potato_27 0)
(define-fun spoon_97 ((kitten_75 Float32)) Bool (and (spoon_1 kitten_75) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_75) (fp.leq kitten_75 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_98 (potato_27 potato_27) Bool)
(declare-fun spoon_99 (Float32) potato_5)
(declare-fun spoon_100 (potato_5) Bool)
(declare-fun spoon_101 (potato_5) Float32)
(declare-const cat_102 potato_27)
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_27)))))
(define-fun spoon_103 ((kitten_76 potato_28)) potato_27 (get_potato_28_a kitten_76))
(declare-fun spoon_104 (potato_27) Float32)
(declare-fun spoon_105 (Float32) potato_27)
(assert (forall ((kitten_77 potato_27)) (! (= (spoon_105 (spoon_104 kitten_77)) kitten_77) :pattern ((spoon_104 kitten_77)))))
(assert (forall ((kitten_78 potato_27)) (! (spoon_97 (spoon_104 kitten_78)) :pattern ((spoon_104 kitten_78)))))
(assert (forall ((kitten_79 Float32)) (! (=> (spoon_97 kitten_79) (= (spoon_104 (spoon_105 kitten_79)) kitten_79)) :pattern ((spoon_104 (spoon_105 kitten_79))))))
(declare-const cat_106 potato_21)
(declare-const cat_107 Int)
(declare-const cat_108 potato_21)
(declare-const cat_109 Int)
(declare-const cat_110 potato_21)
(declare-const cat_111 Int)
(declare-sort potato_29 0)
(define-fun spoon_112 ((kitten_80 Float32)) Bool (and (spoon_1 kitten_80) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_80) (fp.leq kitten_80 (fp #b0 #b10011010 #b00000000000000000000000)))))
(declare-fun spoon_113 (potato_29 potato_29) Bool)
(declare-fun spoon_114 (Float32) potato_5)
(declare-fun spoon_115 (potato_5) Bool)
(declare-fun spoon_116 (potato_5) Float32)
(declare-const cat_117 potato_29)
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_29)))))
(define-fun spoon_118 ((kitten_81 potato_30)) potato_29 (get_potato_30_a kitten_81))
(define-fun spoon_119 ((kitten_82 Float32) (kitten_83 Bool) (kitten_84 Bool) (kitten_85 Bool) (kitten_86 Bool)) Bool (=> (or (= kitten_83 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_112 kitten_82)))
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_27) (get_potato_31_b potato_27)))))
(define-fun spoon_120 ((kitten_87 potato_31)) potato_27 (get_potato_31_a kitten_87))
(define-fun spoon_121 ((kitten_88 potato_31)) potato_27 (get_potato_31_b kitten_88))
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_31)))))
(define-fun spoon_122 ((kitten_89 potato_32)) potato_31 (get_potato_32_a kitten_89))
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_31)))))
(define-fun spoon_123 ((kitten_90 potato_33)) potato_31 (get_potato_33_a kitten_90))
(define-fun spoon_124 ((kitten_91 potato_33) (kitten_92 potato_33)) Bool (ite (and (= (spoon_104 (get_potato_31_a (get_potato_33_a kitten_91))) (spoon_104 (get_potato_31_a (get_potato_33_a kitten_92)))) (= (spoon_104 (get_potato_31_b (get_potato_33_a kitten_91))) (spoon_104 (get_potato_31_b (get_potato_33_a kitten_92))))) true false))
(declare-const cat_125 Int)
(declare-fun spoon_126 (potato_33) Int)
(declare-const cat_127 Int)
(declare-fun spoon_128 (potato_33) Int)
(assert (<= 0 cat_125))
(assert (forall ((kitten_93 potato_33)) (<= 0 (spoon_126 kitten_93))))
(assert (<= 0 cat_127))
(assert (forall ((kitten_94 potato_33)) (<= 0 (spoon_128 kitten_94))))
(declare-const cat_129 Int)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(assert (<= 0 cat_129))
(assert (< cat_129 cat_130))
(assert (<= 0 cat_131))
(declare-const cat_132 Int)
(declare-const cat_133 Int)
(declare-const cat_134 Int)
(assert (<= 0 cat_132))
(assert (< cat_132 cat_133))
(assert (<= 0 cat_134))
(declare-fun spoon_135 (potato_33 potato_33) Bool)
(declare-const cat_136 potato_33)
(declare-datatypes () ((potato_34 (mk_potato_34 (get_potato_34_a potato_33)))))
(define-fun spoon_137 ((kitten_95 potato_34)) potato_33 (get_potato_34_a kitten_95))
(declare-const cat_138 Int)
(declare-const cat_139 Int)
(declare-const cat_140 Int)
(declare-const cat_141 Int)
(declare-const cat_142 Int)
(declare-const cat_143 Int)
(declare-const cat_144 Float32)
(declare-const cat_145 Int)
(declare-sort potato_35 0)
(define-fun spoon_146 ((kitten_96 Float32)) Bool (and (spoon_1 kitten_96) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) kitten_96) (fp.leq kitten_96 (fp #b0 #b01111111 #b00000000000000001010100)))))
(declare-fun spoon_147 (potato_35 potato_35) Bool)
(declare-fun spoon_148 (Float32) potato_5)
(declare-fun spoon_149 (potato_5) Bool)
(declare-fun spoon_150 (potato_5) Float32)
(declare-const cat_151 potato_35)
(declare-datatypes () ((potato_36 (mk_potato_36 (get_potato_36_a potato_35)))))
(define-fun spoon_152 ((kitten_97 potato_36)) potato_35 (get_potato_36_a kitten_97))
(define-fun spoon_153 ((kitten_98 Float32) (kitten_99 Bool) (kitten_100 Bool) (kitten_101 Bool) (kitten_102 Bool)) Bool (=> (or (= kitten_99 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100))) (spoon_146 kitten_98)))
(declare-const cat_154 Int)
(declare-const cat_155 Int)
(assert (= cat_144 (fp #b0 #b01101110 #b01001111100010110101100)))
(define-fun spoon_156 ((kitten_103 Float32) (kitten_104 Bool) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_104 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_97 kitten_103)))
(define-fun spoon_157 ((kitten_108 Float32) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_109 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_52 kitten_108)))
(declare-const cat_158 Float32)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 potato_27)
(declare-const cat_164 potato_27)
(declare-const cat_165 potato_27)
(declare-const cat_166 potato_27)
(declare-const cat_167 Float32)
(declare-const cat_168 Float32)
(declare-const cat_169 Float32)
(declare-const cat_170 Float32)
(declare-const cat_171 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_112 cat_158)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_81 cat_159)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_81 cat_160)))
(assert (= cat_169 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_89 cat_169))
(assert (spoon_1 cat_144))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100)) (spoon_146 cat_161)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_44 cat_162)))
(assert (= (spoon_104 cat_163) (fp.sub RNE (spoon_59 (get_potato_19_b (get_potato_21_a cat_106))) (spoon_59 (get_potato_19_b (get_potato_21_a cat_108))))))
(assert (= (spoon_104 cat_164) (fp.sub RNE (spoon_59 (get_potato_19_a (get_potato_21_a cat_106))) (spoon_59 (get_potato_19_a (get_potato_21_a cat_108))))))
(assert (= (spoon_104 cat_165) (fp.sub RNE (spoon_59 (get_potato_19_b (get_potato_21_a cat_110))) (spoon_59 (get_potato_19_b (get_potato_21_a cat_108))))))
(assert (= (spoon_104 cat_166) (fp.sub RNE (spoon_59 (get_potato_19_a (get_potato_21_a cat_110))) (spoon_59 (get_potato_19_a (get_potato_21_a cat_108))))))
(assert (= cat_167 (spoon_79 cat_108 cat_106)))
(assert (spoon_81 cat_167))
(assert (= cat_170 cat_167))
(assert (= cat_168 (spoon_79 cat_108 cat_110)))
(assert (spoon_81 cat_168))
(assert (= cat_171 cat_168))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_170))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_171))
(assert (not (not (fp.isZero (fp.mul RNE cat_170 cat_171)))))
(check-sat)
(exit)
