;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(declare-fun spoon_23 ((_ FloatingPoint 8 24)) (_ FloatingPoint 8 24))
(declare-fun spoon_24 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_23 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_23) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_23) (fp.leq kitten_23 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23))))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_30 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_31 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(define-fun spoon_32 ((kitten_25 (_ FloatingPoint 8 24)) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_26 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (spoon_25 kitten_25)))
(declare-sort potato_13 0)
(define-fun spoon_33 ((kitten_30 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_30) (fp.leq kitten_30 (fp (_ bv0 1) (_ bv191 8) (_ bv48 23))))))
(declare-fun spoon_34 (potato_13 potato_13) Bool)
(declare-fun spoon_35 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_36 (potato_5) Bool)
(declare-fun spoon_37 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_38 () potato_13)
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_39 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(define-fun spoon_40 ((kitten_32 (_ FloatingPoint 8 24)) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv191 8) (_ bv48 23)))) (spoon_33 kitten_32)))
(assert (forall ((kitten_37 (_ FloatingPoint 8 24))) (! (=> (spoon_32 kitten_37 true true true true) (spoon_40 (spoon_23 kitten_37) true false true true)) :pattern ((spoon_23 kitten_37)))))
(declare-sort potato_15 0)
(define-fun spoon_41 ((kitten_38 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_38) (and (fp.leq (fp.neg _let_0) kitten_38) (fp.leq kitten_38 _let_0)))))
(declare-fun spoon_42 (potato_15 potato_15) Bool)
(declare-fun spoon_43 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_46 () potato_15)
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_47 ((kitten_39 potato_16)) potato_15 (get_potato_16_a kitten_39))
(declare-fun spoon_48 (potato_15) (_ FloatingPoint 8 24))
(declare-fun spoon_49 ((_ FloatingPoint 8 24)) potato_15)
(assert (forall ((kitten_40 potato_15)) (! (= (spoon_49 (spoon_48 kitten_40)) kitten_40) :pattern ((spoon_48 kitten_40)))))
(assert (forall ((kitten_41 potato_15)) (! (spoon_41 (spoon_48 kitten_41)) :pattern ((spoon_48 kitten_41)))))
(assert (forall ((kitten_42 (_ FloatingPoint 8 24))) (! (=> (spoon_41 kitten_42) (= (spoon_48 (spoon_49 kitten_42)) kitten_42)) :pattern ((spoon_48 (spoon_49 kitten_42))))))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_15) (get_potato_17_b potato_15)))))

(define-fun spoon_50 ((kitten_43 potato_17)) potato_15 (get_potato_17_a kitten_43))
(define-fun spoon_51 ((kitten_44 potato_17)) potato_15 (get_potato_17_b kitten_44))
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_52 ((kitten_45 potato_18)) potato_17 (get_potato_18_a kitten_45))
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a potato_17)))))

(define-fun spoon_53 ((kitten_46 potato_19)) potato_17 (get_potato_19_a kitten_46))
(define-fun spoon_54 ((kitten_47 potato_19) (kitten_48 potato_19)) Bool (let ((_let_0 (get_potato_19_a kitten_47))) (let ((_let_1 (get_potato_19_a kitten_48))) (ite (and (= (spoon_48 (get_potato_17_a _let_0)) (spoon_48 (get_potato_17_a _let_1))) (= (spoon_48 (get_potato_17_b _let_0)) (spoon_48 (get_potato_17_b _let_1)))) true false))))
(declare-fun cat_55 () Int)
(declare-fun spoon_56 (potato_19) Int)
(declare-fun cat_57 () Int)
(declare-fun spoon_58 (potato_19) Int)
(assert (<= 0 cat_55))
(assert (forall ((kitten_49 potato_19)) (<= 0 (spoon_56 kitten_49)) ))
(assert (<= 0 cat_57))
(assert (forall ((kitten_50 potato_19)) (<= 0 (spoon_58 kitten_50)) ))
(declare-fun cat_59 () Int)
(declare-fun cat_60 () Int)
(declare-fun cat_61 () Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-fun cat_62 () Int)
(declare-fun cat_63 () Int)
(declare-fun cat_64 () Int)
(assert (<= 0 cat_62))
(assert (< cat_62 cat_63))
(assert (<= 0 cat_64))
(declare-fun spoon_65 (potato_19 potato_19) Bool)
(declare-fun cat_66 () potato_19)
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_19)))))

(define-fun spoon_67 ((kitten_51 potato_20)) potato_19 (get_potato_20_a kitten_51))
(declare-fun spoon_68 (potato_19 potato_19) (_ FloatingPoint 8 24))
(declare-fun spoon_69 ((_ FloatingPoint 8 24) potato_19 potato_19) Bool)
(declare-sort potato_21 0)
(define-fun spoon_70 ((kitten_52 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_52) (fp.leq kitten_52 (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))))))
(declare-fun spoon_71 (potato_21 potato_21) Bool)
(declare-fun spoon_72 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_73 (potato_5) Bool)
(declare-fun spoon_74 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_75 () potato_21)
(declare-datatypes ((potato_22 0)) (((mk_potato_22 (get_potato_22_a potato_21)))))

(define-fun spoon_76 ((kitten_53 potato_22)) potato_21 (get_potato_22_a kitten_53))
(define-fun spoon_77 ((kitten_54 (_ FloatingPoint 8 24)) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23)))) (spoon_70 kitten_54)))
(assert (forall ((kitten_59 potato_19) (kitten_60 potato_19)) (! (spoon_77 (spoon_68 kitten_59 kitten_60) true false true true) :pattern ((spoon_68 kitten_59 kitten_60)))))
(declare-sort potato_23 0)
(define-fun spoon_78 ((kitten_61 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_61) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_61) (fp.leq kitten_61 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23))))))
(declare-fun spoon_79 (potato_23 potato_23) Bool)
(declare-fun spoon_80 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_81 (potato_5) Bool)
(declare-fun spoon_82 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_83 () potato_23)
(declare-datatypes ((potato_24 0)) (((mk_potato_24 (get_potato_24_a potato_23)))))

(define-fun spoon_84 ((kitten_62 potato_24)) potato_23 (get_potato_24_a kitten_62))
(define-fun spoon_85 ((kitten_63 (_ FloatingPoint 8 24)) (kitten_64 Bool) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_64 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (spoon_78 kitten_63)))
(declare-fun cat_86 () potato_19)
(declare-fun cat_87 () Int)
(declare-fun cat_88 () potato_19)
(declare-fun cat_89 () Int)
(declare-fun cat_90 () potato_19)
(declare-fun cat_91 () Int)
(declare-fun cat_92 () Int)
(declare-fun cat_93 () Int)
(declare-sort potato_25 0)
(declare-fun spoon_94 (potato_25 potato_25) Bool)
(declare-fun spoon_95 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_96 (potato_5) Bool)
(declare-fun spoon_97 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_98 () potato_25)
(declare-datatypes ((potato_26 0)) (((mk_potato_26 (get_potato_26_a potato_25)))))

(define-fun spoon_99 ((kitten_68 potato_26)) potato_25 (get_potato_26_a kitten_68))
(declare-sort potato_27 0)
(define-fun spoon_100 ((kitten_69 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv167 8) (_ bv6870219 23)))) (and (spoon_1 kitten_69) (and (fp.leq (fp.neg _let_0) kitten_69) (fp.leq kitten_69 _let_0)))))
(declare-fun spoon_101 (potato_27 potato_27) Bool)
(declare-fun spoon_102 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_105 () potato_27)
(declare-datatypes ((potato_28 0)) (((mk_potato_28 (get_potato_28_a potato_27)))))

(define-fun spoon_106 ((kitten_70 potato_28)) potato_27 (get_potato_28_a kitten_70))
(define-fun spoon_107 ((kitten_71 (_ FloatingPoint 8 24)) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv167 8) (_ bv6870219 23)))) (=> (or (= kitten_72 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_100 kitten_71))))
(declare-sort potato_29 0)
(define-fun spoon_108 ((kitten_76 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (and (spoon_1 kitten_76) (and (fp.leq (fp.neg _let_0) kitten_76) (fp.leq kitten_76 _let_0)))))
(declare-fun spoon_109 (potato_29 potato_29) Bool)
(declare-fun spoon_110 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_111 (potato_5) Bool)
(declare-fun spoon_112 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_113 () potato_29)
(declare-datatypes ((potato_30 0)) (((mk_potato_30 (get_potato_30_a potato_29)))))

(define-fun spoon_114 ((kitten_77 potato_30)) potato_29 (get_potato_30_a kitten_77))
(define-fun spoon_115 ((kitten_78 (_ FloatingPoint 8 24)) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (=> (or (= kitten_79 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_108 kitten_78))))
(declare-sort potato_31 0)
(define-fun spoon_116 ((kitten_83 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (and (spoon_1 kitten_83) (and (fp.leq (fp.neg _let_0) kitten_83) (fp.leq kitten_83 _let_0)))))
(declare-fun spoon_117 (potato_31 potato_31) Bool)
(declare-fun spoon_118 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_119 (potato_5) Bool)
(declare-fun spoon_120 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_121 () potato_31)
(declare-datatypes ((potato_32 0)) (((mk_potato_32 (get_potato_32_a potato_31)))))

(define-fun spoon_122 ((kitten_84 potato_32)) potato_31 (get_potato_32_a kitten_84))
(define-fun spoon_123 ((kitten_85 (_ FloatingPoint 8 24)) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool) (kitten_89 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (or (= kitten_86 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_116 kitten_85))))
(declare-fun cat_124 () Int)
(declare-fun cat_125 () Int)
(declare-fun cat_126 () Int)
(declare-fun cat_127 () Int)
(declare-fun cat_128 () Int)
(declare-fun cat_129 () Int)
(declare-fun cat_130 () Int)
(declare-fun cat_131 () Int)
(define-fun spoon_132 ((kitten_90 (_ FloatingPoint 8 24)) (kitten_91 Bool) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_91 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_41 kitten_90))))
(declare-fun cat_133 () (_ FloatingPoint 8 24))
(declare-fun cat_134 () (_ FloatingPoint 8 24))
(declare-fun cat_135 () (_ FloatingPoint 8 24))
(declare-fun cat_136 () (_ FloatingPoint 8 24))
(declare-fun cat_137 () (_ FloatingPoint 8 24))
(declare-fun cat_138 () (_ FloatingPoint 8 24))
(declare-fun cat_139 () (_ FloatingPoint 8 24))
(declare-fun cat_140 () (_ FloatingPoint 8 24))
(declare-fun cat_141 () (_ FloatingPoint 8 24))
(declare-fun cat_142 () (_ FloatingPoint 8 24))
(declare-fun cat_143 () (_ FloatingPoint 8 24))
(declare-fun cat_144 () (_ FloatingPoint 8 24))
(declare-fun cat_145 () (_ FloatingPoint 8 24))
(declare-fun cat_146 () (_ FloatingPoint 8 24))
(declare-fun cat_147 () (_ FloatingPoint 8 24))
(declare-fun cat_148 () (_ FloatingPoint 8 24))
(declare-fun cat_149 () (_ FloatingPoint 8 24))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv127 8) (_ bv0 23))) (spoon_78 cat_133)))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))) (spoon_70 cat_134)))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_116 cat_135))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_116 cat_136))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_108 cat_137))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_108 cat_138))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_108 cat_139))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv48892 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_108 cat_140))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv167 8) (_ bv6870219 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_100 cat_141))))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))) (spoon_70 cat_142)))
(assert (= cat_145 (fp.sub roundNearestTiesToEven (spoon_48 (get_potato_17_a (get_potato_19_a cat_90))) (spoon_48 (get_potato_17_a (get_potato_19_a cat_88))))))
(assert (= cat_146 (fp.sub roundNearestTiesToEven (spoon_48 (get_potato_17_b (get_potato_19_a cat_90))) (spoon_48 (get_potato_17_b (get_potato_19_a cat_88))))))
(assert (= cat_147 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven cat_145 cat_145) (fp.mul roundNearestTiesToEven cat_146 cat_146))))
(assert (not (fp.lt cat_147 (fp (_ bv0 1) (_ bv113 8) (_ bv5355287 23)))))
(assert (let ((_let_0 (get_potato_19_a cat_88))) (let ((_let_1 (get_potato_19_a cat_86))) (= cat_148 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven (spoon_48 (get_potato_17_a _let_1)) (spoon_48 (get_potato_17_a _let_0))) cat_145) (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven (spoon_48 (get_potato_17_b _let_1)) (spoon_48 (get_potato_17_b _let_0))) cat_146))))))
(assert (= cat_143 (fp.div roundNearestTiesToEven cat_148 cat_147)))
(assert (spoon_1 (fp.div roundNearestTiesToEven cat_148 cat_147)))
(assert (= cat_144 cat_143))
(assert (= cat_149 cat_144))
(assert (spoon_1 cat_143))
(assert (not (fp.leq cat_149 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)))))
(assert (not (fp.leq (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) cat_149)))
(assert (not (spoon_25 cat_147)))
(check-sat)
(exit)
