;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(declare-sort potato_11 0)
(declare-fun spoon_23 (potato_11 potato_11) Bool)
(declare-fun spoon_24 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_27 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_28 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(define-fun spoon_29 ((kitten_24 (_ FloatingPoint 8 24)) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (or (= kitten_25 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_1 kitten_24))))
(declare-sort potato_13 0)
(define-fun spoon_30 ((kitten_29 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_29) (and (fp.leq (fp.neg _let_0) kitten_29) (fp.leq kitten_29 _let_0)))))
(declare-fun spoon_31 (potato_13 potato_13) Bool)
(declare-fun spoon_32 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_33 (potato_5) Bool)
(declare-fun spoon_34 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_35 () potato_13)
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_36 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-fun spoon_37 (potato_13) (_ FloatingPoint 8 24))
(declare-fun spoon_38 ((_ FloatingPoint 8 24)) potato_13)
(assert (forall ((kitten_31 potato_13)) (! (= (spoon_38 (spoon_37 kitten_31)) kitten_31) :pattern ((spoon_37 kitten_31)))))
(assert (forall ((kitten_32 potato_13)) (! (spoon_30 (spoon_37 kitten_32)) :pattern ((spoon_37 kitten_32)))))
(assert (forall ((kitten_33 (_ FloatingPoint 8 24))) (! (=> (spoon_30 kitten_33) (= (spoon_37 (spoon_38 kitten_33)) kitten_33)) :pattern ((spoon_37 (spoon_38 kitten_33))))))
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))

(define-fun spoon_39 ((kitten_34 potato_15)) potato_13 (get_potato_15_a kitten_34))
(define-fun spoon_40 ((kitten_35 potato_15)) potato_13 (get_potato_15_b kitten_35))
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_41 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_15)))))

(define-fun spoon_42 ((kitten_37 potato_17)) potato_15 (get_potato_17_a kitten_37))
(define-fun spoon_43 ((kitten_38 potato_17) (kitten_39 potato_17)) Bool (let ((_let_0 (get_potato_17_a kitten_38))) (let ((_let_1 (get_potato_17_a kitten_39))) (ite (and (= (spoon_37 (get_potato_15_a _let_0)) (spoon_37 (get_potato_15_a _let_1))) (= (spoon_37 (get_potato_15_b _let_0)) (spoon_37 (get_potato_15_b _let_1)))) true false))))
(declare-fun cat_44 () Int)
(declare-fun spoon_45 (potato_17) Int)
(declare-fun cat_46 () Int)
(declare-fun spoon_47 (potato_17) Int)
(assert (<= 0 cat_44))
(assert (forall ((kitten_40 potato_17)) (<= 0 (spoon_45 kitten_40)) ))
(assert (<= 0 cat_46))
(assert (forall ((kitten_41 potato_17)) (<= 0 (spoon_47 kitten_41)) ))
(declare-fun cat_48 () Int)
(declare-fun cat_49 () Int)
(declare-fun cat_50 () Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-fun cat_51 () Int)
(declare-fun cat_52 () Int)
(declare-fun cat_53 () Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-fun spoon_54 (potato_17 potato_17) Bool)
(declare-fun cat_55 () potato_17)
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_56 ((kitten_42 potato_18)) potato_17 (get_potato_18_a kitten_42))
(declare-sort potato_19 0)
(define-fun spoon_57 ((kitten_43 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_43) (fp.leq kitten_43 (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))))))
(declare-fun spoon_58 (potato_19 potato_19) Bool)
(declare-fun spoon_59 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_60 (potato_5) Bool)
(declare-fun spoon_61 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_62 () potato_19)
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_19)))))

(define-fun spoon_63 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(declare-fun cat_64 () potato_17)
(declare-fun cat_65 () Int)
(declare-fun cat_66 () potato_17)
(declare-fun cat_67 () Int)
(declare-fun cat_68 () (_ FloatingPoint 8 24))
(declare-fun cat_69 () Int)
(declare-fun cat_70 () (_ FloatingPoint 8 24))
(declare-fun cat_71 () Int)
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven (spoon_37 (get_potato_15_a (get_potato_17_a cat_64))) (spoon_37 (get_potato_15_a (get_potato_17_a cat_66)))))) (= cat_68 (fp.mul roundNearestTiesToEven _let_0 _let_0))))
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven (spoon_37 (get_potato_15_b (get_potato_17_a cat_64))) (spoon_37 (get_potato_15_b (get_potato_17_a cat_66)))))) (= cat_70 (fp.mul roundNearestTiesToEven _let_0 _let_0))))
(define-fun spoon_72 ((kitten_45 (_ FloatingPoint 8 24)) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool) (kitten_49 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_46 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_30 kitten_45))))
(define-fun spoon_73 ((kitten_50 (_ FloatingPoint 8 24)) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23)))) (spoon_57 kitten_50)))
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven (spoon_37 (get_potato_15_a (get_potato_17_a cat_64))) (spoon_37 (get_potato_15_a (get_potato_17_a cat_66)))))) (not (spoon_1 (fp.mul roundNearestTiesToEven _let_0 _let_0)))))
(check-sat)
(exit)
