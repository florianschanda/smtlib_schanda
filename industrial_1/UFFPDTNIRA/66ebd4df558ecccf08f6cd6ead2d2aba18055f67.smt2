;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(define-fun spoon_23 ((kitten_23 Int)) Bool (or (= kitten_23 0) (= kitten_23 1)))
(declare-fun spoon_24 (Bool) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_27 (potato_11 potato_11) Bool)
(declare-fun spoon_28 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_31 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_32 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(define-fun spoon_33 ((kitten_25 (_ FloatingPoint 8 24)) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (or (= kitten_26 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_1 kitten_25))))
(declare-fun spoon_34 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) (_ FloatingPoint 8 24))
(declare-fun spoon_35 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(assert (forall ((kitten_30 (_ FloatingPoint 8 24)) (kitten_31 (_ FloatingPoint 8 24))) (! (let ((_let_0 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)))) (let ((_let_1 (spoon_34 kitten_30 kitten_31))) (=> (and (and (spoon_33 kitten_30 true true true true) (spoon_33 kitten_31 true true true true)) (and (fp.lt _let_0 kitten_31) (not (fp.eq (fp.abs (fp.rem kitten_30 kitten_31)) (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv125 8) (_ bv0 23)) kitten_31))))) (and (=> (fp.eq kitten_30 _let_0) (fp.eq _let_1 _let_0)) (spoon_33 _let_1 true false true true))))) :pattern ((spoon_34 kitten_30 kitten_31)))))
(declare-sort potato_13 0)
(define-fun spoon_36 ((kitten_33 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (and (spoon_1 kitten_33) (and (fp.leq (fp.neg _let_0) kitten_33) (fp.leq kitten_33 _let_0)))))
(declare-fun spoon_37 (potato_13 potato_13) Bool)
(declare-fun spoon_38 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_41 () potato_13)
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_42 ((kitten_34 potato_14)) potato_13 (get_potato_14_a kitten_34))
(define-fun spoon_43 ((kitten_35 (_ FloatingPoint 8 24)) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (=> (or (= kitten_36 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_36 kitten_35))))
(declare-sort potato_15 0)
(define-fun spoon_44 ((kitten_40 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (and (spoon_1 kitten_40) (and (fp.leq (fp.neg _let_0) kitten_40) (fp.leq kitten_40 _let_0)))))
(declare-fun spoon_45 (potato_15 potato_15) Bool)
(declare-fun spoon_46 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_47 (potato_5) Bool)
(declare-fun spoon_48 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_49 () potato_15)
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_50 ((kitten_41 potato_16)) potato_15 (get_potato_16_a kitten_41))
(declare-fun cat_51 () (_ FloatingPoint 8 24))
(declare-fun cat_52 () Int)
(declare-fun cat_53 () Int)
(define-fun spoon_54 ((kitten_42 (_ FloatingPoint 8 24)) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (=> (or (= kitten_43 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_44 kitten_42))))
(assert (spoon_36 cat_51))
(assert (not (fp.lt (fp.neg (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23))) cat_51)))
(check-sat)
(exit)
