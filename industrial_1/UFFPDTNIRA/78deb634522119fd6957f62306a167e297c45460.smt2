(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(declare-fun spoon_25 (potato_11 potato_11) Bool)
(declare-fun spoon_26 (Float32) potato_5)
(declare-fun spoon_27 (potato_5) Bool)
(declare-fun spoon_28 (potato_5) Float32)
(declare-const cat_29 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_30 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(define-fun spoon_31 ((kitten_24 Float32) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool)) Bool (=> (or (= kitten_25 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_24)))
(declare-fun spoon_32 (Float32 Float32 Float32) Float32)
(declare-fun spoon_33 (Float32 Float32 Float32 Float32) Bool)
(assert (forall ((kitten_28 Float32) (kitten_29 Float32) (kitten_30 Float32)) (! (=> (and (and (and (spoon_31 kitten_28 true true true) (spoon_31 kitten_29 true true true)) (spoon_31 kitten_30 true true true)) (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) kitten_30) (or (not (fp.eq kitten_29 (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq kitten_28 (fp #b0 #b00000000 #b00000000000000000000000)))))) (let ((kitten_31 (spoon_32 kitten_28 kitten_29 kitten_30))) (and (=> (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) kitten_29) (fp.eq kitten_28 (fp #b0 #b00000000 #b00000000000000000000000))) (fp.eq kitten_31 (fp #b0 #b00000000 #b00000000000000000000000))) (spoon_31 kitten_31 true false true)))) :pattern ((spoon_32 kitten_28 kitten_29 kitten_30)))))
(declare-sort potato_13 0)
(define-fun spoon_34 ((kitten_32 Float32)) Bool (and (spoon_1 kitten_32) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_32) (fp.leq kitten_32 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_35 (potato_13 potato_13) Bool)
(declare-fun spoon_36 (Float32) potato_5)
(declare-fun spoon_37 (potato_5) Bool)
(declare-fun spoon_38 (potato_5) Float32)
(declare-const cat_39 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_33 potato_14)) potato_13 (get_potato_14_a kitten_33))
(declare-sort potato_15 0)
(define-fun spoon_41 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_42 (potato_15 potato_15) Bool)
(declare-fun spoon_43 (Float32) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Float32)
(declare-const cat_46 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_47 ((kitten_35 potato_16)) potato_15 (get_potato_16_a kitten_35))
(define-fun spoon_48 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_41 kitten_36)))
(declare-const cat_49 Float32)
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(define-fun spoon_52 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_34 kitten_40)))
(declare-const cat_53 Float32)
(assert (spoon_41 cat_49))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_53)))
(assert (not (or (not (fp.eq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq cat_49 (fp #b0 #b00000000 #b00000000000000000000000))))))
(check-sat)
(exit)
