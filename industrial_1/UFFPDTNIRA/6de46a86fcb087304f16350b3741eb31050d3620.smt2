(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun spoon_16 (RoundingMode Int) Float32)
(declare-fun spoon_17 (RoundingMode Float32) Int)
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_27 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_28 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_29 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_30 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun spoon_31 (RoundingMode Int) Float64)
(declare-fun spoon_32 (RoundingMode Float64) Int)
(declare-const cat_33 Int)
(define-fun spoon_34 ((kitten_29 Int)) Bool (and (<= (- cat_33) kitten_29) (<= kitten_29 cat_33)))
(define-fun spoon_35 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_36 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_37 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_38 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_36 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_37 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_39 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_40 ((kitten_40 Bool)) Int (ite (= kitten_40 true) 1 0))
(define-fun spoon_41 ((kitten_41 Int)) Bool (ite (= kitten_41 0) false true))
(define-fun spoon_42 ((kitten_42 Int)) Bool (or (= kitten_42 0) (= kitten_42 1)))
(declare-fun spoon_43 (Bool) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Bool)
(declare-sort potato_12 0)
(define-fun spoon_46 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_47 (potato_12 potato_12) Bool)
(declare-fun spoon_48 (Float32) potato_5)
(declare-fun spoon_49 (potato_5) Bool)
(declare-fun spoon_50 (potato_5) Float32)
(declare-const cat_51 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_52 ((kitten_44 potato_13)) potato_12 (get_potato_13_a kitten_44))
(define-fun spoon_53 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_46 kitten_45)))
(declare-sort potato_14 0)
(define-fun spoon_54 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_55 (potato_14 potato_14) Bool)
(declare-fun spoon_56 (Float32) potato_5)
(declare-fun spoon_57 (potato_5) Bool)
(declare-fun spoon_58 (potato_5) Float32)
(declare-const cat_59 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_60 ((kitten_50 potato_15)) potato_14 (get_potato_15_a kitten_50))
(declare-fun spoon_61 (potato_14) Float32)
(declare-fun spoon_62 (Float32) potato_14)
(assert (forall ((kitten_51 potato_14)) (! (= (spoon_62 (spoon_61 kitten_51)) kitten_51) :pattern ((spoon_61 kitten_51)))))
(assert (forall ((kitten_52 potato_14)) (! (spoon_54 (spoon_61 kitten_52)) :pattern ((spoon_61 kitten_52)))))
(assert (forall ((kitten_53 Float32)) (! (=> (spoon_54 kitten_53) (= (spoon_61 (spoon_62 kitten_53)) kitten_53)) :pattern ((spoon_61 (spoon_62 kitten_53))))))
(declare-sort potato_16 0)
(define-fun spoon_63 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_64 (potato_16 potato_16) Bool)
(declare-fun spoon_65 (Float32) potato_5)
(declare-fun spoon_66 (potato_5) Bool)
(declare-fun spoon_67 (potato_5) Float32)
(declare-const cat_68 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_69 ((kitten_55 potato_17)) potato_16 (get_potato_17_a kitten_55))
(define-fun spoon_70 ((kitten_56 Float32) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_57 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_63 kitten_56)))
(declare-fun spoon_71 (potato_16) Float32)
(declare-fun spoon_72 (Float32) potato_16)
(assert (forall ((kitten_60 potato_16)) (! (= (spoon_72 (spoon_71 kitten_60)) kitten_60) :pattern ((spoon_71 kitten_60)))))
(assert (forall ((kitten_61 potato_16)) (! (spoon_63 (spoon_71 kitten_61)) :pattern ((spoon_71 kitten_61)))))
(assert (forall ((kitten_62 Float32)) (! (=> (spoon_63 kitten_62) (= (spoon_71 (spoon_72 kitten_62)) kitten_62)) :pattern ((spoon_71 (spoon_72 kitten_62))))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_14) (get_potato_18_b potato_16)))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_73 ((kitten_63 potato_19)) potato_18 (get_potato_19_a kitten_63))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_18)))))
(define-fun spoon_74 ((kitten_64 potato_20)) potato_18 (get_potato_20_a kitten_64))
(define-fun spoon_75 ((kitten_65 potato_20) (kitten_66 potato_20)) Bool (ite (and (= (spoon_61 (get_potato_18_a (get_potato_20_a kitten_65))) (spoon_61 (get_potato_18_a (get_potato_20_a kitten_66)))) (= (spoon_71 (get_potato_18_b (get_potato_20_a kitten_65))) (spoon_71 (get_potato_18_b (get_potato_20_a kitten_66))))) true false))
(declare-const cat_76 Int)
(declare-fun spoon_77 (potato_20) Int)
(declare-const cat_78 Int)
(declare-fun spoon_79 (potato_20) Int)
(assert (<= 0 cat_76))
(assert (forall ((kitten_67 potato_20)) (<= 0 (spoon_77 kitten_67))))
(assert (<= 0 cat_78))
(assert (forall ((kitten_68 potato_20)) (<= 0 (spoon_79 kitten_68))))
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(assert (<= 0 cat_80))
(assert (< cat_80 cat_81))
(assert (<= 0 cat_82))
(declare-const cat_83 Int)
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(assert (<= 0 cat_83))
(assert (< cat_83 cat_84))
(assert (<= 0 cat_85))
(declare-fun spoon_86 (potato_20 potato_20) Bool)
(declare-const cat_87 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_88 ((kitten_69 potato_21)) potato_20 (get_potato_21_a kitten_69))
(declare-const cat_89 potato_20)
(declare-const cat_90 Int)
(declare-sort potato_22 0)
(define-fun spoon_91 ((kitten_70 Float32)) Bool (and (spoon_1 kitten_70) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_70) (fp.leq kitten_70 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_92 (potato_22 potato_22) Bool)
(declare-fun spoon_93 (Float32) potato_5)
(declare-fun spoon_94 (potato_5) Bool)
(declare-fun spoon_95 (potato_5) Float32)
(declare-const cat_96 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_97 ((kitten_71 potato_23)) potato_22 (get_potato_23_a kitten_71))
(declare-sort potato_24 0)
(define-fun spoon_98 ((kitten_72 Float32)) Bool (and (spoon_1 kitten_72) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_72) (fp.leq kitten_72 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_99 (potato_24 potato_24) Bool)
(declare-fun spoon_100 (Float32) potato_5)
(declare-fun spoon_101 (potato_5) Bool)
(declare-fun spoon_102 (potato_5) Float32)
(declare-const cat_103 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_104 ((kitten_73 potato_25)) potato_24 (get_potato_25_a kitten_73))
(define-fun spoon_105 ((kitten_74 Float32) (kitten_75 Bool) (kitten_76 Bool) (kitten_77 Bool)) Bool (=> (or (= kitten_75 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_98 kitten_74)))
(declare-sort potato_26 0)
(define-fun spoon_106 ((kitten_78 Float32)) Bool (and (spoon_1 kitten_78) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_78) (fp.leq kitten_78 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_107 (potato_26 potato_26) Bool)
(declare-fun spoon_108 (Float32) potato_5)
(declare-fun spoon_109 (potato_5) Bool)
(declare-fun spoon_110 (potato_5) Float32)
(declare-const cat_111 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_112 ((kitten_79 potato_27)) potato_26 (get_potato_27_a kitten_79))
(define-fun spoon_113 ((kitten_80 Float32) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (=> (or (= kitten_81 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_106 kitten_80)))
(declare-fun spoon_114 (Float32) Float32)
(declare-fun spoon_115 (Float32 Float32) Bool)
(assert (forall ((kitten_84 Float32)) (! (=> (spoon_105 kitten_84 true true true) (spoon_113 (spoon_114 kitten_84) true false true)) :pattern ((spoon_114 kitten_84)))))
(declare-fun spoon_116 (Float32) Float32)
(declare-fun spoon_117 (Float32 Float32) Bool)
(assert (forall ((kitten_85 Float32)) (! (=> (spoon_105 kitten_85 true true true) (spoon_113 (spoon_116 kitten_85) true false true)) :pattern ((spoon_116 kitten_85)))))
(declare-sort potato_28 0)
(define-fun spoon_118 ((kitten_86 Float32)) Bool (and (spoon_1 kitten_86) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_86) (fp.leq kitten_86 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_119 (potato_28 potato_28) Bool)
(declare-fun spoon_120 (Float32) potato_5)
(declare-fun spoon_121 (potato_5) Bool)
(declare-fun spoon_122 (potato_5) Float32)
(declare-const cat_123 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_124 ((kitten_87 potato_29)) potato_28 (get_potato_29_a kitten_87))
(define-fun spoon_125 ((kitten_88 Float32) (kitten_89 Bool) (kitten_90 Bool) (kitten_91 Bool)) Bool (=> (or (= kitten_89 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_118 kitten_88)))
(declare-fun spoon_126 (Float32) Float32)
(declare-fun spoon_127 (Float32 Float32) Bool)
(assert (forall ((kitten_92 Float32)) (! (=> (spoon_113 kitten_92 true true true) (spoon_125 (spoon_126 kitten_92) true false true)) :pattern ((spoon_126 kitten_92)))))
(declare-sort potato_30 0)
(define-fun spoon_128 ((kitten_93 Float32)) Bool (and (spoon_1 kitten_93) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_93) (fp.leq kitten_93 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_129 (potato_30 potato_30) Bool)
(declare-fun spoon_130 (Float32) potato_5)
(declare-fun spoon_131 (potato_5) Bool)
(declare-fun spoon_132 (potato_5) Float32)
(declare-const cat_133 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_134 ((kitten_94 potato_31)) potato_30 (get_potato_31_a kitten_94))
(define-fun spoon_135 ((kitten_95 Float32) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_128 kitten_95)))
(define-fun spoon_136 ((kitten_99 Float32) (kitten_100 Bool) (kitten_101 Bool) (kitten_102 Bool)) Bool (=> (or (= kitten_100 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_91 kitten_99)))
(declare-fun spoon_137 (Float32) Float32)
(declare-fun spoon_138 (Float32 Float32) Bool)
(assert (forall ((kitten_103 Float32)) (! (=> (spoon_136 kitten_103 true true true) (spoon_135 (spoon_137 kitten_103) true false true)) :pattern ((spoon_137 kitten_103)))))
(declare-sort potato_32 0)
(declare-fun spoon_139 (potato_32 potato_32) Bool)
(declare-fun spoon_140 (Float64) potato_5)
(declare-fun spoon_141 (potato_5) Bool)
(declare-fun spoon_142 (potato_5) Float64)
(declare-const cat_143 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_144 ((kitten_104 potato_33)) potato_32 (get_potato_33_a kitten_104))
(declare-sort potato_34 0)
(declare-fun spoon_145 (potato_34 potato_34) Bool)
(declare-fun spoon_146 (Float64) potato_5)
(declare-fun spoon_147 (potato_5) Bool)
(declare-fun spoon_148 (potato_5) Float64)
(declare-const cat_149 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_150 ((kitten_105 potato_35)) potato_34 (get_potato_35_a kitten_105))
(define-fun spoon_151 ((kitten_106 Float64) (kitten_107 Bool) (kitten_108 Bool) (kitten_109 Bool)) Bool (=> (or (= kitten_107 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_106)))
(declare-sort potato_36 0)
(define-fun spoon_152 ((kitten_110 Float64)) Bool (and (spoon_3 kitten_110) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_110) (fp.leq kitten_110 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_153 (potato_36 potato_36) Bool)
(declare-fun spoon_154 (Float64) potato_5)
(declare-fun spoon_155 (potato_5) Bool)
(declare-fun spoon_156 (potato_5) Float64)
(declare-const cat_157 potato_36)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_36)))))
(define-fun spoon_158 ((kitten_111 potato_37)) potato_36 (get_potato_37_a kitten_111))
(define-fun spoon_159 ((kitten_112 Float64) (kitten_113 Bool) (kitten_114 Bool) (kitten_115 Bool)) Bool (=> (or (= kitten_113 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_152 kitten_112)))
(define-fun spoon_160 ((kitten_116 Float32) (kitten_117 Bool) (kitten_118 Bool) (kitten_119 Bool)) Bool (=> (or (= kitten_117 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_54 kitten_116)))
(declare-fun spoon_161 (Float32) Float32)
(declare-fun spoon_162 (Float32 Float32) Bool)
(assert (forall ((kitten_120 Float32)) (! (=> (spoon_160 kitten_120 true true true) (spoon_105 (spoon_161 kitten_120) true false true)) :pattern ((spoon_161 kitten_120)))))
(declare-sort potato_38 0)
(define-fun spoon_163 ((kitten_121 Float64)) Bool (and (spoon_3 kitten_121) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_121) (fp.leq kitten_121 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(declare-fun spoon_164 (potato_38 potato_38) Bool)
(declare-fun spoon_165 (Float64) potato_5)
(declare-fun spoon_166 (potato_5) Bool)
(declare-fun spoon_167 (potato_5) Float64)
(declare-const cat_168 potato_38)
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_38)))))
(define-fun spoon_169 ((kitten_122 potato_39)) potato_38 (get_potato_39_a kitten_122))
(define-fun spoon_170 ((kitten_123 Float64) (kitten_124 Bool) (kitten_125 Bool) (kitten_126 Bool)) Bool (=> (or (= kitten_124 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_163 kitten_123)))
(declare-sort potato_40 0)
(define-fun spoon_171 ((kitten_127 Float64)) Bool (and (spoon_3 kitten_127) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_127) (fp.leq kitten_127 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_172 (potato_40 potato_40) Bool)
(declare-fun spoon_173 (Float64) potato_5)
(declare-fun spoon_174 (potato_5) Bool)
(declare-fun spoon_175 (potato_5) Float64)
(declare-const cat_176 potato_40)
(declare-datatypes () ((potato_41 (mk_potato_41 (get_potato_41_a potato_40)))))
(define-fun spoon_177 ((kitten_128 potato_41)) potato_40 (get_potato_41_a kitten_128))
(define-fun spoon_178 ((kitten_129 Float64) (kitten_130 Bool) (kitten_131 Bool) (kitten_132 Bool)) Bool (=> (or (= kitten_130 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_171 kitten_129)))
(declare-fun spoon_179 (Float32 Float32) Float32)
(declare-fun spoon_180 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_133 Float32) (kitten_134 Float32)) (! (=> (and (spoon_70 kitten_133 true true true) (spoon_70 kitten_134 true true true)) (spoon_70 (spoon_179 kitten_133 kitten_134) true false true)) :pattern ((spoon_179 kitten_133 kitten_134)))))
(declare-const cat_181 Float32)
(declare-const cat_182 Int)
(declare-const cat_183 Float32)
(declare-const cat_184 Int)
(declare-const cat_185 Float64)
(declare-const cat_186 Int)
(declare-const cat_187 potato_20)
(declare-const cat_188 Int)
(declare-const cat_189 Int)
(declare-const cat_190 Int)
(declare-const cat_191 Int)
(declare-const cat_192 Int)
(declare-const cat_193 Int)
(declare-const cat_194 Int)
(declare-const cat_195 Int)
(declare-const cat_196 Int)
(declare-const cat_197 Int)
(declare-const cat_198 Int)
(declare-const cat_199 Int)
(declare-const cat_200 Int)
(declare-const cat_201 Int)
(declare-const cat_202 Int)
(declare-const cat_203 Int)
(declare-const cat_204 Int)
(assert (= cat_89 (mk_potato_20 (mk_potato_18 (spoon_62 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_72 (fp #b0 #b00000000 #b00000000000000000000000))))))
(declare-const cat_205 potato_14)
(declare-const cat_206 potato_16)
(declare-const cat_207 Bool)
(declare-const cat_208 Float64)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float64)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 Float64)
(declare-const cat_219 Float32)
(declare-const cat_220 Float64)
(declare-const cat_221 Float64)
(declare-const cat_222 potato_16)
(declare-const cat_223 potato_14)
(declare-const cat_224 potato_14)
(declare-const cat_225 potato_16)
(declare-const cat_226 potato_14)
(declare-const cat_227 potato_16)
(declare-const cat_228 Float64)
(declare-const cat_229 Float64)
(declare-const cat_230 Float64)
(declare-const cat_231 Float32)
(declare-const cat_232 Float32)
(declare-const cat_233 Float64)
(declare-const cat_234 Float32)
(declare-const cat_235 Float32)
(declare-const cat_236 Float64)
(declare-const cat_237 Float64)
(declare-const cat_238 Float64)
(declare-const cat_239 Float64)
(declare-const cat_240 Float64)
(declare-const cat_241 Float64)
(declare-const cat_242 Float64)
(declare-const cat_243 Float64)
(declare-const cat_244 Float64)
(declare-const cat_245 Float64)
(declare-const cat_246 Float64)
(declare-const cat_247 Float64)
(declare-const cat_248 Float64)
(declare-const cat_249 Float32)
(declare-const cat_250 Float32)
(declare-const cat_251 potato_7)
(declare-const cat_252 Bool)
(declare-const cat_253 potato_19)
(declare-const cat_254 potato_18)
(declare-const cat_255 potato_11)
(declare-const cat_256 Float64)
(declare-const cat_257 potato_11)
(declare-const cat_258 Float64)
(declare-const cat_259 potato_11)
(declare-const cat_260 Float64)
(declare-const cat_261 potato_11)
(declare-const cat_262 Float64)
(declare-const cat_263 potato_11)
(declare-const cat_264 Float64)
(declare-const cat_265 potato_11)
(declare-const cat_266 Float64)
(declare-const cat_267 potato_11)
(declare-const cat_268 Float64)
(declare-const cat_269 potato_11)
(declare-const cat_270 Float64)
(assert (= (spoon_71 cat_222) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_61 cat_223) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_223 cat_224))
(assert (= cat_222 cat_225))
(assert (= cat_226 cat_224))
(assert (= cat_227 cat_225))
(assert (= (mk_potato_20 (mk_potato_18 cat_226 cat_227)) cat_89))
(assert (spoon_46 cat_181))
(assert (spoon_46 cat_183))
(assert (spoon_152 cat_185))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_208)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_209)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_210)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_211)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_212)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_171 cat_213)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_171 cat_214)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_171 cat_215)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_216)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_217)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_163 cat_218)))
(assert (= cat_249 cat_219))
(assert (= cat_250 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_63 cat_250))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_220)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_221)))
(assert (= cat_251 (mk_potato_7 cat_207)))
(assert (= cat_252 (spoon_41 1)))
(assert (= cat_253 (mk_potato_19 (mk_potato_18 cat_205 cat_206))))
(assert (= cat_254 (get_potato_20_a cat_89)))
(assert (= cat_255 (mk_potato_11 cat_210)))
(assert (= cat_256 (fp.mul RNE cat_185 cat_185)))
(assert (and (= cat_228 ((_ to_fp 11 53) RNE (fp.mul RNE cat_181 cat_181))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_181 cat_181)))))
(assert (= cat_257 (mk_potato_11 cat_208)))
(assert (= cat_258 cat_228))
(assert (and (= cat_229 ((_ to_fp 11 53) RNE (fp.mul RNE cat_183 cat_183))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_183 cat_183)))))
(assert (= cat_259 (mk_potato_11 cat_209)))
(assert (= cat_260 cat_229))
(assert (= cat_261 (mk_potato_11 cat_211)))
(assert (= cat_262 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_185)))
(assert (and (= cat_230 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_256)) (spoon_3 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_256))))
(assert (= cat_263 (mk_potato_11 cat_212)))
(assert (= cat_264 cat_230))
(assert (and (= cat_231 (spoon_161 (spoon_61 (get_potato_18_a (get_potato_20_a cat_187))))) (spoon_98 cat_231)))
(assert (and (= cat_232 (spoon_114 cat_231)) (spoon_106 cat_232)))
(assert (= cat_233 ((_ to_fp 11 53) RNE cat_232)))
(assert (= cat_265 (mk_potato_11 cat_213)))
(assert (= cat_266 cat_233))
(assert (and (= cat_234 (spoon_161 (spoon_61 (get_potato_18_a (get_potato_20_a cat_187))))) (spoon_98 cat_234)))
(assert (and (= cat_235 (spoon_116 cat_234)) (spoon_106 cat_235)))
(assert (= cat_236 ((_ to_fp 11 53) RNE cat_235)))
(assert (= cat_267 (mk_potato_11 cat_214)))
(assert (= cat_268 cat_236))
(assert (and (= cat_241 (fp.mul RNE cat_262 ((_ to_fp 11 53) RNE cat_183))) (spoon_3 (fp.mul RNE cat_262 ((_ to_fp 11 53) RNE cat_183)))))
(assert (= cat_242 (fp.mul RNE cat_241 cat_268)))
(assert (and (= cat_243 cat_242) (spoon_3 cat_242)))
(assert (and (= cat_237 (fp.sub RNE cat_264 cat_258)) (spoon_3 (fp.sub RNE cat_264 cat_258))))
(assert (= cat_238 (fp.sub RNE cat_237 cat_260)))
(assert (and (= cat_239 cat_238) (spoon_3 cat_238)))
(assert (= cat_240 (fp.mul RNE cat_239 cat_266)))
(assert (and (= cat_244 cat_240) (spoon_3 cat_240)))
(assert (= cat_245 (fp.add RNE cat_244 cat_243)))
(assert (and (= cat_246 cat_245) (spoon_3 cat_245)))
(assert (= cat_269 (mk_potato_11 cat_217)))
(assert (= cat_270 cat_246))
(assert (and (= cat_247 (fp.add RNE cat_264 cat_258)) (spoon_3 (fp.add RNE cat_264 cat_258))))
(assert (= cat_248 (fp.add RNE cat_247 cat_260)))
(assert (not (spoon_3 cat_248)))
(check-sat)
(exit)
