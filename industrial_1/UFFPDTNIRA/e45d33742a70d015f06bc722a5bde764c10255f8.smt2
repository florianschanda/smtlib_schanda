(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_23 Bool)) Int (ite (= kitten_23 true) 1 0))
(define-fun spoon_26 ((kitten_24 Int)) Bool (ite (= kitten_24 0) false true))
(define-fun spoon_27 ((kitten_25 Int)) Bool (or (= kitten_25 0) (= kitten_25 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_31 (potato_11 potato_11) Bool)
(declare-fun spoon_32 (Float32) potato_5)
(declare-fun spoon_33 (potato_5) Bool)
(declare-fun spoon_34 (potato_5) Float32)
(declare-const cat_35 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_36 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-sort potato_13 0)
(define-fun spoon_37 ((kitten_27 Float32)) Bool (and (spoon_1 kitten_27) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_27) (fp.leq kitten_27 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_38 (potato_13 potato_13) Bool)
(declare-fun spoon_39 (Float32) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) Float32)
(declare-const cat_42 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_43 ((kitten_28 potato_14)) potato_13 (get_potato_14_a kitten_28))
(declare-fun spoon_44 (potato_13) Float32)
(declare-fun spoon_45 (Float32) potato_13)
(assert (forall ((kitten_29 potato_13)) (! (= (spoon_45 (spoon_44 kitten_29)) kitten_29) :pattern ((spoon_44 kitten_29)))))
(assert (forall ((kitten_30 potato_13)) (! (spoon_37 (spoon_44 kitten_30)) :pattern ((spoon_44 kitten_30)))))
(assert (forall ((kitten_31 Float32)) (! (=> (spoon_37 kitten_31) (= (spoon_44 (spoon_45 kitten_31)) kitten_31)) :pattern ((spoon_44 (spoon_45 kitten_31))))))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_46 ((kitten_32 potato_16)) potato_15 (get_potato_16_a kitten_32))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15)))))
(define-fun spoon_47 ((kitten_33 potato_17)) potato_15 (get_potato_17_a kitten_33))
(define-fun spoon_48 ((kitten_34 potato_17) (kitten_35 potato_17)) Bool (ite (and (= (spoon_44 (get_potato_15_a (get_potato_17_a kitten_34))) (spoon_44 (get_potato_15_a (get_potato_17_a kitten_35)))) (= (spoon_44 (get_potato_15_b (get_potato_17_a kitten_34))) (spoon_44 (get_potato_15_b (get_potato_17_a kitten_35))))) true false))
(declare-const cat_49 Int)
(declare-fun spoon_50 (potato_17) Int)
(declare-const cat_51 Int)
(declare-fun spoon_52 (potato_17) Int)
(assert (<= 0 cat_49))
(assert (forall ((kitten_36 potato_17)) (<= 0 (spoon_50 kitten_36))))
(assert (<= 0 cat_51))
(assert (forall ((kitten_37 potato_17)) (<= 0 (spoon_52 kitten_37))))
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-const cat_55 Int)
(assert (<= 0 cat_53))
(assert (< cat_53 cat_54))
(assert (<= 0 cat_55))
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(declare-const cat_58 Int)
(assert (<= 0 cat_56))
(assert (< cat_56 cat_57))
(assert (<= 0 cat_58))
(declare-fun spoon_59 (potato_17 potato_17) Bool)
(declare-const cat_60 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_61 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(declare-sort potato_19 0)
(define-fun spoon_62 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_39) (fp.leq kitten_39 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_63 (potato_19 potato_19) Bool)
(declare-fun spoon_64 (Float32) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Float32)
(declare-const cat_67 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_68 ((kitten_40 potato_20)) potato_19 (get_potato_20_a kitten_40))
(define-fun spoon_69 ((kitten_41 Float32) (kitten_42 Bool) (kitten_43 Bool) (kitten_44 Bool)) Bool (=> (or (= kitten_42 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_62 kitten_41)))
(declare-sort potato_21 0)
(define-fun spoon_70 ((kitten_45 Float32)) Bool (and (spoon_1 kitten_45) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_45) (fp.leq kitten_45 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_71 (potato_21 potato_21) Bool)
(declare-fun spoon_72 (Float32) potato_5)
(declare-fun spoon_73 (potato_5) Bool)
(declare-fun spoon_74 (potato_5) Float32)
(declare-const cat_75 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_76 ((kitten_46 potato_22)) potato_21 (get_potato_22_a kitten_46))
(declare-fun spoon_77 (potato_21) Float32)
(declare-fun spoon_78 (Float32) potato_21)
(assert (forall ((kitten_47 potato_21)) (! (= (spoon_78 (spoon_77 kitten_47)) kitten_47) :pattern ((spoon_77 kitten_47)))))
(assert (forall ((kitten_48 potato_21)) (! (spoon_70 (spoon_77 kitten_48)) :pattern ((spoon_77 kitten_48)))))
(assert (forall ((kitten_49 Float32)) (! (=> (spoon_70 kitten_49) (= (spoon_77 (spoon_78 kitten_49)) kitten_49)) :pattern ((spoon_77 (spoon_78 kitten_49))))))
(declare-const cat_79 potato_17)
(declare-const cat_80 Int)
(declare-const cat_81 potato_17)
(declare-const cat_82 Int)
(declare-const cat_83 potato_17)
(declare-const cat_84 Int)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21) (get_potato_23_b potato_21)))))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_85 ((kitten_50 potato_24)) potato_23 (get_potato_24_a kitten_50))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_23)))))
(define-fun spoon_86 ((kitten_51 potato_25)) potato_23 (get_potato_25_a kitten_51))
(define-fun spoon_87 ((kitten_52 potato_25) (kitten_53 potato_25)) Bool (ite (and (= (spoon_77 (get_potato_23_a (get_potato_25_a kitten_52))) (spoon_77 (get_potato_23_a (get_potato_25_a kitten_53)))) (= (spoon_77 (get_potato_23_b (get_potato_25_a kitten_52))) (spoon_77 (get_potato_23_b (get_potato_25_a kitten_53))))) true false))
(declare-const cat_88 Int)
(declare-fun spoon_89 (potato_25) Int)
(declare-const cat_90 Int)
(declare-fun spoon_91 (potato_25) Int)
(assert (<= 0 cat_88))
(assert (forall ((kitten_54 potato_25)) (<= 0 (spoon_89 kitten_54))))
(assert (<= 0 cat_90))
(assert (forall ((kitten_55 potato_25)) (<= 0 (spoon_91 kitten_55))))
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(assert (<= 0 cat_92))
(assert (< cat_92 cat_93))
(assert (<= 0 cat_94))
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(declare-const cat_97 Int)
(assert (<= 0 cat_95))
(assert (< cat_95 cat_96))
(assert (<= 0 cat_97))
(declare-fun spoon_98 (potato_25 potato_25) Bool)
(declare-const cat_99 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_100 ((kitten_56 potato_26)) potato_25 (get_potato_26_a kitten_56))
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(define-fun spoon_109 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_57)))
(define-fun spoon_110 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_70 kitten_61)))
(define-fun spoon_111 ((kitten_65 Float32) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool)) Bool (=> (or (= kitten_66 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_37 kitten_65)))
(declare-const cat_112 potato_21)
(declare-const cat_113 potato_21)
(declare-const cat_114 potato_21)
(declare-const cat_115 potato_21)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 potato_21)
(declare-const cat_119 potato_21)
(declare-const cat_120 potato_21)
(declare-const cat_121 potato_21)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Float32)
(declare-const cat_130 potato_21)
(declare-const cat_131 potato_21)
(declare-const cat_132 potato_21)
(declare-const cat_133 potato_21)
(declare-const cat_134 potato_21)
(declare-const cat_135 potato_21)
(declare-const cat_136 Float32)
(declare-const cat_137 Float32)
(declare-const cat_138 potato_13)
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 potato_21)
(declare-const cat_148 potato_21)
(declare-const cat_149 potato_21)
(declare-const cat_150 potato_21)
(declare-const cat_151 potato_21)
(declare-const cat_152 potato_21)
(declare-const cat_153 Float32)
(declare-const cat_154 Float32)
(declare-const cat_155 potato_13)
(declare-const cat_156 potato_21)
(declare-const cat_157 potato_21)
(declare-const cat_158 potato_23)
(declare-const cat_159 potato_24)
(declare-const cat_160 potato_23)
(assert (spoon_62 cat_116))
(assert (spoon_62 cat_117))
(assert (and (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_116) (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_117)))
(assert (not (fp.lt cat_117 cat_116)))
(assert (and (= cat_143 (fp.div RNE (spoon_77 cat_115) cat_117)) (spoon_1 (fp.div RNE (spoon_77 cat_115) cat_117))))
(assert (= cat_144 (fp.mul RNE cat_143 cat_116)))
(assert (and (= cat_145 cat_144) (spoon_1 cat_144)))
(assert (not (spoon_70 cat_145)))
(check-sat)
(exit)
