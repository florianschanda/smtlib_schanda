(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-fun spoon_23 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_24 ((kitten_23 Float64)) Bool (and (fp.isInfinite kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_25 ((kitten_24 Float64)) Bool (and (fp.isInfinite kitten_24) (fp.isNegative kitten_24)))
(define-fun spoon_26 ((kitten_25 Float64)) Bool (and (fp.isZero kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_27 ((kitten_26 Float64)) Bool (and (fp.isZero kitten_26) (fp.isNegative kitten_26)))
(declare-const cat_28 Int)
(define-fun spoon_29 ((kitten_27 Int)) Bool (and (<= (- cat_28) kitten_27) (<= kitten_27 cat_28)))
(define-fun spoon_30 ((kitten_28 Int)) Bool (and (<= (- 9007199254740992) kitten_28) (<= kitten_28 9007199254740992)))
(define-fun spoon_31 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isPositive kitten_30)) (and (fp.isNegative kitten_29) (fp.isNegative kitten_30))))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isNegative kitten_32)) (and (fp.isNegative kitten_31) (fp.isPositive kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64) (kitten_35 Float64)) Bool (and (=> (spoon_31 kitten_34 kitten_35) (fp.isPositive kitten_33)) (=> (spoon_32 kitten_34 kitten_35) (fp.isNegative kitten_33))))
(define-fun spoon_34 ((kitten_36 Float64) (kitten_37 Real)) Bool (or (and (fp.isPositive kitten_36) (< 0.0 kitten_37)) (and (fp.isNegative kitten_36) (< kitten_37 0.0))))
(declare-fun spoon_35 (Float64) Bool)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_38 Bool)) Int (ite (= kitten_38 true) 1 0))
(define-fun spoon_37 ((kitten_39 Int)) Bool (ite (= kitten_39 0) false true))
(define-fun spoon_38 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_39 (Bool) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) Bool)
(declare-sort potato_12 0)
(define-fun spoon_42 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_43 (potato_12 potato_12) Bool)
(declare-fun spoon_44 (Float32) potato_5)
(declare-fun spoon_45 (potato_5) Bool)
(declare-fun spoon_46 (potato_5) Float32)
(declare-const cat_47 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_48 ((kitten_42 potato_13)) potato_12 (get_potato_13_a kitten_42))
(define-fun spoon_49 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_42 kitten_43)))
(declare-sort potato_14 0)
(define-fun spoon_50 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_47) (fp.leq kitten_47 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_51 (potato_14 potato_14) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_56 ((kitten_48 potato_15)) potato_14 (get_potato_15_a kitten_48))
(declare-fun spoon_57 (potato_14) Float32)
(declare-fun spoon_58 (Float32) potato_14)
(assert (forall ((kitten_49 potato_14)) (! (= (spoon_58 (spoon_57 kitten_49)) kitten_49) :pattern ((spoon_57 kitten_49)))))
(assert (forall ((kitten_50 potato_14)) (! (spoon_50 (spoon_57 kitten_50)) :pattern ((spoon_57 kitten_50)))))
(assert (forall ((kitten_51 Float32)) (! (=> (spoon_50 kitten_51) (= (spoon_57 (spoon_58 kitten_51)) kitten_51)) :pattern ((spoon_57 (spoon_58 kitten_51))))))
(declare-sort potato_16 0)
(define-fun spoon_59 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_52) (fp.leq kitten_52 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_60 (potato_16 potato_16) Bool)
(declare-fun spoon_61 (Float32) potato_5)
(declare-fun spoon_62 (potato_5) Bool)
(declare-fun spoon_63 (potato_5) Float32)
(declare-const cat_64 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_65 ((kitten_53 potato_17)) potato_16 (get_potato_17_a kitten_53))
(define-fun spoon_66 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_59 kitten_54)))
(declare-fun spoon_67 (potato_16) Float32)
(declare-fun spoon_68 (Float32) potato_16)
(assert (forall ((kitten_58 potato_16)) (! (= (spoon_68 (spoon_67 kitten_58)) kitten_58) :pattern ((spoon_67 kitten_58)))))
(assert (forall ((kitten_59 potato_16)) (! (spoon_59 (spoon_67 kitten_59)) :pattern ((spoon_67 kitten_59)))))
(assert (forall ((kitten_60 Float32)) (! (=> (spoon_59 kitten_60) (= (spoon_67 (spoon_68 kitten_60)) kitten_60)) :pattern ((spoon_67 (spoon_68 kitten_60))))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_14) (get_potato_18_b potato_16)))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_69 ((kitten_61 potato_19)) potato_18 (get_potato_19_a kitten_61))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_18)))))
(define-fun spoon_70 ((kitten_62 potato_20)) potato_18 (get_potato_20_a kitten_62))
(define-fun spoon_71 ((kitten_63 potato_20) (kitten_64 potato_20)) Bool (ite (and (= (spoon_57 (get_potato_18_a (get_potato_20_a kitten_63))) (spoon_57 (get_potato_18_a (get_potato_20_a kitten_64)))) (= (spoon_67 (get_potato_18_b (get_potato_20_a kitten_63))) (spoon_67 (get_potato_18_b (get_potato_20_a kitten_64))))) true false))
(declare-const cat_72 Int)
(declare-fun spoon_73 (potato_20) Int)
(declare-const cat_74 Int)
(declare-fun spoon_75 (potato_20) Int)
(assert (<= 0 cat_72))
(assert (forall ((kitten_65 potato_20)) (<= 0 (spoon_73 kitten_65))))
(assert (<= 0 cat_74))
(assert (forall ((kitten_66 potato_20)) (<= 0 (spoon_75 kitten_66))))
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(assert (<= 0 cat_76))
(assert (< cat_76 cat_77))
(assert (<= 0 cat_78))
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(assert (<= 0 cat_79))
(assert (< cat_79 cat_80))
(assert (<= 0 cat_81))
(declare-fun spoon_82 (potato_20 potato_20) Bool)
(declare-const cat_83 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_84 ((kitten_67 potato_21)) potato_20 (get_potato_21_a kitten_67))
(declare-const cat_85 potato_20)
(declare-const cat_86 Int)
(declare-sort potato_22 0)
(define-fun spoon_87 ((kitten_68 Float32)) Bool (and (spoon_1 kitten_68) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_68) (fp.leq kitten_68 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_88 (potato_22 potato_22) Bool)
(declare-fun spoon_89 (Float32) potato_5)
(declare-fun spoon_90 (potato_5) Bool)
(declare-fun spoon_91 (potato_5) Float32)
(declare-const cat_92 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_93 ((kitten_69 potato_23)) potato_22 (get_potato_23_a kitten_69))
(declare-sort potato_24 0)
(define-fun spoon_94 ((kitten_70 Float32)) Bool (and (spoon_1 kitten_70) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_70) (fp.leq kitten_70 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_95 (potato_24 potato_24) Bool)
(declare-fun spoon_96 (Float32) potato_5)
(declare-fun spoon_97 (potato_5) Bool)
(declare-fun spoon_98 (potato_5) Float32)
(declare-const cat_99 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_100 ((kitten_71 potato_25)) potato_24 (get_potato_25_a kitten_71))
(define-fun spoon_101 ((kitten_72 Float32) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool)) Bool (=> (or (= kitten_73 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_94 kitten_72)))
(declare-sort potato_26 0)
(define-fun spoon_102 ((kitten_76 Float32)) Bool (and (spoon_1 kitten_76) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_76) (fp.leq kitten_76 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_103 (potato_26 potato_26) Bool)
(declare-fun spoon_104 (Float32) potato_5)
(declare-fun spoon_105 (potato_5) Bool)
(declare-fun spoon_106 (potato_5) Float32)
(declare-const cat_107 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_108 ((kitten_77 potato_27)) potato_26 (get_potato_27_a kitten_77))
(define-fun spoon_109 ((kitten_78 Float32) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool)) Bool (=> (or (= kitten_79 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_102 kitten_78)))
(declare-fun spoon_110 (Float32) Float32)
(declare-fun spoon_111 (Float32 Float32) Bool)
(assert (forall ((kitten_82 Float32)) (! (=> (spoon_101 kitten_82 true true true) (spoon_109 (spoon_110 kitten_82) true false true)) :pattern ((spoon_110 kitten_82)))))
(declare-fun spoon_112 (Float32) Float32)
(declare-fun spoon_113 (Float32 Float32) Bool)
(assert (forall ((kitten_83 Float32)) (! (=> (spoon_101 kitten_83 true true true) (spoon_109 (spoon_112 kitten_83) true false true)) :pattern ((spoon_112 kitten_83)))))
(declare-sort potato_28 0)
(define-fun spoon_114 ((kitten_84 Float32)) Bool (and (spoon_1 kitten_84) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_84) (fp.leq kitten_84 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_115 (potato_28 potato_28) Bool)
(declare-fun spoon_116 (Float32) potato_5)
(declare-fun spoon_117 (potato_5) Bool)
(declare-fun spoon_118 (potato_5) Float32)
(declare-const cat_119 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_120 ((kitten_85 potato_29)) potato_28 (get_potato_29_a kitten_85))
(define-fun spoon_121 ((kitten_86 Float32) (kitten_87 Bool) (kitten_88 Bool) (kitten_89 Bool)) Bool (=> (or (= kitten_87 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_114 kitten_86)))
(declare-fun spoon_122 (Float32) Float32)
(declare-fun spoon_123 (Float32 Float32) Bool)
(assert (forall ((kitten_90 Float32)) (! (=> (spoon_109 kitten_90 true true true) (spoon_121 (spoon_122 kitten_90) true false true)) :pattern ((spoon_122 kitten_90)))))
(declare-sort potato_30 0)
(define-fun spoon_124 ((kitten_91 Float32)) Bool (and (spoon_1 kitten_91) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_91) (fp.leq kitten_91 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_125 (potato_30 potato_30) Bool)
(declare-fun spoon_126 (Float32) potato_5)
(declare-fun spoon_127 (potato_5) Bool)
(declare-fun spoon_128 (potato_5) Float32)
(declare-const cat_129 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_130 ((kitten_92 potato_31)) potato_30 (get_potato_31_a kitten_92))
(define-fun spoon_131 ((kitten_93 Float32) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_124 kitten_93)))
(define-fun spoon_132 ((kitten_97 Float32) (kitten_98 Bool) (kitten_99 Bool) (kitten_100 Bool)) Bool (=> (or (= kitten_98 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_87 kitten_97)))
(declare-fun spoon_133 (Float32) Float32)
(declare-fun spoon_134 (Float32 Float32) Bool)
(assert (forall ((kitten_101 Float32)) (! (=> (spoon_132 kitten_101 true true true) (spoon_131 (spoon_133 kitten_101) true false true)) :pattern ((spoon_133 kitten_101)))))
(declare-sort potato_32 0)
(declare-fun spoon_135 (potato_32 potato_32) Bool)
(declare-fun spoon_136 (Float64) potato_5)
(declare-fun spoon_137 (potato_5) Bool)
(declare-fun spoon_138 (potato_5) Float64)
(declare-const cat_139 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_140 ((kitten_102 potato_33)) potato_32 (get_potato_33_a kitten_102))
(declare-sort potato_34 0)
(declare-fun spoon_141 (potato_34 potato_34) Bool)
(declare-fun spoon_142 (Float64) potato_5)
(declare-fun spoon_143 (potato_5) Bool)
(declare-fun spoon_144 (potato_5) Float64)
(declare-const cat_145 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_146 ((kitten_103 potato_35)) potato_34 (get_potato_35_a kitten_103))
(define-fun spoon_147 ((kitten_104 Float64) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_105 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_104)))
(declare-sort potato_36 0)
(define-fun spoon_148 ((kitten_108 Float64)) Bool (and (spoon_2 kitten_108) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_108) (fp.leq kitten_108 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_149 (potato_36 potato_36) Bool)
(declare-fun spoon_150 (Float64) potato_5)
(declare-fun spoon_151 (potato_5) Bool)
(declare-fun spoon_152 (potato_5) Float64)
(declare-const cat_153 potato_36)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_36)))))
(define-fun spoon_154 ((kitten_109 potato_37)) potato_36 (get_potato_37_a kitten_109))
(define-fun spoon_155 ((kitten_110 Float64) (kitten_111 Bool) (kitten_112 Bool) (kitten_113 Bool)) Bool (=> (or (= kitten_111 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_148 kitten_110)))
(define-fun spoon_156 ((kitten_114 Float32) (kitten_115 Bool) (kitten_116 Bool) (kitten_117 Bool)) Bool (=> (or (= kitten_115 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_50 kitten_114)))
(declare-fun spoon_157 (Float32) Float32)
(declare-fun spoon_158 (Float32 Float32) Bool)
(assert (forall ((kitten_118 Float32)) (! (=> (spoon_156 kitten_118 true true true) (spoon_101 (spoon_157 kitten_118) true false true)) :pattern ((spoon_157 kitten_118)))))
(declare-sort potato_38 0)
(define-fun spoon_159 ((kitten_119 Float64)) Bool (and (spoon_2 kitten_119) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_119) (fp.leq kitten_119 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(declare-fun spoon_160 (potato_38 potato_38) Bool)
(declare-fun spoon_161 (Float64) potato_5)
(declare-fun spoon_162 (potato_5) Bool)
(declare-fun spoon_163 (potato_5) Float64)
(declare-const cat_164 potato_38)
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_38)))))
(define-fun spoon_165 ((kitten_120 potato_39)) potato_38 (get_potato_39_a kitten_120))
(define-fun spoon_166 ((kitten_121 Float64) (kitten_122 Bool) (kitten_123 Bool) (kitten_124 Bool)) Bool (=> (or (= kitten_122 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_159 kitten_121)))
(declare-sort potato_40 0)
(define-fun spoon_167 ((kitten_125 Float64)) Bool (and (spoon_2 kitten_125) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_125) (fp.leq kitten_125 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_168 (potato_40 potato_40) Bool)
(declare-fun spoon_169 (Float64) potato_5)
(declare-fun spoon_170 (potato_5) Bool)
(declare-fun spoon_171 (potato_5) Float64)
(declare-const cat_172 potato_40)
(declare-datatypes () ((potato_41 (mk_potato_41 (get_potato_41_a potato_40)))))
(define-fun spoon_173 ((kitten_126 potato_41)) potato_40 (get_potato_41_a kitten_126))
(define-fun spoon_174 ((kitten_127 Float64) (kitten_128 Bool) (kitten_129 Bool) (kitten_130 Bool)) Bool (=> (or (= kitten_128 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_167 kitten_127)))
(declare-fun spoon_175 (Float32 Float32) Float32)
(declare-fun spoon_176 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_131 Float32) (kitten_132 Float32)) (! (=> (and (spoon_66 kitten_131 true true true) (spoon_66 kitten_132 true true true)) (spoon_66 (spoon_175 kitten_131 kitten_132) true false true)) :pattern ((spoon_175 kitten_131 kitten_132)))))
(declare-const cat_177 Float32)
(declare-const cat_178 Int)
(declare-const cat_179 Float32)
(declare-const cat_180 Int)
(declare-const cat_181 Float64)
(declare-const cat_182 Int)
(declare-const cat_183 potato_20)
(declare-const cat_184 Int)
(declare-const cat_185 Int)
(declare-const cat_186 Int)
(declare-const cat_187 Int)
(declare-const cat_188 Int)
(declare-const cat_189 Int)
(declare-const cat_190 Int)
(declare-const cat_191 Int)
(declare-const cat_192 Int)
(declare-const cat_193 Int)
(declare-const cat_194 Int)
(declare-const cat_195 Int)
(declare-const cat_196 Int)
(declare-const cat_197 Int)
(declare-const cat_198 Int)
(declare-const cat_199 Int)
(declare-const cat_200 Int)
(assert (= cat_85 (mk_potato_20 (mk_potato_18 (spoon_58 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_68 (fp #b0 #b00000000 #b00000000000000000000000))))))
(declare-const cat_201 potato_14)
(declare-const cat_202 potato_16)
(declare-const cat_203 Bool)
(declare-const cat_204 Float64)
(declare-const cat_205 Float64)
(declare-const cat_206 Float64)
(declare-const cat_207 Float64)
(declare-const cat_208 Float64)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float32)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 potato_16)
(declare-const cat_219 potato_14)
(declare-const cat_220 potato_14)
(declare-const cat_221 potato_16)
(declare-const cat_222 potato_14)
(declare-const cat_223 potato_16)
(declare-const cat_224 Float64)
(declare-const cat_225 Float64)
(declare-const cat_226 Float64)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float64)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float64)
(declare-const cat_233 Float64)
(declare-const cat_234 Float64)
(declare-const cat_235 Float64)
(declare-const cat_236 Float64)
(declare-const cat_237 Float64)
(declare-const cat_238 Float64)
(declare-const cat_239 Float64)
(declare-const cat_240 Float64)
(declare-const cat_241 Float64)
(declare-const cat_242 Float64)
(declare-const cat_243 Float64)
(declare-const cat_244 Float64)
(declare-const cat_245 Float64)
(declare-const cat_246 Float64)
(declare-const cat_247 Float64)
(declare-const cat_248 Float64)
(declare-const cat_249 Float64)
(declare-const cat_250 Float64)
(declare-const cat_251 Float64)
(declare-const cat_252 Float64)
(declare-const cat_253 Float64)
(declare-const cat_254 Float64)
(declare-const cat_255 Float64)
(declare-const cat_256 Float64)
(declare-const cat_257 Float64)
(declare-const cat_258 Float64)
(declare-const cat_259 Float64)
(declare-const cat_260 Bool)
(declare-const cat_261 Float64)
(declare-const cat_262 Float64)
(declare-const cat_263 Bool)
(declare-const cat_264 Bool)
(declare-const cat_265 Float32)
(declare-const cat_266 Float32)
(declare-const cat_267 potato_7)
(declare-const cat_268 Bool)
(declare-const cat_269 potato_19)
(declare-const cat_270 potato_18)
(declare-const cat_271 potato_11)
(declare-const cat_272 Float64)
(declare-const cat_273 potato_11)
(declare-const cat_274 Float64)
(declare-const cat_275 potato_11)
(declare-const cat_276 Float64)
(declare-const cat_277 potato_11)
(declare-const cat_278 Float64)
(declare-const cat_279 potato_11)
(declare-const cat_280 Float64)
(declare-const cat_281 potato_11)
(declare-const cat_282 Float64)
(declare-const cat_283 potato_11)
(declare-const cat_284 Float64)
(declare-const cat_285 potato_11)
(declare-const cat_286 Float64)
(declare-const cat_287 potato_11)
(declare-const cat_288 Float64)
(declare-const cat_289 potato_11)
(declare-const cat_290 Float64)
(declare-const cat_291 potato_11)
(declare-const cat_292 Float64)
(declare-const cat_293 potato_11)
(declare-const cat_294 Float64)
(declare-const cat_295 potato_11)
(declare-const cat_296 Float64)
(declare-const cat_297 potato_11)
(declare-const cat_298 Float64)
(declare-const cat_299 potato_11)
(declare-const cat_300 Float64)
(declare-const cat_301 Bool)
(define-fun spoon_302 () potato_11 (mk_potato_11 cat_211))
(assert (= (spoon_67 cat_218) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_57 cat_219) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_219 cat_220))
(assert (= cat_218 cat_221))
(assert (= cat_222 cat_220))
(assert (= cat_223 cat_221))
(assert (= (mk_potato_20 (mk_potato_18 cat_222 cat_223)) cat_85))
(assert (spoon_42 cat_177))
(assert (spoon_42 cat_179))
(assert (spoon_148 cat_181))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_204)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_205)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_206)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_207)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_208)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_167 cat_209)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_167 cat_210)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_167 cat_211)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_212)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_213)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_159 cat_214)))
(assert (= cat_265 cat_215))
(assert (= cat_266 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_59 cat_266))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_216)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_217)))
(assert (= cat_267 (mk_potato_7 cat_203)))
(assert (= cat_268 (spoon_37 1)))
(assert (= cat_269 (mk_potato_19 (mk_potato_18 cat_201 cat_202))))
(assert (= cat_270 (get_potato_20_a cat_85)))
(assert (= cat_271 (mk_potato_11 cat_206)))
(assert (= cat_272 (fp.mul RNE cat_181 cat_181)))
(assert (and (= cat_224 ((_ to_fp 11 53) RNE (fp.mul RNE cat_177 cat_177))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_177 cat_177)))))
(assert (= cat_273 (mk_potato_11 cat_204)))
(assert (= cat_274 cat_224))
(assert (and (= cat_225 ((_ to_fp 11 53) RNE (fp.mul RNE cat_179 cat_179))) (spoon_2 ((_ to_fp 11 53) RNE (fp.mul RNE cat_179 cat_179)))))
(assert (= cat_275 (mk_potato_11 cat_205)))
(assert (= cat_276 cat_225))
(assert (= cat_277 (mk_potato_11 cat_207)))
(assert (= cat_278 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_181)))
(assert (and (= cat_226 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_272)) (spoon_2 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_272))))
(assert (= cat_279 (mk_potato_11 cat_208)))
(assert (= cat_280 cat_226))
(assert (and (= cat_227 (spoon_157 (spoon_57 (get_potato_18_a (get_potato_20_a cat_183))))) (spoon_94 cat_227)))
(assert (and (= cat_228 (spoon_110 cat_227)) (spoon_102 cat_228)))
(assert (= cat_229 ((_ to_fp 11 53) RNE cat_228)))
(assert (= cat_281 (mk_potato_11 cat_209)))
(assert (= cat_282 cat_229))
(assert (and (= cat_230 (spoon_157 (spoon_57 (get_potato_18_a (get_potato_20_a cat_183))))) (spoon_94 cat_230)))
(assert (and (= cat_231 (spoon_112 cat_230)) (spoon_102 cat_231)))
(assert (= cat_232 ((_ to_fp 11 53) RNE cat_231)))
(assert (= cat_283 (mk_potato_11 cat_210)))
(assert (= cat_284 cat_232))
(assert (and (= cat_237 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_179))) (spoon_2 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_179)))))
(assert (= cat_238 (fp.mul RNE cat_237 cat_284)))
(assert (and (= cat_239 cat_238) (spoon_2 cat_238)))
(assert (and (= cat_233 (fp.sub RNE cat_280 cat_274)) (spoon_2 (fp.sub RNE cat_280 cat_274))))
(assert (= cat_234 (fp.sub RNE cat_233 cat_276)))
(assert (and (= cat_235 cat_234) (spoon_2 cat_234)))
(assert (= cat_236 (fp.mul RNE cat_235 cat_282)))
(assert (and (= cat_240 cat_236) (spoon_2 cat_236)))
(assert (= cat_241 (fp.add RNE cat_240 cat_239)))
(assert (and (= cat_242 cat_241) (spoon_2 cat_241)))
(assert (= cat_285 (mk_potato_11 cat_213)))
(assert (= cat_286 cat_242))
(assert (and (= cat_243 (fp.add RNE cat_280 cat_274)) (spoon_2 (fp.add RNE cat_280 cat_274))))
(assert (= cat_244 (fp.add RNE cat_243 cat_276)))
(assert (and (= cat_245 cat_244) (spoon_2 cat_244)))
(assert (= cat_287 (mk_potato_11 cat_214)))
(assert (= cat_288 cat_245))
(assert (and (= cat_246 (fp.div RNE cat_286 cat_288)) (spoon_2 (fp.div RNE cat_286 cat_288))))
(assert (= cat_289 (mk_potato_11 cat_212)))
(assert (= cat_290 cat_246))
(assert (=> (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (= cat_291 spoon_302)))
(assert (=> (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (= cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290) (= cat_293 spoon_302))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290) (= cat_294 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290)) (and (= cat_247 cat_290) (spoon_2 cat_290)))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290)) (= cat_295 spoon_302))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290)) (= cat_296 cat_247))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_290)) (= cat_294 cat_296))))
(assert (=> (not (fp.lt cat_290 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (= cat_292 cat_294)))
(assert (and (= cat_248 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_177))) (spoon_2 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_177)))))
(assert (= cat_297 (mk_potato_11 cat_216)))
(assert (= cat_298 cat_248))
(assert (and (= cat_253 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_179))) (spoon_2 (fp.mul RNE cat_278 ((_ to_fp 11 53) RNE cat_179)))))
(assert (= cat_254 (fp.mul RNE cat_253 cat_282)))
(assert (and (= cat_255 cat_254) (spoon_2 cat_254)))
(assert (and (= cat_249 (fp.sub RNE cat_280 cat_274)) (spoon_2 (fp.sub RNE cat_280 cat_274))))
(assert (= cat_250 (fp.sub RNE cat_249 cat_276)))
(assert (and (= cat_251 cat_250) (spoon_2 cat_250)))
(assert (= cat_252 (fp.mul RNE cat_251 cat_284)))
(assert (and (= cat_256 cat_252) (spoon_2 cat_252)))
(assert (= cat_257 (fp.sub RNE cat_256 cat_255)))
(assert (and (= cat_258 cat_257) (spoon_2 cat_257)))
(assert (= cat_299 (mk_potato_11 cat_217)))
(assert (= cat_300 cat_258))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300) (and (= cat_262 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_300)) (spoon_2 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_300)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300) (= cat_263 (ite (fp.leq cat_298 cat_262) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300) (and (= cat_261 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_300)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_300)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300) (= cat_264 (ite (fp.leq cat_261 cat_298) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300) (= cat_301 (ite (= cat_264 true) cat_263 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_300)) (= cat_301 false)))
(assert (not (= cat_301 true)))
(assert (fp.lt cat_300 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (and (= cat_259 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_300)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_300))))
(assert (= cat_260 (ite (fp.leq cat_298 cat_259) true false)))
(assert (not (spoon_2 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_300))))
(check-sat)
(exit)
