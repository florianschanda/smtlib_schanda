(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-fun spoon_23 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_24 ((kitten_23 Float64)) Bool (and (fp.isInfinite kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_25 ((kitten_24 Float64)) Bool (and (fp.isInfinite kitten_24) (fp.isNegative kitten_24)))
(define-fun spoon_26 ((kitten_25 Float64)) Bool (and (fp.isZero kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_27 ((kitten_26 Float64)) Bool (and (fp.isZero kitten_26) (fp.isNegative kitten_26)))
(declare-const cat_28 Int)
(define-fun spoon_29 ((kitten_27 Int)) Bool (and (<= (- cat_28) kitten_27) (<= kitten_27 cat_28)))
(define-fun spoon_30 ((kitten_28 Int)) Bool (and (<= (- 9007199254740992) kitten_28) (<= kitten_28 9007199254740992)))
(define-fun spoon_31 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isPositive kitten_30)) (and (fp.isNegative kitten_29) (fp.isNegative kitten_30))))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isNegative kitten_32)) (and (fp.isNegative kitten_31) (fp.isPositive kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64) (kitten_35 Float64)) Bool (and (=> (spoon_31 kitten_34 kitten_35) (fp.isPositive kitten_33)) (=> (spoon_32 kitten_34 kitten_35) (fp.isNegative kitten_33))))
(define-fun spoon_34 ((kitten_36 Float64) (kitten_37 Real)) Bool (or (and (fp.isPositive kitten_36) (< 0.0 kitten_37)) (and (fp.isNegative kitten_36) (< kitten_37 0.0))))
(declare-fun spoon_35 (Float64) Bool)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_38 Bool)) Int (ite (= kitten_38 true) 1 0))
(define-fun spoon_37 ((kitten_39 Int)) Bool (ite (= kitten_39 0) false true))
(define-fun spoon_38 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_39 (Bool) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_42 (potato_12 potato_12) Bool)
(declare-fun spoon_43 (Float32) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Float32)
(declare-const cat_46 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_47 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(define-fun spoon_48 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_42)))
(declare-sort potato_14 0)
(define-fun spoon_49 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_46) (fp.leq kitten_46 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_50 (potato_14 potato_14) Bool)
(declare-fun spoon_51 (Float32) potato_5)
(declare-fun spoon_52 (potato_5) Bool)
(declare-fun spoon_53 (potato_5) Float32)
(declare-const cat_54 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_55 ((kitten_47 potato_15)) potato_14 (get_potato_15_a kitten_47))
(define-fun spoon_56 ((kitten_48 Float32) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_49 kitten_48)))
(declare-sort potato_16 0)
(define-fun spoon_57 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_52) (fp.leq kitten_52 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_58 (potato_16 potato_16) Bool)
(declare-fun spoon_59 (Float32) potato_5)
(declare-fun spoon_60 (potato_5) Bool)
(declare-fun spoon_61 (potato_5) Float32)
(declare-const cat_62 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_63 ((kitten_53 potato_17)) potato_16 (get_potato_17_a kitten_53))
(define-fun spoon_64 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_57 kitten_54)))
(declare-sort potato_18 0)
(define-fun spoon_65 ((kitten_58 Float32)) Bool (and (spoon_1 kitten_58) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_58) (fp.leq kitten_58 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_66 (potato_18 potato_18) Bool)
(declare-fun spoon_67 (Float32) potato_5)
(declare-fun spoon_68 (potato_5) Bool)
(declare-fun spoon_69 (potato_5) Float32)
(declare-const cat_70 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_71 ((kitten_59 potato_19)) potato_18 (get_potato_19_a kitten_59))
(declare-sort potato_20 0)
(define-fun spoon_72 ((kitten_60 Float32)) Bool (and (spoon_1 kitten_60) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_60) (fp.leq kitten_60 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_73 (potato_20 potato_20) Bool)
(declare-fun spoon_74 (Float32) potato_5)
(declare-fun spoon_75 (potato_5) Bool)
(declare-fun spoon_76 (potato_5) Float32)
(declare-const cat_77 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_78 ((kitten_61 potato_21)) potato_20 (get_potato_21_a kitten_61))
(define-fun spoon_79 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_72 kitten_62)))
(define-fun spoon_80 ((kitten_66 Float32) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool)) Bool (=> (or (= kitten_67 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_65 kitten_66)))
(declare-fun spoon_81 (Float32) Float32)
(declare-fun spoon_82 (Float32 Float32) Bool)
(assert (forall ((kitten_70 Float32)) (! (=> (spoon_80 kitten_70 true true true) (spoon_79 (spoon_81 kitten_70) true false true)) :pattern ((spoon_81 kitten_70)))))
(declare-sort potato_22 0)
(declare-fun spoon_83 (potato_22 potato_22) Bool)
(declare-fun spoon_84 (Float64) potato_5)
(declare-fun spoon_85 (potato_5) Bool)
(declare-fun spoon_86 (potato_5) Float64)
(declare-const cat_87 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_88 ((kitten_71 potato_23)) potato_22 (get_potato_23_a kitten_71))
(declare-sort potato_24 0)
(declare-fun spoon_89 (potato_24 potato_24) Bool)
(declare-fun spoon_90 (Float64) potato_5)
(declare-fun spoon_91 (potato_5) Bool)
(declare-fun spoon_92 (potato_5) Float64)
(declare-const cat_93 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_94 ((kitten_72 potato_25)) potato_24 (get_potato_25_a kitten_72))
(define-fun spoon_95 ((kitten_73 Float64) (kitten_74 Bool) (kitten_75 Bool) (kitten_76 Bool)) Bool (=> (or (= kitten_74 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_73)))
(declare-sort potato_26 0)
(define-fun spoon_96 ((kitten_77 Float64)) Bool (and (spoon_2 kitten_77) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_77) (fp.leq kitten_77 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_97 (potato_26 potato_26) Bool)
(declare-fun spoon_98 (Float64) potato_5)
(declare-fun spoon_99 (potato_5) Bool)
(declare-fun spoon_100 (potato_5) Float64)
(declare-const cat_101 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_102 ((kitten_78 potato_27)) potato_26 (get_potato_27_a kitten_78))
(define-fun spoon_103 ((kitten_79 Float64) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (=> (or (= kitten_80 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_96 kitten_79)))
(declare-const cat_104 Float64)
(declare-const cat_105 Int)
(declare-const cat_106 Float32)
(declare-const cat_107 Int)
(declare-const cat_108 Float32)
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(declare-const cat_111 Int)
(declare-const cat_112 Float32)
(declare-const cat_113 Int)
(declare-const cat_114 Float32)
(declare-const cat_115 Int)
(declare-const cat_116 Float32)
(declare-const cat_117 Int)
(declare-const cat_118 Float32)
(declare-const cat_119 Int)
(declare-const cat_120 Int)
(declare-const cat_121 Int)
(assert (= cat_112 (spoon_81 cat_108)))
(assert (= cat_114 ((_ to_fp 8 24) RNE (fp.mul RNE cat_104 cat_104))))
(assert (= cat_116 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) (fp.mul RNE (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_114) (fp.mul RNE cat_112 cat_112)))))
(assert (= cat_118 (fp.sqrt RNE cat_116)))
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(assert (spoon_49 cat_108))
(assert (spoon_96 cat_104))
(assert (spoon_1 cat_106))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_106) (fp.leq cat_106 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_104) (fp.leq cat_104 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_49 cat_122)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_49 cat_123)))
(assert (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011100001)) cat_108))
(assert (fp.leq cat_108 (fp #b0 #b10000101 #b01100111111101011100001)))
(assert (and (= cat_124 cat_108) (spoon_1 cat_108)))
(assert (and (= cat_125 (spoon_81 cat_124)) (spoon_72 cat_125)))
(assert (= cat_125 cat_112))
(assert (spoon_72 cat_112))
(assert (= ((_ to_fp 8 24) RNE (fp.mul RNE cat_104 cat_104)) cat_114))
(assert (spoon_57 cat_114))
(assert (and (= cat_126 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_114)) (spoon_1 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_114))))
(assert (= cat_127 (fp.mul RNE cat_126 (fp.mul RNE cat_112 cat_112))))
(assert (not (spoon_1 cat_127)))
(check-sat)
(exit)
