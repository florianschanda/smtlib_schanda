(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-fun spoon_23 (Float32 Float32) Float32)
(declare-fun spoon_24 (Float32 Float32 Float32) Bool)
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_23 Float32)) Bool (and (spoon_1 kitten_23) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_23) (fp.leq kitten_23 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(define-fun spoon_32 ((kitten_25 Float32) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_26 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_25 kitten_25)))
(declare-sort potato_13 0)
(define-fun spoon_33 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_30) (fp.leq kitten_30 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_34 (potato_13 potato_13) Bool)
(declare-fun spoon_35 (Float32) potato_5)
(declare-fun spoon_36 (potato_5) Bool)
(declare-fun spoon_37 (potato_5) Float32)
(declare-const cat_38 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_39 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(define-fun spoon_40 ((kitten_32 Float32) (kitten_33 Bool) (kitten_34 Bool) (kitten_35 Bool) (kitten_36 Bool)) Bool (=> (or (= kitten_33 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_33 kitten_32)))
(assert (forall ((kitten_37 Float32) (kitten_38 Float32)) (! (=> (and (and (spoon_40 kitten_37 true true true true) (spoon_40 kitten_38 true true true true)) (or (not (fp.eq kitten_37 (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq kitten_38 (fp #b0 #b00000000 #b00000000000000000000000))))) (spoon_32 (spoon_23 kitten_37 kitten_38) true false true true)) :pattern ((spoon_23 kitten_37 kitten_38)))))
(declare-sort potato_15 0)
(define-fun spoon_41 ((kitten_39 Float32)) Bool (and (spoon_1 kitten_39) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_39) (fp.leq kitten_39 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_42 (potato_15 potato_15) Bool)
(declare-fun spoon_43 (Float32) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Float32)
(declare-const cat_46 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_47 ((kitten_40 potato_16)) potato_15 (get_potato_16_a kitten_40))
(declare-fun spoon_48 (potato_15) Float32)
(declare-fun spoon_49 (Float32) potato_15)
(assert (forall ((kitten_41 potato_15)) (! (= (spoon_49 (spoon_48 kitten_41)) kitten_41) :pattern ((spoon_48 kitten_41)))))
(assert (forall ((kitten_42 potato_15)) (! (spoon_41 (spoon_48 kitten_42)) :pattern ((spoon_48 kitten_42)))))
(assert (forall ((kitten_43 Float32)) (! (=> (spoon_41 kitten_43) (= (spoon_48 (spoon_49 kitten_43)) kitten_43)) :pattern ((spoon_48 (spoon_49 kitten_43))))))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15) (get_potato_17_b potato_15)))))
(define-fun spoon_50 ((kitten_44 potato_17)) potato_15 (get_potato_17_a kitten_44))
(define-fun spoon_51 ((kitten_45 potato_17)) potato_15 (get_potato_17_b kitten_45))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_52 ((kitten_46 potato_18)) potato_17 (get_potato_18_a kitten_46))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_17)))))
(define-fun spoon_53 ((kitten_47 potato_19)) potato_17 (get_potato_19_a kitten_47))
(define-fun spoon_54 ((kitten_48 potato_19) (kitten_49 potato_19)) Bool (ite (and (= (spoon_48 (get_potato_17_a (get_potato_19_a kitten_48))) (spoon_48 (get_potato_17_a (get_potato_19_a kitten_49)))) (= (spoon_48 (get_potato_17_b (get_potato_19_a kitten_48))) (spoon_48 (get_potato_17_b (get_potato_19_a kitten_49))))) true false))
(declare-const cat_55 Int)
(declare-fun spoon_56 (potato_19) Int)
(declare-const cat_57 Int)
(declare-fun spoon_58 (potato_19) Int)
(assert (<= 0 cat_55))
(assert (forall ((kitten_50 potato_19)) (<= 0 (spoon_56 kitten_50))))
(assert (<= 0 cat_57))
(assert (forall ((kitten_51 potato_19)) (<= 0 (spoon_58 kitten_51))))
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(declare-const cat_61 Int)
(assert (<= 0 cat_59))
(assert (< cat_59 cat_60))
(assert (<= 0 cat_61))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(assert (<= 0 cat_62))
(assert (< cat_62 cat_63))
(assert (<= 0 cat_64))
(declare-fun spoon_65 (potato_19 potato_19) Bool)
(declare-const cat_66 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_67 ((kitten_52 potato_20)) potato_19 (get_potato_20_a kitten_52))
(declare-sort potato_21 0)
(define-fun spoon_68 ((kitten_53 Float32)) Bool (and (spoon_1 kitten_53) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_53) (fp.leq kitten_53 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_69 (potato_21 potato_21) Bool)
(declare-fun spoon_70 (Float32) potato_5)
(declare-fun spoon_71 (potato_5) Bool)
(declare-fun spoon_72 (potato_5) Float32)
(declare-const cat_73 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_74 ((kitten_54 potato_22)) potato_21 (get_potato_22_a kitten_54))
(define-fun spoon_75 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_68 kitten_55)))
(declare-const cat_76 potato_19)
(declare-const cat_77 Int)
(declare-const cat_78 potato_19)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(define-fun spoon_84 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_41 kitten_60)))
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_33 cat_85)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_33 cat_86)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000)) (spoon_25 cat_87)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_68 cat_88)))
(assert (not (= (spoon_54 cat_76 cat_78) true)))
(assert (= cat_90 (fp.sub RNE (spoon_48 (get_potato_17_a (get_potato_19_a cat_78))) (spoon_48 (get_potato_17_a (get_potato_19_a cat_76))))))
(assert (= cat_91 (fp.sub RNE (spoon_48 (get_potato_17_b (get_potato_19_a cat_78))) (spoon_48 (get_potato_17_b (get_potato_19_a cat_76))))))
(assert (= cat_89 (spoon_23 cat_90 cat_91)))
(assert (spoon_25 cat_89))
(assert (= cat_92 cat_89))
(assert (fp.lt cat_92 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (not (spoon_68 (fp.add RNE cat_92 (fp #b0 #b10000111 #b01101000000000000000000)))))
(check-sat)
(exit)
