(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(declare-fun spoon_32 (potato_11) Float32)
(declare-fun spoon_33 (Float32) potato_11)
(assert (forall ((kitten_24 potato_11)) (! (= (spoon_33 (spoon_32 kitten_24)) kitten_24) :pattern ((spoon_32 kitten_24)))))
(assert (forall ((kitten_25 potato_11)) (! (spoon_25 (spoon_32 kitten_25)) :pattern ((spoon_32 kitten_25)))))
(assert (forall ((kitten_26 Float32)) (! (=> (spoon_25 kitten_26) (= (spoon_32 (spoon_33 kitten_26)) kitten_26)) :pattern ((spoon_32 (spoon_33 kitten_26))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_34 ((kitten_27 potato_14)) potato_13 (get_potato_14_a kitten_27))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_35 ((kitten_28 potato_15)) potato_13 (get_potato_15_a kitten_28))
(define-fun spoon_36 ((kitten_29 potato_15) (kitten_30 potato_15)) Bool (ite (and (= (spoon_32 (get_potato_13_a (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_a (get_potato_15_a kitten_30)))) (= (spoon_32 (get_potato_13_b (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_b (get_potato_15_a kitten_30))))) true false))
(declare-const cat_37 Int)
(declare-fun spoon_38 (potato_15) Int)
(declare-const cat_39 Int)
(declare-fun spoon_40 (potato_15) Int)
(assert (<= 0 cat_37))
(assert (forall ((kitten_31 potato_15)) (<= 0 (spoon_38 kitten_31))))
(assert (<= 0 cat_39))
(assert (forall ((kitten_32 potato_15)) (<= 0 (spoon_40 kitten_32))))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-fun spoon_47 (potato_15 potato_15) Bool)
(declare-const cat_48 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_49 ((kitten_33 potato_16)) potato_15 (get_potato_16_a kitten_33))
(declare-sort potato_17 0)
(define-fun spoon_50 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_34) (fp.leq kitten_34 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_51 (potato_17 potato_17) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_56 ((kitten_35 potato_18)) potato_17 (get_potato_18_a kitten_35))
(define-fun spoon_57 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_50 kitten_36)))
(declare-sort potato_19 0)
(define-fun spoon_58 ((kitten_40 Float32)) Bool (and (spoon_1 kitten_40) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_40) (fp.leq kitten_40 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_59 (potato_19 potato_19) Bool)
(declare-fun spoon_60 (Float32) potato_5)
(declare-fun spoon_61 (potato_5) Bool)
(declare-fun spoon_62 (potato_5) Float32)
(declare-const cat_63 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_64 ((kitten_41 potato_20)) potato_19 (get_potato_20_a kitten_41))
(define-fun spoon_65 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_58 kitten_42)))
(declare-fun spoon_66 (potato_15 potato_15) Float32)
(declare-fun spoon_67 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_46 potato_15) (kitten_47 potato_15)) (! (spoon_57 (spoon_66 kitten_46 kitten_47) true false true) :pattern ((spoon_66 kitten_46 kitten_47)))))
(declare-const cat_68 potato_15)
(declare-const cat_69 Int)
(declare-const cat_70 potato_15)
(declare-const cat_71 Int)
(declare-const cat_72 potato_15)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-sort potato_21 0)
(define-fun spoon_76 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_48) (fp.leq kitten_48 (fp #b0 #b10001000 #b01101000000000000000000)))))
(declare-fun spoon_77 (potato_21 potato_21) Bool)
(declare-fun spoon_78 (Float32) potato_5)
(declare-fun spoon_79 (potato_5) Bool)
(declare-fun spoon_80 (potato_5) Float32)
(declare-const cat_81 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_82 ((kitten_49 potato_22)) potato_21 (get_potato_22_a kitten_49))
(define-fun spoon_83 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b01101000000000000000000))) (spoon_76 kitten_50)))
(declare-sort potato_23 0)
(define-fun spoon_84 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_85 (potato_23 potato_23) Bool)
(declare-fun spoon_86 (Float32) potato_5)
(declare-fun spoon_87 (potato_5) Bool)
(declare-fun spoon_88 (potato_5) Float32)
(declare-const cat_89 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_90 ((kitten_55 potato_24)) potato_23 (get_potato_24_a kitten_55))
(define-fun spoon_91 ((kitten_56 Float32) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_57 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_84 kitten_56)))
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(define-fun spoon_96 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_60)))
(declare-const cat_97 Float32)
(declare-const cat_98 Float32)
(declare-const cat_99 Float32)
(declare-const cat_100 Float32)
(declare-const cat_101 Float32)
(declare-const cat_102 Float32)
(declare-const cat_103 Float32)
(declare-const cat_104 Float32)
(declare-const cat_105 Float32)
(declare-const cat_106 Float32)
(declare-const cat_107 Float32)
(declare-const cat_108 Float32)
(declare-const cat_109 Float32)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Float32)
(declare-const cat_115 Float32)
(declare-const cat_116 Float32)
(declare-const cat_117 Float32)
(declare-const cat_118 Float32)
(declare-const cat_119 Float32)
(declare-const cat_120 Float32)
(declare-const cat_121 Float32)
(declare-const cat_122 Float32)
(declare-const cat_123 Float32)
(declare-const cat_124 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000)) (spoon_58 cat_97)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_50 cat_98)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b01101000000000000000000)) (spoon_76 cat_99)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_84 cat_100)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_50 cat_101)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_50 cat_102)))
(assert (and (= cat_103 (spoon_66 cat_68 cat_70)) (spoon_50 cat_103)))
(assert (= cat_109 cat_101))
(assert (= cat_110 cat_103))
(assert (and (= cat_104 (spoon_66 cat_70 cat_72)) (spoon_50 cat_104)))
(assert (= cat_111 cat_102))
(assert (= cat_112 cat_104))
(assert (= cat_113 cat_100))
(assert (= cat_114 (fp.sub RNE cat_112 cat_110)))
(assert (=> (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114) (and (= cat_105 (fp.sub RNE cat_114 (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_1 (fp.sub RNE cat_114 (fp #b0 #b10000111 #b01101000000000000000000))))))
(assert (=> (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114) (= cat_115 cat_97)))
(assert (=> (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114) (= cat_116 cat_105)))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))) (and (= cat_106 (fp.add RNE cat_114 (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_1 (fp.add RNE cat_114 (fp #b0 #b10000111 #b01101000000000000000000)))))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))) (= cat_117 cat_97))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000))) (= cat_118 cat_106))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (not (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)))) (and (= cat_107 cat_114) (spoon_1 cat_114)))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (not (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)))) (= cat_119 cat_97))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (not (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)))) (= cat_120 cat_107))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (=> (not (fp.leq cat_114 (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)))) (= cat_118 cat_120))))
(assert (=> (not (fp.leq (fp #b0 #b10000110 #b01101000000000000000000) cat_114)) (= cat_116 cat_118)))
(assert (= cat_121 cat_99))
(assert (= cat_122 (fp.div RNE (fp.sub RNE (fp #b0 #b10000110 #b01101000000000000000000) cat_116) (fp #b0 #b10000000 #b00000000000000000000000))))
(assert (and (= cat_108 (fp.add RNE cat_112 cat_122)) (spoon_1 (fp.add RNE cat_112 cat_122))))
(assert (= cat_123 cat_122))
(assert (= cat_124 cat_108))
(assert (not (fp.lt (fp #b0 #b10000111 #b01101000000000000000000) cat_124)))
(assert (not (spoon_50 cat_124)))
(check-sat)
(exit)
