;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(define-fun spoon_3 ((kitten_3 (_ FloatingPoint 11 53))) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 (_ FloatingPoint 11 53))) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral roundNearestTiesToEven kitten_4)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-fun cat_6 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun cat_16 () Int)
(define-fun spoon_17 ((kitten_13 Int)) Bool (and (<= (- cat_16) kitten_13) (<= kitten_13 cat_16)))
(define-fun spoon_18 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_19 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_20 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_21 ((kitten_19 (_ FloatingPoint 8 24)) (kitten_20 (_ FloatingPoint 8 24)) (kitten_21 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_19 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_20 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_22 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_23 (_ FloatingPoint 8 24)) (kitten_24 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_23) (< _let_0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(define-fun spoon_25 ((kitten_25 (_ FloatingPoint 11 53))) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_26 ((kitten_26 (_ FloatingPoint 11 53))) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_27 ((kitten_27 (_ FloatingPoint 11 53))) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_28 ((kitten_28 (_ FloatingPoint 11 53))) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun cat_29 () Int)
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= (- cat_29) kitten_29) (<= kitten_29 cat_29)))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_32 ((kitten_31 (_ FloatingPoint 11 53)) (kitten_32 (_ FloatingPoint 11 53))) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_33 ((kitten_33 (_ FloatingPoint 11 53)) (kitten_34 (_ FloatingPoint 11 53))) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_34 ((kitten_35 (_ FloatingPoint 11 53)) (kitten_36 (_ FloatingPoint 11 53)) (kitten_37 (_ FloatingPoint 11 53))) Bool (and (=> (spoon_32 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_33 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_35 ((kitten_38 (_ FloatingPoint 11 53)) (kitten_39 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_38) (< _let_0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 _let_0)))))
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a (_ FloatingPoint 11 53))))))

(define-fun spoon_36 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_37 (Bool) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_40 (potato_12 potato_12) Bool)
(declare-fun spoon_41 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_42 (potato_5) Bool)
(declare-fun spoon_43 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_44 () potato_12)
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_45 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(define-fun spoon_46 ((kitten_42 (_ FloatingPoint 8 24)) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (or (= kitten_43 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_1 kitten_42))))
(declare-sort potato_14 0)
(define-fun spoon_47 ((kitten_47 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_47) (and (fp.leq (fp.neg _let_0) kitten_47) (fp.leq kitten_47 _let_0)))))
(declare-fun spoon_48 (potato_14 potato_14) Bool)
(declare-fun spoon_49 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_50 (potato_5) Bool)
(declare-fun spoon_51 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_52 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_53 ((kitten_48 potato_15)) potato_14 (get_potato_15_a kitten_48))
(declare-fun spoon_54 (potato_14) (_ FloatingPoint 8 24))
(declare-fun spoon_55 ((_ FloatingPoint 8 24)) potato_14)
(assert (forall ((kitten_49 potato_14)) (! (= (spoon_55 (spoon_54 kitten_49)) kitten_49) :pattern ((spoon_54 kitten_49)))))
(assert (forall ((kitten_50 potato_14)) (! (spoon_47 (spoon_54 kitten_50)) :pattern ((spoon_54 kitten_50)))))
(assert (forall ((kitten_51 (_ FloatingPoint 8 24))) (! (=> (spoon_47 kitten_51) (= (spoon_54 (spoon_55 kitten_51)) kitten_51)) :pattern ((spoon_54 (spoon_55 kitten_51))))))
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_14) (get_potato_16_b potato_14)))))

(define-fun spoon_56 ((kitten_52 potato_16)) potato_14 (get_potato_16_a kitten_52))
(define-fun spoon_57 ((kitten_53 potato_16)) potato_14 (get_potato_16_b kitten_53))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_16)))))

(define-fun spoon_58 ((kitten_54 potato_17)) potato_16 (get_potato_17_a kitten_54))
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_16)))))

(define-fun spoon_59 ((kitten_55 potato_18)) potato_16 (get_potato_18_a kitten_55))
(define-fun spoon_60 ((kitten_56 potato_18) (kitten_57 potato_18)) Bool (let ((_let_0 (get_potato_18_a kitten_56))) (let ((_let_1 (get_potato_18_a kitten_57))) (ite (and (= (spoon_54 (get_potato_16_a _let_0)) (spoon_54 (get_potato_16_a _let_1))) (= (spoon_54 (get_potato_16_b _let_0)) (spoon_54 (get_potato_16_b _let_1)))) true false))))
(declare-fun cat_61 () Int)
(declare-fun spoon_62 (potato_18) Int)
(declare-fun cat_63 () Int)
(declare-fun spoon_64 (potato_18) Int)
(assert (<= 0 cat_61))
(assert (forall ((kitten_58 potato_18)) (<= 0 (spoon_62 kitten_58)) ))
(assert (<= 0 cat_63))
(assert (forall ((kitten_59 potato_18)) (<= 0 (spoon_64 kitten_59)) ))
(declare-fun cat_65 () Int)
(declare-fun cat_66 () Int)
(declare-fun cat_67 () Int)
(assert (<= 0 cat_65))
(assert (< cat_65 cat_66))
(assert (<= 0 cat_67))
(declare-fun cat_68 () Int)
(declare-fun cat_69 () Int)
(declare-fun cat_70 () Int)
(assert (<= 0 cat_68))
(assert (< cat_68 cat_69))
(assert (<= 0 cat_70))
(declare-fun spoon_71 (potato_18 potato_18) Bool)
(declare-fun cat_72 () potato_18)
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a potato_18)))))

(define-fun spoon_73 ((kitten_60 potato_19)) potato_18 (get_potato_19_a kitten_60))
(declare-fun spoon_74 (potato_18 potato_18) Bool)
(declare-fun spoon_75 (Bool potato_18 potato_18) Bool)
(assert true)
(declare-fun spoon_76 ((_ FloatingPoint 8 24)) (_ FloatingPoint 8 24))
(declare-fun spoon_77 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-sort potato_20 0)
(define-fun spoon_78 ((kitten_61 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (and (spoon_1 kitten_61) (and (fp.leq (fp.neg _let_0) kitten_61) (fp.leq kitten_61 _let_0)))))
(declare-fun spoon_79 (potato_20 potato_20) Bool)
(declare-fun spoon_80 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_81 (potato_5) Bool)
(declare-fun spoon_82 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_83 () potato_20)
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a potato_20)))))

(define-fun spoon_84 ((kitten_62 potato_21)) potato_20 (get_potato_21_a kitten_62))
(define-fun spoon_85 ((kitten_63 (_ FloatingPoint 8 24)) (kitten_64 Bool) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (=> (or (= kitten_64 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_78 kitten_63))))
(declare-sort potato_22 0)
(define-fun spoon_86 ((kitten_68 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (and (spoon_1 kitten_68) (and (fp.leq (fp.neg _let_0) kitten_68) (fp.leq kitten_68 _let_0)))))
(declare-fun spoon_87 (potato_22 potato_22) Bool)
(declare-fun spoon_88 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_89 (potato_5) Bool)
(declare-fun spoon_90 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_91 () potato_22)
(declare-datatypes ((potato_23 0)) (((mk_potato_23 (get_potato_23_a potato_22)))))

(define-fun spoon_92 ((kitten_69 potato_23)) potato_22 (get_potato_23_a kitten_69))
(define-fun spoon_93 ((kitten_70 (_ FloatingPoint 8 24)) (kitten_71 Bool) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (=> (or (= kitten_71 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_86 kitten_70))))
(assert (forall ((kitten_75 (_ FloatingPoint 8 24))) (! (=> (spoon_85 kitten_75 true true true true) (spoon_93 (spoon_76 kitten_75) true false true true)) :pattern ((spoon_76 kitten_75)))))
(declare-fun spoon_94 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) (_ FloatingPoint 8 24))
(declare-fun spoon_95 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-sort potato_24 0)
(define-fun spoon_96 ((kitten_76 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv134 8) (_ bv3407872 23)))) (and (spoon_1 kitten_76) (and (fp.leq (fp.neg _let_0) kitten_76) (fp.leq kitten_76 _let_0)))))
(declare-fun spoon_97 (potato_24 potato_24) Bool)
(declare-fun spoon_98 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_99 (potato_5) Bool)
(declare-fun spoon_100 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_101 () potato_24)
(declare-datatypes ((potato_25 0)) (((mk_potato_25 (get_potato_25_a potato_24)))))

(define-fun spoon_102 ((kitten_77 potato_25)) potato_24 (get_potato_25_a kitten_77))
(define-fun spoon_103 ((kitten_78 (_ FloatingPoint 8 24)) (kitten_79 Bool) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv134 8) (_ bv3407872 23)))) (=> (or (= kitten_79 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_96 kitten_78))))
(assert (forall ((kitten_83 (_ FloatingPoint 8 24)) (kitten_84 (_ FloatingPoint 8 24))) (! (=> (and (spoon_103 kitten_83 true true true true) (spoon_103 kitten_84 true true true true)) (spoon_103 (spoon_94 kitten_83 kitten_84) true false true true)) :pattern ((spoon_94 kitten_83 kitten_84)))))
(declare-sort potato_26 0)
(define-fun spoon_104 ((kitten_85 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (and (spoon_1 kitten_85) (and (fp.leq (fp.neg _let_0) kitten_85) (fp.leq kitten_85 _let_0)))))
(declare-fun spoon_105 (potato_26 potato_26) Bool)
(declare-fun spoon_106 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_107 (potato_5) Bool)
(declare-fun spoon_108 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_109 () potato_26)
(declare-datatypes ((potato_27 0)) (((mk_potato_27 (get_potato_27_a potato_26)))))

(define-fun spoon_110 ((kitten_86 potato_27)) potato_26 (get_potato_27_a kitten_86))
(declare-fun spoon_111 (potato_26) (_ FloatingPoint 8 24))
(declare-fun spoon_112 ((_ FloatingPoint 8 24)) potato_26)
(assert (forall ((kitten_87 potato_26)) (! (= (spoon_112 (spoon_111 kitten_87)) kitten_87) :pattern ((spoon_111 kitten_87)))))
(assert (forall ((kitten_88 potato_26)) (! (spoon_104 (spoon_111 kitten_88)) :pattern ((spoon_111 kitten_88)))))
(assert (forall ((kitten_89 (_ FloatingPoint 8 24))) (! (=> (spoon_104 kitten_89) (= (spoon_111 (spoon_112 kitten_89)) kitten_89)) :pattern ((spoon_111 (spoon_112 kitten_89))))))
(declare-fun spoon_113 (potato_24) (_ FloatingPoint 8 24))
(declare-fun spoon_114 ((_ FloatingPoint 8 24)) potato_24)
(assert (forall ((kitten_90 potato_24)) (! (= (spoon_114 (spoon_113 kitten_90)) kitten_90) :pattern ((spoon_113 kitten_90)))))
(assert (forall ((kitten_91 potato_24)) (! (spoon_96 (spoon_113 kitten_91)) :pattern ((spoon_113 kitten_91)))))
(assert (forall ((kitten_92 (_ FloatingPoint 8 24))) (! (=> (spoon_96 kitten_92) (= (spoon_113 (spoon_114 kitten_92)) kitten_92)) :pattern ((spoon_113 (spoon_114 kitten_92))))))
(declare-datatypes ((potato_28 0)) (((mk_potato_28 (get_potato_28_a potato_26) (get_potato_28_b potato_24)))))

(define-fun spoon_115 ((kitten_93 potato_28)) potato_26 (get_potato_28_a kitten_93))
(define-fun spoon_116 ((kitten_94 potato_28)) potato_24 (get_potato_28_b kitten_94))
(declare-datatypes ((potato_29 0)) (((mk_potato_29 (get_potato_29_a potato_28)))))

(define-fun spoon_117 ((kitten_95 potato_29)) potato_28 (get_potato_29_a kitten_95))
(declare-datatypes ((potato_30 0)) (((mk_potato_30 (get_potato_30_a potato_28)))))

(define-fun spoon_118 ((kitten_96 potato_30)) potato_28 (get_potato_30_a kitten_96))
(define-fun spoon_119 ((kitten_97 potato_30) (kitten_98 potato_30)) Bool (let ((_let_0 (get_potato_30_a kitten_97))) (let ((_let_1 (get_potato_30_a kitten_98))) (ite (and (= (spoon_111 (get_potato_28_a _let_0)) (spoon_111 (get_potato_28_a _let_1))) (= (spoon_113 (get_potato_28_b _let_0)) (spoon_113 (get_potato_28_b _let_1)))) true false))))
(declare-fun cat_120 () Int)
(declare-fun spoon_121 (potato_30) Int)
(declare-fun cat_122 () Int)
(declare-fun spoon_123 (potato_30) Int)
(assert (<= 0 cat_120))
(assert (forall ((kitten_99 potato_30)) (<= 0 (spoon_121 kitten_99)) ))
(assert (<= 0 cat_122))
(assert (forall ((kitten_100 potato_30)) (<= 0 (spoon_123 kitten_100)) ))
(declare-fun cat_124 () Int)
(declare-fun cat_125 () Int)
(declare-fun cat_126 () Int)
(assert (<= 0 cat_124))
(assert (< cat_124 cat_125))
(assert (<= 0 cat_126))
(declare-fun cat_127 () Int)
(declare-fun cat_128 () Int)
(declare-fun cat_129 () Int)
(assert (<= 0 cat_127))
(assert (< cat_127 cat_128))
(assert (<= 0 cat_129))
(declare-fun spoon_130 (potato_30 potato_30) Bool)
(declare-fun cat_131 () potato_30)
(declare-datatypes ((potato_31 0)) (((mk_potato_31 (get_potato_31_a potato_30)))))

(define-fun spoon_132 ((kitten_101 potato_31)) potato_30 (get_potato_31_a kitten_101))
(declare-fun cat_133 () potato_18)
(declare-fun cat_134 () Int)
(define-fun spoon_135 ((kitten_102 (_ FloatingPoint 8 24)) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool) (kitten_106 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (=> (or (= kitten_103 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_104 kitten_102))))
(declare-fun cat_136 () potato_30)
(declare-fun cat_137 () Int)
(declare-sort potato_32 0)
(define-fun spoon_138 ((kitten_107 (_ FloatingPoint 11 53))) Bool (and (spoon_3 kitten_107) (and (fp.leq (fp (_ bv0 1) (_ bv1034 11) (_ bv2973079441506304 52)) kitten_107) (fp.leq kitten_107 (fp (_ bv0 1) (_ bv1034 11) (_ bv3192981767061504 52))))))
(declare-fun spoon_139 (potato_32 potato_32) Bool)
(declare-fun spoon_140 ((_ FloatingPoint 11 53)) potato_5)
(declare-fun spoon_141 (potato_5) Bool)
(declare-fun spoon_142 (potato_5) (_ FloatingPoint 11 53))
(declare-fun cat_143 () potato_32)
(declare-datatypes ((potato_33 0)) (((mk_potato_33 (get_potato_33_a potato_32)))))

(define-fun spoon_144 ((kitten_108 potato_33)) potato_32 (get_potato_33_a kitten_108))
(define-fun spoon_145 ((kitten_109 (_ FloatingPoint 11 53)) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool) (kitten_113 Bool)) Bool (=> (or (= kitten_110 true) (fp.leq (fp (_ bv0 1) (_ bv1034 11) (_ bv2973079441506304 52)) (fp (_ bv0 1) (_ bv1034 11) (_ bv3192981767061504 52)))) (spoon_138 kitten_109)))
(declare-sort potato_34 0)
(define-fun spoon_146 ((kitten_114 (_ FloatingPoint 11 53))) Bool (and (spoon_3 kitten_114) (and (fp.leq (fp (_ bv0 1) (_ bv0 11) (_ bv0 52)) kitten_114) (fp.leq kitten_114 (fp (_ bv0 1) (_ bv1023 11) (_ bv0 52))))))
(declare-fun spoon_147 (potato_34 potato_34) Bool)
(declare-fun spoon_148 ((_ FloatingPoint 11 53)) potato_5)
(declare-fun spoon_149 (potato_5) Bool)
(declare-fun spoon_150 (potato_5) (_ FloatingPoint 11 53))
(declare-fun cat_151 () potato_34)
(declare-datatypes ((potato_35 0)) (((mk_potato_35 (get_potato_35_a potato_34)))))

(define-fun spoon_152 ((kitten_115 potato_35)) potato_34 (get_potato_35_a kitten_115))
(define-fun spoon_153 ((kitten_116 (_ FloatingPoint 11 53)) (kitten_117 Bool) (kitten_118 Bool) (kitten_119 Bool) (kitten_120 Bool)) Bool (=> (or (= kitten_117 true) (fp.leq (fp (_ bv0 1) (_ bv0 11) (_ bv0 52)) (fp (_ bv0 1) (_ bv1023 11) (_ bv0 52)))) (spoon_146 kitten_116)))
(declare-sort potato_36 0)
(define-fun spoon_154 ((kitten_121 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (and (spoon_1 kitten_121) (and (fp.leq (fp.neg _let_0) kitten_121) (fp.leq kitten_121 _let_0)))))
(declare-fun spoon_155 (potato_36 potato_36) Bool)
(declare-fun spoon_156 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_157 (potato_5) Bool)
(declare-fun spoon_158 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_159 () potato_36)
(declare-datatypes ((potato_37 0)) (((mk_potato_37 (get_potato_37_a potato_36)))))

(define-fun spoon_160 ((kitten_122 potato_37)) potato_36 (get_potato_37_a kitten_122))
(define-fun spoon_161 ((kitten_123 (_ FloatingPoint 8 24)) (kitten_124 Bool) (kitten_125 Bool) (kitten_126 Bool) (kitten_127 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (=> (or (= kitten_124 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_154 kitten_123))))
(declare-fun cat_162 () potato_18)
(declare-fun cat_163 () Int)
(declare-fun cat_164 () potato_30)
(declare-fun cat_165 () Int)
(declare-fun cat_166 () (_ FloatingPoint 11 53))
(declare-fun cat_167 () Int)
(declare-fun cat_168 () (_ FloatingPoint 11 53))
(declare-fun cat_169 () Int)
(declare-fun cat_170 () (_ FloatingPoint 8 24))
(declare-fun cat_171 () Int)
(declare-fun cat_172 () Int)
(declare-fun cat_173 () Int)
(declare-fun cat_174 () Int)
(declare-fun cat_175 () Int)
(declare-fun cat_176 () Int)
(declare-fun cat_177 () Int)
(declare-fun cat_178 () Int)
(declare-fun cat_179 () Int)
(declare-fun cat_180 () Int)
(declare-fun cat_181 () Int)
(declare-fun cat_182 () Int)
(declare-fun cat_183 () Int)
(define-fun spoon_184 ((kitten_128 (_ FloatingPoint 8 24)) (kitten_129 Bool) (kitten_130 Bool) (kitten_131 Bool) (kitten_132 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_129 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_47 kitten_128))))
(assert (let ((_let_0 (spoon_55 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))) (= cat_133 (mk_potato_18 (mk_potato_16 _let_0 _let_0)))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)))) (= cat_136 (mk_potato_30 (mk_potato_28 (spoon_112 _let_0) (spoon_114 _let_0))))))
(declare-fun cat_185 () (_ FloatingPoint 8 24))
(declare-fun cat_186 () (_ FloatingPoint 8 24))
(declare-fun cat_187 () (_ FloatingPoint 8 24))
(declare-fun cat_188 () potato_14)
(declare-fun cat_189 () potato_14)
(declare-fun cat_190 () potato_14)
(declare-fun cat_191 () potato_14)
(declare-fun cat_192 () potato_14)
(declare-fun cat_193 () potato_14)
(declare-fun cat_194 () potato_24)
(declare-fun cat_195 () potato_26)
(declare-fun cat_196 () potato_26)
(declare-fun cat_197 () potato_24)
(declare-fun cat_198 () potato_26)
(declare-fun cat_199 () potato_24)
(declare-fun cat_200 () Bool)
(declare-fun cat_201 () (_ FloatingPoint 8 24))
(declare-fun cat_202 () (_ FloatingPoint 8 24))
(declare-fun cat_203 () (_ FloatingPoint 8 24))
(declare-fun cat_204 () (_ FloatingPoint 8 24))
(declare-fun cat_205 () (_ FloatingPoint 8 24))
(declare-fun cat_206 () (_ FloatingPoint 8 24))
(declare-fun cat_207 () (_ FloatingPoint 8 24))
(declare-fun cat_208 () (_ FloatingPoint 8 24))
(declare-fun cat_209 () (_ FloatingPoint 8 24))
(declare-fun cat_210 () (_ FloatingPoint 8 24))
(declare-fun cat_211 () (_ FloatingPoint 8 24))
(declare-fun cat_212 () (_ FloatingPoint 8 24))
(declare-fun cat_213 () (_ FloatingPoint 8 24))
(declare-fun cat_214 () (_ FloatingPoint 8 24))
(declare-fun cat_215 () (_ FloatingPoint 8 24))
(declare-fun cat_216 () (_ FloatingPoint 8 24))
(declare-fun cat_217 () (_ FloatingPoint 8 24))
(declare-fun cat_218 () (_ FloatingPoint 8 24))
(declare-fun cat_219 () (_ FloatingPoint 8 24))
(declare-fun cat_220 () (_ FloatingPoint 8 24))
(declare-fun cat_221 () (_ FloatingPoint 8 24))
(declare-fun cat_222 () (_ FloatingPoint 8 24))
(declare-fun cat_223 () (_ FloatingPoint 8 24))
(declare-fun cat_224 () Bool)
(declare-fun cat_225 () Bool)
(declare-fun cat_226 () (_ FloatingPoint 8 24))
(declare-fun cat_227 () (_ FloatingPoint 8 24))
(declare-fun cat_228 () (_ FloatingPoint 8 24))
(declare-fun cat_229 () (_ FloatingPoint 8 24))
(declare-fun cat_230 () (_ FloatingPoint 8 24))
(declare-fun cat_231 () (_ FloatingPoint 8 24))
(declare-fun cat_232 () Bool)
(declare-fun cat_233 () Bool)
(declare-fun cat_234 () potato_28)
(declare-fun cat_235 () potato_10)
(declare-fun cat_236 () (_ FloatingPoint 8 24))
(declare-fun cat_237 () potato_10)
(declare-fun cat_238 () (_ FloatingPoint 8 24))
(declare-fun cat_239 () potato_10)
(declare-fun cat_240 () (_ FloatingPoint 8 24))
(declare-fun cat_241 () potato_10)
(declare-fun cat_242 () (_ FloatingPoint 8 24))
(declare-fun cat_243 () potato_10)
(declare-fun cat_244 () (_ FloatingPoint 8 24))
(declare-fun cat_245 () potato_10)
(declare-fun cat_246 () (_ FloatingPoint 8 24))
(declare-fun cat_247 () potato_10)
(declare-fun cat_248 () (_ FloatingPoint 8 24))
(declare-fun cat_249 () potato_10)
(declare-fun cat_250 () (_ FloatingPoint 8 24))
(declare-fun cat_251 () potato_7)
(declare-fun cat_252 () Bool)
(declare-fun cat_253 () (_ FloatingPoint 8 24))
(declare-fun cat_254 () (_ FloatingPoint 8 24))
(declare-fun cat_255 () Bool)
(assert (= (spoon_54 cat_188) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (= cat_188 cat_191))
(assert (= (spoon_54 cat_189) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (= cat_189 cat_190))
(assert (= cat_192 cat_190))
(assert (= cat_193 cat_191))
(assert (= (mk_potato_18 (mk_potato_16 cat_192 cat_193)) cat_133))
(assert (= (spoon_113 cat_194) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (= cat_194 cat_197))
(assert (= (spoon_111 cat_195) (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (= cat_195 cat_196))
(assert (= cat_198 cat_196))
(assert (= cat_199 cat_197))
(assert (= (mk_potato_30 (mk_potato_28 cat_198 cat_199)) cat_136))
(assert (spoon_146 cat_166))
(assert (spoon_138 cat_168))
(assert (spoon_154 cat_170))
(assert (fp.leq (fp (_ bv0 1) (_ bv117 8) (_ bv201327 23)) cat_170))
(assert (fp.leq cat_170 (fp (_ bv0 1) (_ bv120 8) (_ bv2348810 23))))
(assert (fp.leq (fp (_ bv0 1) (_ bv1016 11) (_ bv1261007895663739 52)) cat_166))
(assert (fp.leq cat_166 (fp (_ bv0 1) (_ bv1019 11) (_ bv2702159776422298 52))))
(assert (= cat_226 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_1 cat_226))
(assert (= cat_227 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_1 cat_227))
(assert (= cat_228 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_1 cat_228))
(assert (= cat_229 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_1 cat_229))
(assert (= cat_230 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_154 cat_230))
(assert (= cat_231 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_86 cat_231))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_104 cat_185))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_1 cat_186))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_1 cat_187))))
(assert (= cat_200 (spoon_74 cat_162 cat_133)))
(assert (= cat_232 (ite (not (= cat_200 true)) true false)))
(assert (= cat_232 true))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (=> (= cat_233 true) (=> (fp.lt _let_0 (spoon_111 (get_potato_28_a cat_234))) (and (= cat_201 (spoon_76 _let_0)) (spoon_86 cat_201))))))
(assert (=> (= cat_233 true) (=> (fp.lt (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)) (spoon_111 (get_potato_28_a cat_234))) (= cat_235 (mk_potato_10 cat_231)))))
(assert (=> (= cat_233 true) (=> (fp.lt (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)) (spoon_111 (get_potato_28_a cat_234))) (= cat_236 cat_201))))
(assert (let ((_let_0 (fp.neg (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23))))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)) _let_1)) (=> (fp.lt _let_1 _let_0) (and (= cat_202 (spoon_76 _let_0)) (spoon_86 cat_202))))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (fp.lt _let_1 (fp.neg _let_0)) (= cat_237 (mk_potato_10 cat_231))))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (fp.lt _let_1 (fp.neg _let_0)) (= cat_238 cat_202)))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (not (fp.lt _let_1 (fp.neg _let_0))) (and (= cat_203 _let_1) (spoon_1 _let_1))))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (not (fp.lt _let_1 (fp.neg _let_0))) (and (= cat_204 (spoon_76 cat_203)) (spoon_86 cat_204))))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (not (fp.lt _let_1 (fp.neg _let_0))) (= cat_239 (mk_potato_10 cat_231))))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (not (fp.lt _let_1 (fp.neg _let_0))) (= cat_240 cat_204)))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (let ((_let_1 (spoon_111 (get_potato_28_a cat_234)))) (=> (= cat_233 true) (=> (not (fp.lt _let_0 _let_1)) (=> (not (fp.lt _let_1 (fp.neg _let_0))) (= cat_238 cat_240)))))))
(assert (=> (= cat_233 true) (=> (not (fp.lt (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)) (spoon_111 (get_potato_28_a cat_234)))) (= cat_236 cat_238))))
(assert (=> (= cat_233 true) (= cat_241 (mk_potato_10 cat_230))))
(assert (=> (= cat_233 true) (= cat_242 (fp.mul roundNearestTiesToEven cat_170 cat_170))))
(assert (=> (= cat_233 true) (= cat_243 (mk_potato_10 cat_227))))
(assert (=> (= cat_233 true) (= cat_244 ((_ to_fp 8 24) roundNearestTiesToEven (fp.sub roundNearestTiesToEven (fp (_ bv0 1) (_ bv1023 11) (_ bv0 52)) (fp.mul roundNearestTiesToEven cat_166 cat_166))))))
(assert (=> (= cat_233 true) (= cat_245 (mk_potato_10 cat_226))))
(assert (=> (= cat_233 true) (= cat_246 (fp.sqrt roundNearestTiesToEven cat_244))))
(assert (=> (not (= cat_233 true)) (= cat_236 cat_231)))
(assert (=> (not (= cat_233 true)) (= cat_242 cat_230)))
(assert (=> (not (= cat_233 true)) (= cat_244 cat_227)))
(assert (=> (not (= cat_233 true)) (= cat_246 cat_226)))
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven cat_244 cat_242))) (=> (= cat_233 true) (and (= cat_205 _let_0) (spoon_1 _let_0)))))
(assert (=> (= cat_233 true) (= cat_206 (fp.add roundNearestTiesToEven cat_205 (fp.mul roundNearestTiesToEven cat_236 cat_236)))))
(assert (=> (= cat_233 true) (and (= cat_207 cat_206) (spoon_1 cat_206))))
(assert (=> (= cat_233 true) (= cat_247 (mk_potato_10 cat_229))))
(assert (=> (= cat_233 true) (= cat_248 cat_207)))
(assert (=> (= cat_233 true) (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248) (= cat_249 (mk_potato_10 cat_228)))))
(assert (=> (= cat_233 true) (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248) (= cat_250 (fp.sqrt roundNearestTiesToEven cat_248)))))
(assert (=> (= cat_233 true) (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248) (= cat_252 cat_233))))
(assert (=> (= cat_233 true) (=> (not (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248)) (= cat_251 (mk_potato_7 cat_233)))))
(assert (=> (= cat_233 true) (=> (not (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248)) (= cat_252 (distinct 0 0)))))
(assert (=> (= cat_233 true) (=> (not (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_248)) (= cat_250 cat_228))))
(assert (=> (not (= cat_233 true)) (= cat_248 cat_229)))
(assert (=> (not (= cat_233 true)) (= cat_250 cat_228)))
(assert (=> (not (= cat_233 true)) (= cat_252 cat_233)))
(assert (= cat_252 true))
(assert (= cat_210 (fp.mul roundNearestTiesToEven cat_250 cat_170)))
(assert (spoon_1 (fp.mul roundNearestTiesToEven cat_250 cat_170)))
(assert (= cat_208 (fp.mul roundNearestTiesToEven cat_246 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) roundNearestTiesToEven (fp.mul roundNearestTiesToEven cat_166 cat_166)) cat_242))))
(assert (spoon_1 (fp.mul roundNearestTiesToEven cat_246 (fp.add roundNearestTiesToEven ((_ to_fp 8 24) roundNearestTiesToEven (fp.mul roundNearestTiesToEven cat_166 cat_166)) cat_242))))
(assert (= cat_209 (fp.mul roundNearestTiesToEven cat_208 cat_236)))
(assert (= cat_211 cat_209))
(assert (spoon_1 cat_209))
(assert (= cat_212 (fp.sub roundNearestTiesToEven cat_211 cat_210)))
(assert (= cat_213 cat_212))
(assert (= cat_253 cat_213))
(assert (spoon_1 cat_212))
(assert (= cat_214 (fp.mul roundNearestTiesToEven cat_250 cat_170)))
(assert (spoon_1 (fp.mul roundNearestTiesToEven cat_250 cat_170)))
(assert (= cat_215 (fp.mul roundNearestTiesToEven cat_214 cat_236)))
(assert (= cat_216 cat_215))
(assert (spoon_1 cat_215))
(assert (= cat_217 (fp.mul roundNearestTiesToEven cat_246 cat_248)))
(assert (spoon_1 (fp.mul roundNearestTiesToEven cat_246 cat_248)))
(assert (= cat_218 (fp.sub roundNearestTiesToEven cat_217 cat_216)))
(assert (= cat_219 cat_218))
(assert (= cat_254 cat_219))
(assert (spoon_1 cat_218))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)) cat_254))) (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (and (= cat_222 _let_0) (spoon_1 _let_0)))))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv132 8) (_ bv6631136 23)) cat_253))) (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (and (= cat_223 _let_0) (spoon_1 _let_0)))))
(assert (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (= cat_224 (ite (fp.leq cat_223 cat_222) true false))))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv132 8) (_ bv6631136 23)) cat_253))) (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (and (= cat_220 _let_0) (spoon_1 _let_0)))))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven (fp.neg (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23))) cat_254))) (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (and (= cat_221 _let_0) (spoon_1 _let_0)))))
(assert (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (= cat_225 (ite (fp.leq cat_221 cat_220) true false))))
(assert (=> (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254) (= cat_255 (ite (= cat_225 true) cat_224 false))))
(assert (=> (not (fp.lt (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) cat_254)) (= cat_255 false)))
(assert (not (= cat_255 true)))
(assert (fp.lt cat_254 (fp (_ bv0 1) (_ bv0 8) (_ bv0 23))))
(assert (spoon_1 (fp.mul roundNearestTiesToEven (fp.neg (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23))) cat_254)))
(assert (not (spoon_1 (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv132 8) (_ bv6631136 23)) cat_253))))
(check-sat)
(exit)
