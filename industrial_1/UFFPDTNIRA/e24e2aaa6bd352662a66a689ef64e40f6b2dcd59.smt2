;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(declare-sort potato_11 0)
(define-fun spoon_23 ((kitten_23 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_23) (and (fp.leq (fp.neg _let_0) kitten_23) (fp.leq kitten_23 _let_0)))))
(declare-fun spoon_24 (potato_11 potato_11) Bool)
(declare-fun spoon_25 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_26 (potato_5) Bool)
(declare-fun spoon_27 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_28 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_29 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(declare-fun spoon_30 (potato_11) (_ FloatingPoint 8 24))
(declare-fun spoon_31 ((_ FloatingPoint 8 24)) potato_11)
(assert (forall ((kitten_25 potato_11)) (! (= (spoon_31 (spoon_30 kitten_25)) kitten_25) :pattern ((spoon_30 kitten_25)))))
(assert (forall ((kitten_26 potato_11)) (! (spoon_23 (spoon_30 kitten_26)) :pattern ((spoon_30 kitten_26)))))
(assert (forall ((kitten_27 (_ FloatingPoint 8 24))) (! (=> (spoon_23 kitten_27) (= (spoon_30 (spoon_31 kitten_27)) kitten_27)) :pattern ((spoon_30 (spoon_31 kitten_27))))))
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))

(define-fun spoon_32 ((kitten_28 potato_13)) potato_11 (get_potato_13_a kitten_28))
(define-fun spoon_33 ((kitten_29 potato_13)) potato_11 (get_potato_13_b kitten_29))
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_34 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_13)))))

(define-fun spoon_35 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_36 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (let ((_let_0 (get_potato_15_a kitten_32))) (let ((_let_1 (get_potato_15_a kitten_33))) (ite (and (= (spoon_30 (get_potato_13_a _let_0)) (spoon_30 (get_potato_13_a _let_1))) (= (spoon_30 (get_potato_13_b _let_0)) (spoon_30 (get_potato_13_b _let_1)))) true false))))
(declare-fun cat_37 () Int)
(declare-fun spoon_38 (potato_15) Int)
(declare-fun cat_39 () Int)
(declare-fun spoon_40 (potato_15) Int)
(assert (<= 0 cat_37))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_38 kitten_34)) ))
(assert (<= 0 cat_39))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_40 kitten_35)) ))
(declare-fun cat_41 () Int)
(declare-fun cat_42 () Int)
(declare-fun cat_43 () Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-fun cat_44 () Int)
(declare-fun cat_45 () Int)
(declare-fun cat_46 () Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-fun spoon_47 (potato_15 potato_15) Bool)
(declare-fun cat_48 () potato_15)
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_49 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-fun cat_50 () potato_15)
(declare-fun cat_51 () Int)
(declare-fun cat_52 () potato_15)
(declare-fun cat_53 () Int)
(declare-fun cat_54 () Int)
(declare-sort potato_17 0)
(define-fun spoon_55 ((kitten_37 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (and (spoon_1 kitten_37) (and (fp.leq (fp.neg _let_0) kitten_37) (fp.leq kitten_37 _let_0)))))
(declare-fun spoon_56 (potato_17 potato_17) Bool)
(declare-fun spoon_57 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_58 (potato_5) Bool)
(declare-fun spoon_59 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_60 () potato_17)
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_61 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_62 ((kitten_39 (_ FloatingPoint 8 24)) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (or (= kitten_40 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_55 kitten_39))))
(declare-fun cat_63 () Int)
(declare-fun cat_64 () Int)
(define-fun spoon_65 ((kitten_44 (_ FloatingPoint 8 24)) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_45 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_23 kitten_44))))
(declare-fun cat_66 () (_ FloatingPoint 8 24))
(declare-fun cat_67 () (_ FloatingPoint 8 24))
(declare-fun cat_68 () (_ FloatingPoint 8 24))
(declare-fun cat_69 () potato_11)
(declare-fun cat_70 () (_ FloatingPoint 8 24))
(declare-fun cat_71 () (_ FloatingPoint 8 24))
(declare-fun cat_72 () (_ FloatingPoint 8 24))
(declare-fun cat_73 () (_ FloatingPoint 8 24))
(declare-fun cat_74 () (_ FloatingPoint 8 24))
(declare-fun cat_75 () (_ FloatingPoint 8 24))
(declare-fun cat_76 () (_ FloatingPoint 8 24))
(declare-fun cat_77 () (_ FloatingPoint 8 24))
(declare-fun cat_78 () (_ FloatingPoint 8 24))
(declare-fun cat_79 () (_ FloatingPoint 8 24))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_55 cat_66))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_55 cat_67))))
(assert (= cat_70 (fp.sub roundNearestTiesToEven (spoon_30 (get_potato_13_a (get_potato_15_a cat_50))) (spoon_30 (get_potato_13_a (get_potato_15_a cat_52))))))
(assert (= cat_71 (fp.sub roundNearestTiesToEven (spoon_30 (get_potato_13_b (get_potato_15_a cat_50))) (spoon_30 (get_potato_13_b (get_potato_15_a cat_52))))))
(assert (=> (fp.leq cat_70 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (= cat_72 cat_70)))
(assert (let ((_let_0 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23))))) (=> (fp.leq cat_70 _let_0) (= cat_73 _let_0))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_70 (fp.neg _let_0))) (=> (fp.leq _let_0 cat_70) (= cat_74 cat_70)))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_70 (fp.neg _let_0))) (=> (fp.leq _let_0 cat_70) (= cat_75 _let_0)))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_70 (fp.neg _let_0))) (=> (not (fp.leq _let_0 cat_70)) (= cat_75 cat_70)))))
(assert (=> (not (fp.leq cat_70 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23))))) (= cat_73 cat_75)))
(assert (=> (fp.leq cat_71 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (= cat_76 cat_71)))
(assert (let ((_let_0 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23))))) (=> (fp.leq cat_71 _let_0) (= cat_77 _let_0))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_71 (fp.neg _let_0))) (=> (fp.leq _let_0 cat_71) (= cat_78 cat_71)))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_71 (fp.neg _let_0))) (=> (fp.leq _let_0 cat_71) (= cat_79 _let_0)))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (not (fp.leq cat_71 (fp.neg _let_0))) (=> (not (fp.leq _let_0 cat_71)) (= cat_79 cat_71)))))
(assert (=> (not (fp.leq cat_71 (fp.neg (fp (_ bv0 1) (_ bv139 8) (_ bv0 23))))) (= cat_77 cat_79)))
(assert (= cat_68 cat_77))
(assert (= (spoon_30 cat_69) cat_68))
(assert (spoon_1 cat_77))
(assert (not (spoon_23 cat_73)))
(check-sat)
(exit)
