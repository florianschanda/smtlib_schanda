;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(define-fun spoon_3 ((kitten_3 (_ FloatingPoint 11 53))) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 (_ FloatingPoint 11 53))) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral roundNearestTiesToEven kitten_4)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-fun cat_6 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun cat_16 () Int)
(define-fun spoon_17 ((kitten_13 Int)) Bool (and (<= (- cat_16) kitten_13) (<= kitten_13 cat_16)))
(define-fun spoon_18 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_19 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_20 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_21 ((kitten_19 (_ FloatingPoint 8 24)) (kitten_20 (_ FloatingPoint 8 24)) (kitten_21 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_19 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_20 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_22 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_23 (_ FloatingPoint 8 24)) (kitten_24 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_23) (< _let_0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(define-fun spoon_25 ((kitten_25 (_ FloatingPoint 11 53))) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_26 ((kitten_26 (_ FloatingPoint 11 53))) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_27 ((kitten_27 (_ FloatingPoint 11 53))) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_28 ((kitten_28 (_ FloatingPoint 11 53))) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun cat_29 () Int)
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= (- cat_29) kitten_29) (<= kitten_29 cat_29)))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_32 ((kitten_31 (_ FloatingPoint 11 53)) (kitten_32 (_ FloatingPoint 11 53))) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_33 ((kitten_33 (_ FloatingPoint 11 53)) (kitten_34 (_ FloatingPoint 11 53))) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_34 ((kitten_35 (_ FloatingPoint 11 53)) (kitten_36 (_ FloatingPoint 11 53)) (kitten_37 (_ FloatingPoint 11 53))) Bool (and (=> (spoon_32 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_33 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_35 ((kitten_38 (_ FloatingPoint 11 53)) (kitten_39 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_38) (< _let_0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 _let_0)))))
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a (_ FloatingPoint 11 53))))))

(define-fun spoon_36 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_37 (Bool) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_40 (potato_12 potato_12) Bool)
(declare-fun spoon_41 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_42 (potato_5) Bool)
(declare-fun spoon_43 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_44 () potato_12)
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_45 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(declare-fun spoon_46 ((_ FloatingPoint 8 24)) (_ FloatingPoint 8 24))
(declare-fun spoon_47 ((_ FloatingPoint 8 24) (_ FloatingPoint 8 24)) Bool)
(declare-sort potato_14 0)
(define-fun spoon_48 ((kitten_42 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (and (spoon_1 kitten_42) (and (fp.leq (fp.neg _let_0) kitten_42) (fp.leq kitten_42 _let_0)))))
(declare-fun spoon_49 (potato_14 potato_14) Bool)
(declare-fun spoon_50 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_51 (potato_5) Bool)
(declare-fun spoon_52 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_53 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_54 ((kitten_43 potato_15)) potato_14 (get_potato_15_a kitten_43))
(define-fun spoon_55 ((kitten_44 (_ FloatingPoint 8 24)) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3406568 23)))) (=> (or (= kitten_45 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_48 kitten_44))))
(declare-sort potato_16 0)
(define-fun spoon_56 ((kitten_49 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (and (spoon_1 kitten_49) (and (fp.leq (fp.neg _let_0) kitten_49) (fp.leq kitten_49 _let_0)))))
(declare-fun spoon_57 (potato_16 potato_16) Bool)
(declare-fun spoon_58 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_61 () potato_16)
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_16)))))

(define-fun spoon_62 ((kitten_50 potato_17)) potato_16 (get_potato_17_a kitten_50))
(define-fun spoon_63 ((kitten_51 (_ FloatingPoint 8 24)) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool) (kitten_55 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv3489792 23)))) (=> (or (= kitten_52 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_56 kitten_51))))
(assert (forall ((kitten_56 (_ FloatingPoint 8 24))) (! (=> (spoon_55 kitten_56 true true true true) (spoon_63 (spoon_46 kitten_56) true false true true)) :pattern ((spoon_46 kitten_56)))))
(declare-sort potato_18 0)
(define-fun spoon_64 ((kitten_57 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (and (spoon_1 kitten_57) (and (fp.leq (fp.neg _let_0) kitten_57) (fp.leq kitten_57 _let_0)))))
(declare-fun spoon_65 (potato_18 potato_18) Bool)
(declare-fun spoon_66 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_67 (potato_5) Bool)
(declare-fun spoon_68 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_69 () potato_18)
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a potato_18)))))

(define-fun spoon_70 ((kitten_58 potato_19)) potato_18 (get_potato_19_a kitten_58))
(define-fun spoon_71 ((kitten_59 (_ FloatingPoint 8 24)) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (=> (or (= kitten_60 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_64 kitten_59))))
(declare-sort potato_20 0)
(define-fun spoon_72 ((kitten_64 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_64) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_64) (fp.leq kitten_64 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23))))))
(declare-fun spoon_73 (potato_20 potato_20) Bool)
(declare-fun spoon_74 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_75 (potato_5) Bool)
(declare-fun spoon_76 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_77 () potato_20)
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a potato_20)))))

(define-fun spoon_78 ((kitten_65 potato_21)) potato_20 (get_potato_21_a kitten_65))
(define-fun spoon_79 ((kitten_66 (_ FloatingPoint 8 24)) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_67 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (spoon_72 kitten_66)))
(declare-sort potato_22 0)
(declare-fun spoon_80 (potato_22 potato_22) Bool)
(declare-fun spoon_81 ((_ FloatingPoint 11 53)) potato_5)
(declare-fun spoon_82 (potato_5) Bool)
(declare-fun spoon_83 (potato_5) (_ FloatingPoint 11 53))
(declare-fun cat_84 () potato_22)
(declare-datatypes ((potato_23 0)) (((mk_potato_23 (get_potato_23_a potato_22)))))

(define-fun spoon_85 ((kitten_71 potato_23)) potato_22 (get_potato_23_a kitten_71))
(declare-sort potato_24 0)
(declare-fun spoon_86 (potato_24 potato_24) Bool)
(declare-fun spoon_87 ((_ FloatingPoint 11 53)) potato_5)
(declare-fun spoon_88 (potato_5) Bool)
(declare-fun spoon_89 (potato_5) (_ FloatingPoint 11 53))
(declare-fun cat_90 () potato_24)
(declare-datatypes ((potato_25 0)) (((mk_potato_25 (get_potato_25_a potato_24)))))

(define-fun spoon_91 ((kitten_72 potato_25)) potato_24 (get_potato_25_a kitten_72))
(define-fun spoon_92 ((kitten_73 (_ FloatingPoint 11 53)) (kitten_74 Bool) (kitten_75 Bool) (kitten_76 Bool) (kitten_77 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv2046 11) (_ bv4503599627370495 52)))) (=> (or (= kitten_74 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_3 kitten_73))))
(declare-sort potato_26 0)
(define-fun spoon_93 ((kitten_78 (_ FloatingPoint 11 53))) Bool (and (spoon_3 kitten_78) (and (fp.leq (fp (_ bv0 1) (_ bv0 11) (_ bv0 52)) kitten_78) (fp.leq kitten_78 (fp (_ bv0 1) (_ bv1023 11) (_ bv0 52))))))
(declare-fun spoon_94 (potato_26 potato_26) Bool)
(declare-fun spoon_95 ((_ FloatingPoint 11 53)) potato_5)
(declare-fun spoon_96 (potato_5) Bool)
(declare-fun spoon_97 (potato_5) (_ FloatingPoint 11 53))
(declare-fun cat_98 () potato_26)
(declare-datatypes ((potato_27 0)) (((mk_potato_27 (get_potato_27_a potato_26)))))

(define-fun spoon_99 ((kitten_79 potato_27)) potato_26 (get_potato_27_a kitten_79))
(define-fun spoon_100 ((kitten_80 (_ FloatingPoint 11 53)) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool) (kitten_84 Bool)) Bool (=> (or (= kitten_81 true) (fp.leq (fp (_ bv0 1) (_ bv0 11) (_ bv0 52)) (fp (_ bv0 1) (_ bv1023 11) (_ bv0 52)))) (spoon_93 kitten_80)))
(declare-sort potato_28 0)
(define-fun spoon_101 ((kitten_85 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (and (spoon_1 kitten_85) (and (fp.leq (fp.neg _let_0) kitten_85) (fp.leq kitten_85 _let_0)))))
(declare-fun spoon_102 (potato_28 potato_28) Bool)
(declare-fun spoon_103 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_104 (potato_5) Bool)
(declare-fun spoon_105 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_106 () potato_28)
(declare-datatypes ((potato_29 0)) (((mk_potato_29 (get_potato_29_a potato_28)))))

(define-fun spoon_107 ((kitten_86 potato_29)) potato_28 (get_potato_29_a kitten_86))
(define-fun spoon_108 ((kitten_87 (_ FloatingPoint 8 24)) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool) (kitten_91 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (=> (or (= kitten_88 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_101 kitten_87))))
(declare-fun cat_109 () (_ FloatingPoint 11 53))
(declare-fun cat_110 () Int)
(declare-fun cat_111 () (_ FloatingPoint 8 24))
(declare-fun cat_112 () Int)
(declare-fun cat_113 () (_ FloatingPoint 8 24))
(declare-fun cat_114 () Int)
(declare-fun cat_115 () Int)
(declare-fun cat_116 () Int)
(declare-fun cat_117 () (_ FloatingPoint 8 24))
(declare-fun cat_118 () Int)
(declare-fun cat_119 () (_ FloatingPoint 8 24))
(declare-fun cat_120 () Int)
(declare-fun cat_121 () (_ FloatingPoint 8 24))
(declare-fun cat_122 () Int)
(declare-fun cat_123 () (_ FloatingPoint 8 24))
(declare-fun cat_124 () Int)
(declare-fun cat_125 () Int)
(declare-fun cat_126 () Int)
(define-fun spoon_127 ((kitten_92 (_ FloatingPoint 8 24)) (kitten_93 Bool) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (or (= kitten_93 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_1 kitten_92))))
(assert (= cat_117 ((_ to_fp 8 24) roundNearestTiesToEven (fp.mul roundNearestTiesToEven cat_109 cat_109))))
(assert (= cat_119 (spoon_46 cat_113)))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (= cat_121 (fp.add roundNearestTiesToEven _let_0 (fp.mul roundNearestTiesToEven (fp.sub roundNearestTiesToEven _let_0 cat_117) (fp.mul roundNearestTiesToEven cat_119 cat_119))))))
(assert (= cat_123 (fp.sqrt roundNearestTiesToEven cat_121)))
(declare-fun cat_128 () (_ FloatingPoint 8 24))
(declare-fun cat_129 () (_ FloatingPoint 8 24))
(declare-fun cat_130 () (_ FloatingPoint 11 53))
(declare-fun cat_131 () (_ FloatingPoint 11 53))
(declare-fun cat_132 () (_ FloatingPoint 8 24))
(declare-fun cat_133 () (_ FloatingPoint 8 24))
(declare-fun cat_134 () (_ FloatingPoint 8 24))
(declare-fun cat_135 () (_ FloatingPoint 8 24))
(declare-fun cat_136 () (_ FloatingPoint 8 24))
(declare-fun cat_137 () (_ FloatingPoint 8 24))
(declare-fun cat_138 () (_ FloatingPoint 8 24))
(declare-fun cat_139 () (_ FloatingPoint 8 24))
(declare-fun cat_140 () (_ FloatingPoint 8 24))
(declare-fun cat_141 () (_ FloatingPoint 8 24))
(declare-fun cat_142 () (_ FloatingPoint 11 53))
(declare-fun cat_143 () (_ FloatingPoint 11 53))
(declare-fun cat_144 () (_ FloatingPoint 8 24))
(declare-fun cat_145 () (_ FloatingPoint 11 53))
(declare-fun cat_146 () (_ FloatingPoint 11 53))
(declare-fun cat_147 () (_ FloatingPoint 11 53))
(declare-fun cat_148 () (_ FloatingPoint 11 53))
(declare-fun cat_149 () (_ FloatingPoint 11 53))
(declare-fun cat_150 () (_ FloatingPoint 11 53))
(declare-fun cat_151 () (_ FloatingPoint 11 53))
(declare-fun cat_152 () (_ FloatingPoint 11 53))
(declare-fun cat_153 () (_ FloatingPoint 11 53))
(declare-fun cat_154 () (_ FloatingPoint 11 53))
(assert (spoon_64 cat_113))
(assert (spoon_93 cat_109))
(assert (spoon_101 cat_111))
(assert (and (and (fp.leq (fp (_ bv0 1) (_ bv117 8) (_ bv201327 23)) cat_111) (fp.leq cat_111 (fp (_ bv0 1) (_ bv120 8) (_ bv2348810 23)))) (and (fp.leq (fp (_ bv0 1) (_ bv1016 11) (_ bv1261007895663739 52)) cat_109) (fp.leq cat_109 (fp (_ bv0 1) (_ bv1019 11) (_ bv2702159776422298 52))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_64 cat_128))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv133 8) (_ bv3407872 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_64 cat_129))))
(assert (fp.leq (fp.neg (fp (_ bv0 1) (_ bv133 8) (_ bv3406561 23))) cat_113))
(assert (fp.leq cat_113 (fp (_ bv0 1) (_ bv133 8) (_ bv3406561 23))))
(assert (= ((_ to_fp 8 24) roundNearestTiesToEven (fp.mul roundNearestTiesToEven cat_109 cat_109)) cat_117))
(assert (spoon_72 cat_117))
(assert (and (= cat_132 cat_113) (spoon_1 cat_113)))
(assert (and (= cat_133 (spoon_46 cat_132)) (spoon_56 cat_133)))
(assert (= cat_133 cat_119))
(assert (spoon_56 cat_119))
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) cat_117))) (and (= cat_134 _let_0) (spoon_1 _let_0))))
(assert (= cat_135 (fp.mul roundNearestTiesToEven cat_134 (fp.mul roundNearestTiesToEven cat_119 cat_119))))
(assert (and (= cat_136 cat_135) (spoon_1 cat_135)))
(assert (= cat_137 (fp.add roundNearestTiesToEven (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) cat_136)))
(assert (and (= cat_138 cat_137) (spoon_1 cat_137)))
(assert (and (= cat_139 cat_138) (spoon_1 cat_138)))
(assert (= cat_139 cat_121))
(assert (spoon_72 cat_121))
(assert (let ((_let_0 (fp.sqrt roundNearestTiesToEven cat_121))) (and (= cat_140 _let_0) (spoon_1 _let_0))))
(assert (= cat_140 cat_123))
(assert (spoon_72 cat_123))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv2046 11) (_ bv4503599627370495 52)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_3 cat_130))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv2046 11) (_ bv4503599627370495 52)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_3 cat_131))))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven cat_117 cat_119))) (and (= cat_141 _let_0) (spoon_1 _let_0))))
(assert (= cat_142 ((_ to_fp 11 53) roundNearestTiesToEven cat_141)))
(assert (= cat_143 (fp.sub roundNearestTiesToEven cat_142 (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven cat_111) ((_ to_fp 11 53) roundNearestTiesToEven cat_123)))))
(assert (= (mk_potato_11 cat_149) (mk_potato_11 cat_130)))
(assert (= cat_150 cat_143))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven cat_123 cat_119))) (and (= cat_144 _let_0) (spoon_1 _let_0))))
(assert (= cat_145 ((_ to_fp 11 53) roundNearestTiesToEven cat_144)))
(assert (= cat_146 (fp.mul roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven cat_111) cat_145)))
(assert (= cat_147 (fp.add roundNearestTiesToEven ((_ to_fp 11 53) roundNearestTiesToEven cat_121) cat_146)))
(assert (= (mk_potato_11 cat_151) (mk_potato_11 cat_131)))
(assert (= cat_152 cat_147))
(assert (let ((_let_0 (fp.mul roundNearestTiesToEven cat_150 (fp (_ bv0 1) (_ bv1028 11) (_ bv3560064250269478 52))))) (and (= cat_148 _let_0) (spoon_3 _let_0))))
(assert (= cat_150 cat_153))
(assert (= cat_154 cat_148))
(assert (not (spoon_3 (fp.div roundNearestTiesToEven cat_154 cat_152))))
(check-sat)
(exit)
