(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-fun spoon_23 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_24 ((kitten_23 Float64)) Bool (and (fp.isInfinite kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_25 ((kitten_24 Float64)) Bool (and (fp.isInfinite kitten_24) (fp.isNegative kitten_24)))
(define-fun spoon_26 ((kitten_25 Float64)) Bool (and (fp.isZero kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_27 ((kitten_26 Float64)) Bool (and (fp.isZero kitten_26) (fp.isNegative kitten_26)))
(declare-const cat_28 Int)
(define-fun spoon_29 ((kitten_27 Int)) Bool (and (<= (- cat_28) kitten_27) (<= kitten_27 cat_28)))
(define-fun spoon_30 ((kitten_28 Int)) Bool (and (<= (- 9007199254740992) kitten_28) (<= kitten_28 9007199254740992)))
(define-fun spoon_31 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isPositive kitten_30)) (and (fp.isNegative kitten_29) (fp.isNegative kitten_30))))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isNegative kitten_32)) (and (fp.isNegative kitten_31) (fp.isPositive kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64) (kitten_35 Float64)) Bool (and (=> (spoon_31 kitten_34 kitten_35) (fp.isPositive kitten_33)) (=> (spoon_32 kitten_34 kitten_35) (fp.isNegative kitten_33))))
(define-fun spoon_34 ((kitten_36 Float64) (kitten_37 Real)) Bool (or (and (fp.isPositive kitten_36) (< 0.0 kitten_37)) (and (fp.isNegative kitten_36) (< kitten_37 0.0))))
(declare-fun spoon_35 (Float64) Bool)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_38 Bool)) Int (ite (= kitten_38 true) 1 0))
(define-fun spoon_37 ((kitten_39 Int)) Bool (ite (= kitten_39 0) false true))
(define-fun spoon_38 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_39 (Bool) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_42 (potato_12 potato_12) Bool)
(declare-fun spoon_43 (Float32) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Float32)
(declare-const cat_46 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_47 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(define-fun spoon_48 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_42)))
(declare-sort potato_14 0)
(define-fun spoon_49 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_46) (fp.leq kitten_46 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_50 (potato_14 potato_14) Bool)
(declare-fun spoon_51 (Float32) potato_5)
(declare-fun spoon_52 (potato_5) Bool)
(declare-fun spoon_53 (potato_5) Float32)
(declare-const cat_54 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_55 ((kitten_47 potato_15)) potato_14 (get_potato_15_a kitten_47))
(declare-fun spoon_56 (potato_14) Float32)
(declare-fun spoon_57 (Float32) potato_14)
(assert (forall ((kitten_48 potato_14)) (! (= (spoon_57 (spoon_56 kitten_48)) kitten_48) :pattern ((spoon_56 kitten_48)))))
(assert (forall ((kitten_49 potato_14)) (! (spoon_49 (spoon_56 kitten_49)) :pattern ((spoon_56 kitten_49)))))
(assert (forall ((kitten_50 Float32)) (! (=> (spoon_49 kitten_50) (= (spoon_56 (spoon_57 kitten_50)) kitten_50)) :pattern ((spoon_56 (spoon_57 kitten_50))))))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_14) (get_potato_16_b potato_14)))))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_58 ((kitten_51 potato_17)) potato_16 (get_potato_17_a kitten_51))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_16)))))
(define-fun spoon_59 ((kitten_52 potato_18)) potato_16 (get_potato_18_a kitten_52))
(define-fun spoon_60 ((kitten_53 potato_18) (kitten_54 potato_18)) Bool (ite (and (= (spoon_56 (get_potato_16_a (get_potato_18_a kitten_53))) (spoon_56 (get_potato_16_a (get_potato_18_a kitten_54)))) (= (spoon_56 (get_potato_16_b (get_potato_18_a kitten_53))) (spoon_56 (get_potato_16_b (get_potato_18_a kitten_54))))) true false))
(declare-const cat_61 Int)
(declare-fun spoon_62 (potato_18) Int)
(declare-const cat_63 Int)
(declare-fun spoon_64 (potato_18) Int)
(assert (<= 0 cat_61))
(assert (forall ((kitten_55 potato_18)) (<= 0 (spoon_62 kitten_55))))
(assert (<= 0 cat_63))
(assert (forall ((kitten_56 potato_18)) (<= 0 (spoon_64 kitten_56))))
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(assert (<= 0 cat_65))
(assert (< cat_65 cat_66))
(assert (<= 0 cat_67))
(declare-const cat_68 Int)
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(assert (<= 0 cat_68))
(assert (< cat_68 cat_69))
(assert (<= 0 cat_70))
(declare-fun spoon_71 (potato_18 potato_18) Bool)
(declare-const cat_72 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_73 ((kitten_57 potato_19)) potato_18 (get_potato_19_a kitten_57))
(declare-const cat_74 potato_18)
(declare-const cat_75 Int)
(declare-sort potato_20 0)
(define-fun spoon_76 ((kitten_58 Float32)) Bool (and (spoon_1 kitten_58) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_58) (fp.leq kitten_58 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_77 (potato_20 potato_20) Bool)
(declare-fun spoon_78 (Float32) potato_5)
(declare-fun spoon_79 (potato_5) Bool)
(declare-fun spoon_80 (potato_5) Float32)
(declare-const cat_81 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_82 ((kitten_59 potato_21)) potato_20 (get_potato_21_a kitten_59))
(define-fun spoon_83 ((kitten_60 Float32) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_61 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_76 kitten_60)))
(declare-fun spoon_84 (potato_20) Float32)
(declare-fun spoon_85 (Float32) potato_20)
(assert (forall ((kitten_64 potato_20)) (! (= (spoon_85 (spoon_84 kitten_64)) kitten_64) :pattern ((spoon_84 kitten_64)))))
(assert (forall ((kitten_65 potato_20)) (! (spoon_76 (spoon_84 kitten_65)) :pattern ((spoon_84 kitten_65)))))
(assert (forall ((kitten_66 Float32)) (! (=> (spoon_76 kitten_66) (= (spoon_84 (spoon_85 kitten_66)) kitten_66)) :pattern ((spoon_84 (spoon_85 kitten_66))))))
(declare-sort potato_22 0)
(define-fun spoon_86 ((kitten_67 Float32)) Bool (and (spoon_1 kitten_67) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_67) (fp.leq kitten_67 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_87 (potato_22 potato_22) Bool)
(declare-fun spoon_88 (Float32) potato_5)
(declare-fun spoon_89 (potato_5) Bool)
(declare-fun spoon_90 (potato_5) Float32)
(declare-const cat_91 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_92 ((kitten_68 potato_23)) potato_22 (get_potato_23_a kitten_68))
(declare-fun spoon_93 (potato_22) Float32)
(declare-fun spoon_94 (Float32) potato_22)
(assert (forall ((kitten_69 potato_22)) (! (= (spoon_94 (spoon_93 kitten_69)) kitten_69) :pattern ((spoon_93 kitten_69)))))
(assert (forall ((kitten_70 potato_22)) (! (spoon_86 (spoon_93 kitten_70)) :pattern ((spoon_93 kitten_70)))))
(assert (forall ((kitten_71 Float32)) (! (=> (spoon_86 kitten_71) (= (spoon_93 (spoon_94 kitten_71)) kitten_71)) :pattern ((spoon_93 (spoon_94 kitten_71))))))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_20) (get_potato_24_b potato_22)))))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_95 ((kitten_72 potato_25)) potato_24 (get_potato_25_a kitten_72))
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_24)))))
(define-fun spoon_96 ((kitten_73 potato_26)) potato_24 (get_potato_26_a kitten_73))
(define-fun spoon_97 ((kitten_74 potato_26) (kitten_75 potato_26)) Bool (ite (and (= (spoon_84 (get_potato_24_a (get_potato_26_a kitten_74))) (spoon_84 (get_potato_24_a (get_potato_26_a kitten_75)))) (= (spoon_93 (get_potato_24_b (get_potato_26_a kitten_74))) (spoon_93 (get_potato_24_b (get_potato_26_a kitten_75))))) true false))
(declare-const cat_98 Int)
(declare-fun spoon_99 (potato_26) Int)
(declare-const cat_100 Int)
(declare-fun spoon_101 (potato_26) Int)
(assert (<= 0 cat_98))
(assert (forall ((kitten_76 potato_26)) (<= 0 (spoon_99 kitten_76))))
(assert (<= 0 cat_100))
(assert (forall ((kitten_77 potato_26)) (<= 0 (spoon_101 kitten_77))))
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(assert (<= 0 cat_102))
(assert (< cat_102 cat_103))
(assert (<= 0 cat_104))
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(assert (<= 0 cat_105))
(assert (< cat_105 cat_106))
(assert (<= 0 cat_107))
(declare-fun spoon_108 (potato_26 potato_26) Bool)
(declare-const cat_109 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_110 ((kitten_78 potato_27)) potato_26 (get_potato_27_a kitten_78))
(declare-const cat_111 potato_26)
(declare-const cat_112 Int)
(declare-fun spoon_113 (potato_18 potato_18) Bool)
(declare-fun spoon_114 (Bool potato_18 potato_18) Bool)
(assert true)
(declare-sort potato_28 0)
(define-fun spoon_115 ((kitten_79 Float32)) Bool (and (spoon_1 kitten_79) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_79) (fp.leq kitten_79 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_116 (potato_28 potato_28) Bool)
(declare-fun spoon_117 (Float32) potato_5)
(declare-fun spoon_118 (potato_5) Bool)
(declare-fun spoon_119 (potato_5) Float32)
(declare-const cat_120 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_121 ((kitten_80 potato_29)) potato_28 (get_potato_29_a kitten_80))
(declare-sort potato_30 0)
(define-fun spoon_122 ((kitten_81 Float32)) Bool (and (spoon_1 kitten_81) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_81) (fp.leq kitten_81 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_123 (potato_30 potato_30) Bool)
(declare-fun spoon_124 (Float32) potato_5)
(declare-fun spoon_125 (potato_5) Bool)
(declare-fun spoon_126 (potato_5) Float32)
(declare-const cat_127 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_128 ((kitten_82 potato_31)) potato_30 (get_potato_31_a kitten_82))
(declare-sort potato_32 0)
(define-fun spoon_129 ((kitten_83 Float32)) Bool (and (spoon_1 kitten_83) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_83) (fp.leq kitten_83 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_130 (potato_32 potato_32) Bool)
(declare-fun spoon_131 (Float32) potato_5)
(declare-fun spoon_132 (potato_5) Bool)
(declare-fun spoon_133 (potato_5) Float32)
(declare-const cat_134 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_135 ((kitten_84 potato_33)) potato_32 (get_potato_33_a kitten_84))
(define-fun spoon_136 ((kitten_85 Float32) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (=> (or (= kitten_86 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_129 kitten_85)))
(define-fun spoon_137 ((kitten_89 Float32) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool)) Bool (=> (or (= kitten_90 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_115 kitten_89)))
(declare-sort potato_34 0)
(define-fun spoon_138 ((kitten_93 Float32)) Bool (and (spoon_1 kitten_93) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_93) (fp.leq kitten_93 (fp #b0 #b10111111 #b00000000000000000110000)))))
(declare-fun spoon_139 (potato_34 potato_34) Bool)
(declare-fun spoon_140 (Float32) potato_5)
(declare-fun spoon_141 (potato_5) Bool)
(declare-fun spoon_142 (potato_5) Float32)
(declare-const cat_143 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_144 ((kitten_94 potato_35)) potato_34 (get_potato_35_a kitten_94))
(define-fun spoon_145 ((kitten_95 Float32) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_138 kitten_95)))
(declare-fun spoon_146 (Float32) Float32)
(declare-fun spoon_147 (Float32 Float32) Bool)
(assert (forall ((kitten_99 Float32)) (! (=> (spoon_137 kitten_99 true true true) (spoon_145 (spoon_146 kitten_99) true false true)) :pattern ((spoon_146 kitten_99)))))
(define-fun spoon_148 ((kitten_100 Float32) (kitten_101 Bool) (kitten_102 Bool) (kitten_103 Bool)) Bool (=> (or (= kitten_101 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_122 kitten_100)))
(declare-fun spoon_149 (Float32) Float32)
(declare-fun spoon_150 (Float32 Float32) Bool)
(assert (forall ((kitten_104 Float32)) (! (=> (spoon_148 kitten_104 true true true) (spoon_136 (spoon_149 kitten_104) true false true)) :pattern ((spoon_149 kitten_104)))))
(declare-sort potato_36 0)
(define-fun spoon_151 ((kitten_105 Float64)) Bool (and (spoon_2 kitten_105) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_105) (fp.leq kitten_105 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_152 (potato_36 potato_36) Bool)
(declare-fun spoon_153 (Float64) potato_5)
(declare-fun spoon_154 (potato_5) Bool)
(declare-fun spoon_155 (potato_5) Float64)
(declare-const cat_156 potato_36)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_36)))))
(define-fun spoon_157 ((kitten_106 potato_37)) potato_36 (get_potato_37_a kitten_106))
(define-fun spoon_158 ((kitten_107 Float64) (kitten_108 Bool) (kitten_109 Bool) (kitten_110 Bool)) Bool (=> (or (= kitten_108 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_151 kitten_107)))
(declare-sort potato_38 0)
(define-fun spoon_159 ((kitten_111 Float64)) Bool (and (spoon_2 kitten_111) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_111) (fp.leq kitten_111 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_160 (potato_38 potato_38) Bool)
(declare-fun spoon_161 (Float64) potato_5)
(declare-fun spoon_162 (potato_5) Bool)
(declare-fun spoon_163 (potato_5) Float64)
(declare-const cat_164 potato_38)
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_38)))))
(define-fun spoon_165 ((kitten_112 potato_39)) potato_38 (get_potato_39_a kitten_112))
(define-fun spoon_166 ((kitten_113 Float64) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool)) Bool (=> (or (= kitten_114 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_159 kitten_113)))
(declare-const cat_167 potato_18)
(declare-const cat_168 Int)
(declare-const cat_169 potato_26)
(declare-const cat_170 Int)
(declare-const cat_171 Float64)
(declare-const cat_172 Int)
(declare-const cat_173 Float64)
(declare-const cat_174 Int)
(declare-const cat_175 Float32)
(declare-const cat_176 Int)
(declare-const cat_177 Int)
(declare-const cat_178 Int)
(declare-const cat_179 Int)
(declare-const cat_180 Int)
(declare-const cat_181 Int)
(declare-const cat_182 Int)
(declare-const cat_183 Int)
(declare-const cat_184 Int)
(declare-const cat_185 Int)
(declare-const cat_186 Int)
(declare-const cat_187 Int)
(declare-const cat_188 Int)
(declare-sort potato_40 0)
(define-fun spoon_189 ((kitten_117 Float32)) Bool (and (spoon_1 kitten_117) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_117) (fp.leq kitten_117 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_190 (potato_40 potato_40) Bool)
(declare-fun spoon_191 (Float32) potato_5)
(declare-fun spoon_192 (potato_5) Bool)
(declare-fun spoon_193 (potato_5) Float32)
(declare-const cat_194 potato_40)
(declare-datatypes () ((potato_41 (mk_potato_41 (get_potato_41_a potato_40)))))
(define-fun spoon_195 ((kitten_118 potato_41)) potato_40 (get_potato_41_a kitten_118))
(define-fun spoon_196 ((kitten_119 Float32) (kitten_120 Bool) (kitten_121 Bool) (kitten_122 Bool)) Bool (=> (or (= kitten_120 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_86 kitten_119)))
(declare-fun spoon_197 (Float32 Float32) Float32)
(declare-fun spoon_198 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_123 Float32) (kitten_124 Float32)) (! (=> (and (spoon_196 kitten_123 true true true) (spoon_196 kitten_124 true true true)) (spoon_196 (spoon_197 kitten_123 kitten_124) true false true)) :pattern ((spoon_197 kitten_123 kitten_124)))))
(define-fun spoon_199 ((kitten_125 Float32) (kitten_126 Bool) (kitten_127 Bool) (kitten_128 Bool)) Bool (=> (or (= kitten_126 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_189 kitten_125)))
(define-fun spoon_200 ((kitten_129 Float32) (kitten_130 Bool) (kitten_131 Bool) (kitten_132 Bool)) Bool (=> (or (= kitten_130 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_49 kitten_129)))
(assert (= cat_74 (mk_potato_18 (mk_potato_16 (spoon_57 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_57 (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (= cat_111 (mk_potato_26 (mk_potato_24 (spoon_85 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_94 (fp #b0 #b00000000 #b00000000000000000000000))))))
(declare-const cat_201 potato_20)
(declare-const cat_202 potato_22)
(declare-const cat_203 Bool)
(declare-const cat_204 Float32)
(declare-const cat_205 Float32)
(declare-const cat_206 Float32)
(declare-const cat_207 Float32)
(declare-const cat_208 Float32)
(declare-const cat_209 Float32)
(declare-const cat_210 Float32)
(declare-const cat_211 Float32)
(declare-const cat_212 Float32)
(declare-const cat_213 potato_14)
(declare-const cat_214 potato_14)
(declare-const cat_215 potato_14)
(declare-const cat_216 potato_14)
(declare-const cat_217 potato_14)
(declare-const cat_218 potato_14)
(declare-const cat_219 potato_22)
(declare-const cat_220 potato_20)
(declare-const cat_221 potato_20)
(declare-const cat_222 potato_22)
(declare-const cat_223 potato_20)
(declare-const cat_224 potato_22)
(declare-const cat_225 Bool)
(declare-const cat_226 Float32)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float32)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float32)
(declare-const cat_233 Float32)
(declare-const cat_234 Float32)
(declare-const cat_235 Float32)
(declare-const cat_236 Float32)
(declare-const cat_237 Float32)
(declare-const cat_238 Float32)
(declare-const cat_239 Float32)
(declare-const cat_240 Float32)
(declare-const cat_241 Float32)
(declare-const cat_242 Float32)
(declare-const cat_243 Float32)
(declare-const cat_244 Float32)
(declare-const cat_245 Float32)
(declare-const cat_246 Float32)
(declare-const cat_247 Float32)
(declare-const cat_248 Float32)
(declare-const cat_249 Float32)
(declare-const cat_250 Float32)
(declare-const cat_251 Float32)
(declare-const cat_252 Float32)
(declare-const cat_253 Float32)
(declare-const cat_254 Float32)
(declare-const cat_255 Float32)
(declare-const cat_256 Bool)
(declare-const cat_257 Bool)
(declare-const cat_258 Float32)
(declare-const cat_259 Float32)
(declare-const cat_260 Float32)
(declare-const cat_261 Float32)
(declare-const cat_262 Bool)
(declare-const cat_263 Bool)
(declare-const cat_264 Float32)
(declare-const cat_265 Float32)
(declare-const cat_266 Float32)
(declare-const cat_267 Float32)
(declare-const cat_268 Float32)
(declare-const cat_269 Float32)
(declare-const cat_270 potato_10)
(declare-const cat_271 Float32)
(declare-const cat_272 potato_10)
(declare-const cat_273 Float32)
(declare-const cat_274 potato_10)
(declare-const cat_275 Float32)
(declare-const cat_276 potato_10)
(declare-const cat_277 Float32)
(declare-const cat_278 potato_10)
(declare-const cat_279 Float32)
(declare-const cat_280 potato_7)
(declare-const cat_281 Bool)
(declare-const cat_282 potato_25)
(declare-const cat_283 potato_24)
(declare-const cat_284 Bool)
(declare-const cat_285 Bool)
(declare-const cat_286 potato_24)
(declare-const cat_287 potato_10)
(declare-const cat_288 Float32)
(declare-const cat_289 potato_10)
(declare-const cat_290 Float32)
(declare-const cat_291 potato_10)
(declare-const cat_292 Float32)
(declare-const cat_293 potato_10)
(declare-const cat_294 Float32)
(declare-const cat_295 potato_7)
(declare-const cat_296 Bool)
(declare-const cat_297 potato_10)
(declare-const cat_298 Float32)
(declare-const cat_299 potato_10)
(declare-const cat_300 Float32)
(declare-const cat_301 potato_10)
(declare-const cat_302 Float32)
(declare-const cat_303 potato_10)
(declare-const cat_304 Float32)
(declare-const cat_305 potato_7)
(declare-const cat_306 Bool)
(declare-const cat_307 potato_10)
(declare-const cat_308 Float32)
(declare-const cat_309 potato_10)
(declare-const cat_310 Float32)
(declare-const cat_311 Bool)
(declare-const cat_312 Bool)
(declare-const cat_313 potato_10)
(declare-const cat_314 Float32)
(assert (= (spoon_56 cat_213) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_56 cat_214) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_214 cat_215))
(assert (= cat_213 cat_216))
(assert (= cat_217 cat_215))
(assert (= cat_218 cat_216))
(assert (= (mk_potato_18 (mk_potato_16 cat_217 cat_218)) cat_74))
(assert (= (spoon_93 cat_219) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_84 cat_220) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_220 cat_221))
(assert (= cat_219 cat_222))
(assert (= cat_223 cat_221))
(assert (= cat_224 cat_222))
(assert (= (mk_potato_26 (mk_potato_24 cat_223 cat_224)) cat_111))
(assert (spoon_159 cat_171))
(assert (spoon_151 cat_173))
(assert (spoon_1 cat_175))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_175) (fp.leq cat_175 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_171) (fp.leq cat_171 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (= cat_268 cat_204))
(assert (= cat_269 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_269))
(assert (= cat_270 (mk_potato_10 cat_205)))
(assert (= cat_271 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_271))
(assert (= cat_272 (mk_potato_10 cat_206)))
(assert (= cat_273 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_273))
(assert (= cat_274 (mk_potato_10 cat_207)))
(assert (= cat_275 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_275))
(assert (= cat_276 (mk_potato_10 cat_208)))
(assert (= cat_277 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_277))
(assert (= cat_278 (mk_potato_10 cat_209)))
(assert (= cat_279 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_129 cat_279))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_76 cat_210)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_211)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_212)))
(assert (= cat_280 (mk_potato_7 cat_203)))
(assert (= cat_281 (spoon_37 1)))
(assert (= cat_282 (mk_potato_25 (mk_potato_24 cat_201 cat_202))))
(assert (= cat_283 (get_potato_26_a cat_111)))
(assert (= cat_225 (spoon_113 cat_167 cat_74)))
(assert (= cat_284 (ite (not (= cat_225 true)) true false)))
(assert (= cat_284 true))
(assert (=> (= cat_285 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286))) (and (= cat_226 (spoon_149 (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_129 cat_226)))))
(assert (=> (= cat_285 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286))) (= cat_287 (mk_potato_10 cat_279)))))
(assert (=> (= cat_285 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286))) (= cat_288 cat_226))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (and (= cat_227 (spoon_149 (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (spoon_129 cat_227))))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (= cat_289 (mk_potato_10 cat_279))))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (= cat_290 cat_227)))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (not (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (and (= cat_228 (spoon_84 (get_potato_24_a cat_286))) (spoon_1 (spoon_84 (get_potato_24_a cat_286))))))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (not (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (and (= cat_229 (spoon_149 cat_228)) (spoon_129 cat_229))))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (not (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_291 (mk_potato_10 cat_279))))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (not (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_292 cat_229)))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (=> (not (fp.lt (spoon_84 (get_potato_24_a cat_286)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_290 cat_292)))))
(assert (=> (= cat_285 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_84 (get_potato_24_a cat_286)))) (= cat_288 cat_290))))
(assert (=> (= cat_285 true) (=> (spoon_189 cat_175) (and (= cat_230 (fp.mul RNE cat_175 cat_175)) (spoon_1 (fp.mul RNE cat_175 cat_175))))))
(assert (=> (= cat_285 true) (=> (spoon_189 cat_175) (= cat_293 (mk_potato_10 cat_277)))))
(assert (=> (= cat_285 true) (=> (spoon_189 cat_175) (= cat_294 cat_230))))
(assert (=> (= cat_285 true) (=> (spoon_189 cat_175) (= cat_296 cat_285))))
(assert (=> (= cat_285 true) (=> (not (spoon_189 cat_175)) (= cat_295 (mk_potato_7 cat_285)))))
(assert (=> (= cat_285 true) (=> (not (spoon_189 cat_175)) (= cat_296 (spoon_37 0)))))
(assert (=> (= cat_285 true) (=> (not (spoon_189 cat_175)) (= cat_294 cat_277))))
(assert (=> (= cat_285 true) (= cat_297 (mk_potato_10 cat_271))))
(assert (=> (= cat_285 true) (= cat_298 ((_ to_fp 8 24) RNE (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE cat_171 cat_171))))))
(assert (=> (= cat_285 true) (and (= cat_231 cat_298) (spoon_1 cat_298))))
(assert (=> (= cat_285 true) (and (= cat_232 (spoon_146 cat_231)) (spoon_138 cat_232))))
(assert (=> (= cat_285 true) (= cat_299 (mk_potato_10 cat_269))))
(assert (=> (= cat_285 true) (= cat_300 cat_232)))
(assert (=> (not (= cat_285 true)) (= cat_288 cat_279)))
(assert (=> (not (= cat_285 true)) (= cat_294 cat_277)))
(assert (=> (not (= cat_285 true)) (= cat_298 cat_271)))
(assert (=> (not (= cat_285 true)) (= cat_300 cat_269)))
(assert (=> (not (= cat_285 true)) (= cat_296 cat_285)))
(assert (=> (= cat_296 true) (and (= cat_233 (fp.sub RNE cat_298 cat_294)) (spoon_1 (fp.sub RNE cat_298 cat_294)))))
(assert (=> (= cat_296 true) (= cat_234 (fp.add RNE cat_233 (fp.mul RNE cat_288 cat_288)))))
(assert (=> (= cat_296 true) (and (= cat_235 cat_234) (spoon_1 cat_234))))
(assert (=> (= cat_296 true) (= cat_301 (mk_potato_10 cat_275))))
(assert (=> (= cat_296 true) (= cat_302 cat_235)))
(assert (=> (= cat_296 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302) (and (= cat_236 cat_302) (spoon_1 cat_302)))))
(assert (=> (= cat_296 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302) (and (= cat_237 (spoon_146 cat_236)) (spoon_138 cat_237)))))
(assert (=> (= cat_296 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302) (= cat_303 (mk_potato_10 cat_273)))))
(assert (=> (= cat_296 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302) (= cat_304 cat_237))))
(assert (=> (= cat_296 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302) (= cat_306 cat_296))))
(assert (=> (= cat_296 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302)) (= cat_305 (mk_potato_7 cat_296)))))
(assert (=> (= cat_296 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302)) (= cat_306 (spoon_37 0)))))
(assert (=> (= cat_296 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_302)) (= cat_304 cat_273))))
(assert (=> (not (= cat_296 true)) (= cat_302 cat_275)))
(assert (=> (not (= cat_296 true)) (= cat_304 cat_273)))
(assert (=> (not (= cat_296 true)) (= cat_306 cat_296)))
(assert (= cat_306 true))
(assert (and (= cat_242 (fp.mul RNE cat_304 cat_175)) (spoon_1 (fp.mul RNE cat_304 cat_175))))
(assert (and (= cat_238 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_171 cat_171)) cat_294)) (spoon_1 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_171 cat_171)) cat_294))))
(assert (= cat_239 (fp.mul RNE cat_300 cat_238)))
(assert (and (= cat_240 cat_239) (spoon_1 cat_239)))
(assert (= cat_241 (fp.mul RNE cat_240 cat_288)))
(assert (and (= cat_243 cat_241) (spoon_1 cat_241)))
(assert (= cat_244 (fp.sub RNE cat_243 cat_242)))
(assert (and (= cat_245 cat_244) (spoon_1 cat_244)))
(assert (= cat_307 (mk_potato_10 cat_211)))
(assert (= cat_308 cat_245))
(assert (and (= cat_246 (fp.mul RNE cat_304 cat_175)) (spoon_1 (fp.mul RNE cat_304 cat_175))))
(assert (= cat_247 (fp.mul RNE cat_246 cat_288)))
(assert (and (= cat_248 cat_247) (spoon_1 cat_247)))
(assert (and (= cat_249 (fp.mul RNE cat_300 cat_302)) (spoon_1 (fp.mul RNE cat_300 cat_302))))
(assert (= cat_250 (fp.sub RNE cat_249 cat_248)))
(assert (and (= cat_251 cat_250) (spoon_1 cat_250)))
(assert (= cat_309 (mk_potato_10 cat_212)))
(assert (= cat_310 cat_251))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (and (= cat_260 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_310)) (spoon_1 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_310)))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (and (= cat_261 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (= cat_262 (ite (fp.leq cat_261 cat_260) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (and (= cat_258 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (and (= cat_259 (fp.mul RNE (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) cat_310)) (spoon_1 (fp.mul RNE (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) cat_310)))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (= cat_263 (ite (fp.leq cat_259 cat_258) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310) (= cat_312 (ite (= cat_263 true) cat_262 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_310)) (= cat_312 false)))
(assert (=> (= cat_312 true) (= cat_311 true)))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (and (= cat_254 (fp.mul RNE (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) cat_310)) (spoon_1 (fp.mul RNE (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) cat_310))))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (and (= cat_255 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308))))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_256 (ite (fp.leq cat_255 cat_254) true false)))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (and (= cat_252 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308))))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (and (= cat_253 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_310)) (spoon_1 (fp.mul RNE (fp #b0 #b10000101 #b01101000000000000000000) cat_310))))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_257 (ite (fp.leq cat_253 cat_252) true false)))))
(assert (=> (not (= cat_312 true)) (=> (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000)) (= cat_311 (ite (= cat_257 true) cat_256 false)))))
(assert (=> (not (= cat_312 true)) (=> (not (fp.lt cat_310 (fp #b0 #b00000000 #b00000000000000000000000))) (= cat_311 false))))
(assert (= cat_311 true))
(assert (and (= cat_264 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308)) (spoon_1 (fp.mul RNE (fp #b0 #b10000100 #b11001010010111011100000) cat_308))))
(assert (= cat_265 (fp.div RNE cat_264 cat_310)))
(assert (and (= cat_266 cat_265) (spoon_1 cat_265)))
(assert (and (= cat_267 cat_266) (spoon_1 cat_266)))
(assert (= cat_313 (mk_potato_10 cat_210)))
(assert (= cat_314 cat_267))
(assert (not (spoon_76 (fp.add RNE (spoon_84 (get_potato_24_a cat_286)) cat_314))))
(assert (not (fp.lt (fp #b0 #b10000101 #b01101000000000000000000) (fp.add RNE (spoon_84 (get_potato_24_a cat_286)) cat_314))))
(assert (not (spoon_76 (fp.sub RNE (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp.add RNE (spoon_84 (get_potato_24_a cat_286)) cat_314)))))
(check-sat)
(exit)
