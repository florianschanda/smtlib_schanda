(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_13 Int)) Bool (and (<= (- cat_16) kitten_13) (<= kitten_13 cat_16)))
(define-fun spoon_18 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_19 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_20 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_21 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_19 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_20 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_22 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_26 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_27 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_28 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-const cat_29 Int)
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= (- cat_29) kitten_29) (<= kitten_29 cat_29)))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_34 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_32 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_33 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_35 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_37 (Bool) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_40 (potato_12 potato_12) Bool)
(declare-fun spoon_41 (Float32) potato_5)
(declare-fun spoon_42 (potato_5) Bool)
(declare-fun spoon_43 (potato_5) Float32)
(declare-const cat_44 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_45 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(declare-fun spoon_46 (Float32) Float32)
(declare-fun spoon_47 (Float32 Float32) Bool)
(declare-sort potato_14 0)
(define-fun spoon_48 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_42) (fp.leq kitten_42 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_49 (potato_14 potato_14) Bool)
(declare-fun spoon_50 (Float32) potato_5)
(declare-fun spoon_51 (potato_5) Bool)
(declare-fun spoon_52 (potato_5) Float32)
(declare-const cat_53 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_54 ((kitten_43 potato_15)) potato_14 (get_potato_15_a kitten_43))
(define-fun spoon_55 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_48 kitten_44)))
(declare-sort potato_16 0)
(define-fun spoon_56 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_57 (potato_16 potato_16) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_62 ((kitten_50 potato_17)) potato_16 (get_potato_17_a kitten_50))
(define-fun spoon_63 ((kitten_51 Float32) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool) (kitten_55 Bool)) Bool (=> (or (= kitten_52 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_56 kitten_51)))
(assert (forall ((kitten_56 Float32)) (! (=> (spoon_55 kitten_56 true true true true) (spoon_63 (spoon_46 kitten_56) true false true true)) :pattern ((spoon_46 kitten_56)))))
(declare-fun spoon_64 (Float32) Float32)
(declare-fun spoon_65 (Float32 Float32) Bool)
(declare-sort potato_18 0)
(define-fun spoon_66 ((kitten_57 Float32)) Bool (and (spoon_1 kitten_57) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_57) (fp.leq kitten_57 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_67 (potato_18 potato_18) Bool)
(declare-fun spoon_68 (Float32) potato_5)
(declare-fun spoon_69 (potato_5) Bool)
(declare-fun spoon_70 (potato_5) Float32)
(declare-const cat_71 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_72 ((kitten_58 potato_19)) potato_18 (get_potato_19_a kitten_58))
(define-fun spoon_73 ((kitten_59 Float32) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_60 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_66 kitten_59)))
(assert (forall ((kitten_64 Float32)) (! (=> (spoon_73 kitten_64 true true true true) (spoon_55 (spoon_64 kitten_64) true false true true)) :pattern ((spoon_64 kitten_64)))))
(declare-fun spoon_74 (potato_18) Float32)
(declare-fun spoon_75 (Float32) potato_18)
(assert (forall ((kitten_65 potato_18)) (! (= (spoon_75 (spoon_74 kitten_65)) kitten_65) :pattern ((spoon_74 kitten_65)))))
(assert (forall ((kitten_66 potato_18)) (! (spoon_66 (spoon_74 kitten_66)) :pattern ((spoon_74 kitten_66)))))
(assert (forall ((kitten_67 Float32)) (! (=> (spoon_66 kitten_67) (= (spoon_74 (spoon_75 kitten_67)) kitten_67)) :pattern ((spoon_74 (spoon_75 kitten_67))))))
(declare-sort potato_20 0)
(define-fun spoon_76 ((kitten_68 Float32)) Bool (and (spoon_1 kitten_68) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_68) (fp.leq kitten_68 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_77 (potato_20 potato_20) Bool)
(declare-fun spoon_78 (Float32) potato_5)
(declare-fun spoon_79 (potato_5) Bool)
(declare-fun spoon_80 (potato_5) Float32)
(declare-const cat_81 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_82 ((kitten_69 potato_21)) potato_20 (get_potato_21_a kitten_69))
(declare-fun spoon_83 (potato_20) Float32)
(declare-fun spoon_84 (Float32) potato_20)
(assert (forall ((kitten_70 potato_20)) (! (= (spoon_84 (spoon_83 kitten_70)) kitten_70) :pattern ((spoon_83 kitten_70)))))
(assert (forall ((kitten_71 potato_20)) (! (spoon_76 (spoon_83 kitten_71)) :pattern ((spoon_83 kitten_71)))))
(assert (forall ((kitten_72 Float32)) (! (=> (spoon_76 kitten_72) (= (spoon_83 (spoon_84 kitten_72)) kitten_72)) :pattern ((spoon_83 (spoon_84 kitten_72))))))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_18) (get_potato_22_b potato_20)))))
(define-fun spoon_85 ((kitten_73 potato_22)) potato_18 (get_potato_22_a kitten_73))
(define-fun spoon_86 ((kitten_74 potato_22)) potato_20 (get_potato_22_b kitten_74))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_87 ((kitten_75 potato_23)) potato_22 (get_potato_23_a kitten_75))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_22)))))
(define-fun spoon_88 ((kitten_76 potato_24)) potato_22 (get_potato_24_a kitten_76))
(define-fun spoon_89 ((kitten_77 potato_24) (kitten_78 potato_24)) Bool (ite (and (= (spoon_74 (get_potato_22_a (get_potato_24_a kitten_77))) (spoon_74 (get_potato_22_a (get_potato_24_a kitten_78)))) (= (spoon_83 (get_potato_22_b (get_potato_24_a kitten_77))) (spoon_83 (get_potato_22_b (get_potato_24_a kitten_78))))) true false))
(declare-const cat_90 Int)
(declare-fun spoon_91 (potato_24) Int)
(declare-const cat_92 Int)
(declare-fun spoon_93 (potato_24) Int)
(assert (<= 0 cat_90))
(assert (forall ((kitten_79 potato_24)) (<= 0 (spoon_91 kitten_79))))
(assert (<= 0 cat_92))
(assert (forall ((kitten_80 potato_24)) (<= 0 (spoon_93 kitten_80))))
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(assert (<= 0 cat_94))
(assert (< cat_94 cat_95))
(assert (<= 0 cat_96))
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(assert (<= 0 cat_97))
(assert (< cat_97 cat_98))
(assert (<= 0 cat_99))
(declare-fun spoon_100 (potato_24 potato_24) Bool)
(declare-const cat_101 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_102 ((kitten_81 potato_25)) potato_24 (get_potato_25_a kitten_81))
(declare-sort potato_26 0)
(define-fun spoon_103 ((kitten_82 Float32)) Bool (and (spoon_1 kitten_82) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_82) (fp.leq kitten_82 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_104 (potato_26 potato_26) Bool)
(declare-fun spoon_105 (Float32) potato_5)
(declare-fun spoon_106 (potato_5) Bool)
(declare-fun spoon_107 (potato_5) Float32)
(declare-const cat_108 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_109 ((kitten_83 potato_27)) potato_26 (get_potato_27_a kitten_83))
(define-fun spoon_110 ((kitten_84 Float32) (kitten_85 Bool) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (=> (or (= kitten_85 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_103 kitten_84)))
(declare-sort potato_28 0)
(define-fun spoon_111 ((kitten_89 Float64)) Bool (and (spoon_3 kitten_89) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_89) (fp.leq kitten_89 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_112 (potato_28 potato_28) Bool)
(declare-fun spoon_113 (Float64) potato_5)
(declare-fun spoon_114 (potato_5) Bool)
(declare-fun spoon_115 (potato_5) Float64)
(declare-const cat_116 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_117 ((kitten_90 potato_29)) potato_28 (get_potato_29_a kitten_90))
(define-fun spoon_118 ((kitten_91 Float64) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool) (kitten_95 Bool)) Bool (=> (or (= kitten_92 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_111 kitten_91)))
(declare-sort potato_30 0)
(define-fun spoon_119 ((kitten_96 Float32)) Bool (and (spoon_1 kitten_96) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_96) (fp.leq kitten_96 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_120 (potato_30 potato_30) Bool)
(declare-fun spoon_121 (Float32) potato_5)
(declare-fun spoon_122 (potato_5) Bool)
(declare-fun spoon_123 (potato_5) Float32)
(declare-const cat_124 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_125 ((kitten_97 potato_31)) potato_30 (get_potato_31_a kitten_97))
(define-fun spoon_126 ((kitten_98 Float32) (kitten_99 Bool) (kitten_100 Bool) (kitten_101 Bool) (kitten_102 Bool)) Bool (=> (or (= kitten_99 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_119 kitten_98)))
(declare-const cat_127 potato_24)
(declare-const cat_128 Int)
(declare-const cat_129 Float64)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(declare-const cat_133 Int)
(declare-const cat_134 Int)
(declare-const cat_135 Int)
(declare-const cat_136 Int)
(define-fun spoon_137 ((kitten_103 Float32) (kitten_104 Bool) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_104 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_103)))
(define-fun spoon_138 ((kitten_108 Float32) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_109 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_76 kitten_108)))
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float32)
(declare-const cat_152 Float32)
(declare-const cat_153 Float32)
(declare-const cat_154 Float32)
(declare-const cat_155 Bool)
(declare-const cat_156 Bool)
(declare-const cat_157 Bool)
(declare-const cat_158 Float32)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 Bool)
(assert (spoon_111 cat_129))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_119 cat_139)))
(assert (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_129))
(assert (fp.leq cat_129 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_119 cat_140)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_103 cat_141)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_103 cat_142)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_56 cat_143)))
(assert (= cat_144 (spoon_64 (spoon_74 (get_potato_22_a (get_potato_24_a cat_127))))))
(assert (spoon_48 cat_144))
(assert (= cat_145 (spoon_46 cat_144)))
(assert (spoon_56 cat_145))
(assert (= cat_159 cat_145))
(assert (= cat_160 ((_ to_fp 8 24) RNE (fp.mul RNE cat_129 cat_129))))
(assert (= cat_146 (fp.mul RNE cat_160 cat_159)))
(assert (spoon_1 (fp.mul RNE cat_160 cat_159)))
(assert (= cat_147 cat_146))
(assert (= cat_161 cat_147))
(assert (spoon_1 cat_146))
(assert (= cat_148 (fp.mul RNE cat_160 (fp.mul RNE cat_159 cat_159))))
(assert (spoon_1 (fp.mul RNE cat_160 (fp.mul RNE cat_159 cat_159))))
(assert (= cat_149 (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_148)))
(assert (= cat_150 cat_149))
(assert (spoon_1 cat_149))
(assert (= cat_151 (fp.sqrt RNE cat_150)))
(assert (= cat_152 cat_151))
(assert (= cat_162 cat_152))
(assert (spoon_1 cat_151))
(assert (= cat_154 (fp.mul RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_162)))
(assert (spoon_1 (fp.mul RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_162)))
(assert (= cat_155 (ite (fp.leq cat_161 cat_154) true false)))
(assert (= cat_153 (fp.mul RNE (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) cat_162)))
(assert (spoon_1 (fp.mul RNE (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) cat_162)))
(assert (= cat_156 (ite (fp.leq cat_153 cat_161) true false)))
(assert (= cat_157 (ite (= cat_156 true) cat_155 false)))
(assert (= cat_163 (ite (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) cat_162) cat_157 false)))
(assert (= cat_163 true))
(assert (= cat_158 (fp.div RNE cat_161 cat_162)))
(assert (spoon_1 (fp.div RNE cat_161 cat_162)))
(assert (not (spoon_119 cat_158)))
(check-sat)
(exit)
