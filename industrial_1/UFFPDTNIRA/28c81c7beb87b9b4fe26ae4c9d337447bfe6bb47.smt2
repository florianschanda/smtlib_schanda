(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(declare-fun spoon_25 (potato_11 potato_11) Bool)
(declare-fun spoon_26 (Float32) potato_5)
(declare-fun spoon_27 (potato_5) Bool)
(declare-fun spoon_28 (potato_5) Float32)
(declare-const cat_29 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_30 ((kitten_22 potato_12)) potato_11 (get_potato_12_a kitten_22))
(declare-sort potato_13 0)
(define-fun spoon_31 ((kitten_23 Float32)) Bool (and (spoon_1 kitten_23) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_23) (fp.leq kitten_23 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_13 potato_13) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_37 ((kitten_24 potato_14)) potato_13 (get_potato_14_a kitten_24))
(declare-fun spoon_38 (potato_13) Float32)
(declare-fun spoon_39 (Float32) potato_13)
(assert (forall ((kitten_25 potato_13)) (! (= (spoon_39 (spoon_38 kitten_25)) kitten_25) :pattern ((spoon_38 kitten_25)))))
(assert (forall ((kitten_26 potato_13)) (! (spoon_31 (spoon_38 kitten_26)) :pattern ((spoon_38 kitten_26)))))
(assert (forall ((kitten_27 Float32)) (! (=> (spoon_31 kitten_27) (= (spoon_38 (spoon_39 kitten_27)) kitten_27)) :pattern ((spoon_38 (spoon_39 kitten_27))))))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_40 ((kitten_28 potato_16)) potato_15 (get_potato_16_a kitten_28))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15)))))
(define-fun spoon_41 ((kitten_29 potato_17)) potato_15 (get_potato_17_a kitten_29))
(define-fun spoon_42 ((kitten_30 potato_17) (kitten_31 potato_17)) Bool (ite (and (= (spoon_38 (get_potato_15_a (get_potato_17_a kitten_30))) (spoon_38 (get_potato_15_a (get_potato_17_a kitten_31)))) (= (spoon_38 (get_potato_15_b (get_potato_17_a kitten_30))) (spoon_38 (get_potato_15_b (get_potato_17_a kitten_31))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_17) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_17) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_32 potato_17)) (<= 0 (spoon_44 kitten_32))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_33 potato_17)) (<= 0 (spoon_46 kitten_33))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_17 potato_17) Bool)
(declare-const cat_54 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_55 ((kitten_34 potato_18)) potato_17 (get_potato_18_a kitten_34))
(declare-sort potato_19 0)
(define-fun spoon_56 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_35) (fp.leq kitten_35 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_57 (potato_19 potato_19) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_62 ((kitten_36 potato_20)) potato_19 (get_potato_20_a kitten_36))
(define-fun spoon_63 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_56 kitten_37)))
(declare-sort potato_21 0)
(define-fun spoon_64 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_41) (fp.leq kitten_41 (fp #b0 #b10111111 #b00000000000000000110000)))))
(declare-fun spoon_65 (potato_21 potato_21) Bool)
(declare-fun spoon_66 (Float32) potato_5)
(declare-fun spoon_67 (potato_5) Bool)
(declare-fun spoon_68 (potato_5) Float32)
(declare-const cat_69 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_70 ((kitten_42 potato_22)) potato_21 (get_potato_22_a kitten_42))
(define-fun spoon_71 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_64 kitten_43)))
(declare-sort potato_23 0)
(define-fun spoon_72 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_47) (fp.leq kitten_47 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_73 (potato_23 potato_23) Bool)
(declare-fun spoon_74 (Float32) potato_5)
(declare-fun spoon_75 (potato_5) Bool)
(declare-fun spoon_76 (potato_5) Float32)
(declare-const cat_77 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_78 ((kitten_48 potato_24)) potato_23 (get_potato_24_a kitten_48))
(declare-fun spoon_79 (potato_23) Float32)
(declare-fun spoon_80 (Float32) potato_23)
(assert (forall ((kitten_49 potato_23)) (! (= (spoon_80 (spoon_79 kitten_49)) kitten_49) :pattern ((spoon_79 kitten_49)))))
(assert (forall ((kitten_50 potato_23)) (! (spoon_72 (spoon_79 kitten_50)) :pattern ((spoon_79 kitten_50)))))
(assert (forall ((kitten_51 Float32)) (! (=> (spoon_72 kitten_51) (= (spoon_79 (spoon_80 kitten_51)) kitten_51)) :pattern ((spoon_79 (spoon_80 kitten_51))))))
(declare-const cat_81 potato_17)
(declare-const cat_82 Int)
(declare-const cat_83 potato_17)
(declare-const cat_84 Int)
(declare-const cat_85 potato_17)
(declare-const cat_86 Int)
(declare-sort potato_25 0)
(define-fun spoon_87 ((kitten_52 Float32)) Bool (and (spoon_1 kitten_52) (and (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) kitten_52) (fp.leq kitten_52 (fp #b0 #b10110110 #b00000000000000000000000)))))
(declare-fun spoon_88 (potato_25 potato_25) Bool)
(declare-fun spoon_89 (Float32) potato_5)
(declare-fun spoon_90 (potato_5) Bool)
(declare-fun spoon_91 (potato_5) Float32)
(declare-const cat_92 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_93 ((kitten_53 potato_26)) potato_25 (get_potato_26_a kitten_53))
(define-fun spoon_94 ((kitten_54 Float32) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool)) Bool (=> (or (= kitten_55 true) (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000))) (spoon_87 kitten_54)))
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_23) (get_potato_27_b potato_23)))))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_27)))))
(define-fun spoon_95 ((kitten_58 potato_28)) potato_27 (get_potato_28_a kitten_58))
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_27)))))
(define-fun spoon_96 ((kitten_59 potato_29)) potato_27 (get_potato_29_a kitten_59))
(define-fun spoon_97 ((kitten_60 potato_29) (kitten_61 potato_29)) Bool (ite (and (= (spoon_79 (get_potato_27_a (get_potato_29_a kitten_60))) (spoon_79 (get_potato_27_a (get_potato_29_a kitten_61)))) (= (spoon_79 (get_potato_27_b (get_potato_29_a kitten_60))) (spoon_79 (get_potato_27_b (get_potato_29_a kitten_61))))) true false))
(declare-const cat_98 Int)
(declare-fun spoon_99 (potato_29) Int)
(declare-const cat_100 Int)
(declare-fun spoon_101 (potato_29) Int)
(assert (<= 0 cat_98))
(assert (forall ((kitten_62 potato_29)) (<= 0 (spoon_99 kitten_62))))
(assert (<= 0 cat_100))
(assert (forall ((kitten_63 potato_29)) (<= 0 (spoon_101 kitten_63))))
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(assert (<= 0 cat_102))
(assert (< cat_102 cat_103))
(assert (<= 0 cat_104))
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(assert (<= 0 cat_105))
(assert (< cat_105 cat_106))
(assert (<= 0 cat_107))
(declare-fun spoon_108 (potato_29 potato_29) Bool)
(declare-const cat_109 potato_29)
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_29)))))
(define-fun spoon_110 ((kitten_64 potato_30)) potato_29 (get_potato_30_a kitten_64))
(declare-sort potato_31 0)
(define-fun spoon_111 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_65) (fp.leq kitten_65 (fp #b0 #b10011010 #b00000000000000000000000)))))
(declare-fun spoon_112 (potato_31 potato_31) Bool)
(declare-fun spoon_113 (Float32) potato_5)
(declare-fun spoon_114 (potato_5) Bool)
(declare-fun spoon_115 (potato_5) Float32)
(declare-const cat_116 potato_31)
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_31)))))
(define-fun spoon_117 ((kitten_66 potato_32)) potato_31 (get_potato_32_a kitten_66))
(define-fun spoon_118 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_111 kitten_67)))
(declare-fun spoon_119 (potato_29 potato_29) Float32)
(declare-fun spoon_120 (Float32 potato_29 potato_29) Bool)
(assert (forall ((kitten_71 potato_29) (kitten_72 potato_29)) (! (spoon_118 (spoon_119 kitten_71 kitten_72) true false true) :pattern ((spoon_119 kitten_71 kitten_72)))))
(assert (forall ((kitten_73 potato_29) (kitten_74 potato_29)) (! (= (spoon_119 kitten_73 kitten_74) (fp.add RNE (fp.mul RNE (spoon_79 (get_potato_27_a (get_potato_29_a kitten_73))) (spoon_79 (get_potato_27_a (get_potato_29_a kitten_74)))) (fp.mul RNE (spoon_79 (get_potato_27_b (get_potato_29_a kitten_73))) (spoon_79 (get_potato_27_b (get_potato_29_a kitten_74)))))) :pattern ((spoon_119 kitten_73 kitten_74)))))
(declare-const cat_121 Int)
(declare-const cat_122 Int)
(declare-const cat_123 Int)
(declare-const cat_124 Int)
(declare-const cat_125 Int)
(declare-const cat_126 Int)
(declare-const cat_127 Int)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(define-fun spoon_130 ((kitten_75 Float32) (kitten_76 Bool) (kitten_77 Bool) (kitten_78 Bool)) Bool (=> (or (= kitten_76 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_75)))
(define-fun spoon_131 ((kitten_79 Float32) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (=> (or (= kitten_80 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_72 kitten_79)))
(define-fun spoon_132 ((kitten_83 Float32) (kitten_84 Bool) (kitten_85 Bool) (kitten_86 Bool)) Bool (=> (or (= kitten_84 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_83)))
(declare-const cat_133 potato_23)
(declare-const cat_134 potato_23)
(declare-const cat_135 potato_23)
(declare-const cat_136 potato_23)
(declare-const cat_137 potato_23)
(declare-const cat_138 potato_23)
(declare-const cat_139 potato_23)
(declare-const cat_140 potato_23)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 potato_23)
(declare-const cat_147 potato_23)
(declare-const cat_148 potato_23)
(declare-const cat_149 potato_23)
(declare-const cat_150 potato_23)
(declare-const cat_151 potato_23)
(declare-const cat_152 potato_23)
(declare-const cat_153 potato_23)
(declare-const cat_154 potato_23)
(declare-const cat_155 potato_23)
(declare-const cat_156 potato_23)
(declare-const cat_157 potato_23)
(declare-const cat_158 potato_23)
(declare-const cat_159 potato_23)
(declare-const cat_160 potato_23)
(declare-const cat_161 potato_23)
(declare-const cat_162 potato_23)
(declare-const cat_163 potato_23)
(declare-const cat_164 potato_23)
(declare-const cat_165 potato_27)
(declare-const cat_166 potato_29)
(declare-const cat_167 Float32)
(declare-const cat_168 Float32)
(declare-const cat_169 Float32)
(declare-const cat_170 Float32)
(declare-const cat_171 potato_28)
(declare-const cat_172 potato_27)
(declare-const cat_173 potato_28)
(declare-const cat_174 potato_27)
(declare-const cat_175 potato_28)
(declare-const cat_176 potato_27)
(declare-const cat_177 potato_28)
(declare-const cat_178 potato_27)
(declare-const cat_179 potato_10)
(declare-const cat_180 Float32)
(declare-const cat_181 potato_10)
(declare-const cat_182 Float32)
(assert (fp.leq (fp #b0 #b01101111 #b10100011011011100010111) (fp.add RNE (fp.mul RNE (fp.sub RNE (spoon_38 (get_potato_15_a (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_a (get_potato_17_a cat_83)))) (fp.sub RNE (spoon_38 (get_potato_15_a (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_a (get_potato_17_a cat_83))))) (fp.mul RNE (fp.sub RNE (spoon_38 (get_potato_15_b (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_b (get_potato_17_a cat_83)))) (fp.sub RNE (spoon_38 (get_potato_15_b (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_b (get_potato_17_a cat_83))))))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_87 cat_141)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_87 cat_142)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10110110 #b00000000000000000000000)) (fp #b0 #b10110110 #b00000000000000000000000)) (spoon_87 cat_143)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000)) (spoon_64 cat_144)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_145)))
(assert (= (spoon_79 cat_146) (fp.sub RNE (spoon_38 (get_potato_15_b (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_b (get_potato_17_a cat_83))))))
(assert (= (spoon_79 cat_147) (fp.sub RNE (spoon_38 (get_potato_15_a (get_potato_17_a cat_85))) (spoon_38 (get_potato_15_a (get_potato_17_a cat_83))))))
(assert (= cat_147 cat_148))
(assert (= cat_146 cat_149))
(assert (= cat_150 cat_148))
(assert (= cat_151 cat_149))
(assert (= cat_171 (mk_potato_28 (mk_potato_27 cat_139 cat_140))))
(assert (= cat_172 (mk_potato_27 cat_150 cat_151)))
(assert (= (spoon_79 cat_152) (fp.neg (fp.mul RNE (fp #b0 #b01111111 #b00000000000000000000000) (spoon_79 (get_potato_27_b cat_172))))))
(assert (= cat_152 cat_153))
(assert (= (get_potato_27_a cat_172) cat_154))
(assert (= cat_155 cat_153))
(assert (= cat_156 cat_154))
(assert (= cat_173 (mk_potato_28 (mk_potato_27 cat_137 cat_138))))
(assert (= cat_174 (mk_potato_27 cat_155 cat_156)))
(assert (= (spoon_79 cat_157) (spoon_38 (get_potato_15_b (get_potato_17_a cat_81)))))
(assert (= (spoon_79 cat_158) (spoon_38 (get_potato_15_a (get_potato_17_a cat_81)))))
(assert (= cat_158 cat_159))
(assert (= cat_157 cat_160))
(assert (= cat_161 cat_159))
(assert (= cat_162 cat_160))
(assert (= cat_175 (mk_potato_28 (mk_potato_27 cat_133 cat_134))))
(assert (= cat_176 (mk_potato_27 cat_161 cat_162)))
(assert (= (spoon_79 cat_163) (spoon_38 (get_potato_15_b (get_potato_17_a cat_83)))))
(assert (= (spoon_79 cat_164) (spoon_38 (get_potato_15_a (get_potato_17_a cat_83)))))
(assert (= cat_165 (mk_potato_27 cat_164 cat_163)))
(assert (= cat_166 (mk_potato_29 cat_165)))
(assert (= cat_177 (mk_potato_28 (mk_potato_27 cat_135 cat_136))))
(assert (= cat_178 (get_potato_29_a cat_166)))
(assert (and (= cat_167 (spoon_119 (mk_potato_29 cat_172) (mk_potato_29 cat_172))) (and (spoon_111 cat_167) (= cat_167 (fp.add RNE (fp.mul RNE (spoon_79 (get_potato_27_a cat_172)) (spoon_79 (get_potato_27_a cat_172))) (fp.mul RNE (spoon_79 (get_potato_27_b cat_172)) (spoon_79 (get_potato_27_b cat_172))))))))
(assert (= cat_179 (mk_potato_10 cat_141)))
(assert (= cat_180 cat_167))
(assert (and (= cat_168 (spoon_119 (mk_potato_29 cat_176) (mk_potato_29 cat_174))) (and (spoon_111 cat_168) (= cat_168 (fp.add RNE (fp.mul RNE (spoon_79 (get_potato_27_a cat_176)) (spoon_79 (get_potato_27_a cat_174))) (fp.mul RNE (spoon_79 (get_potato_27_b cat_176)) (spoon_79 (get_potato_27_b cat_174))))))))
(assert (and (= cat_169 (spoon_119 (mk_potato_29 cat_178) (mk_potato_29 cat_174))) (and (spoon_111 cat_169) (= cat_169 (fp.add RNE (fp.mul RNE (spoon_79 (get_potato_27_a cat_178)) (spoon_79 (get_potato_27_a cat_174))) (fp.mul RNE (spoon_79 (get_potato_27_b cat_178)) (spoon_79 (get_potato_27_b cat_174))))))))
(assert (= cat_170 (fp.sub RNE cat_169 cat_168)))
(assert (= cat_181 (mk_potato_10 cat_143)))
(assert (= cat_182 cat_170))
(assert (not (or (fp.isZero cat_180) (fp.isPositive cat_180))))
(check-sat)
(exit)
