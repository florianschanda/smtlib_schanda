(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-const cat_13 Int)
(define-fun spoon_14 ((kitten_10 Int)) Bool (and (<= (- cat_13) kitten_10) (<= kitten_10 cat_13)))
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_16 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_17 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_18 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_16 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_17 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_19 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_20 (Real) Real)
(define-fun spoon_21 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_22 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_23 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_24 (potato_11 potato_11) Bool)
(declare-fun spoon_25 (Float32) potato_5)
(declare-fun spoon_26 (potato_5) Bool)
(declare-fun spoon_27 (potato_5) Float32)
(declare-const cat_28 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_29 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(declare-fun spoon_30 (potato_11) Float32)
(declare-fun spoon_31 (Float32) potato_11)
(assert (forall ((kitten_24 potato_11)) (! (= (spoon_31 (spoon_30 kitten_24)) kitten_24) :pattern ((spoon_30 kitten_24)))))
(assert (forall ((kitten_25 potato_11)) (! (spoon_23 (spoon_30 kitten_25)) :pattern ((spoon_30 kitten_25)))))
(assert (forall ((kitten_26 Float32)) (! (=> (spoon_23 kitten_26) (= (spoon_30 (spoon_31 kitten_26)) kitten_26)) :pattern ((spoon_30 (spoon_31 kitten_26))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_32 ((kitten_27 potato_14)) potato_13 (get_potato_14_a kitten_27))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_33 ((kitten_28 potato_15)) potato_13 (get_potato_15_a kitten_28))
(define-fun spoon_34 ((kitten_29 potato_15) (kitten_30 potato_15)) Bool (ite (and (= (spoon_30 (get_potato_13_a (get_potato_15_a kitten_29))) (spoon_30 (get_potato_13_a (get_potato_15_a kitten_30)))) (= (spoon_30 (get_potato_13_b (get_potato_15_a kitten_29))) (spoon_30 (get_potato_13_b (get_potato_15_a kitten_30))))) true false))
(declare-const cat_35 Int)
(declare-fun spoon_36 (potato_15) Int)
(declare-const cat_37 Int)
(declare-fun spoon_38 (potato_15) Int)
(assert (<= 0 cat_35))
(assert (forall ((kitten_31 potato_15)) (<= 0 (spoon_36 kitten_31))))
(assert (<= 0 cat_37))
(assert (forall ((kitten_32 potato_15)) (<= 0 (spoon_38 kitten_32))))
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (<= 0 cat_39))
(assert (< cat_39 cat_40))
(assert (<= 0 cat_41))
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(assert (<= 0 cat_42))
(assert (< cat_42 cat_43))
(assert (<= 0 cat_44))
(declare-fun spoon_45 (potato_15 potato_15) Bool)
(declare-const cat_46 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_47 ((kitten_33 potato_16)) potato_15 (get_potato_16_a kitten_33))
(declare-sort potato_17 0)
(define-fun spoon_48 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_49 (potato_17 potato_17) Bool)
(declare-fun spoon_50 (Float32) potato_5)
(declare-fun spoon_51 (potato_5) Bool)
(declare-fun spoon_52 (potato_5) Float32)
(declare-const cat_53 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_54 ((kitten_35 potato_18)) potato_17 (get_potato_18_a kitten_35))
(define-fun spoon_55 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_48 kitten_36)))
(declare-sort potato_19 0)
(define-fun spoon_56 ((kitten_40 Float32)) Bool (and (spoon_1 kitten_40) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_40) (fp.leq kitten_40 (fp #b0 #b10001001 #b01110111000000000000000)))))
(declare-fun spoon_57 (potato_19 potato_19) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_62 ((kitten_41 potato_20)) potato_19 (get_potato_20_a kitten_41))
(declare-fun spoon_63 (potato_19) Float32)
(declare-fun spoon_64 (Float32) potato_19)
(assert (forall ((kitten_42 potato_19)) (! (= (spoon_64 (spoon_63 kitten_42)) kitten_42) :pattern ((spoon_63 kitten_42)))))
(assert (forall ((kitten_43 potato_19)) (! (spoon_56 (spoon_63 kitten_43)) :pattern ((spoon_63 kitten_43)))))
(assert (forall ((kitten_44 Float32)) (! (=> (spoon_56 kitten_44) (= (spoon_63 (spoon_64 kitten_44)) kitten_44)) :pattern ((spoon_63 (spoon_64 kitten_44))))))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_15) (get_potato_21_b potato_19)))))
(define-fun spoon_65 ((kitten_45 potato_21)) potato_15 (get_potato_21_a kitten_45))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_66 ((kitten_46 potato_22)) potato_21 (get_potato_22_a kitten_46))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21)))))
(define-fun spoon_67 ((kitten_47 potato_23)) potato_21 (get_potato_23_a kitten_47))
(define-fun spoon_68 ((kitten_48 potato_23) (kitten_49 potato_23)) Bool (ite (and (= (spoon_34 (get_potato_21_a (get_potato_23_a kitten_48)) (get_potato_21_a (get_potato_23_a kitten_49))) true) (= (spoon_63 (get_potato_21_b (get_potato_23_a kitten_48))) (spoon_63 (get_potato_21_b (get_potato_23_a kitten_49))))) true false))
(declare-const cat_69 Int)
(declare-fun spoon_70 (potato_23) Int)
(declare-const cat_71 Int)
(declare-fun spoon_72 (potato_23) Int)
(assert (<= 0 cat_69))
(assert (forall ((kitten_50 potato_23)) (<= 0 (spoon_70 kitten_50))))
(assert (<= 0 cat_71))
(assert (forall ((kitten_51 potato_23)) (<= 0 (spoon_72 kitten_51))))
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(assert (<= 0 cat_73))
(assert (< cat_73 cat_74))
(assert (<= 0 cat_75))
(declare-const cat_76 Int)
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(assert (<= 0 cat_76))
(assert (< cat_76 cat_77))
(assert (<= 0 cat_78))
(declare-fun spoon_79 (potato_23 potato_23) Bool)
(declare-const cat_80 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_81 ((kitten_52 potato_24)) potato_23 (get_potato_24_a kitten_52))
(declare-fun spoon_82 (potato_15 potato_15) Float32)
(declare-fun spoon_83 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_53 potato_15) (kitten_54 potato_15)) (! (spoon_55 (spoon_82 kitten_53 kitten_54) true false true) :pattern ((spoon_82 kitten_53 kitten_54)))))
(declare-const cat_84 potato_23)
(declare-const cat_85 Int)
(declare-const cat_86 potato_23)
(declare-const cat_87 Int)
(declare-const cat_88 Int)
(define-fun spoon_89 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_23 kitten_55)))
(define-fun spoon_90 ((kitten_59 Float32) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool)) Bool (=> (or (= kitten_60 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001001 #b01110111000000000000000))) (spoon_56 kitten_59)))
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_48 cat_91)))
(assert (and (= cat_92 (spoon_82 (get_potato_21_a (get_potato_23_a cat_84)) (get_potato_21_a (get_potato_23_a cat_86)))) (spoon_48 cat_92)))
(assert (= cat_93 cat_91))
(assert (= cat_94 cat_92))
(assert (fp.lt (fp.add RNE (spoon_63 (get_potato_21_b (get_potato_23_a cat_84))) (spoon_63 (get_potato_21_b (get_potato_23_a cat_86)))) cat_94))
(assert (not (spoon_48 (fp.sub RNE cat_94 (fp.add RNE (spoon_63 (get_potato_21_b (get_potato_23_a cat_84))) (spoon_63 (get_potato_21_b (get_potato_23_a cat_86))))))))
(check-sat)
(exit)
