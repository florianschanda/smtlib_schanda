(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun spoon_16 (RoundingMode Int) Float32)
(declare-fun spoon_17 (RoundingMode Float32) Int)
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_27 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_28 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_29 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_30 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun spoon_31 (RoundingMode Int) Float64)
(declare-fun spoon_32 (RoundingMode Float64) Int)
(declare-const cat_33 Int)
(define-fun spoon_34 ((kitten_29 Int)) Bool (and (<= (- cat_33) kitten_29) (<= kitten_29 cat_33)))
(define-fun spoon_35 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_36 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_37 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_38 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_36 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_37 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_39 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_40 ((kitten_40 Bool)) Int (ite (= kitten_40 true) 1 0))
(define-fun spoon_41 ((kitten_41 Int)) Bool (ite (= kitten_41 0) false true))
(define-fun spoon_42 ((kitten_42 Int)) Bool (or (= kitten_42 0) (= kitten_42 1)))
(declare-fun spoon_43 (Bool) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_46 (potato_12 potato_12) Bool)
(declare-fun spoon_47 (Float32) potato_5)
(declare-fun spoon_48 (potato_5) Bool)
(declare-fun spoon_49 (potato_5) Float32)
(declare-const cat_50 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_51 ((kitten_43 potato_13)) potato_12 (get_potato_13_a kitten_43))
(define-fun spoon_52 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_44)))
(declare-sort potato_14 0)
(define-fun spoon_53 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_54 (potato_14 potato_14) Bool)
(declare-fun spoon_55 (Float32) potato_5)
(declare-fun spoon_56 (potato_5) Bool)
(declare-fun spoon_57 (potato_5) Float32)
(declare-const cat_58 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_59 ((kitten_49 potato_15)) potato_14 (get_potato_15_a kitten_49))
(declare-fun spoon_60 (potato_14) Float32)
(declare-fun spoon_61 (Float32) potato_14)
(assert (forall ((kitten_50 potato_14)) (! (= (spoon_61 (spoon_60 kitten_50)) kitten_50) :pattern ((spoon_60 kitten_50)))))
(assert (forall ((kitten_51 potato_14)) (! (spoon_53 (spoon_60 kitten_51)) :pattern ((spoon_60 kitten_51)))))
(assert (forall ((kitten_52 Float32)) (! (=> (spoon_53 kitten_52) (= (spoon_60 (spoon_61 kitten_52)) kitten_52)) :pattern ((spoon_60 (spoon_61 kitten_52))))))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_14) (get_potato_16_b potato_14)))))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_62 ((kitten_53 potato_17)) potato_16 (get_potato_17_a kitten_53))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_16)))))
(define-fun spoon_63 ((kitten_54 potato_18)) potato_16 (get_potato_18_a kitten_54))
(define-fun spoon_64 ((kitten_55 potato_18) (kitten_56 potato_18)) Bool (ite (and (= (spoon_60 (get_potato_16_a (get_potato_18_a kitten_55))) (spoon_60 (get_potato_16_a (get_potato_18_a kitten_56)))) (= (spoon_60 (get_potato_16_b (get_potato_18_a kitten_55))) (spoon_60 (get_potato_16_b (get_potato_18_a kitten_56))))) true false))
(declare-const cat_65 Int)
(declare-fun spoon_66 (potato_18) Int)
(declare-const cat_67 Int)
(declare-fun spoon_68 (potato_18) Int)
(assert (<= 0 cat_65))
(assert (forall ((kitten_57 potato_18)) (<= 0 (spoon_66 kitten_57))))
(assert (<= 0 cat_67))
(assert (forall ((kitten_58 potato_18)) (<= 0 (spoon_68 kitten_58))))
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(assert (<= 0 cat_69))
(assert (< cat_69 cat_70))
(assert (<= 0 cat_71))
(declare-const cat_72 Int)
(declare-const cat_73 Int)
(declare-const cat_74 Int)
(assert (<= 0 cat_72))
(assert (< cat_72 cat_73))
(assert (<= 0 cat_74))
(declare-fun spoon_75 (potato_18 potato_18) Bool)
(declare-const cat_76 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_77 ((kitten_59 potato_19)) potato_18 (get_potato_19_a kitten_59))
(declare-const cat_78 potato_18)
(declare-const cat_79 Int)
(declare-sort potato_20 0)
(define-fun spoon_80 ((kitten_60 Float32)) Bool (and (spoon_1 kitten_60) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_60) (fp.leq kitten_60 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_81 (potato_20 potato_20) Bool)
(declare-fun spoon_82 (Float32) potato_5)
(declare-fun spoon_83 (potato_5) Bool)
(declare-fun spoon_84 (potato_5) Float32)
(declare-const cat_85 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_86 ((kitten_61 potato_21)) potato_20 (get_potato_21_a kitten_61))
(define-fun spoon_87 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_80 kitten_62)))
(declare-fun spoon_88 (potato_20) Float32)
(declare-fun spoon_89 (Float32) potato_20)
(assert (forall ((kitten_66 potato_20)) (! (= (spoon_89 (spoon_88 kitten_66)) kitten_66) :pattern ((spoon_88 kitten_66)))))
(assert (forall ((kitten_67 potato_20)) (! (spoon_80 (spoon_88 kitten_67)) :pattern ((spoon_88 kitten_67)))))
(assert (forall ((kitten_68 Float32)) (! (=> (spoon_80 kitten_68) (= (spoon_88 (spoon_89 kitten_68)) kitten_68)) :pattern ((spoon_88 (spoon_89 kitten_68))))))
(declare-sort potato_22 0)
(define-fun spoon_90 ((kitten_69 Float32)) Bool (and (spoon_1 kitten_69) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_69) (fp.leq kitten_69 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_91 (potato_22 potato_22) Bool)
(declare-fun spoon_92 (Float32) potato_5)
(declare-fun spoon_93 (potato_5) Bool)
(declare-fun spoon_94 (potato_5) Float32)
(declare-const cat_95 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_96 ((kitten_70 potato_23)) potato_22 (get_potato_23_a kitten_70))
(declare-fun spoon_97 (potato_22) Float32)
(declare-fun spoon_98 (Float32) potato_22)
(assert (forall ((kitten_71 potato_22)) (! (= (spoon_98 (spoon_97 kitten_71)) kitten_71) :pattern ((spoon_97 kitten_71)))))
(assert (forall ((kitten_72 potato_22)) (! (spoon_90 (spoon_97 kitten_72)) :pattern ((spoon_97 kitten_72)))))
(assert (forall ((kitten_73 Float32)) (! (=> (spoon_90 kitten_73) (= (spoon_97 (spoon_98 kitten_73)) kitten_73)) :pattern ((spoon_97 (spoon_98 kitten_73))))))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_20) (get_potato_24_b potato_22)))))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_99 ((kitten_74 potato_25)) potato_24 (get_potato_25_a kitten_74))
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_24)))))
(define-fun spoon_100 ((kitten_75 potato_26)) potato_24 (get_potato_26_a kitten_75))
(define-fun spoon_101 ((kitten_76 potato_26) (kitten_77 potato_26)) Bool (ite (and (= (spoon_88 (get_potato_24_a (get_potato_26_a kitten_76))) (spoon_88 (get_potato_24_a (get_potato_26_a kitten_77)))) (= (spoon_97 (get_potato_24_b (get_potato_26_a kitten_76))) (spoon_97 (get_potato_24_b (get_potato_26_a kitten_77))))) true false))
(declare-const cat_102 Int)
(declare-fun spoon_103 (potato_26) Int)
(declare-const cat_104 Int)
(declare-fun spoon_105 (potato_26) Int)
(assert (<= 0 cat_102))
(assert (forall ((kitten_78 potato_26)) (<= 0 (spoon_103 kitten_78))))
(assert (<= 0 cat_104))
(assert (forall ((kitten_79 potato_26)) (<= 0 (spoon_105 kitten_79))))
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(assert (<= 0 cat_106))
(assert (< cat_106 cat_107))
(assert (<= 0 cat_108))
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(declare-const cat_111 Int)
(assert (<= 0 cat_109))
(assert (< cat_109 cat_110))
(assert (<= 0 cat_111))
(declare-fun spoon_112 (potato_26 potato_26) Bool)
(declare-const cat_113 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_114 ((kitten_80 potato_27)) potato_26 (get_potato_27_a kitten_80))
(declare-const cat_115 potato_26)
(declare-const cat_116 Int)
(declare-fun spoon_117 (potato_18 potato_18) Bool)
(declare-fun spoon_118 (Bool potato_18 potato_18) Bool)
(assert true)
(declare-sort potato_28 0)
(define-fun spoon_119 ((kitten_81 Float32)) Bool (and (spoon_1 kitten_81) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_81) (fp.leq kitten_81 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_120 (potato_28 potato_28) Bool)
(declare-fun spoon_121 (Float32) potato_5)
(declare-fun spoon_122 (potato_5) Bool)
(declare-fun spoon_123 (potato_5) Float32)
(declare-const cat_124 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_125 ((kitten_82 potato_29)) potato_28 (get_potato_29_a kitten_82))
(declare-sort potato_30 0)
(define-fun spoon_126 ((kitten_83 Float32)) Bool (and (spoon_1 kitten_83) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_83) (fp.leq kitten_83 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_127 (potato_30 potato_30) Bool)
(declare-fun spoon_128 (Float32) potato_5)
(declare-fun spoon_129 (potato_5) Bool)
(declare-fun spoon_130 (potato_5) Float32)
(declare-const cat_131 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_132 ((kitten_84 potato_31)) potato_30 (get_potato_31_a kitten_84))
(declare-sort potato_32 0)
(define-fun spoon_133 ((kitten_85 Float32)) Bool (and (spoon_1 kitten_85) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_85) (fp.leq kitten_85 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_134 (potato_32 potato_32) Bool)
(declare-fun spoon_135 (Float32) potato_5)
(declare-fun spoon_136 (potato_5) Bool)
(declare-fun spoon_137 (potato_5) Float32)
(declare-const cat_138 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_139 ((kitten_86 potato_33)) potato_32 (get_potato_33_a kitten_86))
(define-fun spoon_140 ((kitten_87 Float32) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_88 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_133 kitten_87)))
(define-fun spoon_141 ((kitten_91 Float32) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_92 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_119 kitten_91)))
(declare-sort potato_34 0)
(define-fun spoon_142 ((kitten_95 Float32)) Bool (and (spoon_1 kitten_95) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_95) (fp.leq kitten_95 (fp #b0 #b10111111 #b00000000000000000110000)))))
(declare-fun spoon_143 (potato_34 potato_34) Bool)
(declare-fun spoon_144 (Float32) potato_5)
(declare-fun spoon_145 (potato_5) Bool)
(declare-fun spoon_146 (potato_5) Float32)
(declare-const cat_147 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_148 ((kitten_96 potato_35)) potato_34 (get_potato_35_a kitten_96))
(define-fun spoon_149 ((kitten_97 Float32) (kitten_98 Bool) (kitten_99 Bool) (kitten_100 Bool)) Bool (=> (or (= kitten_98 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_142 kitten_97)))
(declare-fun spoon_150 (Float32) Float32)
(declare-fun spoon_151 (Float32 Float32) Bool)
(assert (forall ((kitten_101 Float32)) (! (=> (spoon_141 kitten_101 true true true) (spoon_149 (spoon_150 kitten_101) true false true)) :pattern ((spoon_150 kitten_101)))))
(define-fun spoon_152 ((kitten_102 Float32) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool)) Bool (=> (or (= kitten_103 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_126 kitten_102)))
(declare-fun spoon_153 (Float32) Float32)
(declare-fun spoon_154 (Float32 Float32) Bool)
(assert (forall ((kitten_106 Float32)) (! (=> (spoon_152 kitten_106 true true true) (spoon_140 (spoon_153 kitten_106) true false true)) :pattern ((spoon_153 kitten_106)))))
(declare-sort potato_36 0)
(define-fun spoon_155 ((kitten_107 Float64)) Bool (and (spoon_3 kitten_107) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_107) (fp.leq kitten_107 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_156 (potato_36 potato_36) Bool)
(declare-fun spoon_157 (Float64) potato_5)
(declare-fun spoon_158 (potato_5) Bool)
(declare-fun spoon_159 (potato_5) Float64)
(declare-const cat_160 potato_36)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_36)))))
(define-fun spoon_161 ((kitten_108 potato_37)) potato_36 (get_potato_37_a kitten_108))
(define-fun spoon_162 ((kitten_109 Float64) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_110 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_155 kitten_109)))
(declare-sort potato_38 0)
(define-fun spoon_163 ((kitten_113 Float64)) Bool (and (spoon_3 kitten_113) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_113) (fp.leq kitten_113 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_164 (potato_38 potato_38) Bool)
(declare-fun spoon_165 (Float64) potato_5)
(declare-fun spoon_166 (potato_5) Bool)
(declare-fun spoon_167 (potato_5) Float64)
(declare-const cat_168 potato_38)
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_38)))))
(define-fun spoon_169 ((kitten_114 potato_39)) potato_38 (get_potato_39_a kitten_114))
(define-fun spoon_170 ((kitten_115 Float64) (kitten_116 Bool) (kitten_117 Bool) (kitten_118 Bool)) Bool (=> (or (= kitten_116 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_163 kitten_115)))
(declare-const cat_171 potato_18)
(declare-const cat_172 Int)
(declare-const cat_173 potato_26)
(declare-const cat_174 Int)
(declare-const cat_175 Float64)
(declare-const cat_176 Int)
(declare-const cat_177 Float64)
(declare-const cat_178 Int)
(declare-const cat_179 Float32)
(declare-const cat_180 Int)
(declare-const cat_181 Int)
(declare-const cat_182 Int)
(declare-const cat_183 Int)
(declare-const cat_184 Int)
(declare-const cat_185 Int)
(declare-const cat_186 Int)
(declare-const cat_187 Int)
(declare-const cat_188 Int)
(declare-const cat_189 Int)
(declare-const cat_190 Int)
(declare-const cat_191 Int)
(declare-const cat_192 Int)
(declare-sort potato_40 0)
(define-fun spoon_193 ((kitten_119 Float32)) Bool (and (spoon_1 kitten_119) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_119) (fp.leq kitten_119 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_194 (potato_40 potato_40) Bool)
(declare-fun spoon_195 (Float32) potato_5)
(declare-fun spoon_196 (potato_5) Bool)
(declare-fun spoon_197 (potato_5) Float32)
(declare-const cat_198 potato_40)
(declare-datatypes () ((potato_41 (mk_potato_41 (get_potato_41_a potato_40)))))
(define-fun spoon_199 ((kitten_120 potato_41)) potato_40 (get_potato_41_a kitten_120))
(define-fun spoon_200 ((kitten_121 Float32) (kitten_122 Bool) (kitten_123 Bool) (kitten_124 Bool)) Bool (=> (or (= kitten_122 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_90 kitten_121)))
(declare-fun spoon_201 (Float32 Float32) Float32)
(declare-fun spoon_202 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_125 Float32) (kitten_126 Float32)) (! (=> (and (spoon_200 kitten_125 true true true) (spoon_200 kitten_126 true true true)) (spoon_200 (spoon_201 kitten_125 kitten_126) true false true)) :pattern ((spoon_201 kitten_125 kitten_126)))))
(define-fun spoon_203 ((kitten_127 Float32) (kitten_128 Bool) (kitten_129 Bool) (kitten_130 Bool)) Bool (=> (or (= kitten_128 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_193 kitten_127)))
(define-fun spoon_204 ((kitten_131 Float32) (kitten_132 Bool) (kitten_133 Bool) (kitten_134 Bool)) Bool (=> (or (= kitten_132 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_53 kitten_131)))
(assert (= cat_78 (mk_potato_18 (mk_potato_16 (spoon_61 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_61 (fp #b0 #b00000000 #b00000000000000000000000))))))
(assert (= cat_115 (mk_potato_26 (mk_potato_24 (spoon_89 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_98 (fp #b0 #b00000000 #b00000000000000000000000))))))
(declare-const cat_205 potato_20)
(declare-const cat_206 potato_22)
(declare-const cat_207 Bool)
(declare-const cat_208 Float32)
(declare-const cat_209 Float32)
(declare-const cat_210 Float32)
(declare-const cat_211 Float32)
(declare-const cat_212 Float32)
(declare-const cat_213 Float32)
(declare-const cat_214 Float32)
(declare-const cat_215 Float32)
(declare-const cat_216 Float32)
(declare-const cat_217 potato_14)
(declare-const cat_218 potato_14)
(declare-const cat_219 potato_14)
(declare-const cat_220 potato_14)
(declare-const cat_221 potato_14)
(declare-const cat_222 potato_14)
(declare-const cat_223 potato_22)
(declare-const cat_224 potato_20)
(declare-const cat_225 potato_20)
(declare-const cat_226 potato_22)
(declare-const cat_227 potato_20)
(declare-const cat_228 potato_22)
(declare-const cat_229 Bool)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float32)
(declare-const cat_233 Float32)
(declare-const cat_234 Float32)
(declare-const cat_235 Float32)
(declare-const cat_236 Float32)
(declare-const cat_237 Float32)
(declare-const cat_238 Float32)
(declare-const cat_239 Float32)
(declare-const cat_240 Float32)
(declare-const cat_241 Float32)
(declare-const cat_242 Float32)
(declare-const cat_243 Float32)
(declare-const cat_244 Float32)
(declare-const cat_245 Float32)
(declare-const cat_246 Float32)
(declare-const cat_247 Float32)
(declare-const cat_248 Float32)
(declare-const cat_249 Float32)
(declare-const cat_250 Float32)
(declare-const cat_251 Float32)
(declare-const cat_252 Float32)
(declare-const cat_253 Float32)
(declare-const cat_254 Float32)
(declare-const cat_255 Float32)
(declare-const cat_256 Float32)
(declare-const cat_257 Float32)
(declare-const cat_258 Float32)
(declare-const cat_259 Float32)
(declare-const cat_260 Bool)
(declare-const cat_261 Bool)
(declare-const cat_262 Float32)
(declare-const cat_263 Float32)
(declare-const cat_264 Float32)
(declare-const cat_265 Float32)
(declare-const cat_266 Bool)
(declare-const cat_267 Bool)
(declare-const cat_268 Float32)
(declare-const cat_269 Float32)
(declare-const cat_270 Float32)
(declare-const cat_271 Float32)
(declare-const cat_272 Float32)
(declare-const cat_273 Float32)
(declare-const cat_274 Float32)
(declare-const cat_275 Float32)
(declare-const cat_276 Float32)
(declare-const cat_277 potato_10)
(declare-const cat_278 Float32)
(declare-const cat_279 potato_10)
(declare-const cat_280 Float32)
(declare-const cat_281 potato_10)
(declare-const cat_282 Float32)
(declare-const cat_283 potato_10)
(declare-const cat_284 Float32)
(declare-const cat_285 potato_10)
(declare-const cat_286 Float32)
(declare-const cat_287 potato_7)
(declare-const cat_288 Bool)
(declare-const cat_289 potato_25)
(declare-const cat_290 potato_24)
(declare-const cat_291 Bool)
(declare-const cat_292 Bool)
(declare-const cat_293 potato_24)
(declare-const cat_294 potato_10)
(declare-const cat_295 Float32)
(declare-const cat_296 potato_10)
(declare-const cat_297 Float32)
(declare-const cat_298 potato_10)
(declare-const cat_299 Float32)
(declare-const cat_300 potato_10)
(declare-const cat_301 Float32)
(declare-const cat_302 potato_7)
(declare-const cat_303 Bool)
(declare-const cat_304 potato_10)
(declare-const cat_305 Float32)
(declare-const cat_306 potato_10)
(declare-const cat_307 Float32)
(declare-const cat_308 potato_10)
(declare-const cat_309 Float32)
(declare-const cat_310 potato_10)
(declare-const cat_311 Float32)
(declare-const cat_312 potato_7)
(declare-const cat_313 Bool)
(declare-const cat_314 potato_10)
(declare-const cat_315 Float32)
(declare-const cat_316 potato_10)
(declare-const cat_317 Float32)
(declare-const cat_318 Bool)
(declare-const cat_319 Bool)
(declare-const cat_320 potato_10)
(declare-const cat_321 Float32)
(assert (= (spoon_60 cat_217) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_60 cat_218) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_218 cat_219))
(assert (= cat_217 cat_220))
(assert (= cat_221 cat_219))
(assert (= cat_222 cat_220))
(assert (= (mk_potato_18 (mk_potato_16 cat_221 cat_222)) cat_78))
(assert (= (spoon_97 cat_223) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_88 cat_224) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_224 cat_225))
(assert (= cat_223 cat_226))
(assert (= cat_227 cat_225))
(assert (= cat_228 cat_226))
(assert (= (mk_potato_26 (mk_potato_24 cat_227 cat_228)) cat_115))
(assert (spoon_163 cat_175))
(assert (spoon_155 cat_177))
(assert (spoon_1 cat_179))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_179) (fp.leq cat_179 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_175) (fp.leq cat_175 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (= cat_275 cat_208))
(assert (= cat_276 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_276))
(assert (= cat_277 (mk_potato_10 cat_209)))
(assert (= cat_278 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_278))
(assert (= cat_279 (mk_potato_10 cat_210)))
(assert (= cat_280 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_280))
(assert (= cat_281 (mk_potato_10 cat_211)))
(assert (= cat_282 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_282))
(assert (= cat_283 (mk_potato_10 cat_212)))
(assert (= cat_284 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_1 cat_284))
(assert (= cat_285 (mk_potato_10 cat_213)))
(assert (= cat_286 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_133 cat_286))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_80 cat_214)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_215)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)) (spoon_1 cat_216)))
(assert (= cat_287 (mk_potato_7 cat_207)))
(assert (= cat_288 (spoon_41 1)))
(assert (= cat_289 (mk_potato_25 (mk_potato_24 cat_205 cat_206))))
(assert (= cat_290 (get_potato_26_a cat_115)))
(assert (= cat_229 (spoon_117 cat_171 cat_78)))
(assert (= cat_291 (ite (not (= cat_229 true)) true false)))
(assert (= cat_291 true))
(assert (=> (= cat_292 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293))) (and (= cat_230 (spoon_153 (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_133 cat_230)))))
(assert (=> (= cat_292 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293))) (= cat_294 (mk_potato_10 cat_286)))))
(assert (=> (= cat_292 true) (=> (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293))) (= cat_295 cat_230))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (and (= cat_231 (spoon_153 (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (spoon_133 cat_231))))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (= cat_296 (mk_potato_10 cat_286))))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000))) (= cat_297 cat_231)))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (not (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (and (= cat_232 (spoon_88 (get_potato_24_a cat_293))) (spoon_1 (spoon_88 (get_potato_24_a cat_293))))))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (not (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (and (= cat_233 (spoon_153 cat_232)) (spoon_133 cat_233))))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (not (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_298 (mk_potato_10 cat_286))))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (not (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_299 cat_233)))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (=> (not (fp.lt (spoon_88 (get_potato_24_a cat_293)) (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)))) (= cat_297 cat_299)))))
(assert (=> (= cat_292 true) (=> (not (fp.lt (fp #b0 #b10000101 #b01100111111101011101000) (spoon_88 (get_potato_24_a cat_293)))) (= cat_295 cat_297))))
(assert (=> (= cat_292 true) (=> (spoon_193 cat_179) (and (= cat_234 (fp.mul RNE cat_179 cat_179)) (spoon_1 (fp.mul RNE cat_179 cat_179))))))
(assert (=> (= cat_292 true) (=> (spoon_193 cat_179) (= cat_300 (mk_potato_10 cat_284)))))
(assert (=> (= cat_292 true) (=> (spoon_193 cat_179) (= cat_301 cat_234))))
(assert (=> (= cat_292 true) (=> (spoon_193 cat_179) (= cat_303 cat_292))))
(assert (=> (= cat_292 true) (=> (not (spoon_193 cat_179)) (= cat_302 (mk_potato_7 cat_292)))))
(assert (=> (= cat_292 true) (=> (not (spoon_193 cat_179)) (= cat_303 (spoon_41 0)))))
(assert (=> (= cat_292 true) (=> (not (spoon_193 cat_179)) (= cat_301 cat_284))))
(assert (=> (= cat_292 true) (= cat_304 (mk_potato_10 cat_278))))
(assert (=> (= cat_292 true) (= cat_305 ((_ to_fp 8 24) RNE (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp.mul RNE cat_175 cat_175))))))
(assert (=> (= cat_292 true) (and (= cat_235 cat_305) (spoon_1 cat_305))))
(assert (=> (= cat_292 true) (and (= cat_236 (spoon_150 cat_235)) (spoon_142 cat_236))))
(assert (=> (= cat_292 true) (= cat_306 (mk_potato_10 cat_276))))
(assert (=> (= cat_292 true) (= cat_307 cat_236)))
(assert (=> (not (= cat_292 true)) (= cat_295 cat_286)))
(assert (=> (not (= cat_292 true)) (= cat_301 cat_284)))
(assert (=> (not (= cat_292 true)) (= cat_305 cat_278)))
(assert (=> (not (= cat_292 true)) (= cat_307 cat_276)))
(assert (=> (not (= cat_292 true)) (= cat_303 cat_292)))
(assert (=> (= cat_303 true) (and (= cat_237 (fp.sub RNE cat_305 cat_301)) (spoon_1 (fp.sub RNE cat_305 cat_301)))))
(assert (=> (= cat_303 true) (= cat_238 (fp.add RNE cat_237 (fp.mul RNE cat_295 cat_295)))))
(assert (=> (= cat_303 true) (and (= cat_239 cat_238) (spoon_1 cat_238))))
(assert (=> (= cat_303 true) (= cat_308 (mk_potato_10 cat_282))))
(assert (=> (= cat_303 true) (= cat_309 cat_239)))
(assert (=> (= cat_303 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309) (and (= cat_240 cat_309) (spoon_1 cat_309)))))
(assert (=> (= cat_303 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309) (and (= cat_241 (spoon_150 cat_240)) (spoon_142 cat_241)))))
(assert (=> (= cat_303 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309) (= cat_310 (mk_potato_10 cat_280)))))
(assert (=> (= cat_303 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309) (= cat_311 cat_241))))
(assert (=> (= cat_303 true) (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309) (= cat_313 cat_303))))
(assert (=> (= cat_303 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309)) (= cat_312 (mk_potato_7 cat_303)))))
(assert (=> (= cat_303 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309)) (= cat_313 (spoon_41 0)))))
(assert (=> (= cat_303 true) (=> (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) cat_309)) (= cat_311 cat_280))))
(assert (=> (not (= cat_303 true)) (= cat_309 cat_282)))
(assert (=> (not (= cat_303 true)) (= cat_311 cat_280)))
(assert (=> (not (= cat_303 true)) (= cat_313 cat_303)))
(assert (= cat_313 true))
(assert (and (= cat_246 (fp.mul RNE cat_311 cat_179)) (spoon_1 (fp.mul RNE cat_311 cat_179))))
(assert (and (= cat_242 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_175 cat_175)) cat_301)) (spoon_1 (fp.add RNE ((_ to_fp 8 24) RNE (fp.mul RNE cat_175 cat_175)) cat_301))))
(assert (= cat_243 (fp.mul RNE cat_307 cat_242)))
(assert (and (= cat_244 cat_243) (spoon_1 cat_243)))
(assert (= cat_245 (fp.mul RNE cat_244 cat_295)))
(assert (and (= cat_247 cat_245) (spoon_1 cat_245)))
(assert (= cat_248 (fp.sub RNE cat_247 cat_246)))
(assert (not (spoon_1 cat_248)))
(check-sat)
(exit)
