(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_13 Int)) Bool (and (<= (- cat_16) kitten_13) (<= kitten_13 cat_16)))
(define-fun spoon_18 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_19 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_20 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_21 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_19 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_20 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_22 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_26 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_27 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_28 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-const cat_29 Int)
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= (- cat_29) kitten_29) (<= kitten_29 cat_29)))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_34 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_32 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_33 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_35 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_37 (Bool) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (Float32) Float32)
(declare-fun spoon_41 (Float32 Float32) Bool)
(declare-sort potato_12 0)
(define-fun spoon_42 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_41) (fp.leq kitten_41 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_43 (potato_12 potato_12) Bool)
(declare-fun spoon_44 (Float32) potato_5)
(declare-fun spoon_45 (potato_5) Bool)
(declare-fun spoon_46 (potato_5) Float32)
(declare-const cat_47 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_48 ((kitten_42 potato_13)) potato_12 (get_potato_13_a kitten_42))
(define-fun spoon_49 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_42 kitten_43)))
(declare-sort potato_14 0)
(define-fun spoon_50 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_51 (potato_14 potato_14) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_56 ((kitten_49 potato_15)) potato_14 (get_potato_15_a kitten_49))
(define-fun spoon_57 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_50 kitten_50)))
(assert (forall ((kitten_55 Float32)) (! (=> (spoon_49 kitten_55 true true true true) (spoon_57 (spoon_40 kitten_55) true false true true)) :pattern ((spoon_40 kitten_55)))))
(declare-fun spoon_58 (Float32) Float32)
(declare-fun spoon_59 (Float32 Float32) Bool)
(assert (forall ((kitten_56 Float32)) (! (=> (spoon_49 kitten_56 true true true true) (spoon_57 (spoon_58 kitten_56) true false true true)) :pattern ((spoon_58 kitten_56)))))
(declare-fun spoon_60 (Float32) Float32)
(declare-fun spoon_61 (Float32 Float32) Bool)
(declare-sort potato_16 0)
(define-fun spoon_62 ((kitten_57 Float32)) Bool (and (spoon_1 kitten_57) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_57) (fp.leq kitten_57 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_63 (potato_16 potato_16) Bool)
(declare-fun spoon_64 (Float32) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Float32)
(declare-const cat_67 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_68 ((kitten_58 potato_17)) potato_16 (get_potato_17_a kitten_58))
(define-fun spoon_69 ((kitten_59 Float32) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_60 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_62 kitten_59)))
(assert (forall ((kitten_64 Float32)) (! (=> (spoon_69 kitten_64 true true true true) (spoon_49 (spoon_60 kitten_64) true false true true)) :pattern ((spoon_60 kitten_64)))))
(declare-fun spoon_70 (Float32) Float32)
(declare-fun spoon_71 (Float32 Float32) Bool)
(declare-sort potato_18 0)
(define-fun spoon_72 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_65) (fp.leq kitten_65 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_73 (potato_18 potato_18) Bool)
(declare-fun spoon_74 (Float32) potato_5)
(declare-fun spoon_75 (potato_5) Bool)
(declare-fun spoon_76 (potato_5) Float32)
(declare-const cat_77 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_78 ((kitten_66 potato_19)) potato_18 (get_potato_19_a kitten_66))
(define-fun spoon_79 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_72 kitten_67)))
(assert (forall ((kitten_72 Float32)) (! (=> (spoon_79 kitten_72 true true true true) (spoon_49 (spoon_70 kitten_72) true false true true)) :pattern ((spoon_70 kitten_72)))))
(declare-fun spoon_80 (Float32) Float32)
(declare-fun spoon_81 (Float32 Float32) Bool)
(declare-const cat_82 Float64)
(declare-const cat_83 Int)
(declare-const cat_84 Float32)
(declare-const cat_85 Int)
(assert (forall ((kitten_73 Float32)) (! (=> (and (spoon_69 kitten_73 true true true true) (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_84) (fp.leq cat_84 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_82) (fp.leq cat_82 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010))))) (spoon_69 (spoon_80 kitten_73) true false true true)) :pattern ((spoon_80 kitten_73)))))
(declare-fun spoon_86 (potato_16) Float32)
(declare-fun spoon_87 (Float32) potato_16)
(assert (forall ((kitten_74 potato_16)) (! (= (spoon_87 (spoon_86 kitten_74)) kitten_74) :pattern ((spoon_86 kitten_74)))))
(assert (forall ((kitten_75 potato_16)) (! (spoon_62 (spoon_86 kitten_75)) :pattern ((spoon_86 kitten_75)))))
(assert (forall ((kitten_76 Float32)) (! (=> (spoon_62 kitten_76) (= (spoon_86 (spoon_87 kitten_76)) kitten_76)) :pattern ((spoon_86 (spoon_87 kitten_76))))))
(declare-sort potato_20 0)
(define-fun spoon_88 ((kitten_77 Float32)) Bool (and (spoon_1 kitten_77) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_77) (fp.leq kitten_77 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_89 (potato_20 potato_20) Bool)
(declare-fun spoon_90 (Float32) potato_5)
(declare-fun spoon_91 (potato_5) Bool)
(declare-fun spoon_92 (potato_5) Float32)
(declare-const cat_93 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_94 ((kitten_78 potato_21)) potato_20 (get_potato_21_a kitten_78))
(declare-fun spoon_95 (potato_20) Float32)
(declare-fun spoon_96 (Float32) potato_20)
(assert (forall ((kitten_79 potato_20)) (! (= (spoon_96 (spoon_95 kitten_79)) kitten_79) :pattern ((spoon_95 kitten_79)))))
(assert (forall ((kitten_80 potato_20)) (! (spoon_88 (spoon_95 kitten_80)) :pattern ((spoon_95 kitten_80)))))
(assert (forall ((kitten_81 Float32)) (! (=> (spoon_88 kitten_81) (= (spoon_95 (spoon_96 kitten_81)) kitten_81)) :pattern ((spoon_95 (spoon_96 kitten_81))))))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_16) (get_potato_22_b potato_20)))))
(define-fun spoon_97 ((kitten_82 potato_22)) potato_16 (get_potato_22_a kitten_82))
(define-fun spoon_98 ((kitten_83 potato_22)) potato_20 (get_potato_22_b kitten_83))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_99 ((kitten_84 potato_23)) potato_22 (get_potato_23_a kitten_84))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_22)))))
(define-fun spoon_100 ((kitten_85 potato_24)) potato_22 (get_potato_24_a kitten_85))
(define-fun spoon_101 ((kitten_86 potato_24) (kitten_87 potato_24)) Bool (ite (and (= (spoon_86 (get_potato_22_a (get_potato_24_a kitten_86))) (spoon_86 (get_potato_22_a (get_potato_24_a kitten_87)))) (= (spoon_95 (get_potato_22_b (get_potato_24_a kitten_86))) (spoon_95 (get_potato_22_b (get_potato_24_a kitten_87))))) true false))
(declare-const cat_102 Int)
(declare-fun spoon_103 (potato_24) Int)
(declare-const cat_104 Int)
(declare-fun spoon_105 (potato_24) Int)
(assert (<= 0 cat_102))
(assert (forall ((kitten_88 potato_24)) (<= 0 (spoon_103 kitten_88))))
(assert (<= 0 cat_104))
(assert (forall ((kitten_89 potato_24)) (<= 0 (spoon_105 kitten_89))))
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(assert (<= 0 cat_106))
(assert (< cat_106 cat_107))
(assert (<= 0 cat_108))
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(declare-const cat_111 Int)
(assert (<= 0 cat_109))
(assert (< cat_109 cat_110))
(assert (<= 0 cat_111))
(declare-fun spoon_112 (potato_24 potato_24) Bool)
(declare-const cat_113 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_114 ((kitten_90 potato_25)) potato_24 (get_potato_25_a kitten_90))
(declare-sort potato_26 0)
(declare-fun spoon_115 (potato_26 potato_26) Bool)
(declare-fun spoon_116 (Float64) potato_5)
(declare-fun spoon_117 (potato_5) Bool)
(declare-fun spoon_118 (potato_5) Float64)
(declare-const cat_119 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_120 ((kitten_91 potato_27)) potato_26 (get_potato_27_a kitten_91))
(declare-sort potato_28 0)
(declare-fun spoon_121 (potato_28 potato_28) Bool)
(declare-fun spoon_122 (Float64) potato_5)
(declare-fun spoon_123 (potato_5) Bool)
(declare-fun spoon_124 (potato_5) Float64)
(declare-const cat_125 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_126 ((kitten_92 potato_29)) potato_28 (get_potato_29_a kitten_92))
(define-fun spoon_127 ((kitten_93 Float64) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool) (kitten_97 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_93)))
(declare-sort potato_30 0)
(define-fun spoon_128 ((kitten_98 Float64)) Bool (and (spoon_3 kitten_98) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_98) (fp.leq kitten_98 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_129 (potato_30 potato_30) Bool)
(declare-fun spoon_130 (Float64) potato_5)
(declare-fun spoon_131 (potato_5) Bool)
(declare-fun spoon_132 (potato_5) Float64)
(declare-const cat_133 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_134 ((kitten_99 potato_31)) potato_30 (get_potato_31_a kitten_99))
(define-fun spoon_135 ((kitten_100 Float64) (kitten_101 Bool) (kitten_102 Bool) (kitten_103 Bool) (kitten_104 Bool)) Bool (=> (or (= kitten_101 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_128 kitten_100)))
(declare-sort potato_32 0)
(define-fun spoon_136 ((kitten_105 Float64)) Bool (and (spoon_3 kitten_105) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_105) (fp.leq kitten_105 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_137 (potato_32 potato_32) Bool)
(declare-fun spoon_138 (Float64) potato_5)
(declare-fun spoon_139 (potato_5) Bool)
(declare-fun spoon_140 (potato_5) Float64)
(declare-const cat_141 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_142 ((kitten_106 potato_33)) potato_32 (get_potato_33_a kitten_106))
(define-fun spoon_143 ((kitten_107 Float64) (kitten_108 Bool) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool)) Bool (=> (or (= kitten_108 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_136 kitten_107)))
(declare-sort potato_34 0)
(define-fun spoon_144 ((kitten_112 Float32)) Bool (and (spoon_1 kitten_112) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_112) (fp.leq kitten_112 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_145 (potato_34 potato_34) Bool)
(declare-fun spoon_146 (Float32) potato_5)
(declare-fun spoon_147 (potato_5) Bool)
(declare-fun spoon_148 (potato_5) Float32)
(declare-const cat_149 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_150 ((kitten_113 potato_35)) potato_34 (get_potato_35_a kitten_113))
(define-fun spoon_151 ((kitten_114 Float32) (kitten_115 Bool) (kitten_116 Bool) (kitten_117 Bool) (kitten_118 Bool)) Bool (=> (or (= kitten_115 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_144 kitten_114)))
(declare-const cat_152 potato_24)
(declare-const cat_153 Int)
(declare-const cat_154 potato_24)
(declare-const cat_155 Int)
(declare-const cat_156 Float64)
(declare-const cat_157 Int)
(declare-const cat_158 Int)
(declare-const cat_159 Int)
(declare-const cat_160 Int)
(declare-const cat_161 Int)
(declare-const cat_162 Int)
(declare-const cat_163 Int)
(declare-const cat_164 Int)
(declare-const cat_165 Int)
(declare-const cat_166 Int)
(declare-const cat_167 Int)
(declare-const cat_168 Int)
(declare-const cat_169 Int)
(declare-const cat_170 Int)
(declare-const cat_171 Int)
(declare-const cat_172 Int)
(declare-const cat_173 Int)
(define-fun spoon_174 ((kitten_119 Float32) (kitten_120 Bool) (kitten_121 Bool) (kitten_122 Bool) (kitten_123 Bool)) Bool (=> (or (= kitten_120 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_88 kitten_119)))
(declare-const cat_175 Float64)
(declare-const cat_176 Float64)
(declare-const cat_177 Float32)
(declare-const cat_178 Float32)
(declare-const cat_179 Float32)
(declare-const cat_180 Float64)
(declare-const cat_181 Float64)
(declare-const cat_182 Float64)
(declare-const cat_183 Float64)
(declare-const cat_184 Float64)
(declare-const cat_185 Float64)
(declare-const cat_186 Float64)
(declare-const cat_187 Float64)
(declare-const cat_188 Float64)
(declare-const cat_189 Float64)
(declare-const cat_190 Float64)
(declare-const cat_191 Float32)
(declare-const cat_192 Float32)
(declare-const cat_193 Float32)
(declare-const cat_194 Float32)
(declare-const cat_195 Float32)
(declare-const cat_196 Float64)
(declare-const cat_197 Float32)
(declare-const cat_198 Float64)
(declare-const cat_199 Float32)
(declare-const cat_200 Float64)
(declare-const cat_201 Float32)
(declare-const cat_202 Float64)
(declare-const cat_203 Float32)
(declare-const cat_204 Float64)
(declare-const cat_205 Float32)
(declare-const cat_206 Float64)
(declare-const cat_207 Float64)
(declare-const cat_208 Float64)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float64)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 Float64)
(declare-const cat_219 Float64)
(declare-const cat_220 Bool)
(declare-const cat_221 Bool)
(declare-const cat_222 Float64)
(declare-const cat_223 Float64)
(declare-const cat_224 Bool)
(declare-const cat_225 Bool)
(declare-const cat_226 Float32)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float32)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float64)
(declare-const cat_233 Float64)
(declare-const cat_234 Float64)
(declare-const cat_235 Float64)
(declare-const cat_236 potato_11)
(declare-const cat_237 Float64)
(declare-const cat_238 potato_11)
(declare-const cat_239 Float64)
(declare-const cat_240 potato_11)
(declare-const cat_241 Float64)
(declare-const cat_242 potato_11)
(declare-const cat_243 Float64)
(declare-const cat_244 potato_11)
(declare-const cat_245 Float64)
(declare-const cat_246 potato_11)
(declare-const cat_247 Float64)
(declare-const cat_248 Bool)
(declare-const cat_249 Bool)
(assert (spoon_136 cat_82))
(assert (spoon_128 cat_156))
(assert (spoon_144 cat_84))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_175)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_176)))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_84) (fp.leq cat_84 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_82) (fp.leq cat_82 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_42 cat_177)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_42 cat_178)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_42 cat_179)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_180)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_181)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_182)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_183)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_184)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_185)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_186)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_187)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_188)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_189)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_190)))
(assert (and (= cat_191 (spoon_80 (spoon_86 (get_potato_22_a (get_potato_24_a cat_152))))) (spoon_62 cat_191)))
(assert (and (= cat_192 (spoon_60 cat_191)) (spoon_42 cat_192)))
(assert (= cat_226 cat_178))
(assert (= cat_227 cat_192))
(assert (and (= cat_193 (spoon_70 (fp.sub RNE (spoon_95 (get_potato_22_b (get_potato_24_a cat_152))) (spoon_95 (get_potato_22_b (get_potato_24_a cat_154)))))) (spoon_42 cat_193)))
(assert (= cat_228 cat_177))
(assert (= cat_229 cat_193))
(assert (and (= cat_194 (spoon_60 (spoon_86 (get_potato_22_a (get_potato_24_a cat_154))))) (spoon_42 cat_194)))
(assert (= cat_230 cat_179))
(assert (= cat_231 cat_194))
(assert (and (= cat_195 (spoon_40 cat_227)) (spoon_50 cat_195)))
(assert (= cat_196 ((_ to_fp 11 53) RNE cat_195)))
(assert (= cat_232 cat_180))
(assert (= cat_233 cat_196))
(assert (and (= cat_197 (spoon_58 cat_227)) (spoon_50 cat_197)))
(assert (= cat_198 ((_ to_fp 11 53) RNE cat_197)))
(assert (= cat_234 cat_181))
(assert (= cat_235 cat_198))
(assert (and (= cat_199 (spoon_40 cat_231)) (spoon_50 cat_199)))
(assert (= cat_200 ((_ to_fp 11 53) RNE cat_199)))
(assert (= cat_236 (mk_potato_11 cat_182)))
(assert (= cat_237 cat_200))
(assert (and (= cat_201 (spoon_58 cat_231)) (spoon_50 cat_201)))
(assert (= cat_202 ((_ to_fp 11 53) RNE cat_201)))
(assert (= cat_238 (mk_potato_11 cat_183)))
(assert (= cat_239 cat_202))
(assert (and (= cat_203 (spoon_40 cat_229)) (spoon_50 cat_203)))
(assert (= cat_204 ((_ to_fp 11 53) RNE cat_203)))
(assert (= cat_240 (mk_potato_11 cat_184)))
(assert (= cat_241 cat_204))
(assert (and (= cat_205 (spoon_58 cat_229)) (spoon_50 cat_205)))
(assert (= cat_206 ((_ to_fp 11 53) RNE cat_205)))
(assert (= cat_242 (mk_potato_11 cat_185)))
(assert (= cat_243 cat_206))
(assert (and (= cat_209 (fp.mul RNE cat_235 cat_239)) (spoon_3 (fp.mul RNE cat_235 cat_239))))
(assert (= cat_210 (fp.mul RNE cat_209 cat_243)))
(assert (and (= cat_211 cat_210) (spoon_3 cat_210)))
(assert (and (= cat_207 (fp.mul RNE cat_233 cat_237)) (spoon_3 (fp.mul RNE cat_233 cat_237))))
(assert (= cat_208 (fp.add RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_207)))
(assert (and (= cat_212 cat_208) (spoon_3 cat_208)))
(assert (= cat_213 (fp.add RNE cat_212 cat_211)))
(assert (and (= cat_214 cat_213) (spoon_3 cat_213)))
(assert (= cat_244 (mk_potato_11 cat_188)))
(assert (= cat_245 cat_214))
(assert (and (= cat_215 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_156) cat_241)) (spoon_3 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_156) cat_241))))
(assert (= cat_216 (fp.mul RNE cat_215 cat_235)))
(assert (and (= cat_217 cat_216) (spoon_3 cat_216)))
(assert (= cat_246 (mk_potato_11 cat_189)))
(assert (= cat_247 cat_217))
(assert (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_245)))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245) (and (= cat_223 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_245)) (spoon_3 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_245)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245) (= cat_224 (ite (fp.leq cat_247 cat_223) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245) (and (= cat_222 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_245)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_245)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245) (= cat_225 (ite (fp.leq cat_222 cat_247) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245) (= cat_249 (ite (= cat_225 true) cat_224 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_245)) (= cat_249 false)))
(assert (=> (= cat_249 true) (= cat_248 true)))
(assert (=> (not (= cat_249 true)) (=> (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_219 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_245)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_245))))))
(assert (=> (not (= cat_249 true)) (=> (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_220 (ite (fp.leq cat_247 cat_219) true false)))))
(assert (=> (not (= cat_249 true)) (=> (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_218 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_245)) (spoon_3 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_245))))))
(assert (=> (not (= cat_249 true)) (=> (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_221 (ite (fp.leq cat_218 cat_247) true false)))))
(assert (=> (not (= cat_249 true)) (=> (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_248 (ite (= cat_221 true) cat_220 false)))))
(assert (=> (not (= cat_249 true)) (=> (not (fp.lt cat_245 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (= cat_248 false))))
(assert (= cat_248 true))
(assert (not (not (fp.isZero cat_245))))
(check-sat)
(exit)
