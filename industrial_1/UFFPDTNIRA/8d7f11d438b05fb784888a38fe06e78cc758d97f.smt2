(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun spoon_16 (RoundingMode Int) Float32)
(declare-fun spoon_17 (RoundingMode Float32) Int)
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_27 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_28 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_29 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_30 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun spoon_31 (RoundingMode Int) Float64)
(declare-fun spoon_32 (RoundingMode Float64) Int)
(declare-const cat_33 Int)
(define-fun spoon_34 ((kitten_29 Int)) Bool (and (<= (- cat_33) kitten_29) (<= kitten_29 cat_33)))
(define-fun spoon_35 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_36 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_37 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_38 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_36 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_37 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_39 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_40 ((kitten_40 Bool)) Int (ite (= kitten_40 true) 1 0))
(define-fun spoon_41 ((kitten_41 Int)) Bool (ite (= kitten_41 0) false true))
(define-fun spoon_42 ((kitten_42 Int)) Bool (or (= kitten_42 0) (= kitten_42 1)))
(declare-fun spoon_43 (Bool) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_46 (potato_12 potato_12) Bool)
(declare-fun spoon_47 (Float32) potato_5)
(declare-fun spoon_48 (potato_5) Bool)
(declare-fun spoon_49 (potato_5) Float32)
(declare-const cat_50 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_51 ((kitten_43 potato_13)) potato_12 (get_potato_13_a kitten_43))
(define-fun spoon_52 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_44)))
(declare-sort potato_14 0)
(define-fun spoon_53 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_54 (potato_14 potato_14) Bool)
(declare-fun spoon_55 (Float32) potato_5)
(declare-fun spoon_56 (potato_5) Bool)
(declare-fun spoon_57 (potato_5) Float32)
(declare-const cat_58 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_59 ((kitten_49 potato_15)) potato_14 (get_potato_15_a kitten_49))
(declare-fun spoon_60 (potato_14) Float32)
(declare-fun spoon_61 (Float32) potato_14)
(assert (forall ((kitten_50 potato_14)) (! (= (spoon_61 (spoon_60 kitten_50)) kitten_50) :pattern ((spoon_60 kitten_50)))))
(assert (forall ((kitten_51 potato_14)) (! (spoon_53 (spoon_60 kitten_51)) :pattern ((spoon_60 kitten_51)))))
(assert (forall ((kitten_52 Float32)) (! (=> (spoon_53 kitten_52) (= (spoon_60 (spoon_61 kitten_52)) kitten_52)) :pattern ((spoon_60 (spoon_61 kitten_52))))))
(declare-sort potato_16 0)
(define-fun spoon_62 ((kitten_53 Float32)) Bool (and (spoon_1 kitten_53) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_53) (fp.leq kitten_53 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_63 (potato_16 potato_16) Bool)
(declare-fun spoon_64 (Float32) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Float32)
(declare-const cat_67 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_68 ((kitten_54 potato_17)) potato_16 (get_potato_17_a kitten_54))
(declare-fun spoon_69 (potato_16) Float32)
(declare-fun spoon_70 (Float32) potato_16)
(assert (forall ((kitten_55 potato_16)) (! (= (spoon_70 (spoon_69 kitten_55)) kitten_55) :pattern ((spoon_69 kitten_55)))))
(assert (forall ((kitten_56 potato_16)) (! (spoon_62 (spoon_69 kitten_56)) :pattern ((spoon_69 kitten_56)))))
(assert (forall ((kitten_57 Float32)) (! (=> (spoon_62 kitten_57) (= (spoon_69 (spoon_70 kitten_57)) kitten_57)) :pattern ((spoon_69 (spoon_70 kitten_57))))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_14) (get_potato_18_b potato_16)))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_71 ((kitten_58 potato_19)) potato_18 (get_potato_19_a kitten_58))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_18)))))
(define-fun spoon_72 ((kitten_59 potato_20)) potato_18 (get_potato_20_a kitten_59))
(define-fun spoon_73 ((kitten_60 potato_20) (kitten_61 potato_20)) Bool (ite (and (= (spoon_60 (get_potato_18_a (get_potato_20_a kitten_60))) (spoon_60 (get_potato_18_a (get_potato_20_a kitten_61)))) (= (spoon_69 (get_potato_18_b (get_potato_20_a kitten_60))) (spoon_69 (get_potato_18_b (get_potato_20_a kitten_61))))) true false))
(declare-const cat_74 Int)
(declare-fun spoon_75 (potato_20) Int)
(declare-const cat_76 Int)
(declare-fun spoon_77 (potato_20) Int)
(assert (<= 0 cat_74))
(assert (forall ((kitten_62 potato_20)) (<= 0 (spoon_75 kitten_62))))
(assert (<= 0 cat_76))
(assert (forall ((kitten_63 potato_20)) (<= 0 (spoon_77 kitten_63))))
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(assert (<= 0 cat_78))
(assert (< cat_78 cat_79))
(assert (<= 0 cat_80))
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(assert (<= 0 cat_81))
(assert (< cat_81 cat_82))
(assert (<= 0 cat_83))
(declare-fun spoon_84 (potato_20 potato_20) Bool)
(declare-const cat_85 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_86 ((kitten_64 potato_21)) potato_20 (get_potato_21_a kitten_64))
(declare-sort potato_22 0)
(define-fun spoon_87 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_65) (fp.leq kitten_65 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_88 (potato_22 potato_22) Bool)
(declare-fun spoon_89 (Float32) potato_5)
(declare-fun spoon_90 (potato_5) Bool)
(declare-fun spoon_91 (potato_5) Float32)
(declare-const cat_92 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_93 ((kitten_66 potato_23)) potato_22 (get_potato_23_a kitten_66))
(define-fun spoon_94 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_87 kitten_67)))
(declare-sort potato_24 0)
(define-fun spoon_95 ((kitten_71 Float32)) Bool (and (spoon_1 kitten_71) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_71) (fp.leq kitten_71 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_96 (potato_24 potato_24) Bool)
(declare-fun spoon_97 (Float32) potato_5)
(declare-fun spoon_98 (potato_5) Bool)
(declare-fun spoon_99 (potato_5) Float32)
(declare-const cat_100 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_101 ((kitten_72 potato_25)) potato_24 (get_potato_25_a kitten_72))
(define-fun spoon_102 ((kitten_73 Float32) (kitten_74 Bool) (kitten_75 Bool) (kitten_76 Bool)) Bool (=> (or (= kitten_74 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_95 kitten_73)))
(declare-fun spoon_103 (Float32) Float32)
(declare-fun spoon_104 (Float32 Float32) Bool)
(assert (forall ((kitten_77 Float32)) (! (=> (spoon_94 kitten_77 true true true) (spoon_102 (spoon_103 kitten_77) true false true)) :pattern ((spoon_103 kitten_77)))))
(declare-fun spoon_105 (Float32) Float32)
(declare-fun spoon_106 (Float32 Float32) Bool)
(assert (forall ((kitten_78 Float32)) (! (=> (spoon_94 kitten_78 true true true) (spoon_102 (spoon_105 kitten_78) true false true)) :pattern ((spoon_105 kitten_78)))))
(declare-sort potato_26 0)
(declare-fun spoon_107 (potato_26 potato_26) Bool)
(declare-fun spoon_108 (Float64) potato_5)
(declare-fun spoon_109 (potato_5) Bool)
(declare-fun spoon_110 (potato_5) Float64)
(declare-const cat_111 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_112 ((kitten_79 potato_27)) potato_26 (get_potato_27_a kitten_79))
(declare-sort potato_28 0)
(declare-fun spoon_113 (potato_28 potato_28) Bool)
(declare-fun spoon_114 (Float64) potato_5)
(declare-fun spoon_115 (potato_5) Bool)
(declare-fun spoon_116 (potato_5) Float64)
(declare-const cat_117 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_118 ((kitten_80 potato_29)) potato_28 (get_potato_29_a kitten_80))
(define-fun spoon_119 ((kitten_81 Float64) (kitten_82 Bool) (kitten_83 Bool) (kitten_84 Bool)) Bool (=> (or (= kitten_82 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_81)))
(declare-sort potato_30 0)
(define-fun spoon_120 ((kitten_85 Float64)) Bool (and (spoon_3 kitten_85) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_85) (fp.leq kitten_85 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_121 (potato_30 potato_30) Bool)
(declare-fun spoon_122 (Float64) potato_5)
(declare-fun spoon_123 (potato_5) Bool)
(declare-fun spoon_124 (potato_5) Float64)
(declare-const cat_125 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_126 ((kitten_86 potato_31)) potato_30 (get_potato_31_a kitten_86))
(define-fun spoon_127 ((kitten_87 Float64) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_88 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_120 kitten_87)))
(declare-sort potato_32 0)
(define-fun spoon_128 ((kitten_91 Float64)) Bool (and (spoon_3 kitten_91) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_91) (fp.leq kitten_91 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_129 (potato_32 potato_32) Bool)
(declare-fun spoon_130 (Float64) potato_5)
(declare-fun spoon_131 (potato_5) Bool)
(declare-fun spoon_132 (potato_5) Float64)
(declare-const cat_133 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_134 ((kitten_92 potato_33)) potato_32 (get_potato_33_a kitten_92))
(define-fun spoon_135 ((kitten_93 Float64) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_128 kitten_93)))
(define-fun spoon_136 ((kitten_97 Float32) (kitten_98 Bool) (kitten_99 Bool) (kitten_100 Bool)) Bool (=> (or (= kitten_98 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_53 kitten_97)))
(declare-fun spoon_137 (Float32) Float32)
(declare-fun spoon_138 (Float32 Float32) Bool)
(assert (forall ((kitten_101 Float32)) (! (=> (spoon_136 kitten_101 true true true) (spoon_94 (spoon_137 kitten_101) true false true)) :pattern ((spoon_137 kitten_101)))))
(declare-const cat_139 potato_20)
(declare-const cat_140 Int)
(declare-const cat_141 potato_20)
(declare-const cat_142 Int)
(declare-const cat_143 Float64)
(declare-const cat_144 Int)
(declare-const cat_145 Float64)
(declare-const cat_146 Int)
(declare-const cat_147 Float32)
(declare-const cat_148 Int)
(declare-const cat_149 Int)
(declare-const cat_150 Int)
(declare-sort potato_34 0)
(define-fun spoon_151 ((kitten_102 Float32)) Bool (and (spoon_1 kitten_102) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_102) (fp.leq kitten_102 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_152 (potato_34 potato_34) Bool)
(declare-fun spoon_153 (Float32) potato_5)
(declare-fun spoon_154 (potato_5) Bool)
(declare-fun spoon_155 (potato_5) Float32)
(declare-const cat_156 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_157 ((kitten_103 potato_35)) potato_34 (get_potato_35_a kitten_103))
(define-fun spoon_158 ((kitten_104 Float32) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_105 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_151 kitten_104)))
(declare-fun spoon_159 (Float32) Float32)
(declare-fun spoon_160 (Float32 Float32) Bool)
(assert (forall ((kitten_108 Float32)) (! (=> (spoon_158 kitten_108 true true true) (spoon_94 (spoon_159 kitten_108) true false true)) :pattern ((spoon_159 kitten_108)))))
(declare-const cat_161 Int)
(declare-const cat_162 Int)
(declare-const cat_163 Int)
(declare-const cat_164 Int)
(declare-const cat_165 Int)
(declare-const cat_166 Int)
(declare-const cat_167 Int)
(declare-const cat_168 Int)
(declare-const cat_169 Int)
(declare-const cat_170 Int)
(declare-const cat_171 Int)
(declare-const cat_172 Int)
(declare-const cat_173 Int)
(declare-const cat_174 Int)
(declare-fun spoon_175 (Float32) Float32)
(declare-fun spoon_176 (Float32 Float32) Bool)
(assert (forall ((kitten_109 Float32)) (! (=> (and (spoon_136 kitten_109 true true true) (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_147) (fp.leq cat_147 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_143) (fp.leq cat_143 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010))))) (spoon_136 (spoon_175 kitten_109) true false true)) :pattern ((spoon_175 kitten_109)))))
(define-fun spoon_177 ((kitten_110 Float32) (kitten_111 Bool) (kitten_112 Bool) (kitten_113 Bool)) Bool (=> (or (= kitten_111 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_62 kitten_110)))
(declare-const cat_178 Float64)
(declare-const cat_179 Float64)
(declare-const cat_180 Float32)
(declare-const cat_181 Float32)
(declare-const cat_182 Float32)
(declare-const cat_183 Float64)
(declare-const cat_184 Float64)
(declare-const cat_185 Float64)
(declare-const cat_186 Float64)
(declare-const cat_187 Float64)
(declare-const cat_188 Float64)
(declare-const cat_189 Float64)
(declare-const cat_190 Float64)
(declare-const cat_191 Float64)
(declare-const cat_192 Float64)
(declare-const cat_193 Float64)
(declare-const cat_194 Float32)
(declare-const cat_195 Float32)
(declare-const cat_196 Float32)
(declare-const cat_197 Float32)
(declare-const cat_198 Float32)
(declare-const cat_199 Float64)
(declare-const cat_200 Float32)
(declare-const cat_201 Float64)
(declare-const cat_202 Float32)
(declare-const cat_203 Float64)
(declare-const cat_204 Float32)
(declare-const cat_205 Float64)
(declare-const cat_206 Float32)
(declare-const cat_207 Float64)
(declare-const cat_208 Float32)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float64)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 Float64)
(declare-const cat_219 Float64)
(declare-const cat_220 Float64)
(declare-const cat_221 Float64)
(declare-const cat_222 Bool)
(declare-const cat_223 Float64)
(declare-const cat_224 Float64)
(declare-const cat_225 Bool)
(declare-const cat_226 Bool)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float32)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float32)
(declare-const cat_233 Float64)
(declare-const cat_234 Float64)
(declare-const cat_235 Float64)
(declare-const cat_236 Float64)
(declare-const cat_237 potato_11)
(declare-const cat_238 Float64)
(declare-const cat_239 potato_11)
(declare-const cat_240 Float64)
(declare-const cat_241 potato_11)
(declare-const cat_242 Float64)
(declare-const cat_243 potato_11)
(declare-const cat_244 Float64)
(declare-const cat_245 potato_11)
(declare-const cat_246 Float64)
(declare-const cat_247 potato_11)
(declare-const cat_248 Float64)
(declare-const cat_249 Bool)
(assert (spoon_128 cat_143))
(assert (spoon_120 cat_145))
(assert (spoon_1 cat_147))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_178)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_179)))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_147) (fp.leq cat_147 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_143) (fp.leq cat_143 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_87 cat_180)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_87 cat_181)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_87 cat_182)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_183)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_184)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_185)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_186)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_187)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_188)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_189)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_190)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_191)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_192)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_193)))
(assert (and (= cat_194 (spoon_175 (spoon_60 (get_potato_18_a (get_potato_20_a cat_139))))) (spoon_53 cat_194)))
(assert (and (= cat_195 (spoon_137 cat_194)) (spoon_87 cat_195)))
(assert (= cat_227 cat_181))
(assert (= cat_228 cat_195))
(assert (and (= cat_196 (spoon_159 (fp.sub RNE (spoon_69 (get_potato_18_b (get_potato_20_a cat_139))) (spoon_69 (get_potato_18_b (get_potato_20_a cat_141)))))) (spoon_87 cat_196)))
(assert (= cat_229 cat_180))
(assert (= cat_230 cat_196))
(assert (and (= cat_197 (spoon_137 (spoon_60 (get_potato_18_a (get_potato_20_a cat_141))))) (spoon_87 cat_197)))
(assert (= cat_231 cat_182))
(assert (= cat_232 cat_197))
(assert (and (= cat_198 (spoon_103 cat_228)) (spoon_95 cat_198)))
(assert (= cat_199 ((_ to_fp 11 53) RNE cat_198)))
(assert (= cat_233 cat_183))
(assert (= cat_234 cat_199))
(assert (and (= cat_200 (spoon_105 cat_228)) (spoon_95 cat_200)))
(assert (= cat_201 ((_ to_fp 11 53) RNE cat_200)))
(assert (= cat_235 cat_184))
(assert (= cat_236 cat_201))
(assert (and (= cat_202 (spoon_103 cat_232)) (spoon_95 cat_202)))
(assert (= cat_203 ((_ to_fp 11 53) RNE cat_202)))
(assert (= cat_237 (mk_potato_11 cat_185)))
(assert (= cat_238 cat_203))
(assert (and (= cat_204 (spoon_105 cat_232)) (spoon_95 cat_204)))
(assert (= cat_205 ((_ to_fp 11 53) RNE cat_204)))
(assert (= cat_239 (mk_potato_11 cat_186)))
(assert (= cat_240 cat_205))
(assert (and (= cat_206 (spoon_103 cat_230)) (spoon_95 cat_206)))
(assert (= cat_207 ((_ to_fp 11 53) RNE cat_206)))
(assert (= cat_241 (mk_potato_11 cat_187)))
(assert (= cat_242 cat_207))
(assert (and (= cat_208 (spoon_105 cat_230)) (spoon_95 cat_208)))
(assert (= cat_209 ((_ to_fp 11 53) RNE cat_208)))
(assert (= cat_243 (mk_potato_11 cat_188)))
(assert (= cat_244 cat_209))
(assert (and (= cat_212 (fp.mul RNE cat_236 cat_240)) (spoon_3 (fp.mul RNE cat_236 cat_240))))
(assert (= cat_213 (fp.mul RNE cat_212 cat_244)))
(assert (and (= cat_214 cat_213) (spoon_3 cat_213)))
(assert (and (= cat_210 (fp.mul RNE cat_234 cat_238)) (spoon_3 (fp.mul RNE cat_234 cat_238))))
(assert (= cat_211 (fp.add RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_210)))
(assert (and (= cat_215 cat_211) (spoon_3 cat_211)))
(assert (= cat_216 (fp.add RNE cat_215 cat_214)))
(assert (and (= cat_217 cat_216) (spoon_3 cat_216)))
(assert (= cat_245 (mk_potato_11 cat_191)))
(assert (= cat_246 cat_217))
(assert (and (= cat_218 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_145) cat_242)) (spoon_3 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_145) cat_242))))
(assert (= cat_219 (fp.mul RNE cat_218 cat_236)))
(assert (and (= cat_220 cat_219) (spoon_3 cat_219)))
(assert (= cat_247 (mk_potato_11 cat_192)))
(assert (= cat_248 cat_220))
(assert (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_246)))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246) (and (= cat_224 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_246)) (spoon_3 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_246)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246) (= cat_225 (ite (fp.leq cat_248 cat_224) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246) (and (= cat_223 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_246)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_246)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246) (= cat_226 (ite (fp.leq cat_223 cat_248) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246) (= cat_249 (ite (= cat_226 true) cat_225 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_246)) (= cat_249 false)))
(assert (not (= cat_249 true)))
(assert (fp.lt cat_246 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (and (= cat_221 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_246)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_246))))
(assert (= cat_222 (ite (fp.leq cat_248 cat_221) true false)))
(assert (not (spoon_3 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_246))))
(check-sat)
(exit)
