(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float64)) Bool (not (or (fp.isInfinite kitten_2) (fp.isNaN kitten_2))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-const cat_14 Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-fun spoon_23 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_24 ((kitten_23 Float64)) Bool (and (fp.isInfinite kitten_23) (fp.isPositive kitten_23)))
(define-fun spoon_25 ((kitten_24 Float64)) Bool (and (fp.isInfinite kitten_24) (fp.isNegative kitten_24)))
(define-fun spoon_26 ((kitten_25 Float64)) Bool (and (fp.isZero kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_27 ((kitten_26 Float64)) Bool (and (fp.isZero kitten_26) (fp.isNegative kitten_26)))
(declare-const cat_28 Int)
(define-fun spoon_29 ((kitten_27 Int)) Bool (and (<= (- cat_28) kitten_27) (<= kitten_27 cat_28)))
(define-fun spoon_30 ((kitten_28 Int)) Bool (and (<= (- 9007199254740992) kitten_28) (<= kitten_28 9007199254740992)))
(define-fun spoon_31 ((kitten_29 Float64) (kitten_30 Float64)) Bool (or (and (fp.isPositive kitten_29) (fp.isPositive kitten_30)) (and (fp.isNegative kitten_29) (fp.isNegative kitten_30))))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isNegative kitten_32)) (and (fp.isNegative kitten_31) (fp.isPositive kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64) (kitten_35 Float64)) Bool (and (=> (spoon_31 kitten_34 kitten_35) (fp.isPositive kitten_33)) (=> (spoon_32 kitten_34 kitten_35) (fp.isNegative kitten_33))))
(define-fun spoon_34 ((kitten_36 Float64) (kitten_37 Real)) Bool (or (and (fp.isPositive kitten_36) (< 0.0 kitten_37)) (and (fp.isNegative kitten_36) (< kitten_37 0.0))))
(declare-fun spoon_35 (Float64) Bool)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_38 Bool)) Int (ite (= kitten_38 true) 1 0))
(define-fun spoon_37 ((kitten_39 Int)) Bool (ite (= kitten_39 0) false true))
(define-fun spoon_38 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_39 (Bool) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_42 (potato_12 potato_12) Bool)
(declare-fun spoon_43 (Float32) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Float32)
(declare-const cat_46 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_47 ((kitten_41 potato_13)) potato_12 (get_potato_13_a kitten_41))
(define-fun spoon_48 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_42)))
(declare-sort potato_14 0)
(define-fun spoon_49 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_46) (fp.leq kitten_46 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_50 (potato_14 potato_14) Bool)
(declare-fun spoon_51 (Float32) potato_5)
(declare-fun spoon_52 (potato_5) Bool)
(declare-fun spoon_53 (potato_5) Float32)
(declare-const cat_54 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_55 ((kitten_47 potato_15)) potato_14 (get_potato_15_a kitten_47))
(declare-fun spoon_56 (potato_14) Float32)
(declare-fun spoon_57 (Float32) potato_14)
(assert (forall ((kitten_48 potato_14)) (! (= (spoon_57 (spoon_56 kitten_48)) kitten_48) :pattern ((spoon_56 kitten_48)))))
(assert (forall ((kitten_49 potato_14)) (! (spoon_49 (spoon_56 kitten_49)) :pattern ((spoon_56 kitten_49)))))
(assert (forall ((kitten_50 Float32)) (! (=> (spoon_49 kitten_50) (= (spoon_56 (spoon_57 kitten_50)) kitten_50)) :pattern ((spoon_56 (spoon_57 kitten_50))))))
(declare-sort potato_16 0)
(define-fun spoon_58 ((kitten_51 Float32)) Bool (and (spoon_1 kitten_51) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_51) (fp.leq kitten_51 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_59 (potato_16 potato_16) Bool)
(declare-fun spoon_60 (Float32) potato_5)
(declare-fun spoon_61 (potato_5) Bool)
(declare-fun spoon_62 (potato_5) Float32)
(declare-const cat_63 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_64 ((kitten_52 potato_17)) potato_16 (get_potato_17_a kitten_52))
(declare-fun spoon_65 (potato_16) Float32)
(declare-fun spoon_66 (Float32) potato_16)
(assert (forall ((kitten_53 potato_16)) (! (= (spoon_66 (spoon_65 kitten_53)) kitten_53) :pattern ((spoon_65 kitten_53)))))
(assert (forall ((kitten_54 potato_16)) (! (spoon_58 (spoon_65 kitten_54)) :pattern ((spoon_65 kitten_54)))))
(assert (forall ((kitten_55 Float32)) (! (=> (spoon_58 kitten_55) (= (spoon_65 (spoon_66 kitten_55)) kitten_55)) :pattern ((spoon_65 (spoon_66 kitten_55))))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_14) (get_potato_18_b potato_16)))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_67 ((kitten_56 potato_19)) potato_18 (get_potato_19_a kitten_56))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_18)))))
(define-fun spoon_68 ((kitten_57 potato_20)) potato_18 (get_potato_20_a kitten_57))
(define-fun spoon_69 ((kitten_58 potato_20) (kitten_59 potato_20)) Bool (ite (and (= (spoon_56 (get_potato_18_a (get_potato_20_a kitten_58))) (spoon_56 (get_potato_18_a (get_potato_20_a kitten_59)))) (= (spoon_65 (get_potato_18_b (get_potato_20_a kitten_58))) (spoon_65 (get_potato_18_b (get_potato_20_a kitten_59))))) true false))
(declare-const cat_70 Int)
(declare-fun spoon_71 (potato_20) Int)
(declare-const cat_72 Int)
(declare-fun spoon_73 (potato_20) Int)
(assert (<= 0 cat_70))
(assert (forall ((kitten_60 potato_20)) (<= 0 (spoon_71 kitten_60))))
(assert (<= 0 cat_72))
(assert (forall ((kitten_61 potato_20)) (<= 0 (spoon_73 kitten_61))))
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-const cat_76 Int)
(assert (<= 0 cat_74))
(assert (< cat_74 cat_75))
(assert (<= 0 cat_76))
(declare-const cat_77 Int)
(declare-const cat_78 Int)
(declare-const cat_79 Int)
(assert (<= 0 cat_77))
(assert (< cat_77 cat_78))
(assert (<= 0 cat_79))
(declare-fun spoon_80 (potato_20 potato_20) Bool)
(declare-const cat_81 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_82 ((kitten_62 potato_21)) potato_20 (get_potato_21_a kitten_62))
(declare-sort potato_22 0)
(define-fun spoon_83 ((kitten_63 Float32)) Bool (and (spoon_1 kitten_63) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_63) (fp.leq kitten_63 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_84 (potato_22 potato_22) Bool)
(declare-fun spoon_85 (Float32) potato_5)
(declare-fun spoon_86 (potato_5) Bool)
(declare-fun spoon_87 (potato_5) Float32)
(declare-const cat_88 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_89 ((kitten_64 potato_23)) potato_22 (get_potato_23_a kitten_64))
(define-fun spoon_90 ((kitten_65 Float32) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool)) Bool (=> (or (= kitten_66 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_83 kitten_65)))
(declare-sort potato_24 0)
(define-fun spoon_91 ((kitten_69 Float32)) Bool (and (spoon_1 kitten_69) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_69) (fp.leq kitten_69 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_92 (potato_24 potato_24) Bool)
(declare-fun spoon_93 (Float32) potato_5)
(declare-fun spoon_94 (potato_5) Bool)
(declare-fun spoon_95 (potato_5) Float32)
(declare-const cat_96 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_97 ((kitten_70 potato_25)) potato_24 (get_potato_25_a kitten_70))
(define-fun spoon_98 ((kitten_71 Float32) (kitten_72 Bool) (kitten_73 Bool) (kitten_74 Bool)) Bool (=> (or (= kitten_72 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_91 kitten_71)))
(declare-fun spoon_99 (Float32) Float32)
(declare-fun spoon_100 (Float32 Float32) Bool)
(assert (forall ((kitten_75 Float32)) (! (=> (spoon_90 kitten_75 true true true) (spoon_98 (spoon_99 kitten_75) true false true)) :pattern ((spoon_99 kitten_75)))))
(declare-fun spoon_101 (Float32) Float32)
(declare-fun spoon_102 (Float32 Float32) Bool)
(assert (forall ((kitten_76 Float32)) (! (=> (spoon_90 kitten_76 true true true) (spoon_98 (spoon_101 kitten_76) true false true)) :pattern ((spoon_101 kitten_76)))))
(declare-sort potato_26 0)
(declare-fun spoon_103 (potato_26 potato_26) Bool)
(declare-fun spoon_104 (Float64) potato_5)
(declare-fun spoon_105 (potato_5) Bool)
(declare-fun spoon_106 (potato_5) Float64)
(declare-const cat_107 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_108 ((kitten_77 potato_27)) potato_26 (get_potato_27_a kitten_77))
(declare-sort potato_28 0)
(declare-fun spoon_109 (potato_28 potato_28) Bool)
(declare-fun spoon_110 (Float64) potato_5)
(declare-fun spoon_111 (potato_5) Bool)
(declare-fun spoon_112 (potato_5) Float64)
(declare-const cat_113 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_114 ((kitten_78 potato_29)) potato_28 (get_potato_29_a kitten_78))
(define-fun spoon_115 ((kitten_79 Float64) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool)) Bool (=> (or (= kitten_80 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_2 kitten_79)))
(declare-sort potato_30 0)
(define-fun spoon_116 ((kitten_83 Float64)) Bool (and (spoon_2 kitten_83) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_83) (fp.leq kitten_83 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_117 (potato_30 potato_30) Bool)
(declare-fun spoon_118 (Float64) potato_5)
(declare-fun spoon_119 (potato_5) Bool)
(declare-fun spoon_120 (potato_5) Float64)
(declare-const cat_121 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_122 ((kitten_84 potato_31)) potato_30 (get_potato_31_a kitten_84))
(define-fun spoon_123 ((kitten_85 Float64) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (=> (or (= kitten_86 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_116 kitten_85)))
(declare-sort potato_32 0)
(define-fun spoon_124 ((kitten_89 Float64)) Bool (and (spoon_2 kitten_89) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_89) (fp.leq kitten_89 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_125 (potato_32 potato_32) Bool)
(declare-fun spoon_126 (Float64) potato_5)
(declare-fun spoon_127 (potato_5) Bool)
(declare-fun spoon_128 (potato_5) Float64)
(declare-const cat_129 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_130 ((kitten_90 potato_33)) potato_32 (get_potato_33_a kitten_90))
(define-fun spoon_131 ((kitten_91 Float64) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_92 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_124 kitten_91)))
(define-fun spoon_132 ((kitten_95 Float32) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_49 kitten_95)))
(declare-fun spoon_133 (Float32) Float32)
(declare-fun spoon_134 (Float32 Float32) Bool)
(assert (forall ((kitten_99 Float32)) (! (=> (spoon_132 kitten_99 true true true) (spoon_90 (spoon_133 kitten_99) true false true)) :pattern ((spoon_133 kitten_99)))))
(declare-const cat_135 potato_20)
(declare-const cat_136 Int)
(declare-const cat_137 potato_20)
(declare-const cat_138 Int)
(declare-const cat_139 Float64)
(declare-const cat_140 Int)
(declare-const cat_141 Float64)
(declare-const cat_142 Int)
(declare-const cat_143 Float32)
(declare-const cat_144 Int)
(declare-const cat_145 Int)
(declare-const cat_146 Int)
(declare-sort potato_34 0)
(define-fun spoon_147 ((kitten_100 Float32)) Bool (and (spoon_1 kitten_100) (and (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) kitten_100) (fp.leq kitten_100 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_148 (potato_34 potato_34) Bool)
(declare-fun spoon_149 (Float32) potato_5)
(declare-fun spoon_150 (potato_5) Bool)
(declare-fun spoon_151 (potato_5) Float32)
(declare-const cat_152 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_153 ((kitten_101 potato_35)) potato_34 (get_potato_35_a kitten_101))
(define-fun spoon_154 ((kitten_102 Float32) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool)) Bool (=> (or (= kitten_103 true) (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_147 kitten_102)))
(declare-fun spoon_155 (Float32) Float32)
(declare-fun spoon_156 (Float32 Float32) Bool)
(assert (forall ((kitten_106 Float32)) (! (=> (spoon_154 kitten_106 true true true) (spoon_90 (spoon_155 kitten_106) true false true)) :pattern ((spoon_155 kitten_106)))))
(declare-const cat_157 Int)
(declare-const cat_158 Int)
(declare-const cat_159 Int)
(declare-const cat_160 Int)
(declare-const cat_161 Int)
(declare-const cat_162 Int)
(declare-const cat_163 Int)
(declare-const cat_164 Int)
(declare-const cat_165 Int)
(declare-const cat_166 Int)
(declare-const cat_167 Int)
(declare-const cat_168 Int)
(declare-const cat_169 Int)
(declare-const cat_170 Int)
(declare-fun spoon_171 (Float32) Float32)
(declare-fun spoon_172 (Float32 Float32) Bool)
(assert (forall ((kitten_107 Float32)) (! (=> (and (spoon_132 kitten_107 true true true) (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_143) (fp.leq cat_143 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_139) (fp.leq cat_139 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010))))) (spoon_132 (spoon_171 kitten_107) true false true)) :pattern ((spoon_171 kitten_107)))))
(define-fun spoon_173 ((kitten_108 Float32) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool)) Bool (=> (or (= kitten_109 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_58 kitten_108)))
(declare-const cat_174 Float64)
(declare-const cat_175 Float64)
(declare-const cat_176 Float32)
(declare-const cat_177 Float32)
(declare-const cat_178 Float32)
(declare-const cat_179 Float64)
(declare-const cat_180 Float64)
(declare-const cat_181 Float64)
(declare-const cat_182 Float64)
(declare-const cat_183 Float64)
(declare-const cat_184 Float64)
(declare-const cat_185 Float64)
(declare-const cat_186 Float64)
(declare-const cat_187 Float64)
(declare-const cat_188 Float64)
(declare-const cat_189 Float64)
(declare-const cat_190 Float32)
(declare-const cat_191 Float32)
(declare-const cat_192 Float32)
(declare-const cat_193 Float32)
(declare-const cat_194 Float32)
(declare-const cat_195 Float64)
(declare-const cat_196 Float32)
(declare-const cat_197 Float64)
(declare-const cat_198 Float32)
(declare-const cat_199 Float64)
(declare-const cat_200 Float32)
(declare-const cat_201 Float64)
(declare-const cat_202 Float32)
(declare-const cat_203 Float64)
(declare-const cat_204 Float32)
(declare-const cat_205 Float64)
(declare-const cat_206 Float64)
(declare-const cat_207 Float64)
(declare-const cat_208 Float64)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float64)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 Bool)
(declare-const cat_219 Float64)
(declare-const cat_220 Float64)
(declare-const cat_221 Bool)
(declare-const cat_222 Bool)
(declare-const cat_223 Float32)
(declare-const cat_224 Float32)
(declare-const cat_225 Float32)
(declare-const cat_226 Float32)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float64)
(declare-const cat_230 Float64)
(declare-const cat_231 Float64)
(declare-const cat_232 Float64)
(declare-const cat_233 potato_11)
(declare-const cat_234 Float64)
(declare-const cat_235 potato_11)
(declare-const cat_236 Float64)
(declare-const cat_237 potato_11)
(declare-const cat_238 Float64)
(declare-const cat_239 potato_11)
(declare-const cat_240 Float64)
(declare-const cat_241 potato_11)
(declare-const cat_242 Float64)
(declare-const cat_243 potato_11)
(declare-const cat_244 Float64)
(declare-const cat_245 Bool)
(assert (spoon_124 cat_139))
(assert (spoon_116 cat_141))
(assert (spoon_1 cat_143))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_174)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_175)))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_143) (fp.leq cat_143 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_139) (fp.leq cat_139 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_83 cat_176)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_83 cat_177)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_83 cat_178)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_179)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_180)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_181)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_182)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_183)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_184)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_185)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_186)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_187)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_188)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_2 cat_189)))
(assert (and (= cat_190 (spoon_171 (spoon_56 (get_potato_18_a (get_potato_20_a cat_135))))) (spoon_49 cat_190)))
(assert (and (= cat_191 (spoon_133 cat_190)) (spoon_83 cat_191)))
(assert (= cat_223 cat_177))
(assert (= cat_224 cat_191))
(assert (and (= cat_192 (spoon_155 (fp.sub RNE (spoon_65 (get_potato_18_b (get_potato_20_a cat_135))) (spoon_65 (get_potato_18_b (get_potato_20_a cat_137)))))) (spoon_83 cat_192)))
(assert (= cat_225 cat_176))
(assert (= cat_226 cat_192))
(assert (and (= cat_193 (spoon_133 (spoon_56 (get_potato_18_a (get_potato_20_a cat_137))))) (spoon_83 cat_193)))
(assert (= cat_227 cat_178))
(assert (= cat_228 cat_193))
(assert (and (= cat_194 (spoon_99 cat_224)) (spoon_91 cat_194)))
(assert (= cat_195 ((_ to_fp 11 53) RNE cat_194)))
(assert (= cat_229 cat_179))
(assert (= cat_230 cat_195))
(assert (and (= cat_196 (spoon_101 cat_224)) (spoon_91 cat_196)))
(assert (= cat_197 ((_ to_fp 11 53) RNE cat_196)))
(assert (= cat_231 cat_180))
(assert (= cat_232 cat_197))
(assert (and (= cat_198 (spoon_99 cat_228)) (spoon_91 cat_198)))
(assert (= cat_199 ((_ to_fp 11 53) RNE cat_198)))
(assert (= cat_233 (mk_potato_11 cat_181)))
(assert (= cat_234 cat_199))
(assert (and (= cat_200 (spoon_101 cat_228)) (spoon_91 cat_200)))
(assert (= cat_201 ((_ to_fp 11 53) RNE cat_200)))
(assert (= cat_235 (mk_potato_11 cat_182)))
(assert (= cat_236 cat_201))
(assert (and (= cat_202 (spoon_99 cat_226)) (spoon_91 cat_202)))
(assert (= cat_203 ((_ to_fp 11 53) RNE cat_202)))
(assert (= cat_237 (mk_potato_11 cat_183)))
(assert (= cat_238 cat_203))
(assert (and (= cat_204 (spoon_101 cat_226)) (spoon_91 cat_204)))
(assert (= cat_205 ((_ to_fp 11 53) RNE cat_204)))
(assert (= cat_239 (mk_potato_11 cat_184)))
(assert (= cat_240 cat_205))
(assert (and (= cat_208 (fp.mul RNE cat_232 cat_236)) (spoon_2 (fp.mul RNE cat_232 cat_236))))
(assert (= cat_209 (fp.mul RNE cat_208 cat_240)))
(assert (and (= cat_210 cat_209) (spoon_2 cat_209)))
(assert (and (= cat_206 (fp.mul RNE cat_230 cat_234)) (spoon_2 (fp.mul RNE cat_230 cat_234))))
(assert (= cat_207 (fp.add RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_206)))
(assert (and (= cat_211 cat_207) (spoon_2 cat_207)))
(assert (= cat_212 (fp.add RNE cat_211 cat_210)))
(assert (and (= cat_213 cat_212) (spoon_2 cat_212)))
(assert (= cat_241 (mk_potato_11 cat_187)))
(assert (= cat_242 cat_213))
(assert (and (= cat_214 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_141) cat_238)) (spoon_2 (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) cat_141) cat_238))))
(assert (= cat_215 (fp.mul RNE cat_214 cat_232)))
(assert (and (= cat_216 cat_215) (spoon_2 cat_215)))
(assert (= cat_243 (mk_potato_11 cat_188)))
(assert (= cat_244 cat_216))
(assert (not (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_242)))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242) (and (= cat_220 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_242)) (spoon_2 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_242)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242) (= cat_221 (ite (fp.leq cat_244 cat_220) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242) (and (= cat_219 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_242)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_242)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242) (= cat_222 (ite (fp.leq cat_219 cat_244) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242) (= cat_245 (ite (= cat_222 true) cat_221 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_242)) (= cat_245 false)))
(assert (not (= cat_245 true)))
(assert (fp.lt cat_242 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
(assert (and (= cat_217 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_242)) (spoon_2 (fp.mul RNE (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) cat_242))))
(assert (= cat_218 (ite (fp.leq cat_244 cat_217) true false)))
(assert (not (spoon_2 (fp.mul RNE (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111) cat_242))))
(check-sat)
(exit)
