(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_23 Float32)) Bool (and (spoon_1 kitten_23) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_23) (fp.leq kitten_23 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_24 potato_12)) potato_11 (get_potato_12_a kitten_24))
(declare-fun spoon_32 (potato_11) Float32)
(declare-fun spoon_33 (Float32) potato_11)
(assert (forall ((kitten_25 potato_11)) (! (= (spoon_33 (spoon_32 kitten_25)) kitten_25) :pattern ((spoon_32 kitten_25)))))
(assert (forall ((kitten_26 potato_11)) (! (spoon_25 (spoon_32 kitten_26)) :pattern ((spoon_32 kitten_26)))))
(assert (forall ((kitten_27 Float32)) (! (=> (spoon_25 kitten_27) (= (spoon_32 (spoon_33 kitten_27)) kitten_27)) :pattern ((spoon_32 (spoon_33 kitten_27))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_34 ((kitten_28 potato_14)) potato_13 (get_potato_14_a kitten_28))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_35 ((kitten_29 potato_15)) potato_13 (get_potato_15_a kitten_29))
(define-fun spoon_36 ((kitten_30 potato_15) (kitten_31 potato_15)) Bool (ite (and (= (spoon_32 (get_potato_13_a (get_potato_15_a kitten_30))) (spoon_32 (get_potato_13_a (get_potato_15_a kitten_31)))) (= (spoon_32 (get_potato_13_b (get_potato_15_a kitten_30))) (spoon_32 (get_potato_13_b (get_potato_15_a kitten_31))))) true false))
(declare-const cat_37 Int)
(declare-fun spoon_38 (potato_15) Int)
(declare-const cat_39 Int)
(declare-fun spoon_40 (potato_15) Int)
(assert (<= 0 cat_37))
(assert (forall ((kitten_32 potato_15)) (<= 0 (spoon_38 kitten_32))))
(assert (<= 0 cat_39))
(assert (forall ((kitten_33 potato_15)) (<= 0 (spoon_40 kitten_33))))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-fun spoon_47 (potato_15 potato_15) Bool)
(declare-const cat_48 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_49 ((kitten_34 potato_16)) potato_15 (get_potato_16_a kitten_34))
(declare-sort potato_17 0)
(define-fun spoon_50 ((kitten_35 Float32)) Bool (and (spoon_1 kitten_35) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_35) (fp.leq kitten_35 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_51 (potato_17 potato_17) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_56 ((kitten_36 potato_18)) potato_17 (get_potato_18_a kitten_36))
(define-fun spoon_57 ((kitten_37 Float32) (kitten_38 Bool) (kitten_39 Bool) (kitten_40 Bool)) Bool (=> (or (= kitten_38 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_50 kitten_37)))
(declare-sort potato_19 0)
(define-fun spoon_58 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_41) (fp.leq kitten_41 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_59 (potato_19 potato_19) Bool)
(declare-fun spoon_60 (Float32) potato_5)
(declare-fun spoon_61 (potato_5) Bool)
(declare-fun spoon_62 (potato_5) Float32)
(declare-const cat_63 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_64 ((kitten_42 potato_20)) potato_19 (get_potato_20_a kitten_42))
(define-fun spoon_65 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_58 kitten_43)))
(declare-sort potato_21 0)
(define-fun spoon_66 ((kitten_47 Float32)) Bool (and (spoon_1 kitten_47) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_47) (fp.leq kitten_47 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_67 (potato_21 potato_21) Bool)
(declare-fun spoon_68 (Float32) potato_5)
(declare-fun spoon_69 (potato_5) Bool)
(declare-fun spoon_70 (potato_5) Float32)
(declare-const cat_71 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_72 ((kitten_48 potato_22)) potato_21 (get_potato_22_a kitten_48))
(define-fun spoon_73 ((kitten_49 Float32) (kitten_50 Bool) (kitten_51 Bool) (kitten_52 Bool)) Bool (=> (or (= kitten_50 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_66 kitten_49)))
(declare-fun spoon_74 (Float32 Float32) Float32)
(declare-fun spoon_75 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_53 Float32) (kitten_54 Float32)) (! (=> (and (and (spoon_73 kitten_53 true true true) (spoon_73 kitten_54 true true true)) (or (not (fp.eq kitten_53 (fp #b0 #b00000000 #b00000000000000000000000))) (not (fp.eq kitten_54 (fp #b0 #b00000000 #b00000000000000000000000))))) (spoon_65 (spoon_74 kitten_53 kitten_54) true false true)) :pattern ((spoon_74 kitten_53 kitten_54)))))
(declare-const cat_76 potato_15)
(declare-const cat_77 Int)
(declare-const cat_78 potato_15)
(declare-const cat_79 Int)
(declare-const cat_80 Int)
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(define-fun spoon_84 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_55)))
(declare-const cat_85 Float32)
(declare-const cat_86 Float32)
(declare-const cat_87 Float32)
(declare-const cat_88 Float32)
(declare-const cat_89 Float32)
(declare-const cat_90 Float32)
(declare-const cat_91 Float32)
(declare-const cat_92 Float32)
(declare-const cat_93 Float32)
(declare-const cat_94 Float32)
(declare-const cat_95 Float32)
(declare-const cat_96 Float32)
(declare-const cat_97 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_66 cat_85)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_66 cat_86)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000)) (spoon_58 cat_87)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000)) (spoon_50 cat_88)))
(assert (not (= (spoon_36 cat_76 cat_78) true)))
(assert (= cat_92 cat_85))
(assert (= cat_93 (fp.sub RNE (spoon_32 (get_potato_13_a (get_potato_15_a cat_78))) (spoon_32 (get_potato_13_a (get_potato_15_a cat_76))))))
(assert (= cat_94 cat_86))
(assert (= cat_95 (fp.sub RNE (spoon_32 (get_potato_13_b (get_potato_15_a cat_78))) (spoon_32 (get_potato_13_b (get_potato_15_a cat_76))))))
(assert (and (= cat_89 (spoon_74 cat_93 cat_95)) (spoon_58 cat_89)))
(assert (= cat_96 cat_87))
(assert (= cat_97 cat_89))
(assert (fp.lt cat_97 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (not (spoon_50 (fp.add RNE cat_97 (fp #b0 #b10000111 #b01101000000000000000000)))))
(check-sat)
(exit)
