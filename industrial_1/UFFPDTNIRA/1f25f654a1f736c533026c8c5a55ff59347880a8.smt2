(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(declare-fun spoon_32 (potato_11) Float32)
(declare-fun spoon_33 (Float32) potato_11)
(assert (forall ((kitten_24 potato_11)) (! (= (spoon_33 (spoon_32 kitten_24)) kitten_24) :pattern ((spoon_32 kitten_24)))))
(assert (forall ((kitten_25 potato_11)) (! (spoon_25 (spoon_32 kitten_25)) :pattern ((spoon_32 kitten_25)))))
(assert (forall ((kitten_26 Float32)) (! (=> (spoon_25 kitten_26) (= (spoon_32 (spoon_33 kitten_26)) kitten_26)) :pattern ((spoon_32 (spoon_33 kitten_26))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_34 ((kitten_27 potato_14)) potato_13 (get_potato_14_a kitten_27))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_35 ((kitten_28 potato_15)) potato_13 (get_potato_15_a kitten_28))
(define-fun spoon_36 ((kitten_29 potato_15) (kitten_30 potato_15)) Bool (ite (and (= (spoon_32 (get_potato_13_a (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_a (get_potato_15_a kitten_30)))) (= (spoon_32 (get_potato_13_b (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_b (get_potato_15_a kitten_30))))) true false))
(declare-const cat_37 Int)
(declare-fun spoon_38 (potato_15) Int)
(declare-const cat_39 Int)
(declare-fun spoon_40 (potato_15) Int)
(assert (<= 0 cat_37))
(assert (forall ((kitten_31 potato_15)) (<= 0 (spoon_38 kitten_31))))
(assert (<= 0 cat_39))
(assert (forall ((kitten_32 potato_15)) (<= 0 (spoon_40 kitten_32))))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-fun spoon_47 (potato_15 potato_15) Bool)
(declare-const cat_48 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_49 ((kitten_33 potato_16)) potato_15 (get_potato_16_a kitten_33))
(declare-const cat_50 potato_15)
(declare-const cat_51 Int)
(declare-const cat_52 potato_15)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(declare-sort potato_17 0)
(define-fun spoon_55 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_56 (potato_17 potato_17) Bool)
(declare-fun spoon_57 (Float32) potato_5)
(declare-fun spoon_58 (potato_5) Bool)
(declare-fun spoon_59 (potato_5) Float32)
(declare-const cat_60 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_61 ((kitten_35 potato_18)) potato_17 (get_potato_18_a kitten_35))
(define-fun spoon_62 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_55 kitten_36)))
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(define-fun spoon_65 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_40)))
(declare-const cat_66 Float32)
(declare-const cat_67 Float32)
(declare-const cat_68 Float32)
(declare-const cat_69 potato_11)
(declare-const cat_70 Float32)
(declare-const cat_71 Float32)
(declare-const cat_72 Float32)
(declare-const cat_73 Float32)
(declare-const cat_74 Float32)
(declare-const cat_75 Float32)
(declare-const cat_76 Float32)
(declare-const cat_77 Float32)
(declare-const cat_78 Float32)
(declare-const cat_79 Float32)
(declare-const cat_80 Float32)
(declare-const cat_81 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_55 cat_66)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_55 cat_67)))
(assert (= cat_70 cat_66))
(assert (= cat_71 (fp.sub RNE (spoon_32 (get_potato_13_a (get_potato_15_a cat_50))) (spoon_32 (get_potato_13_a (get_potato_15_a cat_52))))))
(assert (= cat_72 cat_67))
(assert (= cat_73 (fp.sub RNE (spoon_32 (get_potato_13_b (get_potato_15_a cat_50))) (spoon_32 (get_potato_13_b (get_potato_15_a cat_52))))))
(assert (=> (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_74 cat_71)))
(assert (=> (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_75 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (not (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_71) (= cat_76 cat_71))))
(assert (=> (not (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_71) (= cat_77 (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (not (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_71)) (= cat_77 cat_71))))
(assert (=> (not (fp.leq cat_71 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (= cat_75 cat_77)))
(assert (=> (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_78 cat_73)))
(assert (=> (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))) (= cat_79 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (not (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_73) (= cat_80 cat_73))))
(assert (=> (not (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_73) (= cat_81 (fp #b0 #b10001011 #b00000000000000000000000)))))
(assert (=> (not (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (=> (not (fp.leq (fp #b0 #b10001011 #b00000000000000000000000) cat_73)) (= cat_81 cat_73))))
(assert (=> (not (fp.leq cat_73 (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)))) (= cat_79 cat_81)))
(assert (and (= cat_68 cat_79) (spoon_1 cat_79)))
(assert (= (spoon_32 cat_69) cat_68))
(assert (not (spoon_25 cat_75)))
(check-sat)
(exit)
