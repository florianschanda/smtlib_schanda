(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun spoon_16 (RoundingMode Int) Float32)
(declare-fun spoon_17 (RoundingMode Float32) Int)
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_27 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_28 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_29 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_30 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun spoon_31 (RoundingMode Int) Float64)
(declare-fun spoon_32 (RoundingMode Float64) Int)
(declare-const cat_33 Int)
(define-fun spoon_34 ((kitten_29 Int)) Bool (and (<= (- cat_33) kitten_29) (<= kitten_29 cat_33)))
(define-fun spoon_35 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_36 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_37 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_38 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_36 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_37 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_39 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_40 ((kitten_40 Bool)) Int (ite (= kitten_40 true) 1 0))
(define-fun spoon_41 ((kitten_41 Int)) Bool (ite (= kitten_41 0) false true))
(define-fun spoon_42 ((kitten_42 Int)) Bool (or (= kitten_42 0) (= kitten_42 1)))
(declare-fun spoon_43 (Bool) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Bool)
(declare-sort potato_12 0)
(define-fun spoon_46 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_47 (potato_12 potato_12) Bool)
(declare-fun spoon_48 (Float32) potato_5)
(declare-fun spoon_49 (potato_5) Bool)
(declare-fun spoon_50 (potato_5) Float32)
(declare-const cat_51 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_52 ((kitten_44 potato_13)) potato_12 (get_potato_13_a kitten_44))
(declare-fun spoon_53 (potato_12) Float32)
(declare-fun spoon_54 (Float32) potato_12)
(assert (forall ((kitten_45 potato_12)) (! (= (spoon_54 (spoon_53 kitten_45)) kitten_45) :pattern ((spoon_53 kitten_45)))))
(assert (forall ((kitten_46 potato_12)) (! (spoon_46 (spoon_53 kitten_46)) :pattern ((spoon_53 kitten_46)))))
(assert (forall ((kitten_47 Float32)) (! (=> (spoon_46 kitten_47) (= (spoon_53 (spoon_54 kitten_47)) kitten_47)) :pattern ((spoon_53 (spoon_54 kitten_47))))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_12) (get_potato_14_b potato_12)))))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_55 ((kitten_48 potato_15)) potato_14 (get_potato_15_a kitten_48))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_14)))))
(define-fun spoon_56 ((kitten_49 potato_16)) potato_14 (get_potato_16_a kitten_49))
(define-fun spoon_57 ((kitten_50 potato_16) (kitten_51 potato_16)) Bool (ite (and (= (spoon_53 (get_potato_14_a (get_potato_16_a kitten_50))) (spoon_53 (get_potato_14_a (get_potato_16_a kitten_51)))) (= (spoon_53 (get_potato_14_b (get_potato_16_a kitten_50))) (spoon_53 (get_potato_14_b (get_potato_16_a kitten_51))))) true false))
(declare-const cat_58 Int)
(declare-fun spoon_59 (potato_16) Int)
(declare-const cat_60 Int)
(declare-fun spoon_61 (potato_16) Int)
(assert (<= 0 cat_58))
(assert (forall ((kitten_52 potato_16)) (<= 0 (spoon_59 kitten_52))))
(assert (<= 0 cat_60))
(assert (forall ((kitten_53 potato_16)) (<= 0 (spoon_61 kitten_53))))
(declare-const cat_62 Int)
(declare-const cat_63 Int)
(declare-const cat_64 Int)
(assert (<= 0 cat_62))
(assert (< cat_62 cat_63))
(assert (<= 0 cat_64))
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(assert (<= 0 cat_65))
(assert (< cat_65 cat_66))
(assert (<= 0 cat_67))
(declare-fun spoon_68 (potato_16 potato_16) Bool)
(declare-const cat_69 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_70 ((kitten_54 potato_17)) potato_16 (get_potato_17_a kitten_54))
(declare-const cat_71 potato_16)
(declare-const cat_72 Int)
(declare-const cat_73 potato_16)
(declare-const cat_74 Int)
(declare-const cat_75 Int)
(declare-sort potato_18 0)
(declare-fun spoon_76 (potato_18 potato_18) Bool)
(declare-fun spoon_77 (Float64) potato_5)
(declare-fun spoon_78 (potato_5) Bool)
(declare-fun spoon_79 (potato_5) Float64)
(declare-const cat_80 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_81 ((kitten_55 potato_19)) potato_18 (get_potato_19_a kitten_55))
(declare-sort potato_20 0)
(define-fun spoon_82 ((kitten_56 Float64)) Bool (and (spoon_3 kitten_56) (and (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) kitten_56) (fp.leq kitten_56 (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_83 (potato_20 potato_20) Bool)
(declare-fun spoon_84 (Float64) potato_5)
(declare-fun spoon_85 (potato_5) Bool)
(declare-fun spoon_86 (potato_5) Float64)
(declare-const cat_87 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_88 ((kitten_57 potato_21)) potato_20 (get_potato_21_a kitten_57))
(define-fun spoon_89 ((kitten_58 Float64) (kitten_59 Bool) (kitten_60 Bool) (kitten_61 Bool)) Bool (=> (or (= kitten_59 true) (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000))) (spoon_82 kitten_58)))
(declare-sort potato_22 0)
(define-fun spoon_90 ((kitten_62 Float64)) Bool (and (spoon_3 kitten_62) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_62) (fp.leq kitten_62 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_91 (potato_22 potato_22) Bool)
(declare-fun spoon_92 (Float64) potato_5)
(declare-fun spoon_93 (potato_5) Bool)
(declare-fun spoon_94 (potato_5) Float64)
(declare-const cat_95 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_96 ((kitten_63 potato_23)) potato_22 (get_potato_23_a kitten_63))
(define-fun spoon_97 ((kitten_64 Float64) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_90 kitten_64)))
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(define-fun spoon_102 ((kitten_68 Float32) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_69 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_46 kitten_68)))
(declare-const cat_103 Float64)
(declare-const cat_104 Float64)
(declare-const cat_105 Float64)
(declare-const cat_106 potato_12)
(declare-const cat_107 potato_12)
(declare-const cat_108 Float64)
(declare-const cat_109 Float64)
(declare-const cat_110 Float32)
(declare-const cat_111 potato_12)
(declare-const cat_112 potato_12)
(declare-const cat_113 potato_12)
(declare-const cat_114 potato_12)
(declare-const cat_115 potato_12)
(declare-const cat_116 potato_12)
(declare-const cat_117 Float64)
(declare-const cat_118 Float64)
(declare-const cat_119 Float32)
(declare-const cat_120 potato_12)
(declare-const cat_121 potato_12)
(declare-const cat_122 potato_12)
(declare-const cat_123 potato_12)
(declare-const cat_124 potato_12)
(declare-const cat_125 potato_12)
(declare-const cat_126 Float64)
(declare-const cat_127 Float64)
(declare-const cat_128 Float64)
(declare-const cat_129 Float64)
(declare-const cat_130 Float64)
(declare-const cat_131 potato_15)
(declare-const cat_132 potato_14)
(declare-const cat_133 potato_11)
(declare-const cat_134 Float64)
(declare-const cat_135 potato_15)
(declare-const cat_136 potato_14)
(declare-const cat_137 potato_15)
(declare-const cat_138 potato_14)
(declare-const cat_139 potato_11)
(declare-const cat_140 Float64)
(define-fun spoon_141 () potato_15 (mk_potato_15 (mk_potato_14 cat_106 cat_107)))
(define-fun spoon_142 () potato_11 (mk_potato_11 cat_105))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_82 cat_103)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000001100 #b0000000000000000000000000000000000000000000000000000)) (spoon_82 cat_104)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_90 cat_105)))
(assert (= cat_127 cat_103))
(assert (= cat_128 ((_ to_fp 11 53) RNE (fp.add RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))) (spoon_53 (get_potato_14_a (get_potato_16_a cat_73)))))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (spoon_53 (get_potato_14_a (get_potato_16_a cat_73))))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (and (= cat_108 (fp.div RNE ((_ to_fp 11 53) RNE (fp.sub RNE (fp #b0 #b10001011 #b00000000000000000000000) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_73)))))) (spoon_3 (fp.div RNE ((_ to_fp 11 53) RNE (fp.sub RNE (fp #b0 #b10001011 #b00000000000000000000000) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_73)))))))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (and (= cat_109 cat_108) (spoon_3 cat_108))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= (mk_potato_11 cat_129) spoon_142)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_130 cat_109)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= (spoon_53 cat_111) ((_ to_fp 8 24) RNE (fp.mul RNE ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_b (get_potato_16_a cat_73)))) cat_130)))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (and (= cat_110 (fp.sub RNE (fp #b0 #b10001011 #b00000000000000000000000) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) (spoon_1 (fp.sub RNE (fp #b0 #b10001011 #b00000000000000000000000) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))))))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= (spoon_53 cat_112) cat_110)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_112 cat_113)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_111 cat_114)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_115 cat_113)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_116 cat_114)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_131 spoon_141)))
(assert (=> (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128) (= cat_132 (mk_potato_14 cat_115 cat_116))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (fp.lt (spoon_53 (get_potato_14_a (get_potato_16_a cat_73))) (fp #b0 #b00000000 #b00000000000000000000000)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (and (= cat_117 (fp.div RNE ((_ to_fp 11 53) RNE (fp.sub RNE (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_73)))))) (spoon_3 (fp.div RNE ((_ to_fp 11 53) RNE (fp.sub RNE (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_73))))))))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (and (= cat_118 cat_117) (spoon_3 cat_117)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_133 spoon_142))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_134 cat_118))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= (spoon_53 cat_120) ((_ to_fp 8 24) RNE (fp.mul RNE ((_ to_fp 11 53) RNE (spoon_53 (get_potato_14_b (get_potato_16_a cat_73)))) cat_134))))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (and (= cat_119 (fp.sub RNE (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))))) (spoon_1 (fp.sub RNE (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_53 (get_potato_14_a (get_potato_16_a cat_71)))))))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= (spoon_53 cat_121) cat_119))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_121 cat_122))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_120 cat_123))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_124 cat_122))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_125 cat_123))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_135 spoon_141))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000))) (= cat_136 (mk_potato_14 cat_124 cat_125)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_137 spoon_141))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_138 (get_potato_16_a cat_73)))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_136 cat_138))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_134 cat_105))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_136 cat_138))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (=> (not (fp.lt cat_128 (fp.neg (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000)))) (= cat_134 cat_126))))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (= cat_132 cat_136)))
(assert (=> (not (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_128)) (= cat_130 cat_134)))
(assert (spoon_46 (fp.add RNE (spoon_53 (get_potato_14_a (get_potato_16_a cat_71))) (spoon_53 (get_potato_14_a cat_132)))))
(assert (= cat_139 (mk_potato_11 cat_104)))
(assert (= cat_140 ((_ to_fp 11 53) RNE (fp.add RNE (spoon_53 (get_potato_14_b (get_potato_16_a cat_71))) (spoon_53 (get_potato_14_b cat_132))))))
(assert (fp.lt (fp #b0 #b10000001011 #b0000000000000000000000000000000000000000000000000000) cat_140))
(assert (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (spoon_53 (get_potato_14_b cat_132)))))
(check-sat)
(exit)
