(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-fun spoon_16 (RoundingMode Int) Float32)
(declare-fun spoon_17 (RoundingMode Float32) Int)
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_13 Int)) Bool (and (<= (- cat_18) kitten_13) (<= kitten_13 cat_18)))
(define-fun spoon_20 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_21 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_22 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_23 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_21 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_22 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_24 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_27 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_28 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_29 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_30 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-fun spoon_31 (RoundingMode Int) Float64)
(declare-fun spoon_32 (RoundingMode Float64) Int)
(declare-const cat_33 Int)
(define-fun spoon_34 ((kitten_29 Int)) Bool (and (<= (- cat_33) kitten_29) (<= kitten_29 cat_33)))
(define-fun spoon_35 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_36 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_37 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_38 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_36 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_37 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_39 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_40 ((kitten_40 Bool)) Int (ite (= kitten_40 true) 1 0))
(define-fun spoon_41 ((kitten_41 Int)) Bool (ite (= kitten_41 0) false true))
(define-fun spoon_42 ((kitten_42 Int)) Bool (or (= kitten_42 0) (= kitten_42 1)))
(declare-fun spoon_43 (Bool) potato_5)
(declare-fun spoon_44 (potato_5) Bool)
(declare-fun spoon_45 (potato_5) Bool)
(declare-sort potato_12 0)
(declare-fun spoon_46 (potato_12 potato_12) Bool)
(declare-fun spoon_47 (Float32) potato_5)
(declare-fun spoon_48 (potato_5) Bool)
(declare-fun spoon_49 (potato_5) Float32)
(declare-const cat_50 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_51 ((kitten_43 potato_13)) potato_12 (get_potato_13_a kitten_43))
(define-fun spoon_52 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_44)))
(declare-sort potato_14 0)
(define-fun spoon_53 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_54 (potato_14 potato_14) Bool)
(declare-fun spoon_55 (Float32) potato_5)
(declare-fun spoon_56 (potato_5) Bool)
(declare-fun spoon_57 (potato_5) Float32)
(declare-const cat_58 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_59 ((kitten_49 potato_15)) potato_14 (get_potato_15_a kitten_49))
(define-fun spoon_60 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_53 kitten_50)))
(declare-sort potato_16 0)
(define-fun spoon_61 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_54) (fp.leq kitten_54 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_62 (potato_16 potato_16) Bool)
(declare-fun spoon_63 (Float32) potato_5)
(declare-fun spoon_64 (potato_5) Bool)
(declare-fun spoon_65 (potato_5) Float32)
(declare-const cat_66 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_67 ((kitten_55 potato_17)) potato_16 (get_potato_17_a kitten_55))
(define-fun spoon_68 ((kitten_56 Float32) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_57 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_61 kitten_56)))
(declare-sort potato_18 0)
(define-fun spoon_69 ((kitten_60 Float32)) Bool (and (spoon_1 kitten_60) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_60) (fp.leq kitten_60 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_70 (potato_18 potato_18) Bool)
(declare-fun spoon_71 (Float32) potato_5)
(declare-fun spoon_72 (potato_5) Bool)
(declare-fun spoon_73 (potato_5) Float32)
(declare-const cat_74 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_75 ((kitten_61 potato_19)) potato_18 (get_potato_19_a kitten_61))
(declare-sort potato_20 0)
(define-fun spoon_76 ((kitten_62 Float32)) Bool (and (spoon_1 kitten_62) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_62) (fp.leq kitten_62 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_77 (potato_20 potato_20) Bool)
(declare-fun spoon_78 (Float32) potato_5)
(declare-fun spoon_79 (potato_5) Bool)
(declare-fun spoon_80 (potato_5) Float32)
(declare-const cat_81 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_82 ((kitten_63 potato_21)) potato_20 (get_potato_21_a kitten_63))
(define-fun spoon_83 ((kitten_64 Float32) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_76 kitten_64)))
(define-fun spoon_84 ((kitten_68 Float32) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_69 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_69 kitten_68)))
(declare-fun spoon_85 (Float32) Float32)
(declare-fun spoon_86 (Float32 Float32) Bool)
(assert (forall ((kitten_72 Float32)) (! (=> (spoon_84 kitten_72 true true true) (spoon_83 (spoon_85 kitten_72) true false true)) :pattern ((spoon_85 kitten_72)))))
(declare-sort potato_22 0)
(declare-fun spoon_87 (potato_22 potato_22) Bool)
(declare-fun spoon_88 (Float64) potato_5)
(declare-fun spoon_89 (potato_5) Bool)
(declare-fun spoon_90 (potato_5) Float64)
(declare-const cat_91 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_92 ((kitten_73 potato_23)) potato_22 (get_potato_23_a kitten_73))
(declare-sort potato_24 0)
(declare-fun spoon_93 (potato_24 potato_24) Bool)
(declare-fun spoon_94 (Float64) potato_5)
(declare-fun spoon_95 (potato_5) Bool)
(declare-fun spoon_96 (potato_5) Float64)
(declare-const cat_97 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_98 ((kitten_74 potato_25)) potato_24 (get_potato_25_a kitten_74))
(define-fun spoon_99 ((kitten_75 Float64) (kitten_76 Bool) (kitten_77 Bool) (kitten_78 Bool)) Bool (=> (or (= kitten_76 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_75)))
(declare-sort potato_26 0)
(define-fun spoon_100 ((kitten_79 Float64)) Bool (and (spoon_3 kitten_79) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_79) (fp.leq kitten_79 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_101 (potato_26 potato_26) Bool)
(declare-fun spoon_102 (Float64) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) Float64)
(declare-const cat_105 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_106 ((kitten_80 potato_27)) potato_26 (get_potato_27_a kitten_80))
(define-fun spoon_107 ((kitten_81 Float64) (kitten_82 Bool) (kitten_83 Bool) (kitten_84 Bool)) Bool (=> (or (= kitten_82 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_100 kitten_81)))
(declare-const cat_108 Float64)
(declare-const cat_109 Int)
(declare-const cat_110 Float32)
(declare-const cat_111 Int)
(declare-const cat_112 Float32)
(declare-const cat_113 Int)
(declare-const cat_114 Int)
(declare-const cat_115 Int)
(declare-const cat_116 Float32)
(declare-const cat_117 Int)
(declare-const cat_118 Float32)
(declare-const cat_119 Int)
(declare-const cat_120 Float32)
(declare-const cat_121 Int)
(declare-const cat_122 Float32)
(declare-const cat_123 Int)
(declare-const cat_124 Int)
(declare-const cat_125 Int)
(assert (= cat_116 (spoon_85 cat_112)))
(assert (= cat_118 ((_ to_fp 8 24) RNE (fp.mul RNE cat_108 cat_108))))
(assert (= cat_120 (fp.add RNE (fp #b0 #b01111111 #b00000000000000000000000) (fp.mul RNE (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) cat_118) (fp.mul RNE cat_116 cat_116)))))
(assert (= cat_122 (fp.sqrt RNE cat_120)))
(declare-const cat_126 Float32)
(declare-const cat_127 Float32)
(declare-const cat_128 Float64)
(declare-const cat_129 Float64)
(declare-const cat_130 Float32)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float32)
(declare-const cat_137 Float32)
(declare-const cat_138 Float32)
(declare-const cat_139 Float32)
(declare-const cat_140 Float64)
(declare-const cat_141 Float64)
(declare-const cat_142 Float32)
(declare-const cat_143 Float64)
(declare-const cat_144 Float64)
(declare-const cat_145 Float64)
(declare-const cat_146 Float64)
(declare-const cat_147 Float64)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float64)
(declare-const cat_152 Float64)
(declare-const cat_153 Float64)
(declare-const cat_154 Float64)
(declare-const cat_155 Float64)
(declare-const cat_156 Float64)
(declare-const cat_157 Float64)
(declare-const cat_158 Float64)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(assert (spoon_53 cat_112))
(assert (spoon_100 cat_108))
(assert (spoon_1 cat_110))
(assert (and (and (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) cat_110) (fp.leq cat_110 (fp #b0 #b01111000 #b01000111101011100001010))) (and (fp.leq (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011) cat_108) (fp.leq cat_108 (fp #b0 #b01111111011 #b1001100110011001100110011001100110011001100110011010)))))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_53 cat_126)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000)) (spoon_53 cat_127)))
(assert (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011100001)) cat_112))
(assert (fp.leq cat_112 (fp #b0 #b10000101 #b01100111111101011100001)))
(assert (not (spoon_69 cat_112)))
(check-sat)
(exit)
