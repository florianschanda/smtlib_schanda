(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_22) (fp.leq kitten_22 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(declare-fun spoon_32 (potato_11) Float32)
(declare-fun spoon_33 (Float32) potato_11)
(assert (forall ((kitten_24 potato_11)) (! (= (spoon_33 (spoon_32 kitten_24)) kitten_24) :pattern ((spoon_32 kitten_24)))))
(assert (forall ((kitten_25 potato_11)) (! (spoon_25 (spoon_32 kitten_25)) :pattern ((spoon_32 kitten_25)))))
(assert (forall ((kitten_26 Float32)) (! (=> (spoon_25 kitten_26) (= (spoon_32 (spoon_33 kitten_26)) kitten_26)) :pattern ((spoon_32 (spoon_33 kitten_26))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_34 ((kitten_27 potato_14)) potato_13 (get_potato_14_a kitten_27))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_35 ((kitten_28 potato_15)) potato_13 (get_potato_15_a kitten_28))
(define-fun spoon_36 ((kitten_29 potato_15) (kitten_30 potato_15)) Bool (ite (and (= (spoon_32 (get_potato_13_a (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_a (get_potato_15_a kitten_30)))) (= (spoon_32 (get_potato_13_b (get_potato_15_a kitten_29))) (spoon_32 (get_potato_13_b (get_potato_15_a kitten_30))))) true false))
(declare-const cat_37 Int)
(declare-fun spoon_38 (potato_15) Int)
(declare-const cat_39 Int)
(declare-fun spoon_40 (potato_15) Int)
(assert (<= 0 cat_37))
(assert (forall ((kitten_31 potato_15)) (<= 0 (spoon_38 kitten_31))))
(assert (<= 0 cat_39))
(assert (forall ((kitten_32 potato_15)) (<= 0 (spoon_40 kitten_32))))
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(assert (<= 0 cat_41))
(assert (< cat_41 cat_42))
(assert (<= 0 cat_43))
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(assert (<= 0 cat_44))
(assert (< cat_44 cat_45))
(assert (<= 0 cat_46))
(declare-fun spoon_47 (potato_15 potato_15) Bool)
(declare-const cat_48 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_49 ((kitten_33 potato_16)) potato_15 (get_potato_16_a kitten_33))
(declare-sort potato_17 0)
(define-fun spoon_50 ((kitten_34 Float32)) Bool (and (spoon_1 kitten_34) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_34) (fp.leq kitten_34 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_51 (potato_17 potato_17) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_56 ((kitten_35 potato_18)) potato_17 (get_potato_18_a kitten_35))
(define-fun spoon_57 ((kitten_36 Float32) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_37 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_50 kitten_36)))
(declare-sort potato_19 0)
(define-fun spoon_58 ((kitten_40 Float32)) Bool (and (spoon_1 kitten_40) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_40) (fp.leq kitten_40 (fp #b0 #b11111110 #b11111111111111111111111)))))
(declare-fun spoon_59 (potato_19 potato_19) Bool)
(declare-fun spoon_60 (Float32) potato_5)
(declare-fun spoon_61 (potato_5) Bool)
(declare-fun spoon_62 (potato_5) Float32)
(declare-const cat_63 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_64 ((kitten_41 potato_20)) potato_19 (get_potato_20_a kitten_41))
(define-fun spoon_65 ((kitten_42 Float32) (kitten_43 Bool) (kitten_44 Bool) (kitten_45 Bool)) Bool (=> (or (= kitten_43 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_58 kitten_42)))
(declare-sort potato_21 0)
(define-fun spoon_66 ((kitten_46 Float32)) Bool (and (spoon_1 kitten_46) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_46) (fp.leq kitten_46 (fp #b0 #b10111111 #b00000000000000000110000)))))
(declare-fun spoon_67 (potato_21 potato_21) Bool)
(declare-fun spoon_68 (Float32) potato_5)
(declare-fun spoon_69 (potato_5) Bool)
(declare-fun spoon_70 (potato_5) Float32)
(declare-const cat_71 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_72 ((kitten_47 potato_22)) potato_21 (get_potato_22_a kitten_47))
(define-fun spoon_73 ((kitten_48 Float32) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool)) Bool (=> (or (= kitten_49 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10111111 #b00000000000000000110000))) (spoon_66 kitten_48)))
(declare-fun spoon_74 (Float32) Float32)
(declare-fun spoon_75 (Float32 Float32) Bool)
(assert (forall ((kitten_52 Float32)) (! (=> (spoon_65 kitten_52 true true true) (spoon_73 (spoon_74 kitten_52) true false true)) :pattern ((spoon_74 kitten_52)))))
(declare-sort potato_23 0)
(define-fun spoon_76 ((kitten_53 Float32)) Bool (and (spoon_1 kitten_53) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_53) (fp.leq kitten_53 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_77 (potato_23 potato_23) Bool)
(declare-fun spoon_78 (Float32) potato_5)
(declare-fun spoon_79 (potato_5) Bool)
(declare-fun spoon_80 (potato_5) Float32)
(declare-const cat_81 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_82 ((kitten_54 potato_24)) potato_23 (get_potato_24_a kitten_54))
(define-fun spoon_83 ((kitten_55 Float32) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (=> (or (= kitten_56 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_76 kitten_55)))
(declare-fun spoon_84 (potato_15 potato_15) Float32)
(declare-fun spoon_85 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_59 potato_15) (kitten_60 potato_15)) (! (spoon_57 (spoon_84 kitten_59 kitten_60) true false true) :pattern ((spoon_84 kitten_59 kitten_60)))))
(declare-const cat_86 potato_15)
(declare-const cat_87 Int)
(declare-const cat_88 potato_15)
(declare-const cat_89 Int)
(declare-const cat_90 potato_15)
(declare-const cat_91 Int)
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(declare-sort potato_25 0)
(declare-fun spoon_94 (potato_25 potato_25) Bool)
(declare-fun spoon_95 (Float32) potato_5)
(declare-fun spoon_96 (potato_5) Bool)
(declare-fun spoon_97 (potato_5) Float32)
(declare-const cat_98 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_99 ((kitten_61 potato_26)) potato_25 (get_potato_26_a kitten_61))
(declare-sort potato_27 0)
(define-fun spoon_100 ((kitten_62 Float32)) Bool (and (spoon_1 kitten_62) (and (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) kitten_62) (fp.leq kitten_62 (fp #b0 #b10100111 #b11010001101010011001011)))))
(declare-fun spoon_101 (potato_27 potato_27) Bool)
(declare-fun spoon_102 (Float32) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) Float32)
(declare-const cat_105 potato_27)
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_27)))))
(define-fun spoon_106 ((kitten_63 potato_28)) potato_27 (get_potato_28_a kitten_63))
(define-fun spoon_107 ((kitten_64 Float32) (kitten_65 Bool) (kitten_66 Bool) (kitten_67 Bool)) Bool (=> (or (= kitten_65 true) (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) (fp #b0 #b10100111 #b11010001101010011001011))) (spoon_100 kitten_64)))
(declare-sort potato_29 0)
(define-fun spoon_108 ((kitten_68 Float32)) Bool (and (spoon_1 kitten_68) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) kitten_68) (fp.leq kitten_68 (fp #b0 #b10011010 #b00000001011111011111100)))))
(declare-fun spoon_109 (potato_29 potato_29) Bool)
(declare-fun spoon_110 (Float32) potato_5)
(declare-fun spoon_111 (potato_5) Bool)
(declare-fun spoon_112 (potato_5) Float32)
(declare-const cat_113 potato_29)
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_29)))))
(define-fun spoon_114 ((kitten_69 potato_30)) potato_29 (get_potato_30_a kitten_69))
(define-fun spoon_115 ((kitten_70 Float32) (kitten_71 Bool) (kitten_72 Bool) (kitten_73 Bool)) Bool (=> (or (= kitten_71 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100))) (spoon_108 kitten_70)))
(declare-sort potato_31 0)
(define-fun spoon_116 ((kitten_74 Float32)) Bool (and (spoon_1 kitten_74) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_74) (fp.leq kitten_74 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_117 (potato_31 potato_31) Bool)
(declare-fun spoon_118 (Float32) potato_5)
(declare-fun spoon_119 (potato_5) Bool)
(declare-fun spoon_120 (potato_5) Float32)
(declare-const cat_121 potato_31)
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_31)))))
(define-fun spoon_122 ((kitten_75 potato_32)) potato_31 (get_potato_32_a kitten_75))
(define-fun spoon_123 ((kitten_76 Float32) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_116 kitten_76)))
(declare-const cat_124 Int)
(declare-const cat_125 Int)
(declare-const cat_126 Int)
(declare-const cat_127 Int)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(define-fun spoon_132 ((kitten_80 Float32) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (=> (or (= kitten_81 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_25 kitten_80)))
(declare-const cat_133 Float32)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 Float32)
(declare-const cat_137 Float32)
(declare-const cat_138 Float32)
(declare-const cat_139 Float32)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Float32)
(declare-const cat_143 Float32)
(declare-const cat_144 Float32)
(declare-const cat_145 Float32)
(declare-const cat_146 Float32)
(declare-const cat_147 Float32)
(declare-const cat_148 Float32)
(declare-const cat_149 Float32)
(declare-const cat_150 Float32)
(declare-const cat_151 Float32)
(declare-const cat_152 Float32)
(declare-const cat_153 Float32)
(declare-const cat_154 Float32)
(declare-const cat_155 Float32)
(declare-const cat_156 Float32)
(declare-const cat_157 Float32)
(declare-const cat_158 Float32)
(declare-const cat_159 Float32)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 Float32)
(declare-const cat_164 Float32)
(declare-const cat_165 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_76 cat_133)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_50 cat_134)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_116 cat_135)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000)) (spoon_116 cat_136)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_108 cat_137)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_108 cat_138)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_108 cat_139)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000001011111011111100)) (fp #b0 #b10011010 #b00000001011111011111100)) (spoon_108 cat_140)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10100111 #b11010001101010011001011)) (fp #b0 #b10100111 #b11010001101010011001011)) (spoon_100 cat_141)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_50 cat_142)))
(assert (= cat_150 cat_135))
(assert (= cat_151 (fp.sub RNE (spoon_32 (get_potato_13_a (get_potato_15_a cat_90))) (spoon_32 (get_potato_13_a (get_potato_15_a cat_88))))))
(assert (= cat_152 cat_136))
(assert (= cat_153 (fp.sub RNE (spoon_32 (get_potato_13_b (get_potato_15_a cat_90))) (spoon_32 (get_potato_13_b (get_potato_15_a cat_88))))))
(assert (= cat_154 cat_137))
(assert (= cat_155 (fp.add RNE (fp.mul RNE cat_151 cat_151) (fp.mul RNE cat_153 cat_153))))
(assert (not (fp.lt cat_155 (fp #b0 #b01110001 #b10100011011011100010111))))
(assert (= cat_156 cat_139))
(assert (= cat_157 (fp.add RNE (fp.mul RNE (fp.sub RNE (spoon_32 (get_potato_13_a (get_potato_15_a cat_86))) (spoon_32 (get_potato_13_a (get_potato_15_a cat_88)))) cat_151) (fp.mul RNE (fp.sub RNE (spoon_32 (get_potato_13_b (get_potato_15_a cat_86))) (spoon_32 (get_potato_13_b (get_potato_15_a cat_88)))) cat_153))))
(assert (and (= cat_143 (fp.div RNE cat_157 cat_155)) (spoon_1 (fp.div RNE cat_157 cat_155))))
(assert (and (= cat_144 cat_143) (spoon_1 cat_143)))
(assert (= cat_158 cat_141))
(assert (= cat_159 cat_144))
(assert (not (fp.leq cat_159 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (not (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) cat_159)))
(assert (= cat_160 cat_140))
(assert (= cat_161 (fp.add RNE (fp.mul RNE (fp.sub RNE (spoon_32 (get_potato_13_a (get_potato_15_a cat_86))) (spoon_32 (get_potato_13_a (get_potato_15_a cat_88)))) (fp.neg cat_153)) (fp.mul RNE (fp.sub RNE (spoon_32 (get_potato_13_b (get_potato_15_a cat_86))) (spoon_32 (get_potato_13_b (get_potato_15_a cat_88)))) cat_151))))
(assert (and (= cat_145 cat_155) (spoon_1 cat_155)))
(assert (and (= cat_146 (spoon_74 cat_145)) (spoon_66 cat_146)))
(assert (and (= cat_147 cat_146) (spoon_1 cat_146)))
(assert (= cat_162 cat_138))
(assert (= cat_163 cat_147))
(assert (and (= cat_148 (fp.div RNE (fp.abs cat_161) cat_163)) (spoon_1 (fp.div RNE (fp.abs cat_161) cat_163))))
(assert (and (= cat_149 cat_148) (spoon_1 cat_148)))
(assert (= cat_164 cat_134))
(assert (= cat_165 cat_149))
(assert (not (spoon_76 cat_159)))
(check-sat)
(exit)
