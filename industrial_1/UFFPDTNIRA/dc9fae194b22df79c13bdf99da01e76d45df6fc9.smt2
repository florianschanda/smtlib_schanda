(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-const cat_13 Int)
(define-fun spoon_14 ((kitten_10 Int)) Bool (and (<= (- cat_13) kitten_10) (<= kitten_10 cat_13)))
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_16 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_17 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_18 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_16 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_17 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_19 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_20 (Real) Real)
(define-fun spoon_21 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_22 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_23 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_24 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_25 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_26 (Bool) potato_5)
(declare-fun spoon_27 (potato_5) Bool)
(declare-fun spoon_28 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_29 (potato_11 potato_11) Bool)
(declare-fun spoon_30 (Float32) potato_5)
(declare-fun spoon_31 (potato_5) Bool)
(declare-fun spoon_32 (potato_5) Float32)
(declare-const cat_33 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_34 ((kitten_25 potato_12)) potato_11 (get_potato_12_a kitten_25))
(define-fun spoon_35 ((kitten_26 Float32) (kitten_27 Bool) (kitten_28 Bool) (kitten_29 Bool)) Bool (=> (or (= kitten_27 true) (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))) (spoon_1 kitten_26)))
(declare-sort potato_13 0)
(define-fun spoon_36 ((kitten_30 Float32)) Bool (and (spoon_1 kitten_30) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_30) (fp.leq kitten_30 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_37 (potato_13 potato_13) Bool)
(declare-fun spoon_38 (Float32) potato_5)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (potato_5) Float32)
(declare-const cat_41 potato_13)
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_42 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-fun spoon_43 (potato_13) Float32)
(declare-fun spoon_44 (Float32) potato_13)
(assert (forall ((kitten_32 potato_13)) (! (= (spoon_44 (spoon_43 kitten_32)) kitten_32) :pattern ((spoon_43 kitten_32)))))
(assert (forall ((kitten_33 potato_13)) (! (spoon_36 (spoon_43 kitten_33)) :pattern ((spoon_43 kitten_33)))))
(assert (forall ((kitten_34 Float32)) (! (=> (spoon_36 kitten_34) (= (spoon_43 (spoon_44 kitten_34)) kitten_34)) :pattern ((spoon_43 (spoon_44 kitten_34))))))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_45 ((kitten_35 potato_16)) potato_15 (get_potato_16_a kitten_35))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15)))))
(define-fun spoon_46 ((kitten_36 potato_17)) potato_15 (get_potato_17_a kitten_36))
(define-fun spoon_47 ((kitten_37 potato_17) (kitten_38 potato_17)) Bool (ite (and (= (spoon_43 (get_potato_15_a (get_potato_17_a kitten_37))) (spoon_43 (get_potato_15_a (get_potato_17_a kitten_38)))) (= (spoon_43 (get_potato_15_b (get_potato_17_a kitten_37))) (spoon_43 (get_potato_15_b (get_potato_17_a kitten_38))))) true false))
(declare-const cat_48 Int)
(declare-fun spoon_49 (potato_17) Int)
(declare-const cat_50 Int)
(declare-fun spoon_51 (potato_17) Int)
(assert (<= 0 cat_48))
(assert (forall ((kitten_39 potato_17)) (<= 0 (spoon_49 kitten_39))))
(assert (<= 0 cat_50))
(assert (forall ((kitten_40 potato_17)) (<= 0 (spoon_51 kitten_40))))
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(declare-const cat_54 Int)
(assert (<= 0 cat_52))
(assert (< cat_52 cat_53))
(assert (<= 0 cat_54))
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(assert (<= 0 cat_55))
(assert (< cat_55 cat_56))
(assert (<= 0 cat_57))
(declare-fun spoon_58 (potato_17 potato_17) Bool)
(declare-const cat_59 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_60 ((kitten_41 potato_18)) potato_17 (get_potato_18_a kitten_41))
(declare-sort potato_19 0)
(define-fun spoon_61 ((kitten_42 Float32)) Bool (and (spoon_1 kitten_42) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_42) (fp.leq kitten_42 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_62 (potato_19 potato_19) Bool)
(declare-fun spoon_63 (Float32) potato_5)
(declare-fun spoon_64 (potato_5) Bool)
(declare-fun spoon_65 (potato_5) Float32)
(declare-const cat_66 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_67 ((kitten_43 potato_20)) potato_19 (get_potato_20_a kitten_43))
(define-fun spoon_68 ((kitten_44 Float32) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_45 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_61 kitten_44)))
(declare-sort potato_21 0)
(define-fun spoon_69 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_48) (fp.leq kitten_48 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_70 (potato_21 potato_21) Bool)
(declare-fun spoon_71 (Float32) potato_5)
(declare-fun spoon_72 (potato_5) Bool)
(declare-fun spoon_73 (potato_5) Float32)
(declare-const cat_74 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_75 ((kitten_49 potato_22)) potato_21 (get_potato_22_a kitten_49))
(define-fun spoon_76 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_69 kitten_50)))
(declare-sort potato_23 0)
(define-fun spoon_77 ((kitten_54 Float32)) Bool (and (spoon_1 kitten_54) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_54) (fp.leq kitten_54 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_78 (potato_23 potato_23) Bool)
(declare-fun spoon_79 (Float32) potato_5)
(declare-fun spoon_80 (potato_5) Bool)
(declare-fun spoon_81 (potato_5) Float32)
(declare-const cat_82 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_83 ((kitten_55 potato_24)) potato_23 (get_potato_24_a kitten_55))
(define-fun spoon_84 ((kitten_56 Float32) (kitten_57 Bool) (kitten_58 Bool) (kitten_59 Bool)) Bool (=> (or (= kitten_57 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_77 kitten_56)))
(declare-sort potato_25 0)
(define-fun spoon_85 ((kitten_60 Float32)) Bool (and (spoon_1 kitten_60) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_60) (fp.leq kitten_60 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_86 (potato_25 potato_25) Bool)
(declare-fun spoon_87 (Float32) potato_5)
(declare-fun spoon_88 (potato_5) Bool)
(declare-fun spoon_89 (potato_5) Float32)
(declare-const cat_90 potato_25)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_25)))))
(define-fun spoon_91 ((kitten_61 potato_26)) potato_25 (get_potato_26_a kitten_61))
(declare-fun spoon_92 (potato_25) Float32)
(declare-fun spoon_93 (Float32) potato_25)
(assert (forall ((kitten_62 potato_25)) (! (= (spoon_93 (spoon_92 kitten_62)) kitten_62) :pattern ((spoon_92 kitten_62)))))
(assert (forall ((kitten_63 potato_25)) (! (spoon_85 (spoon_92 kitten_63)) :pattern ((spoon_92 kitten_63)))))
(assert (forall ((kitten_64 Float32)) (! (=> (spoon_85 kitten_64) (= (spoon_92 (spoon_93 kitten_64)) kitten_64)) :pattern ((spoon_92 (spoon_93 kitten_64))))))
(declare-sort potato_27 0)
(define-fun spoon_94 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_65) (fp.leq kitten_65 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_95 (potato_27 potato_27) Bool)
(declare-fun spoon_96 (Float32) potato_5)
(declare-fun spoon_97 (potato_5) Bool)
(declare-fun spoon_98 (potato_5) Float32)
(declare-const cat_99 potato_27)
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_27)))))
(define-fun spoon_100 ((kitten_66 potato_28)) potato_27 (get_potato_28_a kitten_66))
(define-fun spoon_101 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_94 kitten_67)))
(declare-fun spoon_102 (Float32) Float32)
(declare-fun spoon_103 (Float32 Float32) Bool)
(assert (forall ((kitten_71 Float32)) (! (=> (spoon_84 kitten_71 true true true) (spoon_101 (spoon_102 kitten_71) true false true)) :pattern ((spoon_102 kitten_71)))))
(declare-fun spoon_104 (potato_17 potato_17) Float32)
(declare-fun spoon_105 (Float32 potato_17 potato_17) Bool)
(assert (forall ((kitten_72 potato_17) (kitten_73 potato_17)) (! (spoon_68 (spoon_104 kitten_72 kitten_73) true false true) :pattern ((spoon_104 kitten_72 kitten_73)))))
(declare-const cat_106 potato_17)
(declare-const cat_107 Int)
(declare-const cat_108 potato_17)
(declare-const cat_109 Int)
(declare-const cat_110 potato_17)
(declare-const cat_111 Int)
(declare-sort potato_29 0)
(define-fun spoon_112 ((kitten_74 Float32)) Bool (and (spoon_1 kitten_74) (and (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) kitten_74) (fp.leq kitten_74 (fp #b0 #b10011010 #b00000000000000000000000)))))
(declare-fun spoon_113 (potato_29 potato_29) Bool)
(declare-fun spoon_114 (Float32) potato_5)
(declare-fun spoon_115 (potato_5) Bool)
(declare-fun spoon_116 (potato_5) Float32)
(declare-const cat_117 potato_29)
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_29)))))
(define-fun spoon_118 ((kitten_75 potato_30)) potato_29 (get_potato_30_a kitten_75))
(define-fun spoon_119 ((kitten_76 Float32) (kitten_77 Bool) (kitten_78 Bool) (kitten_79 Bool)) Bool (=> (or (= kitten_77 true) (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000))) (spoon_112 kitten_76)))
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_25) (get_potato_31_b potato_25)))))
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_31)))))
(define-fun spoon_120 ((kitten_80 potato_32)) potato_31 (get_potato_32_a kitten_80))
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_31)))))
(define-fun spoon_121 ((kitten_81 potato_33)) potato_31 (get_potato_33_a kitten_81))
(define-fun spoon_122 ((kitten_82 potato_33) (kitten_83 potato_33)) Bool (ite (and (= (spoon_92 (get_potato_31_a (get_potato_33_a kitten_82))) (spoon_92 (get_potato_31_a (get_potato_33_a kitten_83)))) (= (spoon_92 (get_potato_31_b (get_potato_33_a kitten_82))) (spoon_92 (get_potato_31_b (get_potato_33_a kitten_83))))) true false))
(declare-const cat_123 Int)
(declare-fun spoon_124 (potato_33) Int)
(declare-const cat_125 Int)
(declare-fun spoon_126 (potato_33) Int)
(assert (<= 0 cat_123))
(assert (forall ((kitten_84 potato_33)) (<= 0 (spoon_124 kitten_84))))
(assert (<= 0 cat_125))
(assert (forall ((kitten_85 potato_33)) (<= 0 (spoon_126 kitten_85))))
(declare-const cat_127 Int)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(assert (<= 0 cat_127))
(assert (< cat_127 cat_128))
(assert (<= 0 cat_129))
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(assert (<= 0 cat_130))
(assert (< cat_130 cat_131))
(assert (<= 0 cat_132))
(declare-fun spoon_133 (potato_33 potato_33) Bool)
(declare-const cat_134 potato_33)
(declare-datatypes () ((potato_34 (mk_potato_34 (get_potato_34_a potato_33)))))
(define-fun spoon_135 ((kitten_86 potato_34)) potato_33 (get_potato_34_a kitten_86))
(declare-const cat_136 Int)
(declare-const cat_137 Int)
(declare-const cat_138 Int)
(declare-const cat_139 Int)
(declare-const cat_140 Int)
(declare-const cat_141 Int)
(declare-const cat_142 Float32)
(declare-const cat_143 Int)
(declare-sort potato_35 0)
(define-fun spoon_144 ((kitten_87 Float32)) Bool (and (spoon_1 kitten_87) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) kitten_87) (fp.leq kitten_87 (fp #b0 #b01111111 #b00000000000000001010100)))))
(declare-fun spoon_145 (potato_35 potato_35) Bool)
(declare-fun spoon_146 (Float32) potato_5)
(declare-fun spoon_147 (potato_5) Bool)
(declare-fun spoon_148 (potato_5) Float32)
(declare-const cat_149 potato_35)
(declare-datatypes () ((potato_36 (mk_potato_36 (get_potato_36_a potato_35)))))
(define-fun spoon_150 ((kitten_88 potato_36)) potato_35 (get_potato_36_a kitten_88))
(define-fun spoon_151 ((kitten_89 Float32) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool)) Bool (=> (or (= kitten_90 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100))) (spoon_144 kitten_89)))
(declare-const cat_152 Int)
(declare-const cat_153 Int)
(assert (= cat_142 (fp #b0 #b01101110 #b01001111100010110101100)))
(define-fun spoon_154 ((kitten_93 Float32) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_94 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_85 kitten_93)))
(define-fun spoon_155 ((kitten_97 Float32) (kitten_98 Bool) (kitten_99 Bool) (kitten_100 Bool)) Bool (=> (or (= kitten_98 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_36 kitten_97)))
(declare-const cat_156 potato_25)
(declare-const cat_157 potato_25)
(declare-const cat_158 potato_25)
(declare-const cat_159 potato_25)
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 Float32)
(declare-const cat_163 Float32)
(declare-const cat_164 Float32)
(declare-const cat_165 Float32)
(declare-const cat_166 potato_25)
(declare-const cat_167 potato_25)
(declare-const cat_168 potato_25)
(declare-const cat_169 potato_25)
(declare-const cat_170 potato_25)
(declare-const cat_171 potato_25)
(declare-const cat_172 potato_25)
(declare-const cat_173 potato_25)
(declare-const cat_174 potato_25)
(declare-const cat_175 potato_25)
(declare-const cat_176 potato_25)
(declare-const cat_177 potato_25)
(declare-const cat_178 Float32)
(declare-const cat_179 Float32)
(declare-const cat_180 Float32)
(declare-const cat_181 Float32)
(declare-const cat_182 Float32)
(declare-const cat_183 Float32)
(declare-const cat_184 potato_25)
(declare-const cat_185 potato_25)
(declare-const cat_186 potato_25)
(declare-const cat_187 potato_25)
(declare-const cat_188 potato_25)
(declare-const cat_189 potato_25)
(declare-const cat_190 potato_31)
(declare-const cat_191 potato_10)
(declare-const cat_192 Float32)
(declare-const cat_193 potato_10)
(declare-const cat_194 Float32)
(declare-const cat_195 potato_10)
(declare-const cat_196 Float32)
(declare-const cat_197 potato_10)
(declare-const cat_198 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10011010 #b00000000000000000000000)) (fp #b0 #b10011010 #b00000000000000000000000)) (spoon_112 cat_160)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_61 cat_161)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_61 cat_162)))
(assert (= cat_182 cat_163))
(assert (= cat_183 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_69 cat_183))
(assert (spoon_1 cat_142))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) (fp #b0 #b01111111 #b00000000000000001010100)) (spoon_144 cat_164)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_77 cat_165)))
(assert (= (spoon_92 cat_166) (fp.sub RNE (spoon_43 (get_potato_15_b (get_potato_17_a cat_106))) (spoon_43 (get_potato_15_b (get_potato_17_a cat_108))))))
(assert (= (spoon_92 cat_167) (fp.sub RNE (spoon_43 (get_potato_15_a (get_potato_17_a cat_106))) (spoon_43 (get_potato_15_a (get_potato_17_a cat_108))))))
(assert (= cat_167 cat_168))
(assert (= cat_166 cat_169))
(assert (= cat_170 cat_168))
(assert (= cat_171 cat_169))
(assert (= cat_184 cat_156))
(assert (= cat_185 cat_157))
(assert (= cat_170 cat_186))
(assert (= cat_171 cat_187))
(assert (= (spoon_92 cat_172) (fp.sub RNE (spoon_43 (get_potato_15_b (get_potato_17_a cat_110))) (spoon_43 (get_potato_15_b (get_potato_17_a cat_108))))))
(assert (= (spoon_92 cat_173) (fp.sub RNE (spoon_43 (get_potato_15_a (get_potato_17_a cat_110))) (spoon_43 (get_potato_15_a (get_potato_17_a cat_108))))))
(assert (= cat_173 cat_174))
(assert (= cat_172 cat_175))
(assert (= cat_176 cat_174))
(assert (= cat_177 cat_175))
(assert (= cat_188 cat_158))
(assert (= cat_189 cat_159))
(assert (= cat_190 (mk_potato_31 cat_176 cat_177)))
(assert (= cat_191 (mk_potato_10 cat_160)))
(assert (= cat_192 (fp.add RNE (fp.mul RNE (spoon_92 cat_186) (spoon_92 (get_potato_31_a cat_190))) (fp.mul RNE (spoon_92 cat_187) (spoon_92 (get_potato_31_b cat_190))))))
(assert (and (= cat_178 (spoon_104 cat_108 cat_106)) (spoon_61 cat_178)))
(assert (= cat_193 (mk_potato_10 cat_161)))
(assert (= cat_194 cat_178))
(assert (and (= cat_179 (spoon_104 cat_108 cat_110)) (spoon_61 cat_179)))
(assert (= cat_195 (mk_potato_10 cat_162)))
(assert (= cat_196 cat_179))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_194))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_196))
(assert (and (= cat_180 (fp.div RNE cat_192 (fp.mul RNE cat_194 cat_196))) (spoon_1 (fp.div RNE cat_192 (fp.mul RNE cat_194 cat_196)))))
(assert (and (= cat_181 cat_180) (spoon_1 cat_180)))
(assert (= cat_197 (mk_potato_10 cat_164)))
(assert (= cat_198 cat_181))
(assert (not (fp.lt cat_198 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))))
(assert (not (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) cat_198)))
(assert (not (spoon_77 cat_198)))
(check-sat)
(exit)
