;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(declare-sort potato_11 0)
(declare-fun spoon_23 (potato_11 potato_11) Bool)
(declare-fun spoon_24 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_27 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_28 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(declare-sort potato_13 0)
(define-fun spoon_29 ((kitten_24 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_24) (and (fp.leq (fp.neg _let_0) kitten_24) (fp.leq kitten_24 _let_0)))))
(declare-fun spoon_30 (potato_13 potato_13) Bool)
(declare-fun spoon_31 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_32 (potato_5) Bool)
(declare-fun spoon_33 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_34 () potato_13)
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_35 ((kitten_25 potato_14)) potato_13 (get_potato_14_a kitten_25))
(declare-fun spoon_36 (potato_13) (_ FloatingPoint 8 24))
(declare-fun spoon_37 ((_ FloatingPoint 8 24)) potato_13)
(assert (forall ((kitten_26 potato_13)) (! (= (spoon_37 (spoon_36 kitten_26)) kitten_26) :pattern ((spoon_36 kitten_26)))))
(assert (forall ((kitten_27 potato_13)) (! (spoon_29 (spoon_36 kitten_27)) :pattern ((spoon_36 kitten_27)))))
(assert (forall ((kitten_28 (_ FloatingPoint 8 24))) (! (=> (spoon_29 kitten_28) (= (spoon_36 (spoon_37 kitten_28)) kitten_28)) :pattern ((spoon_36 (spoon_37 kitten_28))))))
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))

(define-fun spoon_38 ((kitten_29 potato_15)) potato_13 (get_potato_15_a kitten_29))
(define-fun spoon_39 ((kitten_30 potato_15)) potato_13 (get_potato_15_b kitten_30))
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_40 ((kitten_31 potato_16)) potato_15 (get_potato_16_a kitten_31))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_15)))))

(define-fun spoon_41 ((kitten_32 potato_17)) potato_15 (get_potato_17_a kitten_32))
(define-fun spoon_42 ((kitten_33 potato_17) (kitten_34 potato_17)) Bool (let ((_let_0 (get_potato_17_a kitten_33))) (let ((_let_1 (get_potato_17_a kitten_34))) (ite (and (= (spoon_36 (get_potato_15_a _let_0)) (spoon_36 (get_potato_15_a _let_1))) (= (spoon_36 (get_potato_15_b _let_0)) (spoon_36 (get_potato_15_b _let_1)))) true false))))
(declare-fun cat_43 () Int)
(declare-fun spoon_44 (potato_17) Int)
(declare-fun cat_45 () Int)
(declare-fun spoon_46 (potato_17) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_17)) (<= 0 (spoon_44 kitten_35)) ))
(assert (<= 0 cat_45))
(assert (forall ((kitten_36 potato_17)) (<= 0 (spoon_46 kitten_36)) ))
(declare-fun cat_47 () Int)
(declare-fun cat_48 () Int)
(declare-fun cat_49 () Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-fun cat_50 () Int)
(declare-fun cat_51 () Int)
(declare-fun cat_52 () Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_17 potato_17) Bool)
(declare-fun cat_54 () potato_17)
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_55 ((kitten_37 potato_18)) potato_17 (get_potato_18_a kitten_37))
(declare-sort potato_19 0)
(define-fun spoon_56 ((kitten_38 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (and (spoon_1 kitten_38) (and (fp.leq (fp.neg _let_0) kitten_38) (fp.leq kitten_38 _let_0)))))
(declare-fun spoon_57 (potato_19 potato_19) Bool)
(declare-fun spoon_58 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_61 () potato_19)
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_19)))))

(define-fun spoon_62 ((kitten_39 potato_20)) potato_19 (get_potato_20_a kitten_39))
(declare-fun spoon_63 (potato_19) (_ FloatingPoint 8 24))
(declare-fun spoon_64 ((_ FloatingPoint 8 24)) potato_19)
(assert (forall ((kitten_40 potato_19)) (! (= (spoon_64 (spoon_63 kitten_40)) kitten_40) :pattern ((spoon_63 kitten_40)))))
(assert (forall ((kitten_41 potato_19)) (! (spoon_56 (spoon_63 kitten_41)) :pattern ((spoon_63 kitten_41)))))
(assert (forall ((kitten_42 (_ FloatingPoint 8 24))) (! (=> (spoon_56 kitten_42) (= (spoon_63 (spoon_64 kitten_42)) kitten_42)) :pattern ((spoon_63 (spoon_64 kitten_42))))))
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a potato_19) (get_potato_21_b potato_19)))))

(define-fun spoon_65 ((kitten_43 potato_21)) potato_19 (get_potato_21_a kitten_43))
(define-fun spoon_66 ((kitten_44 potato_21)) potato_19 (get_potato_21_b kitten_44))
(declare-datatypes ((potato_22 0)) (((mk_potato_22 (get_potato_22_a potato_21)))))

(define-fun spoon_67 ((kitten_45 potato_22)) potato_21 (get_potato_22_a kitten_45))
(declare-datatypes ((potato_23 0)) (((mk_potato_23 (get_potato_23_a potato_21)))))

(define-fun spoon_68 ((kitten_46 potato_23)) potato_21 (get_potato_23_a kitten_46))
(define-fun spoon_69 ((kitten_47 potato_23) (kitten_48 potato_23)) Bool (let ((_let_0 (get_potato_23_a kitten_47))) (let ((_let_1 (get_potato_23_a kitten_48))) (ite (and (= (spoon_63 (get_potato_21_a _let_0)) (spoon_63 (get_potato_21_a _let_1))) (= (spoon_63 (get_potato_21_b _let_0)) (spoon_63 (get_potato_21_b _let_1)))) true false))))
(declare-fun cat_70 () Int)
(declare-fun spoon_71 (potato_23) Int)
(declare-fun cat_72 () Int)
(declare-fun spoon_73 (potato_23) Int)
(assert (<= 0 cat_70))
(assert (forall ((kitten_49 potato_23)) (<= 0 (spoon_71 kitten_49)) ))
(assert (<= 0 cat_72))
(assert (forall ((kitten_50 potato_23)) (<= 0 (spoon_73 kitten_50)) ))
(declare-fun cat_74 () Int)
(declare-fun cat_75 () Int)
(declare-fun cat_76 () Int)
(assert (<= 0 cat_74))
(assert (< cat_74 cat_75))
(assert (<= 0 cat_76))
(declare-fun cat_77 () Int)
(declare-fun cat_78 () Int)
(declare-fun cat_79 () Int)
(assert (<= 0 cat_77))
(assert (< cat_77 cat_78))
(assert (<= 0 cat_79))
(declare-fun spoon_80 (potato_23 potato_23) Bool)
(declare-fun cat_81 () potato_23)
(declare-datatypes ((potato_24 0)) (((mk_potato_24 (get_potato_24_a potato_23)))))

(define-fun spoon_82 ((kitten_51 potato_24)) potato_23 (get_potato_24_a kitten_51))
(declare-fun spoon_83 (potato_23 potato_23) (_ FloatingPoint 8 24))
(declare-fun spoon_84 ((_ FloatingPoint 8 24) potato_23 potato_23) Bool)
(declare-sort potato_25 0)
(define-fun spoon_85 ((kitten_52 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv0 23)))) (and (spoon_1 kitten_52) (and (fp.leq (fp.neg _let_0) kitten_52) (fp.leq kitten_52 _let_0)))))
(declare-fun spoon_86 (potato_25 potato_25) Bool)
(declare-fun spoon_87 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_88 (potato_5) Bool)
(declare-fun spoon_89 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_90 () potato_25)
(declare-datatypes ((potato_26 0)) (((mk_potato_26 (get_potato_26_a potato_25)))))

(define-fun spoon_91 ((kitten_53 potato_26)) potato_25 (get_potato_26_a kitten_53))
(define-fun spoon_92 ((kitten_54 (_ FloatingPoint 8 24)) (kitten_55 Bool) (kitten_56 Bool) (kitten_57 Bool) (kitten_58 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv154 8) (_ bv0 23)))) (=> (or (= kitten_55 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_85 kitten_54))))
(assert (forall ((kitten_59 potato_23) (kitten_60 potato_23)) (! (spoon_92 (spoon_83 kitten_59 kitten_60) true false true true) :pattern ((spoon_83 kitten_59 kitten_60)))))
(assert (forall ((kitten_61 potato_23) (kitten_62 potato_23)) (! (let ((_let_0 (get_potato_23_a kitten_61))) (let ((_let_1 (get_potato_23_a kitten_62))) (= (spoon_83 kitten_61 kitten_62) (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_a _let_0)) (spoon_63 (get_potato_21_a _let_1))) (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_b _let_0)) (spoon_63 (get_potato_21_b _let_1))))))) :pattern ((spoon_83 kitten_61 kitten_62)))))
(declare-sort potato_27 0)
(define-fun spoon_93 ((kitten_63 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_63) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_63) (fp.leq kitten_63 (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))))))
(declare-fun spoon_94 (potato_27 potato_27) Bool)
(declare-fun spoon_95 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_96 (potato_5) Bool)
(declare-fun spoon_97 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_98 () potato_27)
(declare-datatypes ((potato_28 0)) (((mk_potato_28 (get_potato_28_a potato_27)))))

(define-fun spoon_99 ((kitten_64 potato_28)) potato_27 (get_potato_28_a kitten_64))
(define-fun spoon_100 ((kitten_65 (_ FloatingPoint 8 24)) (kitten_66 Bool) (kitten_67 Bool) (kitten_68 Bool) (kitten_69 Bool)) Bool (=> (or (= kitten_66 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23)))) (spoon_93 kitten_65)))
(declare-sort potato_29 0)
(define-fun spoon_101 ((kitten_70 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_70) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_70) (fp.leq kitten_70 (fp (_ bv0 1) (_ bv191 8) (_ bv48 23))))))
(declare-fun spoon_102 (potato_29 potato_29) Bool)
(declare-fun spoon_103 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_104 (potato_5) Bool)
(declare-fun spoon_105 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_106 () potato_29)
(declare-datatypes ((potato_30 0)) (((mk_potato_30 (get_potato_30_a potato_29)))))

(define-fun spoon_107 ((kitten_71 potato_30)) potato_29 (get_potato_30_a kitten_71))
(define-fun spoon_108 ((kitten_72 (_ FloatingPoint 8 24)) (kitten_73 Bool) (kitten_74 Bool) (kitten_75 Bool) (kitten_76 Bool)) Bool (=> (or (= kitten_73 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv191 8) (_ bv48 23)))) (spoon_101 kitten_72)))
(declare-fun cat_109 () potato_17)
(declare-fun cat_110 () Int)
(declare-fun cat_111 () potato_17)
(declare-fun cat_112 () Int)
(declare-fun cat_113 () potato_17)
(declare-fun cat_114 () Int)
(declare-sort potato_31 0)
(define-fun spoon_115 ((kitten_77 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv182 8) (_ bv0 23)))) (and (spoon_1 kitten_77) (and (fp.leq (fp.neg _let_0) kitten_77) (fp.leq kitten_77 _let_0)))))
(declare-fun spoon_116 (potato_31 potato_31) Bool)
(declare-fun spoon_117 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_118 (potato_5) Bool)
(declare-fun spoon_119 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_120 () potato_31)
(declare-datatypes ((potato_32 0)) (((mk_potato_32 (get_potato_32_a potato_31)))))

(define-fun spoon_121 ((kitten_78 potato_32)) potato_31 (get_potato_32_a kitten_78))
(define-fun spoon_122 ((kitten_79 (_ FloatingPoint 8 24)) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv182 8) (_ bv0 23)))) (=> (or (= kitten_80 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_115 kitten_79))))
(declare-fun cat_123 () Int)
(declare-fun cat_124 () Int)
(declare-fun cat_125 () Int)
(declare-fun cat_126 () Int)
(declare-fun cat_127 () Int)
(declare-fun cat_128 () Int)
(declare-fun cat_129 () Int)
(declare-fun cat_130 () Int)
(declare-fun cat_131 () Int)
(define-fun spoon_132 ((kitten_84 (_ FloatingPoint 8 24)) (kitten_85 Bool) (kitten_86 Bool) (kitten_87 Bool) (kitten_88 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv254 8) (_ bv8388607 23)))) (=> (or (= kitten_85 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_1 kitten_84))))
(define-fun spoon_133 ((kitten_89 (_ FloatingPoint 8 24)) (kitten_90 Bool) (kitten_91 Bool) (kitten_92 Bool) (kitten_93 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv140 8) (_ bv0 23)))) (=> (or (= kitten_90 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_56 kitten_89))))
(define-fun spoon_134 ((kitten_94 (_ FloatingPoint 8 24)) (kitten_95 Bool) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_95 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_29 kitten_94))))
(declare-fun cat_135 () potato_19)
(declare-fun cat_136 () potato_19)
(declare-fun cat_137 () potato_19)
(declare-fun cat_138 () potato_19)
(declare-fun cat_139 () potato_19)
(declare-fun cat_140 () potato_19)
(declare-fun cat_141 () potato_19)
(declare-fun cat_142 () potato_19)
(declare-fun cat_143 () (_ FloatingPoint 8 24))
(declare-fun cat_144 () (_ FloatingPoint 8 24))
(declare-fun cat_145 () (_ FloatingPoint 8 24))
(declare-fun cat_146 () (_ FloatingPoint 8 24))
(declare-fun cat_147 () (_ FloatingPoint 8 24))
(declare-fun cat_148 () potato_19)
(declare-fun cat_149 () potato_19)
(declare-fun cat_150 () potato_19)
(declare-fun cat_151 () potato_19)
(declare-fun cat_152 () potato_19)
(declare-fun cat_153 () potato_19)
(declare-fun cat_154 () potato_19)
(declare-fun cat_155 () potato_19)
(declare-fun cat_156 () potato_19)
(declare-fun cat_157 () potato_19)
(declare-fun cat_158 () potato_19)
(declare-fun cat_159 () potato_19)
(declare-fun cat_160 () potato_19)
(declare-fun cat_161 () potato_19)
(declare-fun cat_162 () potato_19)
(declare-fun cat_163 () potato_19)
(declare-fun cat_164 () potato_19)
(declare-fun cat_165 () potato_19)
(declare-fun cat_166 () potato_19)
(declare-fun cat_167 () potato_21)
(declare-fun cat_168 () potato_23)
(declare-fun cat_169 () (_ FloatingPoint 8 24))
(declare-fun cat_170 () (_ FloatingPoint 8 24))
(declare-fun cat_171 () (_ FloatingPoint 8 24))
(declare-fun cat_172 () (_ FloatingPoint 8 24))
(declare-fun cat_173 () potato_22)
(declare-fun cat_174 () potato_21)
(declare-fun cat_175 () potato_22)
(declare-fun cat_176 () potato_21)
(declare-fun cat_177 () potato_22)
(declare-fun cat_178 () potato_21)
(declare-fun cat_179 () potato_22)
(declare-fun cat_180 () potato_21)
(declare-fun cat_181 () potato_10)
(declare-fun cat_182 () (_ FloatingPoint 8 24))
(declare-fun cat_183 () potato_10)
(declare-fun cat_184 () (_ FloatingPoint 8 24))
(assert (let ((_let_0 (fp.sub roundNearestTiesToEven (spoon_36 (get_potato_15_a (get_potato_17_a cat_113))) (spoon_36 (get_potato_15_a (get_potato_17_a cat_111)))))) (let ((_let_1 (fp.sub roundNearestTiesToEven (spoon_36 (get_potato_15_b (get_potato_17_a cat_113))) (spoon_36 (get_potato_15_b (get_potato_17_a cat_111)))))) (fp.leq (fp (_ bv0 1) (_ bv111 8) (_ bv5355287 23)) (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven _let_0 _let_0) (fp.mul roundNearestTiesToEven _let_1 _let_1))))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv182 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_115 cat_143))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv182 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_115 cat_144))))
(assert (let ((_let_0 (fp (_ bv0 1) (_ bv182 8) (_ bv0 23)))) (=> (fp.leq (fp.neg _let_0) _let_0) (spoon_115 cat_145))))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv191 8) (_ bv48 23))) (spoon_101 cat_146)))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))) (spoon_93 cat_147)))
(assert (= (spoon_63 cat_148) (fp.sub roundNearestTiesToEven (spoon_36 (get_potato_15_b (get_potato_17_a cat_113))) (spoon_36 (get_potato_15_b (get_potato_17_a cat_111))))))
(assert (= (spoon_63 cat_149) (fp.sub roundNearestTiesToEven (spoon_36 (get_potato_15_a (get_potato_17_a cat_113))) (spoon_36 (get_potato_15_a (get_potato_17_a cat_111))))))
(assert (= cat_149 cat_150))
(assert (= cat_148 cat_151))
(assert (= cat_152 cat_150))
(assert (= cat_153 cat_151))
(assert (= cat_173 (mk_potato_22 (mk_potato_21 cat_141 cat_142))))
(assert (= cat_174 (mk_potato_21 cat_152 cat_153)))
(assert (= (spoon_63 cat_154) (fp.neg (fp.mul roundNearestTiesToEven (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)) (spoon_63 (get_potato_21_b cat_174))))))
(assert (= cat_154 cat_155))
(assert (= (get_potato_21_a cat_174) cat_156))
(assert (= cat_157 cat_155))
(assert (= cat_158 cat_156))
(assert (= cat_175 (mk_potato_22 (mk_potato_21 cat_139 cat_140))))
(assert (= cat_176 (mk_potato_21 cat_157 cat_158)))
(assert (= (spoon_63 cat_159) (spoon_36 (get_potato_15_b (get_potato_17_a cat_109)))))
(assert (= (spoon_63 cat_160) (spoon_36 (get_potato_15_a (get_potato_17_a cat_109)))))
(assert (= cat_160 cat_161))
(assert (= cat_159 cat_162))
(assert (= cat_163 cat_161))
(assert (= cat_164 cat_162))
(assert (= cat_177 (mk_potato_22 (mk_potato_21 cat_135 cat_136))))
(assert (= cat_178 (mk_potato_21 cat_163 cat_164)))
(assert (= (spoon_63 cat_165) (spoon_36 (get_potato_15_b (get_potato_17_a cat_111)))))
(assert (= (spoon_63 cat_166) (spoon_36 (get_potato_15_a (get_potato_17_a cat_111)))))
(assert (= cat_167 (mk_potato_21 cat_166 cat_165)))
(assert (= cat_168 (mk_potato_23 cat_167)))
(assert (= cat_179 (mk_potato_22 (mk_potato_21 cat_137 cat_138))))
(assert (= cat_180 (get_potato_23_a cat_168)))
(assert (let ((_let_0 (spoon_63 (get_potato_21_b cat_174)))) (let ((_let_1 (mk_potato_23 cat_174))) (let ((_let_2 (spoon_63 (get_potato_21_a cat_174)))) (and (= cat_169 (spoon_83 _let_1 _let_1)) (and (spoon_85 cat_169) (= cat_169 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven _let_2 _let_2) (fp.mul roundNearestTiesToEven _let_0 _let_0)))))))))
(assert (= cat_181 (mk_potato_10 cat_143)))
(assert (= cat_182 cat_169))
(assert (and (= cat_170 (spoon_83 (mk_potato_23 cat_178) (mk_potato_23 cat_176))) (and (spoon_85 cat_170) (= cat_170 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_a cat_178)) (spoon_63 (get_potato_21_a cat_176))) (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_b cat_178)) (spoon_63 (get_potato_21_b cat_176))))))))
(assert (and (= cat_171 (spoon_83 (mk_potato_23 cat_180) (mk_potato_23 cat_176))) (and (spoon_85 cat_171) (= cat_171 (fp.add roundNearestTiesToEven (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_a cat_180)) (spoon_63 (get_potato_21_a cat_176))) (fp.mul roundNearestTiesToEven (spoon_63 (get_potato_21_b cat_180)) (spoon_63 (get_potato_21_b cat_176))))))))
(assert (= cat_172 (fp.sub roundNearestTiesToEven cat_171 cat_170)))
(assert (= cat_183 (mk_potato_10 cat_145)))
(assert (= cat_184 cat_172))
(assert (not (spoon_101 (fp.sqrt roundNearestTiesToEven cat_182))))
(check-sat)
(exit)
