(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(define-fun spoon_3 ((kitten_3 Float64)) Bool (not (or (fp.isInfinite kitten_3) (fp.isNaN kitten_3))))
(define-fun spoon_4 ((kitten_4 Float64)) Bool (or (fp.isZero kitten_4) (and (fp.isNormal kitten_4) (= kitten_4 (fp.roundToIntegral RNE kitten_4)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_5 (potato_2 potato_2) Bool)
(declare-const cat_6 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_7 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_9 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_10 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(declare-fun spoon_11 (Int) Int)
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isNegative kitten_10)))
(define-fun spoon_14 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isPositive kitten_11)))
(define-fun spoon_15 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isNegative kitten_12)))
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_13 Int)) Bool (and (<= (- cat_16) kitten_13) (<= kitten_13 cat_16)))
(define-fun spoon_18 ((kitten_14 Int)) Bool (and (<= (- 16777216) kitten_14) (<= kitten_14 16777216)))
(define-fun spoon_19 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isPositive kitten_16)) (and (fp.isNegative kitten_15) (fp.isNegative kitten_16))))
(define-fun spoon_20 ((kitten_17 Float32) (kitten_18 Float32)) Bool (or (and (fp.isPositive kitten_17) (fp.isNegative kitten_18)) (and (fp.isNegative kitten_17) (fp.isPositive kitten_18))))
(define-fun spoon_21 ((kitten_19 Float32) (kitten_20 Float32) (kitten_21 Float32)) Bool (and (=> (spoon_19 kitten_20 kitten_21) (fp.isPositive kitten_19)) (=> (spoon_20 kitten_20 kitten_21) (fp.isNegative kitten_19))))
(define-fun spoon_22 ((kitten_22 Real)) Real (* kitten_22 kitten_22))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_23 Float32) (kitten_24 Real)) Bool (or (and (fp.isPositive kitten_23) (< 0.0 kitten_24)) (and (fp.isNegative kitten_23) (< kitten_24 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_25 Float64)) Bool (and (fp.isInfinite kitten_25) (fp.isPositive kitten_25)))
(define-fun spoon_26 ((kitten_26 Float64)) Bool (and (fp.isInfinite kitten_26) (fp.isNegative kitten_26)))
(define-fun spoon_27 ((kitten_27 Float64)) Bool (and (fp.isZero kitten_27) (fp.isPositive kitten_27)))
(define-fun spoon_28 ((kitten_28 Float64)) Bool (and (fp.isZero kitten_28) (fp.isNegative kitten_28)))
(declare-const cat_29 Int)
(define-fun spoon_30 ((kitten_29 Int)) Bool (and (<= (- cat_29) kitten_29) (<= kitten_29 cat_29)))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 9007199254740992) kitten_30) (<= kitten_30 9007199254740992)))
(define-fun spoon_32 ((kitten_31 Float64) (kitten_32 Float64)) Bool (or (and (fp.isPositive kitten_31) (fp.isPositive kitten_32)) (and (fp.isNegative kitten_31) (fp.isNegative kitten_32))))
(define-fun spoon_33 ((kitten_33 Float64) (kitten_34 Float64)) Bool (or (and (fp.isPositive kitten_33) (fp.isNegative kitten_34)) (and (fp.isNegative kitten_33) (fp.isPositive kitten_34))))
(define-fun spoon_34 ((kitten_35 Float64) (kitten_36 Float64) (kitten_37 Float64)) Bool (and (=> (spoon_32 kitten_36 kitten_37) (fp.isPositive kitten_35)) (=> (spoon_33 kitten_36 kitten_37) (fp.isNegative kitten_35))))
(define-fun spoon_35 ((kitten_38 Float64) (kitten_39 Real)) Bool (or (and (fp.isPositive kitten_38) (< 0.0 kitten_39)) (and (fp.isNegative kitten_38) (< kitten_39 0.0))))
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a Float64)))))
(define-fun spoon_36 ((kitten_40 Int)) Bool (or (= kitten_40 0) (= kitten_40 1)))
(declare-fun spoon_37 (Bool) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (Float32) Float32)
(declare-fun spoon_41 (Float32 Float32) Bool)
(declare-sort potato_12 0)
(define-fun spoon_42 ((kitten_41 Float32)) Bool (and (spoon_1 kitten_41) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_41) (fp.leq kitten_41 (fp #b0 #b10000111 #b01101000000000000000000)))))
(declare-fun spoon_43 (potato_12 potato_12) Bool)
(declare-fun spoon_44 (Float32) potato_5)
(declare-fun spoon_45 (potato_5) Bool)
(declare-fun spoon_46 (potato_5) Float32)
(declare-const cat_47 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_48 ((kitten_42 potato_13)) potato_12 (get_potato_13_a kitten_42))
(define-fun spoon_49 ((kitten_43 Float32) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_44 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000111 #b01101000000000000000000))) (spoon_42 kitten_43)))
(declare-sort potato_14 0)
(define-fun spoon_50 ((kitten_48 Float32)) Bool (and (spoon_1 kitten_48) (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) kitten_48) (fp.leq kitten_48 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_51 (potato_14 potato_14) Bool)
(declare-fun spoon_52 (Float32) potato_5)
(declare-fun spoon_53 (potato_5) Bool)
(declare-fun spoon_54 (potato_5) Float32)
(declare-const cat_55 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_56 ((kitten_49 potato_15)) potato_14 (get_potato_15_a kitten_49))
(define-fun spoon_57 ((kitten_50 Float32) (kitten_51 Bool) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_51 true) (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_50 kitten_50)))
(assert (forall ((kitten_55 Float32)) (! (=> (spoon_49 kitten_55 true true true true) (spoon_57 (spoon_40 kitten_55) true false true true)) :pattern ((spoon_40 kitten_55)))))
(declare-fun spoon_58 (Float32) Float32)
(declare-fun spoon_59 (Float32 Float32) Bool)
(assert (forall ((kitten_56 Float32)) (! (=> (spoon_49 kitten_56 true true true true) (spoon_57 (spoon_58 kitten_56) true false true true)) :pattern ((spoon_58 kitten_56)))))
(declare-fun spoon_60 (Float32) Float32)
(declare-fun spoon_61 (Float32 Float32) Bool)
(declare-sort potato_16 0)
(define-fun spoon_62 ((kitten_57 Float32)) Bool (and (spoon_1 kitten_57) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_57) (fp.leq kitten_57 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_63 (potato_16 potato_16) Bool)
(declare-fun spoon_64 (Float32) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Float32)
(declare-const cat_67 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_68 ((kitten_58 potato_17)) potato_16 (get_potato_17_a kitten_58))
(define-fun spoon_69 ((kitten_59 Float32) (kitten_60 Bool) (kitten_61 Bool) (kitten_62 Bool) (kitten_63 Bool)) Bool (=> (or (= kitten_60 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_62 kitten_59)))
(assert (forall ((kitten_64 Float32)) (! (=> (spoon_57 kitten_64 true true true true) (spoon_69 (spoon_60 kitten_64) true false true true)) :pattern ((spoon_60 kitten_64)))))
(declare-fun spoon_70 (Float32) Float32)
(declare-fun spoon_71 (Float32 Float32) Bool)
(declare-sort potato_18 0)
(define-fun spoon_72 ((kitten_65 Float32)) Bool (and (spoon_1 kitten_65) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) kitten_65) (fp.leq kitten_65 (fp #b0 #b10000101 #b01100111111101011101000)))))
(declare-fun spoon_73 (potato_18 potato_18) Bool)
(declare-fun spoon_74 (Float32) potato_5)
(declare-fun spoon_75 (potato_5) Bool)
(declare-fun spoon_76 (potato_5) Float32)
(declare-const cat_77 potato_18)
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_78 ((kitten_66 potato_19)) potato_18 (get_potato_19_a kitten_66))
(define-fun spoon_79 ((kitten_67 Float32) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool) (kitten_71 Bool)) Bool (=> (or (= kitten_68 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01100111111101011101000)) (fp #b0 #b10000101 #b01100111111101011101000))) (spoon_72 kitten_67)))
(declare-sort potato_20 0)
(define-fun spoon_80 ((kitten_72 Float32)) Bool (and (spoon_1 kitten_72) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) kitten_72) (fp.leq kitten_72 (fp #b0 #b10001011 #b01101010100000000000000)))))
(declare-fun spoon_81 (potato_20 potato_20) Bool)
(declare-fun spoon_82 (Float32) potato_5)
(declare-fun spoon_83 (potato_5) Bool)
(declare-fun spoon_84 (potato_5) Float32)
(declare-const cat_85 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_86 ((kitten_73 potato_21)) potato_20 (get_potato_21_a kitten_73))
(define-fun spoon_87 ((kitten_74 Float32) (kitten_75 Bool) (kitten_76 Bool) (kitten_77 Bool) (kitten_78 Bool)) Bool (=> (or (= kitten_75 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b01101010100000000000000)) (fp #b0 #b10001011 #b01101010100000000000000))) (spoon_80 kitten_74)))
(assert (forall ((kitten_79 Float32)) (! (=> (spoon_87 kitten_79 true true true true) (spoon_79 (spoon_70 kitten_79) true false true true)) :pattern ((spoon_70 kitten_79)))))
(declare-fun spoon_88 (Float32) Float32)
(declare-fun spoon_89 (Float32 Float32) Bool)
(declare-sort potato_22 0)
(define-fun spoon_90 ((kitten_80 Float32)) Bool (and (spoon_1 kitten_80) (and (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) kitten_80) (fp.leq kitten_80 (fp #b0 #b10000101 #b01101000000000000000000)))))
(declare-fun spoon_91 (potato_22 potato_22) Bool)
(declare-fun spoon_92 (Float32) potato_5)
(declare-fun spoon_93 (potato_5) Bool)
(declare-fun spoon_94 (potato_5) Float32)
(declare-const cat_95 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_96 ((kitten_81 potato_23)) potato_22 (get_potato_23_a kitten_81))
(define-fun spoon_97 ((kitten_82 Float32) (kitten_83 Bool) (kitten_84 Bool) (kitten_85 Bool) (kitten_86 Bool)) Bool (=> (or (= kitten_83 true) (fp.leq (fp.neg (fp #b0 #b10000101 #b01101000000000000000000)) (fp #b0 #b10000101 #b01101000000000000000000))) (spoon_90 kitten_82)))
(assert (forall ((kitten_87 Float32)) (! (=> (spoon_97 kitten_87 true true true true) (spoon_49 (spoon_88 kitten_87) true false true true)) :pattern ((spoon_88 kitten_87)))))
(declare-fun spoon_98 (Float32 Float32) Float32)
(declare-fun spoon_99 (Float32 Float32 Float32) Bool)
(declare-sort potato_24 0)
(define-fun spoon_100 ((kitten_88 Float32)) Bool (and (spoon_1 kitten_88) (and (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) kitten_88) (fp.leq kitten_88 (fp #b0 #b10000110 #b01101000000000000000000)))))
(declare-fun spoon_101 (potato_24 potato_24) Bool)
(declare-fun spoon_102 (Float32) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) Float32)
(declare-const cat_105 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_106 ((kitten_89 potato_25)) potato_24 (get_potato_25_a kitten_89))
(define-fun spoon_107 ((kitten_90 Float32) (kitten_91 Bool) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_91 true) (fp.leq (fp.neg (fp #b0 #b10000110 #b01101000000000000000000)) (fp #b0 #b10000110 #b01101000000000000000000))) (spoon_100 kitten_90)))
(assert (forall ((kitten_95 Float32) (kitten_96 Float32)) (! (=> (and (spoon_107 kitten_95 true true true true) (spoon_107 kitten_96 true true true true)) (spoon_107 (spoon_98 kitten_95 kitten_96) true false true true)) :pattern ((spoon_98 kitten_95 kitten_96)))))
(declare-sort potato_26 0)
(define-fun spoon_108 ((kitten_97 Float32)) Bool (and (spoon_1 kitten_97) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_97) (fp.leq kitten_97 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_109 (potato_26 potato_26) Bool)
(declare-fun spoon_110 (Float32) potato_5)
(declare-fun spoon_111 (potato_5) Bool)
(declare-fun spoon_112 (potato_5) Float32)
(declare-const cat_113 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_114 ((kitten_98 potato_27)) potato_26 (get_potato_27_a kitten_98))
(define-fun spoon_115 ((kitten_99 Float32) (kitten_100 Bool) (kitten_101 Bool) (kitten_102 Bool) (kitten_103 Bool)) Bool (=> (or (= kitten_100 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_108 kitten_99)))
(declare-fun spoon_116 (potato_22) Float32)
(declare-fun spoon_117 (Float32) potato_22)
(assert (forall ((kitten_104 potato_22)) (! (= (spoon_117 (spoon_116 kitten_104)) kitten_104) :pattern ((spoon_116 kitten_104)))))
(assert (forall ((kitten_105 potato_22)) (! (spoon_90 (spoon_116 kitten_105)) :pattern ((spoon_116 kitten_105)))))
(assert (forall ((kitten_106 Float32)) (! (=> (spoon_90 kitten_106) (= (spoon_116 (spoon_117 kitten_106)) kitten_106)) :pattern ((spoon_116 (spoon_117 kitten_106))))))
(declare-fun spoon_118 (potato_24) Float32)
(declare-fun spoon_119 (Float32) potato_24)
(assert (forall ((kitten_107 potato_24)) (! (= (spoon_119 (spoon_118 kitten_107)) kitten_107) :pattern ((spoon_118 kitten_107)))))
(assert (forall ((kitten_108 potato_24)) (! (spoon_100 (spoon_118 kitten_108)) :pattern ((spoon_118 kitten_108)))))
(assert (forall ((kitten_109 Float32)) (! (=> (spoon_100 kitten_109) (= (spoon_118 (spoon_119 kitten_109)) kitten_109)) :pattern ((spoon_118 (spoon_119 kitten_109))))))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_22) (get_potato_28_b potato_24)))))
(define-fun spoon_120 ((kitten_110 potato_28)) potato_22 (get_potato_28_a kitten_110))
(define-fun spoon_121 ((kitten_111 potato_28)) potato_24 (get_potato_28_b kitten_111))
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_122 ((kitten_112 potato_29)) potato_28 (get_potato_29_a kitten_112))
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_28)))))
(define-fun spoon_123 ((kitten_113 potato_30)) potato_28 (get_potato_30_a kitten_113))
(define-fun spoon_124 ((kitten_114 potato_30) (kitten_115 potato_30)) Bool (ite (and (= (spoon_116 (get_potato_28_a (get_potato_30_a kitten_114))) (spoon_116 (get_potato_28_a (get_potato_30_a kitten_115)))) (= (spoon_118 (get_potato_28_b (get_potato_30_a kitten_114))) (spoon_118 (get_potato_28_b (get_potato_30_a kitten_115))))) true false))
(declare-const cat_125 Int)
(declare-fun spoon_126 (potato_30) Int)
(declare-const cat_127 Int)
(declare-fun spoon_128 (potato_30) Int)
(assert (<= 0 cat_125))
(assert (forall ((kitten_116 potato_30)) (<= 0 (spoon_126 kitten_116))))
(assert (<= 0 cat_127))
(assert (forall ((kitten_117 potato_30)) (<= 0 (spoon_128 kitten_117))))
(declare-const cat_129 Int)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(assert (<= 0 cat_129))
(assert (< cat_129 cat_130))
(assert (<= 0 cat_131))
(declare-const cat_132 Int)
(declare-const cat_133 Int)
(declare-const cat_134 Int)
(assert (<= 0 cat_132))
(assert (< cat_132 cat_133))
(assert (<= 0 cat_134))
(declare-fun spoon_135 (potato_30 potato_30) Bool)
(declare-const cat_136 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_137 ((kitten_118 potato_31)) potato_30 (get_potato_31_a kitten_118))
(declare-const cat_138 potato_30)
(declare-const cat_139 Int)
(declare-sort potato_32 0)
(declare-fun spoon_140 (potato_32 potato_32) Bool)
(declare-fun spoon_141 (Float64) potato_5)
(declare-fun spoon_142 (potato_5) Bool)
(declare-fun spoon_143 (potato_5) Float64)
(declare-const cat_144 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_145 ((kitten_119 potato_33)) potato_32 (get_potato_33_a kitten_119))
(declare-sort potato_34 0)
(declare-fun spoon_146 (potato_34 potato_34) Bool)
(declare-fun spoon_147 (Float64) potato_5)
(declare-fun spoon_148 (potato_5) Bool)
(declare-fun spoon_149 (potato_5) Float64)
(declare-const cat_150 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_151 ((kitten_120 potato_35)) potato_34 (get_potato_35_a kitten_120))
(define-fun spoon_152 ((kitten_121 Float64) (kitten_122 Bool) (kitten_123 Bool) (kitten_124 Bool) (kitten_125 Bool)) Bool (=> (or (= kitten_122 true) (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_3 kitten_121)))
(declare-sort potato_36 0)
(define-fun spoon_153 ((kitten_126 Float64)) Bool (and (spoon_3 kitten_126) (and (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) kitten_126) (fp.leq kitten_126 (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000)))))
(declare-fun spoon_154 (potato_36 potato_36) Bool)
(declare-fun spoon_155 (Float64) potato_5)
(declare-fun spoon_156 (potato_5) Bool)
(declare-fun spoon_157 (potato_5) Float64)
(declare-const cat_158 potato_36)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_36)))))
(define-fun spoon_159 ((kitten_127 potato_37)) potato_36 (get_potato_37_a kitten_127))
(define-fun spoon_160 ((kitten_128 Float64) (kitten_129 Bool) (kitten_130 Bool) (kitten_131 Bool) (kitten_132 Bool)) Bool (=> (or (= kitten_129 true) (fp.leq (fp #b0 #b10000001010 #b1010100100000000000000000000000000000000000000000000) (fp #b0 #b10000001010 #b1011010110000000000000000000000000000000000000000000))) (spoon_153 kitten_128)))
(declare-sort potato_38 0)
(define-fun spoon_161 ((kitten_133 Float64)) Bool (and (spoon_3 kitten_133) (and (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) kitten_133) (fp.leq kitten_133 (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))
(declare-fun spoon_162 (potato_38 potato_38) Bool)
(declare-fun spoon_163 (Float64) potato_5)
(declare-fun spoon_164 (potato_5) Bool)
(declare-fun spoon_165 (potato_5) Float64)
(declare-const cat_166 potato_38)
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_38)))))
(define-fun spoon_167 ((kitten_134 potato_39)) potato_38 (get_potato_39_a kitten_134))
(define-fun spoon_168 ((kitten_135 Float64) (kitten_136 Bool) (kitten_137 Bool) (kitten_138 Bool) (kitten_139 Bool)) Bool (=> (or (= kitten_136 true) (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))) (spoon_161 kitten_135)))
(declare-sort potato_40 0)
(define-fun spoon_169 ((kitten_140 Float64)) Bool (and (spoon_3 kitten_140) (and (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) kitten_140) (fp.leq kitten_140 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(declare-fun spoon_170 (potato_40 potato_40) Bool)
(declare-fun spoon_171 (Float64) potato_5)
(declare-fun spoon_172 (potato_5) Bool)
(declare-fun spoon_173 (potato_5) Float64)
(declare-const cat_174 potato_40)
(declare-datatypes () ((potato_41 (mk_potato_41 (get_potato_41_a potato_40)))))
(define-fun spoon_175 ((kitten_141 potato_41)) potato_40 (get_potato_41_a kitten_141))
(define-fun spoon_176 ((kitten_142 Float64) (kitten_143 Bool) (kitten_144 Bool) (kitten_145 Bool) (kitten_146 Bool)) Bool (=> (or (= kitten_143 true) (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (spoon_169 kitten_142)))
(declare-const cat_177 Float32)
(declare-const cat_178 Int)
(declare-const cat_179 Float32)
(declare-const cat_180 Int)
(declare-const cat_181 Float64)
(declare-const cat_182 Int)
(declare-const cat_183 potato_30)
(declare-const cat_184 Int)
(declare-const cat_185 Int)
(declare-const cat_186 Int)
(declare-const cat_187 Int)
(declare-const cat_188 Int)
(declare-const cat_189 Int)
(declare-const cat_190 Int)
(declare-const cat_191 Int)
(declare-const cat_192 Int)
(declare-const cat_193 Int)
(declare-const cat_194 Int)
(declare-const cat_195 Int)
(declare-const cat_196 Int)
(declare-const cat_197 Int)
(declare-const cat_198 Int)
(declare-const cat_199 Int)
(declare-const cat_200 Int)
(assert (= cat_138 (mk_potato_30 (mk_potato_28 (spoon_117 (fp #b0 #b00000000 #b00000000000000000000000)) (spoon_119 (fp #b0 #b00000000 #b00000000000000000000000))))))
(declare-const cat_201 potato_22)
(declare-const cat_202 potato_24)
(declare-const cat_203 Bool)
(declare-const cat_204 Float64)
(declare-const cat_205 Float64)
(declare-const cat_206 Float64)
(declare-const cat_207 Float64)
(declare-const cat_208 Float64)
(declare-const cat_209 Float64)
(declare-const cat_210 Float64)
(declare-const cat_211 Float64)
(declare-const cat_212 Float64)
(declare-const cat_213 Float64)
(declare-const cat_214 Float64)
(declare-const cat_215 Float32)
(declare-const cat_216 Float64)
(declare-const cat_217 Float64)
(declare-const cat_218 potato_24)
(declare-const cat_219 potato_22)
(declare-const cat_220 potato_22)
(declare-const cat_221 potato_24)
(declare-const cat_222 potato_22)
(declare-const cat_223 potato_24)
(declare-const cat_224 Float64)
(declare-const cat_225 Float64)
(declare-const cat_226 Float64)
(declare-const cat_227 Float32)
(declare-const cat_228 Float32)
(declare-const cat_229 Float64)
(declare-const cat_230 Float32)
(declare-const cat_231 Float32)
(declare-const cat_232 Float64)
(declare-const cat_233 Float64)
(declare-const cat_234 Float64)
(declare-const cat_235 Float64)
(declare-const cat_236 Float64)
(declare-const cat_237 Float64)
(declare-const cat_238 Float64)
(declare-const cat_239 Float64)
(declare-const cat_240 Float64)
(declare-const cat_241 Float64)
(declare-const cat_242 Float64)
(declare-const cat_243 Float64)
(declare-const cat_244 Float64)
(declare-const cat_245 Float64)
(declare-const cat_246 Float64)
(declare-const cat_247 Float64)
(declare-const cat_248 Float64)
(declare-const cat_249 Float64)
(declare-const cat_250 Float64)
(declare-const cat_251 Float64)
(declare-const cat_252 Float64)
(declare-const cat_253 Float64)
(declare-const cat_254 Float64)
(declare-const cat_255 Float64)
(declare-const cat_256 Float64)
(declare-const cat_257 Float64)
(declare-const cat_258 Float64)
(declare-const cat_259 Float64)
(declare-const cat_260 Float64)
(declare-const cat_261 Bool)
(declare-const cat_262 Bool)
(declare-const cat_263 Float64)
(declare-const cat_264 Float64)
(declare-const cat_265 Bool)
(declare-const cat_266 Bool)
(declare-const cat_267 Float32)
(declare-const cat_268 Float32)
(declare-const cat_269 potato_7)
(declare-const cat_270 Bool)
(declare-const cat_271 potato_29)
(declare-const cat_272 potato_28)
(declare-const cat_273 potato_11)
(declare-const cat_274 Float64)
(declare-const cat_275 potato_11)
(declare-const cat_276 Float64)
(declare-const cat_277 potato_11)
(declare-const cat_278 Float64)
(declare-const cat_279 potato_11)
(declare-const cat_280 Float64)
(declare-const cat_281 potato_11)
(declare-const cat_282 Float64)
(declare-const cat_283 potato_11)
(declare-const cat_284 Float64)
(declare-const cat_285 potato_11)
(declare-const cat_286 Float64)
(declare-const cat_287 potato_11)
(declare-const cat_288 Float64)
(declare-const cat_289 potato_11)
(declare-const cat_290 Float64)
(declare-const cat_291 potato_11)
(declare-const cat_292 Float64)
(declare-const cat_293 potato_11)
(declare-const cat_294 Float64)
(declare-const cat_295 potato_11)
(declare-const cat_296 Float64)
(declare-const cat_297 potato_11)
(declare-const cat_298 Float64)
(declare-const cat_299 potato_11)
(declare-const cat_300 Float64)
(declare-const cat_301 potato_11)
(declare-const cat_302 Float64)
(declare-const cat_303 Bool)
(declare-const cat_304 Bool)
(define-fun spoon_305 () potato_11 (mk_potato_11 cat_211))
(assert (= (spoon_118 cat_218) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= (spoon_116 cat_219) (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (= cat_219 cat_220))
(assert (= cat_218 cat_221))
(assert (= cat_222 cat_220))
(assert (= cat_223 cat_221))
(assert (= (mk_potato_30 (mk_potato_28 cat_222 cat_223)) cat_138))
(assert (spoon_108 cat_177))
(assert (spoon_108 cat_179))
(assert (spoon_153 cat_181))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_204)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_205)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_206)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_207)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_208)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_169 cat_209)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_169 cat_210)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (spoon_169 cat_211)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_212)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_213)))
(assert (=> (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_161 cat_214)))
(assert (= cat_267 cat_215))
(assert (= cat_268 (fp #b0 #b00000000 #b00000000000000000000000)))
(assert (spoon_100 cat_268))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_216)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (spoon_3 cat_217)))
(assert (= cat_269 (mk_potato_7 cat_203)))
(assert (= cat_270 (distinct 1 0)))
(assert (= cat_271 (mk_potato_29 (mk_potato_28 cat_201 cat_202))))
(assert (= cat_272 (get_potato_30_a cat_138)))
(assert (= cat_273 (mk_potato_11 cat_206)))
(assert (= cat_274 (fp.mul RNE cat_181 cat_181)))
(assert (and (= cat_224 ((_ to_fp 11 53) RNE (fp.mul RNE cat_177 cat_177))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_177 cat_177)))))
(assert (= cat_275 (mk_potato_11 cat_204)))
(assert (= cat_276 cat_224))
(assert (and (= cat_225 ((_ to_fp 11 53) RNE (fp.mul RNE cat_179 cat_179))) (spoon_3 ((_ to_fp 11 53) RNE (fp.mul RNE cat_179 cat_179)))))
(assert (= cat_277 (mk_potato_11 cat_205)))
(assert (= cat_278 cat_225))
(assert (= cat_279 (mk_potato_11 cat_207)))
(assert (= cat_280 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_181)))
(assert (and (= cat_226 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_274)) (spoon_3 (fp.mul RNE (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000) cat_274))))
(assert (= cat_281 (mk_potato_11 cat_208)))
(assert (= cat_282 cat_226))
(assert (and (= cat_227 (spoon_88 (spoon_116 (get_potato_28_a (get_potato_30_a cat_183))))) (spoon_42 cat_227)))
(assert (and (= cat_228 (spoon_40 cat_227)) (spoon_50 cat_228)))
(assert (= cat_229 ((_ to_fp 11 53) RNE cat_228)))
(assert (= cat_283 (mk_potato_11 cat_209)))
(assert (= cat_284 cat_229))
(assert (and (= cat_230 (spoon_88 (spoon_116 (get_potato_28_a (get_potato_30_a cat_183))))) (spoon_42 cat_230)))
(assert (and (= cat_231 (spoon_58 cat_230)) (spoon_50 cat_231)))
(assert (= cat_232 ((_ to_fp 11 53) RNE cat_231)))
(assert (= cat_285 (mk_potato_11 cat_210)))
(assert (= cat_286 cat_232))
(assert (and (= cat_237 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_179))) (spoon_3 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_179)))))
(assert (= cat_238 (fp.mul RNE cat_237 cat_286)))
(assert (and (= cat_239 cat_238) (spoon_3 cat_238)))
(assert (and (= cat_233 (fp.sub RNE cat_282 cat_276)) (spoon_3 (fp.sub RNE cat_282 cat_276))))
(assert (= cat_234 (fp.sub RNE cat_233 cat_278)))
(assert (and (= cat_235 cat_234) (spoon_3 cat_234)))
(assert (= cat_236 (fp.mul RNE cat_235 cat_284)))
(assert (and (= cat_240 cat_236) (spoon_3 cat_236)))
(assert (= cat_241 (fp.add RNE cat_240 cat_239)))
(assert (and (= cat_242 cat_241) (spoon_3 cat_241)))
(assert (= cat_287 (mk_potato_11 cat_213)))
(assert (= cat_288 cat_242))
(assert (and (= cat_243 (fp.add RNE cat_282 cat_276)) (spoon_3 (fp.add RNE cat_282 cat_276))))
(assert (= cat_244 (fp.add RNE cat_243 cat_278)))
(assert (and (= cat_245 cat_244) (spoon_3 cat_244)))
(assert (= cat_289 (mk_potato_11 cat_214)))
(assert (= cat_290 cat_245))
(assert (and (= cat_246 (fp.div RNE cat_288 cat_290)) (spoon_3 (fp.div RNE cat_288 cat_290))))
(assert (= cat_291 (mk_potato_11 cat_212)))
(assert (= cat_292 cat_246))
(assert (=> (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (= cat_293 spoon_305)))
(assert (=> (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))) (= cat_294 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292) (= cat_295 spoon_305))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292) (= cat_296 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292)) (and (= cat_247 cat_292) (spoon_3 cat_292)))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292)) (= cat_297 spoon_305))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292)) (= cat_298 cat_247))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (=> (not (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) cat_292)) (= cat_296 cat_298))))
(assert (=> (not (fp.lt cat_292 (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))) (= cat_294 cat_296)))
(assert (and (= cat_248 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_177))) (spoon_3 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_177)))))
(assert (= cat_299 (mk_potato_11 cat_216)))
(assert (= cat_300 cat_248))
(assert (and (= cat_253 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_179))) (spoon_3 (fp.mul RNE cat_280 ((_ to_fp 11 53) RNE cat_179)))))
(assert (= cat_254 (fp.mul RNE cat_253 cat_284)))
(assert (and (= cat_255 cat_254) (spoon_3 cat_254)))
(assert (and (= cat_249 (fp.sub RNE cat_282 cat_276)) (spoon_3 (fp.sub RNE cat_282 cat_276))))
(assert (= cat_250 (fp.sub RNE cat_249 cat_278)))
(assert (and (= cat_251 cat_250) (spoon_3 cat_250)))
(assert (= cat_252 (fp.mul RNE cat_251 cat_286)))
(assert (and (= cat_256 cat_252) (spoon_3 cat_252)))
(assert (= cat_257 (fp.sub RNE cat_256 cat_255)))
(assert (and (= cat_258 cat_257) (spoon_3 cat_257)))
(assert (= cat_301 (mk_potato_11 cat_217)))
(assert (= cat_302 cat_258))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302) (and (= cat_264 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_302)) (spoon_3 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_302)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302) (= cat_265 (ite (fp.leq cat_300 cat_264) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302) (and (= cat_263 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_302)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_302)))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302) (= cat_266 (ite (fp.leq cat_263 cat_300) true false))))
(assert (=> (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302) (= cat_304 (ite (= cat_266 true) cat_265 false))))
(assert (=> (not (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) cat_302)) (= cat_304 false)))
(assert (=> (= cat_304 true) (= cat_303 true)))
(assert (=> (not (= cat_304 true)) (=> (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_260 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_302)) (spoon_3 (fp.mul RNE (fp.neg (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000)) cat_302))))))
(assert (=> (not (= cat_304 true)) (=> (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_261 (ite (fp.leq cat_300 cat_260) true false)))))
(assert (=> (not (= cat_304 true)) (=> (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (and (= cat_259 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_302)) (spoon_3 (fp.mul RNE (fp #b0 #b10000001011 #b0110101010000000000000000000000000000000000000000000) cat_302))))))
(assert (=> (not (= cat_304 true)) (=> (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_262 (ite (fp.leq cat_259 cat_300) true false)))))
(assert (=> (not (= cat_304 true)) (=> (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)) (= cat_303 (ite (= cat_262 true) cat_261 false)))))
(assert (=> (not (= cat_304 true)) (=> (not (fp.lt cat_302 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))) (= cat_303 false))))
(assert (= cat_303 true))
(assert (not (spoon_3 (fp.div RNE cat_300 cat_302))))
(check-sat)
(exit)
