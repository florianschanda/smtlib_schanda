(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_23 Bool)) Int (ite (= kitten_23 true) 1 0))
(define-fun spoon_26 ((kitten_24 Int)) Bool (ite (= kitten_24 0) false true))
(define-fun spoon_27 ((kitten_25 Int)) Bool (or (= kitten_25 0) (= kitten_25 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_27 potato_12)) potato_11 (get_potato_12_a kitten_27))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_28 potato_11)) (! (= (spoon_39 (spoon_38 kitten_28)) kitten_28) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 potato_11)) (! (spoon_31 (spoon_38 kitten_29)) :pattern ((spoon_38 kitten_29)))))
(assert (forall ((kitten_30 Float32)) (! (=> (spoon_31 kitten_30) (= (spoon_38 (spoon_39 kitten_30)) kitten_30)) :pattern ((spoon_38 (spoon_39 kitten_30))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_32 potato_15)) potato_13 (get_potato_15_a kitten_32))
(define-fun spoon_42 ((kitten_33 potato_15) (kitten_34 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_34)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_34))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_36 potato_15)) (<= 0 (spoon_46 kitten_36))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_37 potato_16)) potato_15 (get_potato_16_a kitten_37))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_38 Float32)) Bool (and (spoon_1 kitten_38) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_38) (fp.leq kitten_38 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_39 potato_18)) potato_17 (get_potato_18_a kitten_39))
(define-fun spoon_63 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_56 kitten_40)))
(declare-sort potato_19 0)
(define-fun spoon_64 ((kitten_44 Float32)) Bool (and (spoon_1 kitten_44) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_44) (fp.leq kitten_44 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_65 (potato_19 potato_19) Bool)
(declare-fun spoon_66 (Float32) potato_5)
(declare-fun spoon_67 (potato_5) Bool)
(declare-fun spoon_68 (potato_5) Float32)
(declare-const cat_69 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_70 ((kitten_45 potato_20)) potato_19 (get_potato_20_a kitten_45))
(declare-fun spoon_71 (potato_19) Float32)
(declare-fun spoon_72 (Float32) potato_19)
(assert (forall ((kitten_46 potato_19)) (! (= (spoon_72 (spoon_71 kitten_46)) kitten_46) :pattern ((spoon_71 kitten_46)))))
(assert (forall ((kitten_47 potato_19)) (! (spoon_64 (spoon_71 kitten_47)) :pattern ((spoon_71 kitten_47)))))
(assert (forall ((kitten_48 Float32)) (! (=> (spoon_64 kitten_48) (= (spoon_71 (spoon_72 kitten_48)) kitten_48)) :pattern ((spoon_71 (spoon_72 kitten_48))))))
(declare-fun spoon_73 (potato_15 potato_15) Float32)
(declare-fun spoon_74 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_49 potato_15) (kitten_50 potato_15)) (! (spoon_63 (spoon_73 kitten_49 kitten_50) true false true) :pattern ((spoon_73 kitten_49 kitten_50)))))
(declare-const cat_75 potato_15)
(declare-const cat_76 Int)
(declare-const cat_77 potato_15)
(declare-const cat_78 Int)
(declare-const cat_79 potato_15)
(declare-const cat_80 Int)
(declare-const cat_81 potato_15)
(declare-const cat_82 Int)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_19) (get_potato_21_b potato_19)))))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_83 ((kitten_51 potato_22)) potato_21 (get_potato_22_a kitten_51))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21)))))
(define-fun spoon_84 ((kitten_52 potato_23)) potato_21 (get_potato_23_a kitten_52))
(define-fun spoon_85 ((kitten_53 potato_23) (kitten_54 potato_23)) Bool (ite (and (= (spoon_71 (get_potato_21_a (get_potato_23_a kitten_53))) (spoon_71 (get_potato_21_a (get_potato_23_a kitten_54)))) (= (spoon_71 (get_potato_21_b (get_potato_23_a kitten_53))) (spoon_71 (get_potato_21_b (get_potato_23_a kitten_54))))) true false))
(declare-const cat_86 Int)
(declare-fun spoon_87 (potato_23) Int)
(declare-const cat_88 Int)
(declare-fun spoon_89 (potato_23) Int)
(assert (<= 0 cat_86))
(assert (forall ((kitten_55 potato_23)) (<= 0 (spoon_87 kitten_55))))
(assert (<= 0 cat_88))
(assert (forall ((kitten_56 potato_23)) (<= 0 (spoon_89 kitten_56))))
(declare-const cat_90 Int)
(declare-const cat_91 Int)
(declare-const cat_92 Int)
(assert (<= 0 cat_90))
(assert (< cat_90 cat_91))
(assert (<= 0 cat_92))
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(assert (<= 0 cat_93))
(assert (< cat_93 cat_94))
(assert (<= 0 cat_95))
(declare-fun spoon_96 (potato_23 potato_23) Bool)
(declare-const cat_97 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_98 ((kitten_57 potato_24)) potato_23 (get_potato_24_a kitten_57))
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(define-fun spoon_106 ((kitten_58 Float32) (kitten_59 Bool) (kitten_60 Bool) (kitten_61 Bool)) Bool (=> (or (= kitten_59 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_64 kitten_58)))
(define-fun spoon_107 ((kitten_62 Float32) (kitten_63 Bool) (kitten_64 Bool) (kitten_65 Bool)) Bool (=> (or (= kitten_63 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_62)))
(declare-const cat_108 potato_19)
(declare-const cat_109 potato_19)
(declare-const cat_110 potato_19)
(declare-const cat_111 potato_19)
(declare-const cat_112 Float32)
(declare-const cat_113 Float32)
(declare-const cat_114 Bool)
(declare-const cat_115 potato_19)
(declare-const cat_116 potato_19)
(declare-const cat_117 potato_19)
(declare-const cat_118 potato_19)
(declare-const cat_119 potato_19)
(declare-const cat_120 potato_19)
(declare-const cat_121 potato_19)
(declare-const cat_122 potato_19)
(declare-const cat_123 potato_19)
(declare-const cat_124 potato_19)
(declare-const cat_125 potato_19)
(declare-const cat_126 potato_19)
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 Bool)
(declare-const cat_130 Bool)
(declare-const cat_131 potato_19)
(declare-const cat_132 potato_19)
(declare-const cat_133 potato_19)
(declare-const cat_134 potato_19)
(declare-const cat_135 potato_22)
(declare-const cat_136 potato_21)
(declare-const cat_137 potato_10)
(declare-const cat_138 Float32)
(declare-const cat_139 potato_10)
(declare-const cat_140 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_112)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_113)))
(assert (= cat_129 cat_114))
(assert (= cat_130 (spoon_26 0)))
(assert (= (spoon_71 cat_115) (fp.sub RNE (spoon_38 (get_potato_13_b (get_potato_15_a cat_75))) (spoon_38 (get_potato_13_b (get_potato_15_a cat_77))))))
(assert (= (spoon_71 cat_116) (fp.sub RNE (spoon_38 (get_potato_13_a (get_potato_15_a cat_75))) (spoon_38 (get_potato_13_a (get_potato_15_a cat_77))))))
(assert (= cat_116 cat_117))
(assert (= cat_115 cat_118))
(assert (= cat_119 cat_117))
(assert (= cat_120 cat_118))
(assert (= cat_131 cat_108))
(assert (= cat_132 cat_109))
(assert (= cat_133 cat_119))
(assert (= cat_134 cat_120))
(assert (= (spoon_71 cat_121) (fp.sub RNE (spoon_38 (get_potato_13_b (get_potato_15_a cat_79))) (spoon_38 (get_potato_13_b (get_potato_15_a cat_77))))))
(assert (= (spoon_71 cat_122) (fp.sub RNE (spoon_38 (get_potato_13_a (get_potato_15_a cat_79))) (spoon_38 (get_potato_13_a (get_potato_15_a cat_77))))))
(assert (= cat_122 cat_123))
(assert (= cat_121 cat_124))
(assert (= cat_125 cat_123))
(assert (= cat_126 cat_124))
(assert (= cat_135 (mk_potato_22 (mk_potato_21 cat_110 cat_111))))
(assert (= cat_136 (mk_potato_21 cat_125 cat_126)))
(assert (and (= cat_127 (spoon_73 cat_77 cat_75)) (spoon_56 cat_127)))
(assert (= cat_137 (mk_potato_10 cat_112)))
(assert (= cat_138 cat_127))
(assert (and (= cat_128 (spoon_73 cat_77 cat_79)) (spoon_56 cat_128)))
(assert (= cat_139 (mk_potato_10 cat_113)))
(assert (= cat_140 cat_128))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_138))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_140))
(assert (not (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_140)))
(check-sat)
(exit)
