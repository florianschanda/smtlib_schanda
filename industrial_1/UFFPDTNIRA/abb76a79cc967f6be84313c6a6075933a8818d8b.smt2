(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-const cat_13 Int)
(define-fun spoon_14 ((kitten_10 Int)) Bool (and (<= (- cat_13) kitten_10) (<= kitten_10 cat_13)))
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_16 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_17 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_18 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_16 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_17 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_19 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_20 (Real) Real)
(define-fun spoon_21 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_22 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_23 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_24 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_25 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_26 (Bool) potato_5)
(declare-fun spoon_27 (potato_5) Bool)
(declare-fun spoon_28 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_29 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_30 (potato_11 potato_11) Bool)
(declare-fun spoon_31 (Float32) potato_5)
(declare-fun spoon_32 (potato_5) Bool)
(declare-fun spoon_33 (potato_5) Float32)
(declare-const cat_34 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_35 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-fun spoon_36 (potato_11) Float32)
(declare-fun spoon_37 (Float32) potato_11)
(assert (forall ((kitten_27 potato_11)) (! (= (spoon_37 (spoon_36 kitten_27)) kitten_27) :pattern ((spoon_36 kitten_27)))))
(assert (forall ((kitten_28 potato_11)) (! (spoon_29 (spoon_36 kitten_28)) :pattern ((spoon_36 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_29 kitten_29) (= (spoon_36 (spoon_37 kitten_29)) kitten_29)) :pattern ((spoon_36 (spoon_37 kitten_29))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_38 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_39 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_40 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (ite (and (= (spoon_36 (get_potato_13_a (get_potato_15_a kitten_32))) (spoon_36 (get_potato_13_a (get_potato_15_a kitten_33)))) (= (spoon_36 (get_potato_13_b (get_potato_15_a kitten_32))) (spoon_36 (get_potato_13_b (get_potato_15_a kitten_33))))) true false))
(declare-const cat_41 Int)
(declare-fun spoon_42 (potato_15) Int)
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(assert (<= 0 cat_41))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_42 kitten_34))))
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-fun spoon_51 (potato_15 potato_15) Bool)
(declare-const cat_52 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_53 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-sort potato_17 0)
(define-fun spoon_54 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_55 (potato_17 potato_17) Bool)
(declare-fun spoon_56 (Float32) potato_5)
(declare-fun spoon_57 (potato_5) Bool)
(declare-fun spoon_58 (potato_5) Float32)
(declare-const cat_59 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_60 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_61 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_54 kitten_39)))
(declare-sort potato_19 0)
(define-fun spoon_62 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001100 #b00000000000000000000000)))))
(declare-fun spoon_63 (potato_19 potato_19) Bool)
(declare-fun spoon_64 (Float32) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Float32)
(declare-const cat_67 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_68 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(declare-fun spoon_69 (potato_19) Float32)
(declare-fun spoon_70 (Float32) potato_19)
(assert (forall ((kitten_45 potato_19)) (! (= (spoon_70 (spoon_69 kitten_45)) kitten_45) :pattern ((spoon_69 kitten_45)))))
(assert (forall ((kitten_46 potato_19)) (! (spoon_62 (spoon_69 kitten_46)) :pattern ((spoon_69 kitten_46)))))
(assert (forall ((kitten_47 Float32)) (! (=> (spoon_62 kitten_47) (= (spoon_69 (spoon_70 kitten_47)) kitten_47)) :pattern ((spoon_69 (spoon_70 kitten_47))))))
(declare-fun spoon_71 (potato_15 potato_15) Float32)
(declare-fun spoon_72 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_48 potato_15) (kitten_49 potato_15)) (! (spoon_61 (spoon_71 kitten_48 kitten_49) true false true) :pattern ((spoon_71 kitten_48 kitten_49)))))
(declare-const cat_73 potato_15)
(declare-const cat_74 Int)
(declare-const cat_75 potato_15)
(declare-const cat_76 Int)
(declare-const cat_77 potato_15)
(declare-const cat_78 Int)
(declare-const cat_79 potato_15)
(declare-const cat_80 Int)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_19) (get_potato_21_b potato_19)))))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_81 ((kitten_50 potato_22)) potato_21 (get_potato_22_a kitten_50))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21)))))
(define-fun spoon_82 ((kitten_51 potato_23)) potato_21 (get_potato_23_a kitten_51))
(define-fun spoon_83 ((kitten_52 potato_23) (kitten_53 potato_23)) Bool (ite (and (= (spoon_69 (get_potato_21_a (get_potato_23_a kitten_52))) (spoon_69 (get_potato_21_a (get_potato_23_a kitten_53)))) (= (spoon_69 (get_potato_21_b (get_potato_23_a kitten_52))) (spoon_69 (get_potato_21_b (get_potato_23_a kitten_53))))) true false))
(declare-const cat_84 Int)
(declare-fun spoon_85 (potato_23) Int)
(declare-const cat_86 Int)
(declare-fun spoon_87 (potato_23) Int)
(assert (<= 0 cat_84))
(assert (forall ((kitten_54 potato_23)) (<= 0 (spoon_85 kitten_54))))
(assert (<= 0 cat_86))
(assert (forall ((kitten_55 potato_23)) (<= 0 (spoon_87 kitten_55))))
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(declare-const cat_90 Int)
(assert (<= 0 cat_88))
(assert (< cat_88 cat_89))
(assert (<= 0 cat_90))
(declare-const cat_91 Int)
(declare-const cat_92 Int)
(declare-const cat_93 Int)
(assert (<= 0 cat_91))
(assert (< cat_91 cat_92))
(assert (<= 0 cat_93))
(declare-fun spoon_94 (potato_23 potato_23) Bool)
(declare-const cat_95 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_96 ((kitten_56 potato_24)) potato_23 (get_potato_24_a kitten_56))
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(define-fun spoon_104 ((kitten_57 Float32) (kitten_58 Bool) (kitten_59 Bool) (kitten_60 Bool)) Bool (=> (or (= kitten_58 true) (fp.leq (fp.neg (fp #b0 #b10001100 #b00000000000000000000000)) (fp #b0 #b10001100 #b00000000000000000000000))) (spoon_62 kitten_57)))
(define-fun spoon_105 ((kitten_61 Float32) (kitten_62 Bool) (kitten_63 Bool) (kitten_64 Bool)) Bool (=> (or (= kitten_62 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_61)))
(declare-const cat_106 potato_19)
(declare-const cat_107 potato_19)
(declare-const cat_108 potato_19)
(declare-const cat_109 potato_19)
(declare-const cat_110 Float32)
(declare-const cat_111 Float32)
(declare-const cat_112 Bool)
(declare-const cat_113 potato_19)
(declare-const cat_114 potato_19)
(declare-const cat_115 potato_19)
(declare-const cat_116 potato_19)
(declare-const cat_117 potato_19)
(declare-const cat_118 potato_19)
(declare-const cat_119 potato_19)
(declare-const cat_120 potato_19)
(declare-const cat_121 potato_19)
(declare-const cat_122 potato_19)
(declare-const cat_123 potato_19)
(declare-const cat_124 potato_19)
(declare-const cat_125 Float32)
(declare-const cat_126 Float32)
(declare-const cat_127 Bool)
(declare-const cat_128 Bool)
(declare-const cat_129 potato_19)
(declare-const cat_130 potato_19)
(declare-const cat_131 potato_19)
(declare-const cat_132 potato_19)
(declare-const cat_133 potato_22)
(declare-const cat_134 potato_21)
(declare-const cat_135 potato_10)
(declare-const cat_136 Float32)
(declare-const cat_137 potato_10)
(declare-const cat_138 Float32)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_54 cat_110)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_54 cat_111)))
(assert (= cat_127 cat_112))
(assert (= cat_128 (spoon_24 0)))
(assert (= (spoon_69 cat_113) (fp.sub RNE (spoon_36 (get_potato_13_b (get_potato_15_a cat_73))) (spoon_36 (get_potato_13_b (get_potato_15_a cat_75))))))
(assert (= (spoon_69 cat_114) (fp.sub RNE (spoon_36 (get_potato_13_a (get_potato_15_a cat_73))) (spoon_36 (get_potato_13_a (get_potato_15_a cat_75))))))
(assert (= cat_114 cat_115))
(assert (= cat_113 cat_116))
(assert (= cat_117 cat_115))
(assert (= cat_118 cat_116))
(assert (= cat_129 cat_106))
(assert (= cat_130 cat_107))
(assert (= cat_131 cat_117))
(assert (= cat_132 cat_118))
(assert (= (spoon_69 cat_119) (fp.sub RNE (spoon_36 (get_potato_13_b (get_potato_15_a cat_77))) (spoon_36 (get_potato_13_b (get_potato_15_a cat_75))))))
(assert (= (spoon_69 cat_120) (fp.sub RNE (spoon_36 (get_potato_13_a (get_potato_15_a cat_77))) (spoon_36 (get_potato_13_a (get_potato_15_a cat_75))))))
(assert (= cat_120 cat_121))
(assert (= cat_119 cat_122))
(assert (= cat_123 cat_121))
(assert (= cat_124 cat_122))
(assert (= cat_133 (mk_potato_22 (mk_potato_21 cat_108 cat_109))))
(assert (= cat_134 (mk_potato_21 cat_123 cat_124)))
(assert (and (= cat_125 (spoon_71 cat_75 cat_73)) (spoon_54 cat_125)))
(assert (= cat_135 (mk_potato_10 cat_110)))
(assert (= cat_136 cat_125))
(assert (and (= cat_126 (spoon_71 cat_75 cat_77)) (spoon_54 cat_126)))
(assert (= cat_137 (mk_potato_10 cat_111)))
(assert (= cat_138 cat_126))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_136))
(assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_138))
(assert (not (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) cat_138)))
(check-sat)
(exit)
