(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_25 ((kitten_22 Float32)) Bool (and (spoon_1 kitten_22) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_22) (fp.leq kitten_22 (fp #b0 #b10010011 #b00000001101101110000000)))))
(declare-fun spoon_26 (potato_11 potato_11) Bool)
(declare-fun spoon_27 (Float32) potato_5)
(declare-fun spoon_28 (potato_5) Bool)
(declare-fun spoon_29 (potato_5) Float32)
(declare-const cat_30 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_31 ((kitten_23 potato_12)) potato_11 (get_potato_12_a kitten_23))
(define-fun spoon_32 ((kitten_24 Float32) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool)) Bool (=> (or (= kitten_25 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_25 kitten_24)))
(declare-const cat_33 Float32)
(declare-const cat_34 Int)
(declare-const cat_35 Float32)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Float32)
(declare-const cat_39 Float32)
(declare-const cat_40 Float32)
(declare-const cat_41 Float32)
(declare-const cat_42 Float32)
(declare-const cat_43 Float32)
(declare-const cat_44 Float32)
(declare-const cat_45 Float32)
(declare-const cat_46 Float32)
(declare-const cat_47 Float32)
(declare-const cat_48 Float32)
(declare-const cat_49 Float32)
(declare-const cat_50 Float32)
(declare-const cat_51 Float32)
(declare-const cat_52 Float32)
(declare-const cat_53 Float32)
(assert (spoon_25 cat_33))
(assert (spoon_25 cat_35))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_25 cat_38)))
(assert (=> (fp.lt cat_33 cat_35) (= cat_41 cat_38)))
(assert (=> (fp.lt cat_33 cat_35) (= cat_42 (fp #b0 #b00000000 #b00000000000000000000000))))
(assert (=> (not (fp.lt cat_33 cat_35)) (and (= cat_40 (fp.sub RNE cat_33 cat_35)) (spoon_1 (fp.sub RNE cat_33 cat_35)))))
(assert (=> (not (fp.lt cat_33 cat_35)) (= cat_43 cat_38)))
(assert (=> (not (fp.lt cat_33 cat_35)) (= cat_44 cat_40)))
(assert (=> (not (fp.lt cat_33 cat_35)) (= cat_42 cat_44)))
(assert (= cat_46 cat_47))
(assert (= cat_48 cat_46))
(assert (= cat_45 cat_39))
(assert (= cat_46 cat_42))
(assert (= (mk_potato_10 cat_50) (mk_potato_10 cat_47)))
(assert (= cat_49 cat_42))
(assert (= cat_52 cat_48))
(assert (= cat_51 cat_42))
(assert (= cat_53 cat_50))
(assert (not (fp.eq cat_50 (fp.max (fp #b0 #b00000000 #b00000000000000000000000) (fp.sub RNE cat_33 cat_35)))))
(check-sat)
(exit)
