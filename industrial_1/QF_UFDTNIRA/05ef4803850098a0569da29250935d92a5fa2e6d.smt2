(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic QF_UFDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-const cat_2 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(declare-sort potato_10 0)
(define-fun spoon_7 ((kitten_5 Int)) Bool (and (<= 0 kitten_5) (<= kitten_5 999)))
(declare-fun spoon_8 (Int) potato_5)
(declare-fun spoon_9 (potato_5) Bool)
(declare-fun spoon_10 (potato_5) Int)
(declare-fun spoon_11 (potato_10 potato_10) Bool)
(declare-const cat_12 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_13 ((kitten_6 potato_11)) potato_10 (get_potato_11_a kitten_6))
(declare-sort potato_12 0)
(define-fun spoon_14 ((kitten_7 Int)) Bool (and (<= 0 kitten_7) (<= kitten_7 99)))
(declare-fun spoon_15 (Int) potato_5)
(declare-fun spoon_16 (potato_5) Bool)
(declare-fun spoon_17 (potato_5) Int)
(declare-fun spoon_18 (potato_12 potato_12) Bool)
(declare-const cat_19 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_20 ((kitten_8 potato_13)) potato_12 (get_potato_13_a kitten_8))
(define-fun spoon_21 ((kitten_9 Int) (kitten_10 Bool) (kitten_11 Bool) (kitten_12 Bool)) Bool (=> (or (= kitten_10 true) (<= 0 99)) (spoon_14 kitten_9)))
(declare-const cat_22 Int)
(declare-const cat_23 Int)
(declare-sort potato_14 0)
(define-fun spoon_24 ((kitten_13 Int)) Bool (and (<= (- 32768) kitten_13) (<= kitten_13 32767)))
(declare-fun spoon_25 (Int) potato_5)
(declare-fun spoon_26 (potato_5) Bool)
(declare-fun spoon_27 (potato_5) Int)
(declare-fun spoon_28 (potato_14 potato_14) Bool)
(declare-const cat_29 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_30 ((kitten_14 potato_15)) potato_14 (get_potato_15_a kitten_14))
(define-fun spoon_31 ((kitten_15 Int) (kitten_16 Bool) (kitten_17 Bool) (kitten_18 Bool)) Bool (=> (or (= kitten_16 true) (<= 0 999)) (spoon_7 kitten_15)))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(assert (spoon_14 cat_22))
(assert (and (= cat_33 (* cat_22 10)) (spoon_24 (* cat_22 10))))
(assert (not (spoon_7 cat_33)))
(check-sat)
(exit)
