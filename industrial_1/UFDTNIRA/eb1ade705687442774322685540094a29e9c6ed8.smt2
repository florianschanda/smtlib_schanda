(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-const cat_2 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(declare-fun spoon_7 (Int Int) Int)
(declare-fun spoon_8 (Int Int) Int)
(assert (forall ((kitten_5 Int) (kitten_6 Int)) (=> (not (= kitten_6 0)) (= kitten_5 (+ (* kitten_6 (spoon_7 kitten_5 kitten_6)) (spoon_8 kitten_5 kitten_6))))))
(assert (forall ((kitten_7 Int) (kitten_8 Int)) (=> (and (<= 0 kitten_7) (< 0 kitten_8)) (and (<= 0 (spoon_7 kitten_7 kitten_8)) (<= (spoon_7 kitten_7 kitten_8) kitten_7)))))
(assert (forall ((kitten_9 Int) (kitten_10 Int)) (=> (not (= kitten_10 0)) (and (< (- (abs kitten_10)) (spoon_8 kitten_9 kitten_10)) (< (spoon_8 kitten_9 kitten_10) (abs kitten_10))))))
(assert (forall ((kitten_11 Int) (kitten_12 Int)) (=> (and (<= 0 kitten_11) (< 0 kitten_12)) (<= 0 (spoon_7 kitten_11 kitten_12)))))
(assert (forall ((kitten_13 Int) (kitten_14 Int)) (=> (and (<= kitten_13 0) (< 0 kitten_14)) (<= (spoon_7 kitten_13 kitten_14) 0))))
(assert (forall ((kitten_15 Int) (kitten_16 Int)) (=> (and (<= 0 kitten_15) (not (= kitten_16 0))) (<= 0 (spoon_8 kitten_15 kitten_16)))))
(assert (forall ((kitten_17 Int) (kitten_18 Int)) (=> (and (<= kitten_17 0) (not (= kitten_18 0))) (<= (spoon_8 kitten_17 kitten_18) 0))))
(assert (forall ((kitten_19 Int) (kitten_20 Int)) (=> (not (= kitten_20 0)) (<= (abs (* (spoon_7 kitten_19 kitten_20) kitten_20)) (abs kitten_19)))))
(assert (forall ((kitten_21 Int)) (= (spoon_7 kitten_21 1) kitten_21)))
(assert (forall ((kitten_22 Int)) (= (spoon_8 kitten_22 1) 0)))
(assert (forall ((kitten_23 Int) (kitten_24 Int)) (=> (and (<= 0 kitten_23) (< kitten_23 kitten_24)) (= (spoon_7 kitten_23 kitten_24) 0))))
(assert (forall ((kitten_25 Int) (kitten_26 Int)) (=> (and (<= 0 kitten_25) (< kitten_25 kitten_26)) (= (spoon_8 kitten_25 kitten_26) kitten_25))))
(assert (forall ((kitten_27 Int) (kitten_28 Int) (kitten_29 Int)) (! (=> (and (< 0 kitten_27) (and (<= 0 kitten_28) (<= 0 kitten_29))) (= (spoon_7 (+ (* kitten_27 kitten_28) kitten_29) kitten_27) (+ kitten_28 (spoon_7 kitten_29 kitten_27)))) :pattern ((spoon_7 (+ (* kitten_27 kitten_28) kitten_29) kitten_27)))))
(assert (forall ((kitten_30 Int) (kitten_31 Int) (kitten_32 Int)) (! (=> (and (< 0 kitten_30) (and (<= 0 kitten_31) (<= 0 kitten_32))) (= (spoon_8 (+ (* kitten_30 kitten_31) kitten_32) kitten_30) (spoon_8 kitten_32 kitten_30))) :pattern ((spoon_8 (+ (* kitten_30 kitten_31) kitten_32) kitten_30)))))
(define-fun spoon_9 ((kitten_33 Int) (kitten_34 Int)) Int (ite (< 0 kitten_34) (mod kitten_33 kitten_34) (+ (mod kitten_33 kitten_34) kitten_34)))
(declare-sort potato_10 0)
(define-fun spoon_10 ((kitten_35 Int)) Bool (and (<= 0 kitten_35) (<= kitten_35 150000)))
(declare-fun spoon_11 (Int) potato_5)
(declare-fun spoon_12 (potato_5) Bool)
(declare-fun spoon_13 (potato_5) Int)
(declare-fun spoon_14 (potato_10 potato_10) Bool)
(declare-const cat_15 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_16 ((kitten_36 potato_11)) potato_10 (get_potato_11_a kitten_36))
(declare-fun spoon_17 (potato_10) Int)
(declare-fun spoon_18 (Int) potato_10)
(assert (forall ((kitten_37 potato_10)) (! (= (spoon_18 (spoon_17 kitten_37)) kitten_37) :pattern ((spoon_17 kitten_37)))))
(assert (forall ((kitten_38 potato_10)) (! (spoon_10 (spoon_17 kitten_38)) :pattern ((spoon_17 kitten_38)))))
(assert (forall ((kitten_39 Int)) (! (=> (spoon_10 kitten_39) (= (spoon_17 (spoon_18 kitten_39)) kitten_39)) :pattern ((spoon_17 (spoon_18 kitten_39))))))
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_10) (get_potato_12_b potato_10)))))
(define-fun spoon_19 ((kitten_40 potato_12)) potato_10 (get_potato_12_a kitten_40))
(define-fun spoon_20 ((kitten_41 potato_12)) potato_10 (get_potato_12_b kitten_41))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_21 ((kitten_42 potato_13)) potato_12 (get_potato_13_a kitten_42))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_12)))))
(define-fun spoon_22 ((kitten_43 potato_14)) potato_12 (get_potato_14_a kitten_43))
(define-fun spoon_23 ((kitten_44 potato_14) (kitten_45 potato_14)) Bool (ite (and (= (spoon_17 (get_potato_12_a (get_potato_14_a kitten_44))) (spoon_17 (get_potato_12_a (get_potato_14_a kitten_45)))) (= (spoon_17 (get_potato_12_b (get_potato_14_a kitten_44))) (spoon_17 (get_potato_12_b (get_potato_14_a kitten_45))))) true false))
(declare-const cat_24 Int)
(declare-fun spoon_25 (potato_14) Int)
(declare-const cat_26 Int)
(declare-fun spoon_27 (potato_14) Int)
(assert (<= 0 cat_24))
(assert (forall ((kitten_46 potato_14)) (<= 0 (spoon_25 kitten_46))))
(assert (<= 0 cat_26))
(assert (forall ((kitten_47 potato_14)) (<= 0 (spoon_27 kitten_47))))
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(assert (<= 0 cat_28))
(assert (< cat_28 cat_29))
(assert (<= 0 cat_30))
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (<= 0 cat_31))
(assert (< cat_31 cat_32))
(assert (<= 0 cat_33))
(declare-fun spoon_34 (potato_14 potato_14) Bool)
(declare-const cat_35 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_36 ((kitten_48 potato_15)) potato_14 (get_potato_15_a kitten_48))
(declare-sort potato_16 0)
(define-fun spoon_37 ((kitten_49 Int)) Bool (and (<= 0 kitten_49) (<= kitten_49 999)))
(declare-fun spoon_38 (Int) potato_5)
(declare-fun spoon_39 (potato_5) Bool)
(declare-fun spoon_40 (potato_5) Int)
(declare-fun spoon_41 (potato_16 potato_16) Bool)
(declare-const cat_42 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_43 ((kitten_50 potato_17)) potato_16 (get_potato_17_a kitten_50))
(declare-fun spoon_44 (potato_16) Int)
(declare-fun spoon_45 (Int) potato_16)
(assert (forall ((kitten_51 potato_16)) (! (= (spoon_45 (spoon_44 kitten_51)) kitten_51) :pattern ((spoon_44 kitten_51)))))
(assert (forall ((kitten_52 potato_16)) (! (spoon_37 (spoon_44 kitten_52)) :pattern ((spoon_44 kitten_52)))))
(assert (forall ((kitten_53 Int)) (! (=> (spoon_37 kitten_53) (= (spoon_44 (spoon_45 kitten_53)) kitten_53)) :pattern ((spoon_44 (spoon_45 kitten_53))))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_16) (get_potato_18_b potato_16)))))
(define-fun spoon_46 ((kitten_54 potato_18)) potato_16 (get_potato_18_a kitten_54))
(define-fun spoon_47 ((kitten_55 potato_18)) potato_16 (get_potato_18_b kitten_55))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_18)))))
(define-fun spoon_48 ((kitten_56 potato_19)) potato_18 (get_potato_19_a kitten_56))
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_18)))))
(define-fun spoon_49 ((kitten_57 potato_20)) potato_18 (get_potato_20_a kitten_57))
(define-fun spoon_50 ((kitten_58 potato_20) (kitten_59 potato_20)) Bool (ite (and (= (spoon_44 (get_potato_18_a (get_potato_20_a kitten_58))) (spoon_44 (get_potato_18_a (get_potato_20_a kitten_59)))) (= (spoon_44 (get_potato_18_b (get_potato_20_a kitten_58))) (spoon_44 (get_potato_18_b (get_potato_20_a kitten_59))))) true false))
(declare-const cat_51 Int)
(declare-fun spoon_52 (potato_20) Int)
(declare-const cat_53 Int)
(declare-fun spoon_54 (potato_20) Int)
(assert (<= 0 cat_51))
(assert (forall ((kitten_60 potato_20)) (<= 0 (spoon_52 kitten_60))))
(assert (<= 0 cat_53))
(assert (forall ((kitten_61 potato_20)) (<= 0 (spoon_54 kitten_61))))
(declare-const cat_55 Int)
(declare-const cat_56 Int)
(declare-const cat_57 Int)
(assert (<= 0 cat_55))
(assert (< cat_55 cat_56))
(assert (<= 0 cat_57))
(declare-const cat_58 Int)
(declare-const cat_59 Int)
(declare-const cat_60 Int)
(assert (<= 0 cat_58))
(assert (< cat_58 cat_59))
(assert (<= 0 cat_60))
(declare-fun spoon_61 (potato_20 potato_20) Bool)
(declare-const cat_62 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_63 ((kitten_62 potato_21)) potato_20 (get_potato_21_a kitten_62))
(declare-const cat_64 potato_14)
(declare-const cat_65 Int)
(declare-const cat_66 Int)
(define-fun spoon_67 ((kitten_63 Int) (kitten_64 Bool) (kitten_65 Bool) (kitten_66 Bool)) Bool (=> (or (= kitten_64 true) (<= 0 150000)) (spoon_10 kitten_63)))
(define-fun spoon_68 ((kitten_67 Int) (kitten_68 Bool) (kitten_69 Bool) (kitten_70 Bool)) Bool (=> (or (= kitten_68 true) (<= 0 999)) (spoon_37 kitten_67)))
(declare-const cat_69 potato_10)
(declare-const cat_70 potato_10)
(declare-const cat_71 potato_10)
(declare-const cat_72 potato_10)
(declare-const cat_73 potato_10)
(declare-const cat_74 potato_10)
(declare-const cat_75 potato_10)
(declare-const cat_76 potato_10)
(declare-const cat_77 potato_10)
(declare-const cat_78 potato_10)
(declare-const cat_79 potato_10)
(declare-const cat_80 potato_10)
(declare-const cat_81 potato_10)
(declare-const cat_82 potato_10)
(declare-const cat_83 potato_10)
(declare-const cat_84 potato_10)
(declare-const cat_85 potato_10)
(declare-const cat_86 potato_10)
(declare-const cat_87 potato_10)
(declare-const cat_88 potato_10)
(declare-const cat_89 potato_10)
(declare-const cat_90 potato_10)
(declare-const cat_91 potato_10)
(declare-const cat_92 potato_10)
(define-fun spoon_93 () potato_12 (mk_potato_12 cat_87 cat_88))
(define-fun spoon_94 () potato_12 (mk_potato_12 cat_83 cat_84))
(assert (= cat_81 cat_69))
(assert (= cat_82 cat_70))
(assert (= spoon_94 (get_potato_14_a cat_64)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= (spoon_17 cat_71) 99801)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_71 cat_72)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_84 cat_73)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_74 cat_72)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_75 cat_73)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_85 cat_83)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_86 cat_84)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_74 cat_87)))
(assert (=> (< 99801 (spoon_17 cat_83)) (= cat_75 cat_88)))
(assert (=> (not (< 99801 (spoon_17 cat_83))) (= spoon_93 spoon_94)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= (spoon_17 cat_76) 99900)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_87 cat_77)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_76 cat_78)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_79 cat_77)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_80 cat_78)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_89 cat_87)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_90 cat_88)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_79 cat_91)))
(assert (=> (< 99900 (spoon_17 cat_88)) (= cat_80 cat_92)))
(assert (=> (not (< 99900 (spoon_17 cat_88))) (= (mk_potato_12 cat_91 cat_92) spoon_93)))
(assert (not (not (= 100 0))))
(check-sat)
(exit)
