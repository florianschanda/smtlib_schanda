;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFDTNIRA)

(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-fun cat_2 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(declare-fun spoon_7 (Int) Int)
(declare-fun spoon_8 (Int Int) Bool)
(declare-sort potato_10 0)
(declare-fun spoon_9 (potato_10) Int)
(assert (forall ((kitten_5 potato_10)) (let ((_let_0 (spoon_9 kitten_5))) (and (<= 0 _let_0) (<= _let_0 150000))) ))
(define-fun spoon_10 ((kitten_6 Int)) Bool (and (<= 0 kitten_6) (<= kitten_6 150000)))
(declare-fun spoon_11 (Int) potato_5)
(declare-fun spoon_12 (potato_5) Bool)
(declare-fun spoon_13 (potato_5) Int)
(declare-fun spoon_14 (potato_10 potato_10) Bool)
(declare-fun cat_15 () potato_10)
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a potato_10)))))

(define-fun spoon_16 ((kitten_7 potato_11)) potato_10 (get_potato_11_a kitten_7))
(define-fun spoon_17 ((kitten_8 Int) (kitten_9 Bool) (kitten_10 Bool) (kitten_11 Bool) (kitten_12 Bool)) Bool (=> (or (= kitten_9 true) (<= 0 150000)) (spoon_10 kitten_8)))
(declare-sort potato_12 0)
(declare-fun spoon_18 (potato_12) Int)
(assert (forall ((kitten_13 potato_12)) (let ((_let_0 (spoon_18 kitten_13))) (and (<= 0 _let_0) (<= _let_0 999))) ))
(define-fun spoon_19 ((kitten_14 Int)) Bool (and (<= 0 kitten_14) (<= kitten_14 999)))
(declare-fun spoon_20 (Int) potato_5)
(declare-fun spoon_21 (potato_5) Bool)
(declare-fun spoon_22 (potato_5) Int)
(declare-fun spoon_23 (potato_12 potato_12) Bool)
(declare-fun cat_24 () potato_12)
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_25 ((kitten_15 potato_13)) potato_12 (get_potato_13_a kitten_15))
(define-fun spoon_26 ((kitten_16 Int) (kitten_17 Bool) (kitten_18 Bool) (kitten_19 Bool) (kitten_20 Bool)) Bool (=> (or (= kitten_17 true) (<= 0 999)) (spoon_19 kitten_16)))
(assert (forall ((kitten_21 Int)) (! (=> (spoon_26 kitten_21 true true true true) (spoon_17 (spoon_7 kitten_21) true false true true)) :pattern ((spoon_7 kitten_21)))))
(assert (forall ((kitten_22 Int)) (! (=> (spoon_26 kitten_22 true true true true) (= (spoon_7 kitten_22) (* kitten_22 100))) :pattern ((spoon_7 kitten_22)))))
(declare-sort potato_14 0)
(declare-fun spoon_27 (potato_14) Int)
(assert (forall ((kitten_23 potato_14)) (let ((_let_0 (spoon_27 kitten_23))) (and (<= (- 2147483648) _let_0) (<= _let_0 2147483647))) ))
(define-fun spoon_28 ((kitten_24 Int)) Bool (and (<= (- 2147483648) kitten_24) (<= kitten_24 2147483647)))
(declare-fun spoon_29 (Int) potato_5)
(declare-fun spoon_30 (potato_5) Bool)
(declare-fun spoon_31 (potato_5) Int)
(declare-fun spoon_32 (potato_14 potato_14) Bool)
(declare-fun cat_33 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_34 ((kitten_25 potato_15)) potato_14 (get_potato_15_a kitten_25))
(declare-sort potato_16 0)
(declare-fun spoon_35 (potato_16) Int)
(assert (forall ((kitten_26 potato_16)) (let ((_let_0 (spoon_35 kitten_26))) (and (<= 0 _let_0) (<= _let_0 500000))) ))
(define-fun spoon_36 ((kitten_27 Int)) Bool (and (<= 0 kitten_27) (<= kitten_27 500000)))
(declare-fun spoon_37 (Int) potato_5)
(declare-fun spoon_38 (potato_5) Bool)
(declare-fun spoon_39 (potato_5) Int)
(declare-fun spoon_40 (potato_16 potato_16) Bool)
(declare-fun cat_41 () potato_16)
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_16)))))

(define-fun spoon_42 ((kitten_28 potato_17)) potato_16 (get_potato_17_a kitten_28))
(declare-fun cat_43 () Int)
(declare-fun cat_44 () Int)
(declare-fun cat_45 () Int)
(declare-fun cat_46 () Int)
(define-fun spoon_47 ((kitten_29 Int) (kitten_30 Bool) (kitten_31 Bool) (kitten_32 Bool) (kitten_33 Bool)) Bool (=> (or (= kitten_30 true) (<= 0 500000)) (spoon_36 kitten_29)))
(declare-fun cat_48 () Int)
(declare-fun cat_49 () Int)
(declare-fun cat_50 () Int)
(declare-fun cat_51 () Int)
(assert (spoon_19 cat_43))
(assert (spoon_10 cat_45))
(assert (= cat_48 (spoon_7 cat_43)))
(assert (spoon_10 cat_48))
(assert (= cat_48 (* cat_43 100)))
(assert (= cat_49 (- cat_48 cat_45)))
(assert (= cat_50 (abs cat_49)))
(assert (= cat_51 cat_50))
(assert (spoon_28 cat_50))
(assert (not (spoon_36 cat_51)))
(check-sat)
(exit)
