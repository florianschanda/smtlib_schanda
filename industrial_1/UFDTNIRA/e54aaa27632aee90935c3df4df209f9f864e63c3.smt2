;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFDTNIRA)

(define-fun spoon_1 ((kitten_1 Int) (kitten_2 Int)) Int (ite (>= kitten_1 0) (div kitten_1 kitten_2) (- (div (- kitten_1) kitten_2))))
(define-fun spoon_2 ((kitten_3 Int) (kitten_4 Int)) Int (ite (>= kitten_3 0) (mod kitten_3 kitten_4) (- (mod (- kitten_3) kitten_4))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_6 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_7 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_8 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(define-fun spoon_9 ((kitten_9 Int) (kitten_10 Int)) Int (let ((_let_0 (mod kitten_9 kitten_10))) (ite (< 0 kitten_10) _let_0 (+ _let_0 kitten_10))))
(declare-fun spoon_10 (Int) Int)
(declare-fun spoon_11 (Int Int) Bool)
(declare-sort potato_10 0)
(declare-fun spoon_12 (potato_10) Int)
(assert (forall ((kitten_11 potato_10)) (let ((_let_0 (spoon_12 kitten_11))) (and (<= 0 _let_0) (<= _let_0 999))) ))
(define-fun spoon_13 ((kitten_12 Int)) Bool (and (<= 0 kitten_12) (<= kitten_12 999)))
(declare-fun spoon_14 (Int) potato_5)
(declare-fun spoon_15 (potato_5) Bool)
(declare-fun spoon_16 (potato_5) Int)
(declare-fun spoon_17 (potato_10 potato_10) Bool)
(declare-fun cat_18 () potato_10)
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a potato_10)))))

(define-fun spoon_19 ((kitten_13 potato_11)) potato_10 (get_potato_11_a kitten_13))
(define-fun spoon_20 ((kitten_14 Int) (kitten_15 Bool) (kitten_16 Bool) (kitten_17 Bool) (kitten_18 Bool)) Bool (=> (or (= kitten_15 true) (<= 0 999)) (spoon_13 kitten_14)))
(declare-sort potato_12 0)
(declare-fun spoon_21 (potato_12) Int)
(assert (forall ((kitten_19 potato_12)) (let ((_let_0 (spoon_21 kitten_19))) (and (<= 0 _let_0) (<= _let_0 99900))) ))
(define-fun spoon_22 ((kitten_20 Int)) Bool (and (<= 0 kitten_20) (<= kitten_20 99900)))
(declare-fun spoon_23 (Int) potato_5)
(declare-fun spoon_24 (potato_5) Bool)
(declare-fun spoon_25 (potato_5) Int)
(declare-fun spoon_26 (potato_12 potato_12) Bool)
(declare-fun cat_27 () potato_12)
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_28 ((kitten_21 potato_13)) potato_12 (get_potato_13_a kitten_21))
(define-fun spoon_29 ((kitten_22 Int) (kitten_23 Bool) (kitten_24 Bool) (kitten_25 Bool) (kitten_26 Bool)) Bool (=> (or (= kitten_23 true) (<= 0 99900)) (spoon_22 kitten_22)))
(assert (forall ((kitten_27 Int)) (! (=> (spoon_29 kitten_27 true true true true) (spoon_20 (spoon_10 kitten_27) true false true true)) :pattern ((spoon_10 kitten_27)))))
(assert (forall ((kitten_28 Int)) (! (=> (spoon_29 kitten_28 true true true true) (= (spoon_10 kitten_28) (spoon_1 kitten_28 100))) :pattern ((spoon_10 kitten_28)))))
(declare-sort potato_14 0)
(declare-fun spoon_30 (potato_14) Int)
(assert (forall ((kitten_29 potato_14)) (let ((_let_0 (spoon_30 kitten_29))) (and (<= (- 32768) _let_0) (<= _let_0 32767))) ))
(define-fun spoon_31 ((kitten_30 Int)) Bool (and (<= (- 32768) kitten_30) (<= kitten_30 32767)))
(declare-fun spoon_32 (Int) potato_5)
(declare-fun spoon_33 (potato_5) Bool)
(declare-fun spoon_34 (potato_5) Int)
(declare-fun spoon_35 (potato_14 potato_14) Bool)
(declare-fun cat_36 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_37 ((kitten_31 potato_15)) potato_14 (get_potato_15_a kitten_31))
(declare-fun cat_38 () Int)
(declare-fun cat_39 () Int)
(declare-sort potato_16 0)
(declare-fun spoon_40 (potato_16) Int)
(assert (forall ((kitten_32 potato_16)) (let ((_let_0 (spoon_40 kitten_32))) (and (<= 0 _let_0) (<= _let_0 1000))) ))
(define-fun spoon_41 ((kitten_33 Int)) Bool (and (<= 0 kitten_33) (<= kitten_33 1000)))
(declare-fun spoon_42 (Int) potato_5)
(declare-fun spoon_43 (potato_5) Bool)
(declare-fun spoon_44 (potato_5) Int)
(declare-fun spoon_45 (potato_16 potato_16) Bool)
(declare-fun cat_46 () potato_16)
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_16)))))

(define-fun spoon_47 ((kitten_34 potato_17)) potato_16 (get_potato_17_a kitten_34))
(define-fun spoon_48 ((kitten_35 Int) (kitten_36 Bool) (kitten_37 Bool) (kitten_38 Bool) (kitten_39 Bool)) Bool (=> (or (= kitten_36 true) (<= 0 1000)) (spoon_41 kitten_35)))
(declare-fun cat_49 () Int)
(declare-fun cat_50 () Int)
(declare-fun cat_51 () Int)
(declare-fun cat_52 () Int)
(declare-fun cat_53 () Int)
(declare-fun cat_54 () Int)
(declare-fun cat_55 () Int)
(declare-fun cat_56 () Int)
(declare-fun cat_57 () Int)
(declare-fun cat_58 () Int)
(declare-fun cat_59 () Int)
(declare-fun cat_60 () Int)
(declare-fun cat_61 () Int)
(declare-fun cat_62 () Int)
(declare-fun cat_63 () Int)
(declare-fun cat_64 () Int)
(declare-fun cat_65 () Int)
(declare-fun cat_66 () Int)
(declare-fun cat_67 () Int)
(declare-fun cat_68 () Int)
(declare-fun cat_69 () Int)
(declare-fun cat_70 () Int)
(declare-fun cat_71 () Int)
(declare-fun cat_72 () Int)
(declare-fun cat_73 () Int)
(declare-fun cat_74 () Int)
(declare-fun cat_75 () Int)
(declare-fun cat_76 () Int)
(define-fun spoon_77 () potato_6 (mk_potato_6 cat_51))
(assert (spoon_22 cat_38))
(assert (=> (<= 0 999) (spoon_13 cat_51)))
(assert (=> (<= 0 1000) (spoon_41 cat_52)))
(assert (and (= cat_54 (spoon_10 cat_38)) (and (spoon_13 cat_54) (= cat_54 (spoon_1 cat_38 100)))))
(assert (= cat_55 (+ cat_54 5)))
(assert (= cat_56 (spoon_1 cat_55 10)))
(assert (= cat_57 (* cat_56 10)))
(assert (and (= cat_58 cat_57) (spoon_31 cat_57)))
(assert (and (= cat_59 cat_58) (spoon_41 cat_58)))
(assert (= (mk_potato_6 cat_61) (mk_potato_6 cat_52)))
(assert (= cat_62 cat_59))
(assert (=> (< 990 cat_62) (= (mk_potato_6 cat_63) spoon_77)))
(assert (=> (< 990 cat_62) (= cat_64 990)))
(assert (=> (not (< 990 cat_62)) (and (= cat_60 cat_62) (spoon_13 cat_62))))
(assert (=> (not (< 990 cat_62)) (= (mk_potato_6 cat_65) spoon_77)))
(assert (=> (not (< 990 cat_62)) (= cat_66 cat_60)))
(assert (=> (not (< 990 cat_62)) (= cat_64 cat_66)))
(assert (= cat_68 cat_69))
(assert (= cat_70 cat_68))
(assert (= (mk_potato_6 cat_67) (mk_potato_6 cat_53)))
(assert (= cat_68 cat_64))
(assert (= (mk_potato_6 cat_73) (mk_potato_6 cat_69)))
(assert (= cat_62 cat_72))
(assert (= cat_64 cat_71))
(assert (= cat_76 cat_70))
(assert (= cat_75 cat_62))
(assert (= cat_74 cat_64))
(assert (not (spoon_13 (spoon_1 cat_38 100))))
(check-sat)
(exit)
