(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-const cat_2 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(declare-sort potato_10 0)
(declare-fun spoon_7 (potato_10) Int)
(assert (forall ((kitten_5 potato_10)) (and (<= 40 (spoon_7 kitten_5)) (<= (spoon_7 kitten_5) 660))))
(define-fun spoon_8 ((kitten_6 Int)) Bool (and (<= 40 kitten_6) (<= kitten_6 660)))
(declare-fun spoon_9 (Int) potato_5)
(declare-fun spoon_10 (potato_5) Bool)
(declare-fun spoon_11 (potato_5) Int)
(declare-fun spoon_12 (potato_10 potato_10) Bool)
(declare-const cat_13 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_14 ((kitten_7 potato_11)) potato_10 (get_potato_11_a kitten_7))
(declare-sort potato_12 0)
(declare-fun spoon_15 (potato_12) Int)
(assert (forall ((kitten_8 potato_12)) (and (<= 4 (spoon_15 kitten_8)) (<= (spoon_15 kitten_8) 66))))
(define-fun spoon_16 ((kitten_9 Int)) Bool (and (<= 4 kitten_9) (<= kitten_9 66)))
(declare-fun spoon_17 (Int) potato_5)
(declare-fun spoon_18 (potato_5) Bool)
(declare-fun spoon_19 (potato_5) Int)
(declare-fun spoon_20 (potato_12 potato_12) Bool)
(declare-const cat_21 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_22 ((kitten_10 potato_13)) potato_12 (get_potato_13_a kitten_10))
(define-fun spoon_23 ((kitten_11 Int) (kitten_12 Bool) (kitten_13 Bool) (kitten_14 Bool) (kitten_15 Bool)) Bool (=> (or (= kitten_12 true) (<= 4 66)) (spoon_16 kitten_11)))
(declare-const cat_24 Int)
(declare-const cat_25 Int)
(declare-sort potato_14 0)
(declare-fun spoon_26 (potato_14) Int)
(assert (forall ((kitten_16 potato_14)) (and (<= (- 32768) (spoon_26 kitten_16)) (<= (spoon_26 kitten_16) 32767))))
(define-fun spoon_27 ((kitten_17 Int)) Bool (and (<= (- 32768) kitten_17) (<= kitten_17 32767)))
(declare-fun spoon_28 (Int) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Int)
(declare-fun spoon_31 (potato_14 potato_14) Bool)
(declare-const cat_32 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_33 ((kitten_18 potato_15)) potato_14 (get_potato_15_a kitten_18))
(define-fun spoon_34 ((kitten_19 Int) (kitten_20 Bool) (kitten_21 Bool) (kitten_22 Bool) (kitten_23 Bool)) Bool (=> (or (= kitten_20 true) (<= 40 660)) (spoon_8 kitten_19)))
(declare-const cat_35 Int)
(assert (spoon_16 cat_24))
(assert (= cat_35 (* cat_24 10)))
(assert (spoon_27 (* cat_24 10)))
(assert (not (spoon_8 cat_35)))
(check-sat)
(exit)
