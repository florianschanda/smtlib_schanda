;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic UFDTNIRA)

(define-fun spoon_1 ((kitten_1 Int) (kitten_2 Int)) Int (ite (>= kitten_1 0) (div kitten_1 kitten_2) (- (div (- kitten_1) kitten_2))))
(define-fun spoon_2 ((kitten_3 Int) (kitten_4 Int)) Int (ite (>= kitten_3 0) (mod kitten_3 kitten_4) (- (mod (- kitten_3) kitten_4))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_6 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_7 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_8 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(define-fun spoon_9 ((kitten_9 Int) (kitten_10 Int)) Int (let ((_let_0 (mod kitten_9 kitten_10))) (ite (< 0 kitten_10) _let_0 (+ _let_0 kitten_10))))
(declare-sort potato_10 0)
(declare-fun spoon_10 (potato_10) Int)
(assert (forall ((kitten_11 potato_10)) (let ((_let_0 (spoon_10 kitten_11))) (and (<= 0 _let_0) (<= _let_0 999))) ))
(define-fun spoon_11 ((kitten_12 Int)) Bool (and (<= 0 kitten_12) (<= kitten_12 999)))
(declare-fun spoon_12 (Int) potato_5)
(declare-fun spoon_13 (potato_5) Bool)
(declare-fun spoon_14 (potato_5) Int)
(declare-fun spoon_15 (potato_10 potato_10) Bool)
(declare-fun cat_16 () potato_10)
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a potato_10)))))

(define-fun spoon_17 ((kitten_13 potato_11)) potato_10 (get_potato_11_a kitten_13))
(define-fun spoon_18 ((kitten_14 potato_10)) Int (spoon_10 kitten_14))
(declare-fun spoon_19 (Int) potato_10)
(assert (forall ((kitten_15 potato_10)) (! (= (spoon_19 (spoon_18 kitten_15)) kitten_15) :pattern ((spoon_18 kitten_15)))))
(assert (forall ((kitten_16 potato_10)) (! (spoon_11 (spoon_18 kitten_16)) :pattern ((spoon_18 kitten_16)))))
(assert (forall ((kitten_17 Int)) (! (=> (spoon_11 kitten_17) (= (spoon_18 (spoon_19 kitten_17)) kitten_17)) :pattern ((spoon_18 (spoon_19 kitten_17))))))
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_10) (get_potato_12_b potato_10)))))

(define-fun spoon_20 ((kitten_18 potato_12)) potato_10 (get_potato_12_a kitten_18))
(define-fun spoon_21 ((kitten_19 potato_12)) potato_10 (get_potato_12_b kitten_19))
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_22 ((kitten_20 potato_13)) potato_12 (get_potato_13_a kitten_20))
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_12)))))

(define-fun spoon_23 ((kitten_21 potato_14)) potato_12 (get_potato_14_a kitten_21))
(define-fun spoon_24 ((kitten_22 potato_14) (kitten_23 potato_14)) Bool (let ((_let_0 (get_potato_14_a kitten_22))) (let ((_let_1 (get_potato_14_a kitten_23))) (ite (and (= (spoon_18 (get_potato_12_a _let_0)) (spoon_18 (get_potato_12_a _let_1))) (= (spoon_18 (get_potato_12_b _let_0)) (spoon_18 (get_potato_12_b _let_1)))) true false))))
(declare-fun cat_25 () Int)
(declare-fun spoon_26 (potato_14) Int)
(declare-fun cat_27 () Int)
(declare-fun spoon_28 (potato_14) Int)
(assert (<= 0 cat_25))
(assert (forall ((kitten_24 potato_14)) (<= 0 (spoon_26 kitten_24)) ))
(assert (<= 0 cat_27))
(assert (forall ((kitten_25 potato_14)) (<= 0 (spoon_28 kitten_25)) ))
(declare-fun cat_29 () Int)
(declare-fun cat_30 () Int)
(declare-fun cat_31 () Int)
(assert (<= 0 cat_29))
(assert (< cat_29 cat_30))
(assert (<= 0 cat_31))
(declare-fun cat_32 () Int)
(declare-fun cat_33 () Int)
(declare-fun cat_34 () Int)
(assert (<= 0 cat_32))
(assert (< cat_32 cat_33))
(assert (<= 0 cat_34))
(declare-fun spoon_35 (potato_14 potato_14) Bool)
(declare-fun cat_36 () potato_14)
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_14)))))

(define-fun spoon_37 ((kitten_26 potato_15)) potato_14 (get_potato_15_a kitten_26))
(declare-sort potato_16 0)
(declare-fun spoon_38 (potato_16) Int)
(assert (forall ((kitten_27 potato_16)) (let ((_let_0 (spoon_38 kitten_27))) (and (<= 0 _let_0) (<= _let_0 150000))) ))
(define-fun spoon_39 ((kitten_28 Int)) Bool (and (<= 0 kitten_28) (<= kitten_28 150000)))
(declare-fun spoon_40 (Int) potato_5)
(declare-fun spoon_41 (potato_5) Bool)
(declare-fun spoon_42 (potato_5) Int)
(declare-fun spoon_43 (potato_16 potato_16) Bool)
(declare-fun cat_44 () potato_16)
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_16)))))

(define-fun spoon_45 ((kitten_29 potato_17)) potato_16 (get_potato_17_a kitten_29))
(define-fun spoon_46 ((kitten_30 potato_16)) Int (spoon_38 kitten_30))
(declare-fun spoon_47 (Int) potato_16)
(assert (forall ((kitten_31 potato_16)) (! (= (spoon_47 (spoon_46 kitten_31)) kitten_31) :pattern ((spoon_46 kitten_31)))))
(assert (forall ((kitten_32 potato_16)) (! (spoon_39 (spoon_46 kitten_32)) :pattern ((spoon_46 kitten_32)))))
(assert (forall ((kitten_33 Int)) (! (=> (spoon_39 kitten_33) (= (spoon_46 (spoon_47 kitten_33)) kitten_33)) :pattern ((spoon_46 (spoon_47 kitten_33))))))
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_16) (get_potato_18_b potato_16)))))

(define-fun spoon_48 ((kitten_34 potato_18)) potato_16 (get_potato_18_a kitten_34))
(define-fun spoon_49 ((kitten_35 potato_18)) potato_16 (get_potato_18_b kitten_35))
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a potato_18)))))

(define-fun spoon_50 ((kitten_36 potato_19)) potato_18 (get_potato_19_a kitten_36))
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_18)))))

(define-fun spoon_51 ((kitten_37 potato_20)) potato_18 (get_potato_20_a kitten_37))
(define-fun spoon_52 ((kitten_38 potato_20) (kitten_39 potato_20)) Bool (let ((_let_0 (get_potato_20_a kitten_38))) (let ((_let_1 (get_potato_20_a kitten_39))) (ite (and (= (spoon_46 (get_potato_18_a _let_0)) (spoon_46 (get_potato_18_a _let_1))) (= (spoon_46 (get_potato_18_b _let_0)) (spoon_46 (get_potato_18_b _let_1)))) true false))))
(declare-fun cat_53 () Int)
(declare-fun spoon_54 (potato_20) Int)
(declare-fun cat_55 () Int)
(declare-fun spoon_56 (potato_20) Int)
(assert (<= 0 cat_53))
(assert (forall ((kitten_40 potato_20)) (<= 0 (spoon_54 kitten_40)) ))
(assert (<= 0 cat_55))
(assert (forall ((kitten_41 potato_20)) (<= 0 (spoon_56 kitten_41)) ))
(declare-fun cat_57 () Int)
(declare-fun cat_58 () Int)
(declare-fun cat_59 () Int)
(assert (<= 0 cat_57))
(assert (< cat_57 cat_58))
(assert (<= 0 cat_59))
(declare-fun cat_60 () Int)
(declare-fun cat_61 () Int)
(declare-fun cat_62 () Int)
(assert (<= 0 cat_60))
(assert (< cat_60 cat_61))
(assert (<= 0 cat_62))
(declare-fun spoon_63 (potato_20 potato_20) Bool)
(declare-fun cat_64 () potato_20)
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a potato_20)))))

(define-fun spoon_65 ((kitten_42 potato_21)) potato_20 (get_potato_21_a kitten_42))
(declare-fun cat_66 () potato_20)
(declare-fun cat_67 () Int)
(declare-fun cat_68 () Int)
(define-fun spoon_69 ((kitten_43 Int) (kitten_44 Bool) (kitten_45 Bool) (kitten_46 Bool) (kitten_47 Bool)) Bool (=> (or (= kitten_44 true) (<= 0 150000)) (spoon_39 kitten_43)))
(define-fun spoon_70 ((kitten_48 Int) (kitten_49 Bool) (kitten_50 Bool) (kitten_51 Bool) (kitten_52 Bool)) Bool (=> (or (= kitten_49 true) (<= 0 999)) (spoon_11 kitten_48)))
(declare-fun cat_71 () potato_16)
(assert (= (spoon_38 cat_71) 99801))
(declare-fun cat_72 () potato_16)
(assert (= (spoon_38 cat_72) 99900))
(declare-fun cat_73 () potato_16)
(declare-fun cat_74 () potato_16)
(declare-fun cat_75 () potato_16)
(declare-fun cat_76 () potato_16)
(declare-fun cat_77 () potato_16)
(declare-fun cat_78 () potato_16)
(declare-fun cat_79 () potato_16)
(declare-fun cat_80 () potato_16)
(declare-fun cat_81 () potato_16)
(declare-fun cat_82 () potato_16)
(declare-fun cat_83 () potato_16)
(declare-fun cat_84 () potato_16)
(declare-fun cat_85 () potato_16)
(declare-fun cat_86 () potato_16)
(define-fun spoon_87 () potato_18 (mk_potato_18 cat_81 cat_82))
(define-fun spoon_88 () potato_18 (mk_potato_18 cat_77 cat_78))
(assert (= cat_75 cat_73))
(assert (= cat_76 cat_74))
(assert (= spoon_88 (get_potato_20_a cat_66)))
(assert (=> (< 99801 (spoon_46 cat_77)) (= cat_79 cat_77)))
(assert (=> (< 99801 (spoon_46 cat_77)) (= cat_80 cat_78)))
(assert (=> (< 99801 (spoon_46 cat_77)) (= cat_71 cat_81)))
(assert (=> (< 99801 (spoon_46 cat_77)) (= cat_78 cat_82)))
(assert (=> (not (< 99801 (spoon_46 cat_77))) (= spoon_87 spoon_88)))
(assert (=> (< 99900 (spoon_46 cat_82)) (= cat_83 cat_81)))
(assert (=> (< 99900 (spoon_46 cat_82)) (= cat_84 cat_82)))
(assert (=> (< 99900 (spoon_46 cat_82)) (= cat_81 cat_85)))
(assert (=> (< 99900 (spoon_46 cat_82)) (= cat_72 cat_86)))
(assert (=> (not (< 99900 (spoon_46 cat_82))) (= (mk_potato_18 cat_85 cat_86) spoon_87)))
(assert (not (spoon_11 (spoon_1 (spoon_46 cat_86) 100))))
(check-sat)
(exit)
