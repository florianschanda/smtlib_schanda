(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_1 (potato_2 potato_2) Bool)
(declare-const cat_2 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_3 ((kitten_1 potato_6)) Int (get_potato_6_a kitten_1))
(define-fun spoon_4 ((kitten_2 potato_7)) Bool (get_potato_7_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_8)) Real (get_potato_8_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_9)) potato_2 (get_potato_9_a kitten_4))
(declare-fun spoon_7 (Int Int) Int)
(declare-fun spoon_8 (Int Int) Int)
(assert (forall ((kitten_5 Int) (kitten_6 Int)) (=> (not (= kitten_6 0)) (= kitten_5 (+ (* kitten_6 (spoon_7 kitten_5 kitten_6)) (spoon_8 kitten_5 kitten_6))))))
(assert (forall ((kitten_7 Int) (kitten_8 Int)) (=> (and (<= 0 kitten_7) (< 0 kitten_8)) (and (<= 0 (spoon_7 kitten_7 kitten_8)) (<= (spoon_7 kitten_7 kitten_8) kitten_7)))))
(assert (forall ((kitten_9 Int) (kitten_10 Int)) (=> (not (= kitten_10 0)) (and (< (- (abs kitten_10)) (spoon_8 kitten_9 kitten_10)) (< (spoon_8 kitten_9 kitten_10) (abs kitten_10))))))
(assert (forall ((kitten_11 Int) (kitten_12 Int)) (=> (and (<= 0 kitten_11) (< 0 kitten_12)) (<= 0 (spoon_7 kitten_11 kitten_12)))))
(assert (forall ((kitten_13 Int) (kitten_14 Int)) (=> (and (<= kitten_13 0) (< 0 kitten_14)) (<= (spoon_7 kitten_13 kitten_14) 0))))
(assert (forall ((kitten_15 Int) (kitten_16 Int)) (=> (and (<= 0 kitten_15) (not (= kitten_16 0))) (<= 0 (spoon_8 kitten_15 kitten_16)))))
(assert (forall ((kitten_17 Int) (kitten_18 Int)) (=> (and (<= kitten_17 0) (not (= kitten_18 0))) (<= (spoon_8 kitten_17 kitten_18) 0))))
(assert (forall ((kitten_19 Int) (kitten_20 Int)) (=> (not (= kitten_20 0)) (<= (abs (* (spoon_7 kitten_19 kitten_20) kitten_20)) (abs kitten_19)))))
(assert (forall ((kitten_21 Int)) (= (spoon_7 kitten_21 1) kitten_21)))
(assert (forall ((kitten_22 Int)) (= (spoon_8 kitten_22 1) 0)))
(assert (forall ((kitten_23 Int) (kitten_24 Int)) (=> (and (<= 0 kitten_23) (< kitten_23 kitten_24)) (= (spoon_7 kitten_23 kitten_24) 0))))
(assert (forall ((kitten_25 Int) (kitten_26 Int)) (=> (and (<= 0 kitten_25) (< kitten_25 kitten_26)) (= (spoon_8 kitten_25 kitten_26) kitten_25))))
(assert (forall ((kitten_27 Int) (kitten_28 Int) (kitten_29 Int)) (! (=> (and (< 0 kitten_27) (and (<= 0 kitten_28) (<= 0 kitten_29))) (= (spoon_7 (+ (* kitten_27 kitten_28) kitten_29) kitten_27) (+ kitten_28 (spoon_7 kitten_29 kitten_27)))) :pattern ((spoon_7 (+ (* kitten_27 kitten_28) kitten_29) kitten_27)))))
(assert (forall ((kitten_30 Int) (kitten_31 Int) (kitten_32 Int)) (! (=> (and (< 0 kitten_30) (and (<= 0 kitten_31) (<= 0 kitten_32))) (= (spoon_8 (+ (* kitten_30 kitten_31) kitten_32) kitten_30) (spoon_8 kitten_32 kitten_30))) :pattern ((spoon_8 (+ (* kitten_30 kitten_31) kitten_32) kitten_30)))))
(define-fun spoon_9 ((kitten_33 Int) (kitten_34 Int)) Int (ite (< 0 kitten_34) (mod kitten_33 kitten_34) (+ (mod kitten_33 kitten_34) kitten_34)))
(declare-sort potato_10 0)
(define-fun spoon_10 ((kitten_35 Int)) Bool (and (<= (- 32768) kitten_35) (<= kitten_35 32767)))
(declare-fun spoon_11 (Int) potato_5)
(declare-fun spoon_12 (potato_5) Bool)
(declare-fun spoon_13 (potato_5) Int)
(declare-fun spoon_14 (potato_10 potato_10) Bool)
(declare-const cat_15 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_16 ((kitten_36 potato_11)) potato_10 (get_potato_11_a kitten_36))
(declare-sort potato_12 0)
(define-fun spoon_17 ((kitten_37 Int)) Bool (and (<= 0 kitten_37) (<= kitten_37 999)))
(declare-fun spoon_18 (Int) potato_5)
(declare-fun spoon_19 (potato_5) Bool)
(declare-fun spoon_20 (potato_5) Int)
(declare-fun spoon_21 (potato_12 potato_12) Bool)
(declare-const cat_22 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_23 ((kitten_38 potato_13)) potato_12 (get_potato_13_a kitten_38))
(define-fun spoon_24 ((kitten_39 Int) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (<= 0 999)) (spoon_17 kitten_39)))
(declare-const cat_25 Int)
(declare-const cat_26 Int)
(declare-const cat_27 Int)
(declare-const cat_28 Int)
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(declare-const cat_31 Int)
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(declare-const cat_34 Int)
(declare-const cat_35 Bool)
(declare-const cat_36 Int)
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(declare-const cat_40 Int)
(declare-const cat_41 Int)
(declare-const cat_42 Int)
(declare-const cat_43 Int)
(declare-const cat_44 Int)
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (spoon_17 cat_25))
(assert (=> (<= 0 999) (spoon_17 cat_28)))
(assert (= (mk_potato_6 cat_33) (mk_potato_6 cat_28)))
(assert (= cat_34 cat_25))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (and (= cat_30 (* (spoon_7 (+ cat_25 5) 10) 10)) (spoon_10 (* (spoon_7 (+ cat_25 5) 10) 10)))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (= cat_35 (ite (< 999 cat_30) true false))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (= cat_35 true) (= cat_34 cat_36))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (= cat_35 true) (= cat_37 990))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (not (= cat_35 true)) (and (= cat_31 (* (spoon_7 (+ cat_25 5) 10) 10)) (spoon_10 (* (spoon_7 (+ cat_25 5) 10) 10))))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (not (= cat_35 true)) (and (= cat_32 cat_31) (spoon_17 cat_31)))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (not (= cat_35 true)) (= cat_34 cat_38))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (not (= cat_35 true)) (= cat_39 cat_32))))
(assert (=> (not (= (spoon_9 cat_25 10) 0)) (=> (not (= cat_35 true)) (= cat_37 cat_39))))
(assert (=> (not (not (= (spoon_9 cat_25 10) 0))) (= cat_37 cat_34)))
(assert (= cat_41 cat_42))
(assert (= cat_43 cat_41))
(assert (= (mk_potato_6 cat_40) (mk_potato_6 cat_29)))
(assert (= cat_41 cat_37))
(assert (= (mk_potato_6 cat_45) (mk_potato_6 cat_42)))
(assert (= cat_37 cat_44))
(assert (= cat_47 cat_43))
(assert (= cat_46 cat_37))
(assert (not (not (= 10 0))))
(check-sat)
(exit)
