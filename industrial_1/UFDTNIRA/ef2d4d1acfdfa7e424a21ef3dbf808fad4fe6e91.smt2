(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic UFDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Int) (kitten_2 Int)) Int (ite (>= kitten_1 0) (div kitten_1 kitten_2) (- (div (- kitten_1) kitten_2))))
(define-fun spoon_2 ((kitten_3 Int) (kitten_4 Int)) Int (ite (>= kitten_3 0) (mod kitten_3 kitten_4) (- (mod (- kitten_3) kitten_4))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_5 potato_6)) Int (get_potato_6_a kitten_5))
(define-fun spoon_6 ((kitten_6 potato_7)) Bool (get_potato_7_a kitten_6))
(define-fun spoon_7 ((kitten_7 potato_8)) Real (get_potato_8_a kitten_7))
(define-fun spoon_8 ((kitten_8 potato_9)) potato_2 (get_potato_9_a kitten_8))
(define-fun spoon_9 ((kitten_9 Int) (kitten_10 Int)) Int (ite (< 0 kitten_10) (mod kitten_9 kitten_10) (+ (mod kitten_9 kitten_10) kitten_10)))
(declare-fun spoon_10 (Int) Int)
(declare-fun spoon_11 (Int Int) Bool)
(declare-sort potato_10 0)
(declare-fun spoon_12 (potato_10) Int)
(assert (forall ((kitten_11 potato_10)) (and (<= 0 (spoon_12 kitten_11)) (<= (spoon_12 kitten_11) 999))))
(define-fun spoon_13 ((kitten_12 Int)) Bool (and (<= 0 kitten_12) (<= kitten_12 999)))
(declare-fun spoon_14 (Int) potato_5)
(declare-fun spoon_15 (potato_5) Bool)
(declare-fun spoon_16 (potato_5) Int)
(declare-fun spoon_17 (potato_10 potato_10) Bool)
(declare-const cat_18 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_19 ((kitten_13 potato_11)) potato_10 (get_potato_11_a kitten_13))
(define-fun spoon_20 ((kitten_14 Int) (kitten_15 Bool) (kitten_16 Bool) (kitten_17 Bool) (kitten_18 Bool)) Bool (=> (or (= kitten_15 true) (<= 0 999)) (spoon_13 kitten_14)))
(assert (forall ((kitten_19 Int)) (! (=> (spoon_20 kitten_19 true true true true) (let ((kitten_20 (spoon_10 kitten_19))) (and (= (spoon_9 kitten_20 10) 0) (spoon_20 kitten_20 true false true true)))) :pattern ((spoon_10 kitten_19)))))
(declare-sort potato_12 0)
(declare-fun spoon_21 (potato_12) Int)
(assert (forall ((kitten_21 potato_12)) (and (<= 0 (spoon_21 kitten_21)) (<= (spoon_21 kitten_21) 99))))
(define-fun spoon_22 ((kitten_22 Int)) Bool (and (<= 0 kitten_22) (<= kitten_22 99)))
(declare-fun spoon_23 (Int) potato_5)
(declare-fun spoon_24 (potato_5) Bool)
(declare-fun spoon_25 (potato_5) Int)
(declare-fun spoon_26 (potato_12 potato_12) Bool)
(declare-const cat_27 potato_12)
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_28 ((kitten_23 potato_13)) potato_12 (get_potato_13_a kitten_23))
(declare-const cat_29 Int)
(declare-const cat_30 Int)
(define-fun spoon_31 ((kitten_24 Int) (kitten_25 Bool) (kitten_26 Bool) (kitten_27 Bool) (kitten_28 Bool)) Bool (=> (or (= kitten_25 true) (<= 0 99)) (spoon_22 kitten_24)))
(declare-const cat_32 Int)
(declare-const cat_33 Int)
(assert (spoon_13 cat_29))
(assert (= cat_32 (spoon_10 cat_29)))
(assert (spoon_13 cat_32))
(assert (= (spoon_9 cat_32 10) 0))
(assert (= cat_33 (spoon_1 cat_32 10)))
(assert (not (spoon_22 cat_33)))
(check-sat)
(exit)
