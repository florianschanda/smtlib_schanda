(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_23 Bool)) Int (ite (= kitten_23 true) 1 0))
(define-fun spoon_26 ((kitten_24 Int)) Bool (ite (= kitten_24 0) false true))
(define-fun spoon_27 ((kitten_25 Int)) Bool (or (= kitten_25 0) (= kitten_25 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_27 potato_12)) potato_11 (get_potato_12_a kitten_27))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_28 potato_11)) (! (= (spoon_39 (spoon_38 kitten_28)) kitten_28) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 potato_11)) (! (spoon_31 (spoon_38 kitten_29)) :pattern ((spoon_38 kitten_29)))))
(assert (forall ((kitten_30 Float32)) (! (=> (spoon_31 kitten_30) (= (spoon_38 (spoon_39 kitten_30)) kitten_30)) :pattern ((spoon_38 (spoon_39 kitten_30))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_32 potato_15)) potato_13 (get_potato_15_a kitten_32))
(define-fun spoon_42 ((kitten_33 potato_15) (kitten_34 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_34)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_34))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_36 potato_15)) (<= 0 (spoon_46 kitten_36))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_37 potato_16)) potato_15 (get_potato_16_a kitten_37))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_38 Float32)) Bool (and (spoon_1 kitten_38) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_38) (fp.leq kitten_38 (fp #b0 #b10010011 #b00000001101101110000000)))))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_39 potato_18)) potato_17 (get_potato_18_a kitten_39))
(define-fun spoon_63 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_56 kitten_40)))
(declare-sort potato_19 0)
(define-fun spoon_64 ((kitten_44 Int)) Bool (and (<= (- 128) kitten_44) (<= kitten_44 127)))
(declare-fun spoon_65 (Int) potato_5)
(declare-fun spoon_66 (potato_5) Bool)
(declare-fun spoon_67 (potato_5) Int)
(declare-fun spoon_68 (potato_19 potato_19) Bool)
(declare-const cat_69 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_70 ((kitten_45 potato_20)) potato_19 (get_potato_20_a kitten_45))
(declare-sort potato_21 0)
(define-fun spoon_71 ((kitten_46 Int)) Bool (and (<= 1 kitten_46) (<= kitten_46 30)))
(declare-fun spoon_72 (Int) potato_5)
(declare-fun spoon_73 (potato_5) Bool)
(declare-fun spoon_74 (potato_5) Int)
(declare-fun spoon_75 (potato_21 potato_21) Bool)
(declare-const cat_76 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_77 ((kitten_47 potato_22)) potato_21 (get_potato_22_a kitten_47))
(declare-sort potato_23 0)
(define-fun spoon_78 ((kitten_48 Int)) Bool (and (<= 3 kitten_48) (<= kitten_48 30)))
(declare-fun spoon_79 (Int) potato_5)
(declare-fun spoon_80 (potato_5) Bool)
(declare-fun spoon_81 (potato_5) Int)
(declare-fun spoon_82 (potato_23 potato_23) Bool)
(declare-const cat_83 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_84 ((kitten_49 potato_24)) potato_23 (get_potato_24_a kitten_49))
(declare-fun spoon_85 (potato_23) Int)
(declare-fun spoon_86 (Int) potato_23)
(assert (forall ((kitten_50 potato_23)) (! (= (spoon_86 (spoon_85 kitten_50)) kitten_50) :pattern ((spoon_85 kitten_50)))))
(assert (forall ((kitten_51 potato_23)) (! (spoon_78 (spoon_85 kitten_51)) :pattern ((spoon_85 kitten_51)))))
(assert (forall ((kitten_52 Int)) (! (=> (spoon_78 kitten_52) (= (spoon_85 (spoon_86 kitten_52)) kitten_52)) :pattern ((spoon_85 (spoon_86 kitten_52))))))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a (Array Int potato_15))))))
(declare-fun spoon_87 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_53 (Array Int potato_15))) (forall ((kitten_54 Int)) (! (= (spoon_87 kitten_53 kitten_54 kitten_54) kitten_53) :pattern ((spoon_87 kitten_53 kitten_54 kitten_54))))))
(assert (forall ((kitten_55 (Array Int potato_15))) (forall ((kitten_56 Int)) (forall ((kitten_57 Int)) (forall ((kitten_58 Int)) (! (= (select (spoon_87 kitten_55 kitten_56 kitten_57) kitten_58) (select kitten_55 (- kitten_58 (- kitten_57 kitten_56)))) :pattern ((select (spoon_87 kitten_55 kitten_56 kitten_57) kitten_58))))))))
(declare-fun spoon_88 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_59 (Array Int potato_15)) (kitten_60 (Array Int potato_15))) (forall ((kitten_61 Int) (kitten_62 Int) (kitten_63 Int) (kitten_64 Int)) (forall ((kitten_65 Int)) (! (and (=> (and (<= kitten_61 kitten_65) (<= kitten_65 kitten_62)) (= (select (spoon_88 kitten_59 kitten_61 kitten_62 kitten_60 kitten_63 kitten_64) kitten_65) (select kitten_59 kitten_65))) (=> (< kitten_62 kitten_65) (= (select (spoon_88 kitten_59 kitten_61 kitten_62 kitten_60 kitten_63 kitten_64) kitten_65) (select kitten_60 (+ (- kitten_65 kitten_62) (- kitten_63 1)))))) :pattern ((select (spoon_88 kitten_59 kitten_61 kitten_62 kitten_60 kitten_63 kitten_64) kitten_65)))))))
(declare-fun spoon_89 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_66 potato_15)) (forall ((kitten_67 Int)) (! (= (select (spoon_89 kitten_66 kitten_67) kitten_67) kitten_66) :pattern ((select (spoon_89 kitten_66 kitten_67) kitten_67))))))
(define-fun spoon_90 ((kitten_68 (Array Int potato_15)) (kitten_69 Int) (kitten_70 Int) (kitten_71 (Array Int potato_15)) (kitten_72 Int) (kitten_73 Int)) Bool (ite (and (ite (<= kitten_69 kitten_70) (and (<= kitten_72 kitten_73) (= (- kitten_70 kitten_69) (- kitten_73 kitten_72))) (< kitten_73 kitten_72)) (forall ((kitten_74 Int)) (=> (and (<= kitten_69 kitten_74) (<= kitten_74 kitten_70)) (= (spoon_42 (select kitten_68 kitten_74) (select kitten_71 (+ (- kitten_72 kitten_69) kitten_74))) true)))) true false))
(assert (forall ((kitten_75 (Array Int potato_15)) (kitten_76 (Array Int potato_15))) (forall ((kitten_77 Int) (kitten_78 Int) (kitten_79 Int) (kitten_80 Int)) (=> (= (spoon_90 kitten_76 kitten_79 kitten_80 kitten_75 kitten_77 kitten_78) true) (and (ite (<= kitten_77 kitten_78) (and (<= kitten_79 kitten_80) (= (- kitten_78 kitten_77) (- kitten_80 kitten_79))) (< kitten_80 kitten_79)) (forall ((kitten_81 Int)) (=> (and (<= kitten_77 kitten_81) (<= kitten_81 kitten_78)) (= (spoon_42 (select kitten_75 kitten_81) (select kitten_76 (+ (- kitten_79 kitten_77) kitten_81))) true))))))))
(declare-const cat_91 (Array Int potato_15))
(declare-const cat_92 Int)
(declare-fun spoon_93 ((Array Int potato_15)) Int)
(declare-const cat_94 Int)
(declare-fun spoon_95 ((Array Int potato_15)) Int)
(declare-const cat_96 Int)
(declare-fun spoon_97 ((Array Int potato_15)) Int)
(assert (<= 0 cat_92))
(assert (forall ((kitten_82 (Array Int potato_15))) (<= 0 (spoon_93 kitten_82))))
(assert (<= 0 cat_94))
(assert (forall ((kitten_83 (Array Int potato_15))) (<= 0 (spoon_95 kitten_83))))
(assert (<= 0 cat_96))
(assert (forall ((kitten_84 (Array Int potato_15))) (<= 0 (spoon_97 kitten_84))))
(declare-fun spoon_98 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_23) (get_potato_26_b (Array Int potato_15))))))
(define-fun spoon_99 ((kitten_85 potato_26)) potato_23 (get_potato_26_a kitten_85))
(define-fun spoon_100 ((kitten_86 potato_26)) (Array Int potato_15) (get_potato_26_b kitten_86))
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_101 ((kitten_87 potato_27)) potato_26 (get_potato_27_a kitten_87))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_26)))))
(define-fun spoon_102 ((kitten_88 potato_28)) potato_26 (get_potato_28_a kitten_88))
(define-fun spoon_103 ((kitten_89 potato_28) (kitten_90 potato_28)) Bool (ite (and (= (spoon_85 (get_potato_26_a (get_potato_28_a kitten_89))) (spoon_85 (get_potato_26_a (get_potato_28_a kitten_90)))) (= (spoon_90 (get_potato_26_b (get_potato_28_a kitten_89)) 1 30 (get_potato_26_b (get_potato_28_a kitten_90)) 1 30) true)) true false))
(declare-const cat_104 Int)
(declare-fun spoon_105 (potato_28) Int)
(declare-const cat_106 Int)
(declare-fun spoon_107 (potato_28) Int)
(assert (<= 0 cat_104))
(assert (forall ((kitten_91 potato_28)) (<= 0 (spoon_105 kitten_91))))
(assert (<= 0 cat_106))
(assert (forall ((kitten_92 potato_28)) (<= 0 (spoon_107 kitten_92))))
(declare-const cat_108 Int)
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(assert (<= 0 cat_108))
(assert (< cat_108 cat_109))
(assert (<= 0 cat_110))
(declare-const cat_111 Int)
(declare-const cat_112 Int)
(declare-const cat_113 Int)
(assert (<= 0 cat_111))
(assert (< cat_111 cat_112))
(assert (<= 0 cat_113))
(declare-fun spoon_114 (potato_28 potato_28) Bool)
(declare-const cat_115 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_116 ((kitten_93 potato_29)) potato_28 (get_potato_29_a kitten_93))
(declare-fun spoon_117 (Float32 Float32) Float32)
(declare-fun spoon_118 (Float32 Float32 Float32) Bool)
(assert (forall ((kitten_94 Float32) (kitten_95 Float32)) (! (=> (and (spoon_63 kitten_94 true true true) (spoon_63 kitten_95 true true true)) (spoon_63 (spoon_117 kitten_94 kitten_95) true false true)) :pattern ((spoon_117 kitten_94 kitten_95)))))
(declare-sort potato_30 0)
(define-fun spoon_119 ((kitten_96 Float32)) Bool (and (spoon_1 kitten_96) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_96) (fp.leq kitten_96 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_120 (potato_30 potato_30) Bool)
(declare-fun spoon_121 (Float32) potato_5)
(declare-fun spoon_122 (potato_5) Bool)
(declare-fun spoon_123 (potato_5) Float32)
(declare-const cat_124 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_125 ((kitten_97 potato_31)) potato_30 (get_potato_31_a kitten_97))
(define-fun spoon_126 ((kitten_98 Float32) (kitten_99 Bool) (kitten_100 Bool) (kitten_101 Bool)) Bool (=> (or (= kitten_99 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_119 kitten_98)))
(declare-fun spoon_127 (potato_15 potato_15) Float32)
(declare-fun spoon_128 (Float32 potato_15 potato_15) Bool)
(assert (forall ((kitten_102 potato_15) (kitten_103 potato_15)) (! (spoon_126 (spoon_127 kitten_102 kitten_103) true false true) :pattern ((spoon_127 kitten_102 kitten_103)))))
(declare-const cat_129 potato_28)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(define-fun spoon_133 ((kitten_104 Float32) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_105 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_104)))
(define-fun spoon_134 ((kitten_108 Int) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool)) Bool (=> (or (= kitten_109 true) (<= 1 30)) (spoon_71 kitten_108)))
(define-fun spoon_135 ((kitten_112 Int) (kitten_113 Bool) (kitten_114 Bool) (kitten_115 Bool)) Bool (=> (or (= kitten_113 true) (<= 3 30)) (spoon_78 kitten_112)))
(declare-const cat_136 Float32)
(declare-const cat_137 Int)
(declare-const cat_138 Float32)
(declare-const cat_139 Int)
(declare-const cat_140 Float32)
(declare-const cat_141 Float32)
(declare-const cat_142 Int)
(declare-const cat_143 Int)
(declare-const cat_144 Float32)
(declare-const cat_145 Int)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_56 cat_136)))
(assert (and (= cat_138 (spoon_127 (select (get_potato_26_b (get_potato_28_a cat_129)) 1) (select (get_potato_26_b (get_potato_28_a cat_129)) (spoon_85 (get_potato_26_a (get_potato_28_a cat_129)))))) (spoon_119 cat_138)))
(assert (= cat_140 cat_136))
(assert (= cat_141 cat_138))
(assert (= cat_142 cat_137))
(assert (= cat_143 1))
(assert (<= 1 cat_143))
(assert (<= cat_143 (- (spoon_85 (get_potato_26_a (get_potato_28_a cat_129))) 1)))
(assert (and (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_56 cat_144)) (and (<= 1 cat_145) (<= cat_145 (- (spoon_85 (get_potato_26_a (get_potato_28_a cat_129))) 1)))))
(assert (and (= cat_139 (+ cat_145 1)) (spoon_64 (+ cat_145 1))))
(assert (not (<= cat_139 30)))
(check-sat)
(exit)
