(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(define-fun spoon_9 ((kitten_7 Bool)) Int (ite (= kitten_7 true) 1 0))
(define-fun spoon_10 ((kitten_8 Int)) Bool (ite (= kitten_8 0) false true))
(define-fun spoon_11 ((kitten_9 Int)) Bool (or (= kitten_9 0) (= kitten_9 1)))
(declare-fun spoon_12 (Bool) potato_5)
(declare-fun spoon_13 (potato_5) Bool)
(declare-fun spoon_14 (potato_5) Bool)
(declare-sort potato_10 0)
(define-fun spoon_15 ((kitten_10 Int)) Bool (and (<= 0 kitten_10) (<= kitten_10 150000)))
(declare-fun spoon_16 (Int) potato_5)
(declare-fun spoon_17 (potato_5) Bool)
(declare-fun spoon_18 (potato_5) Int)
(declare-fun spoon_19 (potato_10 potato_10) Bool)
(declare-const cat_20 potato_10)
(declare-datatypes () ((potato_11 (mk_potato_11 (get_potato_11_a potato_10)))))
(define-fun spoon_21 ((kitten_11 potato_11)) potato_10 (get_potato_11_a kitten_11))
(define-fun spoon_22 ((kitten_12 Int) (kitten_13 Bool) (kitten_14 Bool) (kitten_15 Bool)) Bool (=> (or (= kitten_13 true) (<= 0 150000)) (spoon_15 kitten_12)))
(declare-fun spoon_23 (potato_10) Int)
(declare-fun spoon_24 (Int) potato_10)
(assert (forall ((kitten_16 potato_10)) (! (= (spoon_24 (spoon_23 kitten_16)) kitten_16) :pattern ((spoon_23 kitten_16)))))
(assert (forall ((kitten_17 potato_10)) (! (spoon_15 (spoon_23 kitten_17)) :pattern ((spoon_23 kitten_17)))))
(assert (forall ((kitten_18 Int)) (! (=> (spoon_15 kitten_18) (= (spoon_23 (spoon_24 kitten_18)) kitten_18)) :pattern ((spoon_23 (spoon_24 kitten_18))))))
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_10) (get_potato_12_b potato_10)))))
(define-fun spoon_25 ((kitten_19 potato_12)) potato_10 (get_potato_12_a kitten_19))
(define-fun spoon_26 ((kitten_20 potato_12)) potato_10 (get_potato_12_b kitten_20))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_12)))))
(define-fun spoon_27 ((kitten_21 potato_13)) potato_12 (get_potato_13_a kitten_21))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_12)))))
(define-fun spoon_28 ((kitten_22 potato_14)) potato_12 (get_potato_14_a kitten_22))
(define-fun spoon_29 ((kitten_23 potato_14) (kitten_24 potato_14)) Bool (ite (and (= (spoon_23 (get_potato_12_a (get_potato_14_a kitten_23))) (spoon_23 (get_potato_12_a (get_potato_14_a kitten_24)))) (= (spoon_23 (get_potato_12_b (get_potato_14_a kitten_23))) (spoon_23 (get_potato_12_b (get_potato_14_a kitten_24))))) true false))
(declare-const cat_30 Int)
(declare-fun spoon_31 (potato_14) Int)
(declare-const cat_32 Int)
(declare-fun spoon_33 (potato_14) Int)
(assert (<= 0 cat_30))
(assert (forall ((kitten_25 potato_14)) (<= 0 (spoon_31 kitten_25))))
(assert (<= 0 cat_32))
(assert (forall ((kitten_26 potato_14)) (<= 0 (spoon_33 kitten_26))))
(declare-const cat_34 Int)
(declare-const cat_35 Int)
(declare-const cat_36 Int)
(assert (<= 0 cat_34))
(assert (< cat_34 cat_35))
(assert (<= 0 cat_36))
(declare-const cat_37 Int)
(declare-const cat_38 Int)
(declare-const cat_39 Int)
(assert (<= 0 cat_37))
(assert (< cat_37 cat_38))
(assert (<= 0 cat_39))
(declare-fun spoon_40 (potato_14 potato_14) Bool)
(declare-const cat_41 potato_14)
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_14)))))
(define-fun spoon_42 ((kitten_27 potato_15)) potato_14 (get_potato_15_a kitten_27))
(declare-sort potato_16 0)
(define-fun spoon_43 ((kitten_28 Int)) Bool (and (<= 3 kitten_28) (<= kitten_28 30)))
(declare-fun spoon_44 (Int) potato_5)
(declare-fun spoon_45 (potato_5) Bool)
(declare-fun spoon_46 (potato_5) Int)
(declare-fun spoon_47 (potato_16 potato_16) Bool)
(declare-const cat_48 potato_16)
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_16)))))
(define-fun spoon_49 ((kitten_29 potato_17)) potato_16 (get_potato_17_a kitten_29))
(declare-fun spoon_50 (potato_16) Int)
(declare-fun spoon_51 (Int) potato_16)
(assert (forall ((kitten_30 potato_16)) (! (= (spoon_51 (spoon_50 kitten_30)) kitten_30) :pattern ((spoon_50 kitten_30)))))
(assert (forall ((kitten_31 potato_16)) (! (spoon_43 (spoon_50 kitten_31)) :pattern ((spoon_50 kitten_31)))))
(assert (forall ((kitten_32 Int)) (! (=> (spoon_43 kitten_32) (= (spoon_50 (spoon_51 kitten_32)) kitten_32)) :pattern ((spoon_50 (spoon_51 kitten_32))))))
(declare-fun spoon_52 (Int) Int)
(define-fun spoon_53 ((kitten_33 Float32)) Bool (and (fp.isInfinite kitten_33) (fp.isPositive kitten_33)))
(define-fun spoon_54 ((kitten_34 Float32)) Bool (and (fp.isInfinite kitten_34) (fp.isNegative kitten_34)))
(define-fun spoon_55 ((kitten_35 Float32)) Bool (and (fp.isZero kitten_35) (fp.isPositive kitten_35)))
(define-fun spoon_56 ((kitten_36 Float32)) Bool (and (fp.isZero kitten_36) (fp.isNegative kitten_36)))
(declare-fun spoon_57 (RoundingMode Int) Float32)
(declare-fun spoon_58 (RoundingMode Float32) Int)
(declare-const cat_59 Int)
(define-fun spoon_60 ((kitten_37 Int)) Bool (and (<= (- cat_59) kitten_37) (<= kitten_37 cat_59)))
(define-fun spoon_61 ((kitten_38 Int)) Bool (and (<= (- 16777216) kitten_38) (<= kitten_38 16777216)))
(define-fun spoon_62 ((kitten_39 Float32) (kitten_40 Float32)) Bool (or (and (fp.isPositive kitten_39) (fp.isPositive kitten_40)) (and (fp.isNegative kitten_39) (fp.isNegative kitten_40))))
(define-fun spoon_63 ((kitten_41 Float32) (kitten_42 Float32)) Bool (or (and (fp.isPositive kitten_41) (fp.isNegative kitten_42)) (and (fp.isNegative kitten_41) (fp.isPositive kitten_42))))
(define-fun spoon_64 ((kitten_43 Float32) (kitten_44 Float32) (kitten_45 Float32)) Bool (and (=> (spoon_62 kitten_44 kitten_45) (fp.isPositive kitten_43)) (=> (spoon_63 kitten_44 kitten_45) (fp.isNegative kitten_43))))
(define-fun spoon_65 ((kitten_46 Real)) Real (* kitten_46 kitten_46))
(declare-fun spoon_66 (Real) Real)
(define-fun spoon_67 ((kitten_47 Float32) (kitten_48 Real)) Bool (or (and (fp.isPositive kitten_47) (< 0.0 kitten_48)) (and (fp.isNegative kitten_47) (< kitten_48 0.0))))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a Float32)))))
(declare-sort potato_19 0)
(define-fun spoon_68 ((kitten_49 Float32)) Bool (and (spoon_1 kitten_49) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_49) (fp.leq kitten_49 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_69 (potato_19 potato_19) Bool)
(declare-fun spoon_70 (Float32) potato_5)
(declare-fun spoon_71 (potato_5) Bool)
(declare-fun spoon_72 (potato_5) Float32)
(declare-const cat_73 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_74 ((kitten_50 potato_20)) potato_19 (get_potato_20_a kitten_50))
(declare-fun spoon_75 (potato_19) Float32)
(declare-fun spoon_76 (Float32) potato_19)
(assert (forall ((kitten_51 potato_19)) (! (= (spoon_76 (spoon_75 kitten_51)) kitten_51) :pattern ((spoon_75 kitten_51)))))
(assert (forall ((kitten_52 potato_19)) (! (spoon_68 (spoon_75 kitten_52)) :pattern ((spoon_75 kitten_52)))))
(assert (forall ((kitten_53 Float32)) (! (=> (spoon_68 kitten_53) (= (spoon_75 (spoon_76 kitten_53)) kitten_53)) :pattern ((spoon_75 (spoon_76 kitten_53))))))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_19) (get_potato_21_b potato_19)))))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_77 ((kitten_54 potato_22)) potato_21 (get_potato_22_a kitten_54))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21)))))
(define-fun spoon_78 ((kitten_55 potato_23)) potato_21 (get_potato_23_a kitten_55))
(define-fun spoon_79 ((kitten_56 potato_23) (kitten_57 potato_23)) Bool (ite (and (= (spoon_75 (get_potato_21_a (get_potato_23_a kitten_56))) (spoon_75 (get_potato_21_a (get_potato_23_a kitten_57)))) (= (spoon_75 (get_potato_21_b (get_potato_23_a kitten_56))) (spoon_75 (get_potato_21_b (get_potato_23_a kitten_57))))) true false))
(declare-const cat_80 Int)
(declare-fun spoon_81 (potato_23) Int)
(declare-const cat_82 Int)
(declare-fun spoon_83 (potato_23) Int)
(assert (<= 0 cat_80))
(assert (forall ((kitten_58 potato_23)) (<= 0 (spoon_81 kitten_58))))
(assert (<= 0 cat_82))
(assert (forall ((kitten_59 potato_23)) (<= 0 (spoon_83 kitten_59))))
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(declare-const cat_86 Int)
(assert (<= 0 cat_84))
(assert (< cat_84 cat_85))
(assert (<= 0 cat_86))
(declare-const cat_87 Int)
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(assert (<= 0 cat_87))
(assert (< cat_87 cat_88))
(assert (<= 0 cat_89))
(declare-fun spoon_90 (potato_23 potato_23) Bool)
(declare-const cat_91 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_92 ((kitten_60 potato_24)) potato_23 (get_potato_24_a kitten_60))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a (Array Int potato_23))))))
(declare-fun spoon_93 ((Array Int potato_23) Int Int) (Array Int potato_23))
(assert (forall ((kitten_61 (Array Int potato_23))) (forall ((kitten_62 Int)) (! (= (spoon_93 kitten_61 kitten_62 kitten_62) kitten_61) :pattern ((spoon_93 kitten_61 kitten_62 kitten_62))))))
(assert (forall ((kitten_63 (Array Int potato_23))) (forall ((kitten_64 Int)) (forall ((kitten_65 Int)) (forall ((kitten_66 Int)) (! (= (select (spoon_93 kitten_63 kitten_64 kitten_65) kitten_66) (select kitten_63 (- kitten_66 (- kitten_65 kitten_64)))) :pattern ((select (spoon_93 kitten_63 kitten_64 kitten_65) kitten_66))))))))
(declare-fun spoon_94 ((Array Int potato_23) Int Int (Array Int potato_23) Int Int) (Array Int potato_23))
(assert (forall ((kitten_67 (Array Int potato_23)) (kitten_68 (Array Int potato_23))) (forall ((kitten_69 Int) (kitten_70 Int) (kitten_71 Int) (kitten_72 Int)) (forall ((kitten_73 Int)) (! (and (=> (and (<= kitten_69 kitten_73) (<= kitten_73 kitten_70)) (= (select (spoon_94 kitten_67 kitten_69 kitten_70 kitten_68 kitten_71 kitten_72) kitten_73) (select kitten_67 kitten_73))) (=> (< kitten_70 kitten_73) (= (select (spoon_94 kitten_67 kitten_69 kitten_70 kitten_68 kitten_71 kitten_72) kitten_73) (select kitten_68 (+ (- kitten_73 kitten_70) (- kitten_71 1)))))) :pattern ((select (spoon_94 kitten_67 kitten_69 kitten_70 kitten_68 kitten_71 kitten_72) kitten_73)))))))
(declare-fun spoon_95 (potato_23 Int) (Array Int potato_23))
(assert (forall ((kitten_74 potato_23)) (forall ((kitten_75 Int)) (! (= (select (spoon_95 kitten_74 kitten_75) kitten_75) kitten_74) :pattern ((select (spoon_95 kitten_74 kitten_75) kitten_75))))))
(define-fun spoon_96 ((kitten_76 (Array Int potato_23)) (kitten_77 Int) (kitten_78 Int) (kitten_79 (Array Int potato_23)) (kitten_80 Int) (kitten_81 Int)) Bool (ite (and (ite (<= kitten_77 kitten_78) (and (<= kitten_80 kitten_81) (= (- kitten_78 kitten_77) (- kitten_81 kitten_80))) (< kitten_81 kitten_80)) (forall ((kitten_82 Int)) (=> (and (<= kitten_77 kitten_82) (<= kitten_82 kitten_78)) (= (spoon_79 (select kitten_76 kitten_82) (select kitten_79 (+ (- kitten_80 kitten_77) kitten_82))) true)))) true false))
(assert (forall ((kitten_83 (Array Int potato_23)) (kitten_84 (Array Int potato_23))) (forall ((kitten_85 Int) (kitten_86 Int) (kitten_87 Int) (kitten_88 Int)) (=> (= (spoon_96 kitten_84 kitten_87 kitten_88 kitten_83 kitten_85 kitten_86) true) (and (ite (<= kitten_85 kitten_86) (and (<= kitten_87 kitten_88) (= (- kitten_86 kitten_85) (- kitten_88 kitten_87))) (< kitten_88 kitten_87)) (forall ((kitten_89 Int)) (=> (and (<= kitten_85 kitten_89) (<= kitten_89 kitten_86)) (= (spoon_79 (select kitten_83 kitten_89) (select kitten_84 (+ (- kitten_87 kitten_85) kitten_89))) true))))))))
(declare-const cat_97 (Array Int potato_23))
(declare-const cat_98 Int)
(declare-fun spoon_99 ((Array Int potato_23)) Int)
(declare-const cat_100 Int)
(declare-fun spoon_101 ((Array Int potato_23)) Int)
(declare-const cat_102 Int)
(declare-fun spoon_103 ((Array Int potato_23)) Int)
(assert (<= 0 cat_98))
(assert (forall ((kitten_90 (Array Int potato_23))) (<= 0 (spoon_99 kitten_90))))
(assert (<= 0 cat_100))
(assert (forall ((kitten_91 (Array Int potato_23))) (<= 0 (spoon_101 kitten_91))))
(assert (<= 0 cat_102))
(assert (forall ((kitten_92 (Array Int potato_23))) (<= 0 (spoon_103 kitten_92))))
(declare-fun spoon_104 ((Array Int potato_23) (Array Int potato_23)) Bool)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_16) (get_potato_26_b (Array Int potato_23))))))
(define-fun spoon_105 ((kitten_93 potato_26)) potato_16 (get_potato_26_a kitten_93))
(define-fun spoon_106 ((kitten_94 potato_26)) (Array Int potato_23) (get_potato_26_b kitten_94))
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_107 ((kitten_95 potato_27)) potato_26 (get_potato_27_a kitten_95))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_26)))))
(define-fun spoon_108 ((kitten_96 potato_28)) potato_26 (get_potato_28_a kitten_96))
(define-fun spoon_109 ((kitten_97 potato_28) (kitten_98 potato_28)) Bool (ite (and (= (spoon_50 (get_potato_26_a (get_potato_28_a kitten_97))) (spoon_50 (get_potato_26_a (get_potato_28_a kitten_98)))) (= (spoon_96 (get_potato_26_b (get_potato_28_a kitten_97)) 1 30 (get_potato_26_b (get_potato_28_a kitten_98)) 1 30) true)) true false))
(declare-const cat_110 Int)
(declare-fun spoon_111 (potato_28) Int)
(declare-const cat_112 Int)
(declare-fun spoon_113 (potato_28) Int)
(assert (<= 0 cat_110))
(assert (forall ((kitten_99 potato_28)) (<= 0 (spoon_111 kitten_99))))
(assert (<= 0 cat_112))
(assert (forall ((kitten_100 potato_28)) (<= 0 (spoon_113 kitten_100))))
(declare-const cat_114 Int)
(declare-const cat_115 Int)
(declare-const cat_116 Int)
(assert (<= 0 cat_114))
(assert (< cat_114 cat_115))
(assert (<= 0 cat_116))
(declare-const cat_117 Int)
(declare-const cat_118 Int)
(declare-const cat_119 Int)
(assert (<= 0 cat_117))
(assert (< cat_117 cat_118))
(assert (<= 0 cat_119))
(declare-fun spoon_120 (potato_28 potato_28) Bool)
(declare-const cat_121 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_122 ((kitten_101 potato_29)) potato_28 (get_potato_29_a kitten_101))
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_28) (get_potato_30_b potato_14)))))
(define-fun spoon_123 ((kitten_102 potato_30)) potato_28 (get_potato_30_a kitten_102))
(define-fun spoon_124 ((kitten_103 potato_30)) potato_14 (get_potato_30_b kitten_103))
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_125 ((kitten_104 potato_31)) potato_30 (get_potato_31_a kitten_104))
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_30)))))
(define-fun spoon_126 ((kitten_105 potato_32)) potato_30 (get_potato_32_a kitten_105))
(define-fun spoon_127 ((kitten_106 potato_32) (kitten_107 potato_32)) Bool (ite (and (= (spoon_109 (get_potato_30_a (get_potato_32_a kitten_106)) (get_potato_30_a (get_potato_32_a kitten_107))) true) (= (spoon_29 (get_potato_30_b (get_potato_32_a kitten_106)) (get_potato_30_b (get_potato_32_a kitten_107))) true)) true false))
(declare-const cat_128 Int)
(declare-fun spoon_129 (potato_32) Int)
(declare-const cat_130 Int)
(declare-fun spoon_131 (potato_32) Int)
(assert (<= 0 cat_128))
(assert (forall ((kitten_108 potato_32)) (<= 0 (spoon_129 kitten_108))))
(assert (<= 0 cat_130))
(assert (forall ((kitten_109 potato_32)) (<= 0 (spoon_131 kitten_109))))
(declare-const cat_132 Int)
(declare-const cat_133 Int)
(declare-const cat_134 Int)
(assert (<= 0 cat_132))
(assert (< cat_132 cat_133))
(assert (<= 0 cat_134))
(declare-const cat_135 Int)
(declare-const cat_136 Int)
(declare-const cat_137 Int)
(assert (<= 0 cat_135))
(assert (< cat_135 cat_136))
(assert (<= 0 cat_137))
(declare-fun spoon_138 (potato_32 potato_32) Bool)
(declare-const cat_139 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_140 ((kitten_110 potato_33)) potato_32 (get_potato_33_a kitten_110))
(declare-sort potato_34 0)
(define-fun spoon_141 ((kitten_111 Int)) Bool (and (<= 1 kitten_111) (<= kitten_111 32)))
(declare-fun spoon_142 (Int) potato_5)
(declare-fun spoon_143 (potato_5) Bool)
(declare-fun spoon_144 (potato_5) Int)
(declare-fun spoon_145 (potato_34 potato_34) Bool)
(declare-const cat_146 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_147 ((kitten_112 potato_35)) potato_34 (get_potato_35_a kitten_112))
(define-fun spoon_148 ((kitten_113 Int) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool)) Bool (=> (or (= kitten_114 true) (<= 1 32)) (spoon_141 kitten_113)))
(declare-fun spoon_149 (potato_34) Int)
(declare-fun spoon_150 (Int) potato_34)
(assert (forall ((kitten_117 potato_34)) (! (= (spoon_150 (spoon_149 kitten_117)) kitten_117) :pattern ((spoon_149 kitten_117)))))
(assert (forall ((kitten_118 potato_34)) (! (spoon_141 (spoon_149 kitten_118)) :pattern ((spoon_149 kitten_118)))))
(assert (forall ((kitten_119 Int)) (! (=> (spoon_141 kitten_119) (= (spoon_149 (spoon_150 kitten_119)) kitten_119)) :pattern ((spoon_149 (spoon_150 kitten_119))))))
(declare-datatypes () ((potato_36 (mk_potato_36 (get_potato_36_a (Array Int potato_32))))))
(declare-fun spoon_151 ((Array Int potato_32) Int Int) (Array Int potato_32))
(assert (forall ((kitten_120 (Array Int potato_32))) (forall ((kitten_121 Int)) (! (= (spoon_151 kitten_120 kitten_121 kitten_121) kitten_120) :pattern ((spoon_151 kitten_120 kitten_121 kitten_121))))))
(assert (forall ((kitten_122 (Array Int potato_32))) (forall ((kitten_123 Int)) (forall ((kitten_124 Int)) (forall ((kitten_125 Int)) (! (= (select (spoon_151 kitten_122 kitten_123 kitten_124) kitten_125) (select kitten_122 (- kitten_125 (- kitten_124 kitten_123)))) :pattern ((select (spoon_151 kitten_122 kitten_123 kitten_124) kitten_125))))))))
(declare-fun spoon_152 ((Array Int potato_32) Int Int (Array Int potato_32) Int Int) (Array Int potato_32))
(assert (forall ((kitten_126 (Array Int potato_32)) (kitten_127 (Array Int potato_32))) (forall ((kitten_128 Int) (kitten_129 Int) (kitten_130 Int) (kitten_131 Int)) (forall ((kitten_132 Int)) (! (and (=> (and (<= kitten_128 kitten_132) (<= kitten_132 kitten_129)) (= (select (spoon_152 kitten_126 kitten_128 kitten_129 kitten_127 kitten_130 kitten_131) kitten_132) (select kitten_126 kitten_132))) (=> (< kitten_129 kitten_132) (= (select (spoon_152 kitten_126 kitten_128 kitten_129 kitten_127 kitten_130 kitten_131) kitten_132) (select kitten_127 (+ (- kitten_132 kitten_129) (- kitten_130 1)))))) :pattern ((select (spoon_152 kitten_126 kitten_128 kitten_129 kitten_127 kitten_130 kitten_131) kitten_132)))))))
(declare-fun spoon_153 (potato_32 Int) (Array Int potato_32))
(assert (forall ((kitten_133 potato_32)) (forall ((kitten_134 Int)) (! (= (select (spoon_153 kitten_133 kitten_134) kitten_134) kitten_133) :pattern ((select (spoon_153 kitten_133 kitten_134) kitten_134))))))
(define-fun spoon_154 ((kitten_135 (Array Int potato_32)) (kitten_136 Int) (kitten_137 Int) (kitten_138 (Array Int potato_32)) (kitten_139 Int) (kitten_140 Int)) Bool (ite (and (ite (<= kitten_136 kitten_137) (and (<= kitten_139 kitten_140) (= (- kitten_137 kitten_136) (- kitten_140 kitten_139))) (< kitten_140 kitten_139)) (forall ((kitten_141 Int)) (=> (and (<= kitten_136 kitten_141) (<= kitten_141 kitten_137)) (= (spoon_127 (select kitten_135 kitten_141) (select kitten_138 (+ (- kitten_139 kitten_136) kitten_141))) true)))) true false))
(assert (forall ((kitten_142 (Array Int potato_32)) (kitten_143 (Array Int potato_32))) (forall ((kitten_144 Int) (kitten_145 Int) (kitten_146 Int) (kitten_147 Int)) (=> (= (spoon_154 kitten_143 kitten_146 kitten_147 kitten_142 kitten_144 kitten_145) true) (and (ite (<= kitten_144 kitten_145) (and (<= kitten_146 kitten_147) (= (- kitten_145 kitten_144) (- kitten_147 kitten_146))) (< kitten_147 kitten_146)) (forall ((kitten_148 Int)) (=> (and (<= kitten_144 kitten_148) (<= kitten_148 kitten_145)) (= (spoon_127 (select kitten_142 kitten_148) (select kitten_143 (+ (- kitten_146 kitten_144) kitten_148))) true))))))))
(declare-const cat_155 (Array Int potato_32))
(declare-const cat_156 Int)
(declare-fun spoon_157 ((Array Int potato_32)) Int)
(declare-const cat_158 Int)
(declare-fun spoon_159 ((Array Int potato_32)) Int)
(declare-const cat_160 Int)
(declare-fun spoon_161 ((Array Int potato_32)) Int)
(assert (<= 0 cat_156))
(assert (forall ((kitten_149 (Array Int potato_32))) (<= 0 (spoon_157 kitten_149))))
(assert (<= 0 cat_158))
(assert (forall ((kitten_150 (Array Int potato_32))) (<= 0 (spoon_159 kitten_150))))
(assert (<= 0 cat_160))
(assert (forall ((kitten_151 (Array Int potato_32))) (<= 0 (spoon_161 kitten_151))))
(declare-fun spoon_162 ((Array Int potato_32) (Array Int potato_32)) Bool)
(declare-datatypes () ((potato_37 (mk_potato_37 (get_potato_37_a potato_34) (get_potato_37_b (Array Int potato_32))))))
(define-fun spoon_163 ((kitten_152 potato_37)) potato_34 (get_potato_37_a kitten_152))
(define-fun spoon_164 ((kitten_153 potato_37)) (Array Int potato_32) (get_potato_37_b kitten_153))
(declare-datatypes () ((potato_38 (mk_potato_38 (get_potato_38_a potato_37)))))
(define-fun spoon_165 ((kitten_154 potato_38)) potato_37 (get_potato_38_a kitten_154))
(declare-datatypes () ((potato_39 (mk_potato_39 (get_potato_39_a potato_37)))))
(define-fun spoon_166 ((kitten_155 potato_39)) potato_37 (get_potato_39_a kitten_155))
(define-fun spoon_167 ((kitten_156 potato_39) (kitten_157 potato_39)) Bool (ite (and (= (spoon_149 (get_potato_37_a (get_potato_39_a kitten_156))) (spoon_149 (get_potato_37_a (get_potato_39_a kitten_157)))) (= (spoon_154 (get_potato_37_b (get_potato_39_a kitten_156)) 1 32 (get_potato_37_b (get_potato_39_a kitten_157)) 1 32) true)) true false))
(declare-const cat_168 Int)
(declare-fun spoon_169 (potato_39) Int)
(declare-const cat_170 Int)
(declare-fun spoon_171 (potato_39) Int)
(assert (<= 0 cat_168))
(assert (forall ((kitten_158 potato_39)) (<= 0 (spoon_169 kitten_158))))
(assert (<= 0 cat_170))
(assert (forall ((kitten_159 potato_39)) (<= 0 (spoon_171 kitten_159))))
(declare-const cat_172 Int)
(declare-const cat_173 Int)
(declare-const cat_174 Int)
(assert (<= 0 cat_172))
(assert (< cat_172 cat_173))
(assert (<= 0 cat_174))
(declare-const cat_175 Int)
(declare-const cat_176 Int)
(declare-const cat_177 Int)
(assert (<= 0 cat_175))
(assert (< cat_175 cat_176))
(assert (<= 0 cat_177))
(declare-fun spoon_178 (potato_39 potato_39) Bool)
(declare-const cat_179 potato_39)
(declare-datatypes () ((potato_40 (mk_potato_40 (get_potato_40_a potato_39)))))
(define-fun spoon_180 ((kitten_160 potato_40)) potato_39 (get_potato_40_a kitten_160))
(declare-const cat_181 Int)
(declare-const cat_182 Int)
(declare-const cat_183 potato_39)
(declare-const cat_184 Int)
(declare-const cat_185 Int)
(declare-fun spoon_186 (Int potato_32) potato_32)
(declare-fun spoon_187 (potato_32 Int potato_32) Bool)
(assert true)
(declare-const cat_188 Int)
(declare-const cat_189 Int)
(declare-const cat_190 Int)
(define-fun spoon_191 ((kitten_161 Float32) (kitten_162 Bool) (kitten_163 Bool) (kitten_164 Bool)) Bool (=> (or (= kitten_162 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_68 kitten_161)))
(define-fun spoon_192 ((kitten_165 Int) (kitten_166 Bool) (kitten_167 Bool) (kitten_168 Bool)) Bool (=> (or (= kitten_166 true) (<= 3 30)) (spoon_43 kitten_165)))
(declare-const cat_193 potato_34)
(declare-const cat_194 (Array Int potato_32))
(declare-const cat_195 potato_34)
(declare-const cat_196 (Array Int potato_32))
(declare-const cat_197 potato_34)
(declare-const cat_198 (Array Int potato_32))
(assert (spoon_15 cat_181))
(assert (= cat_195 cat_193))
(assert (= cat_196 cat_194))
(assert (= (mk_potato_37 cat_197 cat_198) (get_potato_39_a cat_183)))
(assert (= (spoon_149 cat_197) cat_188))
(assert (spoon_141 cat_188))
(assert (<= 1 cat_188))
(assert (not (<= 1 1)))
(check-sat)
(exit)
