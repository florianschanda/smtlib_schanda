(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_26 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_27 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_27 potato_11)) (! (= (spoon_39 (spoon_38 kitten_27)) kitten_27) :pattern ((spoon_38 kitten_27)))))
(assert (forall ((kitten_28 potato_11)) (! (spoon_31 (spoon_38 kitten_28)) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_31 kitten_29) (= (spoon_38 (spoon_39 kitten_29)) kitten_29)) :pattern ((spoon_38 (spoon_39 kitten_29))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_42 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_44 kitten_34))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_46 kitten_35))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10010011 #b00000001101101110000000)))))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_63 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_56 kitten_39)))
(declare-sort potato_19 0)
(define-fun spoon_64 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_65 (potato_19 potato_19) Bool)
(declare-fun spoon_66 (Float32) potato_5)
(declare-fun spoon_67 (potato_5) Bool)
(declare-fun spoon_68 (potato_5) Float32)
(declare-const cat_69 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_70 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(define-fun spoon_71 ((kitten_45 Float32) (kitten_46 Bool) (kitten_47 Bool) (kitten_48 Bool)) Bool (=> (or (= kitten_46 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_64 kitten_45)))
(declare-sort potato_21 0)
(define-fun spoon_72 ((kitten_49 Int)) Bool (and (<= 1 kitten_49) (<= kitten_49 30)))
(declare-fun spoon_73 (Int) potato_5)
(declare-fun spoon_74 (potato_5) Bool)
(declare-fun spoon_75 (potato_5) Int)
(declare-fun spoon_76 (potato_21 potato_21) Bool)
(declare-const cat_77 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_78 ((kitten_50 potato_22)) potato_21 (get_potato_22_a kitten_50))
(define-fun spoon_79 ((kitten_51 Int) (kitten_52 Bool) (kitten_53 Bool) (kitten_54 Bool)) Bool (=> (or (= kitten_52 true) (<= 1 30)) (spoon_72 kitten_51)))
(declare-sort potato_23 0)
(define-fun spoon_80 ((kitten_55 Int)) Bool (and (<= 3 kitten_55) (<= kitten_55 30)))
(declare-fun spoon_81 (Int) potato_5)
(declare-fun spoon_82 (potato_5) Bool)
(declare-fun spoon_83 (potato_5) Int)
(declare-fun spoon_84 (potato_23 potato_23) Bool)
(declare-const cat_85 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_86 ((kitten_56 potato_24)) potato_23 (get_potato_24_a kitten_56))
(declare-fun spoon_87 (potato_23) Int)
(declare-fun spoon_88 (Int) potato_23)
(assert (forall ((kitten_57 potato_23)) (! (= (spoon_88 (spoon_87 kitten_57)) kitten_57) :pattern ((spoon_87 kitten_57)))))
(assert (forall ((kitten_58 potato_23)) (! (spoon_80 (spoon_87 kitten_58)) :pattern ((spoon_87 kitten_58)))))
(assert (forall ((kitten_59 Int)) (! (=> (spoon_80 kitten_59) (= (spoon_87 (spoon_88 kitten_59)) kitten_59)) :pattern ((spoon_87 (spoon_88 kitten_59))))))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a (Array Int potato_15))))))
(declare-fun spoon_89 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_60 (Array Int potato_15))) (forall ((kitten_61 Int)) (! (= (spoon_89 kitten_60 kitten_61 kitten_61) kitten_60) :pattern ((spoon_89 kitten_60 kitten_61 kitten_61))))))
(assert (forall ((kitten_62 (Array Int potato_15))) (forall ((kitten_63 Int)) (forall ((kitten_64 Int)) (forall ((kitten_65 Int)) (! (= (select (spoon_89 kitten_62 kitten_63 kitten_64) kitten_65) (select kitten_62 (- kitten_65 (- kitten_64 kitten_63)))) :pattern ((select (spoon_89 kitten_62 kitten_63 kitten_64) kitten_65))))))))
(declare-fun spoon_90 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_66 (Array Int potato_15)) (kitten_67 (Array Int potato_15))) (forall ((kitten_68 Int) (kitten_69 Int) (kitten_70 Int) (kitten_71 Int)) (forall ((kitten_72 Int)) (! (and (=> (and (<= kitten_68 kitten_72) (<= kitten_72 kitten_69)) (= (select (spoon_90 kitten_66 kitten_68 kitten_69 kitten_67 kitten_70 kitten_71) kitten_72) (select kitten_66 kitten_72))) (=> (< kitten_69 kitten_72) (= (select (spoon_90 kitten_66 kitten_68 kitten_69 kitten_67 kitten_70 kitten_71) kitten_72) (select kitten_67 (+ (- kitten_72 kitten_69) (- kitten_70 1)))))) :pattern ((select (spoon_90 kitten_66 kitten_68 kitten_69 kitten_67 kitten_70 kitten_71) kitten_72)))))))
(declare-fun spoon_91 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_73 potato_15)) (forall ((kitten_74 Int)) (! (= (select (spoon_91 kitten_73 kitten_74) kitten_74) kitten_73) :pattern ((select (spoon_91 kitten_73 kitten_74) kitten_74))))))
(define-fun spoon_92 ((kitten_75 (Array Int potato_15)) (kitten_76 Int) (kitten_77 Int) (kitten_78 (Array Int potato_15)) (kitten_79 Int) (kitten_80 Int)) Bool (ite (and (ite (<= kitten_76 kitten_77) (and (<= kitten_79 kitten_80) (= (- kitten_77 kitten_76) (- kitten_80 kitten_79))) (< kitten_80 kitten_79)) (forall ((kitten_81 Int)) (=> (and (<= kitten_76 kitten_81) (<= kitten_81 kitten_77)) (= (spoon_42 (select kitten_75 kitten_81) (select kitten_78 (+ (- kitten_79 kitten_76) kitten_81))) true)))) true false))
(assert (forall ((kitten_82 (Array Int potato_15)) (kitten_83 (Array Int potato_15))) (forall ((kitten_84 Int) (kitten_85 Int) (kitten_86 Int) (kitten_87 Int)) (=> (= (spoon_92 kitten_83 kitten_86 kitten_87 kitten_82 kitten_84 kitten_85) true) (and (ite (<= kitten_84 kitten_85) (and (<= kitten_86 kitten_87) (= (- kitten_85 kitten_84) (- kitten_87 kitten_86))) (< kitten_87 kitten_86)) (forall ((kitten_88 Int)) (=> (and (<= kitten_84 kitten_88) (<= kitten_88 kitten_85)) (= (spoon_42 (select kitten_82 kitten_88) (select kitten_83 (+ (- kitten_86 kitten_84) kitten_88))) true))))))))
(declare-const cat_93 (Array Int potato_15))
(declare-const cat_94 Int)
(declare-fun spoon_95 ((Array Int potato_15)) Int)
(declare-const cat_96 Int)
(declare-fun spoon_97 ((Array Int potato_15)) Int)
(declare-const cat_98 Int)
(declare-fun spoon_99 ((Array Int potato_15)) Int)
(assert (<= 0 cat_94))
(assert (forall ((kitten_89 (Array Int potato_15))) (<= 0 (spoon_95 kitten_89))))
(assert (<= 0 cat_96))
(assert (forall ((kitten_90 (Array Int potato_15))) (<= 0 (spoon_97 kitten_90))))
(assert (<= 0 cat_98))
(assert (forall ((kitten_91 (Array Int potato_15))) (<= 0 (spoon_99 kitten_91))))
(declare-fun spoon_100 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_23) (get_potato_26_b (Array Int potato_15))))))
(define-fun spoon_101 ((kitten_92 potato_26)) potato_23 (get_potato_26_a kitten_92))
(define-fun spoon_102 ((kitten_93 potato_26)) (Array Int potato_15) (get_potato_26_b kitten_93))
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_103 ((kitten_94 potato_27)) potato_26 (get_potato_27_a kitten_94))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_26)))))
(define-fun spoon_104 ((kitten_95 potato_28)) potato_26 (get_potato_28_a kitten_95))
(define-fun spoon_105 ((kitten_96 potato_28) (kitten_97 potato_28)) Bool (ite (and (= (spoon_87 (get_potato_26_a (get_potato_28_a kitten_96))) (spoon_87 (get_potato_26_a (get_potato_28_a kitten_97)))) (= (spoon_92 (get_potato_26_b (get_potato_28_a kitten_96)) 1 30 (get_potato_26_b (get_potato_28_a kitten_97)) 1 30) true)) true false))
(declare-const cat_106 Int)
(declare-fun spoon_107 (potato_28) Int)
(declare-const cat_108 Int)
(declare-fun spoon_109 (potato_28) Int)
(assert (<= 0 cat_106))
(assert (forall ((kitten_98 potato_28)) (<= 0 (spoon_107 kitten_98))))
(assert (<= 0 cat_108))
(assert (forall ((kitten_99 potato_28)) (<= 0 (spoon_109 kitten_99))))
(declare-const cat_110 Int)
(declare-const cat_111 Int)
(declare-const cat_112 Int)
(assert (<= 0 cat_110))
(assert (< cat_110 cat_111))
(assert (<= 0 cat_112))
(declare-const cat_113 Int)
(declare-const cat_114 Int)
(declare-const cat_115 Int)
(assert (<= 0 cat_113))
(assert (< cat_113 cat_114))
(assert (<= 0 cat_115))
(declare-fun spoon_116 (potato_28 potato_28) Bool)
(declare-const cat_117 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_118 ((kitten_100 potato_29)) potato_28 (get_potato_29_a kitten_100))
(declare-fun spoon_119 (potato_15 potato_15 potato_15 potato_15) Float32)
(declare-fun spoon_120 (Float32 potato_15 potato_15 potato_15 potato_15) Bool)
(assert (forall ((kitten_101 potato_15) (kitten_102 potato_15) (kitten_103 potato_15) (kitten_104 potato_15)) (! (spoon_71 (spoon_119 kitten_101 kitten_102 kitten_103 kitten_104) true false true) :pattern ((spoon_119 kitten_101 kitten_102 kitten_103 kitten_104)))))
(declare-const cat_121 potato_15)
(declare-const cat_122 Int)
(declare-const cat_123 potato_15)
(declare-const cat_124 Int)
(declare-const cat_125 potato_28)
(declare-const cat_126 Int)
(declare-const cat_127 Float32)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(define-fun spoon_133 ((kitten_105 Float32) (kitten_106 Bool) (kitten_107 Bool) (kitten_108 Bool)) Bool (=> (or (= kitten_106 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_105)))
(define-fun spoon_134 ((kitten_109 Int) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (=> (or (= kitten_110 true) (<= 3 30)) (spoon_80 kitten_109)))
(declare-const cat_135 Bool)
(declare-const cat_136 Int)
(declare-const cat_137 Float32)
(declare-const cat_138 Bool)
(declare-const cat_139 Bool)
(declare-const cat_140 Int)
(declare-const cat_141 Int)
(assert (spoon_56 cat_127))
(assert (= cat_138 cat_135))
(assert (= cat_139 (spoon_26 0)))
(assert (=> (<= 1 30) (spoon_72 cat_136)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_64 cat_137)))
(assert (= cat_140 cat_136))
(assert (= cat_141 (spoon_87 (get_potato_26_a (get_potato_28_a cat_125)))))
(assert (<= 1 (spoon_87 (get_potato_26_a (get_potato_28_a cat_125)))))
(assert (not (<= (spoon_87 (get_potato_26_a (get_potato_28_a cat_125))) 30)))
(check-sat)
(exit)
