(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-const cat_13 Int)
(define-fun spoon_14 ((kitten_10 Int)) Bool (and (<= (- cat_13) kitten_10) (<= kitten_10 cat_13)))
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_16 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_17 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_18 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_16 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_17 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_19 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_20 (Real) Real)
(define-fun spoon_21 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_22 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_23 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_24 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_25 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_26 (Bool) potato_5)
(declare-fun spoon_27 (potato_5) Bool)
(declare-fun spoon_28 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_29 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_30 (potato_11 potato_11) Bool)
(declare-fun spoon_31 (Float32) potato_5)
(declare-fun spoon_32 (potato_5) Bool)
(declare-fun spoon_33 (potato_5) Float32)
(declare-const cat_34 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_35 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-fun spoon_36 (potato_11) Float32)
(declare-fun spoon_37 (Float32) potato_11)
(assert (forall ((kitten_27 potato_11)) (! (= (spoon_37 (spoon_36 kitten_27)) kitten_27) :pattern ((spoon_36 kitten_27)))))
(assert (forall ((kitten_28 potato_11)) (! (spoon_29 (spoon_36 kitten_28)) :pattern ((spoon_36 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_29 kitten_29) (= (spoon_36 (spoon_37 kitten_29)) kitten_29)) :pattern ((spoon_36 (spoon_37 kitten_29))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_38 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_39 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_40 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (ite (and (= (spoon_36 (get_potato_13_a (get_potato_15_a kitten_32))) (spoon_36 (get_potato_13_a (get_potato_15_a kitten_33)))) (= (spoon_36 (get_potato_13_b (get_potato_15_a kitten_32))) (spoon_36 (get_potato_13_b (get_potato_15_a kitten_33))))) true false))
(declare-const cat_41 Int)
(declare-fun spoon_42 (potato_15) Int)
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(assert (<= 0 cat_41))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_42 kitten_34))))
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-fun spoon_51 (potato_15 potato_15) Bool)
(declare-const cat_52 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_53 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-sort potato_17 0)
(define-fun spoon_54 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10010011 #b00000001101101110000000)))))
(declare-fun spoon_55 (potato_17 potato_17) Bool)
(declare-fun spoon_56 (Float32) potato_5)
(declare-fun spoon_57 (potato_5) Bool)
(declare-fun spoon_58 (potato_5) Float32)
(declare-const cat_59 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_60 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_61 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000))) (spoon_54 kitten_39)))
(declare-sort potato_19 0)
(define-fun spoon_62 ((kitten_43 Int)) Bool (and (<= 1 kitten_43) (<= kitten_43 30)))
(declare-fun spoon_63 (Int) potato_5)
(declare-fun spoon_64 (potato_5) Bool)
(declare-fun spoon_65 (potato_5) Int)
(declare-fun spoon_66 (potato_19 potato_19) Bool)
(declare-const cat_67 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_68 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(declare-sort potato_21 0)
(define-fun spoon_69 ((kitten_45 Int)) Bool (and (<= 3 kitten_45) (<= kitten_45 30)))
(declare-fun spoon_70 (Int) potato_5)
(declare-fun spoon_71 (potato_5) Bool)
(declare-fun spoon_72 (potato_5) Int)
(declare-fun spoon_73 (potato_21 potato_21) Bool)
(declare-const cat_74 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_75 ((kitten_46 potato_22)) potato_21 (get_potato_22_a kitten_46))
(declare-fun spoon_76 (potato_21) Int)
(declare-fun spoon_77 (Int) potato_21)
(assert (forall ((kitten_47 potato_21)) (! (= (spoon_77 (spoon_76 kitten_47)) kitten_47) :pattern ((spoon_76 kitten_47)))))
(assert (forall ((kitten_48 potato_21)) (! (spoon_69 (spoon_76 kitten_48)) :pattern ((spoon_76 kitten_48)))))
(assert (forall ((kitten_49 Int)) (! (=> (spoon_69 kitten_49) (= (spoon_76 (spoon_77 kitten_49)) kitten_49)) :pattern ((spoon_76 (spoon_77 kitten_49))))))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a (Array Int potato_15))))))
(declare-fun spoon_78 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_50 (Array Int potato_15))) (forall ((kitten_51 Int)) (! (= (spoon_78 kitten_50 kitten_51 kitten_51) kitten_50) :pattern ((spoon_78 kitten_50 kitten_51 kitten_51))))))
(assert (forall ((kitten_52 (Array Int potato_15))) (forall ((kitten_53 Int)) (forall ((kitten_54 Int)) (forall ((kitten_55 Int)) (! (= (select (spoon_78 kitten_52 kitten_53 kitten_54) kitten_55) (select kitten_52 (- kitten_55 (- kitten_54 kitten_53)))) :pattern ((select (spoon_78 kitten_52 kitten_53 kitten_54) kitten_55))))))))
(declare-fun spoon_79 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_56 (Array Int potato_15)) (kitten_57 (Array Int potato_15))) (forall ((kitten_58 Int) (kitten_59 Int) (kitten_60 Int) (kitten_61 Int)) (forall ((kitten_62 Int)) (! (and (=> (and (<= kitten_58 kitten_62) (<= kitten_62 kitten_59)) (= (select (spoon_79 kitten_56 kitten_58 kitten_59 kitten_57 kitten_60 kitten_61) kitten_62) (select kitten_56 kitten_62))) (=> (< kitten_59 kitten_62) (= (select (spoon_79 kitten_56 kitten_58 kitten_59 kitten_57 kitten_60 kitten_61) kitten_62) (select kitten_57 (+ (- kitten_62 kitten_59) (- kitten_60 1)))))) :pattern ((select (spoon_79 kitten_56 kitten_58 kitten_59 kitten_57 kitten_60 kitten_61) kitten_62)))))))
(declare-fun spoon_80 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_63 potato_15)) (forall ((kitten_64 Int)) (! (= (select (spoon_80 kitten_63 kitten_64) kitten_64) kitten_63) :pattern ((select (spoon_80 kitten_63 kitten_64) kitten_64))))))
(define-fun spoon_81 ((kitten_65 (Array Int potato_15)) (kitten_66 Int) (kitten_67 Int) (kitten_68 (Array Int potato_15)) (kitten_69 Int) (kitten_70 Int)) Bool (ite (and (ite (<= kitten_66 kitten_67) (and (<= kitten_69 kitten_70) (= (- kitten_67 kitten_66) (- kitten_70 kitten_69))) (< kitten_70 kitten_69)) (forall ((kitten_71 Int)) (=> (and (<= kitten_66 kitten_71) (<= kitten_71 kitten_67)) (= (spoon_40 (select kitten_65 kitten_71) (select kitten_68 (+ (- kitten_69 kitten_66) kitten_71))) true)))) true false))
(assert (forall ((kitten_72 (Array Int potato_15)) (kitten_73 (Array Int potato_15))) (forall ((kitten_74 Int) (kitten_75 Int) (kitten_76 Int) (kitten_77 Int)) (=> (= (spoon_81 kitten_73 kitten_76 kitten_77 kitten_72 kitten_74 kitten_75) true) (and (ite (<= kitten_74 kitten_75) (and (<= kitten_76 kitten_77) (= (- kitten_75 kitten_74) (- kitten_77 kitten_76))) (< kitten_77 kitten_76)) (forall ((kitten_78 Int)) (=> (and (<= kitten_74 kitten_78) (<= kitten_78 kitten_75)) (= (spoon_40 (select kitten_72 kitten_78) (select kitten_73 (+ (- kitten_76 kitten_74) kitten_78))) true))))))))
(declare-const cat_82 (Array Int potato_15))
(declare-const cat_83 Int)
(declare-fun spoon_84 ((Array Int potato_15)) Int)
(declare-const cat_85 Int)
(declare-fun spoon_86 ((Array Int potato_15)) Int)
(declare-const cat_87 Int)
(declare-fun spoon_88 ((Array Int potato_15)) Int)
(assert (<= 0 cat_83))
(assert (forall ((kitten_79 (Array Int potato_15))) (<= 0 (spoon_84 kitten_79))))
(assert (<= 0 cat_85))
(assert (forall ((kitten_80 (Array Int potato_15))) (<= 0 (spoon_86 kitten_80))))
(assert (<= 0 cat_87))
(assert (forall ((kitten_81 (Array Int potato_15))) (<= 0 (spoon_88 kitten_81))))
(declare-fun spoon_89 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_21) (get_potato_24_b (Array Int potato_15))))))
(define-fun spoon_90 ((kitten_82 potato_24)) potato_21 (get_potato_24_a kitten_82))
(define-fun spoon_91 ((kitten_83 potato_24)) (Array Int potato_15) (get_potato_24_b kitten_83))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_92 ((kitten_84 potato_25)) potato_24 (get_potato_25_a kitten_84))
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_24)))))
(define-fun spoon_93 ((kitten_85 potato_26)) potato_24 (get_potato_26_a kitten_85))
(define-fun spoon_94 ((kitten_86 potato_26) (kitten_87 potato_26)) Bool (ite (and (= (spoon_76 (get_potato_24_a (get_potato_26_a kitten_86))) (spoon_76 (get_potato_24_a (get_potato_26_a kitten_87)))) (= (spoon_81 (get_potato_24_b (get_potato_26_a kitten_86)) 1 30 (get_potato_24_b (get_potato_26_a kitten_87)) 1 30) true)) true false))
(declare-const cat_95 Int)
(declare-fun spoon_96 (potato_26) Int)
(declare-const cat_97 Int)
(declare-fun spoon_98 (potato_26) Int)
(assert (<= 0 cat_95))
(assert (forall ((kitten_88 potato_26)) (<= 0 (spoon_96 kitten_88))))
(assert (<= 0 cat_97))
(assert (forall ((kitten_89 potato_26)) (<= 0 (spoon_98 kitten_89))))
(declare-const cat_99 Int)
(declare-const cat_100 Int)
(declare-const cat_101 Int)
(assert (<= 0 cat_99))
(assert (< cat_99 cat_100))
(assert (<= 0 cat_101))
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(declare-const cat_104 Int)
(assert (<= 0 cat_102))
(assert (< cat_102 cat_103))
(assert (<= 0 cat_104))
(declare-fun spoon_105 (potato_26 potato_26) Bool)
(declare-const cat_106 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_107 ((kitten_90 potato_27)) potato_26 (get_potato_27_a kitten_90))
(declare-fun spoon_108 (potato_15 potato_26) Bool)
(declare-fun spoon_109 (Bool potato_15 potato_26) Bool)
(assert true)
(declare-const cat_110 potato_26)
(declare-const cat_111 Int)
(declare-const cat_112 potato_26)
(declare-const cat_113 Int)
(declare-const cat_114 Float32)
(declare-const cat_115 Int)
(declare-fun spoon_116 (potato_15 potato_15 potato_26 Float32) Bool)
(declare-fun spoon_117 (Bool potato_15 potato_15 potato_26 Float32) Bool)
(assert true)
(declare-const cat_118 Int)
(declare-const cat_119 Int)
(declare-const cat_120 Int)
(declare-const cat_121 Int)
(declare-const cat_122 Int)
(define-fun spoon_123 ((kitten_91 Float32) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_92 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_29 kitten_91)))
(define-fun spoon_124 ((kitten_95 Int) (kitten_96 Bool) (kitten_97 Bool) (kitten_98 Bool)) Bool (=> (or (= kitten_96 true) (<= 1 30)) (spoon_62 kitten_95)))
(define-fun spoon_125 ((kitten_99 Int) (kitten_100 Bool) (kitten_101 Bool) (kitten_102 Bool)) Bool (=> (or (= kitten_100 true) (<= 3 30)) (spoon_69 kitten_99)))
(declare-const cat_126 Bool)
(declare-const cat_127 Float32)
(declare-const cat_128 Bool)
(declare-const cat_129 Bool)
(assert (spoon_54 cat_114))
(assert (= cat_128 cat_126))
(assert (= cat_129 (spoon_24 0)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10010011 #b00000001101101110000000)) (spoon_54 cat_127)))
(assert (<= 1 (spoon_76 (get_potato_24_a (get_potato_26_a cat_110)))))
(assert (not (<= 1 1)))
(check-sat)
(exit)
