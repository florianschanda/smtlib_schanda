(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_26 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_27 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_27 potato_11)) (! (= (spoon_39 (spoon_38 kitten_27)) kitten_27) :pattern ((spoon_38 kitten_27)))))
(assert (forall ((kitten_28 potato_11)) (! (spoon_31 (spoon_38 kitten_28)) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_31 kitten_29) (= (spoon_38 (spoon_39 kitten_29)) kitten_29)) :pattern ((spoon_38 (spoon_39 kitten_29))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_42 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_44 kitten_34))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_46 kitten_35))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_37 Int)) Bool (and (<= 1 kitten_37) (<= kitten_37 30)))
(declare-fun spoon_57 (Int) potato_5)
(declare-fun spoon_58 (potato_5) Bool)
(declare-fun spoon_59 (potato_5) Int)
(declare-fun spoon_60 (potato_17 potato_17) Bool)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_63 ((kitten_39 Int) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (<= 1 30)) (spoon_56 kitten_39)))
(declare-sort potato_19 0)
(define-fun spoon_64 ((kitten_43 Int)) Bool (and (<= 3 kitten_43) (<= kitten_43 30)))
(declare-fun spoon_65 (Int) potato_5)
(declare-fun spoon_66 (potato_5) Bool)
(declare-fun spoon_67 (potato_5) Int)
(declare-fun spoon_68 (potato_19 potato_19) Bool)
(declare-const cat_69 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_70 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(declare-fun spoon_71 (potato_19) Int)
(declare-fun spoon_72 (Int) potato_19)
(assert (forall ((kitten_45 potato_19)) (! (= (spoon_72 (spoon_71 kitten_45)) kitten_45) :pattern ((spoon_71 kitten_45)))))
(assert (forall ((kitten_46 potato_19)) (! (spoon_64 (spoon_71 kitten_46)) :pattern ((spoon_71 kitten_46)))))
(assert (forall ((kitten_47 Int)) (! (=> (spoon_64 kitten_47) (= (spoon_71 (spoon_72 kitten_47)) kitten_47)) :pattern ((spoon_71 (spoon_72 kitten_47))))))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a (Array Int potato_15))))))
(declare-fun spoon_73 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_48 (Array Int potato_15))) (forall ((kitten_49 Int)) (! (= (spoon_73 kitten_48 kitten_49 kitten_49) kitten_48) :pattern ((spoon_73 kitten_48 kitten_49 kitten_49))))))
(assert (forall ((kitten_50 (Array Int potato_15))) (forall ((kitten_51 Int)) (forall ((kitten_52 Int)) (forall ((kitten_53 Int)) (! (= (select (spoon_73 kitten_50 kitten_51 kitten_52) kitten_53) (select kitten_50 (- kitten_53 (- kitten_52 kitten_51)))) :pattern ((select (spoon_73 kitten_50 kitten_51 kitten_52) kitten_53))))))))
(declare-fun spoon_74 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_54 (Array Int potato_15)) (kitten_55 (Array Int potato_15))) (forall ((kitten_56 Int) (kitten_57 Int) (kitten_58 Int) (kitten_59 Int)) (forall ((kitten_60 Int)) (! (and (=> (and (<= kitten_56 kitten_60) (<= kitten_60 kitten_57)) (= (select (spoon_74 kitten_54 kitten_56 kitten_57 kitten_55 kitten_58 kitten_59) kitten_60) (select kitten_54 kitten_60))) (=> (< kitten_57 kitten_60) (= (select (spoon_74 kitten_54 kitten_56 kitten_57 kitten_55 kitten_58 kitten_59) kitten_60) (select kitten_55 (+ (- kitten_60 kitten_57) (- kitten_58 1)))))) :pattern ((select (spoon_74 kitten_54 kitten_56 kitten_57 kitten_55 kitten_58 kitten_59) kitten_60)))))))
(declare-fun spoon_75 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_61 potato_15)) (forall ((kitten_62 Int)) (! (= (select (spoon_75 kitten_61 kitten_62) kitten_62) kitten_61) :pattern ((select (spoon_75 kitten_61 kitten_62) kitten_62))))))
(define-fun spoon_76 ((kitten_63 (Array Int potato_15)) (kitten_64 Int) (kitten_65 Int) (kitten_66 (Array Int potato_15)) (kitten_67 Int) (kitten_68 Int)) Bool (ite (and (ite (<= kitten_64 kitten_65) (and (<= kitten_67 kitten_68) (= (- kitten_65 kitten_64) (- kitten_68 kitten_67))) (< kitten_68 kitten_67)) (forall ((kitten_69 Int)) (=> (and (<= kitten_64 kitten_69) (<= kitten_69 kitten_65)) (= (spoon_42 (select kitten_63 kitten_69) (select kitten_66 (+ (- kitten_67 kitten_64) kitten_69))) true)))) true false))
(assert (forall ((kitten_70 (Array Int potato_15)) (kitten_71 (Array Int potato_15))) (forall ((kitten_72 Int) (kitten_73 Int) (kitten_74 Int) (kitten_75 Int)) (=> (= (spoon_76 kitten_71 kitten_74 kitten_75 kitten_70 kitten_72 kitten_73) true) (and (ite (<= kitten_72 kitten_73) (and (<= kitten_74 kitten_75) (= (- kitten_73 kitten_72) (- kitten_75 kitten_74))) (< kitten_75 kitten_74)) (forall ((kitten_76 Int)) (=> (and (<= kitten_72 kitten_76) (<= kitten_76 kitten_73)) (= (spoon_42 (select kitten_70 kitten_76) (select kitten_71 (+ (- kitten_74 kitten_72) kitten_76))) true))))))))
(declare-const cat_77 (Array Int potato_15))
(declare-const cat_78 Int)
(declare-fun spoon_79 ((Array Int potato_15)) Int)
(declare-const cat_80 Int)
(declare-fun spoon_81 ((Array Int potato_15)) Int)
(declare-const cat_82 Int)
(declare-fun spoon_83 ((Array Int potato_15)) Int)
(assert (<= 0 cat_78))
(assert (forall ((kitten_77 (Array Int potato_15))) (<= 0 (spoon_79 kitten_77))))
(assert (<= 0 cat_80))
(assert (forall ((kitten_78 (Array Int potato_15))) (<= 0 (spoon_81 kitten_78))))
(assert (<= 0 cat_82))
(assert (forall ((kitten_79 (Array Int potato_15))) (<= 0 (spoon_83 kitten_79))))
(declare-fun spoon_84 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_19) (get_potato_22_b (Array Int potato_15))))))
(define-fun spoon_85 ((kitten_80 potato_22)) potato_19 (get_potato_22_a kitten_80))
(define-fun spoon_86 ((kitten_81 potato_22)) (Array Int potato_15) (get_potato_22_b kitten_81))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_87 ((kitten_82 potato_23)) potato_22 (get_potato_23_a kitten_82))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_22)))))
(define-fun spoon_88 ((kitten_83 potato_24)) potato_22 (get_potato_24_a kitten_83))
(define-fun spoon_89 ((kitten_84 potato_24) (kitten_85 potato_24)) Bool (ite (and (= (spoon_71 (get_potato_22_a (get_potato_24_a kitten_84))) (spoon_71 (get_potato_22_a (get_potato_24_a kitten_85)))) (= (spoon_76 (get_potato_22_b (get_potato_24_a kitten_84)) 1 30 (get_potato_22_b (get_potato_24_a kitten_85)) 1 30) true)) true false))
(declare-const cat_90 Int)
(declare-fun spoon_91 (potato_24) Int)
(declare-const cat_92 Int)
(declare-fun spoon_93 (potato_24) Int)
(assert (<= 0 cat_90))
(assert (forall ((kitten_86 potato_24)) (<= 0 (spoon_91 kitten_86))))
(assert (<= 0 cat_92))
(assert (forall ((kitten_87 potato_24)) (<= 0 (spoon_93 kitten_87))))
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(declare-const cat_96 Int)
(assert (<= 0 cat_94))
(assert (< cat_94 cat_95))
(assert (<= 0 cat_96))
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(declare-const cat_99 Int)
(assert (<= 0 cat_97))
(assert (< cat_97 cat_98))
(assert (<= 0 cat_99))
(declare-fun spoon_100 (potato_24 potato_24) Bool)
(declare-const cat_101 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_102 ((kitten_88 potato_25)) potato_24 (get_potato_25_a kitten_88))
(declare-const cat_103 potato_15)
(declare-const cat_104 Int)
(declare-const cat_105 potato_24)
(declare-const cat_106 Int)
(declare-sort potato_26 0)
(define-fun spoon_107 ((kitten_89 Int)) Bool (and (<= 0 kitten_89) (<= kitten_89 2)))
(declare-fun spoon_108 (Int) potato_5)
(declare-fun spoon_109 (potato_5) Bool)
(declare-fun spoon_110 (potato_5) Int)
(declare-fun spoon_111 (potato_26 potato_26) Bool)
(declare-const cat_112 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_113 ((kitten_90 potato_27)) potato_26 (get_potato_27_a kitten_90))
(define-fun spoon_114 ((kitten_91 Int) (kitten_92 Bool) (kitten_93 Bool) (kitten_94 Bool)) Bool (=> (or (= kitten_92 true) (<= 0 2)) (spoon_107 kitten_91)))
(declare-fun spoon_115 (potato_15 potato_15 potato_15) Int)
(declare-fun spoon_116 (Int potato_15 potato_15 potato_15) Bool)
(assert (forall ((kitten_95 potato_15) (kitten_96 potato_15) (kitten_97 potato_15)) (! (spoon_114 (spoon_115 kitten_95 kitten_96 kitten_97) true false true) :pattern ((spoon_115 kitten_95 kitten_96 kitten_97)))))
(declare-fun spoon_117 (potato_15 potato_15) Bool)
(declare-fun spoon_118 (Bool potato_15 potato_15) Bool)
(assert true)
(declare-sort potato_28 0)
(define-fun spoon_119 ((kitten_98 Int)) Bool (and (<= (- 30) kitten_98) (<= kitten_98 30)))
(declare-fun spoon_120 (Int) potato_5)
(declare-fun spoon_121 (potato_5) Bool)
(declare-fun spoon_122 (potato_5) Int)
(declare-fun spoon_123 (potato_28 potato_28) Bool)
(declare-const cat_124 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_125 ((kitten_99 potato_29)) potato_28 (get_potato_29_a kitten_99))
(define-fun spoon_126 ((kitten_100 Int) (kitten_101 Bool) (kitten_102 Bool) (kitten_103 Bool)) Bool (=> (or (= kitten_101 true) (<= (- 30) 30)) (spoon_119 kitten_100)))
(declare-const cat_127 Int)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(declare-const cat_133 Int)
(declare-sort potato_30 0)
(define-fun spoon_134 ((kitten_104 Int)) Bool (and (<= (- 128) kitten_104) (<= kitten_104 127)))
(declare-fun spoon_135 (Int) potato_5)
(declare-fun spoon_136 (potato_5) Bool)
(declare-fun spoon_137 (potato_5) Int)
(declare-fun spoon_138 (potato_30 potato_30) Bool)
(declare-const cat_139 potato_30)
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_140 ((kitten_105 potato_31)) potato_30 (get_potato_31_a kitten_105))
(declare-fun spoon_141 (potato_30) Int)
(declare-fun spoon_142 (Int) potato_30)
(assert (forall ((kitten_106 potato_30)) (! (= (spoon_142 (spoon_141 kitten_106)) kitten_106) :pattern ((spoon_141 kitten_106)))))
(assert (forall ((kitten_107 potato_30)) (! (spoon_134 (spoon_141 kitten_107)) :pattern ((spoon_141 kitten_107)))))
(assert (forall ((kitten_108 Int)) (! (=> (spoon_134 kitten_108) (= (spoon_141 (spoon_142 kitten_108)) kitten_108)) :pattern ((spoon_141 (spoon_142 kitten_108))))))
(define-fun spoon_143 ((kitten_109 Int) (kitten_110 Int) (kitten_111 Int)) Bool (and (<= kitten_109 kitten_111) (<= kitten_111 kitten_110)))
(declare-fun spoon_144 (Int) potato_5)
(declare-fun spoon_145 (potato_5) Bool)
(declare-fun spoon_146 (potato_5) Int)
(declare-fun spoon_147 (potato_30 potato_30) Bool)
(declare-const cat_148 potato_30)
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_30)))))
(define-fun spoon_149 ((kitten_112 potato_32)) potato_30 (get_potato_32_a kitten_112))
(declare-const cat_150 Int)
(define-fun spoon_151 ((kitten_113 Float32) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool)) Bool (=> (or (= kitten_114 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_113)))
(define-fun spoon_152 ((kitten_117 Int) (kitten_118 Bool) (kitten_119 Bool) (kitten_120 Bool)) Bool (=> (or (= kitten_118 true) (<= 3 30)) (spoon_64 kitten_117)))
(declare-const cat_153 Int)
(declare-const cat_154 Int)
(declare-const cat_155 potato_11)
(declare-const cat_156 potato_11)
(declare-const cat_157 potato_11)
(declare-const cat_158 potato_11)
(declare-const cat_159 Int)
(declare-const cat_160 Int)
(declare-const cat_161 Int)
(declare-const cat_162 Int)
(declare-const cat_163 Int)
(declare-const cat_164 Int)
(declare-const cat_165 Int)
(declare-const cat_166 Int)
(declare-const cat_167 Int)
(declare-const cat_168 Int)
(declare-const cat_169 Bool)
(declare-const cat_170 Int)
(declare-const cat_171 Int)
(declare-const cat_172 potato_11)
(declare-const cat_173 potato_11)
(declare-const cat_174 potato_11)
(declare-const cat_175 potato_11)
(declare-const cat_176 Int)
(declare-const cat_177 Int)
(declare-const cat_178 potato_11)
(declare-const cat_179 potato_11)
(declare-const cat_180 potato_11)
(declare-const cat_181 potato_11)
(declare-const cat_182 Bool)
(declare-const cat_183 Int)
(declare-const cat_184 Int)
(declare-const cat_185 Bool)
(declare-const cat_186 Int)
(declare-const cat_187 Int)
(declare-const cat_188 potato_11)
(declare-const cat_189 potato_11)
(declare-const cat_190 potato_13)
(declare-const cat_191 Int)
(declare-const cat_192 Int)
(define-fun spoon_193 () potato_13 (mk_potato_13 cat_180 cat_181))
(define-fun spoon_194 () potato_13 (mk_potato_13 cat_174 cat_175))
(assert (= cat_165 cat_153))
(assert (= cat_166 0))
(assert (spoon_119 cat_166))
(assert (=> (<= 1 30) (spoon_56 cat_154)))
(assert (= cat_167 cat_154))
(assert (= cat_168 (spoon_71 (get_potato_22_a (get_potato_24_a cat_105)))))
(assert (= cat_169 (spoon_117 (select (get_potato_22_b (get_potato_24_a cat_105)) 1) (select (get_potato_22_b (get_potato_24_a cat_105)) cat_168))))
(assert (=> (= cat_169 true) (and (= cat_160 (- cat_168 1)) (spoon_56 (- cat_168 1)))))
(assert (=> (= cat_169 true) (= cat_170 cat_168)))
(assert (=> (= cat_169 true) (= cat_171 cat_160)))
(assert (=> (not (= cat_169 true)) (= cat_171 cat_168)))
(assert (= cat_172 cat_155))
(assert (= cat_173 cat_156))
(assert (= spoon_194 (get_potato_15_a (select (get_potato_22_b (get_potato_24_a cat_105)) cat_171))))
(assert (= cat_171 cat_132))
(assert (spoon_56 cat_132))
(assert (= cat_176 cat_159))
(assert (= cat_177 1))
(assert (<= 1 cat_177))
(assert (<= cat_177 cat_132))
(assert (= cat_178 cat_157))
(assert (= cat_179 cat_158))
(assert (= spoon_193 (get_potato_15_a (select (get_potato_22_b (get_potato_24_a cat_105)) cat_177))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (fp.lt (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))) (spoon_38 cat_181)) (and (= cat_161 (spoon_115 (mk_potato_15 spoon_194) (mk_potato_15 spoon_193) cat_103)) (spoon_107 cat_161)))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (fp.lt (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))) (spoon_38 cat_181)) (= cat_182 (ite (= cat_161 0) true false)))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (not (fp.lt (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))) (spoon_38 cat_181))) (= cat_182 false))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (= cat_182 true) (and (= cat_162 (+ cat_166 1)) (spoon_119 (+ cat_166 1))))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (= cat_182 true) (= cat_183 cat_166))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (= cat_182 true) (= cat_184 cat_162))))
(assert (=> (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (=> (not (= cat_182 true)) (= cat_184 cat_166))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (fp.leq (spoon_38 cat_181) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (and (= cat_163 (spoon_115 (mk_potato_15 spoon_194) (mk_potato_15 spoon_193) cat_103)) (spoon_107 cat_163)))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (fp.leq (spoon_38 cat_181) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103)))) (= cat_185 (ite (= cat_163 2) true false)))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (not (fp.leq (spoon_38 cat_181) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (= cat_185 false))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (= cat_185 true) (and (= cat_164 (- cat_166 1)) (spoon_119 (- cat_166 1))))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (= cat_185 true) (= cat_186 cat_166))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (= cat_185 true) (= cat_187 cat_164))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (=> (not (= cat_185 true)) (= cat_187 cat_166))))
(assert (=> (not (fp.leq (spoon_38 cat_175) (spoon_38 (get_potato_13_b (get_potato_15_a cat_103))))) (= cat_184 cat_187)))
(assert (= cat_188 cat_174))
(assert (= cat_189 cat_175))
(assert (= cat_190 spoon_193))
(assert (and (<= (- cat_192) cat_191) (<= cat_191 cat_192)))
(assert (and (and (=> (<= 1 cat_132) (spoon_143 1 cat_132 cat_192)) (=> (<= (- 30) 30) (spoon_119 cat_191))) (and (<= 1 cat_192) (<= cat_192 cat_132))))
(assert (not (spoon_119 cat_192)))
(check-sat)
(exit)
