;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic AUFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(define-fun spoon_9 ((kitten_7 Int)) Bool (or (= kitten_7 0) (= kitten_7 1)))
(declare-fun spoon_10 (Bool) potato_5)
(declare-fun spoon_11 (potato_5) Bool)
(declare-fun spoon_12 (potato_5) Bool)
(declare-sort potato_10 0)
(declare-fun spoon_13 (potato_10) Int)
(assert (forall ((kitten_8 potato_10)) (let ((_let_0 (spoon_13 kitten_8))) (and (<= 1 _let_0) (<= _let_0 32))) ))
(define-fun spoon_14 ((kitten_9 Int)) Bool (and (<= 1 kitten_9) (<= kitten_9 32)))
(declare-fun spoon_15 (Int) potato_5)
(declare-fun spoon_16 (potato_5) Bool)
(declare-fun spoon_17 (potato_5) Int)
(declare-fun spoon_18 (potato_10 potato_10) Bool)
(declare-fun cat_19 () potato_10)
(declare-datatypes ((potato_11 0)) (((mk_potato_11 (get_potato_11_a potato_10)))))

(define-fun spoon_20 ((kitten_10 potato_11)) potato_10 (get_potato_11_a kitten_10))
(define-fun spoon_21 ((kitten_11 potato_10)) Int (spoon_13 kitten_11))
(declare-fun spoon_22 (Int) potato_10)
(assert (forall ((kitten_12 potato_10)) (! (= (spoon_22 (spoon_21 kitten_12)) kitten_12) :pattern ((spoon_21 kitten_12)))))
(assert (forall ((kitten_13 potato_10)) (! (spoon_14 (spoon_21 kitten_13)) :pattern ((spoon_21 kitten_13)))))
(assert (forall ((kitten_14 Int)) (! (=> (spoon_14 kitten_14) (= (spoon_21 (spoon_22 kitten_14)) kitten_14)) :pattern ((spoon_21 (spoon_22 kitten_14))))))
(declare-sort potato_12 0)
(declare-fun spoon_23 (potato_12) Int)
(assert (forall ((kitten_15 potato_12)) (let ((_let_0 (spoon_23 kitten_15))) (and (<= 3 _let_0) (<= _let_0 30))) ))
(define-fun spoon_24 ((kitten_16 Int)) Bool (and (<= 3 kitten_16) (<= kitten_16 30)))
(declare-fun spoon_25 (Int) potato_5)
(declare-fun spoon_26 (potato_5) Bool)
(declare-fun spoon_27 (potato_5) Int)
(declare-fun spoon_28 (potato_12 potato_12) Bool)
(declare-fun cat_29 () potato_12)
(declare-datatypes ((potato_13 0)) (((mk_potato_13 (get_potato_13_a potato_12)))))

(define-fun spoon_30 ((kitten_17 potato_13)) potato_12 (get_potato_13_a kitten_17))
(define-fun spoon_31 ((kitten_18 potato_12)) Int (spoon_23 kitten_18))
(declare-fun spoon_32 (Int) potato_12)
(assert (forall ((kitten_19 potato_12)) (! (= (spoon_32 (spoon_31 kitten_19)) kitten_19) :pattern ((spoon_31 kitten_19)))))
(assert (forall ((kitten_20 potato_12)) (! (spoon_24 (spoon_31 kitten_20)) :pattern ((spoon_31 kitten_20)))))
(assert (forall ((kitten_21 Int)) (! (=> (spoon_24 kitten_21) (= (spoon_31 (spoon_32 kitten_21)) kitten_21)) :pattern ((spoon_31 (spoon_32 kitten_21))))))
(declare-fun spoon_33 (Int) Int)
(define-fun spoon_34 ((kitten_22 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_22) (fp.isPositive kitten_22)))
(define-fun spoon_35 ((kitten_23 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_23) (fp.isNegative kitten_23)))
(define-fun spoon_36 ((kitten_24 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_24) (fp.isPositive kitten_24)))
(define-fun spoon_37 ((kitten_25 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_25) (fp.isNegative kitten_25)))
(declare-fun cat_38 () Int)
(define-fun spoon_39 ((kitten_26 Int)) Bool (and (<= (- cat_38) kitten_26) (<= kitten_26 cat_38)))
(define-fun spoon_40 ((kitten_27 Int)) Bool (and (<= (- 16777216) kitten_27) (<= kitten_27 16777216)))
(define-fun spoon_41 ((kitten_28 (_ FloatingPoint 8 24)) (kitten_29 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_28) (fp.isPositive kitten_29)) (and (fp.isNegative kitten_28) (fp.isNegative kitten_29))))
(define-fun spoon_42 ((kitten_30 (_ FloatingPoint 8 24)) (kitten_31 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_30) (fp.isNegative kitten_31)) (and (fp.isNegative kitten_30) (fp.isPositive kitten_31))))
(define-fun spoon_43 ((kitten_32 (_ FloatingPoint 8 24)) (kitten_33 (_ FloatingPoint 8 24)) (kitten_34 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_41 kitten_33 kitten_34) (fp.isPositive kitten_32)) (=> (spoon_42 kitten_33 kitten_34) (fp.isNegative kitten_32))))
(define-fun spoon_44 ((kitten_35 Real)) Real (* kitten_35 kitten_35))
(declare-fun spoon_45 (Real) Real)
(define-fun spoon_46 ((kitten_36 (_ FloatingPoint 8 24)) (kitten_37 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_36) (< _let_0 kitten_37)) (and (fp.isNegative kitten_36) (< kitten_37 _let_0)))))
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a (_ FloatingPoint 8 24))))))

(declare-sort potato_15 0)
(define-fun spoon_47 ((kitten_38 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_38) (and (fp.leq (fp.neg _let_0) kitten_38) (fp.leq kitten_38 _let_0)))))
(declare-fun spoon_48 (potato_15 potato_15) Bool)
(declare-fun spoon_49 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_50 (potato_5) Bool)
(declare-fun spoon_51 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_52 () potato_15)
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_53 ((kitten_39 potato_16)) potato_15 (get_potato_16_a kitten_39))
(declare-fun spoon_54 (potato_15) (_ FloatingPoint 8 24))
(declare-fun spoon_55 ((_ FloatingPoint 8 24)) potato_15)
(assert (forall ((kitten_40 potato_15)) (! (= (spoon_55 (spoon_54 kitten_40)) kitten_40) :pattern ((spoon_54 kitten_40)))))
(assert (forall ((kitten_41 potato_15)) (! (spoon_47 (spoon_54 kitten_41)) :pattern ((spoon_54 kitten_41)))))
(assert (forall ((kitten_42 (_ FloatingPoint 8 24))) (! (=> (spoon_47 kitten_42) (= (spoon_54 (spoon_55 kitten_42)) kitten_42)) :pattern ((spoon_54 (spoon_55 kitten_42))))))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_15) (get_potato_17_b potato_15)))))

(define-fun spoon_56 ((kitten_43 potato_17)) potato_15 (get_potato_17_a kitten_43))
(define-fun spoon_57 ((kitten_44 potato_17)) potato_15 (get_potato_17_b kitten_44))
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_58 ((kitten_45 potato_18)) potato_17 (get_potato_18_a kitten_45))
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a potato_17)))))

(define-fun spoon_59 ((kitten_46 potato_19)) potato_17 (get_potato_19_a kitten_46))
(define-fun spoon_60 ((kitten_47 potato_19) (kitten_48 potato_19)) Bool (let ((_let_0 (get_potato_19_a kitten_47))) (let ((_let_1 (get_potato_19_a kitten_48))) (ite (and (= (spoon_54 (get_potato_17_a _let_0)) (spoon_54 (get_potato_17_a _let_1))) (= (spoon_54 (get_potato_17_b _let_0)) (spoon_54 (get_potato_17_b _let_1)))) true false))))
(declare-fun cat_61 () Int)
(declare-fun spoon_62 (potato_19) Int)
(declare-fun cat_63 () Int)
(declare-fun spoon_64 (potato_19) Int)
(assert (<= 0 cat_61))
(assert (forall ((kitten_49 potato_19)) (<= 0 (spoon_62 kitten_49)) ))
(assert (<= 0 cat_63))
(assert (forall ((kitten_50 potato_19)) (<= 0 (spoon_64 kitten_50)) ))
(declare-fun cat_65 () Int)
(declare-fun cat_66 () Int)
(declare-fun cat_67 () Int)
(assert (<= 0 cat_65))
(assert (< cat_65 cat_66))
(assert (<= 0 cat_67))
(declare-fun cat_68 () Int)
(declare-fun cat_69 () Int)
(declare-fun cat_70 () Int)
(assert (<= 0 cat_68))
(assert (< cat_68 cat_69))
(assert (<= 0 cat_70))
(declare-fun spoon_71 (potato_19 potato_19) Bool)
(declare-fun cat_72 () potato_19)
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_19)))))

(define-fun spoon_73 ((kitten_51 potato_20)) potato_19 (get_potato_20_a kitten_51))
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a (Array Int potato_19))))))

(declare-fun spoon_74 ((Array Int potato_19) Int Int) (Array Int potato_19))
(assert (forall ((kitten_52 (Array Int potato_19))) (forall ((kitten_53 Int)) (! (= (spoon_74 kitten_52 kitten_53 kitten_53) kitten_52) :pattern ((spoon_74 kitten_52 kitten_53 kitten_53)))) ))
(assert (forall ((kitten_54 (Array Int potato_19))) (forall ((kitten_55 Int)) (forall ((kitten_56 Int)) (forall ((kitten_57 Int)) (! (= (select (spoon_74 kitten_54 kitten_55 kitten_56) kitten_57) (select kitten_54 (- kitten_57 (- kitten_56 kitten_55)))) :pattern ((select (spoon_74 kitten_54 kitten_55 kitten_56) kitten_57)))) ) ) ))
(define-fun spoon_75 ((kitten_58 (Array Int potato_19)) (kitten_59 Int) (kitten_60 Int) (kitten_61 (Array Int potato_19)) (kitten_62 Int) (kitten_63 Int)) Bool (ite (and (ite (<= kitten_59 kitten_60) (and (<= kitten_62 kitten_63) (= (- kitten_60 kitten_59) (- kitten_63 kitten_62))) (< kitten_63 kitten_62)) (forall ((kitten_64 Int)) (=> (and (<= kitten_59 kitten_64) (<= kitten_64 kitten_60)) (= (spoon_60 (select kitten_58 kitten_64) (select kitten_61 (+ (- kitten_62 kitten_59) kitten_64))) true)) )) true false))
(assert (forall ((kitten_65 (Array Int potato_19)) (kitten_66 (Array Int potato_19))) (forall ((kitten_67 Int) (kitten_68 Int) (kitten_69 Int) (kitten_70 Int)) (=> (= (spoon_75 kitten_66 kitten_69 kitten_70 kitten_65 kitten_67 kitten_68) true) (and (ite (<= kitten_67 kitten_68) (and (<= kitten_69 kitten_70) (= (- kitten_68 kitten_67) (- kitten_70 kitten_69))) (< kitten_70 kitten_69)) (forall ((kitten_71 Int)) (=> (and (<= kitten_67 kitten_71) (<= kitten_71 kitten_68)) (= (spoon_60 (select kitten_65 kitten_71) (select kitten_66 (+ (- kitten_69 kitten_67) kitten_71))) true)) ))) ) ))
(declare-fun cat_76 () (Array Int potato_19))
(declare-fun cat_77 () Int)
(declare-fun spoon_78 ((Array Int potato_19)) Int)
(declare-fun cat_79 () Int)
(declare-fun spoon_80 ((Array Int potato_19)) Int)
(declare-fun cat_81 () Int)
(declare-fun spoon_82 ((Array Int potato_19)) Int)
(assert (<= 0 cat_77))
(assert (forall ((kitten_72 (Array Int potato_19))) (<= 0 (spoon_78 kitten_72)) ))
(assert (<= 0 cat_79))
(assert (forall ((kitten_73 (Array Int potato_19))) (<= 0 (spoon_80 kitten_73)) ))
(assert (<= 0 cat_81))
(assert (forall ((kitten_74 (Array Int potato_19))) (<= 0 (spoon_82 kitten_74)) ))
(declare-fun spoon_83 ((Array Int potato_19) (Array Int potato_19)) Bool)
(declare-datatypes ((potato_22 0)) (((mk_potato_22 (get_potato_22_a potato_12) (get_potato_22_b (Array Int potato_19))))))

(define-fun spoon_84 ((kitten_75 potato_22)) potato_12 (get_potato_22_a kitten_75))
(define-fun spoon_85 ((kitten_76 potato_22)) (Array Int potato_19) (get_potato_22_b kitten_76))
(declare-datatypes ((potato_23 0)) (((mk_potato_23 (get_potato_23_a potato_22)))))

(define-fun spoon_86 ((kitten_77 potato_23)) potato_22 (get_potato_23_a kitten_77))
(declare-datatypes ((potato_24 0)) (((mk_potato_24 (get_potato_24_a potato_22)))))

(define-fun spoon_87 ((kitten_78 potato_24)) potato_22 (get_potato_24_a kitten_78))
(define-fun spoon_88 ((kitten_79 potato_24) (kitten_80 potato_24)) Bool (let ((_let_0 (get_potato_24_a kitten_79))) (let ((_let_1 (get_potato_24_a kitten_80))) (ite (and (= (spoon_31 (get_potato_22_a _let_0)) (spoon_31 (get_potato_22_a _let_1))) (= (spoon_75 (get_potato_22_b _let_0) 1 30 (get_potato_22_b _let_1) 1 30) true)) true false))))
(declare-fun cat_89 () Int)
(declare-fun spoon_90 (potato_24) Int)
(declare-fun cat_91 () Int)
(declare-fun spoon_92 (potato_24) Int)
(assert (<= 0 cat_89))
(assert (forall ((kitten_81 potato_24)) (<= 0 (spoon_90 kitten_81)) ))
(assert (<= 0 cat_91))
(assert (forall ((kitten_82 potato_24)) (<= 0 (spoon_92 kitten_82)) ))
(declare-fun cat_93 () Int)
(declare-fun cat_94 () Int)
(declare-fun cat_95 () Int)
(assert (<= 0 cat_93))
(assert (< cat_93 cat_94))
(assert (<= 0 cat_95))
(declare-fun cat_96 () Int)
(declare-fun cat_97 () Int)
(declare-fun cat_98 () Int)
(assert (<= 0 cat_96))
(assert (< cat_96 cat_97))
(assert (<= 0 cat_98))
(declare-fun spoon_99 (potato_24 potato_24) Bool)
(declare-fun cat_100 () potato_24)
(declare-datatypes ((potato_25 0)) (((mk_potato_25 (get_potato_25_a potato_24)))))

(define-fun spoon_101 ((kitten_83 potato_25)) potato_24 (get_potato_25_a kitten_83))
(declare-sort potato_26 0)
(declare-fun spoon_102 (potato_26) Int)
(assert (forall ((kitten_84 potato_26)) (let ((_let_0 (spoon_102 kitten_84))) (and (<= 0 _let_0) (<= _let_0 150000))) ))
(define-fun spoon_103 ((kitten_85 Int)) Bool (and (<= 0 kitten_85) (<= kitten_85 150000)))
(declare-fun spoon_104 (Int) potato_5)
(declare-fun spoon_105 (potato_5) Bool)
(declare-fun spoon_106 (potato_5) Int)
(declare-fun spoon_107 (potato_26 potato_26) Bool)
(declare-fun cat_108 () potato_26)
(declare-datatypes ((potato_27 0)) (((mk_potato_27 (get_potato_27_a potato_26)))))

(define-fun spoon_109 ((kitten_86 potato_27)) potato_26 (get_potato_27_a kitten_86))
(define-fun spoon_110 ((kitten_87 potato_26)) Int (spoon_102 kitten_87))
(declare-fun spoon_111 (Int) potato_26)
(assert (forall ((kitten_88 potato_26)) (! (= (spoon_111 (spoon_110 kitten_88)) kitten_88) :pattern ((spoon_110 kitten_88)))))
(assert (forall ((kitten_89 potato_26)) (! (spoon_103 (spoon_110 kitten_89)) :pattern ((spoon_110 kitten_89)))))
(assert (forall ((kitten_90 Int)) (! (=> (spoon_103 kitten_90) (= (spoon_110 (spoon_111 kitten_90)) kitten_90)) :pattern ((spoon_110 (spoon_111 kitten_90))))))
(declare-datatypes ((potato_28 0)) (((mk_potato_28 (get_potato_28_a potato_26) (get_potato_28_b potato_26)))))

(define-fun spoon_112 ((kitten_91 potato_28)) potato_26 (get_potato_28_a kitten_91))
(define-fun spoon_113 ((kitten_92 potato_28)) potato_26 (get_potato_28_b kitten_92))
(declare-datatypes ((potato_29 0)) (((mk_potato_29 (get_potato_29_a potato_28)))))

(define-fun spoon_114 ((kitten_93 potato_29)) potato_28 (get_potato_29_a kitten_93))
(declare-datatypes ((potato_30 0)) (((mk_potato_30 (get_potato_30_a potato_28)))))

(define-fun spoon_115 ((kitten_94 potato_30)) potato_28 (get_potato_30_a kitten_94))
(define-fun spoon_116 ((kitten_95 potato_30) (kitten_96 potato_30)) Bool (let ((_let_0 (get_potato_30_a kitten_95))) (let ((_let_1 (get_potato_30_a kitten_96))) (ite (and (= (spoon_110 (get_potato_28_a _let_0)) (spoon_110 (get_potato_28_a _let_1))) (= (spoon_110 (get_potato_28_b _let_0)) (spoon_110 (get_potato_28_b _let_1)))) true false))))
(declare-fun cat_117 () Int)
(declare-fun spoon_118 (potato_30) Int)
(declare-fun cat_119 () Int)
(declare-fun spoon_120 (potato_30) Int)
(assert (<= 0 cat_117))
(assert (forall ((kitten_97 potato_30)) (<= 0 (spoon_118 kitten_97)) ))
(assert (<= 0 cat_119))
(assert (forall ((kitten_98 potato_30)) (<= 0 (spoon_120 kitten_98)) ))
(declare-fun cat_121 () Int)
(declare-fun cat_122 () Int)
(declare-fun cat_123 () Int)
(assert (<= 0 cat_121))
(assert (< cat_121 cat_122))
(assert (<= 0 cat_123))
(declare-fun cat_124 () Int)
(declare-fun cat_125 () Int)
(declare-fun cat_126 () Int)
(assert (<= 0 cat_124))
(assert (< cat_124 cat_125))
(assert (<= 0 cat_126))
(declare-fun spoon_127 (potato_30 potato_30) Bool)
(declare-fun cat_128 () potato_30)
(declare-datatypes ((potato_31 0)) (((mk_potato_31 (get_potato_31_a potato_30)))))

(define-fun spoon_129 ((kitten_99 potato_31)) potato_30 (get_potato_31_a kitten_99))
(declare-datatypes ((potato_32 0)) (((mk_potato_32 (get_potato_32_a potato_24) (get_potato_32_b potato_30)))))

(define-fun spoon_130 ((kitten_100 potato_32)) potato_24 (get_potato_32_a kitten_100))
(define-fun spoon_131 ((kitten_101 potato_32)) potato_30 (get_potato_32_b kitten_101))
(declare-datatypes ((potato_33 0)) (((mk_potato_33 (get_potato_33_a potato_32)))))

(define-fun spoon_132 ((kitten_102 potato_33)) potato_32 (get_potato_33_a kitten_102))
(declare-datatypes ((potato_34 0)) (((mk_potato_34 (get_potato_34_a potato_32)))))

(define-fun spoon_133 ((kitten_103 potato_34)) potato_32 (get_potato_34_a kitten_103))
(define-fun spoon_134 ((kitten_104 potato_34) (kitten_105 potato_34)) Bool (let ((_let_0 (get_potato_34_a kitten_104))) (let ((_let_1 (get_potato_34_a kitten_105))) (ite (and (= (spoon_88 (get_potato_32_a _let_0) (get_potato_32_a _let_1)) true) (= (spoon_116 (get_potato_32_b _let_0) (get_potato_32_b _let_1)) true)) true false))))
(declare-fun cat_135 () Int)
(declare-fun spoon_136 (potato_34) Int)
(declare-fun cat_137 () Int)
(declare-fun spoon_138 (potato_34) Int)
(assert (<= 0 cat_135))
(assert (forall ((kitten_106 potato_34)) (<= 0 (spoon_136 kitten_106)) ))
(assert (<= 0 cat_137))
(assert (forall ((kitten_107 potato_34)) (<= 0 (spoon_138 kitten_107)) ))
(declare-fun cat_139 () Int)
(declare-fun cat_140 () Int)
(declare-fun cat_141 () Int)
(assert (<= 0 cat_139))
(assert (< cat_139 cat_140))
(assert (<= 0 cat_141))
(declare-fun cat_142 () Int)
(declare-fun cat_143 () Int)
(declare-fun cat_144 () Int)
(assert (<= 0 cat_142))
(assert (< cat_142 cat_143))
(assert (<= 0 cat_144))
(declare-fun spoon_145 (potato_34 potato_34) Bool)
(declare-fun cat_146 () potato_34)
(declare-datatypes ((potato_35 0)) (((mk_potato_35 (get_potato_35_a potato_34)))))

(define-fun spoon_147 ((kitten_108 potato_35)) potato_34 (get_potato_35_a kitten_108))
(declare-datatypes ((potato_36 0)) (((mk_potato_36 (get_potato_36_a (Array Int potato_34))))))

(declare-fun spoon_148 ((Array Int potato_34) Int Int) (Array Int potato_34))
(assert (forall ((kitten_109 (Array Int potato_34))) (forall ((kitten_110 Int)) (! (= (spoon_148 kitten_109 kitten_110 kitten_110) kitten_109) :pattern ((spoon_148 kitten_109 kitten_110 kitten_110)))) ))
(assert (forall ((kitten_111 (Array Int potato_34))) (forall ((kitten_112 Int)) (forall ((kitten_113 Int)) (forall ((kitten_114 Int)) (! (= (select (spoon_148 kitten_111 kitten_112 kitten_113) kitten_114) (select kitten_111 (- kitten_114 (- kitten_113 kitten_112)))) :pattern ((select (spoon_148 kitten_111 kitten_112 kitten_113) kitten_114)))) ) ) ))
(define-fun spoon_149 ((kitten_115 (Array Int potato_34)) (kitten_116 Int) (kitten_117 Int) (kitten_118 (Array Int potato_34)) (kitten_119 Int) (kitten_120 Int)) Bool (ite (and (ite (<= kitten_116 kitten_117) (and (<= kitten_119 kitten_120) (= (- kitten_117 kitten_116) (- kitten_120 kitten_119))) (< kitten_120 kitten_119)) (forall ((kitten_121 Int)) (=> (and (<= kitten_116 kitten_121) (<= kitten_121 kitten_117)) (= (spoon_134 (select kitten_115 kitten_121) (select kitten_118 (+ (- kitten_119 kitten_116) kitten_121))) true)) )) true false))
(assert (forall ((kitten_122 (Array Int potato_34)) (kitten_123 (Array Int potato_34))) (forall ((kitten_124 Int) (kitten_125 Int) (kitten_126 Int) (kitten_127 Int)) (=> (= (spoon_149 kitten_123 kitten_126 kitten_127 kitten_122 kitten_124 kitten_125) true) (and (ite (<= kitten_124 kitten_125) (and (<= kitten_126 kitten_127) (= (- kitten_125 kitten_124) (- kitten_127 kitten_126))) (< kitten_127 kitten_126)) (forall ((kitten_128 Int)) (=> (and (<= kitten_124 kitten_128) (<= kitten_128 kitten_125)) (= (spoon_134 (select kitten_122 kitten_128) (select kitten_123 (+ (- kitten_126 kitten_124) kitten_128))) true)) ))) ) ))
(declare-fun cat_150 () (Array Int potato_34))
(declare-fun cat_151 () Int)
(declare-fun spoon_152 ((Array Int potato_34)) Int)
(declare-fun cat_153 () Int)
(declare-fun spoon_154 ((Array Int potato_34)) Int)
(declare-fun cat_155 () Int)
(declare-fun spoon_156 ((Array Int potato_34)) Int)
(assert (<= 0 cat_151))
(assert (forall ((kitten_129 (Array Int potato_34))) (<= 0 (spoon_152 kitten_129)) ))
(assert (<= 0 cat_153))
(assert (forall ((kitten_130 (Array Int potato_34))) (<= 0 (spoon_154 kitten_130)) ))
(assert (<= 0 cat_155))
(assert (forall ((kitten_131 (Array Int potato_34))) (<= 0 (spoon_156 kitten_131)) ))
(declare-fun spoon_157 ((Array Int potato_34) (Array Int potato_34)) Bool)
(declare-datatypes ((potato_37 0)) (((mk_potato_37 (get_potato_37_a potato_10) (get_potato_37_b (Array Int potato_34))))))

(define-fun spoon_158 ((kitten_132 potato_37)) potato_10 (get_potato_37_a kitten_132))
(define-fun spoon_159 ((kitten_133 potato_37)) (Array Int potato_34) (get_potato_37_b kitten_133))
(declare-datatypes ((potato_38 0)) (((mk_potato_38 (get_potato_38_a potato_37)))))

(define-fun spoon_160 ((kitten_134 potato_38)) potato_37 (get_potato_38_a kitten_134))
(declare-datatypes ((potato_39 0)) (((mk_potato_39 (get_potato_39_a potato_37)))))

(define-fun spoon_161 ((kitten_135 potato_39)) potato_37 (get_potato_39_a kitten_135))
(define-fun spoon_162 ((kitten_136 potato_39) (kitten_137 potato_39)) Bool (let ((_let_0 (get_potato_39_a kitten_136))) (let ((_let_1 (get_potato_39_a kitten_137))) (ite (and (= (spoon_21 (get_potato_37_a _let_0)) (spoon_21 (get_potato_37_a _let_1))) (= (spoon_149 (get_potato_37_b _let_0) 1 32 (get_potato_37_b _let_1) 1 32) true)) true false))))
(declare-fun cat_163 () Int)
(declare-fun spoon_164 (potato_39) Int)
(declare-fun cat_165 () Int)
(declare-fun spoon_166 (potato_39) Int)
(assert (<= 0 cat_163))
(assert (forall ((kitten_138 potato_39)) (<= 0 (spoon_164 kitten_138)) ))
(assert (<= 0 cat_165))
(assert (forall ((kitten_139 potato_39)) (<= 0 (spoon_166 kitten_139)) ))
(declare-fun cat_167 () Int)
(declare-fun cat_168 () Int)
(declare-fun cat_169 () Int)
(assert (<= 0 cat_167))
(assert (< cat_167 cat_168))
(assert (<= 0 cat_169))
(declare-fun cat_170 () Int)
(declare-fun cat_171 () Int)
(declare-fun cat_172 () Int)
(assert (<= 0 cat_170))
(assert (< cat_170 cat_171))
(assert (<= 0 cat_172))
(declare-fun spoon_173 (potato_39 potato_39) Bool)
(declare-fun cat_174 () potato_39)
(declare-datatypes ((potato_40 0)) (((mk_potato_40 (get_potato_40_a potato_39)))))

(define-fun spoon_175 ((kitten_140 potato_40)) potato_39 (get_potato_40_a kitten_140))
(declare-fun spoon_176 (Int potato_34) potato_34)
(declare-fun spoon_177 (potato_34 Int potato_34) Bool)
(define-fun spoon_178 ((kitten_141 Int) (kitten_142 Bool) (kitten_143 Bool) (kitten_144 Bool) (kitten_145 Bool)) Bool (=> (or (= kitten_142 true) (<= 0 150000)) (spoon_103 kitten_141)))
(assert true)
(define-fun spoon_179 ((kitten_146 Int) (kitten_147 Bool) (kitten_148 Bool) (kitten_149 Bool) (kitten_150 Bool)) Bool (=> (or (= kitten_147 true) (<= 1 32)) (spoon_14 kitten_146)))
(declare-fun cat_180 () Int)
(declare-fun cat_181 () Int)
(declare-fun cat_182 () potato_39)
(declare-fun cat_183 () Int)
(declare-fun cat_184 () Int)
(declare-fun cat_185 () Int)
(declare-fun cat_186 () Int)
(declare-fun cat_187 () Int)
(define-fun spoon_188 ((kitten_151 (_ FloatingPoint 8 24)) (kitten_152 Bool) (kitten_153 Bool) (kitten_154 Bool) (kitten_155 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_152 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_47 kitten_151))))
(define-fun spoon_189 ((kitten_156 Int) (kitten_157 Bool) (kitten_158 Bool) (kitten_159 Bool) (kitten_160 Bool)) Bool (=> (or (= kitten_157 true) (<= 3 30)) (spoon_24 kitten_156)))
(declare-fun cat_190 () potato_10)
(declare-fun cat_191 () (Array Int potato_34))
(assert (spoon_103 cat_180))
(assert (= (mk_potato_37 cat_190 cat_191) (get_potato_39_a cat_182)))
(assert (= (spoon_21 cat_190) cat_185))
(assert (spoon_14 cat_185))
(assert (<= 1 cat_185))
(assert (not (<= cat_185 32)))
(check-sat)
(exit)
