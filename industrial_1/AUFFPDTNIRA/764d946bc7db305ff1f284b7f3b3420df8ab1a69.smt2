;; This file has been translated by CVC4 from an earlier
;; version of SMTLIB to 2.6 using the script
;; translate_benchmarks.py in repo smtlib_schanda.

(set-info :smt-lib-version 2.6)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)
(set-logic AUFFPDTNIRA)

(define-fun spoon_1 ((kitten_1 (_ FloatingPoint 8 24))) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 (_ FloatingPoint 8 24))) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral roundNearestTiesToEven kitten_2)))))
(declare-datatypes ((potato_1 0)) (((mk_potato_1))))

(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-fun cat_4 () potato_2)
(declare-sort potato_3 0)
(declare-datatypes ((potato_4 0)) (((mk_potato_4 (get_potato_4_a potato_3)))))

(declare-sort potato_5 0)
(declare-datatypes ((potato_6 0)) (((mk_potato_6 (get_potato_6_a Int)))))

(declare-datatypes ((potato_7 0)) (((mk_potato_7 (get_potato_7_a Bool)))))

(declare-datatypes ((potato_8 0)) (((mk_potato_8 (get_potato_8_a Real)))))

(declare-datatypes ((potato_9 0)) (((mk_potato_9 (get_potato_9_a potato_2)))))

(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 (_ FloatingPoint 8 24))) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 (_ FloatingPoint 8 24))) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun cat_14 () Int)
(define-fun spoon_15 ((kitten_11 Int)) Bool (and (<= (- cat_14) kitten_11) (<= kitten_11 cat_14)))
(define-fun spoon_16 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_17 ((kitten_13 (_ FloatingPoint 8 24)) (kitten_14 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_18 ((kitten_15 (_ FloatingPoint 8 24)) (kitten_16 (_ FloatingPoint 8 24))) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_19 ((kitten_17 (_ FloatingPoint 8 24)) (kitten_18 (_ FloatingPoint 8 24)) (kitten_19 (_ FloatingPoint 8 24))) Bool (and (=> (spoon_17 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_18 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_20 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_21 (Real) Real)
(define-fun spoon_22 ((kitten_21 (_ FloatingPoint 8 24)) (kitten_22 Real)) Bool (let ((_let_0 (/ 0 1))) (or (and (fp.isPositive kitten_21) (< _let_0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 _let_0)))))
(declare-datatypes ((potato_10 0)) (((mk_potato_10 (get_potato_10_a (_ FloatingPoint 8 24))))))

(define-fun spoon_23 ((kitten_23 Int)) Bool (or (= kitten_23 0) (= kitten_23 1)))
(declare-fun spoon_24 (Bool) potato_5)
(declare-fun spoon_25 (potato_5) Bool)
(declare-fun spoon_26 (potato_5) Bool)
(declare-sort potato_11 0)
(declare-fun spoon_27 (potato_11) Int)
(assert (forall ((kitten_24 potato_11)) (let ((_let_0 (spoon_27 kitten_24))) (and (<= 3 _let_0) (<= _let_0 100))) ))
(define-fun spoon_28 ((kitten_25 Int)) Bool (and (<= 3 kitten_25) (<= kitten_25 100)))
(declare-fun spoon_29 (Int) potato_5)
(declare-fun spoon_30 (potato_5) Bool)
(declare-fun spoon_31 (potato_5) Int)
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun cat_33 () potato_11)
(declare-datatypes ((potato_12 0)) (((mk_potato_12 (get_potato_12_a potato_11)))))

(define-fun spoon_34 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(define-fun spoon_35 ((kitten_27 potato_11)) Int (spoon_27 kitten_27))
(declare-fun spoon_36 (Int) potato_11)
(assert (forall ((kitten_28 potato_11)) (! (= (spoon_36 (spoon_35 kitten_28)) kitten_28) :pattern ((spoon_35 kitten_28)))))
(assert (forall ((kitten_29 potato_11)) (! (spoon_28 (spoon_35 kitten_29)) :pattern ((spoon_35 kitten_29)))))
(assert (forall ((kitten_30 Int)) (! (=> (spoon_28 kitten_30) (= (spoon_35 (spoon_36 kitten_30)) kitten_30)) :pattern ((spoon_35 (spoon_36 kitten_30))))))
(declare-sort potato_13 0)
(define-fun spoon_37 ((kitten_31 (_ FloatingPoint 8 24))) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (and (spoon_1 kitten_31) (and (fp.leq (fp.neg _let_0) kitten_31) (fp.leq kitten_31 _let_0)))))
(declare-fun spoon_38 (potato_13 potato_13) Bool)
(declare-fun spoon_39 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_40 (potato_5) Bool)
(declare-fun spoon_41 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_42 () potato_13)
(declare-datatypes ((potato_14 0)) (((mk_potato_14 (get_potato_14_a potato_13)))))

(define-fun spoon_43 ((kitten_32 potato_14)) potato_13 (get_potato_14_a kitten_32))
(declare-fun spoon_44 (potato_13) (_ FloatingPoint 8 24))
(declare-fun spoon_45 ((_ FloatingPoint 8 24)) potato_13)
(assert (forall ((kitten_33 potato_13)) (! (= (spoon_45 (spoon_44 kitten_33)) kitten_33) :pattern ((spoon_44 kitten_33)))))
(assert (forall ((kitten_34 potato_13)) (! (spoon_37 (spoon_44 kitten_34)) :pattern ((spoon_44 kitten_34)))))
(assert (forall ((kitten_35 (_ FloatingPoint 8 24))) (! (=> (spoon_37 kitten_35) (= (spoon_44 (spoon_45 kitten_35)) kitten_35)) :pattern ((spoon_44 (spoon_45 kitten_35))))))
(declare-datatypes ((potato_15 0)) (((mk_potato_15 (get_potato_15_a potato_13) (get_potato_15_b potato_13)))))

(define-fun spoon_46 ((kitten_36 potato_15)) potato_13 (get_potato_15_a kitten_36))
(define-fun spoon_47 ((kitten_37 potato_15)) potato_13 (get_potato_15_b kitten_37))
(declare-datatypes ((potato_16 0)) (((mk_potato_16 (get_potato_16_a potato_15)))))

(define-fun spoon_48 ((kitten_38 potato_16)) potato_15 (get_potato_16_a kitten_38))
(declare-datatypes ((potato_17 0)) (((mk_potato_17 (get_potato_17_a potato_15)))))

(define-fun spoon_49 ((kitten_39 potato_17)) potato_15 (get_potato_17_a kitten_39))
(define-fun spoon_50 ((kitten_40 potato_17) (kitten_41 potato_17)) Bool (let ((_let_0 (get_potato_17_a kitten_40))) (let ((_let_1 (get_potato_17_a kitten_41))) (ite (and (= (spoon_44 (get_potato_15_a _let_0)) (spoon_44 (get_potato_15_a _let_1))) (= (spoon_44 (get_potato_15_b _let_0)) (spoon_44 (get_potato_15_b _let_1)))) true false))))
(declare-fun cat_51 () Int)
(declare-fun spoon_52 (potato_17) Int)
(declare-fun cat_53 () Int)
(declare-fun spoon_54 (potato_17) Int)
(assert (<= 0 cat_51))
(assert (forall ((kitten_42 potato_17)) (<= 0 (spoon_52 kitten_42)) ))
(assert (<= 0 cat_53))
(assert (forall ((kitten_43 potato_17)) (<= 0 (spoon_54 kitten_43)) ))
(declare-fun cat_55 () Int)
(declare-fun cat_56 () Int)
(declare-fun cat_57 () Int)
(assert (<= 0 cat_55))
(assert (< cat_55 cat_56))
(assert (<= 0 cat_57))
(declare-fun cat_58 () Int)
(declare-fun cat_59 () Int)
(declare-fun cat_60 () Int)
(assert (<= 0 cat_58))
(assert (< cat_58 cat_59))
(assert (<= 0 cat_60))
(declare-fun spoon_61 (potato_17 potato_17) Bool)
(declare-fun cat_62 () potato_17)
(declare-datatypes ((potato_18 0)) (((mk_potato_18 (get_potato_18_a potato_17)))))

(define-fun spoon_63 ((kitten_44 potato_18)) potato_17 (get_potato_18_a kitten_44))
(declare-datatypes ((potato_19 0)) (((mk_potato_19 (get_potato_19_a (Array Int potato_17))))))

(declare-fun spoon_64 ((Array Int potato_17) Int Int) (Array Int potato_17))
(assert (forall ((kitten_45 (Array Int potato_17))) (forall ((kitten_46 Int)) (! (= (spoon_64 kitten_45 kitten_46 kitten_46) kitten_45) :pattern ((spoon_64 kitten_45 kitten_46 kitten_46)))) ))
(assert (forall ((kitten_47 (Array Int potato_17))) (forall ((kitten_48 Int)) (forall ((kitten_49 Int)) (forall ((kitten_50 Int)) (! (= (select (spoon_64 kitten_47 kitten_48 kitten_49) kitten_50) (select kitten_47 (- kitten_50 (- kitten_49 kitten_48)))) :pattern ((select (spoon_64 kitten_47 kitten_48 kitten_49) kitten_50)))) ) ) ))
(define-fun spoon_65 ((kitten_51 (Array Int potato_17)) (kitten_52 Int) (kitten_53 Int) (kitten_54 (Array Int potato_17)) (kitten_55 Int) (kitten_56 Int)) Bool (ite (and (ite (<= kitten_52 kitten_53) (and (<= kitten_55 kitten_56) (= (- kitten_53 kitten_52) (- kitten_56 kitten_55))) (< kitten_56 kitten_55)) (forall ((kitten_57 Int)) (=> (and (<= kitten_52 kitten_57) (<= kitten_57 kitten_53)) (= (spoon_50 (select kitten_51 kitten_57) (select kitten_54 (+ (- kitten_55 kitten_52) kitten_57))) true)) )) true false))
(assert (forall ((kitten_58 (Array Int potato_17)) (kitten_59 (Array Int potato_17))) (forall ((kitten_60 Int) (kitten_61 Int) (kitten_62 Int) (kitten_63 Int)) (=> (= (spoon_65 kitten_59 kitten_62 kitten_63 kitten_58 kitten_60 kitten_61) true) (and (ite (<= kitten_60 kitten_61) (and (<= kitten_62 kitten_63) (= (- kitten_61 kitten_60) (- kitten_63 kitten_62))) (< kitten_63 kitten_62)) (forall ((kitten_64 Int)) (=> (and (<= kitten_60 kitten_64) (<= kitten_64 kitten_61)) (= (spoon_50 (select kitten_58 kitten_64) (select kitten_59 (+ (- kitten_62 kitten_60) kitten_64))) true)) ))) ) ))
(declare-fun cat_66 () (Array Int potato_17))
(declare-fun cat_67 () Int)
(declare-fun spoon_68 ((Array Int potato_17)) Int)
(declare-fun cat_69 () Int)
(declare-fun spoon_70 ((Array Int potato_17)) Int)
(declare-fun cat_71 () Int)
(declare-fun spoon_72 ((Array Int potato_17)) Int)
(assert (<= 0 cat_67))
(assert (forall ((kitten_65 (Array Int potato_17))) (<= 0 (spoon_68 kitten_65)) ))
(assert (<= 0 cat_69))
(assert (forall ((kitten_66 (Array Int potato_17))) (<= 0 (spoon_70 kitten_66)) ))
(assert (<= 0 cat_71))
(assert (forall ((kitten_67 (Array Int potato_17))) (<= 0 (spoon_72 kitten_67)) ))
(declare-fun spoon_73 ((Array Int potato_17) (Array Int potato_17)) Bool)
(declare-datatypes ((potato_20 0)) (((mk_potato_20 (get_potato_20_a potato_11) (get_potato_20_b (Array Int potato_17))))))

(define-fun spoon_74 ((kitten_68 potato_20)) potato_11 (get_potato_20_a kitten_68))
(define-fun spoon_75 ((kitten_69 potato_20)) (Array Int potato_17) (get_potato_20_b kitten_69))
(declare-datatypes ((potato_21 0)) (((mk_potato_21 (get_potato_21_a potato_20)))))

(define-fun spoon_76 ((kitten_70 potato_21)) potato_20 (get_potato_21_a kitten_70))
(declare-datatypes ((potato_22 0)) (((mk_potato_22 (get_potato_22_a potato_20)))))

(define-fun spoon_77 ((kitten_71 potato_22)) potato_20 (get_potato_22_a kitten_71))
(define-fun spoon_78 ((kitten_72 potato_22) (kitten_73 potato_22)) Bool (let ((_let_0 (get_potato_22_a kitten_72))) (let ((_let_1 (get_potato_22_a kitten_73))) (ite (and (= (spoon_35 (get_potato_20_a _let_0)) (spoon_35 (get_potato_20_a _let_1))) (= (spoon_65 (get_potato_20_b _let_0) 1 100 (get_potato_20_b _let_1) 1 100) true)) true false))))
(declare-fun cat_79 () Int)
(declare-fun spoon_80 (potato_22) Int)
(declare-fun cat_81 () Int)
(declare-fun spoon_82 (potato_22) Int)
(assert (<= 0 cat_79))
(assert (forall ((kitten_74 potato_22)) (<= 0 (spoon_80 kitten_74)) ))
(assert (<= 0 cat_81))
(assert (forall ((kitten_75 potato_22)) (<= 0 (spoon_82 kitten_75)) ))
(declare-fun cat_83 () Int)
(declare-fun cat_84 () Int)
(declare-fun cat_85 () Int)
(assert (<= 0 cat_83))
(assert (< cat_83 cat_84))
(assert (<= 0 cat_85))
(declare-fun cat_86 () Int)
(declare-fun cat_87 () Int)
(declare-fun cat_88 () Int)
(assert (<= 0 cat_86))
(assert (< cat_86 cat_87))
(assert (<= 0 cat_88))
(declare-fun spoon_89 (potato_22 potato_22) Bool)
(declare-fun cat_90 () potato_22)
(declare-datatypes ((potato_23 0)) (((mk_potato_23 (get_potato_23_a potato_22)))))

(define-fun spoon_91 ((kitten_76 potato_23)) potato_22 (get_potato_23_a kitten_76))
(declare-sort potato_24 0)
(define-fun spoon_92 ((kitten_77 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_77) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_77) (fp.leq kitten_77 (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))))))
(declare-fun spoon_93 (potato_24 potato_24) Bool)
(declare-fun spoon_94 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_95 (potato_5) Bool)
(declare-fun spoon_96 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_97 () potato_24)
(declare-datatypes ((potato_25 0)) (((mk_potato_25 (get_potato_25_a potato_24)))))

(define-fun spoon_98 ((kitten_78 potato_25)) potato_24 (get_potato_25_a kitten_78))
(define-fun spoon_99 ((kitten_79 (_ FloatingPoint 8 24)) (kitten_80 Bool) (kitten_81 Bool) (kitten_82 Bool) (kitten_83 Bool)) Bool (=> (or (= kitten_80 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23)))) (spoon_92 kitten_79)))
(declare-sort potato_26 0)
(define-fun spoon_100 ((kitten_84 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_84) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_84) (fp.leq kitten_84 (fp (_ bv0 1) (_ bv127 8) (_ bv0 23))))))
(declare-fun spoon_101 (potato_26 potato_26) Bool)
(declare-fun spoon_102 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_105 () potato_26)
(declare-datatypes ((potato_27 0)) (((mk_potato_27 (get_potato_27_a potato_26)))))

(define-fun spoon_106 ((kitten_85 potato_27)) potato_26 (get_potato_27_a kitten_85))
(define-fun spoon_107 ((kitten_86 (_ FloatingPoint 8 24)) (kitten_87 Bool) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool)) Bool (=> (or (= kitten_87 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv127 8) (_ bv0 23)))) (spoon_100 kitten_86)))
(declare-fun spoon_108 (potato_17 potato_22) Bool)
(declare-fun spoon_109 (Bool potato_17 potato_22) Bool)
(assert true)
(declare-sort potato_28 0)
(define-fun spoon_110 ((kitten_91 (_ FloatingPoint 8 24))) Bool (and (spoon_1 kitten_91) (and (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) kitten_91) (fp.leq kitten_91 (fp (_ bv0 1) (_ bv137 8) (_ bv3899392 23))))))
(declare-fun spoon_111 (potato_28 potato_28) Bool)
(declare-fun spoon_112 ((_ FloatingPoint 8 24)) potato_5)
(declare-fun spoon_113 (potato_5) Bool)
(declare-fun spoon_114 (potato_5) (_ FloatingPoint 8 24))
(declare-fun cat_115 () potato_28)
(declare-datatypes ((potato_29 0)) (((mk_potato_29 (get_potato_29_a potato_28)))))

(define-fun spoon_116 ((kitten_92 potato_29)) potato_28 (get_potato_29_a kitten_92))
(declare-fun spoon_117 (potato_28) (_ FloatingPoint 8 24))
(declare-fun spoon_118 ((_ FloatingPoint 8 24)) potato_28)
(assert (forall ((kitten_93 potato_28)) (! (= (spoon_118 (spoon_117 kitten_93)) kitten_93) :pattern ((spoon_117 kitten_93)))))
(assert (forall ((kitten_94 potato_28)) (! (spoon_110 (spoon_117 kitten_94)) :pattern ((spoon_117 kitten_94)))))
(assert (forall ((kitten_95 (_ FloatingPoint 8 24))) (! (=> (spoon_110 kitten_95) (= (spoon_117 (spoon_118 kitten_95)) kitten_95)) :pattern ((spoon_117 (spoon_118 kitten_95))))))
(declare-datatypes ((potato_30 0)) (((mk_potato_30 (get_potato_30_a potato_17) (get_potato_30_b potato_28)))))

(define-fun spoon_119 ((kitten_96 potato_30)) potato_17 (get_potato_30_a kitten_96))
(define-fun spoon_120 ((kitten_97 potato_30)) potato_28 (get_potato_30_b kitten_97))
(declare-datatypes ((potato_31 0)) (((mk_potato_31 (get_potato_31_a potato_30)))))

(define-fun spoon_121 ((kitten_98 potato_31)) potato_30 (get_potato_31_a kitten_98))
(declare-datatypes ((potato_32 0)) (((mk_potato_32 (get_potato_32_a potato_30)))))

(define-fun spoon_122 ((kitten_99 potato_32)) potato_30 (get_potato_32_a kitten_99))
(define-fun spoon_123 ((kitten_100 potato_32) (kitten_101 potato_32)) Bool (let ((_let_0 (get_potato_32_a kitten_100))) (let ((_let_1 (get_potato_32_a kitten_101))) (ite (and (= (spoon_50 (get_potato_30_a _let_0) (get_potato_30_a _let_1)) true) (= (spoon_117 (get_potato_30_b _let_0)) (spoon_117 (get_potato_30_b _let_1)))) true false))))
(declare-fun cat_124 () Int)
(declare-fun spoon_125 (potato_32) Int)
(declare-fun cat_126 () Int)
(declare-fun spoon_127 (potato_32) Int)
(assert (<= 0 cat_124))
(assert (forall ((kitten_102 potato_32)) (<= 0 (spoon_125 kitten_102)) ))
(assert (<= 0 cat_126))
(assert (forall ((kitten_103 potato_32)) (<= 0 (spoon_127 kitten_103)) ))
(declare-fun cat_128 () Int)
(declare-fun cat_129 () Int)
(declare-fun cat_130 () Int)
(assert (<= 0 cat_128))
(assert (< cat_128 cat_129))
(assert (<= 0 cat_130))
(declare-fun cat_131 () Int)
(declare-fun cat_132 () Int)
(declare-fun cat_133 () Int)
(assert (<= 0 cat_131))
(assert (< cat_131 cat_132))
(assert (<= 0 cat_133))
(declare-fun spoon_134 (potato_32 potato_32) Bool)
(declare-fun cat_135 () potato_32)
(declare-datatypes ((potato_33 0)) (((mk_potato_33 (get_potato_33_a potato_32)))))

(define-fun spoon_136 ((kitten_104 potato_33)) potato_32 (get_potato_33_a kitten_104))
(declare-sort potato_34 0)
(declare-fun spoon_137 (potato_34) Int)
(assert (forall ((kitten_105 potato_34)) (let ((_let_0 (spoon_137 kitten_105))) (and (<= 1 _let_0) (<= _let_0 100))) ))
(define-fun spoon_138 ((kitten_106 Int)) Bool (and (<= 1 kitten_106) (<= kitten_106 100)))
(declare-fun spoon_139 (Int) potato_5)
(declare-fun spoon_140 (potato_5) Bool)
(declare-fun spoon_141 (potato_5) Int)
(declare-fun spoon_142 (potato_34 potato_34) Bool)
(declare-fun cat_143 () potato_34)
(declare-datatypes ((potato_35 0)) (((mk_potato_35 (get_potato_35_a potato_34)))))

(define-fun spoon_144 ((kitten_107 potato_35)) potato_34 (get_potato_35_a kitten_107))
(declare-fun cat_145 () potato_22)
(declare-fun cat_146 () Int)
(declare-fun cat_147 () potato_32)
(declare-fun cat_148 () Int)
(declare-fun cat_149 () Int)
(declare-fun cat_150 () Int)
(declare-fun cat_151 () Int)
(declare-fun cat_152 () Int)
(declare-fun cat_153 () Int)
(declare-fun cat_154 () Int)
(define-fun spoon_155 ((kitten_108 (_ FloatingPoint 8 24)) (kitten_109 Bool) (kitten_110 Bool) (kitten_111 Bool) (kitten_112 Bool)) Bool (let ((_let_0 (fp (_ bv0 1) (_ bv139 8) (_ bv0 23)))) (=> (or (= kitten_109 true) (fp.leq (fp.neg _let_0) _let_0)) (spoon_37 kitten_108))))
(define-fun spoon_156 ((kitten_113 (_ FloatingPoint 8 24)) (kitten_114 Bool) (kitten_115 Bool) (kitten_116 Bool) (kitten_117 Bool)) Bool (=> (or (= kitten_114 true) (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv137 8) (_ bv3899392 23)))) (spoon_110 kitten_113)))
(define-fun spoon_157 ((kitten_118 Int) (kitten_119 Bool) (kitten_120 Bool) (kitten_121 Bool) (kitten_122 Bool)) Bool (=> (or (= kitten_119 true) (<= 1 100)) (spoon_138 kitten_118)))
(define-fun spoon_158 ((kitten_123 Int) (kitten_124 Bool) (kitten_125 Bool) (kitten_126 Bool) (kitten_127 Bool)) Bool (=> (or (= kitten_124 true) (<= 3 100)) (spoon_28 kitten_123)))
(declare-fun cat_159 () (_ FloatingPoint 8 24))
(declare-fun cat_160 () (_ FloatingPoint 8 24))
(declare-fun cat_161 () (_ FloatingPoint 8 24))
(declare-fun cat_162 () Bool)
(declare-fun cat_163 () potato_13)
(declare-fun cat_164 () potato_13)
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))) (spoon_92 cat_159)))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv140 8) (_ bv3489792 23))) (spoon_92 cat_160)))
(assert (=> (fp.leq (fp (_ bv0 1) (_ bv0 8) (_ bv0 23)) (fp (_ bv0 1) (_ bv127 8) (_ bv0 23))) (spoon_100 cat_161)))
(assert (= cat_162 (spoon_108 (get_potato_30_a (get_potato_32_a cat_147)) cat_145)))
(assert (not (= cat_162 true)))
(assert (let ((_let_0 (get_potato_22_a cat_145))) (= (mk_potato_15 cat_163 cat_164) (get_potato_17_a (select (get_potato_20_b _let_0) (spoon_35 (get_potato_20_a _let_0)))))))
(assert (<= 1 (spoon_35 (get_potato_20_a (get_potato_22_a cat_145)))))
(assert (not (<= (spoon_35 (get_potato_20_a (get_potato_22_a cat_145))) 100)))
(check-sat)
(exit)
