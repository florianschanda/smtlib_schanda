(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(define-fun spoon_9 ((kitten_7 Bool)) Int (ite (= kitten_7 true) 1 0))
(define-fun spoon_10 ((kitten_8 Int)) Bool (ite (= kitten_8 0) false true))
(define-fun spoon_11 ((kitten_9 Int)) Bool (or (= kitten_9 0) (= kitten_9 1)))
(declare-fun spoon_12 (Bool) potato_5)
(declare-fun spoon_13 (potato_5) Bool)
(declare-fun spoon_14 (potato_5) Bool)
(declare-fun spoon_15 (Int) Int)
(define-fun spoon_16 ((kitten_10 Float32)) Bool (and (fp.isInfinite kitten_10) (fp.isPositive kitten_10)))
(define-fun spoon_17 ((kitten_11 Float32)) Bool (and (fp.isInfinite kitten_11) (fp.isNegative kitten_11)))
(define-fun spoon_18 ((kitten_12 Float32)) Bool (and (fp.isZero kitten_12) (fp.isPositive kitten_12)))
(define-fun spoon_19 ((kitten_13 Float32)) Bool (and (fp.isZero kitten_13) (fp.isNegative kitten_13)))
(declare-fun spoon_20 (RoundingMode Int) Float32)
(declare-fun spoon_21 (RoundingMode Float32) Int)
(declare-const cat_22 Int)
(define-fun spoon_23 ((kitten_14 Int)) Bool (and (<= (- cat_22) kitten_14) (<= kitten_14 cat_22)))
(define-fun spoon_24 ((kitten_15 Int)) Bool (and (<= (- 16777216) kitten_15) (<= kitten_15 16777216)))
(define-fun spoon_25 ((kitten_16 Float32) (kitten_17 Float32)) Bool (or (and (fp.isPositive kitten_16) (fp.isPositive kitten_17)) (and (fp.isNegative kitten_16) (fp.isNegative kitten_17))))
(define-fun spoon_26 ((kitten_18 Float32) (kitten_19 Float32)) Bool (or (and (fp.isPositive kitten_18) (fp.isNegative kitten_19)) (and (fp.isNegative kitten_18) (fp.isPositive kitten_19))))
(define-fun spoon_27 ((kitten_20 Float32) (kitten_21 Float32) (kitten_22 Float32)) Bool (and (=> (spoon_25 kitten_21 kitten_22) (fp.isPositive kitten_20)) (=> (spoon_26 kitten_21 kitten_22) (fp.isNegative kitten_20))))
(define-fun spoon_28 ((kitten_23 Real)) Real (* kitten_23 kitten_23))
(declare-fun spoon_29 (Real) Real)
(define-fun spoon_30 ((kitten_24 Float32) (kitten_25 Real)) Bool (or (and (fp.isPositive kitten_24) (< 0.0 kitten_25)) (and (fp.isNegative kitten_24) (< kitten_25 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_27 potato_12)) potato_11 (get_potato_12_a kitten_27))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_28 potato_11)) (! (= (spoon_39 (spoon_38 kitten_28)) kitten_28) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 potato_11)) (! (spoon_31 (spoon_38 kitten_29)) :pattern ((spoon_38 kitten_29)))))
(assert (forall ((kitten_30 Float32)) (! (=> (spoon_31 kitten_30) (= (spoon_38 (spoon_39 kitten_30)) kitten_30)) :pattern ((spoon_38 (spoon_39 kitten_30))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_32 potato_15)) potato_13 (get_potato_15_a kitten_32))
(define-fun spoon_42 ((kitten_33 potato_15) (kitten_34 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_34)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_34))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_36 potato_15)) (<= 0 (spoon_46 kitten_36))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_37 potato_16)) potato_15 (get_potato_16_a kitten_37))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_38 Int)) Bool (and (<= 1 kitten_38) (<= kitten_38 30)))
(declare-fun spoon_57 (Int) potato_5)
(declare-fun spoon_58 (potato_5) Bool)
(declare-fun spoon_59 (potato_5) Int)
(declare-fun spoon_60 (potato_17 potato_17) Bool)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_39 potato_18)) potato_17 (get_potato_18_a kitten_39))
(declare-sort potato_19 0)
(define-fun spoon_63 ((kitten_40 Int)) Bool (and (<= 3 kitten_40) (<= kitten_40 30)))
(declare-fun spoon_64 (Int) potato_5)
(declare-fun spoon_65 (potato_5) Bool)
(declare-fun spoon_66 (potato_5) Int)
(declare-fun spoon_67 (potato_19 potato_19) Bool)
(declare-const cat_68 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_69 ((kitten_41 potato_20)) potato_19 (get_potato_20_a kitten_41))
(declare-fun spoon_70 (potato_19) Int)
(declare-fun spoon_71 (Int) potato_19)
(assert (forall ((kitten_42 potato_19)) (! (= (spoon_71 (spoon_70 kitten_42)) kitten_42) :pattern ((spoon_70 kitten_42)))))
(assert (forall ((kitten_43 potato_19)) (! (spoon_63 (spoon_70 kitten_43)) :pattern ((spoon_70 kitten_43)))))
(assert (forall ((kitten_44 Int)) (! (=> (spoon_63 kitten_44) (= (spoon_70 (spoon_71 kitten_44)) kitten_44)) :pattern ((spoon_70 (spoon_71 kitten_44))))))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a (Array Int potato_15))))))
(declare-fun spoon_72 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_45 (Array Int potato_15))) (forall ((kitten_46 Int)) (! (= (spoon_72 kitten_45 kitten_46 kitten_46) kitten_45) :pattern ((spoon_72 kitten_45 kitten_46 kitten_46))))))
(assert (forall ((kitten_47 (Array Int potato_15))) (forall ((kitten_48 Int)) (forall ((kitten_49 Int)) (forall ((kitten_50 Int)) (! (= (select (spoon_72 kitten_47 kitten_48 kitten_49) kitten_50) (select kitten_47 (- kitten_50 (- kitten_49 kitten_48)))) :pattern ((select (spoon_72 kitten_47 kitten_48 kitten_49) kitten_50))))))))
(declare-fun spoon_73 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_51 (Array Int potato_15)) (kitten_52 (Array Int potato_15))) (forall ((kitten_53 Int) (kitten_54 Int) (kitten_55 Int) (kitten_56 Int)) (forall ((kitten_57 Int)) (! (and (=> (and (<= kitten_53 kitten_57) (<= kitten_57 kitten_54)) (= (select (spoon_73 kitten_51 kitten_53 kitten_54 kitten_52 kitten_55 kitten_56) kitten_57) (select kitten_51 kitten_57))) (=> (< kitten_54 kitten_57) (= (select (spoon_73 kitten_51 kitten_53 kitten_54 kitten_52 kitten_55 kitten_56) kitten_57) (select kitten_52 (+ (- kitten_57 kitten_54) (- kitten_55 1)))))) :pattern ((select (spoon_73 kitten_51 kitten_53 kitten_54 kitten_52 kitten_55 kitten_56) kitten_57)))))))
(declare-fun spoon_74 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_58 potato_15)) (forall ((kitten_59 Int)) (! (= (select (spoon_74 kitten_58 kitten_59) kitten_59) kitten_58) :pattern ((select (spoon_74 kitten_58 kitten_59) kitten_59))))))
(define-fun spoon_75 ((kitten_60 (Array Int potato_15)) (kitten_61 Int) (kitten_62 Int) (kitten_63 (Array Int potato_15)) (kitten_64 Int) (kitten_65 Int)) Bool (ite (and (ite (<= kitten_61 kitten_62) (and (<= kitten_64 kitten_65) (= (- kitten_62 kitten_61) (- kitten_65 kitten_64))) (< kitten_65 kitten_64)) (forall ((kitten_66 Int)) (=> (and (<= kitten_61 kitten_66) (<= kitten_66 kitten_62)) (= (spoon_42 (select kitten_60 kitten_66) (select kitten_63 (+ (- kitten_64 kitten_61) kitten_66))) true)))) true false))
(assert (forall ((kitten_67 (Array Int potato_15)) (kitten_68 (Array Int potato_15))) (forall ((kitten_69 Int) (kitten_70 Int) (kitten_71 Int) (kitten_72 Int)) (=> (= (spoon_75 kitten_68 kitten_71 kitten_72 kitten_67 kitten_69 kitten_70) true) (and (ite (<= kitten_69 kitten_70) (and (<= kitten_71 kitten_72) (= (- kitten_70 kitten_69) (- kitten_72 kitten_71))) (< kitten_72 kitten_71)) (forall ((kitten_73 Int)) (=> (and (<= kitten_69 kitten_73) (<= kitten_73 kitten_70)) (= (spoon_42 (select kitten_67 kitten_73) (select kitten_68 (+ (- kitten_71 kitten_69) kitten_73))) true))))))))
(declare-const cat_76 (Array Int potato_15))
(declare-const cat_77 Int)
(declare-fun spoon_78 ((Array Int potato_15)) Int)
(declare-const cat_79 Int)
(declare-fun spoon_80 ((Array Int potato_15)) Int)
(declare-const cat_81 Int)
(declare-fun spoon_82 ((Array Int potato_15)) Int)
(assert (<= 0 cat_77))
(assert (forall ((kitten_74 (Array Int potato_15))) (<= 0 (spoon_78 kitten_74))))
(assert (<= 0 cat_79))
(assert (forall ((kitten_75 (Array Int potato_15))) (<= 0 (spoon_80 kitten_75))))
(assert (<= 0 cat_81))
(assert (forall ((kitten_76 (Array Int potato_15))) (<= 0 (spoon_82 kitten_76))))
(declare-fun spoon_83 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_19) (get_potato_22_b (Array Int potato_15))))))
(define-fun spoon_84 ((kitten_77 potato_22)) potato_19 (get_potato_22_a kitten_77))
(define-fun spoon_85 ((kitten_78 potato_22)) (Array Int potato_15) (get_potato_22_b kitten_78))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_86 ((kitten_79 potato_23)) potato_22 (get_potato_23_a kitten_79))
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_22)))))
(define-fun spoon_87 ((kitten_80 potato_24)) potato_22 (get_potato_24_a kitten_80))
(define-fun spoon_88 ((kitten_81 potato_24) (kitten_82 potato_24)) Bool (ite (and (= (spoon_70 (get_potato_22_a (get_potato_24_a kitten_81))) (spoon_70 (get_potato_22_a (get_potato_24_a kitten_82)))) (= (spoon_75 (get_potato_22_b (get_potato_24_a kitten_81)) 1 30 (get_potato_22_b (get_potato_24_a kitten_82)) 1 30) true)) true false))
(declare-const cat_89 Int)
(declare-fun spoon_90 (potato_24) Int)
(declare-const cat_91 Int)
(declare-fun spoon_92 (potato_24) Int)
(assert (<= 0 cat_89))
(assert (forall ((kitten_83 potato_24)) (<= 0 (spoon_90 kitten_83))))
(assert (<= 0 cat_91))
(assert (forall ((kitten_84 potato_24)) (<= 0 (spoon_92 kitten_84))))
(declare-const cat_93 Int)
(declare-const cat_94 Int)
(declare-const cat_95 Int)
(assert (<= 0 cat_93))
(assert (< cat_93 cat_94))
(assert (<= 0 cat_95))
(declare-const cat_96 Int)
(declare-const cat_97 Int)
(declare-const cat_98 Int)
(assert (<= 0 cat_96))
(assert (< cat_96 cat_97))
(assert (<= 0 cat_98))
(declare-fun spoon_99 (potato_24 potato_24) Bool)
(declare-const cat_100 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_101 ((kitten_85 potato_25)) potato_24 (get_potato_25_a kitten_85))
(declare-fun spoon_102 (potato_15 potato_24) Bool)
(declare-fun spoon_103 (Bool potato_15 potato_24) Bool)
(assert true)
(declare-const cat_104 potato_24)
(declare-const cat_105 Int)
(declare-const cat_106 potato_24)
(declare-const cat_107 Int)
(declare-const cat_108 Int)
(declare-const cat_109 Int)
(declare-const cat_110 Int)
(define-fun spoon_111 ((kitten_86 Float32) (kitten_87 Bool) (kitten_88 Bool) (kitten_89 Bool)) Bool (=> (or (= kitten_87 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_86)))
(define-fun spoon_112 ((kitten_90 Int) (kitten_91 Bool) (kitten_92 Bool) (kitten_93 Bool)) Bool (=> (or (= kitten_91 true) (<= 1 30)) (spoon_56 kitten_90)))
(define-fun spoon_113 ((kitten_94 Int) (kitten_95 Bool) (kitten_96 Bool) (kitten_97 Bool)) Bool (=> (or (= kitten_95 true) (<= 3 30)) (spoon_63 kitten_94)))
(declare-const cat_114 Bool)
(declare-const cat_115 Bool)
(declare-const cat_116 Bool)
(assert (= cat_115 cat_114))
(assert (= cat_116 (spoon_10 0)))
(assert (<= 1 (spoon_70 (get_potato_22_a (get_potato_24_a cat_104)))))
(assert (not (<= (spoon_70 (get_potato_22_a (get_potato_24_a cat_104))) 30)))
(check-sat)
(exit)
