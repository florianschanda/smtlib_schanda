(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_26 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_27 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_27 potato_11)) (! (= (spoon_39 (spoon_38 kitten_27)) kitten_27) :pattern ((spoon_38 kitten_27)))))
(assert (forall ((kitten_28 potato_11)) (! (spoon_31 (spoon_38 kitten_28)) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 Float32)) (! (=> (spoon_31 kitten_29) (= (spoon_38 (spoon_39 kitten_29)) kitten_29)) :pattern ((spoon_38 (spoon_39 kitten_29))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_30 potato_14)) potato_13 (get_potato_14_a kitten_30))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_31 potato_15)) potato_13 (get_potato_15_a kitten_31))
(define-fun spoon_42 ((kitten_32 potato_15) (kitten_33 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_32))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_34 potato_15)) (<= 0 (spoon_44 kitten_34))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_46 kitten_35))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_36 potato_16)) potato_15 (get_potato_16_a kitten_36))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_37 Float32)) Bool (and (spoon_1 kitten_37) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_37) (fp.leq kitten_37 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_38 potato_18)) potato_17 (get_potato_18_a kitten_38))
(define-fun spoon_63 ((kitten_39 Float32) (kitten_40 Bool) (kitten_41 Bool) (kitten_42 Bool)) Bool (=> (or (= kitten_40 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_56 kitten_39)))
(declare-sort potato_19 0)
(define-fun spoon_64 ((kitten_43 Float32)) Bool (and (spoon_1 kitten_43) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_43) (fp.leq kitten_43 (fp #b0 #b10001001 #b01110111000000000000000)))))
(declare-fun spoon_65 (potato_19 potato_19) Bool)
(declare-fun spoon_66 (Float32) potato_5)
(declare-fun spoon_67 (potato_5) Bool)
(declare-fun spoon_68 (potato_5) Float32)
(declare-const cat_69 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_70 ((kitten_44 potato_20)) potato_19 (get_potato_20_a kitten_44))
(declare-fun spoon_71 (potato_19) Float32)
(declare-fun spoon_72 (Float32) potato_19)
(assert (forall ((kitten_45 potato_19)) (! (= (spoon_72 (spoon_71 kitten_45)) kitten_45) :pattern ((spoon_71 kitten_45)))))
(assert (forall ((kitten_46 potato_19)) (! (spoon_64 (spoon_71 kitten_46)) :pattern ((spoon_71 kitten_46)))))
(assert (forall ((kitten_47 Float32)) (! (=> (spoon_64 kitten_47) (= (spoon_71 (spoon_72 kitten_47)) kitten_47)) :pattern ((spoon_71 (spoon_72 kitten_47))))))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_15) (get_potato_21_b potato_19)))))
(define-fun spoon_73 ((kitten_48 potato_21)) potato_15 (get_potato_21_a kitten_48))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_74 ((kitten_49 potato_22)) potato_21 (get_potato_22_a kitten_49))
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_21)))))
(define-fun spoon_75 ((kitten_50 potato_23)) potato_21 (get_potato_23_a kitten_50))
(define-fun spoon_76 ((kitten_51 potato_23) (kitten_52 potato_23)) Bool (ite (and (= (spoon_42 (get_potato_21_a (get_potato_23_a kitten_51)) (get_potato_21_a (get_potato_23_a kitten_52))) true) (= (spoon_71 (get_potato_21_b (get_potato_23_a kitten_51))) (spoon_71 (get_potato_21_b (get_potato_23_a kitten_52))))) true false))
(declare-const cat_77 Int)
(declare-fun spoon_78 (potato_23) Int)
(declare-const cat_79 Int)
(declare-fun spoon_80 (potato_23) Int)
(assert (<= 0 cat_77))
(assert (forall ((kitten_53 potato_23)) (<= 0 (spoon_78 kitten_53))))
(assert (<= 0 cat_79))
(assert (forall ((kitten_54 potato_23)) (<= 0 (spoon_80 kitten_54))))
(declare-const cat_81 Int)
(declare-const cat_82 Int)
(declare-const cat_83 Int)
(assert (<= 0 cat_81))
(assert (< cat_81 cat_82))
(assert (<= 0 cat_83))
(declare-const cat_84 Int)
(declare-const cat_85 Int)
(declare-const cat_86 Int)
(assert (<= 0 cat_84))
(assert (< cat_84 cat_85))
(assert (<= 0 cat_86))
(declare-fun spoon_87 (potato_23 potato_23) Bool)
(declare-const cat_88 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_89 ((kitten_55 potato_24)) potato_23 (get_potato_24_a kitten_55))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a (Array Int potato_15))))))
(declare-fun spoon_90 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_56 (Array Int potato_15))) (forall ((kitten_57 Int)) (! (= (spoon_90 kitten_56 kitten_57 kitten_57) kitten_56) :pattern ((spoon_90 kitten_56 kitten_57 kitten_57))))))
(assert (forall ((kitten_58 (Array Int potato_15))) (forall ((kitten_59 Int)) (forall ((kitten_60 Int)) (forall ((kitten_61 Int)) (! (= (select (spoon_90 kitten_58 kitten_59 kitten_60) kitten_61) (select kitten_58 (- kitten_61 (- kitten_60 kitten_59)))) :pattern ((select (spoon_90 kitten_58 kitten_59 kitten_60) kitten_61))))))))
(declare-fun spoon_91 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_62 (Array Int potato_15)) (kitten_63 (Array Int potato_15))) (forall ((kitten_64 Int) (kitten_65 Int) (kitten_66 Int) (kitten_67 Int)) (forall ((kitten_68 Int)) (! (and (=> (and (<= kitten_64 kitten_68) (<= kitten_68 kitten_65)) (= (select (spoon_91 kitten_62 kitten_64 kitten_65 kitten_63 kitten_66 kitten_67) kitten_68) (select kitten_62 kitten_68))) (=> (< kitten_65 kitten_68) (= (select (spoon_91 kitten_62 kitten_64 kitten_65 kitten_63 kitten_66 kitten_67) kitten_68) (select kitten_63 (+ (- kitten_68 kitten_65) (- kitten_66 1)))))) :pattern ((select (spoon_91 kitten_62 kitten_64 kitten_65 kitten_63 kitten_66 kitten_67) kitten_68)))))))
(declare-fun spoon_92 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_69 potato_15)) (forall ((kitten_70 Int)) (! (= (select (spoon_92 kitten_69 kitten_70) kitten_70) kitten_69) :pattern ((select (spoon_92 kitten_69 kitten_70) kitten_70))))))
(define-fun spoon_93 ((kitten_71 (Array Int potato_15)) (kitten_72 Int) (kitten_73 Int) (kitten_74 (Array Int potato_15)) (kitten_75 Int) (kitten_76 Int)) Bool (ite (and (ite (<= kitten_72 kitten_73) (and (<= kitten_75 kitten_76) (= (- kitten_73 kitten_72) (- kitten_76 kitten_75))) (< kitten_76 kitten_75)) (forall ((kitten_77 Int)) (=> (and (<= kitten_72 kitten_77) (<= kitten_77 kitten_73)) (= (spoon_42 (select kitten_71 kitten_77) (select kitten_74 (+ (- kitten_75 kitten_72) kitten_77))) true)))) true false))
(assert (forall ((kitten_78 (Array Int potato_15)) (kitten_79 (Array Int potato_15))) (forall ((kitten_80 Int) (kitten_81 Int) (kitten_82 Int) (kitten_83 Int)) (=> (= (spoon_93 kitten_79 kitten_82 kitten_83 kitten_78 kitten_80 kitten_81) true) (and (ite (<= kitten_80 kitten_81) (and (<= kitten_82 kitten_83) (= (- kitten_81 kitten_80) (- kitten_83 kitten_82))) (< kitten_83 kitten_82)) (forall ((kitten_84 Int)) (=> (and (<= kitten_80 kitten_84) (<= kitten_84 kitten_81)) (= (spoon_42 (select kitten_78 kitten_84) (select kitten_79 (+ (- kitten_82 kitten_80) kitten_84))) true))))))))
(declare-sort potato_26 0)
(define-fun spoon_94 ((kitten_85 Int)) Bool (and (<= 1 kitten_85) (<= kitten_85 100)))
(declare-fun spoon_95 (Int) potato_5)
(declare-fun spoon_96 (potato_5) Bool)
(declare-fun spoon_97 (potato_5) Int)
(declare-fun spoon_98 (potato_26 potato_26) Bool)
(declare-const cat_99 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_100 ((kitten_86 potato_27)) potato_26 (get_potato_27_a kitten_86))
(declare-sort potato_28 0)
(define-fun spoon_101 ((kitten_87 Int)) Bool (and (<= 3 kitten_87) (<= kitten_87 100)))
(declare-fun spoon_102 (Int) potato_5)
(declare-fun spoon_103 (potato_5) Bool)
(declare-fun spoon_104 (potato_5) Int)
(declare-fun spoon_105 (potato_28 potato_28) Bool)
(declare-const cat_106 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_107 ((kitten_88 potato_29)) potato_28 (get_potato_29_a kitten_88))
(declare-fun spoon_108 (potato_28) Int)
(declare-fun spoon_109 (Int) potato_28)
(assert (forall ((kitten_89 potato_28)) (! (= (spoon_109 (spoon_108 kitten_89)) kitten_89) :pattern ((spoon_108 kitten_89)))))
(assert (forall ((kitten_90 potato_28)) (! (spoon_101 (spoon_108 kitten_90)) :pattern ((spoon_108 kitten_90)))))
(assert (forall ((kitten_91 Int)) (! (=> (spoon_101 kitten_91) (= (spoon_108 (spoon_109 kitten_91)) kitten_91)) :pattern ((spoon_108 (spoon_109 kitten_91))))))
(declare-const cat_110 (Array Int potato_15))
(declare-const cat_111 Int)
(declare-fun spoon_112 ((Array Int potato_15)) Int)
(declare-const cat_113 Int)
(declare-fun spoon_114 ((Array Int potato_15)) Int)
(declare-const cat_115 Int)
(declare-fun spoon_116 ((Array Int potato_15)) Int)
(assert (<= 0 cat_111))
(assert (forall ((kitten_92 (Array Int potato_15))) (<= 0 (spoon_112 kitten_92))))
(assert (<= 0 cat_113))
(assert (forall ((kitten_93 (Array Int potato_15))) (<= 0 (spoon_114 kitten_93))))
(assert (<= 0 cat_115))
(assert (forall ((kitten_94 (Array Int potato_15))) (<= 0 (spoon_116 kitten_94))))
(declare-fun spoon_117 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_30 (mk_potato_30 (get_potato_30_a potato_28) (get_potato_30_b (Array Int potato_15))))))
(define-fun spoon_118 ((kitten_95 potato_30)) potato_28 (get_potato_30_a kitten_95))
(define-fun spoon_119 ((kitten_96 potato_30)) (Array Int potato_15) (get_potato_30_b kitten_96))
(declare-datatypes () ((potato_31 (mk_potato_31 (get_potato_31_a potato_30)))))
(define-fun spoon_120 ((kitten_97 potato_31)) potato_30 (get_potato_31_a kitten_97))
(declare-datatypes () ((potato_32 (mk_potato_32 (get_potato_32_a potato_30)))))
(define-fun spoon_121 ((kitten_98 potato_32)) potato_30 (get_potato_32_a kitten_98))
(define-fun spoon_122 ((kitten_99 potato_32) (kitten_100 potato_32)) Bool (ite (and (= (spoon_108 (get_potato_30_a (get_potato_32_a kitten_99))) (spoon_108 (get_potato_30_a (get_potato_32_a kitten_100)))) (= (spoon_93 (get_potato_30_b (get_potato_32_a kitten_99)) 1 100 (get_potato_30_b (get_potato_32_a kitten_100)) 1 100) true)) true false))
(declare-const cat_123 Int)
(declare-fun spoon_124 (potato_32) Int)
(declare-const cat_125 Int)
(declare-fun spoon_126 (potato_32) Int)
(assert (<= 0 cat_123))
(assert (forall ((kitten_101 potato_32)) (<= 0 (spoon_124 kitten_101))))
(assert (<= 0 cat_125))
(assert (forall ((kitten_102 potato_32)) (<= 0 (spoon_126 kitten_102))))
(declare-const cat_127 Int)
(declare-const cat_128 Int)
(declare-const cat_129 Int)
(assert (<= 0 cat_127))
(assert (< cat_127 cat_128))
(assert (<= 0 cat_129))
(declare-const cat_130 Int)
(declare-const cat_131 Int)
(declare-const cat_132 Int)
(assert (<= 0 cat_130))
(assert (< cat_130 cat_131))
(assert (<= 0 cat_132))
(declare-fun spoon_133 (potato_32 potato_32) Bool)
(declare-const cat_134 potato_32)
(declare-datatypes () ((potato_33 (mk_potato_33 (get_potato_33_a potato_32)))))
(define-fun spoon_135 ((kitten_103 potato_33)) potato_32 (get_potato_33_a kitten_103))
(declare-sort potato_34 0)
(define-fun spoon_136 ((kitten_104 Float32)) Bool (and (spoon_1 kitten_104) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_104) (fp.leq kitten_104 (fp #b0 #b01111111 #b00000000000000000000000)))))
(declare-fun spoon_137 (potato_34 potato_34) Bool)
(declare-fun spoon_138 (Float32) potato_5)
(declare-fun spoon_139 (potato_5) Bool)
(declare-fun spoon_140 (potato_5) Float32)
(declare-const cat_141 potato_34)
(declare-datatypes () ((potato_35 (mk_potato_35 (get_potato_35_a potato_34)))))
(define-fun spoon_142 ((kitten_105 potato_35)) potato_34 (get_potato_35_a kitten_105))
(define-fun spoon_143 ((kitten_106 Float32) (kitten_107 Bool) (kitten_108 Bool) (kitten_109 Bool)) Bool (=> (or (= kitten_107 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000))) (spoon_136 kitten_106)))
(declare-fun spoon_144 (potato_15 potato_32) Bool)
(declare-fun spoon_145 (Bool potato_15 potato_32) Bool)
(assert true)
(declare-const cat_146 potato_32)
(declare-const cat_147 Int)
(declare-const cat_148 potato_23)
(declare-const cat_149 Int)
(declare-const cat_150 Int)
(declare-const cat_151 Int)
(declare-const cat_152 Int)
(declare-const cat_153 Int)
(declare-const cat_154 Int)
(declare-const cat_155 Int)
(define-fun spoon_156 ((kitten_110 Float32) (kitten_111 Bool) (kitten_112 Bool) (kitten_113 Bool)) Bool (=> (or (= kitten_111 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_110)))
(define-fun spoon_157 ((kitten_114 Float32) (kitten_115 Bool) (kitten_116 Bool) (kitten_117 Bool)) Bool (=> (or (= kitten_115 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001001 #b01110111000000000000000))) (spoon_64 kitten_114)))
(define-fun spoon_158 ((kitten_118 Int) (kitten_119 Bool) (kitten_120 Bool) (kitten_121 Bool)) Bool (=> (or (= kitten_119 true) (<= 1 100)) (spoon_94 kitten_118)))
(define-fun spoon_159 ((kitten_122 Int) (kitten_123 Bool) (kitten_124 Bool) (kitten_125 Bool)) Bool (=> (or (= kitten_123 true) (<= 3 100)) (spoon_101 kitten_122)))
(declare-const cat_160 Float32)
(declare-const cat_161 Float32)
(declare-const cat_162 potato_11)
(declare-const cat_163 potato_11)
(declare-const cat_164 Float32)
(declare-const cat_165 Bool)
(declare-const cat_166 Float32)
(declare-const cat_167 Float32)
(declare-const cat_168 potato_11)
(declare-const cat_169 potato_11)
(declare-const cat_170 potato_11)
(declare-const cat_171 potato_11)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_160)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_161)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)) (spoon_136 cat_164)))
(assert (= cat_165 (spoon_144 (get_potato_21_a (get_potato_23_a cat_148)) cat_146)))
(assert (not (= cat_165 true)))
(assert (= cat_166 cat_160))
(assert (= cat_167 (fp #b0 #b10001100 #b01101010100000000000000)))
(assert (= cat_168 cat_162))
(assert (= cat_169 cat_163))
(assert (= (mk_potato_13 cat_170 cat_171) (get_potato_15_a (select (get_potato_30_b (get_potato_32_a cat_146)) (spoon_108 (get_potato_30_a (get_potato_32_a cat_146)))))))
(assert (<= 1 (spoon_108 (get_potato_30_a (get_potato_32_a cat_146)))))
(assert (not (<= (spoon_108 (get_potato_30_a (get_potato_32_a cat_146))) 100)))
(check-sat)
(exit)
