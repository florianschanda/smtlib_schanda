(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_2 (potato_2 potato_2) Bool)
(declare-const cat_3 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_4 ((kitten_2 potato_6)) Int (get_potato_6_a kitten_2))
(define-fun spoon_5 ((kitten_3 potato_7)) Bool (get_potato_7_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_8)) Real (get_potato_8_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_9)) potato_2 (get_potato_9_a kitten_5))
(declare-fun spoon_8 (Int) Int)
(define-fun spoon_9 ((kitten_6 Float32)) Bool (and (fp.isInfinite kitten_6) (fp.isPositive kitten_6)))
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isNegative kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isZero kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isNegative kitten_9)))
(declare-fun spoon_13 (RoundingMode Int) Float32)
(declare-fun spoon_14 (RoundingMode Float32) Int)
(declare-const cat_15 Int)
(define-fun spoon_16 ((kitten_10 Int)) Bool (and (<= (- cat_15) kitten_10) (<= kitten_10 cat_15)))
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- 16777216) kitten_11) (<= kitten_11 16777216)))
(define-fun spoon_18 ((kitten_12 Float32) (kitten_13 Float32)) Bool (or (and (fp.isPositive kitten_12) (fp.isPositive kitten_13)) (and (fp.isNegative kitten_12) (fp.isNegative kitten_13))))
(define-fun spoon_19 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isNegative kitten_15)) (and (fp.isNegative kitten_14) (fp.isPositive kitten_15))))
(define-fun spoon_20 ((kitten_16 Float32) (kitten_17 Float32) (kitten_18 Float32)) Bool (and (=> (spoon_18 kitten_17 kitten_18) (fp.isPositive kitten_16)) (=> (spoon_19 kitten_17 kitten_18) (fp.isNegative kitten_16))))
(define-fun spoon_21 ((kitten_19 Real)) Real (* kitten_19 kitten_19))
(declare-fun spoon_22 (Real) Real)
(define-fun spoon_23 ((kitten_20 Float32) (kitten_21 Real)) Bool (or (and (fp.isPositive kitten_20) (< 0.0 kitten_21)) (and (fp.isNegative kitten_20) (< kitten_21 0.0))))
(declare-fun spoon_24 (Float32) Bool)
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_22 Bool)) Int (ite (= kitten_22 true) 1 0))
(define-fun spoon_26 ((kitten_23 Int)) Bool (ite (= kitten_23 0) false true))
(define-fun spoon_27 ((kitten_24 Int)) Bool (or (= kitten_24 0) (= kitten_24 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_25 Float32)) Bool (and (spoon_1 kitten_25) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_25) (fp.leq kitten_25 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_26 potato_12)) potato_11 (get_potato_12_a kitten_26))
(define-fun spoon_38 ((kitten_27 Float32) (kitten_28 Bool) (kitten_29 Bool) (kitten_30 Bool)) Bool (=> (or (= kitten_28 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_27)))
(declare-fun spoon_39 (potato_11) Float32)
(declare-fun spoon_40 (Float32) potato_11)
(assert (forall ((kitten_31 potato_11)) (! (= (spoon_40 (spoon_39 kitten_31)) kitten_31) :pattern ((spoon_39 kitten_31)))))
(assert (forall ((kitten_32 potato_11)) (! (spoon_31 (spoon_39 kitten_32)) :pattern ((spoon_39 kitten_32)))))
(assert (forall ((kitten_33 Float32)) (! (=> (spoon_31 kitten_33) (= (spoon_39 (spoon_40 kitten_33)) kitten_33)) :pattern ((spoon_39 (spoon_40 kitten_33))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_41 ((kitten_34 potato_14)) potato_13 (get_potato_14_a kitten_34))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_42 ((kitten_35 potato_15)) potato_13 (get_potato_15_a kitten_35))
(define-fun spoon_43 ((kitten_36 potato_15) (kitten_37 potato_15)) Bool (ite (and (= (spoon_39 (get_potato_13_a (get_potato_15_a kitten_36))) (spoon_39 (get_potato_13_a (get_potato_15_a kitten_37)))) (= (spoon_39 (get_potato_13_b (get_potato_15_a kitten_36))) (spoon_39 (get_potato_13_b (get_potato_15_a kitten_37))))) true false))
(declare-const cat_44 Int)
(declare-fun spoon_45 (potato_15) Int)
(declare-const cat_46 Int)
(declare-fun spoon_47 (potato_15) Int)
(assert (<= 0 cat_44))
(assert (forall ((kitten_38 potato_15)) (<= 0 (spoon_45 kitten_38))))
(assert (<= 0 cat_46))
(assert (forall ((kitten_39 potato_15)) (<= 0 (spoon_47 kitten_39))))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(declare-const cat_53 Int)
(assert (<= 0 cat_51))
(assert (< cat_51 cat_52))
(assert (<= 0 cat_53))
(declare-fun spoon_54 (potato_15 potato_15) Bool)
(declare-const cat_55 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_56 ((kitten_40 potato_16)) potato_15 (get_potato_16_a kitten_40))
(declare-datatypes () ((potato_17 (mk_potato_17 (get_potato_17_a potato_15) (get_potato_17_b potato_15)))))
(define-fun spoon_57 ((kitten_41 potato_17)) potato_15 (get_potato_17_a kitten_41))
(define-fun spoon_58 ((kitten_42 potato_17)) potato_15 (get_potato_17_b kitten_42))
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_59 ((kitten_43 potato_18)) potato_17 (get_potato_18_a kitten_43))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a potato_17)))))
(define-fun spoon_60 ((kitten_44 potato_19)) potato_17 (get_potato_19_a kitten_44))
(define-fun spoon_61 ((kitten_45 potato_19) (kitten_46 potato_19)) Bool (ite (and (= (spoon_43 (get_potato_17_a (get_potato_19_a kitten_45)) (get_potato_17_a (get_potato_19_a kitten_46))) true) (= (spoon_43 (get_potato_17_b (get_potato_19_a kitten_45)) (get_potato_17_b (get_potato_19_a kitten_46))) true)) true false))
(declare-const cat_62 Int)
(declare-fun spoon_63 (potato_19) Int)
(declare-const cat_64 Int)
(declare-fun spoon_65 (potato_19) Int)
(assert (<= 0 cat_62))
(assert (forall ((kitten_47 potato_19)) (<= 0 (spoon_63 kitten_47))))
(assert (<= 0 cat_64))
(assert (forall ((kitten_48 potato_19)) (<= 0 (spoon_65 kitten_48))))
(declare-const cat_66 Int)
(declare-const cat_67 Int)
(declare-const cat_68 Int)
(assert (<= 0 cat_66))
(assert (< cat_66 cat_67))
(assert (<= 0 cat_68))
(declare-const cat_69 Int)
(declare-const cat_70 Int)
(declare-const cat_71 Int)
(assert (<= 0 cat_69))
(assert (< cat_69 cat_70))
(assert (<= 0 cat_71))
(declare-fun spoon_72 (potato_19 potato_19) Bool)
(declare-const cat_73 potato_19)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_19)))))
(define-fun spoon_74 ((kitten_49 potato_20)) potato_19 (get_potato_20_a kitten_49))
(declare-sort potato_21 0)
(define-fun spoon_75 ((kitten_50 Int)) Bool (and (<= 1 kitten_50) (<= kitten_50 30)))
(declare-fun spoon_76 (Int) potato_5)
(declare-fun spoon_77 (potato_5) Bool)
(declare-fun spoon_78 (potato_5) Int)
(declare-fun spoon_79 (potato_21 potato_21) Bool)
(declare-const cat_80 potato_21)
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_21)))))
(define-fun spoon_81 ((kitten_51 potato_22)) potato_21 (get_potato_22_a kitten_51))
(declare-sort potato_23 0)
(define-fun spoon_82 ((kitten_52 Int)) Bool (and (<= 3 kitten_52) (<= kitten_52 30)))
(declare-fun spoon_83 (Int) potato_5)
(declare-fun spoon_84 (potato_5) Bool)
(declare-fun spoon_85 (potato_5) Int)
(declare-fun spoon_86 (potato_23 potato_23) Bool)
(declare-const cat_87 potato_23)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_23)))))
(define-fun spoon_88 ((kitten_53 potato_24)) potato_23 (get_potato_24_a kitten_53))
(declare-fun spoon_89 (potato_23) Int)
(declare-fun spoon_90 (Int) potato_23)
(assert (forall ((kitten_54 potato_23)) (! (= (spoon_90 (spoon_89 kitten_54)) kitten_54) :pattern ((spoon_89 kitten_54)))))
(assert (forall ((kitten_55 potato_23)) (! (spoon_82 (spoon_89 kitten_55)) :pattern ((spoon_89 kitten_55)))))
(assert (forall ((kitten_56 Int)) (! (=> (spoon_82 kitten_56) (= (spoon_89 (spoon_90 kitten_56)) kitten_56)) :pattern ((spoon_89 (spoon_90 kitten_56))))))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a (Array Int potato_15))))))
(declare-fun spoon_91 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_57 (Array Int potato_15))) (forall ((kitten_58 Int)) (! (= (spoon_91 kitten_57 kitten_58 kitten_58) kitten_57) :pattern ((spoon_91 kitten_57 kitten_58 kitten_58))))))
(assert (forall ((kitten_59 (Array Int potato_15))) (forall ((kitten_60 Int)) (forall ((kitten_61 Int)) (forall ((kitten_62 Int)) (! (= (select (spoon_91 kitten_59 kitten_60 kitten_61) kitten_62) (select kitten_59 (- kitten_62 (- kitten_61 kitten_60)))) :pattern ((select (spoon_91 kitten_59 kitten_60 kitten_61) kitten_62))))))))
(declare-fun spoon_92 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_63 (Array Int potato_15)) (kitten_64 (Array Int potato_15))) (forall ((kitten_65 Int) (kitten_66 Int) (kitten_67 Int) (kitten_68 Int)) (forall ((kitten_69 Int)) (! (and (=> (and (<= kitten_65 kitten_69) (<= kitten_69 kitten_66)) (= (select (spoon_92 kitten_63 kitten_65 kitten_66 kitten_64 kitten_67 kitten_68) kitten_69) (select kitten_63 kitten_69))) (=> (< kitten_66 kitten_69) (= (select (spoon_92 kitten_63 kitten_65 kitten_66 kitten_64 kitten_67 kitten_68) kitten_69) (select kitten_64 (+ (- kitten_69 kitten_66) (- kitten_67 1)))))) :pattern ((select (spoon_92 kitten_63 kitten_65 kitten_66 kitten_64 kitten_67 kitten_68) kitten_69)))))))
(declare-fun spoon_93 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_70 potato_15)) (forall ((kitten_71 Int)) (! (= (select (spoon_93 kitten_70 kitten_71) kitten_71) kitten_70) :pattern ((select (spoon_93 kitten_70 kitten_71) kitten_71))))))
(define-fun spoon_94 ((kitten_72 (Array Int potato_15)) (kitten_73 Int) (kitten_74 Int) (kitten_75 (Array Int potato_15)) (kitten_76 Int) (kitten_77 Int)) Bool (ite (and (ite (<= kitten_73 kitten_74) (and (<= kitten_76 kitten_77) (= (- kitten_74 kitten_73) (- kitten_77 kitten_76))) (< kitten_77 kitten_76)) (forall ((kitten_78 Int)) (=> (and (<= kitten_73 kitten_78) (<= kitten_78 kitten_74)) (= (spoon_43 (select kitten_72 kitten_78) (select kitten_75 (+ (- kitten_76 kitten_73) kitten_78))) true)))) true false))
(assert (forall ((kitten_79 (Array Int potato_15)) (kitten_80 (Array Int potato_15))) (forall ((kitten_81 Int) (kitten_82 Int) (kitten_83 Int) (kitten_84 Int)) (=> (= (spoon_94 kitten_80 kitten_83 kitten_84 kitten_79 kitten_81 kitten_82) true) (and (ite (<= kitten_81 kitten_82) (and (<= kitten_83 kitten_84) (= (- kitten_82 kitten_81) (- kitten_84 kitten_83))) (< kitten_84 kitten_83)) (forall ((kitten_85 Int)) (=> (and (<= kitten_81 kitten_85) (<= kitten_85 kitten_82)) (= (spoon_43 (select kitten_79 kitten_85) (select kitten_80 (+ (- kitten_83 kitten_81) kitten_85))) true))))))))
(declare-const cat_95 (Array Int potato_15))
(declare-const cat_96 Int)
(declare-fun spoon_97 ((Array Int potato_15)) Int)
(declare-const cat_98 Int)
(declare-fun spoon_99 ((Array Int potato_15)) Int)
(declare-const cat_100 Int)
(declare-fun spoon_101 ((Array Int potato_15)) Int)
(assert (<= 0 cat_96))
(assert (forall ((kitten_86 (Array Int potato_15))) (<= 0 (spoon_97 kitten_86))))
(assert (<= 0 cat_98))
(assert (forall ((kitten_87 (Array Int potato_15))) (<= 0 (spoon_99 kitten_87))))
(assert (<= 0 cat_100))
(assert (forall ((kitten_88 (Array Int potato_15))) (<= 0 (spoon_101 kitten_88))))
(declare-fun spoon_102 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_23) (get_potato_26_b (Array Int potato_15))))))
(define-fun spoon_103 ((kitten_89 potato_26)) potato_23 (get_potato_26_a kitten_89))
(define-fun spoon_104 ((kitten_90 potato_26)) (Array Int potato_15) (get_potato_26_b kitten_90))
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_105 ((kitten_91 potato_27)) potato_26 (get_potato_27_a kitten_91))
(declare-datatypes () ((potato_28 (mk_potato_28 (get_potato_28_a potato_26)))))
(define-fun spoon_106 ((kitten_92 potato_28)) potato_26 (get_potato_28_a kitten_92))
(define-fun spoon_107 ((kitten_93 potato_28) (kitten_94 potato_28)) Bool (ite (and (= (spoon_89 (get_potato_26_a (get_potato_28_a kitten_93))) (spoon_89 (get_potato_26_a (get_potato_28_a kitten_94)))) (= (spoon_94 (get_potato_26_b (get_potato_28_a kitten_93)) 1 30 (get_potato_26_b (get_potato_28_a kitten_94)) 1 30) true)) true false))
(declare-const cat_108 Int)
(declare-fun spoon_109 (potato_28) Int)
(declare-const cat_110 Int)
(declare-fun spoon_111 (potato_28) Int)
(assert (<= 0 cat_108))
(assert (forall ((kitten_95 potato_28)) (<= 0 (spoon_109 kitten_95))))
(assert (<= 0 cat_110))
(assert (forall ((kitten_96 potato_28)) (<= 0 (spoon_111 kitten_96))))
(declare-const cat_112 Int)
(declare-const cat_113 Int)
(declare-const cat_114 Int)
(assert (<= 0 cat_112))
(assert (< cat_112 cat_113))
(assert (<= 0 cat_114))
(declare-const cat_115 Int)
(declare-const cat_116 Int)
(declare-const cat_117 Int)
(assert (<= 0 cat_115))
(assert (< cat_115 cat_116))
(assert (<= 0 cat_117))
(declare-fun spoon_118 (potato_28 potato_28) Bool)
(declare-const cat_119 potato_28)
(declare-datatypes () ((potato_29 (mk_potato_29 (get_potato_29_a potato_28)))))
(define-fun spoon_120 ((kitten_97 potato_29)) potato_28 (get_potato_29_a kitten_97))
(declare-const cat_121 potato_28)
(declare-const cat_122 Int)
(declare-const cat_123 Int)
(declare-const cat_124 Int)
(declare-const cat_125 Int)
(declare-const cat_126 Int)
(declare-const cat_127 Int)
(define-fun spoon_128 ((kitten_98 Int) (kitten_99 Bool) (kitten_100 Bool) (kitten_101 Bool)) Bool (=> (or (= kitten_99 true) (<= 1 30)) (spoon_75 kitten_98)))
(define-fun spoon_129 ((kitten_102 Int) (kitten_103 Bool) (kitten_104 Bool) (kitten_105 Bool)) Bool (=> (or (= kitten_103 true) (<= 3 30)) (spoon_82 kitten_102)))
(declare-const cat_130 Float32)
(declare-const cat_131 Float32)
(declare-const cat_132 Float32)
(declare-const cat_133 Float32)
(declare-const cat_134 potato_10)
(declare-const cat_135 Float32)
(declare-const cat_136 potato_10)
(declare-const cat_137 Float32)
(declare-const cat_138 potato_10)
(declare-const cat_139 Float32)
(declare-const cat_140 potato_10)
(declare-const cat_141 Float32)
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_31 cat_130)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_31 cat_131)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_31 cat_132)))
(assert (=> (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)) (spoon_31 cat_133)))
(assert (= cat_134 (mk_potato_10 cat_130)))
(assert (= cat_135 (spoon_39 (get_potato_13_a (get_potato_15_a (select (get_potato_26_b (get_potato_28_a cat_121)) 1))))))
(assert (= cat_136 (mk_potato_10 cat_132)))
(assert (= cat_137 (spoon_39 (get_potato_13_b (get_potato_15_a (select (get_potato_26_b (get_potato_28_a cat_121)) 1))))))
(assert (= cat_138 (mk_potato_10 cat_131)))
(assert (= cat_139 (spoon_39 (get_potato_13_a (get_potato_15_a (select (get_potato_26_b (get_potato_28_a cat_121)) 1))))))
(assert (= cat_140 (mk_potato_10 cat_133)))
(assert (= cat_141 (spoon_39 (get_potato_13_b (get_potato_15_a (select (get_potato_26_b (get_potato_28_a cat_121)) 1))))))
(assert (<= 2 (spoon_89 (get_potato_26_a (get_potato_28_a cat_121)))))
(assert (not (<= (spoon_89 (get_potato_26_a (get_potato_28_a cat_121))) 30)))
(check-sat)
(exit)
