(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(define-fun spoon_9 ((kitten_7 Int)) Bool (or (= kitten_7 0) (= kitten_7 1)))
(declare-fun spoon_10 (Bool) potato_5)
(declare-fun spoon_11 (potato_5) Bool)
(declare-fun spoon_12 (potato_5) Bool)
(declare-fun spoon_13 (Int) Int)
(define-fun spoon_14 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isPositive kitten_8)))
(define-fun spoon_15 ((kitten_9 Float32)) Bool (and (fp.isInfinite kitten_9) (fp.isNegative kitten_9)))
(define-fun spoon_16 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isPositive kitten_10)))
(define-fun spoon_17 ((kitten_11 Float32)) Bool (and (fp.isZero kitten_11) (fp.isNegative kitten_11)))
(declare-const cat_18 Int)
(define-fun spoon_19 ((kitten_12 Int)) Bool (and (<= (- cat_18) kitten_12) (<= kitten_12 cat_18)))
(define-fun spoon_20 ((kitten_13 Int)) Bool (and (<= (- 16777216) kitten_13) (<= kitten_13 16777216)))
(define-fun spoon_21 ((kitten_14 Float32) (kitten_15 Float32)) Bool (or (and (fp.isPositive kitten_14) (fp.isPositive kitten_15)) (and (fp.isNegative kitten_14) (fp.isNegative kitten_15))))
(define-fun spoon_22 ((kitten_16 Float32) (kitten_17 Float32)) Bool (or (and (fp.isPositive kitten_16) (fp.isNegative kitten_17)) (and (fp.isNegative kitten_16) (fp.isPositive kitten_17))))
(define-fun spoon_23 ((kitten_18 Float32) (kitten_19 Float32) (kitten_20 Float32)) Bool (and (=> (spoon_21 kitten_19 kitten_20) (fp.isPositive kitten_18)) (=> (spoon_22 kitten_19 kitten_20) (fp.isNegative kitten_18))))
(define-fun spoon_24 ((kitten_21 Real)) Real (* kitten_21 kitten_21))
(declare-fun spoon_25 (Real) Real)
(define-fun spoon_26 ((kitten_22 Float32) (kitten_23 Real)) Bool (or (and (fp.isPositive kitten_22) (< 0.0 kitten_23)) (and (fp.isNegative kitten_22) (< kitten_23 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(declare-sort potato_11 0)
(define-fun spoon_27 ((kitten_24 Float32)) Bool (and (spoon_1 kitten_24) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_24) (fp.leq kitten_24 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_28 (potato_11 potato_11) Bool)
(declare-fun spoon_29 (Float32) potato_5)
(declare-fun spoon_30 (potato_5) Bool)
(declare-fun spoon_31 (potato_5) Float32)
(declare-const cat_32 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_33 ((kitten_25 potato_12)) potato_11 (get_potato_12_a kitten_25))
(declare-fun spoon_34 (potato_11) Float32)
(declare-fun spoon_35 (Float32) potato_11)
(assert (forall ((kitten_26 potato_11)) (! (= (spoon_35 (spoon_34 kitten_26)) kitten_26) :pattern ((spoon_34 kitten_26)))))
(assert (forall ((kitten_27 potato_11)) (! (spoon_27 (spoon_34 kitten_27)) :pattern ((spoon_34 kitten_27)))))
(assert (forall ((kitten_28 Float32)) (! (=> (spoon_27 kitten_28) (= (spoon_34 (spoon_35 kitten_28)) kitten_28)) :pattern ((spoon_34 (spoon_35 kitten_28))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(define-fun spoon_36 ((kitten_29 potato_13)) potato_11 (get_potato_13_a kitten_29))
(define-fun spoon_37 ((kitten_30 potato_13)) potato_11 (get_potato_13_b kitten_30))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_38 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_39 ((kitten_32 potato_15)) potato_13 (get_potato_15_a kitten_32))
(define-fun spoon_40 ((kitten_33 potato_15) (kitten_34 potato_15)) Bool (ite (and (= (spoon_34 (get_potato_13_a (get_potato_15_a kitten_33))) (spoon_34 (get_potato_13_a (get_potato_15_a kitten_34)))) (= (spoon_34 (get_potato_13_b (get_potato_15_a kitten_33))) (spoon_34 (get_potato_13_b (get_potato_15_a kitten_34))))) true false))
(declare-const cat_41 Int)
(declare-fun spoon_42 (potato_15) Int)
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(assert (<= 0 cat_41))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_42 kitten_35))))
(assert (<= 0 cat_43))
(assert (forall ((kitten_36 potato_15)) (<= 0 (spoon_44 kitten_36))))
(declare-const cat_45 Int)
(declare-const cat_46 Int)
(declare-const cat_47 Int)
(assert (<= 0 cat_45))
(assert (< cat_45 cat_46))
(assert (<= 0 cat_47))
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(declare-const cat_50 Int)
(assert (<= 0 cat_48))
(assert (< cat_48 cat_49))
(assert (<= 0 cat_50))
(declare-fun spoon_51 (potato_15 potato_15) Bool)
(declare-const cat_52 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_53 ((kitten_37 potato_16)) potato_15 (get_potato_16_a kitten_37))
(declare-fun spoon_54 (potato_15 potato_15) Bool)
(declare-fun spoon_55 (Bool potato_15 potato_15) Bool)
(assert true)
(assert (forall ((kitten_38 potato_15) (kitten_39 potato_15)) (! (= (= (spoon_54 kitten_38 kitten_39) true) (and (fp.leq (fp.abs (fp.sub RNE (spoon_34 (get_potato_13_a (get_potato_15_a kitten_38))) (spoon_34 (get_potato_13_a (get_potato_15_a kitten_39))))) (fp #b0 #b01110111 #b01000111101011100001010)) (fp.leq (fp.abs (fp.sub RNE (spoon_34 (get_potato_13_b (get_potato_15_a kitten_38))) (spoon_34 (get_potato_13_b (get_potato_15_a kitten_39))))) (fp #b0 #b01110111 #b01000111101011100001010)))) :pattern ((spoon_54 kitten_38 kitten_39)))))
(declare-sort potato_17 0)
(declare-fun spoon_56 (potato_17) Int)
(assert (forall ((kitten_40 potato_17)) (and (<= 3 (spoon_56 kitten_40)) (<= (spoon_56 kitten_40) 30))))
(define-fun spoon_57 ((kitten_41 Int)) Bool (and (<= 3 kitten_41) (<= kitten_41 30)))
(declare-fun spoon_58 (Int) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Int)
(declare-fun spoon_61 (potato_17 potato_17) Bool)
(declare-const cat_62 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_63 ((kitten_42 potato_18)) potato_17 (get_potato_18_a kitten_42))
(define-fun spoon_64 ((kitten_43 potato_17)) Int (spoon_56 kitten_43))
(declare-fun spoon_65 (Int) potato_17)
(assert (forall ((kitten_44 potato_17)) (! (= (spoon_65 (spoon_64 kitten_44)) kitten_44) :pattern ((spoon_64 kitten_44)))))
(assert (forall ((kitten_45 potato_17)) (! (spoon_57 (spoon_64 kitten_45)) :pattern ((spoon_64 kitten_45)))))
(assert (forall ((kitten_46 Int)) (! (=> (spoon_57 kitten_46) (= (spoon_64 (spoon_65 kitten_46)) kitten_46)) :pattern ((spoon_64 (spoon_65 kitten_46))))))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a (Array Int potato_15))))))
(declare-fun spoon_66 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_47 (Array Int potato_15))) (forall ((kitten_48 Int)) (! (= (spoon_66 kitten_47 kitten_48 kitten_48) kitten_47) :pattern ((spoon_66 kitten_47 kitten_48 kitten_48))))))
(assert (forall ((kitten_49 (Array Int potato_15))) (forall ((kitten_50 Int)) (forall ((kitten_51 Int)) (forall ((kitten_52 Int)) (! (= (select (spoon_66 kitten_49 kitten_50 kitten_51) kitten_52) (select kitten_49 (- kitten_52 (- kitten_51 kitten_50)))) :pattern ((select (spoon_66 kitten_49 kitten_50 kitten_51) kitten_52))))))))
(define-fun spoon_67 ((kitten_53 (Array Int potato_15)) (kitten_54 Int) (kitten_55 Int) (kitten_56 (Array Int potato_15)) (kitten_57 Int) (kitten_58 Int)) Bool (ite (and (ite (<= kitten_54 kitten_55) (and (<= kitten_57 kitten_58) (= (- kitten_55 kitten_54) (- kitten_58 kitten_57))) (< kitten_58 kitten_57)) (forall ((kitten_59 Int)) (=> (and (<= kitten_54 kitten_59) (<= kitten_59 kitten_55)) (= (spoon_40 (select kitten_53 kitten_59) (select kitten_56 (+ (- kitten_57 kitten_54) kitten_59))) true)))) true false))
(assert (forall ((kitten_60 (Array Int potato_15)) (kitten_61 (Array Int potato_15))) (forall ((kitten_62 Int) (kitten_63 Int) (kitten_64 Int) (kitten_65 Int)) (=> (= (spoon_67 kitten_61 kitten_64 kitten_65 kitten_60 kitten_62 kitten_63) true) (and (ite (<= kitten_62 kitten_63) (and (<= kitten_64 kitten_65) (= (- kitten_63 kitten_62) (- kitten_65 kitten_64))) (< kitten_65 kitten_64)) (forall ((kitten_66 Int)) (=> (and (<= kitten_62 kitten_66) (<= kitten_66 kitten_63)) (= (spoon_40 (select kitten_60 kitten_66) (select kitten_61 (+ (- kitten_64 kitten_62) kitten_66))) true))))))))
(declare-const cat_68 (Array Int potato_15))
(declare-const cat_69 Int)
(declare-fun spoon_70 ((Array Int potato_15)) Int)
(declare-const cat_71 Int)
(declare-fun spoon_72 ((Array Int potato_15)) Int)
(declare-const cat_73 Int)
(declare-fun spoon_74 ((Array Int potato_15)) Int)
(assert (<= 0 cat_69))
(assert (forall ((kitten_67 (Array Int potato_15))) (<= 0 (spoon_70 kitten_67))))
(assert (<= 0 cat_71))
(assert (forall ((kitten_68 (Array Int potato_15))) (<= 0 (spoon_72 kitten_68))))
(assert (<= 0 cat_73))
(assert (forall ((kitten_69 (Array Int potato_15))) (<= 0 (spoon_74 kitten_69))))
(declare-fun spoon_75 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_20 (mk_potato_20 (get_potato_20_a potato_17) (get_potato_20_b (Array Int potato_15))))))
(define-fun spoon_76 ((kitten_70 potato_20)) potato_17 (get_potato_20_a kitten_70))
(define-fun spoon_77 ((kitten_71 potato_20)) (Array Int potato_15) (get_potato_20_b kitten_71))
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_78 ((kitten_72 potato_21)) potato_20 (get_potato_21_a kitten_72))
(declare-datatypes () ((potato_22 (mk_potato_22 (get_potato_22_a potato_20)))))
(define-fun spoon_79 ((kitten_73 potato_22)) potato_20 (get_potato_22_a kitten_73))
(define-fun spoon_80 ((kitten_74 potato_22) (kitten_75 potato_22)) Bool (ite (and (= (spoon_64 (get_potato_20_a (get_potato_22_a kitten_74))) (spoon_64 (get_potato_20_a (get_potato_22_a kitten_75)))) (= (spoon_67 (get_potato_20_b (get_potato_22_a kitten_74)) 1 30 (get_potato_20_b (get_potato_22_a kitten_75)) 1 30) true)) true false))
(declare-const cat_81 Int)
(declare-fun spoon_82 (potato_22) Int)
(declare-const cat_83 Int)
(declare-fun spoon_84 (potato_22) Int)
(assert (<= 0 cat_81))
(assert (forall ((kitten_76 potato_22)) (<= 0 (spoon_82 kitten_76))))
(assert (<= 0 cat_83))
(assert (forall ((kitten_77 potato_22)) (<= 0 (spoon_84 kitten_77))))
(declare-const cat_85 Int)
(declare-const cat_86 Int)
(declare-const cat_87 Int)
(assert (<= 0 cat_85))
(assert (< cat_85 cat_86))
(assert (<= 0 cat_87))
(declare-const cat_88 Int)
(declare-const cat_89 Int)
(declare-const cat_90 Int)
(assert (<= 0 cat_88))
(assert (< cat_88 cat_89))
(assert (<= 0 cat_90))
(declare-fun spoon_91 (potato_22 potato_22) Bool)
(declare-const cat_92 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_93 ((kitten_78 potato_23)) potato_22 (get_potato_23_a kitten_78))
(declare-sort potato_24 0)
(declare-fun spoon_94 (potato_24) Int)
(assert (forall ((kitten_79 potato_24)) (and (<= 1 (spoon_94 kitten_79)) (<= (spoon_94 kitten_79) 30))))
(define-fun spoon_95 ((kitten_80 Int)) Bool (and (<= 1 kitten_80) (<= kitten_80 30)))
(declare-fun spoon_96 (Int) potato_5)
(declare-fun spoon_97 (potato_5) Bool)
(declare-fun spoon_98 (potato_5) Int)
(declare-fun spoon_99 (potato_24 potato_24) Bool)
(declare-const cat_100 potato_24)
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_101 ((kitten_81 potato_25)) potato_24 (get_potato_25_a kitten_81))
(declare-const cat_102 potato_22)
(declare-const cat_103 Int)
(declare-const cat_104 potato_22)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(declare-const cat_107 Int)
(define-fun spoon_108 ((kitten_82 Float32) (kitten_83 Bool) (kitten_84 Bool) (kitten_85 Bool) (kitten_86 Bool)) Bool (=> (or (= kitten_83 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_27 kitten_82)))
(define-fun spoon_109 ((kitten_87 Int) (kitten_88 Bool) (kitten_89 Bool) (kitten_90 Bool) (kitten_91 Bool)) Bool (=> (or (= kitten_88 true) (<= 1 30)) (spoon_95 kitten_87)))
(define-fun spoon_110 ((kitten_92 Int) (kitten_93 Bool) (kitten_94 Bool) (kitten_95 Bool) (kitten_96 Bool)) Bool (=> (or (= kitten_93 true) (<= 3 30)) (spoon_57 kitten_92)))
(assert (= (spoon_64 (get_potato_20_a (get_potato_22_a cat_102))) (spoon_64 (get_potato_20_a (get_potato_22_a cat_104)))))
(assert (<= 1 (spoon_64 (get_potato_20_a (get_potato_22_a cat_104)))))
(assert (not (<= (spoon_64 (get_potato_20_a (get_potato_22_a cat_104))) 30)))
(check-sat)
(exit)
