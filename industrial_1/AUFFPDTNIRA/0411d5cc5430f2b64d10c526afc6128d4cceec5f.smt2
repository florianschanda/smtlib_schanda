(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFFPDTNIRA)
(set-info :source |Benchmarks generated from industrial code by Florian Schanda using SPARK 2014 and an SMTLIB Obfuscation Script|)
(set-info :category industrial)
(set-info :status unsat)

(define-fun spoon_1 ((kitten_1 Float32)) Bool (not (or (fp.isInfinite kitten_1) (fp.isNaN kitten_1))))
(define-fun spoon_2 ((kitten_2 Float32)) Bool (or (fp.isZero kitten_2) (and (fp.isNormal kitten_2) (= kitten_2 (fp.roundToIntegral RNE kitten_2)))))
(declare-datatypes () ((potato_1 (mk_potato_1))))
(declare-sort potato_2 0)
(declare-fun spoon_3 (potato_2 potato_2) Bool)
(declare-const cat_4 potato_2)
(declare-sort potato_3 0)
(declare-datatypes () ((potato_4 (mk_potato_4 (get_potato_4_a potato_3)))))
(declare-sort potato_5 0)
(declare-datatypes () ((potato_6 (mk_potato_6 (get_potato_6_a Int)))))
(declare-datatypes () ((potato_7 (mk_potato_7 (get_potato_7_a Bool)))))
(declare-datatypes () ((potato_8 (mk_potato_8 (get_potato_8_a Real)))))
(declare-datatypes () ((potato_9 (mk_potato_9 (get_potato_9_a potato_2)))))
(define-fun spoon_5 ((kitten_3 potato_6)) Int (get_potato_6_a kitten_3))
(define-fun spoon_6 ((kitten_4 potato_7)) Bool (get_potato_7_a kitten_4))
(define-fun spoon_7 ((kitten_5 potato_8)) Real (get_potato_8_a kitten_5))
(define-fun spoon_8 ((kitten_6 potato_9)) potato_2 (get_potato_9_a kitten_6))
(declare-fun spoon_9 (Int) Int)
(define-fun spoon_10 ((kitten_7 Float32)) Bool (and (fp.isInfinite kitten_7) (fp.isPositive kitten_7)))
(define-fun spoon_11 ((kitten_8 Float32)) Bool (and (fp.isInfinite kitten_8) (fp.isNegative kitten_8)))
(define-fun spoon_12 ((kitten_9 Float32)) Bool (and (fp.isZero kitten_9) (fp.isPositive kitten_9)))
(define-fun spoon_13 ((kitten_10 Float32)) Bool (and (fp.isZero kitten_10) (fp.isNegative kitten_10)))
(declare-fun spoon_14 (RoundingMode Int) Float32)
(declare-fun spoon_15 (RoundingMode Float32) Int)
(declare-const cat_16 Int)
(define-fun spoon_17 ((kitten_11 Int)) Bool (and (<= (- cat_16) kitten_11) (<= kitten_11 cat_16)))
(define-fun spoon_18 ((kitten_12 Int)) Bool (and (<= (- 16777216) kitten_12) (<= kitten_12 16777216)))
(define-fun spoon_19 ((kitten_13 Float32) (kitten_14 Float32)) Bool (or (and (fp.isPositive kitten_13) (fp.isPositive kitten_14)) (and (fp.isNegative kitten_13) (fp.isNegative kitten_14))))
(define-fun spoon_20 ((kitten_15 Float32) (kitten_16 Float32)) Bool (or (and (fp.isPositive kitten_15) (fp.isNegative kitten_16)) (and (fp.isNegative kitten_15) (fp.isPositive kitten_16))))
(define-fun spoon_21 ((kitten_17 Float32) (kitten_18 Float32) (kitten_19 Float32)) Bool (and (=> (spoon_19 kitten_18 kitten_19) (fp.isPositive kitten_17)) (=> (spoon_20 kitten_18 kitten_19) (fp.isNegative kitten_17))))
(define-fun spoon_22 ((kitten_20 Real)) Real (* kitten_20 kitten_20))
(declare-fun spoon_23 (Real) Real)
(define-fun spoon_24 ((kitten_21 Float32) (kitten_22 Real)) Bool (or (and (fp.isPositive kitten_21) (< 0.0 kitten_22)) (and (fp.isNegative kitten_21) (< kitten_22 0.0))))
(declare-datatypes () ((potato_10 (mk_potato_10 (get_potato_10_a Float32)))))
(define-fun spoon_25 ((kitten_23 Bool)) Int (ite (= kitten_23 true) 1 0))
(define-fun spoon_26 ((kitten_24 Int)) Bool (ite (= kitten_24 0) false true))
(define-fun spoon_27 ((kitten_25 Int)) Bool (or (= kitten_25 0) (= kitten_25 1)))
(declare-fun spoon_28 (Bool) potato_5)
(declare-fun spoon_29 (potato_5) Bool)
(declare-fun spoon_30 (potato_5) Bool)
(declare-sort potato_11 0)
(define-fun spoon_31 ((kitten_26 Float32)) Bool (and (spoon_1 kitten_26) (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) kitten_26) (fp.leq kitten_26 (fp #b0 #b10001011 #b00000000000000000000000)))))
(declare-fun spoon_32 (potato_11 potato_11) Bool)
(declare-fun spoon_33 (Float32) potato_5)
(declare-fun spoon_34 (potato_5) Bool)
(declare-fun spoon_35 (potato_5) Float32)
(declare-const cat_36 potato_11)
(declare-datatypes () ((potato_12 (mk_potato_12 (get_potato_12_a potato_11)))))
(define-fun spoon_37 ((kitten_27 potato_12)) potato_11 (get_potato_12_a kitten_27))
(declare-fun spoon_38 (potato_11) Float32)
(declare-fun spoon_39 (Float32) potato_11)
(assert (forall ((kitten_28 potato_11)) (! (= (spoon_39 (spoon_38 kitten_28)) kitten_28) :pattern ((spoon_38 kitten_28)))))
(assert (forall ((kitten_29 potato_11)) (! (spoon_31 (spoon_38 kitten_29)) :pattern ((spoon_38 kitten_29)))))
(assert (forall ((kitten_30 Float32)) (! (=> (spoon_31 kitten_30) (= (spoon_38 (spoon_39 kitten_30)) kitten_30)) :pattern ((spoon_38 (spoon_39 kitten_30))))))
(declare-datatypes () ((potato_13 (mk_potato_13 (get_potato_13_a potato_11) (get_potato_13_b potato_11)))))
(declare-datatypes () ((potato_14 (mk_potato_14 (get_potato_14_a potato_13)))))
(define-fun spoon_40 ((kitten_31 potato_14)) potato_13 (get_potato_14_a kitten_31))
(declare-datatypes () ((potato_15 (mk_potato_15 (get_potato_15_a potato_13)))))
(define-fun spoon_41 ((kitten_32 potato_15)) potato_13 (get_potato_15_a kitten_32))
(define-fun spoon_42 ((kitten_33 potato_15) (kitten_34 potato_15)) Bool (ite (and (= (spoon_38 (get_potato_13_a (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_a (get_potato_15_a kitten_34)))) (= (spoon_38 (get_potato_13_b (get_potato_15_a kitten_33))) (spoon_38 (get_potato_13_b (get_potato_15_a kitten_34))))) true false))
(declare-const cat_43 Int)
(declare-fun spoon_44 (potato_15) Int)
(declare-const cat_45 Int)
(declare-fun spoon_46 (potato_15) Int)
(assert (<= 0 cat_43))
(assert (forall ((kitten_35 potato_15)) (<= 0 (spoon_44 kitten_35))))
(assert (<= 0 cat_45))
(assert (forall ((kitten_36 potato_15)) (<= 0 (spoon_46 kitten_36))))
(declare-const cat_47 Int)
(declare-const cat_48 Int)
(declare-const cat_49 Int)
(assert (<= 0 cat_47))
(assert (< cat_47 cat_48))
(assert (<= 0 cat_49))
(declare-const cat_50 Int)
(declare-const cat_51 Int)
(declare-const cat_52 Int)
(assert (<= 0 cat_50))
(assert (< cat_50 cat_51))
(assert (<= 0 cat_52))
(declare-fun spoon_53 (potato_15 potato_15) Bool)
(declare-const cat_54 potato_15)
(declare-datatypes () ((potato_16 (mk_potato_16 (get_potato_16_a potato_15)))))
(define-fun spoon_55 ((kitten_37 potato_16)) potato_15 (get_potato_16_a kitten_37))
(declare-sort potato_17 0)
(define-fun spoon_56 ((kitten_38 Float32)) Bool (and (spoon_1 kitten_38) (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) kitten_38) (fp.leq kitten_38 (fp #b0 #b10001100 #b01101010100000000000000)))))
(declare-fun spoon_57 (potato_17 potato_17) Bool)
(declare-fun spoon_58 (Float32) potato_5)
(declare-fun spoon_59 (potato_5) Bool)
(declare-fun spoon_60 (potato_5) Float32)
(declare-const cat_61 potato_17)
(declare-datatypes () ((potato_18 (mk_potato_18 (get_potato_18_a potato_17)))))
(define-fun spoon_62 ((kitten_39 potato_18)) potato_17 (get_potato_18_a kitten_39))
(define-fun spoon_63 ((kitten_40 Float32) (kitten_41 Bool) (kitten_42 Bool) (kitten_43 Bool)) Bool (=> (or (= kitten_41 true) (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000))) (spoon_56 kitten_40)))
(declare-datatypes () ((potato_19 (mk_potato_19 (get_potato_19_a (Array Int potato_15))))))
(declare-fun spoon_64 ((Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_44 (Array Int potato_15))) (forall ((kitten_45 Int)) (! (= (spoon_64 kitten_44 kitten_45 kitten_45) kitten_44) :pattern ((spoon_64 kitten_44 kitten_45 kitten_45))))))
(assert (forall ((kitten_46 (Array Int potato_15))) (forall ((kitten_47 Int)) (forall ((kitten_48 Int)) (forall ((kitten_49 Int)) (! (= (select (spoon_64 kitten_46 kitten_47 kitten_48) kitten_49) (select kitten_46 (- kitten_49 (- kitten_48 kitten_47)))) :pattern ((select (spoon_64 kitten_46 kitten_47 kitten_48) kitten_49))))))))
(declare-fun spoon_65 ((Array Int potato_15) Int Int (Array Int potato_15) Int Int) (Array Int potato_15))
(assert (forall ((kitten_50 (Array Int potato_15)) (kitten_51 (Array Int potato_15))) (forall ((kitten_52 Int) (kitten_53 Int) (kitten_54 Int) (kitten_55 Int)) (forall ((kitten_56 Int)) (! (and (=> (and (<= kitten_52 kitten_56) (<= kitten_56 kitten_53)) (= (select (spoon_65 kitten_50 kitten_52 kitten_53 kitten_51 kitten_54 kitten_55) kitten_56) (select kitten_50 kitten_56))) (=> (< kitten_53 kitten_56) (= (select (spoon_65 kitten_50 kitten_52 kitten_53 kitten_51 kitten_54 kitten_55) kitten_56) (select kitten_51 (+ (- kitten_56 kitten_53) (- kitten_54 1)))))) :pattern ((select (spoon_65 kitten_50 kitten_52 kitten_53 kitten_51 kitten_54 kitten_55) kitten_56)))))))
(declare-fun spoon_66 (potato_15 Int) (Array Int potato_15))
(assert (forall ((kitten_57 potato_15)) (forall ((kitten_58 Int)) (! (= (select (spoon_66 kitten_57 kitten_58) kitten_58) kitten_57) :pattern ((select (spoon_66 kitten_57 kitten_58) kitten_58))))))
(define-fun spoon_67 ((kitten_59 (Array Int potato_15)) (kitten_60 Int) (kitten_61 Int) (kitten_62 (Array Int potato_15)) (kitten_63 Int) (kitten_64 Int)) Bool (ite (and (ite (<= kitten_60 kitten_61) (and (<= kitten_63 kitten_64) (= (- kitten_61 kitten_60) (- kitten_64 kitten_63))) (< kitten_64 kitten_63)) (forall ((kitten_65 Int)) (=> (and (<= kitten_60 kitten_65) (<= kitten_65 kitten_61)) (= (spoon_42 (select kitten_59 kitten_65) (select kitten_62 (+ (- kitten_63 kitten_60) kitten_65))) true)))) true false))
(assert (forall ((kitten_66 (Array Int potato_15)) (kitten_67 (Array Int potato_15))) (forall ((kitten_68 Int) (kitten_69 Int) (kitten_70 Int) (kitten_71 Int)) (=> (= (spoon_67 kitten_67 kitten_70 kitten_71 kitten_66 kitten_68 kitten_69) true) (and (ite (<= kitten_68 kitten_69) (and (<= kitten_70 kitten_71) (= (- kitten_69 kitten_68) (- kitten_71 kitten_70))) (< kitten_71 kitten_70)) (forall ((kitten_72 Int)) (=> (and (<= kitten_68 kitten_72) (<= kitten_72 kitten_69)) (= (spoon_42 (select kitten_66 kitten_72) (select kitten_67 (+ (- kitten_70 kitten_68) kitten_72))) true))))))))
(declare-sort potato_20 0)
(define-fun spoon_68 ((kitten_73 Int)) Bool (and (<= 1 kitten_73) (<= kitten_73 100)))
(declare-fun spoon_69 (Int) potato_5)
(declare-fun spoon_70 (potato_5) Bool)
(declare-fun spoon_71 (potato_5) Int)
(declare-fun spoon_72 (potato_20 potato_20) Bool)
(declare-const cat_73 potato_20)
(declare-datatypes () ((potato_21 (mk_potato_21 (get_potato_21_a potato_20)))))
(define-fun spoon_74 ((kitten_74 potato_21)) potato_20 (get_potato_21_a kitten_74))
(declare-sort potato_22 0)
(define-fun spoon_75 ((kitten_75 Int)) Bool (and (<= 3 kitten_75) (<= kitten_75 100)))
(declare-fun spoon_76 (Int) potato_5)
(declare-fun spoon_77 (potato_5) Bool)
(declare-fun spoon_78 (potato_5) Int)
(declare-fun spoon_79 (potato_22 potato_22) Bool)
(declare-const cat_80 potato_22)
(declare-datatypes () ((potato_23 (mk_potato_23 (get_potato_23_a potato_22)))))
(define-fun spoon_81 ((kitten_76 potato_23)) potato_22 (get_potato_23_a kitten_76))
(declare-fun spoon_82 (potato_22) Int)
(declare-fun spoon_83 (Int) potato_22)
(assert (forall ((kitten_77 potato_22)) (! (= (spoon_83 (spoon_82 kitten_77)) kitten_77) :pattern ((spoon_82 kitten_77)))))
(assert (forall ((kitten_78 potato_22)) (! (spoon_75 (spoon_82 kitten_78)) :pattern ((spoon_82 kitten_78)))))
(assert (forall ((kitten_79 Int)) (! (=> (spoon_75 kitten_79) (= (spoon_82 (spoon_83 kitten_79)) kitten_79)) :pattern ((spoon_82 (spoon_83 kitten_79))))))
(declare-const cat_84 (Array Int potato_15))
(declare-const cat_85 Int)
(declare-fun spoon_86 ((Array Int potato_15)) Int)
(declare-const cat_87 Int)
(declare-fun spoon_88 ((Array Int potato_15)) Int)
(declare-const cat_89 Int)
(declare-fun spoon_90 ((Array Int potato_15)) Int)
(assert (<= 0 cat_85))
(assert (forall ((kitten_80 (Array Int potato_15))) (<= 0 (spoon_86 kitten_80))))
(assert (<= 0 cat_87))
(assert (forall ((kitten_81 (Array Int potato_15))) (<= 0 (spoon_88 kitten_81))))
(assert (<= 0 cat_89))
(assert (forall ((kitten_82 (Array Int potato_15))) (<= 0 (spoon_90 kitten_82))))
(declare-fun spoon_91 ((Array Int potato_15) (Array Int potato_15)) Bool)
(declare-datatypes () ((potato_24 (mk_potato_24 (get_potato_24_a potato_22) (get_potato_24_b (Array Int potato_15))))))
(define-fun spoon_92 ((kitten_83 potato_24)) potato_22 (get_potato_24_a kitten_83))
(define-fun spoon_93 ((kitten_84 potato_24)) (Array Int potato_15) (get_potato_24_b kitten_84))
(declare-datatypes () ((potato_25 (mk_potato_25 (get_potato_25_a potato_24)))))
(define-fun spoon_94 ((kitten_85 potato_25)) potato_24 (get_potato_25_a kitten_85))
(declare-datatypes () ((potato_26 (mk_potato_26 (get_potato_26_a potato_24)))))
(define-fun spoon_95 ((kitten_86 potato_26)) potato_24 (get_potato_26_a kitten_86))
(define-fun spoon_96 ((kitten_87 potato_26) (kitten_88 potato_26)) Bool (ite (and (= (spoon_82 (get_potato_24_a (get_potato_26_a kitten_87))) (spoon_82 (get_potato_24_a (get_potato_26_a kitten_88)))) (= (spoon_67 (get_potato_24_b (get_potato_26_a kitten_87)) 1 100 (get_potato_24_b (get_potato_26_a kitten_88)) 1 100) true)) true false))
(declare-const cat_97 Int)
(declare-fun spoon_98 (potato_26) Int)
(declare-const cat_99 Int)
(declare-fun spoon_100 (potato_26) Int)
(assert (<= 0 cat_97))
(assert (forall ((kitten_89 potato_26)) (<= 0 (spoon_98 kitten_89))))
(assert (<= 0 cat_99))
(assert (forall ((kitten_90 potato_26)) (<= 0 (spoon_100 kitten_90))))
(declare-const cat_101 Int)
(declare-const cat_102 Int)
(declare-const cat_103 Int)
(assert (<= 0 cat_101))
(assert (< cat_101 cat_102))
(assert (<= 0 cat_103))
(declare-const cat_104 Int)
(declare-const cat_105 Int)
(declare-const cat_106 Int)
(assert (<= 0 cat_104))
(assert (< cat_104 cat_105))
(assert (<= 0 cat_106))
(declare-fun spoon_107 (potato_26 potato_26) Bool)
(declare-const cat_108 potato_26)
(declare-datatypes () ((potato_27 (mk_potato_27 (get_potato_27_a potato_26)))))
(define-fun spoon_109 ((kitten_91 potato_27)) potato_26 (get_potato_27_a kitten_91))
(declare-fun spoon_110 (potato_15 potato_15 potato_15 potato_15) Float32)
(declare-fun spoon_111 (Float32 potato_15 potato_15 potato_15 potato_15) Bool)
(assert (forall ((kitten_92 potato_15) (kitten_93 potato_15) (kitten_94 potato_15) (kitten_95 potato_15)) (! (spoon_63 (spoon_110 kitten_92 kitten_93 kitten_94 kitten_95) true false true) :pattern ((spoon_110 kitten_92 kitten_93 kitten_94 kitten_95)))))
(declare-fun spoon_112 (potato_26 potato_26) Bool)
(declare-fun spoon_113 (Bool potato_26 potato_26) Bool)
(assert true)
(declare-const cat_114 potato_26)
(declare-const cat_115 Int)
(declare-const cat_116 potato_26)
(declare-const cat_117 Int)
(declare-const cat_118 Int)
(declare-const cat_119 Int)
(declare-const cat_120 Int)
(declare-const cat_121 Int)
(declare-const cat_122 Int)
(declare-const cat_123 Int)
(define-fun spoon_124 ((kitten_96 Float32) (kitten_97 Bool) (kitten_98 Bool) (kitten_99 Bool)) Bool (=> (or (= kitten_97 true) (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000))) (spoon_31 kitten_96)))
(define-fun spoon_125 ((kitten_100 Int) (kitten_101 Bool) (kitten_102 Bool) (kitten_103 Bool)) Bool (=> (or (= kitten_101 true) (<= 1 100)) (spoon_68 kitten_100)))
(define-fun spoon_126 ((kitten_104 Int) (kitten_105 Bool) (kitten_106 Bool) (kitten_107 Bool)) Bool (=> (or (= kitten_105 true) (<= 3 100)) (spoon_75 kitten_104)))
(declare-const cat_127 Float32)
(declare-const cat_128 Float32)
(declare-const cat_129 potato_11)
(declare-const cat_130 potato_11)
(declare-const cat_131 potato_11)
(declare-const cat_132 potato_11)
(declare-const cat_133 Bool)
(declare-const cat_134 Float32)
(declare-const cat_135 Float32)
(declare-const cat_136 potato_11)
(declare-const cat_137 potato_11)
(declare-const cat_138 potato_11)
(declare-const cat_139 potato_11)
(declare-const cat_140 potato_11)
(declare-const cat_141 potato_11)
(declare-const cat_142 potato_11)
(declare-const cat_143 potato_11)
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_127)))
(assert (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001100 #b01101010100000000000000)) (spoon_56 cat_128)))
(assert (= cat_133 (spoon_112 cat_114 cat_116)))
(assert (not (= cat_133 true)))
(assert (= cat_134 cat_128))
(assert (= cat_135 (fp #b0 #b10001100 #b01101010100000000000000)))
(assert (= cat_136 cat_129))
(assert (= cat_137 cat_130))
(assert (= (mk_potato_13 cat_138 cat_139) (get_potato_15_a (select (get_potato_24_b (get_potato_26_a cat_114)) (spoon_82 (get_potato_24_a (get_potato_26_a cat_114)))))))
(assert (= cat_140 cat_131))
(assert (= cat_141 cat_132))
(assert (= (mk_potato_13 cat_142 cat_143) (get_potato_15_a (select (get_potato_24_b (get_potato_26_a cat_116)) (spoon_82 (get_potato_24_a (get_potato_26_a cat_116)))))))
(assert (<= 1 (spoon_82 (get_potato_24_a (get_potato_26_a cat_114)))))
(assert (not (<= 1 1)))
(check-sat)
(exit)
