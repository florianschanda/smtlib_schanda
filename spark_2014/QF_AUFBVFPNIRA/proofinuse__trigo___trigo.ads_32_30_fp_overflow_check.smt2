;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const trigo__tan__result Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const result Float32)

(declare-const trigo__tan__result1 Float32)

(declare-const trigo__tan__result2 Float32)

(declare-const trigo__tan__result3 Float32)

(declare-const trigo__tan__result4 Float32)

(declare-const trigo__tan__result5 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert
  (and (fp.leq (fp.neg (fp #b0 #b01111110 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111110 #b00000000000000000000000))))

;; H
  (assert (= trigo__tan__result1 trigo__tan__result2))

;; H
  (assert (= trigo__tan__result3 trigo__tan__result1))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o abstr)
  (and (fp.isFinite32 o)
  (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o (fp #b0 #b00000000 #b00000000000000000000000))))))

;; H
  (assert (= trigo__tan__result1 o))

;; H
  (assert (= trigo__tan__result5 trigo__tan__result3))

(declare-const abstr1 Float32)

(declare-const abstr2 Float32)

(declare-const abstr3 Float32)

(declare-const abstr4 Float32)

(declare-const abstr5 Float32)

;; H
  (assert
  (and (= o1 abstr5)
  (and (fp.isFinite32 o1)
  (= o1 (fp.add RNE (fp.add RNE (fp.add RNE (fp.add RNE x (fp.div RNE
  abstr1 (fp #b0 #b10000000 #b10000000000000000000000))) (fp.div RNE (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  abstr2) (fp #b0 #b10000010 #b11100000000000000000000))) (fp.div RNE (fp.mul RNE (fp #b0 #b10000011 #b00010000000000000000000)
  abstr3) (fp #b0 #b10000111 #b00111011000000000000000))) (fp.div RNE (fp.mul RNE (fp #b0 #b10000100 #b11110000000000000000000)
  abstr4) (fp #b0 #b10001010 #b01100010011000000000000)))))))

;; H
  (assert (= o2 (fp.sub RNE trigo__tan__result4 o1)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 o2)))
(check-sat)
(exit)
