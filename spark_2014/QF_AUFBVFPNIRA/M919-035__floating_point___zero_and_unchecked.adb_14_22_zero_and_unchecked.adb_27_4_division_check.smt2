;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            abstr (- (- 4294967296 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr1 (_ BitVec 32))

(declare-const abstr2 (_ BitVec 32))

(declare-const abstr3 (_ BitVec 32))

(declare-const abstr4 (_ BitVec 32))

(declare-const abstr5 (_ BitVec 32))

(define-fun nth_bv ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(define-fun dynamic_invariant2 ((temp___expr_221 (_ BitVec 32))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_228 Float32)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_228)))

(declare-const zero_plus Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const zero_neg Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c1b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c2b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant4 ((temp___expr_235 Float32)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_235)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_242)))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const abstr7 Float32)

;; zero_plus__def_axiom
  (assert (= zero_plus abstr7))

(declare-const abstr8 Float32)

;; zero_neg__def_axiom
  (assert (= zero_neg abstr8))

(declare-const x Int)

(declare-const zero_and_unchecked__zero_plus__assume Float32)

(declare-const zero_and_unchecked__zero_neg__assume Float32)

(declare-const o Int)

(declare-const o1 Bool)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const result Bool)

;; H
  (assert
  (and (= zero_and_unchecked__zero_plus__assume abstr7)
  (fp.isFinite32 zero_and_unchecked__zero_plus__assume)))

;; H
  (assert (= zero_and_unchecked__zero_plus__assume zero_plus))

;; H
  (assert (fp.isFinite32 zero_plus))

;; H
  (assert
  (and (= zero_and_unchecked__zero_neg__assume abstr8)
  (fp.isFinite32 zero_and_unchecked__zero_neg__assume)))

;; H
  (assert (= zero_and_unchecked__zero_neg__assume zero_neg))

;; H
  (assert (fp.isFinite32 zero_neg))

;; H
  (assert (= zero_plus c1b))

;; H
  (assert (fp.isFinite32 c1b))

;; H
  (assert (= zero_neg c2b))

;; H
  (assert (fp.isFinite32 c2b))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range x)))

;; H
  (assert (fp.eq c1b c2b))

(declare-const abstr9 Int)

;; H
  (assert (and (= o abstr9) (in_range1 o)))

;; H
  (assert (= o1 (ite (= o 0) true false)))

;; H
  (assert (= result (ite (not (= o1 true)) true false)))

;; H
  (assert (= result true))

(declare-const abstr10 Int)

;; H
  (assert (and (= o2 abstr10) (in_range1 o2)))

(assert
;; WP_parameter_def
 ;; File "a-unccon.ads", line 20, characters 0-0
  (not (not (= o2 0))))
(check-sat)
(exit)
