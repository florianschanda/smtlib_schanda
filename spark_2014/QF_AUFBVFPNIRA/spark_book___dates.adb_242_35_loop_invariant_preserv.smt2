;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 36524) x) (<= x 36524)))

(define-fun dynamic_invariant ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= (- 36524) 36524)) (in_range1
                                      temp___expr_192)))

(define-fun in_range2 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun by__ () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun r36b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun r38b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 2000 2099)) (in_range2
                                      temp___expr_150)))

(define-fun dynamic_invariant3 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 1 12)) (in_range3 temp___expr_156)))

(define-fun dynamic_invariant4 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 1 31)) (in_range4 temp___expr_162)))

(declare-fun valid () Bool)

(declare-fun steps () Int)

(declare-fun i () Int)

(declare-fun i1 () Int)

(declare-fun result () Bool)

(declare-fun valid1 () Bool)

(declare-fun result1 () Int)

(declare-fun steps1 () Int)

(declare-fun result2 () Int)

(declare-fun i2 () Int)

(declare-fun result3 () Bool)

(declare-fun valid2 () Bool)

(declare-fun valid3 () Bool)

(declare-fun i3 () Int)

(declare-fun result4 () Int)

(declare-fun i4 () Int)

(declare-fun result5 () Bool)

(declare-fun valid4 () Bool)

(declare-fun result6 () Int)

(declare-fun steps2 () Int)

(declare-fun i5 () Int)

(declare-fun result7 () Bool)

(declare-fun valid5 () Bool)

(declare-fun valid6 () Bool)

(declare-fun i6 () Int)

(declare-fun i7 () Int)

(declare-fun result8 () Bool)

(declare-fun valid7 () Bool)

;; H
  (assert (in_range1 by__))

;; H
  (assert (=> (<= (- 36524) 36524) (in_range1 steps)))

;; H
  (assert (= result valid))

;; H
  (assert (= valid1 (of_int 1)))

;; H
  (assert (not (<= 0 by__)))

;; H
  (assert (= result6 steps))

;; H
  (assert (= steps2 (- by__)))

;; H
  (assert (= steps2 r38b))

;; H
  (assert (in_range1 r38b))

;; H
  (assert (= i5 1))

;; H
  (assert (<= 1 i5))

;; H
  (assert (<= i5 r38b))

;; H
  (assert (not (= result7 true)))

;; H
  (assert (= valid5 valid1))

;; H
  (assert
  (and (=> (<= 1 r38b) (dynamic_property1 1 r38b i6))
  (and (<= 1 i6) (<= i6 r38b))))

;; H
  (assert true)

;; H
  (assert (not (= i6 r38b)))

;; H
  (assert (= i7 (+ i6 1)))

;; H
  (assert (not (= result8 true)))

;; H
  (assert (= valid7 valid6))

(assert
;; WP_parameter_def
 ;; File "dates.ads", line 89, characters 0-0
  (not false))
(check-sat)
(exit)
