;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun last ((dynamic_float__L_1__i Int)) Float32 ((_ to_fp 8 24) RNE (to_real dynamic_float__L_1__i)))

(define-fun dynamic_property ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (not (or (fp.isInfinite x) (fp.isNaN x)))
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant ((temp___expr_177 Float32)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (dynamic_float__L_1__i Int)) Bool (=>
                                    (or (= temp___is_init_174 true)
                                    (fp.leq (fp #b0 #b00000000 #b00000000000000000000000)
                                    (last dynamic_float__L_1__i)))
                                    (dynamic_property
                                    (fp #b0 #b00000000 #b00000000000000000000000)
                                    (last dynamic_float__L_1__i)
                                    temp___expr_177)))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_171 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_171) (fp.isNaN temp___expr_171)))))

(declare-fun i () Int)

(declare-fun x () Float32)

(declare-fun us () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Int)

(declare-fun us1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Int)

(declare-fun us2 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Int)

(declare-fun us3 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Int)

(declare-fun us4 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Int)

(declare-fun us5 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Int)

(declare-fun us6 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Int)

(declare-fun us7 () Float32)

(declare-fun o14 () Float32)

(declare-fun o15 () Int)

(declare-fun us8 () Float32)

(declare-fun o16 () Float32)

(declare-fun o17 () Int)

(declare-fun us9 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () Float32)

(declare-fun x1 () Float32)

(declare-fun result2 () Int)

(declare-fun i2 () Int)

(declare-fun result3 () Float32)

(declare-fun x2 () Float32)

(declare-fun result4 () Int)

(declare-fun i3 () Int)

(declare-fun result5 () Float32)

(declare-fun x3 () Float32)

(declare-fun result6 () Int)

(declare-fun i4 () Int)

(declare-fun result7 () Float32)

(declare-fun x4 () Float32)

(declare-fun result8 () Int)

(declare-fun i5 () Int)

(declare-fun result9 () Float32)

(declare-fun x5 () Float32)

(declare-fun result10 () Int)

(declare-fun i6 () Int)

(declare-fun result11 () Float32)

(declare-fun x6 () Float32)

(declare-fun result12 () Int)

(declare-fun i7 () Int)

(declare-fun result13 () Float32)

(declare-fun x7 () Float32)

(declare-fun result14 () Int)

(declare-fun i8 () Int)

(declare-fun result15 () Float32)

(declare-fun x8 () Float32)

(declare-fun result16 () Int)

(declare-fun i9 () Int)

(declare-fun result17 () Float32)

(declare-fun x9 () Float32)

(declare-fun result18 () Int)

(declare-fun i10 () Int)

(declare-fun x10 () Float32)

;; H
  (assert (= result i))

;; H
  (assert (= i1 1))

;; H
  (assert
  (and (= us (fp #b0 #b01111111 #b00000000000000000000000)) (dynamic_property
  (fp #b0 #b00000000 #b00000000000000000000000) (last i1)
  (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= o (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 o))

;; H
  (assert (dynamic_invariant x1 true false true i1))

(declare-fun abstr1 () Int)

(assert
;; WP_parameter_def
 ;; File "dynamic_float.adb", line 1, characters 0-0
  (not (= abstr1 i1)))
(check-sat)
(exit)
