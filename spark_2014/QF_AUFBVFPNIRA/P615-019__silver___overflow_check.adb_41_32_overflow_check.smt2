;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (<= 0 6)) (in_range1 temp___expr_171)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun abstr () Int)

(define-fun pos_div_relation ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(declare-fun abstr1 () Int)

(define-fun pos_div_relation_rna ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr1))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun abstr2 () Int)

(define-fun pos_div_relation1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr2))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(declare-fun abstr3 () Int)

(define-fun pos_div_relation_rna1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr3))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(declare-fun op () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun e () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

;; H
  (assert (in_range1 op))

;; H
  (assert (in_range e))

;; H
  (assert (not (= op 0)))

;; H
  (assert (not (= op 1)))

;; H
  (assert (not (= op 2)))

;; H
  (assert (= op 3))

(assert
;; WP_parameter_def
 ;; File "overflow_check.adb", line 22, characters 0-0
  (not false))
(check-sat)
(exit)
