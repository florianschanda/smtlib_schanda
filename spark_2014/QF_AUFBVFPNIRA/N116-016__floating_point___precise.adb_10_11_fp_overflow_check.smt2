;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x Float32)

(declare-const y Float32)

(declare-const z Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const result Float32)

(declare-const x1 Float32)

(declare-const result1 Float32)

(declare-const y1 Float32)

(declare-const result2 Float32)

(declare-const z1 Float32)

(declare-const result3 Float32)

(declare-const z2 Float32)

(declare-const result4 Float32)

(declare-const z3 Float32)

(declare-const result5 Float32)

(declare-const z4 Float32)

;; H
  (assert (= result x))

;; H
  (assert (= x1 (fp #b0 #b10000010 #b01000000000000000000000)))

;; H
  (assert (not (or (fp.isInfinite x1) (fp.isNaN x1))))

;; H
  (assert (= result1 y))

;; H
  (assert (= y1 (fp #b0 #b01111101 #b10011001100110011001101)))

;; H
  (assert (not (or (fp.isInfinite y1) (fp.isNaN y1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite z) (fp.isNaN z)))))

;; H
  (assert
  (and (= o (fp.add RNE x1 y1))
  (not (or (fp.isInfinite (fp.add RNE x1 y1)) (fp.isNaN (fp.add RNE x1
  y1))))))

;; H
  (assert (= result2 z))

;; H
  (assert (= z1 o))

;; H
  (assert
  (and (fp.leq (fp #b0 #b10000010 #b01001100110011001011100) z1)
  (fp.leq z1 (fp #b0 #b10000010 #b01001100110011001110001))))

;; H
  (assert
  (and (= o1 (fp.sub RNE x1 y1))
  (not (or (fp.isInfinite (fp.sub RNE x1 y1)) (fp.isNaN (fp.sub RNE x1
  y1))))))

;; H
  (assert (= result3 z1))

;; H
  (assert (= z2 o1))

;; H
  (assert
  (and (fp.leq (fp #b0 #b10000010 #b00110011001100110001111) z2)
  (fp.leq z2 (fp #b0 #b10000010 #b00110011001100110100100))))

(assert
;; WP_parameter_def
 ;; File "precise.adb", line 1, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.mul RNE x1 y1)) (fp.isNaN (fp.mul RNE x1
  y1))))))
(check-sat)
(exit)
