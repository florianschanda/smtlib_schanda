;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            abstr (- (- 65536 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr1 (_ BitVec 16))

(declare-const abstr2 (_ BitVec 16))

(declare-const abstr3 (_ BitVec 16))

(declare-const abstr4 (_ BitVec 16))

(declare-const abstr5 (_ BitVec 16))

(define-fun nth_bv ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-const abstr7 Int)

(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) abstr7
                                           (- (- 256 abstr7))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr8 (_ BitVec 8))

(declare-const abstr9 (_ BitVec 8))

(declare-const abstr10 (_ BitVec 8))

(declare-const abstr11 (_ BitVec 8))

(declare-const abstr12 (_ BitVec 8))

(define-fun nth_bv1 ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr13 Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr13)

(declare-const abstr14 Int)

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            abstr14
                                            (- (- 4294967296 abstr14))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr15 (_ BitVec 32))

(declare-const abstr16 (_ BitVec 32))

(declare-const abstr17 (_ BitVec 32))

(declare-const abstr18 (_ BitVec 32))

(declare-const abstr19 (_ BitVec 32))

(define-fun nth_bv2 ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr20 Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr20)

(declare-const abstr21 Int)

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            abstr21
                                            (- (- 18446744073709551616
                                            abstr21))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-const abstr22 (_ BitVec 64))

(declare-const abstr23 (_ BitVec 64))

(declare-const abstr24 (_ BitVec 64))

(declare-const abstr25 (_ BitVec 64))

(declare-const abstr26 (_ BitVec 64))

(define-fun nth_bv3 ((x (_ BitVec 64))
  (i (_ BitVec 64))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000))
                          true false))

(declare-const abstr27 Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool abstr27)

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_172)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(define-fun dynamic_invariant2 ((temp___expr_193 (_ BitVec 16))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ngrotations (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const ngclicktime (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const millisecs (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

(declare-const attr__ATTRIBUTE_ADDRESS51 Int)

(declare-const attr__ATTRIBUTE_ADDRESS52 Int)

(declare-const attr__ATTRIBUTE_ADDRESS53 Int)

(declare-const attr__ATTRIBUTE_ADDRESS54 Int)

(declare-const estimatedgroundvelocity Float64)

(declare-const estimatedgroundvelocityisavailable Bool)

(declare-const old_ngclicktime_memory (_ BitVec 16))

(declare-const old_ngrotations_memory (_ BitVec 16))

(declare-const old_estimatedgroundvelocity_memory Float64)

(declare-const old_ngclicktime_out1 (_ BitVec 16))

(declare-const old_ngrotations_out1 (_ BitVec 16))

(declare-const old_estimatedgroundvelocity_out1 Float64)

(declare-const max_uint16_out1 Int)

(declare-const max_uint16_1_out1 Int)

(declare-const max_uint16_2_out1 Int)

(declare-const millisecs_out1 (_ BitVec 16))

(declare-const ngclicktime_out1 (_ BitVec 16))

(declare-const ngrotations_out1 (_ BitVec 16))

(declare-const wheel_circunference_out1 Float64)

(declare-const ms_in_hour_out1 Float64)

(declare-const ms_in_our1_out1 Float64)

(declare-const update_period_os_interrupt_out1 (_ BitVec 16))

(declare-const validity_period_out1 (_ BitVec 16))

(declare-const to_int32_left_out1 Int)

(declare-const to_int32_left_1_out1 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 (_ BitVec 16))

(declare-const o12 Int)

(declare-const o13 (_ BitVec 16))

(declare-const o14 Int)

(declare-const o15 (_ BitVec 16))

(declare-const o16 Float64)

(declare-const o17 Float64)

(declare-const o18 Float64)

(declare-const old_ngclicktime_out11 (_ BitVec 16))

(declare-const old_ngrotations_out11 (_ BitVec 16))

(declare-const old_estimatedgroundvelocity_out11 Float64)

(declare-const max_uint16_out11 Int)

(declare-const max_uint16_1_out11 Int)

(declare-const max_uint16_2_out11 Int)

(declare-const millisecs_out11 (_ BitVec 16))

(declare-const ngclicktime_out11 (_ BitVec 16))

(declare-const ngrotations_out11 (_ BitVec 16))

(declare-const wheel_circunference_out11 Float64)

(declare-const ms_in_hour_out11 Float64)

(declare-const ms_in_our1_out11 Float64)

(declare-const update_period_os_interrupt_out11 (_ BitVec 16))

(declare-const validity_period_out11 (_ BitVec 16))

(declare-const to_int32_left_out11 Int)

(declare-const to_int32_left_1_out11 Int)

(declare-const to_int32_left_2_out1 Int)

(declare-const to_int32_right_out1 Int)

(declare-const to_int32_right_1_out1 Int)

(declare-const to_int32_right_2_out1 Int)

(declare-const data_type_conversion1_out1 Int)

(declare-const data_type_conversion_out1 Int)

(declare-const sum1_2_out1 (_ BitVec 16))

(declare-const sum1_out1 Int)

(declare-const sum1_1_out1 Int)

(declare-const sum2_out1 Int)

(declare-const sum2_1_out1 Int)

(declare-const sum1_1_1_out1 Int)

(declare-const sum_out1 Int)

(declare-const sum2_2_out1 Int)

(declare-const compare_to_constant_out1 Bool)

(declare-const sum_1_out1 Int)

(declare-const sum_2_out1 Int)

(declare-const sum_3_out1 Int)

(declare-const left_out1 Int)

(declare-const left_out11 Int)

(declare-const left_1_out1 Int)

(declare-const left_1_out11 Int)

(declare-const left_2_out1 Int)

(declare-const left_2_out11 Int)

(declare-const to_uint16_result_out1 (_ BitVec 16))

(declare-const to_uint16_result_1_out1 (_ BitVec 16))

(declare-const to_uint16_result_2_out1 (_ BitVec 16))

(declare-const distance_km_out1 Float64)

(declare-const elapsed_time_h_out1 Float64)

(declare-const relational_operator_out1 Bool)

(declare-const avoid_div_by_zero_out1 Float64)

(declare-const avoid_div_by_zero_out11 Float64)

(declare-const estimatedgroundvelocityisavailable1 Bool)

(declare-const relational_operator_out1_1 Bool)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (fp.isFinite64 old_estimatedgroundvelocity_memory))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 estimatedgroundvelocity)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 old_estimatedgroundvelocity_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_1_out1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 max_uint16_2_out1)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 wheel_circunference_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 ms_in_hour_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 ms_in_our1_out1)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 to_int32_left_out1)))

;; H
  (assert
  (=> (<= (- 2147483648) 2147483647) (in_range2 to_int32_left_1_out1)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= old_ngclicktime_out11 old_ngclicktime_memory))

;; H
  (assert (= old_ngrotations_out11 old_ngrotations_memory))

;; H
  (assert
  (= old_estimatedgroundvelocity_out11 old_estimatedgroundvelocity_memory))

;; H
  (assert (= max_uint16_out11 65535))

;; H
  (assert (= max_uint16_1_out11 65535))

;; H
  (assert (= max_uint16_2_out11 65535))

;; H
  (assert (= millisecs_out11 millisecs))

;; H
  (assert (= ngclicktime_out11 ngclicktime))

;; H
  (assert (= ngrotations_out11 ngrotations))

;; H
  (assert
  (= wheel_circunference_out11 (fp #b0 #b01111110101 #b1100101111110111010111000011100111011111000101100101)))

;; H
  (assert
  (= ms_in_hour_out11 (fp #b0 #b10000010100 #b1011011101110100000000000000000000000000000000000000)))

;; H
  (assert
  (= ms_in_our1_out11 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert (= update_period_os_interrupt_out11 #x01F4))

;; H
  (assert (= validity_period_out11 #x0BB8))

(declare-const abstr28 Int)

;; H
  (assert (= to_int32_left_out11 abstr28))

(declare-const abstr29 Int)

;; H
  (assert (= to_int32_left_1_out11 abstr29))

(declare-const abstr30 (_ BitVec 16))

;; H
  (assert (= o11 abstr30))

(declare-const abstr31 (_ BitVec 16))

;; H
  (assert (= o13 abstr31))

(assert
;; WP_parameter_def
 ;; File "nose_gear.adb", line 24, characters 0-0
  (not false))
(check-sat)
(exit)
