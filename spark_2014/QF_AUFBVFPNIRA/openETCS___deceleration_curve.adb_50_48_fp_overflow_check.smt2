;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_152 Float32)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_152) (fp.isNaN temp___expr_152)))))

(define-fun dynamic_invariant1 ((temp___expr_164 Float32)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_164) (fp.isNaN temp___expr_164)))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_176)))

(declare-fun maximum_valid_speed () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun initial_speed () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun final_speed () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun acceleration () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun abstr1 () Float32)

;; maximum_valid_speed__def_axiom
  (assert (= maximum_valid_speed abstr1))

(define-fun dynamic_invariant4 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_158) (fp.isNaN temp___expr_158)))))

(declare-fun speed () Float32)

(declare-fun delta_speed () Float32)

(declare-fun distance () Int)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Bool)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Int)

(declare-fun result () Float32)

(declare-fun speed1 () Float32)

(declare-fun result1 () Int)

(declare-fun distance1 () Int)

(declare-fun speed2 () Float32)

(declare-fun delta_speed1 () Float32)

(declare-fun distance2 () Int)

(declare-fun result2 () Float32)

(declare-fun delta_speed2 () Float32)

(declare-fun result3 () Float32)

(declare-fun speed3 () Float32)

(declare-fun result4 () Int)

(declare-fun distance3 () Int)

;; H
  (assert
  (not (or (fp.isInfinite maximum_valid_speed) (fp.isNaN maximum_valid_speed))))

(declare-fun abstr2 () Float32)

;; H
  (assert (= abstr2 maximum_valid_speed))

;; H
  (assert (not (or (fp.isInfinite initial_speed) (fp.isNaN initial_speed))))

;; H
  (assert (not (or (fp.isInfinite final_speed) (fp.isNaN final_speed))))

;; H
  (assert (not (or (fp.isInfinite acceleration) (fp.isNaN acceleration))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) initial_speed)
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) final_speed))
  (fp.leq initial_speed maximum_valid_speed))
  (fp.lt final_speed initial_speed))
  (fp.lt acceleration (fp #b0 #b00000000 #b00000000000000000000000)))
  (fp.leq (fp.neg (fp #b0 #b10000010 #b01000000000000000000000)) acceleration)))

;; H
  (assert (= result speed))

;; H
  (assert (= speed1 initial_speed))

;; H
  (assert (not (or (fp.isInfinite speed1) (fp.isNaN speed1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite delta_speed) (fp.isNaN delta_speed)))))

;; H
  (assert (= result1 distance))

;; H
  (assert (= distance1 0))

;; H
  (assert (in_range3 distance1))

;; H
  (assert (fp.lt final_speed speed1))

;; H
  (assert (fp.lt (fp #b0 #b01111011 #b10011001100110011001101) speed1))

;; H
  (assert
  (and
  (fp.leq (fp.neg (fp #b0 #b10000010 #b01000000000000000000000)) acceleration)
  (fp.lt acceleration (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (and (fp.lt (fp #b0 #b01111011 #b10011001100110011001101) speed2)
  (fp.leq speed2 initial_speed)))

;; H
  (assert
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite delta_speed1) (fp.isNaN delta_speed1))))
  (=> (<= 0 2147483647) (in_range3 distance2)))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite speed2) (fp.isNaN speed2))))))

;; H
  (assert
  (and
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  speed2))
  (fp.lt (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000) speed2) (fp #b0 #b10000010 #b01000000000000000000000))))

;; H
  (assert
  (fp.leq (fp.neg (fp #b0 #b10000101 #b10010000000000000000000)) (fp.div RNE
  acceleration speed2)))

;; H
  (assert
  (fp.leq (fp.neg (fp #b0 #b10000111 #b11110100000000000000000)) (fp.mul RNE (fp.div RNE
  acceleration speed2) (fp #b0 #b10000001 #b01000000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "units.ads", line 27, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.div RNE acceleration speed2)) (fp.isNaN (fp.div RNE
  acceleration speed2))))))
(check-sat)
(exit)
