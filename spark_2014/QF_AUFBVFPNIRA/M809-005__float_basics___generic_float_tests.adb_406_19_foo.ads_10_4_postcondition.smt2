;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_137 Float32)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_137)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const foo__float_tests__test_record_1__rec__a__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__a__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__a__position Int)

;; foo__float_tests__test_record_1__rec__a__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__first__bit))

;; foo__float_tests__test_record_1__rec__a__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__a__first__bit foo__float_tests__test_record_1__rec__a__last__bit))

;; foo__float_tests__test_record_1__rec__a__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__position))

(declare-const foo__float_tests__test_record_1__rec__b__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__b__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__b__position Int)

;; foo__float_tests__test_record_1__rec__b__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__first__bit))

;; foo__float_tests__test_record_1__rec__b__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__b__first__bit foo__float_tests__test_record_1__rec__b__last__bit))

;; foo__float_tests__test_record_1__rec__b__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__position))

(declare-const foo__float_tests__test_record_1__rec__c__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__c__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__c__position Int)

;; foo__float_tests__test_record_1__rec__c__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__first__bit))

;; foo__float_tests__test_record_1__rec__c__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__c__first__bit foo__float_tests__test_record_1__rec__c__last__bit))

;; foo__float_tests__test_record_1__rec__c__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__position))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y Float32)

(declare-const result Float32)

(declare-const y1 Float32)

(declare-const y2 Float32)

(declare-const y3 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 y)))

;; H
  (assert (= result y))

;; H
  (assert (= y1 y2))

;; H
  (assert (= y3 y1))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.adb", line 398, characters 0-0
  (not (fp.eq x y2)))
(check-sat)
(exit)
