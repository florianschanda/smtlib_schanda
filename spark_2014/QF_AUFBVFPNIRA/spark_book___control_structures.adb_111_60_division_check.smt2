;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant3 ((temp___expr_472 Int)
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (<= 0 255)) (in_range4
                                      temp___expr_472)))

(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(define-fun dynamic_invariant4 ((temp___expr_478 Int)
  (temp___is_init_475 Bool) (temp___skip_constant_476 Bool)
  (temp___do_toplevel_477 Bool)) Bool (=>
                                      (or (= temp___is_init_475 true)
                                      (<= 2 16)) (in_range5 temp___expr_478)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_514 Int)
  (temp___is_init_511 Bool) (temp___skip_constant_512 Bool)
  (temp___do_toplevel_513 Bool)) Bool (=>
                                      (or (= temp___is_init_511 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range6 temp___expr_514)))

(define-fun in_range7 ((x Int)) Bool (and (<= 65 x) (<= x 90)))

(define-fun dynamic_invariant6 ((temp___expr_529 Int)
  (temp___is_init_526 Bool) (temp___skip_constant_527 Bool)
  (temp___do_toplevel_528 Bool)) Bool (=>
                                      (or (= temp___is_init_526 true)
                                      (<= 65 90)) (in_range7
                                      temp___expr_529)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun tolerance () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun r4b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun r5b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun r7b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun r8b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun c10b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

;; tolerance__def_axiom
  (assert (= tolerance (fp #b0 #b01110001 #b10100011011011100010111)))

(declare-fun default_width () Int)

(declare-fun default_base () Int)

(declare-fun a () Int)

(declare-fun b () Int)

(declare-fun c () Int)

(declare-fun d () Int)

(declare-fun e () Int)

(declare-fun f () Int)

(declare-fun g () Int)

(declare-fun h () Int)

(declare-fun ch () Int)

(declare-fun temperature () Int)

(declare-fun valve_setting () Int)

(declare-fun value () Int)

(declare-fun sum () Int)

(declare-fun success () Bool)

(declare-fun approx () Float32)

(declare-fun x () Float32)

(declare-fun y () Float32)

(declare-fun letter () Int)

(declare-fun count () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun temp___533 () Int)

(declare-fun temp___532 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Float32)

(declare-fun o17 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Float32)

(declare-fun temp___534 () Float32)

(declare-fun o20 () Float32)

(declare-fun o21 () Float32)

(declare-fun o22 () Float32)

(declare-fun o23 () Float32)

(declare-fun o24 () Float32)

(declare-fun o25 () Float32)

(declare-fun o26 () Float32)

(declare-fun o27 () Float32)

(declare-fun o28 () Bool)

(declare-fun o29 () Int)

(declare-fun g1 () Int)

(declare-fun letter1 () Int)

(declare-fun a1 () Int)

(declare-fun b1 () Int)

(declare-fun c1 () Int)

(declare-fun d1 () Int)

(declare-fun e1 () Int)

(declare-fun ch1 () Int)

(declare-fun x1 () Float32)

(declare-fun a2 () Int)

(declare-fun d2 () Int)

(declare-fun b2 () Int)

(declare-fun e2 () Int)

(declare-fun f1 () Int)

(declare-fun e3 () Int)

(declare-fun f2 () Int)

(declare-fun f3 () Int)

(declare-fun f4 () Int)

(declare-fun f5 () Int)

(declare-fun g2 () Int)

(declare-fun g3 () Int)

(declare-fun g4 () Int)

(declare-fun success1 () Bool)

(declare-fun h1 () Int)

(declare-fun h2 () Int)

(declare-fun h3 () Int)

(declare-fun h4 () Int)

(declare-fun h5 () Int)

(declare-fun success2 () Bool)

(declare-fun c2 () Int)

(declare-fun c3 () Int)

(declare-fun c4 () Int)

(declare-fun c5 () Int)

(declare-fun c6 () Int)

(declare-fun c7 () Int)

(declare-fun c8 () Int)

(declare-fun y1 () Float32)

(declare-fun y2 () Float32)

(declare-fun y3 () Float32)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun value1 () Int)

(declare-fun sum1 () Int)

(declare-fun value2 () Int)

(declare-fun sum2 () Int)

(declare-fun ada__integer_text_io__get__2__item () Int)

(declare-fun value3 () Int)

(declare-fun sum3 () Int)

(declare-fun value4 () Int)

(declare-fun sum4 () Int)

(declare-fun value5 () Int)

(declare-fun sum5 () Int)

(declare-fun approx1 () Float32)

(declare-fun result5 () Bool)

(declare-fun approx2 () Float32)

(declare-fun approx3 () Float32)

(declare-fun result6 () Bool)

(declare-fun approx4 () Float32)

(declare-fun approx5 () Float32)

(declare-fun count1 () Int)

(declare-fun count2 () Int)

(declare-fun count3 () Int)

(declare-fun count4 () Int)

(declare-fun count5 () Int)

(declare-fun count6 () Int)

(declare-fun count7 () Int)

(declare-fun count8 () Int)

(declare-fun a3 () Int)

(declare-fun b3 () Int)

(declare-fun count9 () Int)

(declare-fun count10 () Int)

(declare-fun count11 () Int)

(declare-fun count12 () Int)

(declare-fun count13 () Int)

(declare-fun count14 () Int)

(declare-fun count15 () Int)

(declare-fun count16 () Int)

(declare-fun temperature1 () Int)

(declare-fun valve_setting1 () Int)

(declare-fun temperature2 () Int)

;; H
  (assert (in_range4 default_width))

;; H
  (assert (in_range5 default_base))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 a)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 b)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 c)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 d)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 e)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 f)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 g)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 h)))

;; H
  (assert (=> (<= 0 255) (in_range3 ch)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 temperature)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 valve_setting)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 value)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 sum)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite approx) (fp.isNaN approx)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x) (fp.isNaN x)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite y) (fp.isNaN y)))))

;; H
  (assert (not (or (fp.isInfinite tolerance) (fp.isNaN tolerance))))

;; H
  (assert (= letter1 81))

;; H
  (assert (in_range7 letter1))

;; H
  (assert (= a1 1))

;; H
  (assert (= b1 2))

;; H
  (assert (= c1 3))

;; H
  (assert (= d1 3))

;; H
  (assert (= e1 4))

;; H
  (assert (= ch1 68))

;; H
  (assert (= x1 (fp #b0 #b10000101 #b11101101110100011000001)))

;; H
  (assert (=> (< a1 0) (and (= o (- a1)) (in_range2 (- a1)))))

;; H
  (assert (=> (< a1 0) (= a2 o)))

;; H
  (assert (=> (< a1 0) (= d2 1)))

;; H
  (assert (=> (not (< a1 0)) (= d2 d1)))

;; H
  (assert (=> (not (< a1 0)) (= a2 a1)))

;; H
  (assert (=> (and (<= 1 a2) (<= a2 12)) (= b2 17)))

;; H
  (assert (=> (not (and (<= 1 a2) (<= a2 12))) (= b2 b1)))

;; H
  (assert (=> (< b2 a2) (= e2 1)))

;; H
  (assert (=> (< b2 a2) (= f1 a2)))

;; H
  (assert (=> (not (< b2 a2)) (= e3 2)))

;; H
  (assert (=> (not (< b2 a2)) (= f2 b2)))

;; H
  (assert (=> (not (< b2 a2)) (= f1 f2)))

;; H
  (assert (=> (not (< b2 a2)) (= e2 e3)))

;; H
  (assert (=> (= a2 b2) (= f3 3)))

;; H
  (assert (=> (not (= a2 b2)) (=> (< b2 a2) (= f4 4))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f5 5))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f4 f5))))

;; H
  (assert (=> (not (= a2 b2)) (= f3 f4)))

;; H
  (assert (=> (and (< b2 a2) (< c1 a2)) (= g2 6)))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (and (< a2 b2) (< c1 b2)) (= g3 7))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (and (< a2 c1) (< b2 c1)) (= g4 8)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g1)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2))) (= g3 g4))))

;; H
  (assert (=> (not (and (< b2 a2) (< c1 a2))) (= g2 g3)))

;; H
  (assert (= success1 (of_int 1)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= h1 1)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= success2 success1)))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= h2 2))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= success2 success1))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= h3 3)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= success2 success1)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= h4 4))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))
  (= success2 success1))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h5 5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))))
  (= success2 (of_int 0)))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h4 h5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57))) (= h3 h4)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90))) (= h2 h3))))

;; H
  (assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (= h1 h2)))

;; H
  (assert (=> (< b2 a2) (and (= o1 (+ d2 5)) (in_range2 (+ d2 5)))))

;; H
  (assert (=> (< b2 a2) (= c2 o1)))

(declare-fun abstr1 () Int)

;; H
  (assert (=> (not (< b2 a2)) (= c3 abstr1)))

;; H
  (assert (=> (not (< b2 a2)) (= c2 c3)))

;; H
  (assert (=> (< b2 a2) (and (= o2 (+ d2 5)) (in_range2 (+ d2 5)))))

;; H
  (assert (=> (not (< b2 a2)) (= o2 abstr1)))

;; H
  (assert (= c4 o2))

;; H
  (assert (=> (< b2 a2) (and (= o3 (+ d2 5)) (in_range2 (+ d2 5)))))

;; H
  (assert (=> (< b2 a2) (= c5 o3)))

;; H
  (assert
  (=> (not (< b2 a2))
  (=> (= a2 b2) (and (= o4 (* 2 a2)) (in_range2 (* 2 a2))))))

;; H
  (assert (=> (not (< b2 a2)) (=> (= a2 b2) (= c6 o4))))

;; H
  (assert (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= c7 abstr1))))

;; H
  (assert (=> (not (< b2 a2)) (=> (not (= a2 b2)) (= c6 c7))))

;; H
  (assert (=> (not (< b2 a2)) (= c5 c6)))

;; H
  (assert (not (< b2 a2)))

;; H
  (assert (not (= a2 b2)))

(assert
;; WP_parameter_def
 ;; File "control_structures.adb", line 29, characters 0-0
  (not (not (= 2 0))))
(check-sat)
(exit)
