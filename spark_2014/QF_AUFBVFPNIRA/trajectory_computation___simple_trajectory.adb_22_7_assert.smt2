;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            abstr (- (- 65536 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr1 (_ BitVec 16))

(declare-const abstr2 (_ BitVec 16))

(declare-const abstr3 (_ BitVec 16))

(declare-const abstr4 (_ BitVec 16))

(declare-const abstr5 (_ BitVec 16))

(define-fun nth_bv ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-const abstr7 Int)

(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) abstr7
                                           (- (- 256 abstr7))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr8 (_ BitVec 8))

(declare-const abstr9 (_ BitVec 8))

(declare-const abstr10 (_ BitVec 8))

(declare-const abstr11 (_ BitVec 8))

(declare-const abstr12 (_ BitVec 8))

(define-fun nth_bv1 ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr13 Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr13)

(declare-const abstr14 Int)

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            abstr14
                                            (- (- 4294967296 abstr14))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr15 (_ BitVec 32))

(declare-const abstr16 (_ BitVec 32))

(declare-const abstr17 (_ BitVec 32))

(declare-const abstr18 (_ BitVec 32))

(declare-const abstr19 (_ BitVec 32))

(define-fun nth_bv2 ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr20 Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr20)

(declare-const abstr21 Int)

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            abstr21
                                            (- (- 18446744073709551616
                                            abstr21))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-const abstr22 (_ BitVec 64))

(declare-const abstr23 (_ BitVec 64))

(declare-const abstr24 (_ BitVec 64))

(declare-const abstr25 (_ BitVec 64))

(declare-const abstr26 (_ BitVec 64))

(define-fun nth_bv3 ((x (_ BitVec 64))
  (i (_ BitVec 64))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000))
                          true false))

(declare-const abstr27 Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool abstr27)

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_235 Float64)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_235)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 25000)))

(define-fun dynamic_invariant1 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= 0 25000)) (in_range1
                                     temp___expr_242)))

(declare-const bound Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(define-fun dynamic_invariant3 ((temp___expr_193 (_ BitVec 16))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

(define-fun in_range3 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant4 ((temp___expr_249 Float64)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                     (in_range3 temp___expr_249)))

(define-fun in_range4 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant5 ((temp___expr_256 Float64)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)
  (temp___do_typ_inv_255 Bool)) Bool (=>
                                     (or (= temp___is_init_252 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)))
                                     (in_range4 temp___expr_256)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const factor Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const drag Float64)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const old_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const delta_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const n_bv (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

;; delta_speed__def_axiom
  (assert
  (= delta_speed (fp.add RNE drag (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010010111100011010100111111011111001110111)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)))))

(declare-const abstr28 (_ BitVec 16))

;; n_bv__def_axiom
  (assert (= n_bv abstr28))

;; bound__def_axiom
  (assert
  (= bound (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))

(declare-const new_speed Float64)

(declare-const o Float64)

(declare-const o1 Int)

(declare-const result Float64)

(declare-const new_speed1 Float64)

(declare-const new_speed2 Float64)

(declare-const new_speed3 Float64)

;; H
  (assert (fp.isFinite64 bound))

;; H
  (assert
  (= (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)
  bound))

;; H
  (assert (in_range1 n))

;; H
  (assert (in_range3 factor))

;; H
  (assert (in_range4 drag))

;; H
  (assert (fp.isFinite64 old_speed))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 new_speed)))

(declare-const abstr29 Bool)

;; H
  (assert (and (< n 25000) (= abstr29 true)))

;; H
  (assert
  (= (fp.add RNE drag (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010010111100011010100111111011111001110111)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)))
  delta_speed))

;; H
  (assert (fp.isFinite64 delta_speed))

;; H
  (assert (= abstr28 n_bv))

;; H
  (assert true)

;; H
  (assert
  (and (= o (fp.add RNE old_speed delta_speed))
  (fp.isFinite64 (fp.add RNE old_speed delta_speed))))

;; H
  (assert (= new_speed1 o))

;; H
  (assert
  (and
  (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))
  delta_speed) (fp.leq delta_speed bound)))

(declare-const abstr30 Bool)

(assert
;; WP_parameter_def
 ;; File "simple_trajectory.ads", line 29, characters 0-0
  (not (= abstr30 true)))
(check-sat)
(exit)
