;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_57) (fp.isNaN temp___expr_57)))))

(declare-const left Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const right Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const pi1 Float64)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const pi_over_two Float64)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; pi__def_axiom
  (assert
  (= pi1 (fp #b0 #b10000000000 #b1001001000011111101101010100010001000010110100011000)))

;; pi_over_two__def_axiom
  (assert
  (= pi_over_two (fp #b0 #b01111111111 #b1001001000011111101101010100010001000010110100011000)))

(declare-const result__ Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 Float64)

(declare-const o5 Float64)

(declare-const o6 Float64)

(declare-const o7 Float64)

(declare-const o8 Float64)

(declare-const result Float64)

(declare-const result__1 Float64)

(declare-const result1 Float64)

(declare-const result__2 Float64)

;; H
  (assert (not (or (fp.isInfinite left) (fp.isNaN left))))

;; H
  (assert (not (or (fp.isInfinite right) (fp.isNaN right))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite result__) (fp.isNaN result__)))))

;; H
  (assert (not (or (fp.isInfinite pi1) (fp.isNaN pi1))))

;; H
  (assert (not (or (fp.isInfinite pi_over_two) (fp.isNaN pi_over_two))))

;; H
  (assert
  (not
  (and
  (fp.eq left (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
  (fp.eq right (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))))

;; H
  (assert (fp.leq (fp.abs left) (fp.abs right)))

;; H
  (assert
  (and (= o (fp.div RNE left right))
  (not (or (fp.isInfinite (fp.div RNE left right)) (fp.isNaN (fp.div RNE
  left right))))))

(declare-const abstr1 Float64)

;; H
  (assert (and (= o1 abstr1) (not (or (fp.isInfinite o1) (fp.isNaN o1)))))

;; H
  (assert (= result result__))

;; H
  (assert (= result__1 o1))

;; H
  (assert
  (fp.leq right (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (fp.leq left (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.sub RNE result__1 (fp #b0 #b10000000000 #b1001001000011111101101010100010001000010110100011000))) (fp.isNaN (fp.sub RNE
  result__1 (fp #b0 #b10000000000 #b1001001000011111101101010100010001000010110100011000)))))))
(check-sat)
(exit)
