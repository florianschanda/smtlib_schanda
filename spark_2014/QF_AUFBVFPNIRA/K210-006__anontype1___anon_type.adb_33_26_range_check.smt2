;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const var_in Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const limit Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 0 10)) (in_range1 temp___expr_166)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 10000) x) (<= x 10000)))

(define-fun dynamic_invariant2 ((temp___expr_173 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)
  (temp___do_typ_inv_172 Bool)) Bool (=>
                                     (or (= temp___is_init_169 true)
                                     (<= (- 10000) 10000)) (in_range2
                                     temp___expr_173)))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 10000) x) (<= x 10000)))

(define-fun dynamic_invariant3 ((temp___expr_180 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)
  (temp___do_typ_inv_179 Bool)) Bool (=>
                                     (or (= temp___is_init_176 true)
                                     (<= (- 10000) 10000)) (in_range3
                                     temp___expr_180)))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun dynamic_invariant4 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

;; limit__def_axiom
  (assert (= limit 10000))

(declare-const var_out Int)

(declare-const a Int)

(declare-const b Int)

(declare-const anon_type__increment__result Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const result Int)

(declare-const var_out1 Int)

(declare-const result1 Int)

(declare-const var_out2 Int)

(declare-const result2 Int)

(declare-const anon_type__increment__result1 Int)

(declare-const anon_type__increment__result2 Int)

(declare-const anon_type__increment__result3 Int)

(declare-const var_out3 Int)

(declare-const anon_type__increment__result4 Int)

(declare-const var_out4 Int)

(declare-const anon_type__increment__result5 Int)

;; H
  (assert (in_range var_in))

;; H
  (assert (in_range limit))

;; H
  (assert (= var_out1 0))

;; H
  (assert (in_range1 var_out1))

;; H
  (assert (=> (<= (- 10000) 10000) (in_range2 a)))

;; H
  (assert (=> (<= (- 10000) 10000) (in_range3 b)))

;; H
  (assert
  (and (= o (+ var_in (+ var_out1 1))) (in_range (+ var_in (+ var_out1 1)))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range1 o)))
(check-sat)
(exit)
