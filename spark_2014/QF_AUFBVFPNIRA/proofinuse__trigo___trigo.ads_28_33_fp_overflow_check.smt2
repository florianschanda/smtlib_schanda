;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

;; H
  (assert (fp.isFinite32 x))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o15 abstr)
  (and (fp.isFinite32 o15)
  (= o15 (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE
  x x) x) x) x) x) x) x) x)))))

;; H
  (assert
  (= o16 (fp.mul RNE (fp #b0 #b10000100 #b11110000000000000000000) o15)))

;; H
  (assert (and (= o17 o16) (fp.isFinite32 o16)))

;; H
  (assert
  (= o18 (fp.div RNE o17 (fp #b0 #b10001010 #b01100010011000000000000))))

(declare-const abstr1 Float32)

;; H
  (assert
  (and (= o9 abstr1)
  (and (fp.isFinite32 o9)
  (= o9 (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE
  x x) x) x) x) x) x)))))

;; H
  (assert
  (= o10 (fp.mul RNE (fp #b0 #b10000011 #b00010000000000000000000) o9)))

;; H
  (assert (and (= o11 o10) (fp.isFinite32 o10)))

;; H
  (assert
  (= o12 (fp.div RNE o11 (fp #b0 #b10000111 #b00111011000000000000000))))

(declare-const abstr2 Float32)

;; H
  (assert
  (and (= o3 abstr2)
  (and (fp.isFinite32 o3)
  (= o3 (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE x x) x) x) x)))))

;; H
  (assert
  (= o4 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) o3)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 o4)))
(check-sat)
(exit)
