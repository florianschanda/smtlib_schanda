;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun in_range1 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b01111110 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111110 #b11001100110011001100110)))))

(define-fun dynamic_invariant ((temp___expr_171 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (fp.leq (fp #b0 #b01111110 #b00000000000000000000000) (fp #b0 #b01111110 #b11001100110011001100110)))
                                      (in_range1 temp___expr_171)))

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000000 #b00001100110011001100110)))))

(define-fun dynamic_invariant1 ((temp___expr_177 Float32)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000000 #b00001100110011001100110)))
                                      (in_range2 temp___expr_177)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun x () Float32)

(declare-fun y () Float32)

(declare-fun z () Float32)

(declare-fun result () Float32)

(declare-fun x1 () Float32)

(declare-fun result1 () Float32)

(declare-fun y1 () Float32)

(declare-fun result2 () Float32)

(declare-fun z1 () Float32)

(declare-fun z2 () Float32)

(declare-fun result3 () Float32)

(declare-fun x2 () Float32)

(declare-fun z3 () Float32)

(declare-fun result4 () Float32)

(declare-fun x3 () Float32)

(declare-fun z4 () Float32)

(declare-fun result5 () Float32)

(declare-fun y2 () Float32)

(declare-fun z5 () Float32)

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b01111110 #b00000000000000000000000) (fp #b0 #b01111110 #b11001100110011001100110))
  (in_range1 x)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b01111110 #b00000000000000000000000) (fp #b0 #b01111110 #b11001100110011001100110))
  (in_range1 y)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000000 #b00001100110011001100110))
  (in_range2 z)))

;; H
  (assert (= result x))

;; H
  (assert (= x1 (fp #b0 #b01111110 #b11001100110011001100110)))

;; H
  (assert (= result1 y))

;; H
  (assert (= y1 (fp #b0 #b01111110 #b11001100110011001100110)))

;; H
  (assert (= result2 z))

;; H
  (assert (= z1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range2 z2))

;; H
  (assert (= result3 x1))

;; H
  (assert (= x2 (fp #b0 #b01111110 #b00000000000000000000000)))

;; H
  (assert (in_range2 z3))

;; H
  (assert (= result4 x2))

;; H
  (assert (= x3 (fp #b0 #b01111110 #b11001100110011001100110)))

;; H
  (assert (in_range2 z4))

;; H
  (assert (= result5 y1))

;; H
  (assert (= y2 (fp #b0 #b01111110 #b00000000000000000000000)))

(assert
;; WP_parameter_def
 ;; File "fr.adb", line 8, characters 0-0
  (not true))
(check-sat)
(exit)
