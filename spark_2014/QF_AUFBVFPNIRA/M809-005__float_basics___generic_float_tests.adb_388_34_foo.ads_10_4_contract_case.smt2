;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_137 Float32)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_137) (fp.isNaN temp___expr_137)))))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const i Int)

(declare-const o Int)

(declare-const result Int)

(declare-const i1 Int)

(declare-const i2 Int)

(declare-const i3 Int)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 i)))

;; H
  (assert
  (and (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b10001011 #b00000000000000000000000))))

(declare-const abstr1 Int)

;; H
  (assert (and (= o abstr1) (in_range2 abstr1)))

;; H
  (assert (= result i))

;; H
  (assert (= i1 o))

;; H
  (assert (= i1 i2))

;; H
  (assert (= i3 i1))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111 #b10011001100110011001101))) true)
  (= i2 (- 2))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111 #b10000000000000000000000))) true)
  (= i2 (- 2))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111 #b01100110011001100110011))) true)
  (= i2 (- 1))))

;; H
  (assert
  (=>
  (= (fp.eq x (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))) true)
  (= i2 (- 1))))

;; H
  (assert
  (=> (= (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)) true)
  (= i2 0)))

;; H
  (assert
  (=> (= (fp.eq x (fp #b0 #b01111111 #b00000000000000000000000)) true)
  (= i2 1)))

;; H
  (assert
  (=> (= (fp.eq x (fp #b0 #b01111111 #b01100110011001100110011)) true)
  (= i2 1)))

;; H
  (assert (= (fp.eq x (fp #b0 #b01111111 #b10000000000000000000000)) true))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.adb", line 351, characters 0-0
  (not (= i2 2)))
(check-sat)
(exit)
