;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10001011 #b00000000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_211 Float32)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)) Bool (=>
                                      (or (= temp___is_init_208 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)))
                                      (in_range2 temp___expr_211)))

(declare-fun a_x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun a_y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun b_x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun b_y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun c_x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun c_y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun vec_ba_x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun vec_ba_y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun vec_bc_x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun vec_bc_y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun ba_dot_bc () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun length_ba () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun length_bc () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

;; vec_ba_x__def_axiom
  (assert (= vec_ba_x (fp.sub RNE a_x b_x)))

;; vec_ba_y__def_axiom
  (assert (= vec_ba_y (fp.sub RNE a_y b_y)))

;; vec_bc_x__def_axiom
  (assert (= vec_bc_x (fp.sub RNE c_x b_x)))

;; vec_bc_y__def_axiom
  (assert (= vec_bc_y (fp.sub RNE c_y b_y)))

;; ba_dot_bc__def_axiom
  (assert
  (= ba_dot_bc (fp.add RNE (fp.mul RNE vec_ba_x vec_bc_x) (fp.mul RNE
  vec_ba_y vec_bc_y))))

;; length_ba__def_axiom
  (assert
  (= length_ba (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE
  b_x a_x)) (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y))))))

;; length_bc__def_axiom
  (assert
  (= length_bc (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE
  b_x c_x)) (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y))))))

(declare-fun res () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun floating_point__angle_between__ba_dot_bc__assume () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun floating_point__angle_between__length_ba__assume () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun floating_point__angle_between__length_bc__assume () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Float32)

(declare-fun result () Float32)

(declare-fun res1 () Float32)

;; H
  (assert (in_range2 a_x))

;; H
  (assert (in_range2 a_y))

;; H
  (assert (in_range2 b_x))

;; H
  (assert (in_range2 b_y))

;; H
  (assert (in_range2 c_x))

;; H
  (assert (in_range2 c_y))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite res) (fp.isNaN res)))))

;; H
  (assert (= (fp.sub RNE a_x b_x) vec_ba_x))

;; H
  (assert (not (or (fp.isInfinite vec_ba_x) (fp.isNaN vec_ba_x))))

;; H
  (assert (= (fp.sub RNE a_y b_y) vec_ba_y))

;; H
  (assert (not (or (fp.isInfinite vec_ba_y) (fp.isNaN vec_ba_y))))

;; H
  (assert (= (fp.sub RNE c_x b_x) vec_bc_x))

;; H
  (assert (not (or (fp.isInfinite vec_bc_x) (fp.isNaN vec_bc_x))))

;; H
  (assert (= (fp.sub RNE c_y b_y) vec_bc_y))

;; H
  (assert (not (or (fp.isInfinite vec_bc_y) (fp.isNaN vec_bc_y))))

;; H
  (assert
  (and (= o (fp.mul RNE vec_ba_y vec_bc_y))
  (not (or (fp.isInfinite (fp.mul RNE vec_ba_y vec_bc_y)) (fp.isNaN (fp.mul RNE
  vec_ba_y vec_bc_y))))))

;; H
  (assert
  (and (= o1 (fp.mul RNE vec_ba_x vec_bc_x))
  (not (or (fp.isInfinite (fp.mul RNE vec_ba_x vec_bc_x)) (fp.isNaN (fp.mul RNE
  vec_ba_x vec_bc_x))))))

;; H
  (assert (= o2 (fp.add RNE o1 o)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (not (or (fp.isInfinite o2) (fp.isNaN o2)))))
(check-sat)
(exit)
