;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range1 ((x Real)) Bool (and
                                      (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                      (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range1 abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun types__r__i__first__bit () Int)

(declare-fun types__r__i__last__bit () Int)

(declare-fun types__r__i__position () Int)

;; types__r__i__first__bit_axiom
  (assert (<= 0 types__r__i__first__bit))

;; types__r__i__last__bit_axiom
  (assert (< types__r__i__first__bit types__r__i__last__bit))

;; types__r__i__position_axiom
  (assert (<= 0 types__r__i__position))

(declare-fun types__r__x__first__bit () Int)

(declare-fun types__r__x__last__bit () Int)

(declare-fun types__r__x__position () Int)

;; types__r__x__first__bit_axiom
  (assert (<= 0 types__r__x__first__bit))

;; types__r__x__last__bit_axiom
  (assert (< types__r__x__first__bit types__r__x__last__bit))

;; types__r__x__position_axiom
  (assert (<= 0 types__r__x__position))

(declare-fun types__r__y__first__bit () Int)

(declare-fun types__r__y__last__bit () Int)

(declare-fun types__r__y__position () Int)

;; types__r__y__first__bit_axiom
  (assert (<= 0 types__r__y__first__bit))

;; types__r__y__last__bit_axiom
  (assert (< types__r__y__first__bit types__r__y__last__bit))

;; types__r__y__position_axiom
  (assert (<= 0 types__r__y__position))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun types__r__i__first__bit1 () Int)

(declare-fun types__r__i__last__bit1 () Int)

(declare-fun types__r__i__position1 () Int)

;; types__r__i__first__bit_axiom
  (assert (<= 0 types__r__i__first__bit1))

;; types__r__i__last__bit_axiom
  (assert (< types__r__i__first__bit1 types__r__i__last__bit1))

;; types__r__i__position_axiom
  (assert (<= 0 types__r__i__position1))

(declare-fun types__r__y__first__bit1 () Int)

(declare-fun types__r__y__last__bit1 () Int)

(declare-fun types__r__y__position1 () Int)

;; types__r__y__first__bit_axiom
  (assert (<= 0 types__r__y__first__bit1))

;; types__r__y__last__bit_axiom
  (assert (< types__r__y__first__bit1 types__r__y__last__bit1))

;; types__r__y__position_axiom
  (assert (<= 0 types__r__y__position1))

(declare-fun types__r__x__first__bit1 () Int)

(declare-fun types__r__x__last__bit1 () Int)

(declare-fun types__r__x__position1 () Int)

;; types__r__x__first__bit_axiom
  (assert (<= 0 types__r__x__first__bit1))

;; types__r__x__last__bit_axiom
  (assert (< types__r__x__first__bit1 types__r__x__last__bit1))

;; types__r__x__position_axiom
  (assert (<= 0 types__r__x__position1))

(declare-fun x__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun value__size2 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun types__r__i__first__bit2 () Int)

(declare-fun types__r__i__last__bit2 () Int)

(declare-fun types__r__i__position2 () Int)

;; types__r__i__first__bit_axiom
  (assert (<= 0 types__r__i__first__bit2))

;; types__r__i__last__bit_axiom
  (assert (< types__r__i__first__bit2 types__r__i__last__bit2))

;; types__r__i__position_axiom
  (assert (<= 0 types__r__i__position2))

(declare-fun types__r__y__first__bit2 () Int)

(declare-fun types__r__y__last__bit2 () Int)

(declare-fun types__r__y__position2 () Int)

;; types__r__y__first__bit_axiom
  (assert (<= 0 types__r__y__first__bit2))

;; types__r__y__last__bit_axiom
  (assert (< types__r__y__first__bit2 types__r__y__last__bit2))

;; types__r__y__position_axiom
  (assert (<= 0 types__r__y__position2))

(declare-fun types__r__x__first__bit2 () Int)

(declare-fun types__r__x__last__bit2 () Int)

(declare-fun types__r__x__position2 () Int)

;; types__r__x__first__bit_axiom
  (assert (<= 0 types__r__x__first__bit2))

;; types__r__x__last__bit_axiom
  (assert (< types__r__x__first__bit2 types__r__x__last__bit2))

;; types__r__x__position_axiom
  (assert (<= 0 types__r__x__position2))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun dynamic_invariant2 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1)) (in_range2 temp___expr_135)))

(declare-fun p__good__x__assume () Bool)

(declare-fun temp___148 () Bool)

;; H
  (assert (= true p__good__x__assume))

;; H
  (assert (= x__attr__constrained false))

;; H
  (assert (= true temp___148))

;; H
  (assert (= x__attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "p.ads", line 3, characters 0-0
  (not false))
(check-sat)
(exit)
