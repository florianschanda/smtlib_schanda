;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun error_pos () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r14b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(declare-fun pos () Int)

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun result () Int)

(declare-fun pos1 () Int)

(declare-fun result1 () Int)

(declare-fun pos2 () Int)

(declare-fun result2 () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun i3 () Int)

(declare-fun i4 () Int)

(declare-fun i5 () Int)

(declare-fun i6 () Int)

;; H
  (assert (in_range4 error_pos))

;; H
  (assert (= result pos))

;; H
  (assert (= pos1 error_pos))

;; H
  (assert (in_range4 pos1))

;; H
  (assert (=> (= pos1 0) (= result1 pos1)))

;; H
  (assert (=> (= pos1 0) (= pos2 o)))

;; H
  (assert (=> (not (= pos1 0)) (= pos2 pos1)))

;; H
  (assert (= (- pos2 1) r14b))

;; H
  (assert (in_range1 r14b))

;; H
  (assert (= result2 i))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (and (<= 1 i2) (<= i2 r14b))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 r14b)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i4 i2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i6 i4)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i6 i1)))

;; H
  (assert (=> (<= 1 2) (= o2 (+ (- 2 1) 1))))

;; H
  (assert (=> (not (<= 1 2)) (= o2 0)))

;; H
  (assert (= o4 (+ o3 o2)))

;; H
  (assert (= o6 (- o5 1)))

(assert
;; WP_parameter_def
 ;; File "screen_output.adb", line 51, characters 0-0
  (not (in_range2 o6)))
(check-sat)
(exit)
