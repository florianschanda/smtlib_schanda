;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant ((temp___expr_472 Int)
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (<= 0 255)) (in_range1
                                      temp___expr_472)))

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000101 #b10010000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_515 Float32)
  (temp___is_init_512 Bool) (temp___skip_constant_513 Bool)
  (temp___do_toplevel_514 Bool)) Bool (=>
                                      (or (= temp___is_init_512 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000)))
                                      (in_range2 temp___expr_515)))

(define-fun in_range3 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000010 #b10000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_521 Float32)
  (temp___is_init_518 Bool) (temp___skip_constant_519 Bool)
  (temp___do_toplevel_520 Bool)) Bool (=>
                                      (or (= temp___is_init_518 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b10000000000000000000000)))
                                      (in_range3 temp___expr_521)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000101 #b10010000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_527 Float32)
  (temp___is_init_524 Bool) (temp___skip_constant_525 Bool)
  (temp___do_toplevel_526 Bool)) Bool (=>
                                      (or (= temp___is_init_524 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000)))
                                      (in_range4 temp___expr_527)))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun in_range5 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000010 #b10000000000000000000000)))))

(define-fun dynamic_invariant4 ((temp___expr_536 Float32)
  (temp___is_init_533 Bool) (temp___skip_constant_534 Bool)
  (temp___do_toplevel_535 Bool)) Bool (=>
                                      (or (= temp___is_init_533 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b10000000000000000000000)))
                                      (in_range5 temp___expr_536)))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun c3b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun default_fore () Int)

(declare-fun default_aft () Int)

(declare-fun default_exp () Int)

(declare-fun default_fore1 () Int)

(declare-fun default_aft1 () Int)

(declare-fun default_exp1 () Int)

(declare-fun room_length () Float32)

(declare-fun wall_thickness () Float32)

(declare-fun total () Float32)

(declare-fun o () Float32)

(declare-fun good_types__feet_io__get__2__item () Float32)

(declare-fun result () Float32)

(declare-fun room_length1 () Float32)

(declare-fun good_types__inch_io__get__2__item () Float32)

(declare-fun result1 () Float32)

(declare-fun wall_thickness1 () Float32)

;; H
  (assert (in_range1 default_exp))

;; H
  (assert (in_range1 default_fore))

;; H
  (assert (in_range1 default_aft))

;; H
  (assert (in_range1 default_exp1))

;; H
  (assert (in_range1 default_fore1))

;; H
  (assert (in_range1 default_aft1))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000))
  (in_range2 room_length)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b10000000000000000000000))
  (in_range3 wall_thickness)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000))
  (in_range2 total)))

;; H
  (assert (in_range4 good_types__feet_io__get__2__item))

;; H
  (assert (= result room_length))

;; H
  (assert (= room_length1 good_types__feet_io__get__2__item))

;; H
  (assert (in_range5 good_types__inch_io__get__2__item))

;; H
  (assert (= result1 wall_thickness))

;; H
  (assert (= wall_thickness1 good_types__inch_io__get__2__item))

;; H
  (assert (= wall_thickness1 c3b))

;; H
  (assert (in_range3 c3b))

(assert
;; WP_parameter_def
 ;; File "a-tiflio.ads", line 80, characters 0-0
  (not (not (fp.isZero      (fp #b0 #b10000010 #b10000000000000000000000)))))
(check-sat)
(exit)
