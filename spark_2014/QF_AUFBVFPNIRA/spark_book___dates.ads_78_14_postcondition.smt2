;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun dates__time__hour__first__bit () Int)

(declare-fun dates__time__hour__last__bit () Int)

(declare-fun dates__time__hour__position () Int)

;; dates__time__hour__first__bit_axiom
  (assert (<= 0 dates__time__hour__first__bit))

;; dates__time__hour__last__bit_axiom
  (assert (< dates__time__hour__first__bit dates__time__hour__last__bit))

;; dates__time__hour__position_axiom
  (assert (<= 0 dates__time__hour__position))

(declare-fun dates__time__minute__first__bit () Int)

(declare-fun dates__time__minute__last__bit () Int)

(declare-fun dates__time__minute__position () Int)

;; dates__time__minute__first__bit_axiom
  (assert (<= 0 dates__time__minute__first__bit))

;; dates__time__minute__last__bit_axiom
  (assert (< dates__time__minute__first__bit dates__time__minute__last__bit))

;; dates__time__minute__position_axiom
  (assert (<= 0 dates__time__minute__position))

(declare-fun dates__time__second__first__bit () Int)

(declare-fun dates__time__second__last__bit () Int)

(declare-fun dates__time__second__position () Int)

;; dates__time__second__first__bit_axiom
  (assert (<= 0 dates__time__second__first__bit))

;; dates__time__second__last__bit_axiom
  (assert (< dates__time__second__first__bit dates__time__second__last__bit))

;; dates__time__second__position_axiom
  (assert (<= 0 dates__time__second__position))

(declare-fun value__size2 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun dates__datetime__date_part__first__bit () Int)

(declare-fun dates__datetime__date_part__last__bit () Int)

(declare-fun dates__datetime__date_part__position () Int)

;; dates__datetime__date_part__first__bit_axiom
  (assert (<= 0 dates__datetime__date_part__first__bit))

;; dates__datetime__date_part__last__bit_axiom
  (assert
  (< dates__datetime__date_part__first__bit dates__datetime__date_part__last__bit))

;; dates__datetime__date_part__position_axiom
  (assert (<= 0 dates__datetime__date_part__position))

(declare-fun dates__datetime__time_part__first__bit () Int)

(declare-fun dates__datetime__time_part__last__bit () Int)

(declare-fun dates__datetime__time_part__position () Int)

;; dates__datetime__time_part__first__bit_axiom
  (assert (<= 0 dates__datetime__time_part__first__bit))

;; dates__datetime__time_part__last__bit_axiom
  (assert
  (< dates__datetime__time_part__first__bit dates__datetime__time_part__last__bit))

;; dates__datetime__time_part__position_axiom
  (assert (<= 0 dates__datetime__time_part__position))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 2000 2099)) (in_range1
                                      temp___expr_150)))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 1 12)) (in_range2 temp___expr_156)))

(define-fun dynamic_invariant2 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 1 31)) (in_range3 temp___expr_162)))

(define-fun dynamic_invariant3 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 23)) (in_range4 temp___expr_168)))

(define-fun dynamic_invariant4 ((temp___expr_174 Int)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)) Bool (=>
                                      (or (= temp___is_init_171 true)
                                      (<= 0 59)) (in_range5 temp___expr_174)))

(define-fun dynamic_invariant5 ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 59)) (in_range6 temp___expr_180)))

(declare-fun result__ () Bool)

(declare-fun dates__is_before__result () Bool)

(declare-fun result () Bool)

(declare-fun result__1 () Bool)

(declare-fun result1 () Bool)

(declare-fun result__2 () Bool)

(declare-fun result2 () Bool)

(declare-fun result__3 () Bool)

(declare-fun result3 () Bool)

(declare-fun result__4 () Bool)

(declare-fun result4 () Bool)

(declare-fun result__5 () Bool)

(declare-fun result5 () Bool)

(declare-fun result__6 () Bool)

(declare-fun result6 () Bool)

(declare-fun result__7 () Bool)

(declare-fun result7 () Bool)

(declare-fun dates__is_before__result1 () Bool)

(declare-fun dates__is_before__result2 () Bool)

(declare-fun dates__is_before__result3 () Bool)

(declare-fun result__8 () Bool)

(declare-fun dates__is_before__result4 () Bool)

(declare-fun result__9 () Bool)

(declare-fun dates__is_before__result5 () Bool)

(declare-fun result8 () Bool)

;; H
  (assert (= result result__))

;; H
  (assert (= result__1 (of_int 0)))

;; H
  (assert (= dates__is_before__result1 dates__is_before__result2))

;; H
  (assert (= dates__is_before__result3 dates__is_before__result1))

;; H
  (assert (= result7 dates__is_before__result))

;; H
  (assert (= dates__is_before__result1 result__2))

;; H
  (assert (= result__8 result__2))

;; H
  (assert (= dates__is_before__result5 dates__is_before__result3))

;; H
  (assert (= result__9 result__2))

;; H
  (assert (= result8 dates__is_before__result4))

;; H
  (assert (= dates__is_before__result4 true))

(assert
;; WP_parameter_def
 ;; File "dates.ads", line 76, characters 0-0
  (not false))
(check-sat)
(exit)
