;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const d Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x)
                                        (and
                                        (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) x)
                                        (fp.leq x (fp #b0 #b10000101 #b10010000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_135 Float32)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000)))
                                      (in_range temp___expr_135)))

(declare-const c Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const last Float32)

(define-fun dynamic_property ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (fp.isFinite32 x)
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant2 ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b01111111 #b00000000000000000000000)
                                      last)) (dynamic_property
                                      (fp #b0 #b01111111 #b00000000000000000000000)
                                      last temp___expr_141)))

;; last__def_axiom
  (assert (= last c))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const last1 Float32)

(define-fun dynamic_property1 ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (fp.isFinite32 x)
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant3 ((temp___expr_147 Float32)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000)
                                      last1)) (dynamic_property1
                                      (fp #b0 #b00000000 #b00000000000000000000000)
                                      last1 temp___expr_147)))

;; last__def_axiom
  (assert (= last1 c))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; c__def_axiom
  (assert (= c d))

(declare-const x Float32)

(declare-const us Float32)

;; H
  (assert (fp.isFinite32 d))

;; H
  (assert (in_range c))

;; H
  (assert (= d c))

;; H
  (assert (dynamic_property (fp #b0 #b01111111 #b00000000000000000000000)
  last x))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) c))

(assert
;; WP_parameter_def
 ;; File "test_dynamic_property.adb", line 1, characters 0-0
  (not
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b00000000 #b00000000000000000000000))))
(check-sat)
(exit)
