;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr (_ BitVec 8))

(declare-const abstr1 (_ BitVec 8))

(declare-const abstr2 (_ BitVec 8))

(declare-const abstr3 (_ BitVec 8))

(declare-const abstr4 (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr5 Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr6 Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-const abstr7 (_ BitVec 8))

(declare-const abstr8 (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr7)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(define-fun dynamic_invariant ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule abstr8 abstr7)) (in_range2
                                      temp___expr_208)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-const abstr9 (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr9)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule abstr8 abstr9)) (in_range3
                                      temp___expr_214)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant2 ((temp___expr_202 Float32)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_202) (fp.isNaN temp___expr_202)))))

(declare-const current_time (_ BitVec 8))

(declare-const res (_ BitVec 8))

(declare-const s (_ BitVec 8))

(declare-const failsafe__model__time_below_threshold__result (_ BitVec 8))

(declare-const temp___256 (_ BitVec 8))

(declare-const temp___255 (_ BitVec 8))

(declare-const o (_ BitVec 8))

(declare-const o1 Float32)

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 8))

(declare-const temp___257 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const temp___259 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 Float32)

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const o12 (_ BitVec 8))

(declare-const temp___266 (_ BitVec 8))

(declare-const o13 (_ BitVec 8))

(declare-const o14 (_ BitVec 8))

(declare-const temp___268 (_ BitVec 8))

(declare-const o15 (_ BitVec 8))

(declare-const o16 (_ BitVec 8))

(declare-const temp___265 (_ BitVec 8))

(declare-const o17 (_ BitVec 8))

(declare-const o18 (_ BitVec 8))

(declare-const o19 Float32)

(declare-const result (_ BitVec 8))

(declare-const res1 (_ BitVec 8))

(declare-const result1 (_ BitVec 8))

(declare-const s1 (_ BitVec 8))

(declare-const result2 Bool)

(declare-const result3 (_ BitVec 8))

(declare-const res2 (_ BitVec 8))

(declare-const res3 (_ BitVec 8))

(declare-const s2 (_ BitVec 8))

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 (_ BitVec 8))

(declare-const s3 (_ BitVec 8))

(declare-const result7 Bool)

(declare-const result8 (_ BitVec 8))

(declare-const res4 (_ BitVec 8))

(declare-const s4 (_ BitVec 8))

(declare-const s5 (_ BitVec 8))

(declare-const res5 (_ BitVec 8))

(declare-const s6 (_ BitVec 8))

(declare-const res6 (_ BitVec 8))

(declare-const s7 (_ BitVec 8))

(declare-const res7 (_ BitVec 8))

(declare-const s8 (_ BitVec 8))

(declare-const res8 (_ BitVec 8))

(declare-const s9 (_ BitVec 8))

(declare-const res9 (_ BitVec 8))

(declare-const s10 (_ BitVec 8))

(declare-const res10 (_ BitVec 8))

(declare-const s11 (_ BitVec 8))

(declare-const res11 (_ BitVec 8))

(declare-const s12 (_ BitVec 8))

(declare-const res12 (_ BitVec 8))

(declare-const s13 (_ BitVec 8))

(declare-const result9 (_ BitVec 8))

(declare-const failsafe__model__time_below_threshold__result1 (_ BitVec 8))

(declare-const failsafe__model__time_below_threshold__result2 (_ BitVec 8))

(declare-const failsafe__model__time_below_threshold__result3 (_ BitVec 8))

(declare-const res13 (_ BitVec 8))

(declare-const s14 (_ BitVec 8))

(declare-const failsafe__model__time_below_threshold__result4 (_ BitVec 8))

(declare-const result10 Bool)

(declare-const result11 Bool)

(declare-const result12 Bool)

(declare-const result13 Bool)

;; H
  (assert (in_range2 current_time))

;; H
  (assert (= res1 abstr8))

;; H
  (assert (in_range3 res1))

;; H
  (assert (= s1 abstr8))

;; H
  (assert (bvule abstr8 s1))

;; H
  (assert (bvule s1 abstr7))

;; H
  (assert
  (=> (bvult current_time s1) (= o (bvadd (bvsub current_time s1) abstr9))))

;; H
  (assert (=> (not (bvult current_time s1)) (= o (bvsub current_time s1))))

;; H
  (assert
  (= result2 (ite (fp.lt o1 (fp #b0 #b01111100 #b10011001100110011001101))
             true false)))

;; H
  (assert (= result2 true))

(declare-const abstr10 (_ BitVec 8))

;; H
  (assert (and (= o2 (bvadd res1 abstr10)) (in_range3 (bvadd res1 abstr10))))

;; H
  (assert (= res1 result3))

;; H
  (assert (= res2 o2))

;; H
  (assert (and (bvule abstr10 res2) (bvule res2 abstr9)))

;; H
  (assert (= res3 (bvadd s2 abstr10)))

;; H
  (assert
  (and
  (and (=> (bvule abstr8 abstr7) (in_range2 s2))
  (=> (bvule abstr8 abstr9) (in_range3 res3)))
  (and (bvule abstr8 s2) (bvule s2 abstr7))))

;; H
  (assert (not (= s2 abstr7)))

;; H
  (assert (= s2 result6))

;; H
  (assert (= s3 (bvadd s2 abstr10)))

;; H
  (assert
  (=> (bvult current_time s3) (= o8 (bvadd (bvsub current_time s3) abstr9))))

;; H
  (assert (=> (not (bvult current_time s3)) (= o8 (bvsub current_time s3))))

;; H
  (assert
  (= result7 (ite (fp.lt o9 (fp #b0 #b01111100 #b10011001100110011001101))
             true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (and (= o10 (bvadd res3 abstr10)) (in_range3 (bvadd res3 abstr10))))

;; H
  (assert (= res3 result8))

;; H
  (assert (= res4 o10))

;; H
  (assert (and (bvule abstr10 res4) (bvule res4 abstr9)))

;; H
  (assert (bvuge current_time (bvsub res4 abstr10)))

(declare-const s15 (_ BitVec 8))

;; H
  (assert
  (bvule (let ((temp___261 (bvsub current_time (bvsub res4 abstr10))))
         (ite (bvult current_time (bvsub res4 abstr10))
         (bvadd temp___261 abstr9) temp___261)) s15))

;; H
  (assert (bvule s15 current_time))

(assert
;; WP_parameter_def
 ;; File "failsafe.ads", line 16, characters 0-0
  (not false))
(check-sat)
(exit)
