;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (fp.isFinite64 temp___expr_135)))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 25000)))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 25000)) (in_range
                                      temp___expr_141)))

(define-fun in_range1 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_147 Float64)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                      (in_range1 temp___expr_147)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const factor Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const old_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const speed Float64)

(declare-const distance Float64)

(declare-const average Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 Int)

(declare-const result Float64)

(declare-const speed1 Float64)

(declare-const result1 Float64)

(declare-const average1 Float64)

(declare-const result2 Float64)

(declare-const distance1 Float64)

(declare-const speed2 Float64)

(declare-const distance2 Float64)

(declare-const average2 Float64)

(declare-const speed3 Float64)

(declare-const distance3 Float64)

(declare-const average3 Float64)

;; H
  (assert (in_range n))

;; H
  (assert (in_range1 factor))

;; H
  (assert (fp.isFinite64 speed))

;; H
  (assert (fp.isFinite64 distance))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 average)))

(declare-const abstr Bool)

;; H
  (assert (and (< n 25000) (= abstr true)))

;; H
  (assert (= speed old_speed))

;; H
  (assert (fp.isFinite64 old_speed))

;; H
  (assert
  (and
  (= o (fp.add RNE speed (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010000000100111010100100101010001100000101)) (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))
  (fp.isFinite64 (fp.add RNE speed (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010000000100111010100100101010001100000101)) (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))))

;; H
  (assert (= speed1 o))

;; H
  (assert
  (and (= o1 (fp.add RNE old_speed speed1))
  (fp.isFinite64 (fp.add RNE old_speed speed1))))

;; H
  (assert
  (= o2 (fp.div RNE o1 (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert (= average1 o2))

;; H
  (assert
  (and
  (= o3 (fp.add RNE distance (fp.mul RNE average1 (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))
  (fp.isFinite64 (fp.add RNE distance (fp.mul RNE average1 (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))))

;; H
  (assert (= distance1 o3))

;; H
  (assert (= average1 average2))

;; H
  (assert (= distance1 distance2))

;; H
  (assert (= speed1 speed2))

;; H
  (assert (= average3 average1))

;; H
  (assert (= distance3 distance1))

;; H
  (assert (= speed3 speed1))

(assert
;; WP_parameter_def
 ;; File "attempt_4.adb", line 22, characters 0-0
  (not (in_range (+ n 1))))
(check-sat)
(exit)
