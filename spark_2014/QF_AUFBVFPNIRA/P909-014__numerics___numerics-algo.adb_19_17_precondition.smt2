;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_141)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const x1 Float32)

(declare-const x2 Float32)

(declare-const x3 Float32)

(declare-const x4 Float32)

(declare-const x5 Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const result Float32)

(declare-const x11 Float32)

(declare-const result1 Float32)

(declare-const x12 Float32)

(declare-const result2 Float32)

(declare-const x21 Float32)

(declare-const result3 Float32)

(declare-const x22 Float32)

(declare-const result4 Float32)

(declare-const x31 Float32)

(declare-const result5 Float32)

(declare-const x32 Float32)

(declare-const result6 Float32)

(declare-const x41 Float32)

(declare-const result7 Float32)

(declare-const x42 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x2)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x3)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x4)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x5)))

;; H
  (assert (= result x1))

;; H
  (assert (= x11 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o abstr) (and (fp.isFinite32 o) (= o (fp.add RNE x11 x11)))))

;; H
  (assert (= result1 x11))

;; H
  (assert (= x12 o))

;; H
  (assert (= result2 x2))

;; H
  (assert (= x21 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-const abstr1 Float32)

;; H
  (assert
  (and (= o1 abstr1)
  (and (fp.isFinite32 o1) (= o1 (fp.sub RNE (fp.neg x21) x21)))))

;; H
  (assert (= result3 x21))

;; H
  (assert (= x22 o1))

;; H
  (assert (= result4 x3))

;; H
  (assert (= x31 (fp #b0 #b11111110 #b11111111111111111111111)))

(declare-const abstr2 Float32)

;; H
  (assert
  (and (= o2 abstr2) (and (fp.isFinite32 o2) (= o2 (fp.mul RNE x31 x31)))))

;; H
  (assert (= result5 x31))

;; H
  (assert (= x32 o2))

;; H
  (assert (= result6 x4))

;; H
  (assert (= x41 (fp #b0 #b10000000 #b10000000000000000000000)))

(declare-const abstr3 Float32)

;; H
  (assert
  (and (= o3 abstr3) (and (fp.isFinite32 o3) (= o3 (fp.sub RNE x41 x41)))))

(assert
;; WP_parameter_def
 ;; File "numerics-algo.ads", line 10, characters 0-0
  (not (not (fp.eq o3 (fp #b0 #b00000000 #b00000000000000000000000)))))
(check-sat)
(exit)
