;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (fp.isFinite64 temp___expr_135)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 25000)))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 25000)) (in_range3
                                      temp___expr_141)))

(define-fun in_range4 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_147 Float64)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                      (in_range4 temp___expr_147)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const factor Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const old_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const delta_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const fnt65 Float64)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const fnp1t65 Float64)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

;; delta_speed__def_axiom
  (assert
  (= delta_speed (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000000 #b1101101100000010000011000100100110111010010111100011)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))

;; fnt65__def_axiom
  (assert
  (= fnt65 (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

;; fnp1t65__def_axiom
  (assert
  (= fnp1t65 (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+ n 1))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

(declare-const new_speed Float64)

(declare-const average Float64)

(declare-const distance Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 Float64)

(declare-const o5 Float64)

(declare-const o6 Float64)

(declare-const o7 Float64)

(declare-const o8 Float64)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 Int)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Float64)

(declare-const o18 Int)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const o21 Float64)

(declare-const o22 Float64)

(declare-const o23 Int)

(declare-const o24 Float64)

(declare-const o25 Float64)

(declare-const o26 Float64)

(declare-const o27 Int)

(declare-const o28 Float64)

(declare-const o29 Float64)

(declare-const o30 Int)

(declare-const o31 Float64)

(declare-const o32 Float64)

(declare-const o33 Float64)

(declare-const o34 Float64)

(declare-const o35 Float64)

(declare-const o36 Float64)

(declare-const o37 Float64)

(declare-const o38 Float64)

(declare-const o39 Float64)

(declare-const o40 Float64)

(declare-const o41 Int)

(declare-const o42 Float64)

(declare-const o43 Float64)

(declare-const o44 Int)

(declare-const o45 Float64)

(declare-const o46 Float64)

(declare-const o47 Float64)

(declare-const o48 Int)

(declare-const result Float64)

(declare-const new_speed1 Float64)

(declare-const result1 Float64)

(declare-const average1 Float64)

(declare-const result2 Float64)

(declare-const distance1 Float64)

(declare-const new_speed2 Float64)

(declare-const average2 Float64)

(declare-const distance2 Float64)

(declare-const new_speed3 Float64)

(declare-const average3 Float64)

(declare-const distance3 Float64)

;; H
  (assert (in_range3 n))

;; H
  (assert (in_range4 factor))

;; H
  (assert (fp.isFinite64 old_speed))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 new_speed)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 average)))

;; H
  (assert (fp.isFinite64 distance))

(declare-const abstr1 Bool)

;; H
  (assert (and (< n 25000) (= abstr1 true)))

;; H
  (assert
  (= (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000000 #b1101101100000010000011000100100110111010010111100011)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))
  delta_speed))

;; H
  (assert (fp.isFinite64 delta_speed))

;; H
  (assert
  (and (= o (fp.add RNE old_speed delta_speed))
  (fp.isFinite64 (fp.add RNE old_speed delta_speed))))

;; H
  (assert (= new_speed1 o))

;; H
  (assert
  (and
  (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  delta_speed)
  (fp.leq delta_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

(declare-const abstr2 Bool)

;; H
  (assert (= abstr2 true))

(declare-const abstr3 Bool)

;; H
  (assert (= abstr3 true))

(declare-const abstr4 Bool)

;; H
  (assert (= abstr4 true))

;; H
  (assert
  (fp.leq new_speed1 (fp.add RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

(declare-const abstr5 Float64)

;; H
  (assert (fp.leq old_speed abstr5))

;; H
  (assert
  (fp.leq (fp.add RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.add RNE
  abstr5 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.leq new_speed1 (fp.add RNE abstr5 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (= (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))
  fnt65))

;; H
  (assert (fp.isFinite64 fnt65))

;; H
  (assert
  (= (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+ n 1))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))
  fnp1t65))

;; H
  (assert (fp.isFinite64 fnp1t65))

;; H
  (assert (<= (+ (* n 65) 1) (* (+ n 1) 65)))

;; H
  (assert
  (fp.leq ((_ to_fp 11 53) RNE (to_real (+ (* n 65) 1))) ((_ to_fp 11 53) RNE (to_real (* (+
  n 1) 65)))))

;; H
  (assert
  (fp.eq (fp.add RNE fnt65 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) ((_ to_fp 11 53) RNE (to_real (+ (*
  n 65) 1)))))

;; H
  (assert (fp.eq fnp1t65 ((_ to_fp 11 53) RNE (to_real (* (+ n 1) 65)))))

;; H
  (assert
  (fp.leq (fp.add RNE fnt65 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  fnp1t65))

(declare-const abstr6 Float64)

;; H
  (assert
  (fp.leq (fp.add RNE abstr5 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  abstr6))

;; H
  (assert (fp.leq new_speed1 abstr6))

;; H
  (assert
  (fp.leq (fp.sub RNE old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  new_speed1))

(declare-const abstr7 Float64)

;; H
  (assert (fp.leq abstr7 old_speed))

;; H
  (assert
  (fp.leq (fp.sub RNE abstr7 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.sub RNE
  old_speed (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.leq (fp.sub RNE abstr7 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  new_speed1))

;; H
  (assert
  (fp.leq (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+ n 1))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp.sub RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert (and (= o41 (+ n 1)) (in_range3 (+ n 1))))

(declare-const abstr8 Float64)

;; H
  (assert
  (and (= o42 abstr8)
  (and (fp.isFinite64 o42)
  (= o42 (fp.mul RNE ((_ to_fp 11 53) RNE (to_real o41)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))))))

;; H
  (assert
  (and (= o39 abstr7)
  (and (fp.isFinite64 o39)
  (= o39 (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))))))

;; H
  (assert
  (= o40 (fp.sub RNE o39 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "attempt_3.adb", line 25, characters 0-0
  (not (fp.isFinite64 o40)))
(check-sat)
(exit)
