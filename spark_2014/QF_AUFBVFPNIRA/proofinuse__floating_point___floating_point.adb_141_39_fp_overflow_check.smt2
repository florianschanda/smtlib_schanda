;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range2 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_260)))

(define-fun dynamic_invariant3 ((temp___expr_267 Float32)
  (temp___is_init_263 Bool) (temp___skip_constant_264 Bool)
  (temp___do_toplevel_265 Bool)
  (temp___do_typ_inv_266 Bool)) Bool (=>
                                     (or (= temp___is_init_263 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_267)))

(define-fun dynamic_invariant4 ((temp___expr_274 Float32)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)
  (temp___do_typ_inv_273 Bool)) Bool (=>
                                     (or (= temp___is_init_270 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_274)))

(define-fun in_range3 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_281 Int)
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)
  (temp___do_typ_inv_280 Bool)) Bool (=>
                                     (or (= temp___is_init_277 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_281)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x2 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const threehalfs Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; x2__def_axiom
  (assert
  (= x2 (fp.mul RNE x (fp #b0 #b01111110 #b00000000000000000000000))))

;; threehalfs__def_axiom
  (assert (= threehalfs (fp #b0 #b01111111 #b10000000000000000000000)))

(declare-const i Int)

(declare-const y Float32)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Bool)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Int)

(declare-const i2 Int)

(declare-const result2 Float32)

(declare-const y1 Float32)

(declare-const result3 Float32)

(declare-const y2 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 i)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 y)))

;; H
  (assert
  (= (fp.mul RNE x (fp #b0 #b01111110 #b00000000000000000000000)) x2))

;; H
  (assert (fp.isFinite32 x2))

;; H
  (assert (fp.isFinite32 threehalfs))

;; H
  (assert (fp.leq (fp #b0 #b01101110 #b01001111100010110101100) x))

(declare-const abstr Int)

;; H
  (assert (and (= o abstr) (in_range3 o)))

;; H
  (assert (= result i))

;; H
  (assert (= i1 o))

(declare-const abstr1 Int)

;; H
  (assert
  (and (= o1 (- 1597463007 abstr1)) (in_range1 (- 1597463007 abstr1))))

;; H
  (assert (= result1 i1))

;; H
  (assert (= i2 o1))

(declare-const abstr2 Float32)

;; H
  (assert (and (= o2 abstr2) (fp.isFinite32 o2)))

;; H
  (assert (= result2 y))

;; H
  (assert (= y1 o2))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 (fp.mul RNE y1 y1))))
(check-sat)
(exit)
