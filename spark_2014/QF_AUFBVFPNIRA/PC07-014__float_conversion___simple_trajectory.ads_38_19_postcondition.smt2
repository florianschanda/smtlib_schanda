;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_135) (fp.isNaN temp___expr_135)))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 25000)))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 25000)) (in_range2
                                      temp___expr_141)))

(define-fun in_range3 ((x Float64)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_147 Float64)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                      (in_range3 temp___expr_147)))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun factor () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun old_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun delta_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

;; delta_speed__def_axiom
  (assert
  (= delta_speed (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000000 #b1101101100000010000011000100100110111010010111100011)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))

(declare-fun new_speed () Float64)

(declare-fun o () Float64)

(declare-fun o1 () Float64)

(declare-fun o2 () Float64)

(declare-fun o3 () Float64)

(declare-fun o4 () Float64)

(declare-fun o5 () Float64)

(declare-fun o6 () Float64)

(declare-fun o7 () Float64)

(declare-fun o8 () Float64)

(declare-fun o9 () Float64)

(declare-fun o10 () Float64)

(declare-fun o11 () Int)

(declare-fun o12 () Float64)

(declare-fun o13 () Float64)

(declare-fun o14 () Int)

(declare-fun o15 () Float64)

(declare-fun o16 () Float64)

(declare-fun o17 () Float64)

(declare-fun o18 () Float64)

(declare-fun o19 () Float64)

(declare-fun o20 () Float64)

(declare-fun o21 () Float64)

(declare-fun o22 () Float64)

(declare-fun o23 () Float64)

(declare-fun o24 () Float64)

(declare-fun o25 () Int)

(declare-fun o26 () Float64)

(declare-fun o27 () Float64)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun result () Float64)

(declare-fun new_speed1 () Float64)

(declare-fun new_speed2 () Float64)

(declare-fun new_speed3 () Float64)

;; H
  (assert (in_range2 n))

;; H
  (assert (in_range3 factor))

;; H
  (assert (not (or (fp.isInfinite old_speed) (fp.isNaN old_speed))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite new_speed) (fp.isNaN new_speed)))))

(declare-fun abstr1 () Bool)

;; H
  (assert (and (< n 25000) (= abstr1 true)))

(declare-fun abstr2 () Bool)

(assert
;; WP_parameter_def
 ;; File "simple_trajectory.ads", line 27, characters 0-0
  (not (= abstr2 true)))
(check-sat)
(exit)
