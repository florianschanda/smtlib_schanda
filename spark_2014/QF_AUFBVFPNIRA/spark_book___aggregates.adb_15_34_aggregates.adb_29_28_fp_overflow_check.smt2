;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c13b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const tolerance Float32)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const a Float32)

(declare-const b Float32)

(declare-const c14b Float32)

(declare-const approx Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const temp___268 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Bool)

(declare-const o13 Float32)

(declare-const result Float32)

(declare-const a1 Float32)

(declare-const result1 Float32)

(declare-const b1 Float32)

(declare-const result2 Float32)

(declare-const approx1 Float32)

(declare-const result3 Bool)

(declare-const approx2 Float32)

(declare-const result4 Float32)

(declare-const approx3 Float32)

(declare-const result5 Bool)

(declare-const approx4 Float32)

(declare-const approx5 Float32)

(declare-const approx6 Float32)

(declare-const approx7 Float32)

(declare-const result6 Float32)

(declare-const c14b1 Float32)

;; H
  (assert (= result a))

;; H
  (assert (= a1 (fp #b0 #b10000011 #b01110110011001100110011)))

;; H
  (assert (fp.isFinite32 a1))

;; H
  (assert (= result1 b))

;; H
  (assert (= b1 (fp #b0 #b10000011 #b00111110011001100110011)))

;; H
  (assert (fp.isFinite32 b1))

;; H
  (assert (= b1 c13b))

;; H
  (assert (fp.isFinite32 c13b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 c14b)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx)))

;; H
  (assert
  (= (fp.mul RNE (fp #b0 #b01101011 #b00001100011011110111101) c13b)
  tolerance))

;; H
  (assert (fp.isFinite32 tolerance))

;; H
  (assert
  (= approx1 (fp.div RNE c13b (fp #b0 #b10000000 #b00000000000000000000000))))

;; H
  (assert
  (and (= o (fp.mul RNE approx1 approx1))
  (fp.isFinite32 (fp.mul RNE approx1 approx1))))

;; H
  (assert (= o1 (fp.sub RNE c13b o)))

;; H
  (assert (and (= o2 o1) (fp.isFinite32 o1)))

;; H
  (assert (= o3 (fp.abs o2)))

;; H
  (assert (= result3 (ite (fp.lt tolerance o3) true false)))

;; H
  (assert (= result3 true))

;; H
  (assert
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx2))
  (fp.lt tolerance (fp.abs (fp.sub RNE c13b (fp.mul RNE approx2 approx2))))))

;; H
  (assert
  (and (= o4 (fp.div RNE c13b approx2))
  (fp.isFinite32 (fp.div RNE c13b approx2))))

;; H
  (assert (= o5 (fp.add RNE approx2 o4)))

(assert
;; WP_parameter_def
 ;; File "aggregates.adb", line 44, characters 0-0
  (not (fp.isFinite32 o5)))
(check-sat)
(exit)
