;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-const value__size Int)

(declare-const value__component__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant2 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range5 temp___expr_140)))

(define-fun in_range6 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant3 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range6 temp___expr_146)))

(define-fun in_range7 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const spaces__angles__angle__theta__first__bit Int)

(declare-const spaces__angles__angle__theta__last__bit Int)

(declare-const spaces__angles__angle__theta__position Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const spaces__positions__position__x__first__bit Int)

(declare-const spaces__positions__position__x__last__bit Int)

(declare-const spaces__positions__position__x__position Int)

;; spaces__positions__position__x__first__bit_axiom
  (assert (<= 0 spaces__positions__position__x__first__bit))

;; spaces__positions__position__x__last__bit_axiom
  (assert
  (< spaces__positions__position__x__first__bit spaces__positions__position__x__last__bit))

;; spaces__positions__position__x__position_axiom
  (assert (<= 0 spaces__positions__position__x__position))

(declare-const spaces__positions__position__y__first__bit Int)

(declare-const spaces__positions__position__y__last__bit Int)

(declare-const spaces__positions__position__y__position Int)

;; spaces__positions__position__y__first__bit_axiom
  (assert (<= 0 spaces__positions__position__y__first__bit))

;; spaces__positions__position__y__last__bit_axiom
  (assert
  (< spaces__positions__position__y__first__bit spaces__positions__position__y__last__bit))

;; spaces__positions__position__y__position_axiom
  (assert (<= 0 spaces__positions__position__y__position))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const value__size3 Int)

(declare-const value__alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-const spaces__poses__pose__pos__first__bit Int)

(declare-const spaces__poses__pose__pos__last__bit Int)

(declare-const spaces__poses__pose__pos__position Int)

;; spaces__poses__pose__pos__first__bit_axiom
  (assert (<= 0 spaces__poses__pose__pos__first__bit))

;; spaces__poses__pose__pos__last__bit_axiom
  (assert
  (< spaces__poses__pose__pos__first__bit spaces__poses__pose__pos__last__bit))

;; spaces__poses__pose__pos__position_axiom
  (assert (<= 0 spaces__poses__pose__pos__position))

(declare-const spaces__poses__pose__ori__first__bit Int)

(declare-const spaces__poses__pose__ori__last__bit Int)

(declare-const spaces__poses__pose__ori__position Int)

;; spaces__poses__pose__ori__first__bit_axiom
  (assert (<= 0 spaces__poses__pose__ori__first__bit))

;; spaces__poses__pose__ori__last__bit_axiom
  (assert
  (< spaces__poses__pose__ori__first__bit spaces__poses__pose__ori__last__bit))

;; spaces__poses__pose__ori__position_axiom
  (assert (<= 0 spaces__poses__pose__ori__position))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(declare-const value__size4 Int)

(declare-const value__component__size1 Int)

(declare-const value__alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-const value__size5 Int)

(declare-const value__alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

(declare-const robot_iface__speed_option__opt__first__bit Int)

(declare-const robot_iface__speed_option__opt__last__bit Int)

(declare-const robot_iface__speed_option__opt__position Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit robot_iface__speed_option__opt__last__bit))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position))

(declare-const robot_iface__speed_option__modulus__first__bit Int)

(declare-const robot_iface__speed_option__modulus__last__bit Int)

(declare-const robot_iface__speed_option__modulus__position Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit robot_iface__speed_option__modulus__last__bit))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position))

(declare-const robot_iface__speed_option__angle__first__bit Int)

(declare-const robot_iface__speed_option__angle__last__bit Int)

(declare-const robot_iface__speed_option__angle__position Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit robot_iface__speed_option__angle__last__bit))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position))

(declare-const value__size6 Int)

(declare-const value__alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

(declare-const robot_iface__proxy__robot_radius__first__bit Int)

(declare-const robot_iface__proxy__robot_radius__last__bit Int)

(declare-const robot_iface__proxy__robot_radius__position Int)

;; robot_iface__proxy__robot_radius__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__first__bit))

;; robot_iface__proxy__robot_radius__last__bit_axiom
  (assert
  (< robot_iface__proxy__robot_radius__first__bit robot_iface__proxy__robot_radius__last__bit))

;; robot_iface__proxy__robot_radius__position_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__position))

(declare-const robot_iface__proxy__min_gap_width__first__bit Int)

(declare-const robot_iface__proxy__min_gap_width__last__bit Int)

(declare-const robot_iface__proxy__min_gap_width__position Int)

;; robot_iface__proxy__min_gap_width__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__first__bit))

;; robot_iface__proxy__min_gap_width__last__bit_axiom
  (assert
  (< robot_iface__proxy__min_gap_width__first__bit robot_iface__proxy__min_gap_width__last__bit))

;; robot_iface__proxy__min_gap_width__position_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__position))

(declare-const robot_iface__proxy__obstacle_avoid_dist__first__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__last__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__position Int)

;; robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__first__bit))

;; robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom
  (assert
  (< robot_iface__proxy__obstacle_avoid_dist__first__bit robot_iface__proxy__obstacle_avoid_dist__last__bit))

;; robot_iface__proxy__obstacle_avoid_dist__position_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__position))

(declare-const robot_iface__proxy__max_speed__first__bit Int)

(declare-const robot_iface__proxy__max_speed__last__bit Int)

(declare-const robot_iface__proxy__max_speed__position Int)

;; robot_iface__proxy__max_speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__first__bit))

;; robot_iface__proxy__max_speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_speed__first__bit robot_iface__proxy__max_speed__last__bit))

;; robot_iface__proxy__max_speed__position_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__position))

(declare-const robot_iface__proxy__max_turn_rate__first__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__last__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__position Int)

;; robot_iface__proxy__max_turn_rate__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__first__bit))

;; robot_iface__proxy__max_turn_rate__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_turn_rate__first__bit robot_iface__proxy__max_turn_rate__last__bit))

;; robot_iface__proxy__max_turn_rate__position_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__position))

(declare-const robot_iface__proxy__goal_position_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__position Int)

;; robot_iface__proxy__goal_position_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__first__bit))

;; robot_iface__proxy__goal_position_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_position_tol__first__bit robot_iface__proxy__goal_position_tol__last__bit))

;; robot_iface__proxy__goal_position_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__position))

(declare-const robot_iface__proxy__goal_angle_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__position Int)

;; robot_iface__proxy__goal_angle_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__first__bit))

;; robot_iface__proxy__goal_angle_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_angle_tol__first__bit robot_iface__proxy__goal_angle_tol__last__bit))

;; robot_iface__proxy__goal_angle_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__position))

(declare-const robot_iface__proxy__goalx__first__bit Int)

(declare-const robot_iface__proxy__goalx__last__bit Int)

(declare-const robot_iface__proxy__goalx__position Int)

;; robot_iface__proxy__goalx__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goalx__first__bit))

;; robot_iface__proxy__goalx__last__bit_axiom
  (assert
  (< robot_iface__proxy__goalx__first__bit robot_iface__proxy__goalx__last__bit))

;; robot_iface__proxy__goalx__position_axiom
  (assert (<= 0 robot_iface__proxy__goalx__position))

(declare-const robot_iface__proxy__goaly__first__bit Int)

(declare-const robot_iface__proxy__goaly__last__bit Int)

(declare-const robot_iface__proxy__goaly__position Int)

;; robot_iface__proxy__goaly__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goaly__first__bit))

;; robot_iface__proxy__goaly__last__bit_axiom
  (assert
  (< robot_iface__proxy__goaly__first__bit robot_iface__proxy__goaly__last__bit))

;; robot_iface__proxy__goaly__position_axiom
  (assert (<= 0 robot_iface__proxy__goaly__position))

(declare-const robot_iface__proxy__goala__first__bit Int)

(declare-const robot_iface__proxy__goala__last__bit Int)

(declare-const robot_iface__proxy__goala__position Int)

;; robot_iface__proxy__goala__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goala__first__bit))

;; robot_iface__proxy__goala__last__bit_axiom
  (assert
  (< robot_iface__proxy__goala__first__bit robot_iface__proxy__goala__last__bit))

;; robot_iface__proxy__goala__position_axiom
  (assert (<= 0 robot_iface__proxy__goala__position))

(declare-const robot_iface__proxy__scan_count__first__bit Int)

(declare-const robot_iface__proxy__scan_count__last__bit Int)

(declare-const robot_iface__proxy__scan_count__position Int)

;; robot_iface__proxy__scan_count__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__first__bit))

;; robot_iface__proxy__scan_count__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_count__first__bit robot_iface__proxy__scan_count__last__bit))

;; robot_iface__proxy__scan_count__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__position))

(declare-const robot_iface__proxy__scan_res__first__bit Int)

(declare-const robot_iface__proxy__scan_res__last__bit Int)

(declare-const robot_iface__proxy__scan_res__position Int)

;; robot_iface__proxy__scan_res__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__first__bit))

;; robot_iface__proxy__scan_res__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_res__first__bit robot_iface__proxy__scan_res__last__bit))

;; robot_iface__proxy__scan_res__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__position))

(declare-const robot_iface__proxy__max_range__first__bit Int)

(declare-const robot_iface__proxy__max_range__last__bit Int)

(declare-const robot_iface__proxy__max_range__position Int)

;; robot_iface__proxy__max_range__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_range__first__bit))

;; robot_iface__proxy__max_range__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_range__first__bit robot_iface__proxy__max_range__last__bit))

;; robot_iface__proxy__max_range__position_axiom
  (assert (<= 0 robot_iface__proxy__max_range__position))

(declare-const robot_iface__proxy__scans__first__bit Int)

(declare-const robot_iface__proxy__scans__last__bit Int)

(declare-const robot_iface__proxy__scans__position Int)

;; robot_iface__proxy__scans__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scans__first__bit))

;; robot_iface__proxy__scans__last__bit_axiom
  (assert
  (< robot_iface__proxy__scans__first__bit robot_iface__proxy__scans__last__bit))

;; robot_iface__proxy__scans__position_axiom
  (assert (<= 0 robot_iface__proxy__scans__position))

(declare-const robot_iface__proxy__x__first__bit Int)

(declare-const robot_iface__proxy__x__last__bit Int)

(declare-const robot_iface__proxy__x__position Int)

;; robot_iface__proxy__x__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__x__first__bit))

;; robot_iface__proxy__x__last__bit_axiom
  (assert
  (< robot_iface__proxy__x__first__bit robot_iface__proxy__x__last__bit))

;; robot_iface__proxy__x__position_axiom
  (assert (<= 0 robot_iface__proxy__x__position))

(declare-const robot_iface__proxy__y__first__bit Int)

(declare-const robot_iface__proxy__y__last__bit Int)

(declare-const robot_iface__proxy__y__position Int)

;; robot_iface__proxy__y__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__y__first__bit))

;; robot_iface__proxy__y__last__bit_axiom
  (assert
  (< robot_iface__proxy__y__first__bit robot_iface__proxy__y__last__bit))

;; robot_iface__proxy__y__position_axiom
  (assert (<= 0 robot_iface__proxy__y__position))

(declare-const robot_iface__proxy__yaw__first__bit Int)

(declare-const robot_iface__proxy__yaw__last__bit Int)

(declare-const robot_iface__proxy__yaw__position Int)

;; robot_iface__proxy__yaw__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__yaw__first__bit))

;; robot_iface__proxy__yaw__last__bit_axiom
  (assert
  (< robot_iface__proxy__yaw__first__bit robot_iface__proxy__yaw__last__bit))

;; robot_iface__proxy__yaw__position_axiom
  (assert (<= 0 robot_iface__proxy__yaw__position))

(declare-const robot_iface__proxy__speed__first__bit Int)

(declare-const robot_iface__proxy__speed__last__bit Int)

(declare-const robot_iface__proxy__speed__position Int)

;; robot_iface__proxy__speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__speed__first__bit))

;; robot_iface__proxy__speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__speed__first__bit robot_iface__proxy__speed__last__bit))

;; robot_iface__proxy__speed__position_axiom
  (assert (<= 0 robot_iface__proxy__speed__position))

(declare-const robot_iface__proxy__goal_reached__first__bit Int)

(declare-const robot_iface__proxy__goal_reached__last__bit Int)

(declare-const robot_iface__proxy__goal_reached__position Int)

;; robot_iface__proxy__goal_reached__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__first__bit))

;; robot_iface__proxy__goal_reached__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_reached__first__bit robot_iface__proxy__goal_reached__last__bit))

;; robot_iface__proxy__goal_reached__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__position))

(define-fun in_range10 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-const value__size7 Int)

(declare-const value__alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

(declare-const gaps__gap__bearing__first__bit Int)

(declare-const gaps__gap__bearing__last__bit Int)

(declare-const gaps__gap__bearing__position Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-const gaps__gap__distance__first__bit Int)

(declare-const gaps__gap__distance__last__bit Int)

(declare-const gaps__gap__distance__position Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-const gaps__gap__idir__first__bit Int)

(declare-const gaps__gap__idir__last__bit Int)

(declare-const gaps__gap__idir__position Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-const value__size8 Int)

(declare-const value__alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

(declare-const valleys__valley__risinggap__first__bit Int)

(declare-const valleys__valley__risinggap__last__bit Int)

(declare-const valleys__valley__risinggap__position Int)

;; valleys__valley__risinggap__first__bit_axiom
  (assert (<= 0 valleys__valley__risinggap__first__bit))

;; valleys__valley__risinggap__last__bit_axiom
  (assert
  (< valleys__valley__risinggap__first__bit valleys__valley__risinggap__last__bit))

;; valleys__valley__risinggap__position_axiom
  (assert (<= 0 valleys__valley__risinggap__position))

(declare-const valleys__valley__othergap__first__bit Int)

(declare-const valleys__valley__othergap__last__bit Int)

(declare-const valleys__valley__othergap__position Int)

;; valleys__valley__othergap__first__bit_axiom
  (assert (<= 0 valleys__valley__othergap__first__bit))

;; valleys__valley__othergap__last__bit_axiom
  (assert
  (< valleys__valley__othergap__first__bit valleys__valley__othergap__last__bit))

;; valleys__valley__othergap__position_axiom
  (assert (<= 0 valleys__valley__othergap__position))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-const value__size9 Int)

(declare-const value__alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

(declare-const algorithm__valley_option__opt__first__bit Int)

(declare-const algorithm__valley_option__opt__last__bit Int)

(declare-const algorithm__valley_option__opt__position Int)

;; algorithm__valley_option__opt__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__opt__first__bit))

;; algorithm__valley_option__opt__last__bit_axiom
  (assert
  (< algorithm__valley_option__opt__first__bit algorithm__valley_option__opt__last__bit))

;; algorithm__valley_option__opt__position_axiom
  (assert (<= 0 algorithm__valley_option__opt__position))

(declare-const algorithm__valley_option__value__first__bit Int)

(declare-const algorithm__valley_option__value__last__bit Int)

(declare-const algorithm__valley_option__value__position Int)

;; algorithm__valley_option__value__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__value__first__bit))

;; algorithm__valley_option__value__last__bit_axiom
  (assert
  (< algorithm__valley_option__value__first__bit algorithm__valley_option__value__last__bit))

;; algorithm__valley_option__value__position_axiom
  (assert (<= 0 algorithm__valley_option__value__position))

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-const value__size10 Int)

(declare-const value__alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__position Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-const value__size11 Int)

(declare-const value__alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__position1 Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-const value__size12 Int)

(declare-const value__alignment12 Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

(declare-const algorithm__laser_scan_data__first__first__bit Int)

(declare-const algorithm__laser_scan_data__first__last__bit Int)

(declare-const algorithm__laser_scan_data__first__position Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-const algorithm__laser_scan_data__second__first__bit Int)

(declare-const algorithm__laser_scan_data__second__last__bit Int)

(declare-const algorithm__laser_scan_data__second__position Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-const value__size13 Int)

(declare-const value__component__size2 Int)

(declare-const value__alignment13 Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

(declare-const value__size14 Int)

(declare-const value__alignment14 Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

(declare-const algorithm__controller__robot__first__bit Int)

(declare-const algorithm__controller__robot__last__bit Int)

(declare-const algorithm__controller__robot__position Int)

;; algorithm__controller__robot__first__bit_axiom
  (assert (<= 0 algorithm__controller__robot__first__bit))

;; algorithm__controller__robot__last__bit_axiom
  (assert
  (< algorithm__controller__robot__first__bit algorithm__controller__robot__last__bit))

;; algorithm__controller__robot__position_axiom
  (assert (<= 0 algorithm__controller__robot__position))

(declare-const algorithm__controller__laserscan__first__bit Int)

(declare-const algorithm__controller__laserscan__last__bit Int)

(declare-const algorithm__controller__laserscan__position Int)

;; algorithm__controller__laserscan__first__bit_axiom
  (assert (<= 0 algorithm__controller__laserscan__first__bit))

;; algorithm__controller__laserscan__last__bit_axiom
  (assert
  (< algorithm__controller__laserscan__first__bit algorithm__controller__laserscan__last__bit))

;; algorithm__controller__laserscan__position_axiom
  (assert (<= 0 algorithm__controller__laserscan__position))

(declare-const algorithm__controller__gapvec__first__bit Int)

(declare-const algorithm__controller__gapvec__last__bit Int)

(declare-const algorithm__controller__gapvec__position Int)

;; algorithm__controller__gapvec__first__bit_axiom
  (assert (<= 0 algorithm__controller__gapvec__first__bit))

;; algorithm__controller__gapvec__last__bit_axiom
  (assert
  (< algorithm__controller__gapvec__first__bit algorithm__controller__gapvec__last__bit))

;; algorithm__controller__gapvec__position_axiom
  (assert (<= 0 algorithm__controller__gapvec__position))

(declare-const algorithm__controller__obsavoiddelta__first__bit Int)

(declare-const algorithm__controller__obsavoiddelta__last__bit Int)

(declare-const algorithm__controller__obsavoiddelta__position Int)

;; algorithm__controller__obsavoiddelta__first__bit_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__first__bit))

;; algorithm__controller__obsavoiddelta__last__bit_axiom
  (assert
  (< algorithm__controller__obsavoiddelta__first__bit algorithm__controller__obsavoiddelta__last__bit))

;; algorithm__controller__obsavoiddelta__position_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__position))

(declare-const algorithm__controller__driveangle__first__bit Int)

(declare-const algorithm__controller__driveangle__last__bit Int)

(declare-const algorithm__controller__driveangle__position Int)

;; algorithm__controller__driveangle__first__bit_axiom
  (assert (<= 0 algorithm__controller__driveangle__first__bit))

;; algorithm__controller__driveangle__last__bit_axiom
  (assert
  (< algorithm__controller__driveangle__first__bit algorithm__controller__driveangle__last__bit))

;; algorithm__controller__driveangle__position_axiom
  (assert (<= 0 algorithm__controller__driveangle__position))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size15 Int)

(declare-const value__alignment15 Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; value__alignment_axiom
  (assert (<= 0 value__alignment15))

(declare-const robot_iface__speed_option__opt__first__bit1 Int)

(declare-const robot_iface__speed_option__opt__last__bit1 Int)

(declare-const robot_iface__speed_option__opt__position1 Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit1))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit1 robot_iface__speed_option__opt__last__bit1))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position1))

(declare-const robot_iface__speed_option__modulus__first__bit1 Int)

(declare-const robot_iface__speed_option__modulus__last__bit1 Int)

(declare-const robot_iface__speed_option__modulus__position1 Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit1))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit1 robot_iface__speed_option__modulus__last__bit1))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position1))

(declare-const robot_iface__speed_option__angle__first__bit1 Int)

(declare-const robot_iface__speed_option__angle__last__bit1 Int)

(declare-const robot_iface__speed_option__angle__position1 Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit1))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit1 robot_iface__speed_option__angle__last__bit1))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position1))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const pbestvalley__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant7 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 0 1)) (in_range11 temp___expr_366)))

(define-fun dynamic_invariant8 ((temp___expr_205 Int)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=>
                                      (or (= temp___is_init_202 true)
                                      (<= 1 1000)) (in_range8
                                      temp___expr_205)))

(define-fun dynamic_invariant9 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 1)) (in_range9 temp___expr_220)))

(define-fun dynamic_invariant10 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_158)))

(define-fun dynamic_invariant11 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range7 temp___expr_170)))

(define-fun dynamic_invariant12 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range10
                                      temp___expr_286)))

(define-fun dynamic_invariant13 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range12
                                      temp___expr_324)))

(declare-const drivespeed Float32)

(declare-const driveturnrate Float32)

(declare-const disttoclosestobstacle Float32)

(declare-const safetydist Float32)

(declare-const theta Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const temp___954 Float32)

(declare-const temp___953 Int)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Float32)

(declare-const o33 Float32)

(declare-const o34 Float32)

(declare-const o35 Float32)

(declare-const o36 Float32)

(declare-const o37 Float32)

(declare-const o38 Float32)

(declare-const o39 Float32)

(declare-const o40 Float32)

(declare-const o41 Float32)

(declare-const o42 Float32)

(declare-const o43 Float32)

(declare-const o44 Float32)

(declare-const o45 Float32)

(declare-const o46 Float32)

(declare-const o47 Float32)

(declare-const o48 Float32)

(declare-const o49 Float32)

(declare-const o50 Float32)

(declare-const o51 Float32)

(declare-const o52 Float32)

(declare-const o53 Float32)

(declare-const o54 Float32)

(declare-const o55 Float32)

(declare-const o56 Float32)

(declare-const o57 Float32)

(declare-const o58 Float32)

(declare-const o59 Float32)

(declare-const o60 Float32)

(declare-const o61 Float32)

(declare-const o62 Float32)

(declare-const o63 Float32)

(declare-const o64 Float32)

(declare-const o65 Float32)

(declare-const o66 Float32)

(declare-const o67 Float32)

(declare-const o68 Float32)

(declare-const o69 Float32)

(declare-const o70 Float32)

(declare-const o71 Float32)

(declare-const o72 Float32)

(declare-const o73 Float32)

(declare-const o74 Float32)

(declare-const o75 Float32)

(declare-const o76 Float32)

(declare-const o77 Float32)

(declare-const o78 Float32)

(declare-const o79 Float32)

(declare-const o80 Float32)

(declare-const o81 Float32)

(declare-const o82 Float32)

(declare-const o83 Float32)

(declare-const o84 Float32)

(declare-const o85 Float32)

(declare-const driveturnrate1 Float32)

(declare-const inumlps Int)

(declare-const i Int)

(declare-const i1 Int)

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const result2 Bool)

(declare-const driveturnrate2 Float32)

(declare-const driveturnrate3 Float32)

(declare-const disttoclosestobstacle1 Float32)

(declare-const i2 Int)

(declare-const disttoclosestobstacle2 Float32)

(declare-const i3 Int)

(declare-const result3 Bool)

(declare-const disttoclosestobstacle3 Float32)

(declare-const disttoclosestobstacle4 Float32)

(declare-const i4 Int)

(declare-const disttoclosestobstacle5 Float32)

(declare-const i5 Int)

(declare-const disttoclosestobstacle6 Float32)

(declare-const i6 Int)

(declare-const disttoclosestobstacle7 Float32)

(declare-const i7 Int)

(declare-const disttoclosestobstacle8 Float32)

(declare-const i8 Int)

(declare-const safetydist1 Float32)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const driveturnrate4 Float32)

(declare-const driveturnrate5 Float32)

(declare-const result6 Bool)

(declare-const result7 Bool)

(declare-const result8 Bool)

(declare-const result9 Bool)

(declare-const result10 Bool)

(declare-const theta1 Float32)

(declare-const theta2 Float32)

(declare-const theta3 Float32)

(declare-const theta4 Float32)

(declare-const driveturnrate6 Float32)

(declare-const driveturnrate7 Float32)

(declare-const driveturnrate8 Float32)

(declare-const theta5 Float32)

(declare-const drivespeed1 Float32)

(declare-const drivespeed2 Float32)

(declare-const drivespeed3 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 drivespeed)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 driveturnrate)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range6 disttoclosestobstacle)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range5 safetydist)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 theta)))

;; H
  (assert (= theta4 o42))

;; H
  (assert
  (and
  (= o43 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) theta4))
  (fp.isFinite32 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  theta4))))

;; H
  (assert
  (= o44 (fp.div RNE o43 (fp #b0 #b10000000 #b10010010000111111011011))))

;; H
  (assert (and (= o46 o45) (fp.isFinite32 o45)))

;; H
  (assert (= driveturnrate6 o46))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o48 abstr)
  (and (fp.isFinite32 o48)
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o48)
  (and
  (=> (fp.eq o47 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o48 (fp #b0 #b00000000 #b00000000000000000000000)))
  (=> (fp.eq o47 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o48 (fp #b0 #b01111111 #b00000000000000000000000))))))))

(declare-const abstr1 Float32)

;; H
  (assert
  (and (= o49 abstr1)
  (and (fp.isFinite32 o49)
  (and (fp.leq (fp #b0 #b01111100 #b10011001100110011001101) o49)
  (fp.leq o49 (fp #b0 #b01111111 #b00000000000000000000000))))))

;; H
  (assert (= o50 (fp.mul RNE driveturnrate6 o49)))

;; H
  (assert (and (= o51 o50) (fp.isFinite32 o50)))

;; H
  (assert (= driveturnrate7 o51))

(assert
;; WP_parameter_def
 ;; File "algorithm.ads", line 107, characters 0-0
  (not (fp.isFinite32 o58)))
(check-sat)
(exit)
