;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const classwide__t__z__first__bit Int)

(declare-const classwide__t__z__last__bit Int)

(declare-const classwide__t__z__position Int)

;; classwide__t__z__first__bit_axiom
  (assert (<= 0 classwide__t__z__first__bit))

;; classwide__t__z__last__bit_axiom
  (assert (< classwide__t__z__first__bit classwide__t__z__last__bit))

;; classwide__t__z__position_axiom
  (assert (<= 0 classwide__t__z__position))

(declare-const classwide__t__x__first__bit Int)

(declare-const classwide__t__x__last__bit Int)

(declare-const classwide__t__x__position Int)

;; classwide__t__x__first__bit_axiom
  (assert (<= 0 classwide__t__x__first__bit))

;; classwide__t__x__last__bit_axiom
  (assert (< classwide__t__x__first__bit classwide__t__x__last__bit))

;; classwide__t__x__position_axiom
  (assert (<= 0 classwide__t__x__position))

(declare-const classwide__t__y__first__bit Int)

(declare-const classwide__t__y__last__bit Int)

(declare-const classwide__t__y__position Int)

;; classwide__t__y__first__bit_axiom
  (assert (<= 0 classwide__t__y__first__bit))

;; classwide__t__y__last__bit_axiom
  (assert (< classwide__t__y__first__bit classwide__t__y__last__bit))

;; classwide__t__y__position_axiom
  (assert (<= 0 classwide__t__y__position))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const classwide__t__z__first__bit1 Int)

(declare-const classwide__t__z__last__bit1 Int)

(declare-const classwide__t__z__position1 Int)

;; classwide__t__z__first__bit_axiom
  (assert (<= 0 classwide__t__z__first__bit1))

;; classwide__t__z__last__bit_axiom
  (assert (< classwide__t__z__first__bit1 classwide__t__z__last__bit1))

;; classwide__t__z__position_axiom
  (assert (<= 0 classwide__t__z__position1))

(declare-const classwide__t__x__first__bit1 Int)

(declare-const classwide__t__x__last__bit1 Int)

(declare-const classwide__t__x__position1 Int)

;; classwide__t__x__first__bit_axiom
  (assert (<= 0 classwide__t__x__first__bit1))

;; classwide__t__x__last__bit_axiom
  (assert (< classwide__t__x__first__bit1 classwide__t__x__last__bit1))

;; classwide__t__x__position_axiom
  (assert (<= 0 classwide__t__x__position1))

(declare-const classwide__t__y__first__bit1 Int)

(declare-const classwide__t__y__last__bit1 Int)

(declare-const classwide__t__y__position1 Int)

;; classwide__t__y__first__bit_axiom
  (assert (<= 0 classwide__t__y__first__bit1))

;; classwide__t__y__last__bit_axiom
  (assert (< classwide__t__y__first__bit1 classwide__t__y__last__bit1))

;; classwide__t__y__position_axiom
  (assert (<= 0 classwide__t__y__position1))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const classwide__u2__w__first__bit Int)

(declare-const classwide__u2__w__last__bit Int)

(declare-const classwide__u2__w__position Int)

;; classwide__u2__w__first__bit_axiom
  (assert (<= 0 classwide__u2__w__first__bit))

;; classwide__u2__w__last__bit_axiom
  (assert (< classwide__u2__w__first__bit classwide__u2__w__last__bit))

;; classwide__u2__w__position_axiom
  (assert (<= 0 classwide__u2__w__position))

(declare-const classwide__u2__xx__first__bit Int)

(declare-const classwide__u2__xx__last__bit Int)

(declare-const classwide__u2__xx__position Int)

;; classwide__u2__xx__first__bit_axiom
  (assert (<= 0 classwide__u2__xx__first__bit))

;; classwide__u2__xx__last__bit_axiom
  (assert (< classwide__u2__xx__first__bit classwide__u2__xx__last__bit))

;; classwide__u2__xx__position_axiom
  (assert (<= 0 classwide__u2__xx__position))

(declare-const classwide__u2__yy__first__bit Int)

(declare-const classwide__u2__yy__last__bit Int)

(declare-const classwide__u2__yy__position Int)

;; classwide__u2__yy__first__bit_axiom
  (assert (<= 0 classwide__u2__yy__first__bit))

;; classwide__u2__yy__last__bit_axiom
  (assert (< classwide__u2__yy__first__bit classwide__u2__yy__last__bit))

;; classwide__u2__yy__position_axiom
  (assert (<= 0 classwide__u2__yy__position))

(declare-const classwide__t__z__first__bit2 Int)

(declare-const classwide__t__z__last__bit2 Int)

(declare-const classwide__t__z__position2 Int)

;; classwide__t__z__first__bit_axiom
  (assert (<= 0 classwide__t__z__first__bit2))

;; classwide__t__z__last__bit_axiom
  (assert (< classwide__t__z__first__bit2 classwide__t__z__last__bit2))

;; classwide__t__z__position_axiom
  (assert (<= 0 classwide__t__z__position2))

(declare-const classwide__t__x__first__bit2 Int)

(declare-const classwide__t__x__last__bit2 Int)

(declare-const classwide__t__x__position2 Int)

;; classwide__t__x__first__bit_axiom
  (assert (<= 0 classwide__t__x__first__bit2))

;; classwide__t__x__last__bit_axiom
  (assert (< classwide__t__x__first__bit2 classwide__t__x__last__bit2))

;; classwide__t__x__position_axiom
  (assert (<= 0 classwide__t__x__position2))

(declare-const classwide__t__y__first__bit2 Int)

(declare-const classwide__t__y__last__bit2 Int)

(declare-const classwide__t__y__position2 Int)

;; classwide__t__y__first__bit_axiom
  (assert (<= 0 classwide__t__y__first__bit2))

;; classwide__t__y__last__bit_axiom
  (assert (< classwide__t__y__first__bit2 classwide__t__y__last__bit2))

;; classwide__t__y__position_axiom
  (assert (<= 0 classwide__t__y__position2))

(declare-const v__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const v__split_fields Bool)

(declare-const o Bool)

(declare-const temp___228 Bool)

(declare-const temp___2281 Int)

(declare-const o1 Bool)

(declare-const temp___230 Bool)

(declare-const temp___2301 Int)

(declare-const result Bool)

(declare-const v__split_fields1 Bool)

(declare-const result1 Bool)

(declare-const v__split_fields2 Bool)

(declare-const result2 Bool)

(declare-const v__split_fields3 Bool)

(declare-const v__split_fields4 Bool)

(declare-const v__split_fields5 Bool)

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= (distinct 0 0) v__split_fields1))

;; H
  (assert (= v__split_fields1 o))

;; H
  (assert (= temp___228 o))

;; H
  (assert (= v__attr__tag temp___2281))

;; H
  (assert (= result1 v__split_fields1))

;; H
  (assert (= temp___228 v__split_fields2))

;; H
  (assert (= v__split_fields2 o1))

;; H
  (assert (= temp___230 o1))

;; H
  (assert (= v__attr__tag temp___2301))

;; H
  (assert (= result2 v__split_fields2))

;; H
  (assert (= temp___230 v__split_fields3))

;; H
  (assert (= v__split_fields4 v__split_fields3))

;; H
  (assert (= v__split_fields5 v__split_fields3))

(assert
;; WP_parameter_def
 ;; File "classwide.ads", line 39, characters 0-0
  (not false))
(check-sat)
(exit)
