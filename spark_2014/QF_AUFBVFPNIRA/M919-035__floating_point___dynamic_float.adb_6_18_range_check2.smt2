;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun last ((dynamic_float__L_1__i Int)) Float32 ((_ to_fp 8 24) RNE (to_real dynamic_float__L_1__i)))

(define-fun dynamic_property ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (fp.isFinite32 x)
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant ((temp___expr_207 Float32)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool) (temp___do_typ_inv_206 Bool)
  (dynamic_float__L_1__i Int)) Bool (=>
                                    (or (= temp___is_init_203 true)
                                    (fp.leq (fp #b0 #b00000000 #b00000000000000000000000)
                                    (last dynamic_float__L_1__i)))
                                    (dynamic_property
                                    (fp #b0 #b00000000 #b00000000000000000000000)
                                    (last dynamic_float__L_1__i)
                                    temp___expr_207)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_200 Float32)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (or (= temp___is_init_196 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_200)))

(declare-const i Int)

(declare-const x Float32)

(declare-const us Float32)

(declare-const o Float32)

(declare-const o1 Int)

(declare-const us1 Float32)

(declare-const o2 Float32)

(declare-const o3 Int)

(declare-const us2 Float32)

(declare-const o4 Float32)

(declare-const o5 Int)

(declare-const us3 Float32)

(declare-const o6 Float32)

(declare-const o7 Int)

(declare-const us4 Float32)

(declare-const o8 Float32)

(declare-const o9 Int)

(declare-const us5 Float32)

(declare-const o10 Float32)

(declare-const o11 Int)

(declare-const us6 Float32)

(declare-const o12 Float32)

(declare-const o13 Int)

(declare-const us7 Float32)

(declare-const o14 Float32)

(declare-const o15 Int)

(declare-const us8 Float32)

(declare-const o16 Float32)

(declare-const o17 Int)

(declare-const us9 Float32)

(declare-const o18 Float32)

(declare-const o19 Int)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Float32)

(declare-const x1 Float32)

(declare-const result2 Int)

(declare-const i2 Int)

(declare-const result3 Float32)

(declare-const x2 Float32)

(declare-const result4 Int)

(declare-const i3 Int)

(declare-const result5 Float32)

(declare-const x3 Float32)

(declare-const result6 Int)

(declare-const i4 Int)

(declare-const result7 Float32)

(declare-const x4 Float32)

(declare-const result8 Int)

(declare-const i5 Int)

(declare-const result9 Float32)

(declare-const x5 Float32)

(declare-const result10 Int)

(declare-const i6 Int)

(declare-const result11 Float32)

(declare-const x6 Float32)

(declare-const result12 Int)

(declare-const i7 Int)

(declare-const result13 Float32)

(declare-const x7 Float32)

(declare-const result14 Int)

(declare-const i8 Int)

(declare-const result15 Float32)

(declare-const x8 Float32)

(declare-const result16 Int)

(declare-const i9 Int)

(declare-const result17 Float32)

(declare-const x9 Float32)

(declare-const result18 Int)

(declare-const i10 Int)

(declare-const x10 Float32)

;; H
  (assert (= result i))

;; H
  (assert (= i1 1))

;; H
  (assert
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) ((_ to_fp 8 24) RNE (to_real
  i1))))

(assert
;; WP_parameter_def
 ;; File "dynamic_float.adb", line 1, characters 0-0
  (not
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b00000000 #b00000000000000000000000))))
(check-sat)
(exit)
