;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const d Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000101 #b10010000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_158 Float32)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool)
  (temp___do_typ_inv_157 Bool)) Bool (=>
                                     (or (= temp___is_init_154 true)
                                     (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b10000101 #b10010000000000000000000)))
                                     (in_range1 temp___expr_158)))

(declare-const c Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const last Float32)

(define-fun dynamic_property ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (fp.isFinite32 x)
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant2 ((temp___expr_165 Float32)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (=>
                                     (or (= temp___is_init_161 true)
                                     (fp.leq (fp #b0 #b01111111 #b00000000000000000000000)
                                     last)) (dynamic_property
                                     (fp #b0 #b01111111 #b00000000000000000000000)
                                     last temp___expr_165)))

;; last__def_axiom
  (assert (= last c))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const last1 Float32)

(define-fun dynamic_property1 ((first_int Float32) (last_int Float32)
  (x Float32)) Bool (and (fp.isFinite32 x)
                    (and (fp.leq first_int x) (fp.leq x last_int))))

(define-fun dynamic_invariant3 ((temp___expr_172 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000)
                                     last1)) (dynamic_property1
                                     (fp #b0 #b00000000 #b00000000000000000000000)
                                     last1 temp___expr_172)))

;; last__def_axiom
  (assert (= last1 c))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; c__def_axiom
  (assert (= c d))

(declare-const x Float32)

(declare-const y Float32)

(declare-const test_dynamic_property__c__assume Float32)

(declare-const us Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const us1 Float32)

(declare-const o3 Float32)

(declare-const test_dynamic_property__dyn_param__x Float32)

(declare-const us2 Float32)

(declare-const o4 Float32)

(declare-const us3 Float32)

(declare-const o5 Float32)

(declare-const test_dynamic_property__nested__dyn_param__x Float32)

(declare-const us4 Float32)

(declare-const o6 Float32)

(declare-const y1 Float32)

(declare-const result Float32)

(declare-const x1 Float32)

(declare-const result1 Float32)

(declare-const x2 Float32)

(declare-const x3 Float32)

(declare-const test_dynamic_property__dyn_param__x1 Float32)

(declare-const result2 Float32)

(declare-const y2 Float32)

(declare-const test_dynamic_property__nested__dyn_param__x1 Float32)

(declare-const result3 Float32)

(declare-const x4 Float32)

;; H
  (assert (fp.isFinite32 d))

;; H
  (assert
  (and (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) d)
  (fp.leq d (fp #b0 #b10000101 #b10010000000000000000000))))

;; H
  (assert (and (= test_dynamic_property__c__assume d) (fp.isFinite32 d)))

;; H
  (assert (= test_dynamic_property__c__assume c))

;; H
  (assert (in_range1 c))

;; H
  (assert (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) c))

(assert
;; WP_parameter_def
 ;; File "test_dynamic_property.adb", line 40, characters 0-0
  (not
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b01111111 #b00000000000000000000000))))
(check-sat)
(exit)
