;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

;; max_value
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (fp.to_real (fp #b0 #b11111110 #b11111111111111111111111))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-const value__size Int)

(declare-const value__component__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const f Float32)

(declare-const dummy Float32)

(declare-const temp___519 Float32)

(declare-const temp___518 Float32)

(declare-const o Float32)

(declare-const temp___523 Float32)

(declare-const temp___522 Float32)

(declare-const o1 Float32)

(declare-const temp___527 Float32)

(declare-const temp___526 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const dummy1 Float32)

(declare-const result Float32)

(declare-const f1 Float32)

(declare-const f2 Float32)

(declare-const dummy2 Float32)

(declare-const result1 Float32)

(declare-const dummy3 Float32)

(declare-const result2 Float32)

(declare-const f3 Float32)

(declare-const f4 Float32)

(declare-const dummy4 Float32)

(declare-const f5 Float32)

(declare-const dummy5 Float32)

(declare-const f6 Float32)

(declare-const dummy6 Float32)

(declare-const f7 Float32)

(declare-const dummy7 Float32)

(declare-const result3 Float32)

(declare-const f8 Float32)

(declare-const f9 Float32)

(declare-const dummy8 Float32)

(declare-const result4 Float32)

(declare-const dummy9 Float32)

(declare-const result5 Float32)

(declare-const f10 Float32)

(declare-const f11 Float32)

(declare-const dummy10 Float32)

(declare-const f12 Float32)

(declare-const dummy11 Float32)

(declare-const f13 Float32)

(declare-const dummy12 Float32)

(declare-const f14 Float32)

(declare-const dummy13 Float32)

(declare-const result6 Float32)

(declare-const f15 Float32)

(declare-const f16 Float32)

(declare-const dummy14 Float32)

(declare-const dummy15 Float32)

(declare-const f17 Float32)

(declare-const f18 Float32)

(declare-const dummy16 Float32)

(declare-const f19 Float32)

(declare-const dummy17 Float32)

(declare-const f20 Float32)

(declare-const f21 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 dummy)))

;; H
  (assert (= result f))

;; H
  (assert (= f1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___519 dummy)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___518 f1)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f2))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 dummy2)))
  (fp.leq f2 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-const abstr Float32)

(declare-const abstr1 Float32)

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (= o abstr1)
  (and (fp.isFinite32 o)
  (fp.lt (fp.abs (fp.sub RNE o abstr)) (fp #b0 #b01101100 #b10010010101001110011100))))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy2 result1)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= dummy3 o)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= result2 f2)))

(declare-const abstr2 Float32)

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= f3 abstr2)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (not (fp.leq f3 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy3 dummy4)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f3 f4)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy5 dummy3)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f5 f3)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy7 dummy5)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f7 f5)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f1 f6)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= dummy7 dummy1)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f7 f1)))

;; H
  (assert (= result3 f6))

;; H
  (assert (= f8 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___523 dummy6)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___522 f8)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f9))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 dummy8)))
  (fp.leq f9 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-const abstr3 Float32)

(declare-const abstr4 Float32)

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (= o1 abstr4)
  (and (fp.isFinite32 o1)
  (fp.lt (fp.abs (fp.sub RNE o1 abstr3)) (fp #b0 #b01101100 #b10010010101001110011100))))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy8 result4)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy9 o1)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= result5 f9)))

(declare-const abstr5 Float32)

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= f10 abstr5)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (not (fp.leq f10 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy9 dummy10)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f10 f11)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy11 dummy9)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f12 f10)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy13 dummy11)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f14 f12)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f8 f13)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= dummy13 dummy7)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f14 f8)))

;; H
  (assert (= result6 f13))

;; H
  (assert (= f15 (fp.neg (fp #b0 #b01111110 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= temp___527 dummy12)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= temp___526 f15)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f16))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 dummy14)))
  (fp.leq f16 (fp #b0 #b01111110 #b00000000000000000000000)))))

(declare-const abstr6 Float32)

(declare-const abstr7 Float32)

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (and (= o2 abstr7)
  (and (fp.isFinite32 o2)
  (fp.lt (fp.abs (fp.sub RNE o2 abstr6)) (fp #b0 #b01110001 #b10100011011011100010111))))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy15 o2)))

(declare-const abstr8 Float32)

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= f17 abstr8)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (not (fp.leq f17 (fp #b0 #b01111110 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy16 dummy15)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)) (= f18 f17)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy17 dummy16)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)) (= f19 f18)))

;; H
  (assert
  (=> (not (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)))
  (= dummy17 dummy13)))

;; H
  (assert
  (=> (not (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)))
  (= f19 f15)))

;; H
  (assert (= f20 (fp.neg (fp #b0 #b01111110 #b00000000000000000000000))))

;; H
  (assert (fp.leq f20 (fp #b0 #b01111110 #b00000000000000000000000)))

;; H
  (assert
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f21))
  (fp.leq f21 (fp #b0 #b01111110 #b00000000000000000000000))))

(declare-const abstr9 Float32)

(declare-const abstr10 Float32)

;; H
  (assert
  (and (= o4 abstr10)
  (and (fp.isFinite32 o4)
  (fp.lt (fp.abs (fp.sub RNE o4 abstr9)) (fp #b0 #b01101100 #b10010010101001110011100)))))

(declare-const abstr11 Float32)

(declare-const abstr12 Float32)

;; H
  (assert
  (and (= o3 abstr12)
  (and (fp.isFinite32 o3)
  (fp.lt (fp.abs (fp.sub RNE o3 abstr11)) (fp #b0 #b01101100 #b10010010101001110011100)))))

;; H
  (assert (= o5 (fp.div RNE o3 o4)))

;; H
  (assert (and (= o6 o5) (fp.isFinite32 o5)))

(assert
;; WP_parameter_def
 ;; File "test_trigo.adb", line 5, characters 0-0
  (not (fp.leq (fp.neg (fp #b0 #b01111110 #b00000000000000000000000)) f21)))
(check-sat)
(exit)
