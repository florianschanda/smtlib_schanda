;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_175 Float32)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (=>
                                     (or (= temp___is_init_171 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_175)))

(define-fun dynamic_invariant1 ((temp___expr_189 Float32)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)
  (temp___do_typ_inv_188 Bool)) Bool (=>
                                     (or (= temp___is_init_185 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_189)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_203 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)
  (temp___do_typ_inv_202 Bool)) Bool (=>
                                     (or (= temp___is_init_199 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_203)))

(declare-const maximum_valid_speed_km_per_h Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const maximum_valid_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const minimum_valid_acceleration Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const initial_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const final_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const acceleration Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const minimum_valid_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_invariant3 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

;; minimum_valid_speed__def_axiom
  (assert
  (= minimum_valid_speed (fp #b0 #b01111011 #b10011001100110011001101)))

(declare-const abstr Float32)

;; maximum_valid_speed__def_axiom
  (assert (= maximum_valid_speed abstr))

;; minimum_valid_acceleration__def_axiom
  (assert
  (= minimum_valid_acceleration (fp.neg (fp #b0 #b10000010 #b01000000000000000000000))))

(define-fun dynamic_invariant4 ((temp___expr_182 Float32)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_182)))

;; maximum_valid_speed_km_per_h__def_axiom
  (assert
  (= maximum_valid_speed_km_per_h (fp #b0 #b10000111 #b11110100000000000000000)))

(declare-const speed Float32)

(declare-const delta_speed Float32)

(declare-const distance Int)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Bool)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Int)

(declare-const result Float32)

(declare-const speed1 Float32)

(declare-const result1 Int)

(declare-const distance1 Int)

(declare-const speed2 Float32)

(declare-const delta_speed1 Float32)

(declare-const distance2 Int)

(declare-const result2 Float32)

(declare-const delta_speed2 Float32)

(declare-const result3 Float32)

(declare-const speed3 Float32)

(declare-const result4 Int)

(declare-const distance3 Int)

;; H
  (assert (fp.isFinite32 minimum_valid_speed))

;; H
  (assert
  (= (fp #b0 #b01111011 #b10011001100110011001101) minimum_valid_speed))

;; H
  (assert (fp.isFinite32 maximum_valid_speed))

(declare-const abstr1 Float32)

;; H
  (assert (= abstr1 maximum_valid_speed))

;; H
  (assert (fp.isFinite32 minimum_valid_acceleration))

;; H
  (assert
  (= (fp.neg (fp #b0 #b10000010 #b01000000000000000000000)) minimum_valid_acceleration))

;; H
  (assert (fp.isFinite32 initial_speed))

;; H
  (assert (fp.isFinite32 final_speed))

;; H
  (assert (fp.isFinite32 acceleration))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) initial_speed)
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) final_speed))
  (fp.leq initial_speed maximum_valid_speed))
  (fp.lt final_speed initial_speed))
  (fp.lt acceleration (fp #b0 #b00000000 #b00000000000000000000000)))
  (fp.leq minimum_valid_acceleration acceleration)))

;; H
  (assert (= result speed))

;; H
  (assert (= speed1 initial_speed))

;; H
  (assert (fp.isFinite32 speed1))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 delta_speed)))

;; H
  (assert (= result1 distance))

;; H
  (assert (= distance1 0))

;; H
  (assert (in_range2 distance1))

;; H
  (assert (fp.lt final_speed speed1))

;; H
  (assert (fp.lt minimum_valid_speed speed1))

(assert
;; WP_parameter_def
 ;; File "units.ads", line 27, characters 0-0
  (not (fp.leq minimum_valid_acceleration acceleration)))
(check-sat)
(exit)
