;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr (_ BitVec 8))

(declare-const abstr1 (_ BitVec 8))

(declare-const abstr2 (_ BitVec 8))

(declare-const abstr3 (_ BitVec 8))

(declare-const abstr4 (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr5 Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr6 Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr7 (_ BitVec 16))

(declare-const abstr8 (_ BitVec 16))

(declare-const abstr9 (_ BitVec 16))

(declare-const abstr10 (_ BitVec 16))

(declare-const abstr11 (_ BitVec 16))

(define-fun nth_bv1 ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr12 Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr12)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr13 (_ BitVec 32))

(declare-const abstr14 (_ BitVec 32))

(declare-const abstr15 (_ BitVec 32))

(declare-const abstr16 (_ BitVec 32))

(declare-const abstr17 (_ BitVec 32))

(define-fun nth_bv2 ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr18 Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr18)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-const abstr19 (_ BitVec 64))

(declare-const abstr20 (_ BitVec 64))

(declare-const abstr21 (_ BitVec 64))

(declare-const abstr22 (_ BitVec 64))

(declare-const abstr23 (_ BitVec 64))

(define-fun nth_bv3 ((x (_ BitVec 64))
  (i (_ BitVec 64))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000))
                          true false))

(declare-const abstr24 Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool abstr24)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(define-fun dynamic_invariant ((temp___expr_171 (_ BitVec 8))
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool true)

(declare-const i (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const o Float32)

(assert
;; WP_parameter_def
 ;; File "interfac.ads", line 63, characters 0-0
  (not
  (or (fp.isZero      ((_ to_fp_unsigned 8 24) RNE i))
  (fp.isPositive  ((_ to_fp_unsigned 8 24) RNE i)))))
(check-sat)
(exit)
