;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10001010 #b01110111000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000)))
                                      (in_range2 temp___expr_140)))

(define-fun in_range3 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range3 temp___expr_146)))

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range4 temp___expr_158)))

(define-fun in_range5 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant4 ((temp___expr_1294 Float32)
  (temp___is_init_1291 Bool) (temp___skip_constant_1292 Bool)
  (temp___do_toplevel_1293 Bool)) Bool (=>
                                       (or (= temp___is_init_1291 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (in_range5 temp___expr_1294)))

(define-fun in_range6 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant5 ((temp___expr_1300 Float32)
  (temp___is_init_1297 Bool) (temp___skip_constant_1298 Bool)
  (temp___do_toplevel_1299 Bool)) Bool (=>
                                       (or (= temp___is_init_1297 true)
                                       (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range6 temp___expr_1300)))

(define-fun in_range7 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant6 ((temp___expr_1306 Float32)
  (temp___is_init_1303 Bool) (temp___skip_constant_1304 Bool)
  (temp___do_toplevel_1305 Bool)) Bool (=>
                                       (or (= temp___is_init_1303 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range7 temp___expr_1306)))

(define-fun in_range8 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant7 ((temp___expr_1336 Float32)
  (temp___is_init_1333 Bool) (temp___skip_constant_1334 Bool)
  (temp___do_toplevel_1335 Bool)) Bool (=>
                                       (or (= temp___is_init_1333 true)
                                       (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range8 temp___expr_1336)))

(declare-fun gx () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun gy () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun gz () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun ax () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun ay () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun az () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun dt () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun c3b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun c4b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun c5b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun c6b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun c7b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun c8b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun c9b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun c11b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun c12b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun c13b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun c14b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun c15b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun c16b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun c17b () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS51 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS52 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS53 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS54 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS55 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS56 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS57 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS58 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS59 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS60 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS61 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS62 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS63 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS64 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS65 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS66 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS67 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS68 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS69 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS70 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS71 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS72 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS73 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS74 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS75 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS76 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS77 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS78 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS79 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS80 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS81 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS82 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS83 () Int)

(declare-fun q0 () Float32)

(declare-fun q1 () Float32)

(declare-fun q2 () Float32)

(declare-fun q3 () Float32)

(declare-fun two_kp () Float32)

(declare-fun two_ki () Float32)

(declare-fun integral_fbx () Float32)

(declare-fun integral_fby () Float32)

(declare-fun integral_fbz () Float32)

(declare-fun beta () Float32)

(declare-fun recip_norm () Float32)

(declare-fun norm_ax () Float32)

(declare-fun norm_ay () Float32)

(declare-fun norm_az () Float32)

(declare-fun rad_gx () Float32)

(declare-fun rad_gy () Float32)

(declare-fun rad_gz () Float32)

(declare-fun half_vx () Float32)

(declare-fun half_vy () Float32)

(declare-fun half_vz () Float32)

(declare-fun half_ex () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Float32)

(declare-fun o14 () Float32)

(declare-fun o15 () Float32)

(declare-fun o16 () Float32)

(declare-fun o17 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Float32)

(declare-fun o20 () Float32)

(declare-fun o21 () Float32)

(declare-fun o22 () Float32)

(declare-fun o23 () Float32)

(declare-fun o24 () Float32)

(declare-fun o25 () Float32)

(declare-fun o26 () Float32)

(declare-fun o27 () Float32)

(declare-fun o28 () Float32)

(declare-fun o29 () Float32)

(declare-fun o30 () Float32)

(declare-fun o31 () Float32)

(declare-fun o32 () Float32)

(declare-fun o33 () Float32)

(declare-fun o34 () Float32)

(declare-fun o35 () Float32)

(declare-fun o36 () Float32)

(declare-fun o37 () Float32)

(declare-fun o38 () Float32)

(declare-fun o39 () Float32)

(declare-fun o40 () Float32)

(declare-fun o41 () Float32)

(declare-fun o42 () Float32)

(declare-fun o43 () Float32)

(declare-fun o44 () Float32)

(declare-fun o45 () Float32)

(declare-fun o46 () Float32)

(declare-fun o47 () Float32)

(declare-fun o48 () Float32)

(declare-fun o49 () Float32)

(declare-fun o50 () Float32)

(declare-fun o51 () Float32)

(declare-fun o52 () Float32)

(declare-fun o53 () Float32)

(declare-fun o54 () Float32)

(declare-fun o55 () Float32)

(declare-fun o56 () Float32)

(declare-fun o57 () Float32)

(declare-fun o58 () Float32)

(declare-fun o59 () Float32)

(declare-fun o60 () Float32)

(declare-fun o61 () Float32)

(declare-fun o62 () Float32)

(declare-fun o63 () Float32)

(declare-fun o64 () Float32)

(declare-fun o65 () Float32)

(declare-fun o66 () Float32)

(declare-fun o67 () Float32)

(declare-fun o68 () Float32)

(declare-fun o69 () Float32)

(declare-fun o70 () Float32)

(declare-fun o71 () Float32)

(declare-fun o72 () Float32)

(declare-fun o73 () Float32)

(declare-fun o74 () Float32)

(declare-fun o75 () Float32)

(declare-fun o76 () Float32)

(declare-fun o77 () Float32)

(declare-fun o78 () Float32)

(declare-fun o79 () Float32)

(declare-fun o80 () Float32)

(declare-fun o81 () Float32)

(declare-fun o82 () Float32)

(declare-fun o83 () Float32)

(declare-fun o84 () Float32)

(declare-fun o85 () Float32)

(declare-fun o86 () Float32)

(declare-fun o87 () Float32)

(declare-fun o88 () Float32)

(declare-fun o89 () Float32)

(declare-fun o90 () Float32)

(declare-fun o91 () Float32)

(declare-fun o92 () Float32)

(declare-fun o93 () Float32)

(declare-fun o94 () Float32)

(declare-fun o95 () Float32)

(declare-fun o96 () Float32)

(declare-fun o97 () Float32)

(declare-fun o98 () Float32)

(declare-fun o99 () Float32)

(declare-fun o100 () Float32)

(declare-fun o101 () Float32)

(declare-fun o102 () Float32)

(declare-fun o103 () Float32)

(declare-fun o104 () Float32)

(declare-fun o105 () Float32)

(declare-fun o106 () Float32)

(declare-fun o107 () Float32)

(declare-fun o108 () Float32)

(declare-fun integral_fbx1 () Float32)

(declare-fun integral_fby1 () Float32)

(declare-fun integral_fbz1 () Float32)

(declare-fun recip_norm1 () Float32)

(declare-fun norm_ax1 () Float32)

(declare-fun norm_ay1 () Float32)

(declare-fun norm_az1 () Float32)

(declare-fun half_ex1 () Float32)

(declare-fun half_ey () Float32)

(declare-fun half_ez () Float32)

(declare-fun rad_gx1 () Float32)

(declare-fun rad_gy1 () Float32)

(declare-fun rad_gz1 () Float32)

(declare-fun half_vx1 () Float32)

(declare-fun half_vy1 () Float32)

(declare-fun half_vz1 () Float32)

(declare-fun qa () Float32)

(declare-fun qb () Float32)

(declare-fun qc () Float32)

(declare-fun recip_norm2 () Float32)

(declare-fun norm_ax2 () Float32)

(declare-fun norm_ay2 () Float32)

(declare-fun norm_az2 () Float32)

(declare-fun half_ex2 () Float32)

(declare-fun half_ey1 () Float32)

(declare-fun half_ez1 () Float32)

(declare-fun integral_fbx2 () Float32)

(declare-fun integral_fby2 () Float32)

(declare-fun integral_fbz2 () Float32)

(declare-fun rad_gx2 () Float32)

(declare-fun rad_gy2 () Float32)

(declare-fun rad_gz2 () Float32)

(declare-fun integral_fbx3 () Float32)

(declare-fun integral_fby3 () Float32)

(declare-fun integral_fbz3 () Float32)

(declare-fun rad_gx3 () Float32)

(declare-fun rad_gy3 () Float32)

(declare-fun rad_gz3 () Float32)

(declare-fun rad_gx4 () Float32)

(declare-fun rad_gy4 () Float32)

(declare-fun rad_gz4 () Float32)

(declare-fun q0_tmp () Float32)

(declare-fun q1_tmp () Float32)

(declare-fun q2_tmp () Float32)

(declare-fun q3_tmp () Float32)

(declare-fun recip_norm3 () Float32)

(declare-fun q01 () Float32)

(declare-fun q11 () Float32)

(declare-fun q21 () Float32)

;; H
  (assert (in_range2 gx))

;; H
  (assert (in_range2 gy))

;; H
  (assert (in_range2 gz))

;; H
  (assert (in_range3 ax))

;; H
  (assert (in_range3 ay))

;; H
  (assert (in_range3 az))

;; H
  (assert (in_range6 dt))

;; H
  (assert (in_range8 q0))

;; H
  (assert (in_range8 q1))

;; H
  (assert (in_range8 q2))

;; H
  (assert (in_range8 q3))

;; H
  (assert (not (or (fp.isInfinite two_kp) (fp.isNaN two_kp))))

;; H
  (assert (not (or (fp.isInfinite two_ki) (fp.isNaN two_ki))))

;; H
  (assert (not (or (fp.isInfinite integral_fbx) (fp.isNaN integral_fbx))))

;; H
  (assert (not (or (fp.isInfinite integral_fby) (fp.isNaN integral_fby))))

;; H
  (assert (not (or (fp.isInfinite integral_fbz) (fp.isNaN integral_fbz))))

;; H
  (assert (in_range7 beta))

;; H
  (assert (= gx c3b))

;; H
  (assert (in_range2 c3b))

;; H
  (assert (= gy c4b))

;; H
  (assert (in_range2 c4b))

;; H
  (assert (= gz c5b))

;; H
  (assert (in_range2 c5b))

;; H
  (assert (= ax c6b))

;; H
  (assert (in_range3 c6b))

;; H
  (assert (= ay c7b))

;; H
  (assert (in_range3 c7b))

;; H
  (assert (= az c8b))

;; H
  (assert (in_range3 c8b))

;; H
  (assert (= dt c9b))

;; H
  (assert (in_range6 c9b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite recip_norm) (fp.isNaN recip_norm)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range3 norm_ax)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range3 norm_ay)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range3 norm_az)))

;; H
  (assert
  (= rad_gx1 (fp.div RNE (fp.mul RNE c3b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (not (or (fp.isInfinite rad_gx1) (fp.isNaN rad_gx1))))

;; H
  (assert
  (= rad_gy1 (fp.div RNE (fp.mul RNE c4b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (not (or (fp.isInfinite rad_gy1) (fp.isNaN rad_gy1))))

;; H
  (assert
  (= rad_gz1 (fp.div RNE (fp.mul RNE c5b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (not (or (fp.isInfinite rad_gz1) (fp.isNaN rad_gz1))))

;; H
  (assert (= half_vx1 (fp.sub RNE (fp.mul RNE q1 q3) (fp.mul RNE q0 q2))))

;; H
  (assert (not (or (fp.isInfinite half_vx1) (fp.isNaN half_vx1))))

;; H
  (assert (= half_vy1 (fp.add RNE (fp.mul RNE q0 q1) (fp.mul RNE q2 q3))))

;; H
  (assert (not (or (fp.isInfinite half_vy1) (fp.isNaN half_vy1))))

;; H
  (assert
  (= half_vz1 (fp.add RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp #b0 #b01111110 #b00000000000000000000000)) (fp.mul RNE
  q3 q3))))

;; H
  (assert (not (or (fp.isInfinite half_vz1) (fp.isNaN half_vz1))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite half_ex) (fp.isNaN half_ex)))))

;; H
  (assert
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))

(declare-fun abstr1 () Float32)

;; H
  (assert
  (and (= o abstr1)
  (and (not (or (fp.isInfinite o) (fp.isNaN o)))
  (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) o)
  (fp.lt o (fp #b0 #b11000010 #b01011010111100011101100))))))

;; H
  (assert (= recip_norm2 o))

;; H
  (assert
  (and (= o1 (fp.mul RNE c6b recip_norm2))
  (not (or (fp.isInfinite (fp.mul RNE c6b recip_norm2)) (fp.isNaN (fp.mul RNE
  c6b recip_norm2))))))

(declare-fun abstr2 () Float32)

;; H
  (assert
  (and (= o2 abstr2)
  (and (not (or (fp.isInfinite o2) (fp.isNaN o2)))
  (ite (fp.lt o1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o2 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o1)
  (fp.eq o2 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o2
  o1))))))

;; H
  (assert (and (= o3 o2) (not (or (fp.isInfinite o2) (fp.isNaN o2)))))

;; H
  (assert (= norm_ax2 o3))

;; H
  (assert
  (and (= o4 (fp.mul RNE c7b recip_norm2))
  (not (or (fp.isInfinite (fp.mul RNE c7b recip_norm2)) (fp.isNaN (fp.mul RNE
  c7b recip_norm2))))))

(declare-fun abstr3 () Float32)

;; H
  (assert
  (and (= o5 abstr3)
  (and (not (or (fp.isInfinite o5) (fp.isNaN o5)))
  (ite (fp.lt o4 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o5 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o4)
  (fp.eq o5 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o5
  o4))))))

;; H
  (assert (and (= o6 o5) (not (or (fp.isInfinite o5) (fp.isNaN o5)))))

;; H
  (assert (= norm_ay2 o6))

;; H
  (assert
  (and (= o7 (fp.mul RNE c8b recip_norm2))
  (not (or (fp.isInfinite (fp.mul RNE c8b recip_norm2)) (fp.isNaN (fp.mul RNE
  c8b recip_norm2))))))

(declare-fun abstr4 () Float32)

;; H
  (assert
  (and (= o8 abstr4)
  (and (not (or (fp.isInfinite o8) (fp.isNaN o8)))
  (ite (fp.lt o7 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o8 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o7)
  (fp.eq o8 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o8
  o7))))))

;; H
  (assert (and (= o9 o8) (not (or (fp.isInfinite o8) (fp.isNaN o8)))))

;; H
  (assert (= norm_az2 o9))

;; H
  (assert
  (and (= o10 (fp.mul RNE norm_az2 half_vy1))
  (not (or (fp.isInfinite (fp.mul RNE norm_az2 half_vy1)) (fp.isNaN (fp.mul RNE
  norm_az2 half_vy1))))))

;; H
  (assert
  (and (= o11 (fp.mul RNE norm_ay2 half_vz1))
  (not (or (fp.isInfinite (fp.mul RNE norm_ay2 half_vz1)) (fp.isNaN (fp.mul RNE
  norm_ay2 half_vz1))))))

;; H
  (assert (= o12 (fp.sub RNE o11 o10)))

;; H
  (assert (and (= o13 o12) (not (or (fp.isInfinite o12) (fp.isNaN o12)))))

;; H
  (assert (= half_ex2 o13))

;; H
  (assert
  (and (= o14 (fp.mul RNE norm_ax2 half_vz1))
  (not (or (fp.isInfinite (fp.mul RNE norm_ax2 half_vz1)) (fp.isNaN (fp.mul RNE
  norm_ax2 half_vz1))))))

;; H
  (assert
  (and (= o15 (fp.mul RNE norm_az2 half_vx1))
  (not (or (fp.isInfinite (fp.mul RNE norm_az2 half_vx1)) (fp.isNaN (fp.mul RNE
  norm_az2 half_vx1))))))

;; H
  (assert (= o16 (fp.sub RNE o15 o14)))

;; H
  (assert (and (= o17 o16) (not (or (fp.isInfinite o16) (fp.isNaN o16)))))

;; H
  (assert
  (and (= o18 (fp.mul RNE norm_ay2 half_vx1))
  (not (or (fp.isInfinite (fp.mul RNE norm_ay2 half_vx1)) (fp.isNaN (fp.mul RNE
  norm_ay2 half_vx1))))))

;; H
  (assert
  (and (= o19 (fp.mul RNE norm_ax2 half_vy1))
  (not (or (fp.isInfinite (fp.mul RNE norm_ax2 half_vy1)) (fp.isNaN (fp.mul RNE
  norm_ax2 half_vy1))))))

;; H
  (assert (= o20 (fp.sub RNE o19 o18)))

;; H
  (assert (and (= o21 o20) (not (or (fp.isInfinite o20) (fp.isNaN o20)))))

;; H
  (assert (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))

;; H
  (assert
  (and (= o22 (fp.mul RNE two_ki half_ex2))
  (not (or (fp.isInfinite (fp.mul RNE two_ki half_ex2)) (fp.isNaN (fp.mul RNE
  two_ki half_ex2))))))

;; H
  (assert (= o23 (fp.mul RNE o22 c9b)))

(assert
;; WP_parameter_def
 ;; File "i-cexten.ads", line 59, characters 0-0
  (not (not (or (fp.isInfinite o23) (fp.isNaN o23)))))
(check-sat)
(exit)
