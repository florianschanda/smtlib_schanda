;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 75)))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 75)) (in_range1 temp___expr_136)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 75)))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 75)) (in_range2 temp___expr_142)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun r6b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun the_count () Int)

(declare-fun random_index () Int)

(declare-fun number () Int)

(declare-fun index () Int)

(declare-fun temp () Int)

(declare-fun temp___196 () Int)

(declare-fun o () Int)

(declare-fun random_index1 () Int)

(declare-fun temp1 () Int)

(declare-fun result () Int)

(declare-fun number1 () Int)

(declare-fun number2 () Int)

(declare-fun number3 () Int)

(declare-fun number4 () Int)

(declare-fun number5 () Int)

(declare-fun number6 () Int)

(declare-fun result1 () Int)

(declare-fun index1 () Int)

(declare-fun random_index2 () Int)

(declare-fun index2 () Int)

(declare-fun temp2 () Int)

(declare-fun result2 () Int)

(declare-fun random_index3 () Int)

(declare-fun result3 () Int)

(declare-fun temp3 () Int)

(declare-fun random_index4 () Int)

(declare-fun index3 () Int)

(declare-fun temp4 () Int)

(declare-fun random_index5 () Int)

(declare-fun index4 () Int)

(declare-fun temp5 () Int)

(declare-fun the_count1 () Int)

(declare-fun the_count2 () Int)

(declare-fun random_index6 () Int)

(declare-fun number7 () Int)

(declare-fun index5 () Int)

(declare-fun temp6 () Int)

;; H
  (assert (in_range1 the_count))

;; H
  (assert (=> (<= 1 75) (in_range2 random_index)))

;; H
  (assert (= result number))

;; H
  (assert (= number1 1))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 75)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number2 number3)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number4 number2)))

;; H
  (assert (=> (and (<= 1 number1) (<= number1 75)) (= number6 number4)))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75))) (= number1 number5)))

;; H
  (assert
  (=> (not (and (<= 1 number1) (<= number1 75))) (= number6 number1)))

;; H
  (assert (= result1 index))

;; H
  (assert (= index1 1))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= temp___196 random_index)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75))
  (and (=> (<= 1 75) (in_range2 random_index2))
  (and (<= 1 index2) (<= index2 75)))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result2 random_index2)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 o)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= random_index3 r6b)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (in_range2 r6b)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (=> (<= 1 75) (in_range2 temp2))))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= result3 temp2)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index2 75)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp4 temp3)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index3 index2)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= random_index4 random_index3)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= temp5 temp4)))

;; H
  (assert (=> (and (<= 1 index1) (<= index1 75)) (= index4 index3)))

;; H
  (assert
  (=> (and (<= 1 index1) (<= index1 75)) (= random_index5 random_index4)))

;; H
  (assert (=> (not (and (<= 1 index1) (<= index1 75))) (= temp5 temp1)))

;; H
  (assert (=> (not (and (<= 1 index1) (<= index1 75))) (= index4 index1)))

;; H
  (assert
  (=> (not (and (<= 1 index1) (<= index1 75)))
  (= random_index5 random_index1)))

;; H
  (assert (= the_count1 75))

;; H
  (assert (= temp6 temp5))

;; H
  (assert (= index5 index4))

;; H
  (assert (= number7 number6))

;; H
  (assert (= random_index6 random_index5))

;; H
  (assert (= the_count2 the_count1))

(assert
;; WP_parameter_def
 ;; File "bingo_basket.adb", line 15, characters 0-0
  (not false))
(check-sat)
(exit)
