;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const r1 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r2 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const pack__add__result Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const result Float32)

(declare-const pack__add__result1 Float32)

(declare-const pack__add__result2 Float32)

(declare-const pack__add__result3 Float32)

(declare-const pack__add__result4 Float32)

(declare-const pack__add__result5 Float32)

;; H
  (assert (fp.isFinite32 r1))

;; H
  (assert (fp.isFinite32 r2))

;; H
  (assert
  (and (fp.lt r1 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (fp.lt r2 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (fp.lt (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  r1) (fp.lt (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) r2)))))

;; H
  (assert (= pack__add__result1 pack__add__result2))

;; H
  (assert (= pack__add__result3 pack__add__result1))

;; H
  (assert (and (= o (fp.add RNE r1 r2)) (fp.isFinite32 (fp.add RNE r1 r2))))

;; H
  (assert (= pack__add__result1 o))

;; H
  (assert (= pack__add__result5 pack__add__result3))

(assert
;; WP_parameter_def
 ;; File "/home/florian/adacore/spark2014/testsuite/gnatprove/tests/K720-019__floats/gnatprove/pack.mlw", line 2609, characters 5-8
  (not (fp.isFinite32 (fp.add RNE r1 r2))))
(check-sat)
(exit)
