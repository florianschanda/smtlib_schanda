;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool)
  (temp___do_typ_inv_157 Bool)) Bool (=>
                                     (or (= temp___is_init_154 true)
                                     (<= 0 100)) (in_range temp___expr_158)))

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_172 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                     (in_range1 temp___expr_172)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun dynamic_invariant3 ((temp___expr_186 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (or (= temp___is_init_182 true)
                                     (<= 0 100)) (in_range2 temp___expr_186)))

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant4 ((temp___expr_200 Float32)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (or (= temp___is_init_196 true)
                                     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                     (in_range3 temp___expr_200)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const nb_of_fp Int)

(declare-const nb_of_pp Int)

(declare-const delta_time Float32)

(declare-const time Float32)

(declare-const nb_of_fp1 Int)

(declare-const nb_of_pp1 Int)

(declare-const delta_time1 Float32)

(declare-const time1 Float32)

(declare-const result Int)

(declare-const nb_of_fp2 Int)

(declare-const result1 Int)

(declare-const nb_of_pp2 Int)

(declare-const result2 Float32)

(declare-const delta_time2 Float32)

(declare-const result3 Float32)

(declare-const time2 Float32)

(declare-const time3 Float32)

(declare-const result4 Int)

(declare-const nb_of_fp3 Int)

(declare-const result5 Int)

(declare-const nb_of_pp3 Int)

(declare-const result6 Float32)

(declare-const delta_time3 Float32)

(declare-const result7 Float32)

(declare-const time4 Float32)

;; H
  (assert (= nb_of_fp2 2))

;; H
  (assert (in_range nb_of_fp2))

;; H
  (assert (= nb_of_pp2 46))

;; H
  (assert (in_range nb_of_pp2))

;; H
  (assert (= delta_time2 (fp #b0 #b00000000 #b10011111111111111111110)))

;; H
  (assert (in_range1 delta_time2))

;; H
  (assert (= time2 (fp #b0 #b00000101 #b11110000000000000000001)))

;; H
  (assert (fp.isFinite32 time2))

;; H
  (assert
  (and (=> (< 0 nb_of_fp2) (fp.leq time2 time3)) (fp.isFinite32 time3)))

;; H
  (assert (= result4 nb_of_fp1))

;; H
  (assert (= nb_of_fp3 2))

;; H
  (assert (in_range2 nb_of_fp3))

;; H
  (assert (= result5 nb_of_pp1))

;; H
  (assert (= nb_of_pp3 46))

;; H
  (assert (in_range2 nb_of_pp3))

;; H
  (assert (= result6 delta_time1))

;; H
  (assert (= delta_time3 (fp #b0 #b00000000 #b10011111111111111111110)))

;; H
  (assert (in_range3 delta_time3))

;; H
  (assert (= result7 time1))

;; H
  (assert (= time4 (fp #b0 #b00000101 #b11110000000000000000001)))

;; H
  (assert (fp.isFinite32 time4))

(assert
;; WP_parameter_def
 ;; File "call_sample2.adb", line 4, characters 0-0
  (not (< 0 nb_of_pp3)))
(check-sat)
(exit)
