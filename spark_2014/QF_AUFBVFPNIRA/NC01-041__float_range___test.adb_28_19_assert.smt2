;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            abstr (- (- 65536 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr1 (_ BitVec 16))

(declare-const abstr2 (_ BitVec 16))

(declare-const abstr3 (_ BitVec 16))

(declare-const abstr4 (_ BitVec 16))

(declare-const abstr5 (_ BitVec 16))

(define-fun nth_bv ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000100 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000100 #b00000000000000000000000)))))

(define-fun dynamic_invariant ((temp___expr_147 Float32)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000100 #b00000000000000000000000)) (fp #b0 #b10000100 #b00000000000000000000000)))
                                      (in_range1 temp___expr_147)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const value Float32)

(declare-const value1 Float32)

(declare-const value2 Float32)

(declare-const value3 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000100 #b00000000000000000000000)) (fp #b0 #b10000100 #b00000000000000000000000))
  (in_range1 value)))

;; H
  (assert (in_range1 value1))

;; H
  (assert
  (and (fp.leq (fp.neg (fp #b0 #b01110001 #b10100011011011100010111))
  value1) (fp.leq value1 (fp #b0 #b01110001 #b10100011011011100010111))))

;; H
  (assert (in_range1 value2))

;; H
  (assert
  (and (fp.leq (fp.neg (fp #b0 #b01110101 #b10001001001101110100110))
  value2)
  (fp.leq value2 (fp.neg (fp #b0 #b01110101 #b00000110001001001101111)))))

;; H
  (assert (in_range1 value3))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 7, characters 0-0
  (not (fp.leq (fp #b0 #b10000011 #b11111111111110111110100) value3)))
(check-sat)
(exit)
