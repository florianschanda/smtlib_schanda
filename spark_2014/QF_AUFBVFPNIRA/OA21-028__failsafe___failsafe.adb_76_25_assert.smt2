;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr (_ BitVec 8))

(declare-const abstr1 (_ BitVec 8))

(declare-const abstr2 (_ BitVec 8))

(declare-const abstr3 (_ BitVec 8))

(declare-const abstr4 (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr5 Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr6 Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_202 Float32)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (fp.isFinite32 temp___expr_202)))

(declare-const abstr7 (_ BitVec 8))

(declare-const abstr8 (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr7)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule abstr8 abstr7)) (in_range2
                                      temp___expr_208)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-const abstr9 (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr9)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(define-fun dynamic_invariant3 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule abstr8 abstr9)) (in_range3
                                      temp___expr_214)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr9)))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(define-fun dynamic_invariant4 ((temp___expr_244 (_ BitVec 8))
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)) Bool (=>
                                      (or (= temp___is_init_241 true)
                                      (bvule abstr8 abstr9)) (in_range4
                                      temp___expr_244)))

(declare-const battery_level Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const current_time (_ BitVec 8))

(declare-const counter (_ BitVec 8))

(declare-const o (_ BitVec 8))

(declare-const o1 (_ BitVec 8))

(declare-const o2 Bool)

(declare-const o3 Bool)

(declare-const o4 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const temp___280 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const temp___282 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const temp___279 (_ BitVec 8))

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const o12 Float32)

(declare-const result (_ BitVec 8))

(declare-const current_time1 (_ BitVec 8))

(declare-const result1 (_ BitVec 8))

(declare-const counter1 (_ BitVec 8))

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

(declare-const result7 (_ BitVec 8))

(declare-const counter2 (_ BitVec 8))

(declare-const current_time2 (_ BitVec 8))

(declare-const counter3 (_ BitVec 8))

(declare-const current_time3 (_ BitVec 8))

(declare-const counter4 (_ BitVec 8))

;; H
  (assert (in_range4 counter))

;; H
  (assert (in_range2 current_time))

;; H
  (assert (fp.isFinite32 battery_level))

;; H
  (assert (= counter c))

(declare-const abstr10 (_ BitVec 8))

;; H
  (assert
  (=> (bvule (bvsub abstr9 current_time) abstr10)
  (= o (bvsub (bvadd current_time abstr10) abstr9))))

;; H
  (assert
  (=> (not (bvule (bvsub abstr9 current_time) abstr10))
  (= o (bvadd current_time abstr10))))

;; H
  (assert (= current_time1 o))

;; H
  (assert
  (fp.lt battery_level (fp #b0 #b01111100 #b10011001100110011001101)))

;; H
  (assert
  (and (= o1 (bv_min (bvadd counter abstr10) abstr9)) (in_range4
  (bv_min (bvadd counter abstr10) abstr9))))

;; H
  (assert (= counter1 o1))

;; H
  (assert (=> (= c abstr9) (= counter1 abstr9)))

(assert
;; WP_parameter_def
 ;; File "failsafe.adb", line 31, characters 0-0
  (not false))
(check-sat)
(exit)
