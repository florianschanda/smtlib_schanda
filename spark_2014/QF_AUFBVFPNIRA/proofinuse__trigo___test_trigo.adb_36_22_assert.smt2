;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-fun f () Float32)

(declare-fun dummy () Float32)

(declare-fun temp___519 () Float32)

(declare-fun temp___518 () Float32)

(declare-fun o () Float32)

(declare-fun temp___523 () Float32)

(declare-fun temp___522 () Float32)

(declare-fun o1 () Float32)

(declare-fun temp___527 () Float32)

(declare-fun temp___526 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun dummy1 () Float32)

(declare-fun result () Float32)

(declare-fun f1 () Float32)

(declare-fun f2 () Float32)

(declare-fun dummy2 () Float32)

(declare-fun result1 () Float32)

(declare-fun dummy3 () Float32)

(declare-fun result2 () Float32)

(declare-fun f3 () Float32)

(declare-fun f4 () Float32)

(declare-fun dummy4 () Float32)

(declare-fun f5 () Float32)

(declare-fun dummy5 () Float32)

(declare-fun f6 () Float32)

(declare-fun dummy6 () Float32)

(declare-fun f7 () Float32)

(declare-fun dummy7 () Float32)

(declare-fun result3 () Float32)

(declare-fun f8 () Float32)

(declare-fun f9 () Float32)

(declare-fun dummy8 () Float32)

(declare-fun result4 () Float32)

(declare-fun dummy9 () Float32)

(declare-fun result5 () Float32)

(declare-fun f10 () Float32)

(declare-fun f11 () Float32)

(declare-fun dummy10 () Float32)

(declare-fun f12 () Float32)

(declare-fun dummy11 () Float32)

(declare-fun f13 () Float32)

(declare-fun dummy12 () Float32)

(declare-fun f14 () Float32)

(declare-fun dummy13 () Float32)

(declare-fun result6 () Float32)

(declare-fun f15 () Float32)

(declare-fun f16 () Float32)

(declare-fun dummy14 () Float32)

(declare-fun dummy15 () Float32)

(declare-fun f17 () Float32)

(declare-fun f18 () Float32)

(declare-fun dummy16 () Float32)

(declare-fun f19 () Float32)

(declare-fun dummy17 () Float32)

(declare-fun f20 () Float32)

(declare-fun f21 () Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite f) (fp.isNaN f)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite dummy) (fp.isNaN dummy)))))

;; H
  (assert (= result f))

;; H
  (assert (= f1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___519 dummy)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___518 f1)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite f2) (fp.isNaN f2))))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite dummy2) (fp.isNaN dummy2)))))
  (fp.leq f2 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun abstr1 () Float32)

(declare-fun abstr2 () Float32)

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (= o abstr2)
  (and (not (or (fp.isInfinite o) (fp.isNaN o)))
  (fp.lt (fp.abs (fp.sub RNE o abstr1)) (fp #b0 #b01101100 #b10010010101001110011100))))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy2 result1)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= dummy3 o)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= result2 f2)))

(declare-fun abstr3 () Float32)

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= f3 abstr3)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (not (fp.leq f3 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy3 dummy4)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f3 f4)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy5 dummy3)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f5 f3)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy7 dummy5)))

;; H
  (assert
  (=> (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)) (= f7 f5)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f1 f6)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= dummy7 dummy1)))

;; H
  (assert
  (=> (not (fp.leq f1 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f7 f1)))

;; H
  (assert (= result3 f6))

;; H
  (assert (= f8 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___523 dummy6)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= temp___522 f8)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite f9) (fp.isNaN f9))))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite dummy8) (fp.isNaN dummy8)))))
  (fp.leq f9 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun abstr4 () Float32)

(declare-fun abstr5 () Float32)

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (and (= o1 abstr5)
  (and (not (or (fp.isInfinite o1) (fp.isNaN o1)))
  (fp.lt (fp.abs (fp.sub RNE o1 abstr4)) (fp #b0 #b01101100 #b10010010101001110011100))))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy8 result4)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy9 o1)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= result5 f9)))

(declare-fun abstr6 () Float32)

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= f10 abstr6)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (not (fp.leq f10 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy9 dummy10)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f10 f11)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy11 dummy9)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f12 f10)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000))
  (= dummy13 dummy11)))

;; H
  (assert
  (=> (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)) (= f14 f12)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f8 f13)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= dummy13 dummy7)))

;; H
  (assert
  (=> (not (fp.leq f8 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= f14 f8)))

;; H
  (assert (= result6 f13))

;; H
  (assert (= f15 (fp.neg (fp #b0 #b01111110 #b00000000000000000000000))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= temp___527 dummy12)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= temp___526 f15)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite f16) (fp.isNaN f16))))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite dummy14) (fp.isNaN dummy14)))))
  (fp.leq f16 (fp #b0 #b01111110 #b00000000000000000000000)))))

(declare-fun abstr7 () Float32)

(declare-fun abstr8 () Float32)

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (and (= o2 abstr8)
  (and (not (or (fp.isInfinite o2) (fp.isNaN o2)))
  (fp.lt (fp.abs (fp.sub RNE o2 abstr7)) (fp #b0 #b01110001 #b10100011011011100010111))))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy15 o2)))

(declare-fun abstr9 () Float32)

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= f17 abstr9)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (not (fp.leq f17 (fp #b0 #b01111110 #b00000000000000000000000)))))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy16 dummy15)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)) (= f18 f17)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000))
  (= dummy17 dummy16)))

;; H
  (assert
  (=> (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)) (= f19 f18)))

;; H
  (assert
  (=> (not (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)))
  (= dummy17 dummy13)))

;; H
  (assert
  (=> (not (fp.leq f15 (fp #b0 #b01111110 #b00000000000000000000000)))
  (= f19 f15)))

;; H
  (assert (= f20 (fp.neg (fp #b0 #b01111110 #b00000000000000000000000))))

;; H
  (assert (fp.leq f20 (fp #b0 #b01111110 #b00000000000000000000000)))

;; H
  (assert
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite f21) (fp.isNaN f21))))
  (fp.leq f21 (fp #b0 #b01111110 #b00000000000000000000000))))

(declare-fun abstr10 () Float32)

(declare-fun abstr11 () Float32)

(declare-fun abstr12 () Float32)

(assert
;; WP_parameter_def
 ;; File "test_trigo.adb", line 5, characters 0-0
  (not
  (fp.lt (fp.abs (fp.sub RNE abstr10 (fp.div RNE abstr11 abstr12))) (fp #b0 #b01110101 #b00000110001001001101111))))
(check-sat)
(exit)
