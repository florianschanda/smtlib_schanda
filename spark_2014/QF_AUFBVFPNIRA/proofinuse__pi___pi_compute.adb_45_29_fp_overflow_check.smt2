;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const t1 Float32)

(declare-const t2 Float32)

(declare-const t3 Float32)

(declare-const t4 Float32)

(declare-const t5 Float32)

(declare-const t6 Float32)

(declare-const t7 Float32)

(declare-const t8 Float32)

(declare-const t9 Float32)

(declare-const t10 Float32)

(declare-const res Float32)

(declare-const pi_compute__leibniz_float__result Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const result Float32)

(declare-const t11 Float32)

(declare-const result1 Float32)

(declare-const t21 Float32)

(declare-const result2 Float32)

(declare-const t31 Float32)

(declare-const result3 Float32)

(declare-const t41 Float32)

(declare-const result4 Float32)

(declare-const t51 Float32)

(declare-const result5 Float32)

(declare-const t61 Float32)

(declare-const result6 Float32)

(declare-const t71 Float32)

(declare-const result7 Float32)

(declare-const t81 Float32)

(declare-const result8 Float32)

(declare-const t91 Float32)

(declare-const t101 Float32)

(declare-const res1 Float32)

(declare-const pi_compute__leibniz_float__result1 Float32)

(declare-const pi_compute__leibniz_float__result2 Float32)

(declare-const t12 Float32)

(declare-const t22 Float32)

(declare-const t32 Float32)

(declare-const t42 Float32)

(declare-const t52 Float32)

(declare-const t62 Float32)

(declare-const t72 Float32)

(declare-const t82 Float32)

(declare-const t92 Float32)

(declare-const t102 Float32)

(declare-const res2 Float32)

(declare-const pi_compute__leibniz_float__result3 Float32)

;; H
  (assert (= t11 (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (fp.isFinite32 t11))

;; H
  (assert (= t21 (fp #b0 #b01111101 #b01010101010101010101011)))

;; H
  (assert (fp.isFinite32 t21))

;; H
  (assert (= t31 (fp #b0 #b01111100 #b10011001100110011001101)))

;; H
  (assert (fp.isFinite32 t31))

;; H
  (assert (= t41 (fp #b0 #b01111100 #b00100100100100100100101)))

;; H
  (assert (fp.isFinite32 t41))

;; H
  (assert (= t51 (fp #b0 #b01111011 #b11000111000111000111001)))

;; H
  (assert (fp.isFinite32 t51))

;; H
  (assert (= t61 (fp #b0 #b01111011 #b01110100010111010001100)))

;; H
  (assert (fp.isFinite32 t61))

;; H
  (assert (= t71 (fp #b0 #b01111011 #b00111011000100111011001)))

;; H
  (assert (fp.isFinite32 t71))

;; H
  (assert (= t81 (fp #b0 #b01111011 #b00010001000100010001001)))

;; H
  (assert (fp.isFinite32 t81))

;; H
  (assert (= t91 (fp #b0 #b01111010 #b11100001111000011110001)))

;; H
  (assert (fp.isFinite32 t91))

;; H
  (assert (= t101 (fp #b0 #b01111010 #b10101111001010000110110)))

;; H
  (assert (fp.isFinite32 t101))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 res)))

;; H
  (assert
  (and (= o (fp.sub RNE t11 t21)) (fp.isFinite32 (fp.sub RNE t11 t21))))

;; H
  (assert (= o1 (fp.add RNE o t31)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 o1)))
(check-sat)
(exit)
