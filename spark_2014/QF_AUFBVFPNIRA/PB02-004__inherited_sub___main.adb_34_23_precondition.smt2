;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const rec__my_rec__e__first__bit Int)

(declare-const rec__my_rec__e__last__bit Int)

(declare-const rec__my_rec__e__position Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit rec__my_rec__e__last__bit))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position))

(declare-const rec__my_rec__x__first__bit Int)

(declare-const rec__my_rec__x__last__bit Int)

(declare-const rec__my_rec__x__position Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit rec__my_rec__x__last__bit))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position))

(declare-const rec__my_rec__y__first__bit Int)

(declare-const rec__my_rec__y__last__bit Int)

(declare-const rec__my_rec__y__position Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit rec__my_rec__y__last__bit))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position))

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const rec__my_rec__e__first__bit1 Int)

(declare-const rec__my_rec__e__last__bit1 Int)

(declare-const rec__my_rec__e__position1 Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit1))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit1 rec__my_rec__e__last__bit1))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position1))

(declare-const rec__my_rec__x__first__bit1 Int)

(declare-const rec__my_rec__x__last__bit1 Int)

(declare-const rec__my_rec__x__position1 Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit1))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit1 rec__my_rec__x__last__bit1))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position1))

(declare-const rec__my_rec__y__first__bit1 Int)

(declare-const rec__my_rec__y__last__bit1 Int)

(declare-const rec__my_rec__y__position1 Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit1))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit1 rec__my_rec__y__last__bit1))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position1))

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const rec__sub_rec__z__first__bit Int)

(declare-const rec__sub_rec__z__last__bit Int)

(declare-const rec__sub_rec__z__position Int)

;; rec__sub_rec__z__first__bit_axiom
  (assert (<= 0 rec__sub_rec__z__first__bit))

;; rec__sub_rec__z__last__bit_axiom
  (assert (< rec__sub_rec__z__first__bit rec__sub_rec__z__last__bit))

;; rec__sub_rec__z__position_axiom
  (assert (<= 0 rec__sub_rec__z__position))

(declare-const rec__sub_rec__plop__first__bit Int)

(declare-const rec__sub_rec__plop__last__bit Int)

(declare-const rec__sub_rec__plop__position Int)

;; rec__sub_rec__plop__first__bit_axiom
  (assert (<= 0 rec__sub_rec__plop__first__bit))

;; rec__sub_rec__plop__last__bit_axiom
  (assert (< rec__sub_rec__plop__first__bit rec__sub_rec__plop__last__bit))

;; rec__sub_rec__plop__position_axiom
  (assert (<= 0 rec__sub_rec__plop__position))

(define-fun dynamic_invariant ((temp___expr_161 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=>
                                     (or (= temp___is_init_157 true)
                                     (<= 0 2)) (in_range temp___expr_161)))

(declare-const value__size3 Int)

(declare-const value__alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-const rec__my_rec__e__first__bit2 Int)

(declare-const rec__my_rec__e__last__bit2 Int)

(declare-const rec__my_rec__e__position2 Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit2))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit2 rec__my_rec__e__last__bit2))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position2))

(declare-const rec__my_rec__x__first__bit2 Int)

(declare-const rec__my_rec__x__last__bit2 Int)

(declare-const rec__my_rec__x__position2 Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit2))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit2 rec__my_rec__x__last__bit2))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position2))

(declare-const rec__my_rec__y__first__bit2 Int)

(declare-const rec__my_rec__y__last__bit2 Int)

(declare-const rec__my_rec__y__position2 Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit2))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit2 rec__my_rec__y__last__bit2))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position2))

(declare-const value__size4 Int)

(declare-const value__alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

(declare-const rec__sub_rec_ok__z__first__bit Int)

(declare-const rec__sub_rec_ok__z__last__bit Int)

(declare-const rec__sub_rec_ok__z__position Int)

;; rec__sub_rec_ok__z__first__bit_axiom
  (assert (<= 0 rec__sub_rec_ok__z__first__bit))

;; rec__sub_rec_ok__z__last__bit_axiom
  (assert (< rec__sub_rec_ok__z__first__bit rec__sub_rec_ok__z__last__bit))

;; rec__sub_rec_ok__z__position_axiom
  (assert (<= 0 rec__sub_rec_ok__z__position))

(declare-const rec__sub_rec_ok__plop__first__bit Int)

(declare-const rec__sub_rec_ok__plop__last__bit Int)

(declare-const rec__sub_rec_ok__plop__position Int)

;; rec__sub_rec_ok__plop__first__bit_axiom
  (assert (<= 0 rec__sub_rec_ok__plop__first__bit))

;; rec__sub_rec_ok__plop__last__bit_axiom
  (assert
  (< rec__sub_rec_ok__plop__first__bit rec__sub_rec_ok__plop__last__bit))

;; rec__sub_rec_ok__plop__position_axiom
  (assert (<= 0 rec__sub_rec_ok__plop__position))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-const value__size5 Int)

(declare-const value__component__size Int)

(declare-const value__alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

(declare-const value__size6 Int)

(declare-const value__alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

(declare-const rec__sub_arr__f__first__bit Int)

(declare-const rec__sub_arr__f__last__bit Int)

(declare-const rec__sub_arr__f__position Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit rec__sub_arr__f__last__bit))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position))

(declare-const rec__sub_arr__l__first__bit Int)

(declare-const rec__sub_arr__l__last__bit Int)

(declare-const rec__sub_arr__l__position Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit rec__sub_arr__l__last__bit))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position))

(declare-const rec__sub_arr__content__first__bit Int)

(declare-const rec__sub_arr__content__last__bit Int)

(declare-const rec__sub_arr__content__position Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit rec__sub_arr__content__last__bit))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range3
                                    temp___expr_39)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun dynamic_invariant4 ((temp___expr_168 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)
  (temp___do_typ_inv_167 Bool)) Bool (=>
                                     (or (= temp___is_init_164 true)
                                     (<= 0 1)) (in_range2 temp___expr_168)))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 23, characters 0-0
  (not true))
(check-sat)
(exit)
