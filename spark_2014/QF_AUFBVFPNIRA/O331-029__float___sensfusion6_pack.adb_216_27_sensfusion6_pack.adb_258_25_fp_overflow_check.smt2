;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10001010 #b01110111000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000)))
                                      (in_range1 temp___expr_140)))

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range2 temp___expr_146)))

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000011 #b00000000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                      (in_range3 temp___expr_158)))

(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant4 ((temp___expr_1288 Float32)
  (temp___is_init_1285 Bool) (temp___skip_constant_1286 Bool)
  (temp___do_toplevel_1287 Bool)) Bool (=>
                                       (or (= temp___is_init_1285 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (in_range4 temp___expr_1288)))

(define-fun in_range5 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant5 ((temp___expr_1294 Float32)
  (temp___is_init_1291 Bool) (temp___skip_constant_1292 Bool)
  (temp___do_toplevel_1293 Bool)) Bool (=>
                                       (or (= temp___is_init_1291 true)
                                       (fp.leq (fp #b0 #b01110101 #b00000110001001001101111) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range5 temp___expr_1294)))

(define-fun in_range6 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant6 ((temp___expr_1300 Float32)
  (temp___is_init_1297 Bool) (temp___skip_constant_1298 Bool)
  (temp___do_toplevel_1299 Bool)) Bool (=>
                                       (or (= temp___is_init_1297 true)
                                       (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range6 temp___expr_1300)))

(define-fun in_range7 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant7 ((temp___expr_1330 Float32)
  (temp___is_init_1327 Bool) (temp___skip_constant_1328 Bool)
  (temp___do_toplevel_1329 Bool)) Bool (=>
                                       (or (= temp___is_init_1327 true)
                                       (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range7 temp___expr_1330)))

(declare-const gx Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const gy Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const gz Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ax Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const ay Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const az Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const dt Float32)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const c3b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const c4b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const c5b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const c6b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const c7b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const c8b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const c9b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const c11b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const c12b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const c13b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const c14b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const c15b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const c16b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const c17b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

(declare-const attr__ATTRIBUTE_ADDRESS51 Int)

(declare-const attr__ATTRIBUTE_ADDRESS52 Int)

(declare-const attr__ATTRIBUTE_ADDRESS53 Int)

(declare-const attr__ATTRIBUTE_ADDRESS54 Int)

(declare-const attr__ATTRIBUTE_ADDRESS55 Int)

(declare-const attr__ATTRIBUTE_ADDRESS56 Int)

(declare-const attr__ATTRIBUTE_ADDRESS57 Int)

(declare-const attr__ATTRIBUTE_ADDRESS58 Int)

(declare-const attr__ATTRIBUTE_ADDRESS59 Int)

(declare-const attr__ATTRIBUTE_ADDRESS60 Int)

(declare-const attr__ATTRIBUTE_ADDRESS61 Int)

(declare-const attr__ATTRIBUTE_ADDRESS62 Int)

(declare-const attr__ATTRIBUTE_ADDRESS63 Int)

(declare-const attr__ATTRIBUTE_ADDRESS64 Int)

(declare-const attr__ATTRIBUTE_ADDRESS65 Int)

(declare-const attr__ATTRIBUTE_ADDRESS66 Int)

(declare-const attr__ATTRIBUTE_ADDRESS67 Int)

(declare-const attr__ATTRIBUTE_ADDRESS68 Int)

(declare-const attr__ATTRIBUTE_ADDRESS69 Int)

(declare-const attr__ATTRIBUTE_ADDRESS70 Int)

(declare-const attr__ATTRIBUTE_ADDRESS71 Int)

(declare-const attr__ATTRIBUTE_ADDRESS72 Int)

(declare-const attr__ATTRIBUTE_ADDRESS73 Int)

(declare-const attr__ATTRIBUTE_ADDRESS74 Int)

(declare-const attr__ATTRIBUTE_ADDRESS75 Int)

(declare-const attr__ATTRIBUTE_ADDRESS76 Int)

(declare-const attr__ATTRIBUTE_ADDRESS77 Int)

(declare-const attr__ATTRIBUTE_ADDRESS78 Int)

(declare-const attr__ATTRIBUTE_ADDRESS79 Int)

(declare-const attr__ATTRIBUTE_ADDRESS80 Int)

(declare-const attr__ATTRIBUTE_ADDRESS81 Int)

(declare-const attr__ATTRIBUTE_ADDRESS82 Int)

(declare-const attr__ATTRIBUTE_ADDRESS83 Int)

(declare-const q0 Float32)

(declare-const q1 Float32)

(declare-const q2 Float32)

(declare-const q3 Float32)

(declare-const two_kp Float32)

(declare-const two_ki Float32)

(declare-const integral_fbx Float32)

(declare-const integral_fby Float32)

(declare-const integral_fbz Float32)

(declare-const beta Float32)

(declare-const recip_norm Float32)

(declare-const norm_ax Float32)

(declare-const norm_ay Float32)

(declare-const norm_az Float32)

(declare-const rad_gx Float32)

(declare-const rad_gy Float32)

(declare-const rad_gz Float32)

(declare-const half_vx Float32)

(declare-const half_vy Float32)

(declare-const half_vz Float32)

(declare-const half_ex Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Float32)

(declare-const o33 Float32)

(declare-const o34 Float32)

(declare-const o35 Float32)

(declare-const o36 Float32)

(declare-const o37 Float32)

(declare-const o38 Float32)

(declare-const o39 Float32)

(declare-const o40 Float32)

(declare-const o41 Float32)

(declare-const o42 Float32)

(declare-const o43 Float32)

(declare-const o44 Float32)

(declare-const o45 Float32)

(declare-const o46 Float32)

(declare-const o47 Float32)

(declare-const o48 Float32)

(declare-const o49 Float32)

(declare-const o50 Float32)

(declare-const o51 Float32)

(declare-const o52 Float32)

(declare-const o53 Float32)

(declare-const o54 Float32)

(declare-const o55 Float32)

(declare-const o56 Float32)

(declare-const o57 Float32)

(declare-const o58 Float32)

(declare-const o59 Float32)

(declare-const o60 Float32)

(declare-const o61 Float32)

(declare-const o62 Float32)

(declare-const o63 Float32)

(declare-const o64 Float32)

(declare-const o65 Float32)

(declare-const o66 Float32)

(declare-const o67 Float32)

(declare-const o68 Float32)

(declare-const o69 Float32)

(declare-const o70 Float32)

(declare-const o71 Float32)

(declare-const o72 Float32)

(declare-const o73 Float32)

(declare-const o74 Float32)

(declare-const o75 Float32)

(declare-const o76 Float32)

(declare-const o77 Float32)

(declare-const o78 Float32)

(declare-const o79 Float32)

(declare-const o80 Float32)

(declare-const o81 Float32)

(declare-const o82 Float32)

(declare-const o83 Float32)

(declare-const o84 Float32)

(declare-const o85 Float32)

(declare-const o86 Float32)

(declare-const o87 Float32)

(declare-const o88 Float32)

(declare-const o89 Float32)

(declare-const o90 Float32)

(declare-const o91 Float32)

(declare-const o92 Float32)

(declare-const o93 Float32)

(declare-const o94 Float32)

(declare-const o95 Float32)

(declare-const o96 Float32)

(declare-const o97 Float32)

(declare-const o98 Float32)

(declare-const o99 Float32)

(declare-const o100 Float32)

(declare-const o101 Float32)

(declare-const o102 Float32)

(declare-const o103 Float32)

(declare-const o104 Float32)

(declare-const o105 Float32)

(declare-const o106 Float32)

(declare-const o107 Float32)

(declare-const o108 Float32)

(declare-const integral_fbx1 Float32)

(declare-const integral_fby1 Float32)

(declare-const integral_fbz1 Float32)

(declare-const recip_norm1 Float32)

(declare-const norm_ax1 Float32)

(declare-const norm_ay1 Float32)

(declare-const norm_az1 Float32)

(declare-const half_ex1 Float32)

(declare-const half_ey Float32)

(declare-const half_ez Float32)

(declare-const rad_gx1 Float32)

(declare-const rad_gy1 Float32)

(declare-const rad_gz1 Float32)

(declare-const half_vx1 Float32)

(declare-const half_vy1 Float32)

(declare-const half_vz1 Float32)

(declare-const qa Float32)

(declare-const qb Float32)

(declare-const qc Float32)

(declare-const recip_norm2 Float32)

(declare-const norm_ax2 Float32)

(declare-const norm_ay2 Float32)

(declare-const norm_az2 Float32)

(declare-const half_ex2 Float32)

(declare-const half_ey1 Float32)

(declare-const half_ez1 Float32)

(declare-const integral_fbx2 Float32)

(declare-const integral_fby2 Float32)

(declare-const integral_fbz2 Float32)

(declare-const rad_gx2 Float32)

(declare-const rad_gy2 Float32)

(declare-const rad_gz2 Float32)

(declare-const integral_fbx3 Float32)

(declare-const integral_fby3 Float32)

(declare-const integral_fbz3 Float32)

(declare-const rad_gx3 Float32)

(declare-const rad_gy3 Float32)

(declare-const rad_gz3 Float32)

(declare-const rad_gx4 Float32)

(declare-const rad_gy4 Float32)

(declare-const rad_gz4 Float32)

(declare-const q0_tmp Float32)

(declare-const q1_tmp Float32)

(declare-const q2_tmp Float32)

(declare-const q3_tmp Float32)

(declare-const recip_norm3 Float32)

(declare-const q01 Float32)

(declare-const q11 Float32)

(declare-const q21 Float32)

;; H
  (assert (in_range1 gx))

;; H
  (assert (in_range1 gy))

;; H
  (assert (in_range1 gz))

;; H
  (assert (in_range2 ax))

;; H
  (assert (in_range2 ay))

;; H
  (assert (in_range2 az))

;; H
  (assert (in_range5 dt))

;; H
  (assert (in_range7 q0))

;; H
  (assert (in_range7 q1))

;; H
  (assert (in_range7 q2))

;; H
  (assert (in_range7 q3))

;; H
  (assert (fp.isFinite32 two_kp))

;; H
  (assert (fp.isFinite32 two_ki))

;; H
  (assert (fp.isFinite32 integral_fbx))

;; H
  (assert (fp.isFinite32 integral_fby))

;; H
  (assert (fp.isFinite32 integral_fbz))

;; H
  (assert (in_range6 beta))

;; H
  (assert (= gx c3b))

;; H
  (assert (in_range1 c3b))

;; H
  (assert (= gy c4b))

;; H
  (assert (in_range1 c4b))

;; H
  (assert (= gz c5b))

;; H
  (assert (in_range1 c5b))

;; H
  (assert (= ax c6b))

;; H
  (assert (in_range2 c6b))

;; H
  (assert (= ay c7b))

;; H
  (assert (in_range2 c7b))

;; H
  (assert (= az c8b))

;; H
  (assert (in_range2 c8b))

;; H
  (assert (= dt c9b))

;; H
  (assert (in_range5 c9b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 recip_norm)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_ax)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_ay)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000))
  (in_range2 norm_az)))

;; H
  (assert
  (= rad_gx1 (fp.div RNE (fp.mul RNE c3b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gx1))

;; H
  (assert
  (= rad_gy1 (fp.div RNE (fp.mul RNE c4b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gy1))

;; H
  (assert
  (= rad_gz1 (fp.div RNE (fp.mul RNE c5b (fp #b0 #b10000000 #b10010010000111111011011)) (fp #b0 #b10000110 #b01101000000000000000000))))

;; H
  (assert (fp.isFinite32 rad_gz1))

;; H
  (assert (= half_vx1 (fp.sub RNE (fp.mul RNE q1 q3) (fp.mul RNE q0 q2))))

;; H
  (assert (fp.isFinite32 half_vx1))

;; H
  (assert (= half_vy1 (fp.add RNE (fp.mul RNE q0 q1) (fp.mul RNE q2 q3))))

;; H
  (assert (fp.isFinite32 half_vy1))

;; H
  (assert
  (= half_vz1 (fp.add RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp #b0 #b01111110 #b00000000000000000000000)) (fp.mul RNE
  q3 q3))))

;; H
  (assert (fp.isFinite32 half_vz1))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 half_ex)))

;; H
  (assert
  (not
  (and (fp.eq c6b (fp #b0 #b00000000 #b00000000000000000000000))
  (and (fp.eq c7b (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq c8b (fp #b0 #b00000000 #b00000000000000000000000))))))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o abstr)
  (and (fp.isFinite32 o)
  (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) o)
  (fp.lt o (fp #b0 #b11000010 #b01011010111100011101100))))))

;; H
  (assert (= recip_norm2 o))

;; H
  (assert
  (and (= o1 (fp.mul RNE c6b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c6b recip_norm2))))

(declare-const abstr1 Float32)

;; H
  (assert
  (and (= o2 abstr1)
  (and (fp.isFinite32 o2)
  (ite (fp.lt o1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o2 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o1)
  (fp.eq o2 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o2
  o1))))))

;; H
  (assert (and (= o3 o2) (fp.isFinite32 o2)))

;; H
  (assert (= norm_ax2 o3))

;; H
  (assert
  (and (= o4 (fp.mul RNE c7b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c7b recip_norm2))))

(declare-const abstr2 Float32)

;; H
  (assert
  (and (= o5 abstr2)
  (and (fp.isFinite32 o5)
  (ite (fp.lt o4 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o5 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o4)
  (fp.eq o5 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o5
  o4))))))

;; H
  (assert (and (= o6 o5) (fp.isFinite32 o5)))

;; H
  (assert (= norm_ay2 o6))

;; H
  (assert
  (and (= o7 (fp.mul RNE c8b recip_norm2))
  (fp.isFinite32 (fp.mul RNE c8b recip_norm2))))

(declare-const abstr3 Float32)

;; H
  (assert
  (and (= o8 abstr3)
  (and (fp.isFinite32 o8)
  (ite (fp.lt o7 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o8 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) o7)
  (fp.eq o8 (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o8
  o7))))))

;; H
  (assert (and (= o9 o8) (fp.isFinite32 o8)))

;; H
  (assert (= norm_az2 o9))

;; H
  (assert
  (and (= o10 (fp.mul RNE norm_az2 half_vy1))
  (fp.isFinite32 (fp.mul RNE norm_az2 half_vy1))))

;; H
  (assert
  (and (= o11 (fp.mul RNE norm_ay2 half_vz1))
  (fp.isFinite32 (fp.mul RNE norm_ay2 half_vz1))))

;; H
  (assert (= o12 (fp.sub RNE o11 o10)))

;; H
  (assert (and (= o13 o12) (fp.isFinite32 o12)))

;; H
  (assert (= half_ex2 o13))

;; H
  (assert
  (and (= o14 (fp.mul RNE norm_ax2 half_vz1))
  (fp.isFinite32 (fp.mul RNE norm_ax2 half_vz1))))

;; H
  (assert
  (and (= o15 (fp.mul RNE norm_az2 half_vx1))
  (fp.isFinite32 (fp.mul RNE norm_az2 half_vx1))))

;; H
  (assert (= o16 (fp.sub RNE o15 o14)))

;; H
  (assert (and (= o17 o16) (fp.isFinite32 o16)))

;; H
  (assert
  (and (= o18 (fp.mul RNE norm_ay2 half_vx1))
  (fp.isFinite32 (fp.mul RNE norm_ay2 half_vx1))))

;; H
  (assert
  (and (= o19 (fp.mul RNE norm_ax2 half_vy1))
  (fp.isFinite32 (fp.mul RNE norm_ax2 half_vy1))))

;; H
  (assert (= o20 (fp.sub RNE o19 o18)))

;; H
  (assert (and (= o21 o20) (fp.isFinite32 o20)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o22 (fp.mul RNE two_ki half_ex2))
  (fp.isFinite32 (fp.mul RNE two_ki half_ex2)))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o23 (fp.mul RNE o22 c9b))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o24 o23) (fp.isFinite32 o23))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o25 (fp.add RNE integral_fbx o24))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o26 o25) (fp.isFinite32 o25))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fbx2 o26)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o28 (fp.mul RNE o27 c9b))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o29 o28) (fp.isFinite32 o28))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o30 (fp.add RNE integral_fby o29))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o31 o30) (fp.isFinite32 o30))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fby2 o31)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o33 (fp.mul RNE o32 c9b))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o34 o33) (fp.isFinite32 o33))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= o35 (fp.add RNE integral_fbz o34))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o36 o35) (fp.isFinite32 o35))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= integral_fbz2 o36)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o37 (fp.add RNE rad_gx1 integral_fbx2))
  (fp.isFinite32 (fp.add RNE rad_gx1 integral_fbx2)))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gx2 o37)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o38 (fp.add RNE rad_gy1 integral_fby2))
  (fp.isFinite32 (fp.add RNE rad_gy1 integral_fby2)))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gy2 o38)))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (and (= o39 (fp.add RNE rad_gz1 integral_fbz2))
  (fp.isFinite32 (fp.add RNE rad_gz1 integral_fbz2)))))

;; H
  (assert
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki)
  (= rad_gz2 o39)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbx3 (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fby3 (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbz3 (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gz2 rad_gz1)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gy2 rad_gy1)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= rad_gx2 rad_gx1)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbz2 integral_fbz3)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fby2 integral_fby3)))

;; H
  (assert
  (=> (not (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) two_ki))
  (= integral_fbx2 integral_fbx3)))

;; H
  (assert
  (and (= o40 (fp.mul RNE two_kp half_ex2))
  (fp.isFinite32 (fp.mul RNE two_kp half_ex2))))

;; H
  (assert (= o41 (fp.add RNE rad_gx2 o40)))

(assert
;; WP_parameter_def
 ;; File "i-cexten.ads", line 59, characters 0-0
  (not (fp.isFinite32 o41)))
(check-sat)
(exit)
