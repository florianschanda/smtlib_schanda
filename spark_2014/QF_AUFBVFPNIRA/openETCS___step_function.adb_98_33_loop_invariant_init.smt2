;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10)) (in_range2 temp___expr_136)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun step_function__delimiter_entry__delimiter__first__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__last__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__position () Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-fun step_function__delimiter_entry__value__first__bit () Int)

(declare-fun step_function__delimiter_entry__value__last__bit () Int)

(declare-fun step_function__delimiter_entry__value__position () Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun value__size1 () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun value__size2 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun step_function__step_function_t__number_of_delimiters__first__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__last__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__position () Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-fun step_function__step_function_t__step__first__bit () Int)

(declare-fun step_function__step_function_t__step__last__bit () Int)

(declare-fun step_function__step_function_t__step__position () Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun dynamic_invariant2 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_142)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun im () Int)

(declare-fun scan_sfun1 () Bool)

(declare-fun scan_sfun2 () Bool)

(declare-fun temp___389 () Bool)

(declare-fun temp___386 () Bool)

(declare-fun temp___385 () Int)

(declare-fun temp___384 () Int)

(declare-fun temp___383 () Int)

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun i3 () Int)

(declare-fun j () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun i4 () Int)

(declare-fun j1 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun i5 () Int)

(declare-fun j2 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun i6 () Int)

(declare-fun j3 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun i7 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Float32)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Float32)

(declare-fun o16 () Float32)

(declare-fun o17 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Float32)

(declare-fun o20 () Float32)

(declare-fun o21 () Float32)

(declare-fun o22 () Float32)

(declare-fun o23 () Float32)

(declare-fun o24 () Float32)

(declare-fun o25 () Float32)

(declare-fun o26 () Float32)

(declare-fun o27 () Float32)

(declare-fun o28 () Float32)

(declare-fun o29 () Float32)

(declare-fun o30 () Float32)

(declare-fun o31 () Float32)

(declare-fun o32 () Int)

(declare-fun i8 () Int)

(declare-fun j4 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () Int)

(declare-fun i9 () Int)

(declare-fun j5 () Int)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () Bool)

(declare-fun i10 () Int)

(declare-fun o38 () Int)

(declare-fun o39 () Int)

(declare-fun o40 () Float32)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Float32)

(declare-fun o44 () Float32)

(declare-fun o45 () Bool)

(declare-fun i11 () Int)

(declare-fun i21 () Int)

(declare-fun im1 () Int)

(declare-fun scan_sfun11 () Bool)

(declare-fun scan_sfun21 () Bool)

(declare-fun i12 () Int)

(declare-fun i22 () Int)

(declare-fun im2 () Int)

(declare-fun scan_sfun12 () Bool)

(declare-fun scan_sfun22 () Bool)

(declare-fun i13 () Int)

(declare-fun scan_sfun13 () Bool)

(declare-fun i23 () Int)

(declare-fun scan_sfun23 () Bool)

(declare-fun i14 () Int)

(declare-fun scan_sfun14 () Bool)

(declare-fun i24 () Int)

(declare-fun scan_sfun24 () Bool)

(declare-fun i15 () Int)

(declare-fun scan_sfun15 () Bool)

(declare-fun i25 () Int)

(declare-fun scan_sfun25 () Bool)

(declare-fun im3 () Int)

(declare-fun im4 () Int)

(declare-fun i16 () Int)

(declare-fun i26 () Int)

(declare-fun im5 () Int)

(declare-fun scan_sfun16 () Bool)

(declare-fun scan_sfun26 () Bool)

(declare-fun i17 () Int)

(declare-fun i27 () Int)

(declare-fun im6 () Int)

(declare-fun scan_sfun17 () Bool)

(declare-fun scan_sfun27 () Bool)

(declare-fun i18 () Int)

(declare-fun i28 () Int)

(declare-fun im7 () Int)

(declare-fun scan_sfun18 () Bool)

(declare-fun scan_sfun28 () Bool)

;; H
  (assert (= i11 0))

;; H
  (assert (in_range2 i11))

;; H
  (assert (= i21 0))

;; H
  (assert (in_range2 i21))

;; H
  (assert (= im1 0))

;; H
  (assert (in_range2 im1))

;; H
  (assert (= scan_sfun11 (of_int 1)))

;; H
  (assert (= scan_sfun21 (of_int 1)))

(assert
;; WP_parameter_def
 ;; File "step_function.ads", line 89, characters 0-0
  (not
  (or (and (and (= i11 0) (= i21 0)) (= im1 0))
  (and
  (and (or (< 0 i11) (not (= scan_sfun11 true)))
  (or (< 0 i21) (not (= scan_sfun21 true)))) (< 0 im1)))))
(check-sat)
(exit)
