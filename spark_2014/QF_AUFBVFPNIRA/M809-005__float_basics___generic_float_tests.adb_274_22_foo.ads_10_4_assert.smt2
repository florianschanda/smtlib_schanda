;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_137 Float32)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_137) (fp.isNaN temp___expr_137)))))

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun a () Float32)

(declare-fun b () Float32)

(declare-fun c () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun result () Float32)

(declare-fun a1 () Float32)

(declare-fun result1 () Float32)

(declare-fun b1 () Float32)

(declare-fun result2 () Float32)

(declare-fun c1 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite a) (fp.isNaN a)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite b) (fp.isNaN b)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite c) (fp.isNaN c)))))

;; H
  (assert
  (and (= o (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  x))
  (not (or (fp.isInfinite (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  x)) (fp.isNaN (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  x))))))

;; H
  (assert (= result a))

;; H
  (assert (= a1 o))

;; H
  (assert
  (and (= o1 (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  a1))
  (not (or (fp.isInfinite (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  a1)) (fp.isNaN (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  a1))))))

;; H
  (assert (= result1 b))

;; H
  (assert (= b1 o1))

;; H
  (assert
  (and (= o2 (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  b1))
  (not (or (fp.isInfinite (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  b1)) (fp.isNaN (fp.div RNE (fp #b0 #b01111111 #b00000000000000000000000)
  b1))))))

;; H
  (assert (= result2 c))

;; H
  (assert (= c1 o2))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.adb", line 255, characters 0-0
  (not (fp.eq a1 c1)))
(check-sat)
(exit)
