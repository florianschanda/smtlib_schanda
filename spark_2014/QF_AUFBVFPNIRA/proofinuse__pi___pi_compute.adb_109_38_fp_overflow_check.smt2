;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun t1 () Float32)

(declare-fun t2 () Float32)

(declare-fun t3 () Float32)

(declare-fun t4 () Float32)

(declare-fun t5 () Float32)

(declare-fun t6 () Float32)

(declare-fun t7 () Float32)

(declare-fun t8 () Float32)

(declare-fun t9 () Float32)

(declare-fun t10 () Float32)

(declare-fun a1 () Float32)

(declare-fun a2 () Float32)

(declare-fun a3 () Float32)

(declare-fun a4 () Float32)

(declare-fun a5 () Float32)

(declare-fun a6 () Float32)

(declare-fun a7 () Float32)

(declare-fun a8 () Float32)

(declare-fun a9 () Float32)

(declare-fun a10 () Float32)

(declare-fun num () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Float32)

(declare-fun o14 () Float32)

(declare-fun o15 () Float32)

(declare-fun o16 () Float32)

(declare-fun o17 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Float32)

(declare-fun o20 () Float32)

(declare-fun t11 () Float32)

(declare-fun t21 () Float32)

(declare-fun t31 () Float32)

(declare-fun t41 () Float32)

(declare-fun t51 () Float32)

(declare-fun t61 () Float32)

(declare-fun t71 () Float32)

(declare-fun t81 () Float32)

(declare-fun t91 () Float32)

(declare-fun t101 () Float32)

(declare-fun a11 () Float32)

(declare-fun a21 () Float32)

(declare-fun a31 () Float32)

(declare-fun a41 () Float32)

(declare-fun a51 () Float32)

(declare-fun a61 () Float32)

(declare-fun a71 () Float32)

(declare-fun a81 () Float32)

(declare-fun a91 () Float32)

(declare-fun a101 () Float32)

(declare-fun num1 () Float32)

(declare-fun den () Float32)

(declare-fun res () Float32)

(declare-fun pi_compute__shanks_float__result () Float32)

(declare-fun pi_compute__shanks_float__result1 () Float32)

(declare-fun t12 () Float32)

(declare-fun t22 () Float32)

(declare-fun t32 () Float32)

(declare-fun t42 () Float32)

(declare-fun t52 () Float32)

(declare-fun t62 () Float32)

(declare-fun t72 () Float32)

(declare-fun t82 () Float32)

(declare-fun t92 () Float32)

(declare-fun t102 () Float32)

(declare-fun a12 () Float32)

(declare-fun a22 () Float32)

(declare-fun a32 () Float32)

(declare-fun a42 () Float32)

(declare-fun a52 () Float32)

(declare-fun a62 () Float32)

(declare-fun a72 () Float32)

(declare-fun a82 () Float32)

(declare-fun a92 () Float32)

(declare-fun a102 () Float32)

(declare-fun num2 () Float32)

(declare-fun den1 () Float32)

(declare-fun res1 () Float32)

(declare-fun pi_compute__shanks_float__result2 () Float32)

;; H
  (assert (= t11 (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (not (or (fp.isInfinite t11) (fp.isNaN t11))))

;; H
  (assert (= t21 (fp #b0 #b01111101 #b01010101010101010101011)))

;; H
  (assert (not (or (fp.isInfinite t21) (fp.isNaN t21))))

;; H
  (assert (= t31 (fp #b0 #b01111100 #b10011001100110011001101)))

;; H
  (assert (not (or (fp.isInfinite t31) (fp.isNaN t31))))

;; H
  (assert (= t41 (fp #b0 #b01111100 #b00100100100100100100101)))

;; H
  (assert (not (or (fp.isInfinite t41) (fp.isNaN t41))))

;; H
  (assert (= t51 (fp #b0 #b01111011 #b11000111000111000111001)))

;; H
  (assert (not (or (fp.isInfinite t51) (fp.isNaN t51))))

;; H
  (assert (= t61 (fp #b0 #b01111011 #b01110100010111010001100)))

;; H
  (assert (not (or (fp.isInfinite t61) (fp.isNaN t61))))

;; H
  (assert (= t71 (fp #b0 #b01111011 #b00111011000100111011001)))

;; H
  (assert (not (or (fp.isInfinite t71) (fp.isNaN t71))))

;; H
  (assert (= t81 (fp #b0 #b01111011 #b00010001000100010001001)))

;; H
  (assert (not (or (fp.isInfinite t81) (fp.isNaN t81))))

;; H
  (assert (= t91 (fp #b0 #b01111010 #b11100001111000011110001)))

;; H
  (assert (not (or (fp.isInfinite t91) (fp.isNaN t91))))

;; H
  (assert (= t101 (fp #b0 #b01111010 #b10101111001010000110110)))

;; H
  (assert (not (or (fp.isInfinite t101) (fp.isNaN t101))))

;; H
  (assert (= a11 t11))

;; H
  (assert (not (or (fp.isInfinite a11) (fp.isNaN a11))))

;; H
  (assert
  (and (= o (fp.sub RNE a11 t21))
  (not (or (fp.isInfinite (fp.sub RNE a11 t21)) (fp.isNaN (fp.sub RNE
  a11 t21))))))

;; H
  (assert (= a21 o))

;; H
  (assert (not (or (fp.isInfinite a21) (fp.isNaN a21))))

;; H
  (assert
  (and (= o1 (fp.add RNE a21 t31))
  (not (or (fp.isInfinite (fp.add RNE a21 t31)) (fp.isNaN (fp.add RNE
  a21 t31))))))

;; H
  (assert (= a31 o1))

;; H
  (assert (not (or (fp.isInfinite a31) (fp.isNaN a31))))

;; H
  (assert
  (and (= o2 (fp.sub RNE a31 t41))
  (not (or (fp.isInfinite (fp.sub RNE a31 t41)) (fp.isNaN (fp.sub RNE
  a31 t41))))))

;; H
  (assert (= a41 o2))

;; H
  (assert (not (or (fp.isInfinite a41) (fp.isNaN a41))))

;; H
  (assert
  (and (= o3 (fp.add RNE a41 t51))
  (not (or (fp.isInfinite (fp.add RNE a41 t51)) (fp.isNaN (fp.add RNE
  a41 t51))))))

;; H
  (assert (= a51 o3))

;; H
  (assert (not (or (fp.isInfinite a51) (fp.isNaN a51))))

;; H
  (assert
  (and (= o4 (fp.sub RNE a51 t61))
  (not (or (fp.isInfinite (fp.sub RNE a51 t61)) (fp.isNaN (fp.sub RNE
  a51 t61))))))

;; H
  (assert (= a61 o4))

;; H
  (assert (not (or (fp.isInfinite a61) (fp.isNaN a61))))

;; H
  (assert
  (and (= o5 (fp.add RNE a61 t71))
  (not (or (fp.isInfinite (fp.add RNE a61 t71)) (fp.isNaN (fp.add RNE
  a61 t71))))))

;; H
  (assert (= a71 o5))

;; H
  (assert (not (or (fp.isInfinite a71) (fp.isNaN a71))))

;; H
  (assert
  (and (= o6 (fp.sub RNE a71 t81))
  (not (or (fp.isInfinite (fp.sub RNE a71 t81)) (fp.isNaN (fp.sub RNE
  a71 t81))))))

;; H
  (assert (= a81 o6))

;; H
  (assert (not (or (fp.isInfinite a81) (fp.isNaN a81))))

;; H
  (assert
  (and (= o7 (fp.add RNE a81 t91))
  (not (or (fp.isInfinite (fp.add RNE a81 t91)) (fp.isNaN (fp.add RNE
  a81 t91))))))

;; H
  (assert (= a91 o7))

;; H
  (assert (not (or (fp.isInfinite a91) (fp.isNaN a91))))

;; H
  (assert
  (and (= o8 (fp.sub RNE a91 t101))
  (not (or (fp.isInfinite (fp.sub RNE a91 t101)) (fp.isNaN (fp.sub RNE
  a91 t101))))))

;; H
  (assert (= a101 o8))

;; H
  (assert (not (or (fp.isInfinite a101) (fp.isNaN a101))))

;; H
  (assert
  (and (= o9 (fp.mul RNE a91 a91))
  (not (or (fp.isInfinite (fp.mul RNE a91 a91)) (fp.isNaN (fp.mul RNE
  a91 a91))))))

;; H
  (assert
  (and (= o10 (fp.mul RNE a101 a81))
  (not (or (fp.isInfinite (fp.mul RNE a101 a81)) (fp.isNaN (fp.mul RNE
  a101 a81))))))

;; H
  (assert (= o11 (fp.sub RNE o10 o9)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (not (or (fp.isInfinite o11) (fp.isNaN o11)))))
(check-sat)
(exit)
