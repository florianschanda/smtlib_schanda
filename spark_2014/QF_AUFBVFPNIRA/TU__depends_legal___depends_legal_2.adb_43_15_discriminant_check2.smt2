;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const depends_legal_2__dis_rec__d__first__bit Int)

(declare-const depends_legal_2__dis_rec__d__last__bit Int)

(declare-const depends_legal_2__dis_rec__d__position Int)

;; depends_legal_2__dis_rec__d__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__first__bit))

;; depends_legal_2__dis_rec__d__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__d__first__bit depends_legal_2__dis_rec__d__last__bit))

;; depends_legal_2__dis_rec__d__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__position))

(declare-const depends_legal_2__dis_rec__a__first__bit Int)

(declare-const depends_legal_2__dis_rec__a__last__bit Int)

(declare-const depends_legal_2__dis_rec__a__position Int)

;; depends_legal_2__dis_rec__a__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__first__bit))

;; depends_legal_2__dis_rec__a__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__a__first__bit depends_legal_2__dis_rec__a__last__bit))

;; depends_legal_2__dis_rec__a__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__position))

(declare-const depends_legal_2__dis_rec__b__first__bit Int)

(declare-const depends_legal_2__dis_rec__b__last__bit Int)

(declare-const depends_legal_2__dis_rec__b__position Int)

;; depends_legal_2__dis_rec__b__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__first__bit))

;; depends_legal_2__dis_rec__b__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__b__first__bit depends_legal_2__dis_rec__b__last__bit))

;; depends_legal_2__dis_rec__b__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__position))

(declare-const depends_legal_2__dis_rec__x__first__bit Int)

(declare-const depends_legal_2__dis_rec__x__last__bit Int)

(declare-const depends_legal_2__dis_rec__x__position Int)

;; depends_legal_2__dis_rec__x__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__first__bit))

;; depends_legal_2__dis_rec__x__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__x__first__bit depends_legal_2__dis_rec__x__last__bit))

;; depends_legal_2__dis_rec__x__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__position))

(declare-const depends_legal_2__dis_rec__y__first__bit Int)

(declare-const depends_legal_2__dis_rec__y__last__bit Int)

(declare-const depends_legal_2__dis_rec__y__position Int)

;; depends_legal_2__dis_rec__y__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__first__bit))

;; depends_legal_2__dis_rec__y__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__y__first__bit depends_legal_2__dis_rec__y__last__bit))

;; depends_legal_2__dis_rec__y__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__position))

(declare-const depends_legal_2__dis_rec__z__first__bit Int)

(declare-const depends_legal_2__dis_rec__z__last__bit Int)

(declare-const depends_legal_2__dis_rec__z__position Int)

;; depends_legal_2__dis_rec__z__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__first__bit))

;; depends_legal_2__dis_rec__z__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__z__first__bit depends_legal_2__dis_rec__z__last__bit))

;; depends_legal_2__dis_rec__z__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__position))

(declare-const rec1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const par1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r4b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const depends_legal_2__dis_rec__d__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__d__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__d__position1 Int)

;; depends_legal_2__dis_rec__d__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__first__bit1))

;; depends_legal_2__dis_rec__d__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__d__first__bit1 depends_legal_2__dis_rec__d__last__bit1))

;; depends_legal_2__dis_rec__d__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__position1))

(declare-const depends_legal_2__dis_rec__x__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__x__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__x__position1 Int)

;; depends_legal_2__dis_rec__x__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__first__bit1))

;; depends_legal_2__dis_rec__x__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__x__first__bit1 depends_legal_2__dis_rec__x__last__bit1))

;; depends_legal_2__dis_rec__x__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__position1))

(declare-const depends_legal_2__dis_rec__y__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__y__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__y__position1 Int)

;; depends_legal_2__dis_rec__y__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__first__bit1))

;; depends_legal_2__dis_rec__y__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__y__first__bit1 depends_legal_2__dis_rec__y__last__bit1))

;; depends_legal_2__dis_rec__y__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__position1))

(declare-const depends_legal_2__dis_rec__z__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__z__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__z__position1 Int)

;; depends_legal_2__dis_rec__z__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__first__bit1))

;; depends_legal_2__dis_rec__z__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__z__first__bit1 depends_legal_2__dis_rec__z__last__bit1))

;; depends_legal_2__dis_rec__z__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__position1))

(declare-const depends_legal_2__dis_rec__a__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__a__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__a__position1 Int)

;; depends_legal_2__dis_rec__a__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__first__bit1))

;; depends_legal_2__dis_rec__a__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__a__first__bit1 depends_legal_2__dis_rec__a__last__bit1))

;; depends_legal_2__dis_rec__a__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__position1))

(declare-const depends_legal_2__dis_rec__b__first__bit1 Int)

(declare-const depends_legal_2__dis_rec__b__last__bit1 Int)

(declare-const depends_legal_2__dis_rec__b__position1 Int)

;; depends_legal_2__dis_rec__b__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__first__bit1))

;; depends_legal_2__dis_rec__b__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__b__first__bit1 depends_legal_2__dis_rec__b__last__bit1))

;; depends_legal_2__dis_rec__b__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__position1))

(declare-const r7b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const depends_legal_2__dis_rec__d__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__d__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__d__position2 Int)

;; depends_legal_2__dis_rec__d__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__first__bit2))

;; depends_legal_2__dis_rec__d__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__d__first__bit2 depends_legal_2__dis_rec__d__last__bit2))

;; depends_legal_2__dis_rec__d__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__d__position2))

(declare-const depends_legal_2__dis_rec__a__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__a__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__a__position2 Int)

;; depends_legal_2__dis_rec__a__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__first__bit2))

;; depends_legal_2__dis_rec__a__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__a__first__bit2 depends_legal_2__dis_rec__a__last__bit2))

;; depends_legal_2__dis_rec__a__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__a__position2))

(declare-const depends_legal_2__dis_rec__b__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__b__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__b__position2 Int)

;; depends_legal_2__dis_rec__b__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__first__bit2))

;; depends_legal_2__dis_rec__b__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__b__first__bit2 depends_legal_2__dis_rec__b__last__bit2))

;; depends_legal_2__dis_rec__b__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__b__position2))

(declare-const depends_legal_2__dis_rec__x__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__x__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__x__position2 Int)

;; depends_legal_2__dis_rec__x__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__first__bit2))

;; depends_legal_2__dis_rec__x__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__x__first__bit2 depends_legal_2__dis_rec__x__last__bit2))

;; depends_legal_2__dis_rec__x__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__x__position2))

(declare-const depends_legal_2__dis_rec__y__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__y__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__y__position2 Int)

;; depends_legal_2__dis_rec__y__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__first__bit2))

;; depends_legal_2__dis_rec__y__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__y__first__bit2 depends_legal_2__dis_rec__y__last__bit2))

;; depends_legal_2__dis_rec__y__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__y__position2))

(declare-const depends_legal_2__dis_rec__z__first__bit2 Int)

(declare-const depends_legal_2__dis_rec__z__last__bit2 Int)

(declare-const depends_legal_2__dis_rec__z__position2 Int)

;; depends_legal_2__dis_rec__z__first__bit_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__first__bit2))

;; depends_legal_2__dis_rec__z__last__bit_axiom
  (assert
  (< depends_legal_2__dis_rec__z__first__bit2 depends_legal_2__dis_rec__z__last__bit2))

;; depends_legal_2__dis_rec__z__position_axiom
  (assert (<= 0 depends_legal_2__dis_rec__z__position2))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const rec1__split_discrs Bool)

(declare-const par1__split_discrs Bool)

(declare-const usq_ Bool)

(declare-const usq_1 Bool)

(declare-const temp___190 Bool)

(declare-const temp___1901 Bool)

(declare-const temp___185 Bool)

(declare-const temp___1851 Bool)

(declare-const usq_2 Bool)

(declare-const usq_3 Bool)

;; H
  (assert (= rec1__attr__constrained false))

;; H
  (assert (= par1__split_discrs true))

;; H
  (assert (= par1__split_discrs r4b))

;; H
  (assert (= par1__attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "depends_legal_2.adb", line 14, characters 0-0
  (not (= (distinct 1 0) par1__split_discrs)))
(check-sat)
(exit)
