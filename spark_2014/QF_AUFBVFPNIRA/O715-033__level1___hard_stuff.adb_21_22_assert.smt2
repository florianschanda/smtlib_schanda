;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun copy () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun x () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun y () Int)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun x1 () Float32)

(declare-fun result () Float32)

(declare-fun x2 () Float32)

(declare-fun result1 () Float32)

(declare-fun x3 () Float32)

(declare-fun result2 () Float32)

(declare-fun x4 () Float32)

(declare-fun result3 () Bool)

(declare-fun result4 () Float32)

(declare-fun x5 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (= o (fp.add RNE x x))
  (not (or (fp.isInfinite (fp.add RNE x x)) (fp.isNaN (fp.add RNE x x)))))))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000))) (= x2
  o)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.leq (fp.neg (fp #b0 #b10000000 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b10000000 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))) (= x2
  x)))

;; H
  (assert
  (=>
  (not
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x) (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))) (= x2
  x1)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (= o1 (fp.mul RNE x2 (fp #b0 #b10000000 #b00000000000000000000000)))
  (not (or (fp.isInfinite (fp.mul RNE x2 (fp #b0 #b10000000 #b00000000000000000000000))) (fp.isNaN (fp.mul RNE
  x2 (fp #b0 #b10000000 #b00000000000000000000000))))))))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= x2 result1)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))) (= x3
  o1)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.leq (fp.neg (fp #b0 #b10000000 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b10000000 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x2) (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000)))) (=
  x3 x2)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (= o2 (fp.mul RNE x3 x3))
  (not (or (fp.isInfinite (fp.mul RNE x3 x3)) (fp.isNaN (fp.mul RNE x3
  x3)))))))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000)))
  (= x3 result2)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))) (= x4
  o2)))

;; H
  (assert
  (=>
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x4) (fp.leq x4 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; H
  (assert
  (=>
  (not
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000))
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000)))) (=
  x4 x3)))

;; H
  (assert (and (=> (= result3 true) true) (=> false (= result3 true))))

;; H
  (assert (= result3 true))

(assert
;; WP_parameter_def
 ;; File "hard_stuff.adb", line 1, characters 0-0
  (not (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x4)))
(check-sat)
(exit)
