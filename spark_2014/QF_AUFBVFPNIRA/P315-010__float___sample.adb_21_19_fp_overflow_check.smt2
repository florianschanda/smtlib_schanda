;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_135)))

(define-fun in_range3 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10001000 #b11110100000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b11110100000000000000000)))
                                      (in_range3 temp___expr_141)))

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_147 Float32)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                      (in_range4 temp___expr_147)))

(declare-fun nb_of_fp () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun nb_of_pp () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun delta_time () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun in_range5 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111110)))))

(define-fun dynamic_invariant4 ((temp___expr_159 Float32)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool (=>
                                      (or (= temp___is_init_156 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111110)))
                                      (in_range5 temp___expr_159)))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun in_range6 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000110 #b10010000000000000000000)))))

(define-fun dynamic_invariant5 ((temp___expr_165 Float32)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool (=>
                                      (or (= temp___is_init_162 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b10010000000000000000000)))
                                      (in_range6 temp___expr_165)))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun in_range7 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000100 #b10010000000000000000000)))))

(define-fun dynamic_invariant6 ((temp___expr_171 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000100 #b10010000000000000000000)))
                                      (in_range7 temp___expr_171)))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun time () Float32)

(declare-fun d () Float32)

(declare-fun t_fp () Float32)

(declare-fun t_pp () Float32)

(declare-fun tmp1 () Float32)

(declare-fun tmp2 () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun result () Float32)

(declare-fun d1 () Float32)

(declare-fun result1 () Float32)

(declare-fun t_fp1 () Float32)

(declare-fun result2 () Float32)

(declare-fun tmp11 () Float32)

(declare-fun result3 () Float32)

(declare-fun t_pp1 () Float32)

(declare-fun result4 () Float32)

(declare-fun tmp21 () Float32)

(declare-fun result5 () Float32)

(declare-fun time1 () Float32)

(declare-fun time2 () Float32)

(declare-fun d2 () Float32)

(declare-fun t_fp2 () Float32)

(declare-fun t_pp2 () Float32)

(declare-fun tmp12 () Float32)

(declare-fun tmp22 () Float32)

(declare-fun time3 () Float32)

(declare-fun d3 () Float32)

(declare-fun t_fp3 () Float32)

(declare-fun t_pp3 () Float32)

(declare-fun tmp13 () Float32)

(declare-fun tmp23 () Float32)

;; H
  (assert (in_range2 nb_of_fp))

;; H
  (assert (in_range2 nb_of_pp))

;; H
  (assert (in_range4 delta_time))

;; H
  (assert (not (or (fp.isInfinite time) (fp.isNaN time))))

;; H
  (assert
  (and
  (and
  (and (< 0 nb_of_pp)
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) delta_time))
  (fp.leq (fp.mul RNE (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000) ((_ to_fp 8 24) RNE (to_real (+
  nb_of_fp nb_of_pp)))) delta_time) time))
  (fp.leq time (fp #b0 #b11111110 #b11111111111111111111110))))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10001000 #b11110100000000000000000))
  (in_range3 d)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111110))
  (in_range5 t_fp)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite t_pp) (fp.isNaN t_pp)))))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000110 #b10010000000000000000000))
  (in_range6 tmp1)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000100 #b10010000000000000000000))
  (in_range7 tmp2)))

;; H
  (assert
  (= d1 (fp.mul RNE ((_ to_fp 8 24) RNE (to_real (+ nb_of_fp nb_of_pp)))
  delta_time)))

;; H
  (assert
  (and
  (= o (fp.sub RNE time (fp.div RNE d1 (fp #b0 #b10000000 #b00000000000000000000000))))
  (not (or (fp.isInfinite (fp.sub RNE time (fp.div RNE d1 (fp #b0 #b10000000 #b00000000000000000000000)))) (fp.isNaN (fp.sub RNE
  time (fp.div RNE d1 (fp #b0 #b10000000 #b00000000000000000000000))))))))

;; H
  (assert (and (= o1 o) (not (or (fp.isInfinite o) (fp.isNaN o)))))

;; H
  (assert (= t_fp1 o1))

;; H
  (assert
  (= tmp11 (fp.mul RNE ((_ to_fp 8 24) RNE (to_real nb_of_fp)) delta_time)))

;; H
  (assert
  (and (= o2 (fp.add RNE t_fp1 tmp11))
  (not (or (fp.isInfinite (fp.add RNE t_fp1 tmp11)) (fp.isNaN (fp.add RNE
  t_fp1 tmp11))))))

;; H
  (assert (= t_pp1 o2))

;; H
  (assert
  (= tmp21 (fp.mul RNE (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000) ((_ to_fp 8 24) RNE (to_real
  nb_of_fp))) delta_time)))

(assert
;; WP_parameter_def
 ;; File "sample.ads", line 13, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.add RNE t_pp1 tmp21)) (fp.isNaN (fp.add RNE
  t_pp1 tmp21))))))
(check-sat)
(exit)
