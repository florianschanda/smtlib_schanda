;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun abstr () (_ BitVec 8))

(declare-fun abstr1 () (_ BitVec 8))

(declare-fun abstr2 () (_ BitVec 8))

(declare-fun abstr3 () (_ BitVec 8))

(declare-fun abstr4 () (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun abstr6 () (_ BitVec 16))

(declare-fun abstr7 () (_ BitVec 16))

(declare-fun abstr8 () (_ BitVec 16))

(declare-fun abstr9 () (_ BitVec 16))

(declare-fun abstr10 () (_ BitVec 16))

(define-fun nth_bv1 ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-fun abstr11 () Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr11)

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(define-fun dynamic_invariant ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 1 65536)) (in_range2
                                      temp___expr_204)))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun very_longs__very_long__length__first__bit () Int)

(declare-fun very_longs__very_long__length__last__bit () Int)

(declare-fun very_longs__very_long__length__position () Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position))

(declare-fun very_longs__very_long__long_digits__first__bit () Int)

(declare-fun very_longs__very_long__long_digits__last__bit () Int)

(declare-fun very_longs__very_long__long_digits__position () Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(define-fun dynamic_invariant1 ((temp___expr_312 (_ BitVec 16))
  (temp___is_init_309 Bool) (temp___skip_constant_310 Bool)
  (temp___do_toplevel_311 Bool)) Bool true)

(declare-fun last () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_invariant2 ((temp___expr_690 Int)
  (temp___is_init_687 Bool) (temp___skip_constant_688 Bool)
  (temp___do_toplevel_689 Bool)) Bool (=>
                                      (or (= temp___is_init_687 true)
                                      (<= 1 last)) (dynamic_property2 1
                                      last temp___expr_690)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-fun value__size2 () Int)

(declare-fun value__component__size1 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun value__size3 () Int)

(declare-fun value__alignment3 () Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-fun very_longs__very_long__length__first__bit1 () Int)

(declare-fun very_longs__very_long__length__last__bit1 () Int)

(declare-fun very_longs__very_long__length__position1 () Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit1))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit1 very_longs__very_long__length__last__bit1))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position1))

(declare-fun very_longs__very_long__long_digits__first__bit1 () Int)

(declare-fun very_longs__very_long__long_digits__last__bit1 () Int)

(declare-fun very_longs__very_long__long_digits__position1 () Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit1))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit1 very_longs__very_long__long_digits__last__bit1))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position1))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-fun value__size4 () Int)

(declare-fun value__component__size2 () Int)

(declare-fun value__alignment4 () Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

(declare-fun value__size5 () Int)

(declare-fun value__alignment5 () Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

(declare-fun very_longs__very_long__length__first__bit2 () Int)

(declare-fun very_longs__very_long__length__last__bit2 () Int)

(declare-fun very_longs__very_long__length__position2 () Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit2))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit2 very_longs__very_long__length__last__bit2))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position2))

(declare-fun very_longs__very_long__long_digits__first__bit2 () Int)

(declare-fun very_longs__very_long__long_digits__last__bit2 () Int)

(declare-fun very_longs__very_long__long_digits__position2 () Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit2))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit2 very_longs__very_long__long_digits__last__bit2))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position2))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun j () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_invariant3 ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)) Bool true)

(declare-fun n () Int)

(declare-fun q_hat () (_ BitVec 16))

(declare-fun temporary_digit () (_ BitVec 16))

(declare-fun r_hat () (_ BitVec 16))

(declare-fun o () Int)

(declare-fun temp___1247 () Int)

(declare-fun o1 () Int)

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 16))

(declare-fun o4 () Int)

(declare-fun temp___1249 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 16))

(declare-fun o8 () (_ BitVec 16))

(declare-fun o9 () (_ BitVec 16))

(declare-fun o10 () Int)

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () (_ BitVec 16))

(declare-fun o13 () (_ BitVec 16))

(declare-fun o14 () Int)

(declare-fun o15 () (_ BitVec 8))

(declare-fun o16 () (_ BitVec 16))

(declare-fun o17 () (_ BitVec 16))

(declare-fun o18 () Int)

(declare-fun o19 () (_ BitVec 8))

(declare-fun o20 () (_ BitVec 16))

(declare-fun o21 () Int)

(declare-fun temp___1255 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () (_ BitVec 8))

(declare-fun o24 () (_ BitVec 16))

(declare-fun o25 () (_ BitVec 16))

(declare-fun o26 () (_ BitVec 16))

(declare-fun o27 () Bool)

(declare-fun o28 () Int)

(declare-fun o29 () (_ BitVec 8))

(declare-fun o30 () (_ BitVec 16))

(declare-fun o31 () (_ BitVec 16))

(declare-fun o32 () Int)

(declare-fun temp___1260 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () (_ BitVec 8))

(declare-fun o35 () (_ BitVec 16))

(declare-fun o36 () (_ BitVec 16))

(declare-fun result () (_ BitVec 16))

(declare-fun temporary_digit1 () (_ BitVec 16))

(declare-fun result1 () (_ BitVec 16))

(declare-fun q_hat1 () (_ BitVec 16))

(declare-fun result2 () (_ BitVec 16))

(declare-fun r_hat1 () (_ BitVec 16))

(declare-fun result3 () Bool)

(declare-fun result4 () (_ BitVec 16))

(declare-fun q_hat2 () (_ BitVec 16))

(declare-fun result5 () (_ BitVec 16))

(declare-fun r_hat2 () (_ BitVec 16))

;; H
  (assert (dynamic_property2 1 last n))

;; H
  (assert (in_range2 j))

;; H
  (assert (and (= o4 (+ j n)) (in_range1 (+ j n))))

;; H
  (assert (= temp___1249 (- o4 1)))

;; H
  (assert (= o5 temp___1249))

;; H
  (assert (= o7 ((_ zero_extend 8) o6)))

;; H
  (assert (and (= temp___1247 (+ j n)) (in_range1 (+ j n))))

;; H
  (assert (= o1 temp___1247))

;; H
  (assert (= o3 ((_ zero_extend 8) o2)))

(declare-fun abstr12 () (_ BitVec 16))

;; H
  (assert (= o8 (bvmul abstr12 o3)))

;; H
  (assert (= o9 (bvadd o8 o7)))

;; H
  (assert (= result temporary_digit))

;; H
  (assert (= temporary_digit1 o9))

;; H
  (assert (= o10 n))

;; H
  (assert (= o12 ((_ zero_extend 8) o11)))

;; H
  (assert (= o13 (bvudiv temporary_digit1 o12)))

;; H
  (assert (= result1 q_hat))

;; H
  (assert (= q_hat1 o13))

;; H
  (assert (= o14 n))

;; H
  (assert (= o16 ((_ zero_extend 8) o15)))

;; H
  (assert (= o17 (bvurem temporary_digit1 o16)))

;; H
  (assert (= result2 r_hat))

;; H
  (assert (= r_hat1 o17))

;; H
  (assert (and (= o21 (+ j n)) (in_range1 (+ j n))))

;; H
  (assert (= temp___1255 (- o21 2)))

;; H
  (assert (= o22 temp___1255))

;; H
  (assert (= o24 ((_ zero_extend 8) o23)))

;; H
  (assert (= o25 (bvadd (bvmul abstr12 r_hat1) o24)))

;; H
  (assert (= o18 (- n 1)))

;; H
  (assert (= o20 ((_ zero_extend 8) o19)))

;; H
  (assert (= o26 (bvmul q_hat1 o20)))

;; H
  (assert (= o27 (ite (bvugt o26 o25) true false)))

;; H
  (assert (= result3 (ite (= q_hat1 abstr12) true o27)))

;; H
  (assert (= result3 true))

;; H
  (assert (= q_hat1 result4))

(declare-fun abstr13 () (_ BitVec 16))

;; H
  (assert (= q_hat2 (bvsub q_hat1 abstr13)))

(assert
;; WP_parameter_def
 ;; File "very_longs-divide.adb", line 92, characters 0-0
  (not false))
(check-sat)
(exit)
