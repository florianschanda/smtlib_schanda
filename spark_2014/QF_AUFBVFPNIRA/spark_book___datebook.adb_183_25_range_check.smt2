;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun in_range4 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun value__size2 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun dates__time__hour__first__bit () Int)

(declare-fun dates__time__hour__last__bit () Int)

(declare-fun dates__time__hour__position () Int)

;; dates__time__hour__first__bit_axiom
  (assert (<= 0 dates__time__hour__first__bit))

;; dates__time__hour__last__bit_axiom
  (assert (< dates__time__hour__first__bit dates__time__hour__last__bit))

;; dates__time__hour__position_axiom
  (assert (<= 0 dates__time__hour__position))

(declare-fun dates__time__minute__first__bit () Int)

(declare-fun dates__time__minute__last__bit () Int)

(declare-fun dates__time__minute__position () Int)

;; dates__time__minute__first__bit_axiom
  (assert (<= 0 dates__time__minute__first__bit))

;; dates__time__minute__last__bit_axiom
  (assert (< dates__time__minute__first__bit dates__time__minute__last__bit))

;; dates__time__minute__position_axiom
  (assert (<= 0 dates__time__minute__position))

(declare-fun dates__time__second__first__bit () Int)

(declare-fun dates__time__second__last__bit () Int)

(declare-fun dates__time__second__position () Int)

;; dates__time__second__first__bit_axiom
  (assert (<= 0 dates__time__second__first__bit))

;; dates__time__second__last__bit_axiom
  (assert (< dates__time__second__first__bit dates__time__second__last__bit))

;; dates__time__second__position_axiom
  (assert (<= 0 dates__time__second__position))

(declare-fun value__size3 () Int)

(declare-fun value__alignment3 () Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-fun dates__datetime__date_part__first__bit () Int)

(declare-fun dates__datetime__date_part__last__bit () Int)

(declare-fun dates__datetime__date_part__position () Int)

;; dates__datetime__date_part__first__bit_axiom
  (assert (<= 0 dates__datetime__date_part__first__bit))

;; dates__datetime__date_part__last__bit_axiom
  (assert
  (< dates__datetime__date_part__first__bit dates__datetime__date_part__last__bit))

;; dates__datetime__date_part__position_axiom
  (assert (<= 0 dates__datetime__date_part__position))

(declare-fun dates__datetime__time_part__first__bit () Int)

(declare-fun dates__datetime__time_part__last__bit () Int)

(declare-fun dates__datetime__time_part__position () Int)

;; dates__datetime__time_part__first__bit_axiom
  (assert (<= 0 dates__datetime__time_part__first__bit))

;; dates__datetime__time_part__last__bit_axiom
  (assert
  (< dates__datetime__time_part__first__bit dates__datetime__time_part__last__bit))

;; dates__datetime__time_part__position_axiom
  (assert (<= 0 dates__datetime__time_part__position))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun dynamic_invariant ((temp___expr_222 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)) Bool (=>
                                      (or (= temp___is_init_219 true)
                                      (<= 0 3)) (in_range10 temp___expr_222)))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun value__size4 () Int)

(declare-fun value__component__size1 () Int)

(declare-fun value__alignment4 () Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

(declare-fun value__size5 () Int)

(declare-fun value__alignment5 () Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

(declare-fun datebook__event_record__description_text__first__bit () Int)

(declare-fun datebook__event_record__description_text__last__bit () Int)

(declare-fun datebook__event_record__description_text__position () Int)

;; datebook__event_record__description_text__first__bit_axiom
  (assert (<= 0 datebook__event_record__description_text__first__bit))

;; datebook__event_record__description_text__last__bit_axiom
  (assert
  (< datebook__event_record__description_text__first__bit datebook__event_record__description_text__last__bit))

;; datebook__event_record__description_text__position_axiom
  (assert (<= 0 datebook__event_record__description_text__position))

(declare-fun datebook__event_record__description_size__first__bit () Int)

(declare-fun datebook__event_record__description_size__last__bit () Int)

(declare-fun datebook__event_record__description_size__position () Int)

;; datebook__event_record__description_size__first__bit_axiom
  (assert (<= 0 datebook__event_record__description_size__first__bit))

;; datebook__event_record__description_size__last__bit_axiom
  (assert
  (< datebook__event_record__description_size__first__bit datebook__event_record__description_size__last__bit))

;; datebook__event_record__description_size__position_axiom
  (assert (<= 0 datebook__event_record__description_size__position))

(declare-fun datebook__event_record__date__first__bit () Int)

(declare-fun datebook__event_record__date__last__bit () Int)

(declare-fun datebook__event_record__date__position () Int)

;; datebook__event_record__date__first__bit_axiom
  (assert (<= 0 datebook__event_record__date__first__bit))

;; datebook__event_record__date__last__bit_axiom
  (assert
  (< datebook__event_record__date__first__bit datebook__event_record__date__last__bit))

;; datebook__event_record__date__position_axiom
  (assert (<= 0 datebook__event_record__date__position))

(declare-fun datebook__event_record__is_used__first__bit () Int)

(declare-fun datebook__event_record__is_used__last__bit () Int)

(declare-fun datebook__event_record__is_used__position () Int)

;; datebook__event_record__is_used__first__bit_axiom
  (assert (<= 0 datebook__event_record__is_used__first__bit))

;; datebook__event_record__is_used__last__bit_axiom
  (assert
  (< datebook__event_record__is_used__first__bit datebook__event_record__is_used__last__bit))

;; datebook__event_record__is_used__position_axiom
  (assert (<= 0 datebook__event_record__is_used__position))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant1 ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 0 128)) (in_range11
                                      temp___expr_257)))

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(define-fun dynamic_invariant2 ((temp___expr_293 Int)
  (temp___is_init_290 Bool) (temp___skip_constant_291 Bool)
  (temp___do_toplevel_292 Bool)) Bool (=>
                                      (or (= temp___is_init_290 true)
                                      (<= 1 64)) (in_range12
                                      temp___expr_293)))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-fun value__size6 () Int)

(declare-fun value__component__size2 () Int)

(declare-fun value__alignment6 () Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

(declare-fun r13b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 2000 2099)) (in_range4
                                      temp___expr_136)))

(define-fun dynamic_invariant7 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 12)) (in_range5 temp___expr_142)))

(define-fun dynamic_invariant8 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 1 31)) (in_range6 temp___expr_148)))

(define-fun dynamic_invariant9 ((temp___expr_154 Int)
  (temp___is_init_151 Bool) (temp___skip_constant_152 Bool)
  (temp___do_toplevel_153 Bool)) Bool (=>
                                      (or (= temp___is_init_151 true)
                                      (<= 0 23)) (in_range7 temp___expr_154)))

(define-fun dynamic_invariant10 ((temp___expr_160 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (<= 0 59)) (in_range8 temp___expr_160)))

(define-fun dynamic_invariant11 ((temp___expr_166 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool (=>
                                      (or (= temp___is_init_163 true)
                                      (<= 0 59)) (in_range9 temp___expr_166)))

(declare-fun status () Int)

(declare-fun index () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun temp___401 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun result () Int)

(declare-fun status1 () Int)

(declare-fun result1 () Int)

(declare-fun index1 () Int)

(declare-fun status2 () Int)

(declare-fun index2 () Int)

(declare-fun j () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Int)

(declare-fun j1 () Int)

(declare-fun j2 () Int)

(declare-fun result4 () Bool)

(declare-fun result5 () Int)

(declare-fun j3 () Int)

(declare-fun status3 () Int)

(declare-fun j4 () Int)

(declare-fun status4 () Int)

(declare-fun j5 () Int)

;; H
  (assert (=> (<= 0 3) (in_range10 status)))

;; H
  (assert (=> (<= 1 64) (in_range12 index)))

;; H
  (assert (= result status))

;; H
  (assert (= status1 3))

;; H
  (assert (= result1 index))

;; H
  (assert (= index1 1))

;; H
  (assert
  (and (=> (<= 1 64) (in_range12 index2)) (=> (<= 0 3) (in_range10 status2))))

;; H
  (assert (= j4 j))

;; H
  (assert (= status3 status2))

;; H
  (assert (= j5 j))

;; H
  (assert (= status4 status2))

;; H
  (assert (not (= index2 64)))

(assert
;; WP_parameter_def
 ;; File "datebook.adb", line 114, characters 0-0
  (not (in_range12 (+ index2 1))))
(check-sat)
(exit)
