;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_178)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))

(declare-const abstr1 Bool)

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first)) abstr1)
                      true false))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r87b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const is_prime (Array Int Bool))

(declare-const index_1 Int)

(declare-const index_3 Int)

(declare-const index_2 Int)

(declare-const test_prime_and_coprime_numbers__p__eratosthenes__L_5__R87b__assume Int)

(declare-const temp___260 (Array Int Bool))

(declare-const temp___259 Int)

(declare-const temp___258 Int)

(declare-const temp___257 Int)

(declare-const v Int)

(declare-const o Bool)

(declare-const o1 Int)

(declare-const v1 Int)

(declare-const div1 Int)

(declare-const o2 Bool)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const temp___255 (Array Int Bool))

(declare-const temp___254 Int)

(declare-const o6 Int)

(declare-const o7 (Array Int Bool))

(declare-const v2 Int)

(declare-const o8 Bool)

(declare-const o9 Int)

(declare-const v3 Int)

(declare-const div2 Int)

(declare-const o10 Int)

(declare-const o11 Bool)

(declare-const o12 Bool)

(declare-const o13 Bool)

(declare-const o14 Bool)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 (Array Int Bool))

(declare-const index_11 Int)

(declare-const index_31 Int)

(declare-const result (Array Int Bool))

(declare-const is_prime1 (Array Int Bool))

(declare-const result1 (Array Int Bool))

(declare-const is_prime2 (Array Int Bool))

(declare-const result2 (Array Int Bool))

(declare-const is_prime3 (Array Int Bool))

(declare-const result3 Int)

(declare-const index_21 Int)

(declare-const is_prime4 (Array Int Bool))

(declare-const index_12 Int)

(declare-const index_32 Int)

(declare-const index_22 Int)

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const index_13 Int)

(declare-const result6 Int)

(declare-const index_33 Int)

(declare-const result7 (Array Int Bool))

(declare-const is_prime5 (Array Int Bool))

(declare-const is_prime6 (Array Int Bool))

(declare-const index_34 Int)

(declare-const result8 Bool)

(declare-const result9 Int)

(declare-const index_35 Int)

(declare-const result10 (Array Int Bool))

(declare-const is_prime7 (Array Int Bool))

(declare-const is_prime8 (Array Int Bool))

(declare-const index_36 Int)

(declare-const is_prime9 (Array Int Bool))

(declare-const index_37 Int)

(declare-const is_prime10 (Array Int Bool))

(declare-const index_38 Int)

(declare-const is_prime11 (Array Int Bool))

(declare-const index_39 Int)

(declare-const is_prime12 (Array Int Bool))

(declare-const index_14 Int)

(declare-const is_prime13 (Array Int Bool))

(declare-const index_15 Int)

(declare-const index_310 Int)

(declare-const index_23 Int)

(declare-const is_prime14 (Array Int Bool))

(declare-const index_16 Int)

(declare-const index_311 Int)

(declare-const index_24 Int)

(declare-const is_prime15 (Array Int Bool))

(declare-const index_17 Int)

(declare-const index_312 Int)

(declare-const index_25 Int)

(declare-const is_prime16 (Array Int Bool))

(declare-const index_18 Int)

(declare-const index_313 Int)

(declare-const index_26 Int)

(declare-const is_prime17 (Array Int Bool))

(declare-const index_19 Int)

(declare-const index_314 Int)

(declare-const index_27 Int)

;; H
  (assert (=> (<= 0 2147483647) (in_range3 index_1)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 index_3)))

(declare-const abstr2 (Array Int Bool))

;; H
  (assert (= is_prime1 abstr2))

;; H
  (assert (= is_prime1 result1))

;; H
  (assert (= is_prime2 (store is_prime1 0 (of_int 0))))

;; H
  (assert (= is_prime2 result2))

;; H
  (assert (= is_prime3 (store is_prime2 1 (of_int 0))))

(declare-const abstr3 Int)

;; H
  (assert
  (and
  (= test_prime_and_coprime_numbers__p__eratosthenes__L_5__R87b__assume
  abstr3) (in_range3 abstr3)))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__eratosthenes__L_5__R87b__assume
  r87b))

;; H
  (assert (in_range3 r87b))

;; H
  (assert (= index_21 2))

;; H
  (assert (<= 2 index_21))

;; H
  (assert (<= index_21 r87b))

;; H
  (assert (and (<= 2 index_22) (<= index_22 100000)))

;; H
  (assert
  (and
  (and
  (and (=> (<= 2 r87b) (dynamic_property 2 r87b index_22))
  (=> (<= 0 2147483647) (in_range3 index_12)))
  (=> (<= (- 2147483648) 2147483647) (in_range2 index_32)))
  (and (<= 2 index_22) (<= index_22 r87b))))

;; H
  (assert (and (<= 0 index_22) (<= index_22 100000)))

;; H
  (assert (= o4 index_22))

;; H
  (assert (= result4 (select is_prime4 o4)))

;; H
  (assert (= result4 true))

;; H
  (assert (= index_12 result5))

;; H
  (assert (= index_13 index_22))

;; H
  (assert (and (= o5 (* 2 index_13)) (in_range2 (* 2 index_13))))

;; H
  (assert (= index_32 result6))

;; H
  (assert (= index_33 o5))

;; H
  (assert (<= index_33 100000))

;; H
  (assert (and (<= 0 index_33) (<= index_33 100000)))

;; H
  (assert (= o6 index_33))

;; H
  (assert (= o7 (store is_prime4 o6 (of_int 0))))

;; H
  (assert (= is_prime4 result7))

;; H
  (assert (= is_prime5 o7))

;; H
  (assert (and (<= index_22 index_34) (<= index_34 100000)))

;; H
  (assert (= (mod1 index_34 index_22) 0))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 index_34)))

;; H
  (assert
  (and (= o16 (+ index_34 index_13)) (in_range2 (+ index_34 index_13))))

;; H
  (assert (= index_34 result9))

;; H
  (assert (= index_35 o16))

;; H
  (assert (<= index_35 100000))

;; H
  (assert (and (<= 0 index_35) (<= index_35 100000)))

;; H
  (assert (= o17 index_35))

;; H
  (assert (= o18 (store is_prime6 o17 (of_int 0))))

;; H
  (assert (= result10 is_prime6))

;; H
  (assert (= is_prime7 o18))

(assert
;; WP_parameter_def
 ;; File "prime_and_coprime_numbers.ads", line 3, characters 0-0
  (not (<= index_22 index_35)))
(check-sat)
(exit)
