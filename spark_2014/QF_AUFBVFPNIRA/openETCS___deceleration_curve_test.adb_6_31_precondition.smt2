;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_148 Float32)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_148) (fp.isNaN temp___expr_148)))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_154 Float32)
  (temp___is_init_151 Bool) (temp___skip_constant_152 Bool)
  (temp___do_toplevel_153 Bool)) Bool (=>
                                      (or (= temp___is_init_151 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_154) (fp.isNaN temp___expr_154)))))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun deceleration_curve__braking_curve_entry__location__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__location__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__location__position () Int)

;; deceleration_curve__braking_curve_entry__location__first__bit_axiom
  (assert
  (<= 0 deceleration_curve__braking_curve_entry__location__first__bit))

;; deceleration_curve__braking_curve_entry__location__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__location__first__bit deceleration_curve__braking_curve_entry__location__last__bit))

;; deceleration_curve__braking_curve_entry__location__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__location__position))

(declare-fun deceleration_curve__braking_curve_entry__speed__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__speed__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__speed__position () Int)

;; deceleration_curve__braking_curve_entry__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__first__bit))

;; deceleration_curve__braking_curve_entry__speed__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__speed__first__bit deceleration_curve__braking_curve_entry__speed__last__bit))

;; deceleration_curve__braking_curve_entry__speed__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__position))

(declare-fun value__size1 () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun value__size2 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun deceleration_curve__braking_curve_t__curve__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__curve__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__curve__position () Int)

;; deceleration_curve__braking_curve_t__curve__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__first__bit))

;; deceleration_curve__braking_curve_t__curve__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__curve__first__bit deceleration_curve__braking_curve_t__curve__last__bit))

;; deceleration_curve__braking_curve_t__curve__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__position))

(declare-fun deceleration_curve__braking_curve_t__end_point__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__end_point__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__end_point__position () Int)

;; deceleration_curve__braking_curve_t__end_point__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__first__bit))

;; deceleration_curve__braking_curve_t__end_point__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__end_point__first__bit deceleration_curve__braking_curve_t__end_point__last__bit))

;; deceleration_curve__braking_curve_t__end_point__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__position))

(declare-fun value__size3 () Int)

(declare-fun value__alignment3 () Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-fun deceleration_curve__target_t__supervise__first__bit () Int)

(declare-fun deceleration_curve__target_t__supervise__last__bit () Int)

(declare-fun deceleration_curve__target_t__supervise__position () Int)

;; deceleration_curve__target_t__supervise__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__first__bit))

;; deceleration_curve__target_t__supervise__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__supervise__first__bit deceleration_curve__target_t__supervise__last__bit))

;; deceleration_curve__target_t__supervise__position_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__position))

(declare-fun deceleration_curve__target_t__location__first__bit () Int)

(declare-fun deceleration_curve__target_t__location__last__bit () Int)

(declare-fun deceleration_curve__target_t__location__position () Int)

;; deceleration_curve__target_t__location__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__location__first__bit))

;; deceleration_curve__target_t__location__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__location__first__bit deceleration_curve__target_t__location__last__bit))

;; deceleration_curve__target_t__location__position_axiom
  (assert (<= 0 deceleration_curve__target_t__location__position))

(declare-fun deceleration_curve__target_t__speed__first__bit () Int)

(declare-fun deceleration_curve__target_t__speed__last__bit () Int)

(declare-fun deceleration_curve__target_t__speed__position () Int)

;; deceleration_curve__target_t__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__first__bit))

;; deceleration_curve__target_t__speed__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__speed__first__bit deceleration_curve__target_t__speed__last__bit))

;; deceleration_curve__target_t__speed__position_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__position))

(define-fun dynamic_invariant2 ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_172)))

(declare-fun maximum_valid_speed () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun abstr1 () Float32)

;; maximum_valid_speed__def_axiom
  (assert (= maximum_valid_speed abstr1))

(declare-fun initial_speed () Float32)

(declare-fun target__split_fields () Bool)

(declare-fun o () Float32)

(declare-fun o1 () Bool)

(declare-fun deceleration_curve_test__target__assume () Bool)

(declare-fun o2 () Int)

(declare-fun result () Float32)

(declare-fun initial_speed1 () Float32)

(declare-fun result1 () Bool)

(declare-fun target__split_fields1 () Bool)

(declare-fun abstr2 () Bool)

(assert
;; WP_parameter_def
 ;; File "deceleration_curve_test.adb", line 5, characters 0-0
  (not (= abstr2 true)))
(check-sat)
(exit)
