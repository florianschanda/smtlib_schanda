;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

;; max_value
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (fp.to_real (fp #b0 #b11111110 #b11111111111111111111111))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-const a Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x Float32)

(declare-const result Float32)

(declare-const x1 Float32)

(declare-const result1 Float32)

(declare-const x2 Float32)

(declare-const result2 Float32)

(declare-const x3 Float32)

(declare-const result3 Float32)

(declare-const x4 Float32)

(declare-const result4 Float32)

(declare-const x5 Float32)

(declare-const result5 Float32)

(declare-const x6 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite x) (fp.isNaN x)))))

;; H
  (assert (= result x))

;; H
  (assert (= x1 (fp #b0 #b00000000 #b00000000000000000000000)))

(declare-const abstr1 Float32)

;; H
  (assert (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) abstr1))

;; H
  (assert (fp.lt abstr1 (fp #b0 #b01111111 #b00000000000000000000000)))

(declare-const abstr2 Float32)

;; H
  (assert (fp.lt abstr2 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert
  (fp.lt (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) abstr2))

;; H
  (assert (= result1 x1))

;; H
  (assert (= x2 (fp #b0 #b01111111 #b00000000000000000000000)))

(declare-const abstr3 Float32)

;; H
  (assert (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) abstr3))

;; H
  (assert (fp.lt abstr3 (fp #b0 #b01111111 #b00011001100110011001101)))

(declare-const abstr4 Float32)

;; H
  (assert (fp.lt abstr4 (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (fp.lt (fp #b0 #b01111110 #b11001100110011001100110) abstr4))

;; H
  (assert (= result2 x2))

;; H
  (assert (= x3 (fp #b0 #b11111110 #b11111111111111111111111)))

;; H
  (assert (=> (= a true) (= result3 x3)))

(declare-const abstr5 Float32)

;; H
  (assert (=> (= a true) (= x4 abstr5)))

(declare-const abstr6 Float32)

;; H
  (assert
  (=> (not (= a true))
  (fp.lt abstr6 (fp #b0 #b11111110 #b11111111111111111111111))))

;; H
  (assert (=> (not (= a true)) (= x4 x3)))

(declare-const abstr7 Float32)

;; H
  (assert (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) abstr7))

;; H
  (assert (= result4 x4))

;; H
  (assert (= x5 (fp.neg (fp #b0 #b11111110 #b11111111111111111111111))))

;; H
  (assert (= b true))

(assert
;; WP_parameter_def
 ;; File "succ_floats.adb", line 1, characters 0-0
  (not (not (= x5 (fp.neg (fp #b0 #b11111110 #b11111111111111111111111))))))
(check-sat)
(exit)
