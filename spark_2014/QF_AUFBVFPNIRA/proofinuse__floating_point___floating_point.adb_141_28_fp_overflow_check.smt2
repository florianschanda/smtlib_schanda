;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range3 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_223 Int)
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool (=>
                                      (or (= temp___is_init_220 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_223)))

(define-fun dynamic_invariant3 ((temp___expr_229 Float32)
  (temp___is_init_226 Bool) (temp___skip_constant_227 Bool)
  (temp___do_toplevel_228 Bool)) Bool (=>
                                      (or (= temp___is_init_226 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_229) (fp.isNaN temp___expr_229)))))

(define-fun dynamic_invariant4 ((temp___expr_235 Float32)
  (temp___is_init_232 Bool) (temp___skip_constant_233 Bool)
  (temp___do_toplevel_234 Bool)) Bool (=>
                                      (or (= temp___is_init_232 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_235) (fp.isNaN temp___expr_235)))))

(define-fun in_range4 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_241 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)) Bool (=>
                                      (or (= temp___is_init_238 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_241)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x2 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const threehalfs Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; x2__def_axiom
  (assert
  (= x2 (fp.mul RNE x (fp #b0 #b01111110 #b00000000000000000000000))))

;; threehalfs__def_axiom
  (assert (= threehalfs (fp #b0 #b01111111 #b10000000000000000000000)))

(declare-const i Int)

(declare-const y Float32)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Bool)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Int)

(declare-const i2 Int)

(declare-const result2 Float32)

(declare-const y1 Float32)

(declare-const result3 Float32)

(declare-const y2 Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 i)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite y) (fp.isNaN y)))))

;; H
  (assert
  (= (fp.mul RNE x (fp #b0 #b01111110 #b00000000000000000000000)) x2))

;; H
  (assert (not (or (fp.isInfinite x2) (fp.isNaN x2))))

;; H
  (assert (not (or (fp.isInfinite threehalfs) (fp.isNaN threehalfs))))

;; H
  (assert (fp.leq (fp #b0 #b01101110 #b01001111100010110101100) x))

(declare-const abstr1 Int)

;; H
  (assert (and (= o abstr1) (in_range4 o)))

;; H
  (assert (= result i))

;; H
  (assert (= i1 o))

(declare-const abstr2 Int)

;; H
  (assert
  (and (= o1 (- 1597463007 abstr2)) (in_range2 (- 1597463007 abstr2))))

;; H
  (assert (= result1 i1))

;; H
  (assert (= i2 o1))

(declare-const abstr3 Float32)

;; H
  (assert (and (= o2 abstr3) (not (or (fp.isInfinite o2) (fp.isNaN o2)))))

;; H
  (assert (= result2 y))

;; H
  (assert (= y1 o2))

;; H
  (assert
  (and (= o3 (fp.mul RNE y1 y1))
  (not (or (fp.isInfinite (fp.mul RNE y1 y1)) (fp.isNaN (fp.mul RNE y1
  y1))))))

;; H
  (assert (= o4 (fp.mul RNE x2 o3)))

;; H
  (assert (and (= o5 o4) (not (or (fp.isInfinite o4) (fp.isNaN o4)))))

;; H
  (assert
  (= o6 (fp.sub RNE (fp #b0 #b01111111 #b10000000000000000000000) o5)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (not (or (fp.isInfinite o6) (fp.isNaN o6)))))
(check-sat)
(exit)
