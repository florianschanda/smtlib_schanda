;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun in_range2 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
                                      (in_range2 temp___expr_135)))

(define-fun in_range3 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_141 Float64)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))
                                      (in_range3 temp___expr_141)))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const shapes5__circle__center_x__first__bit Int)

(declare-const shapes5__circle__center_x__last__bit Int)

(declare-const shapes5__circle__center_x__position Int)

;; shapes5__circle__center_x__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_x__first__bit))

;; shapes5__circle__center_x__last__bit_axiom
  (assert
  (< shapes5__circle__center_x__first__bit shapes5__circle__center_x__last__bit))

;; shapes5__circle__center_x__position_axiom
  (assert (<= 0 shapes5__circle__center_x__position))

(declare-const shapes5__circle__center_y__first__bit Int)

(declare-const shapes5__circle__center_y__last__bit Int)

(declare-const shapes5__circle__center_y__position Int)

;; shapes5__circle__center_y__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_y__first__bit))

;; shapes5__circle__center_y__last__bit_axiom
  (assert
  (< shapes5__circle__center_y__first__bit shapes5__circle__center_y__last__bit))

;; shapes5__circle__center_y__position_axiom
  (assert (<= 0 shapes5__circle__center_y__position))

(declare-const shapes5__circle__radius__first__bit Int)

(declare-const shapes5__circle__radius__last__bit Int)

(declare-const shapes5__circle__radius__position Int)

;; shapes5__circle__radius__first__bit_axiom
  (assert (<= 0 shapes5__circle__radius__first__bit))

;; shapes5__circle__radius__last__bit_axiom
  (assert
  (< shapes5__circle__radius__first__bit shapes5__circle__radius__last__bit))

;; shapes5__circle__radius__position_axiom
  (assert (<= 0 shapes5__circle__radius__position))

(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const radius Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const wild_man Int)

(declare-const r Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const result Float64)

(declare-const r1 Float64)

(declare-const result1 Float64)

(declare-const r2 Float64)

(declare-const result2 Float64)

(declare-const r3 Float64)

(declare-const result3 Float64)

(declare-const r4 Float64)

(declare-const result4 Float64)

(declare-const r5 Float64)

(declare-const r6 Float64)

;; H
  (assert (in_range2 x))

;; H
  (assert (in_range2 y))

;; H
  (assert (in_range3 radius))

;; H
  (assert (in_range1 wild_man))

;; H
  (assert (= r1 radius))

;; H
  (assert (in_range3 r1))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1)
  (and
  (= o (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x))
  (fp.isFinite64 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x)))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1) (= r1 result1)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1) (= r2 o)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  x) r1)) (= r2 r1)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2)
  (and
  (= o1 (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000))))
  (fp.isFinite64 (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2) (= r2 result2)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2) (= r3 o1)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE x (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r2)) (= r3 r2)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3)
  (and
  (= o2 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y))
  (fp.isFinite64 (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y)))))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3) (= r3 result3)))

;; H
  (assert
  (=>
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3) (= r4 o2)))

;; H
  (assert
  (=>
  (not
  (fp.leq (fp.sub RNE (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)
  y) r3)) (= r4 r3)))

;; H
  (assert
  (fp.leq (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
  r4))

(assert
;; WP_parameter_def
 ;; File "shapes5.ads", line 27, characters 0-0
  (not (in_range3
  (fp.sub RNE y (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000))))))
(check-sat)
(exit)
