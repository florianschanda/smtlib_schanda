;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr (_ BitVec 32))

(declare-const abstr1 (_ BitVec 32))

(declare-const abstr2 (_ BitVec 32))

(declare-const abstr3 (_ BitVec 32))

(declare-const abstr4 (_ BitVec 32))

(define-fun nth_bv ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr5 Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr6 Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr7 (_ BitVec 8))

(declare-const abstr8 (_ BitVec 8))

(declare-const abstr9 (_ BitVec 8))

(declare-const abstr10 (_ BitVec 8))

(declare-const abstr11 (_ BitVec 8))

(define-fun nth_bv1 ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr12 Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr12)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr13 (_ BitVec 16))

(declare-const abstr14 (_ BitVec 16))

(declare-const abstr15 (_ BitVec 16))

(declare-const abstr16 (_ BitVec 16))

(declare-const abstr17 (_ BitVec 16))

(define-fun nth_bv2 ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr18 Bool)

(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr18)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-const abstr19 (_ BitVec 64))

(declare-const abstr20 (_ BitVec 64))

(declare-const abstr21 (_ BitVec 64))

(declare-const abstr22 (_ BitVec 64))

(declare-const abstr23 (_ BitVec 64))

(define-fun nth_bv3 ((x (_ BitVec 64))
  (i (_ BitVec 64))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000))
                          true false))

(declare-const abstr24 Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool abstr24)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(define-fun dynamic_invariant ((temp___expr_177 (_ BitVec 32))
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-const abstr25 (_ BitVec 32))

(declare-const abstr26 (_ BitVec 32))

(define-fun in_range1 ((x (_ BitVec 32))) Bool (and (bvule abstr26 x)
                                               (bvule x abstr25)))

(define-fun in_range_int ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun dynamic_invariant1 ((temp___expr_201 (_ BitVec 32))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (or (= temp___is_init_198 true)
                                      (bvule abstr26 abstr25)) (in_range1
                                      temp___expr_201)))

(declare-const requested_force (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const calculated_force (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const relative_error (_ BitVec 32))

(declare-const abs_out1 (_ BitVec 32))

(declare-const result (_ BitVec 32))

(declare-const abs_out11 (_ BitVec 32))

(declare-const result1 (_ BitVec 32))

(declare-const relative_error1 (_ BitVec 32))

(declare-const relative_error2 (_ BitVec 32))

(declare-const abs_out12 (_ BitVec 32))

(declare-const relative_error3 (_ BitVec 32))

(declare-const abs_out13 (_ BitVec 32))

;; H
  (assert (in_range1 calculated_force))

(declare-const abstr27 (_ BitVec 32))

;; H
  (assert (not (= requested_force abstr27)))

;; H
  (assert (not (= requested_force abstr27)))

;; H
  (assert
  (= abs_out11 (bvudiv (bvsub requested_force calculated_force) requested_force)))

(assert
;; WP_parameter_def
 ;; File "errorexample.ads", line 22, characters 0-0
  (not
  (fp.leq ((_ to_fp_unsigned 11 53) RNE abs_out11) (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))
(check-sat)
(exit)
