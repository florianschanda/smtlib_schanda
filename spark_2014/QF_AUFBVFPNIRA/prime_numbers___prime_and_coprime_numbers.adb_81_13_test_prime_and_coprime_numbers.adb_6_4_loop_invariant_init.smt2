;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_178)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))

(declare-fun abstr () Bool)

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first)) abstr)
                      true false))

(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun value () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun result__ () (Array Int Bool))

(declare-fun index () Int)

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result () (Array Int Bool))

(declare-fun temp___226 () (Array Int Bool))

(declare-fun temp___225 () Int)

(declare-fun o () Int)

(declare-fun o1 () Bool)

(declare-fun o2 () (Array Int Bool))

(declare-fun v () Int)

(declare-fun o3 () Bool)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun o7 () (Array Int Bool))

(declare-fun result__1 () (Array Int Bool))

(declare-fun result () Int)

(declare-fun index1 () Int)

(declare-fun result1 () (Array Int Bool))

(declare-fun result__2 () (Array Int Bool))

(declare-fun result__3 () (Array Int Bool))

(declare-fun index2 () Int)

(declare-fun result2 () Int)

(declare-fun index3 () Int)

(declare-fun result3 () (Array Int Bool))

(declare-fun result__4 () (Array Int Bool))

(declare-fun result__5 () (Array Int Bool))

(declare-fun index4 () Int)

(declare-fun result__6 () (Array Int Bool))

(declare-fun index5 () Int)

(declare-fun result__7 () (Array Int Bool))

(declare-fun index6 () Int)

(declare-fun result__8 () (Array Int Bool))

(declare-fun index7 () Int)

(declare-fun result__9 () (Array Int Bool))

(declare-fun index8 () Int)

(declare-fun result__10 () (Array Int Bool))

(declare-fun index9 () Int)

(declare-fun result4 () (Array Int Bool))

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result1 () (Array Int Bool))

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result2 () (Array Int Bool))

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result3 () (Array Int Bool))

(declare-fun result__11 () (Array Int Bool))

(declare-fun index10 () Int)

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result4 () (Array Int Bool))

(declare-fun result__12 () (Array Int Bool))

(declare-fun index11 () Int)

(declare-fun test_prime_and_coprime_numbers__p__initialize_coprime_list__result5 () (Array Int Bool))

;; H
  (assert (in_range1 value))

;; H
  (assert (<= 2 value))

;; H
  (assert (= index1 0))

;; H
  (assert (<= 0 index1))

;; H
  (assert (<= index1 100000))

(declare-fun abstr1 () Bool)

(declare-fun abstr2 () Int)

;; H
  (assert
  (and (= o abstr2)
  (and (in_range1 o) (ite (= abstr1 true) (= o 1) (< 1 o)))))

;; H
  (assert (= o1 (ite (= o 1) true false)))

;; H
  (assert (= o2 (store result__ index1 o1)))

;; H
  (assert (= result__2 o2))

(declare-fun v1 () Int)

;; H
  (assert (<= 0 v1))

;; H
  (assert (<= v1 index1))

;; H
  (assert (= (select result__2 v1) true))

(declare-fun abstr3 () Bool)

(assert
;; WP_parameter_def
 ;; File "prime_and_coprime_numbers.ads", line 12, characters 0-0
  (not (= abstr3 true)))
(check-sat)
(exit)
