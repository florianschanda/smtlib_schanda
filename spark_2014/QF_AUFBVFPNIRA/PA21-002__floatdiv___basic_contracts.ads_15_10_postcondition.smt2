;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const numerator Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const denominator Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant1 ((temp___expr_135 Float32)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range2 temp___expr_135)))

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant2 ((temp___expr_141 Float32)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range3 temp___expr_141)))

(declare-const num Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const den Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant3 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

;; num__def_axiom
  (assert (= num ((_ to_fp 8 24) RNE (to_real numerator))))

;; den__def_axiom
  (assert (= den ((_ to_fp 8 24) RNE (to_real denominator))))

(declare-const basic_contracts__average__result Float32)

(declare-const basic_contracts__average__num__assume Float32)

(declare-const basic_contracts__average__den__assume Float32)

(declare-const o Float32)

(declare-const result Float32)

(declare-const basic_contracts__average__result1 Float32)

(declare-const basic_contracts__average__result2 Float32)

(declare-const basic_contracts__average__result3 Float32)

(declare-const basic_contracts__average__result4 Float32)

(declare-const basic_contracts__average__result5 Float32)

(declare-const result1 Float32)

;; H
  (assert (in_range1 numerator))

;; H
  (assert (in_range1 denominator))

;; H
  (assert (and (<= 0 numerator) (< 0 denominator)))

;; H
  (assert
  (and
  (= basic_contracts__average__num__assume ((_ to_fp 8 24) RNE (to_real
  numerator))) (fp.isFinite32 ((_ to_fp 8 24) RNE (to_real numerator)))))

;; H
  (assert (= basic_contracts__average__num__assume num))

;; H
  (assert (in_range3 num))

;; H
  (assert
  (and
  (= basic_contracts__average__den__assume ((_ to_fp 8 24) RNE (to_real
  denominator))) (fp.isFinite32 ((_ to_fp 8 24) RNE (to_real denominator)))))

;; H
  (assert (= basic_contracts__average__den__assume den))

;; H
  (assert (in_range2 den))

;; H
  (assert
  (= basic_contracts__average__result1 basic_contracts__average__result2))

;; H
  (assert
  (= basic_contracts__average__result3 basic_contracts__average__result1))

;; H
  (assert
  (and (= o (fp.div RNE num den)) (fp.isFinite32 (fp.div RNE num den))))

;; H
  (assert (= result basic_contracts__average__result))

;; H
  (assert (= basic_contracts__average__result1 o))

;; H
  (assert
  (= basic_contracts__average__result5 basic_contracts__average__result3))

;; H
  (assert (= result1 basic_contracts__average__result4))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) basic_contracts__average__result4)))
(check-sat)
(exit)
