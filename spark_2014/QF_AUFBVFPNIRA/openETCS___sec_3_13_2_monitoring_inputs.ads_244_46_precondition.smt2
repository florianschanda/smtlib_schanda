;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_174 Float32)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)
  (temp___do_typ_inv_173 Bool)) Bool (=>
                                     (or (= temp___is_init_170 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_174)))

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(define-fun dynamic_invariant1 ((temp___expr_195 Float32)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)
  (temp___do_typ_inv_194 Bool)) Bool (=>
                                     (or (= temp___is_init_191 true)
                                     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (in_range1 temp___expr_195)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant2 ((temp___expr_202 Int)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)
  (temp___do_typ_inv_201 Bool)) Bool (=>
                                     (or (= temp___is_init_198 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_202)))

(define-fun dynamic_invariant3 ((temp___expr_209 Float32)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)
  (temp___do_typ_inv_208 Bool)) Bool (=>
                                     (or (= temp___is_init_205 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_209)))

(define-fun dynamic_invariant4 ((temp___expr_181 Float32)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_181)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const step_function__delimiter_entry__delimiter__first__bit Int)

(declare-const step_function__delimiter_entry__delimiter__last__bit Int)

(declare-const step_function__delimiter_entry__delimiter__position Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-const step_function__delimiter_entry__value__first__bit Int)

(declare-const step_function__delimiter_entry__value__last__bit Int)

(declare-const step_function__delimiter_entry__value__position Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-const value__size1 Int)

(declare-const value__component__size Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__position Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-const step_function__step_function_t__step__first__bit Int)

(declare-const step_function__step_function_t__step__last__bit Int)

(declare-const step_function__step_function_t__step__position Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun dynamic_invariant5 ((temp___expr_314 Int)
  (temp___is_init_310 Bool) (temp___skip_constant_311 Bool)
  (temp___do_toplevel_312 Bool)
  (temp___do_typ_inv_313 Bool)) Bool (=>
                                     (or (= temp___is_init_310 true)
                                     (<= 0 1)) (in_range5 temp___expr_314)))

(declare-const breaking_model Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const t_traction_cut_off Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const a_sb01 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const a_sb02 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const t_brake_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const t_brake_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const t_brake_build_up Float32)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const t_brake_emergency_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const t_brake_emergency_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const t_brake_emergency Float32)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const t_brake_service_react Float32)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const t_brake_service_increase Float32)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const t_brake_service Float32)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const train_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const maximum_train_speed Float32)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(define-fun dynamic_invariant6 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

;; breaking_model__def_axiom
  (assert (= breaking_model 0))

;; t_traction_cut_off__def_axiom
  (assert
  (= t_traction_cut_off (fp #b0 #b10000010 #b01000000000000000000000)))

;; a_sb01__def_axiom
  (assert (= a_sb01 (fp #b0 #b01111011 #b10011001100110011001101)))

;; a_sb02__def_axiom
  (assert (= a_sb02 (fp #b0 #b01111100 #b10011001100110011001101)))

;; t_brake_react__def_axiom
  (assert (= t_brake_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_increase__def_axiom
  (assert (= t_brake_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_build_up__def_axiom
  (assert (= t_brake_build_up (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_emergency_react__def_axiom
  (assert
  (= t_brake_emergency_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_emergency_increase__def_axiom
  (assert
  (= t_brake_emergency_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_emergency__def_axiom
  (assert
  (= t_brake_emergency (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_service_react__def_axiom
  (assert
  (= t_brake_service_react (fp #b0 #b01111111 #b00000000000000000000000)))

;; t_brake_service_increase__def_axiom
  (assert
  (= t_brake_service_increase (fp #b0 #b10000000 #b00000000000000000000000)))

;; t_brake_service__def_axiom
  (assert (= t_brake_service (fp #b0 #b10000000 #b00000000000000000000000)))

;; train_length__def_axiom
  (assert (= train_length 900))

(declare-const abstr Float32)

;; maximum_train_speed__def_axiom
  (assert (= maximum_train_speed abstr))

(define-fun dynamic_invariant7 ((temp___expr_216 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)
  (temp___do_typ_inv_215 Bool)) Bool (=>
                                     (or (= temp___is_init_212 true)
                                     (<= 0 10)) (in_range3 temp___expr_216)))

(define-fun dynamic_invariant8 ((temp___expr_223 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)
  (temp___do_typ_inv_222 Bool)) Bool (=>
                                     (or (= temp___is_init_219 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_223)))

(declare-const sec_3_13_2_monitoring_inputs__maximum_train_speed__assume Float32)

;; H
  (assert (in_range5 breaking_model))

;; H
  (assert (fp.isFinite32 t_traction_cut_off))

;; H
  (assert (in_range1 a_sb01))

;; H
  (assert (in_range1 a_sb02))

;; H
  (assert (fp.isFinite32 t_brake_react))

;; H
  (assert (fp.isFinite32 t_brake_increase))

;; H
  (assert (fp.isFinite32 t_brake_build_up))

;; H
  (assert (fp.isFinite32 t_brake_emergency_react))

;; H
  (assert (fp.isFinite32 t_brake_emergency_increase))

;; H
  (assert (fp.isFinite32 t_brake_emergency))

;; H
  (assert (fp.isFinite32 t_brake_service_react))

;; H
  (assert (fp.isFinite32 t_brake_service_increase))

;; H
  (assert (fp.isFinite32 t_brake_service))

;; H
  (assert (in_range2 train_length))

(declare-const abstr1 Bool)

(assert
;; WP_parameter_def
 ;; File "sec_3_13_2_monitoring_inputs.ads", line 248, characters 0-0
  (not (= abstr1 true)))
(check-sat)
(exit)
