;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(define-fun in_range ((x Float64)) Bool (and (fp.isFinite64 x)
                                        (and
                                        (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) x)
                                        (fp.leq x (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_135 Float64)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
                                      (in_range temp___expr_135)))

(define-fun in_range1 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp #b0 #b01111001011 #b0000000000000000000000000000000000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))))

(define-fun dynamic_invariant2 ((temp___expr_141 Float64)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp #b0 #b01111001011 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (in_range1 temp___expr_141)))

(declare-const requested_force Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const calculated_force Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const relative_error Float64)

(declare-const abs_out1 Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const result Float64)

(declare-const abs_out11 Float64)

;; H
  (assert (in_range1 requested_force))

;; H
  (assert (in_range calculated_force))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 relative_error)))

;; H
  (assert
  (not (fp.eq requested_force (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 abs_out1)))

;; H
  (assert
  (not (fp.eq requested_force (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (and (= o (fp.sub RNE requested_force calculated_force))
  (fp.isFinite64 (fp.sub RNE requested_force calculated_force))))

;; H
  (assert (= o1 (fp.div RNE o requested_force)))

;; H
  (assert (and (= o2 o1) (fp.isFinite64 o1)))

;; H
  (assert (= o3 (fp.abs o2)))

;; H
  (assert (= result abs_out1))

;; H
  (assert (= abs_out11 o3))

(assert
;; WP_parameter_def
 ;; File "errorexamplefloat.ads", line 21, characters 0-0
  (not
  (fp.leq abs_out11 (fp #b0 #b01111111000 #b0100011110101110000101000111101011100001010001111011))))
(check-sat)
(exit)
