;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            abstr (- (- 4294967296 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-const abstr1 (_ BitVec 32))

(declare-const abstr2 (_ BitVec 32))

(declare-const abstr3 (_ BitVec 32))

(declare-const abstr4 (_ BitVec 32))

(declare-const abstr5 (_ BitVec 32))

(define-fun nth_bv ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(define-fun dynamic_invariant1 ((temp___expr_182 (_ BitVec 32))
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool true)

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant2 ((temp___expr_1348 Float32)
  (temp___is_init_1345 Bool) (temp___skip_constant_1346 Bool)
  (temp___do_toplevel_1347 Bool)) Bool (=>
                                       (or (= temp___is_init_1345 true)
                                       (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (fp.isFinite32 temp___expr_1348)))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(define-fun dynamic_invariant3 ((temp___expr_1354 (_ BitVec 32))
  (temp___is_init_1351 Bool) (temp___skip_constant_1352 Bool)
  (temp___do_toplevel_1353 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(define-fun dynamic_invariant4 ((temp___expr_1360 (_ BitVec 32))
  (temp___is_init_1357 Bool) (temp___skip_constant_1358 Bool)
  (temp___do_toplevel_1359 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_1366 Float32)
  (temp___is_init_1363 Bool) (temp___skip_constant_1364 Bool)
  (temp___do_toplevel_1365 Bool)) Bool (=>
                                       (or (= temp___is_init_1363 true)
                                       (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (fp.isFinite32 temp___expr_1366)))

(declare-const half_x Float32)

(declare-const y Float32)

(declare-const magic_num (_ BitVec 32))

(declare-const i (_ BitVec 32))

(declare-const maths_pack__inv_sqrt__result Float32)

(declare-const o (_ BitVec 32))

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const result Float32)

(declare-const half_x1 Float32)

(declare-const result1 Float32)

(declare-const y1 Float32)

(declare-const result2 (_ BitVec 32))

(declare-const magic_num1 (_ BitVec 32))

(declare-const result3 (_ BitVec 32))

(declare-const i1 (_ BitVec 32))

(declare-const result4 (_ BitVec 32))

(declare-const i2 (_ BitVec 32))

(declare-const result5 Float32)

(declare-const y2 Float32)

(declare-const result6 Float32)

(declare-const y3 Float32)

(declare-const result7 Float32)

(declare-const maths_pack__inv_sqrt__result1 Float32)

(declare-const maths_pack__inv_sqrt__result2 Float32)

(declare-const maths_pack__inv_sqrt__result3 Float32)

(declare-const half_x2 Float32)

(declare-const y4 Float32)

(declare-const magic_num2 (_ BitVec 32))

(declare-const i3 (_ BitVec 32))

(declare-const maths_pack__inv_sqrt__result4 Float32)

(declare-const half_x3 Float32)

(declare-const y5 Float32)

(declare-const magic_num3 (_ BitVec 32))

(declare-const i4 (_ BitVec 32))

(declare-const maths_pack__inv_sqrt__result5 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) x))

;; H
  (assert
  (= half_x1 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000)
  x)))

;; H
  (assert (fp.isFinite32 half_x1))

;; H
  (assert (= y1 x))

;; H
  (assert (fp.isFinite32 y1))

(declare-const abstr7 (_ BitVec 32))

;; H
  (assert (= magic_num1 abstr7))

(declare-const abstr8 (_ BitVec 32))

;; H
  (assert (= o abstr8))

;; H
  (assert (= i1 o))

;; H
  (assert (= i1 result4))

(declare-const abstr9 (_ BitVec 32))

;; H
  (assert (= i2 (bvsub magic_num1 (bvlshr i1 abstr9))))

(declare-const abstr10 Float32)

;; H
  (assert (and (= o1 abstr10) (fp.isFinite32 o1)))

;; H
  (assert (= y1 result5))

;; H
  (assert (= y2 o1))

;; H
  (assert
  (and (= o2 (fp.mul RNE half_x1 y2))
  (fp.isFinite32 (fp.mul RNE half_x1 y2))))

;; H
  (assert (= o3 (fp.mul RNE o2 y2)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 o3)))
(check-sat)
(exit)
