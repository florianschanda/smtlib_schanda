;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-const value__size Int)

(declare-const value__component__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun dynamic_invariant1 ((temp___expr_607 Int)
  (temp___is_init_603 Bool) (temp___skip_constant_604 Bool)
  (temp___do_toplevel_605 Bool)
  (temp___do_typ_inv_606 Bool)) Bool (=>
                                     (or (= temp___is_init_603 true)
                                     (<= 0 10)) (in_range4 temp___expr_607)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun dynamic_invariant5 ((temp___expr_621 Int)
  (temp___is_init_617 Bool) (temp___skip_constant_618 Bool)
  (temp___do_toplevel_619 Bool)
  (temp___do_typ_inv_620 Bool)) Bool (=>
                                     (or (= temp___is_init_617 true)
                                     (<= 0 2)) (in_range6 temp___expr_621)))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant6 ((temp___expr_628 Int)
  (temp___is_init_624 Bool) (temp___skip_constant_625 Bool)
  (temp___do_toplevel_626 Bool)
  (temp___do_typ_inv_627 Bool)) Bool (=>
                                     (or (= temp___is_init_624 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_628)))

(declare-const f Float32)

(declare-const i Int)

(declare-const o Int)

(declare-const o1 Bool)

(declare-const o2 Int)

(declare-const o3 Bool)

(declare-const o4 Int)

(declare-const o5 Bool)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result1 Float32)

(declare-const f1 Float32)

(declare-const f2 Float32)

(declare-const i2 Int)

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const i3 Int)

(declare-const result6 Float32)

(declare-const f3 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f)))

;; H
  (assert (= result i))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 10))

;; H
  (assert (= result1 f))

;; H
  (assert
  (= f1 (fp.mul RNE ((_ to_fp 8 24) RNE (to_real i1)) (fp #b0 #b01111111 #b10000000000000000000000))))

;; H
  (assert
  (and
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 f2)) (=> (<= 1 10) (in_range5 i2)))
  (and (<= 1 i2) (<= i2 10))))

;; H
  (assert (= o1 (ite (= o 1) true false)))

;; H
  (assert (= result2 (ite (not (= o1 true)) true false)))

;; H
  (assert (not (= result2 true)))

;; H
  (assert (= o3 (ite (= o2 1) true false)))

;; H
  (assert (= result3 (ite (not (= o3 true)) true false)))

;; H
  (assert (not (= result3 true)))

;; H
  (assert (= o5 (ite (= o4 1) true false)))

;; H
  (assert (= result4 (ite (not (= o5 true)) true false)))

;; H
  (assert (not (= result4 true)))

;; H
  (assert (not (= i2 10)))

;; H
  (assert (= result5 i2))

;; H
  (assert (= i3 (+ i2 1)))

;; H
  (assert (= result6 f2))

;; H
  (assert
  (= f3 (fp.mul RNE ((_ to_fp 8 24) RNE (to_real i3)) (fp #b0 #b01111111 #b10000000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "spark-text_io.ads", line 81, characters 0-0
  (not false))
(check-sat)
(exit)
