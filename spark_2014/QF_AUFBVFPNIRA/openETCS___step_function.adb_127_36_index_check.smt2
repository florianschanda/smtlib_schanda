;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10)) (in_range1 temp___expr_136)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const step_function__delimiter_entry__delimiter__first__bit Int)

(declare-const step_function__delimiter_entry__delimiter__last__bit Int)

(declare-const step_function__delimiter_entry__delimiter__position Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-const step_function__delimiter_entry__value__first__bit Int)

(declare-const step_function__delimiter_entry__value__last__bit Int)

(declare-const step_function__delimiter_entry__value__position Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-const value__size1 Int)

(declare-const value__component__size Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const step_function__step_function_t__number_of_delimiters__first__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__last__bit Int)

(declare-const step_function__step_function_t__number_of_delimiters__position Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-const step_function__step_function_t__step__first__bit Int)

(declare-const step_function__step_function_t__step__last__bit Int)

(declare-const step_function__step_function_t__step__position Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun dynamic_invariant2 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_142)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const i1 Int)

(declare-const i2 Int)

(declare-const im Int)

(declare-const scan_sfun1 Bool)

(declare-const scan_sfun2 Bool)

(declare-const temp___389 Bool)

(declare-const temp___386 Bool)

(declare-const temp___385 Int)

(declare-const temp___384 Int)

(declare-const temp___383 Int)

(declare-const i Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const i3 Int)

(declare-const j Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const i4 Int)

(declare-const j1 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const i5 Int)

(declare-const j2 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const i6 Int)

(declare-const j3 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const i7 Int)

(declare-const o10 Int)

(declare-const o11 Int)

(declare-const o12 Float32)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Int)

(declare-const i8 Int)

(declare-const j4 Int)

(declare-const o33 Int)

(declare-const o34 Int)

(declare-const i9 Int)

(declare-const j5 Int)

(declare-const o35 Int)

(declare-const o36 Int)

(declare-const o37 Bool)

(declare-const i10 Int)

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 Float32)

(declare-const o41 Int)

(declare-const o42 Int)

(declare-const o43 Float32)

(declare-const o44 Float32)

(declare-const o45 Bool)

(declare-const i11 Int)

(declare-const i21 Int)

(declare-const im1 Int)

(declare-const scan_sfun11 Bool)

(declare-const scan_sfun21 Bool)

(declare-const i12 Int)

(declare-const i22 Int)

(declare-const im2 Int)

(declare-const scan_sfun12 Bool)

(declare-const scan_sfun22 Bool)

(declare-const i13 Int)

(declare-const scan_sfun13 Bool)

(declare-const i23 Int)

(declare-const scan_sfun23 Bool)

(declare-const i14 Int)

(declare-const scan_sfun14 Bool)

(declare-const i24 Int)

(declare-const scan_sfun24 Bool)

(declare-const i15 Int)

(declare-const scan_sfun15 Bool)

(declare-const i25 Int)

(declare-const scan_sfun25 Bool)

(declare-const im3 Int)

(declare-const im4 Int)

(declare-const i16 Int)

(declare-const i26 Int)

(declare-const im5 Int)

(declare-const scan_sfun16 Bool)

(declare-const scan_sfun26 Bool)

(declare-const i17 Int)

(declare-const i27 Int)

(declare-const im6 Int)

(declare-const scan_sfun17 Bool)

(declare-const scan_sfun27 Bool)

(declare-const i18 Int)

(declare-const i28 Int)

(declare-const im7 Int)

(declare-const scan_sfun18 Bool)

(declare-const scan_sfun28 Bool)

;; H
  (assert (= i11 0))

;; H
  (assert (in_range1 i11))

;; H
  (assert (= i21 0))

;; H
  (assert (in_range1 i21))

;; H
  (assert (= im1 0))

;; H
  (assert (in_range1 im1))

;; H
  (assert (= scan_sfun11 (of_int 1)))

;; H
  (assert (= scan_sfun21 (of_int 1)))

;; H
  (assert (<= 0 i12))

;; H
  (assert (<= 0 i22))

;; H
  (assert (<= 0 im2))

;; H
  (assert (<= im2 10))

;; H
  (assert (or (= scan_sfun12 true) (= scan_sfun22 true)))

;; H
  (assert
  (or (and (and (= i12 0) (= i22 0)) (= im2 0))
  (and
  (and (or (< 0 i12) (not (= scan_sfun12 true)))
  (or (< 0 i22) (not (= scan_sfun22 true)))) (< 0 im2))))

;; H
  (assert
  (ite (and (and (< 0 im2) (= scan_sfun12 true)) (= scan_sfun22 true))
  (< im2 (+ i12 i22)) (<= im2 (+ i12 i22))))

;; H
  (assert (not (= scan_sfun12 true)))

;; H
  (assert (<= 0 i4))

;; H
  (assert (<= 0 j1))

;; H
  (assert (<= j1 (- im2 1)))

;; H
  (assert (and (<= 0 j1) (<= j1 10)))

;; H
  (assert (= o4 j1))

(assert
;; WP_parameter_def
 ;; File "step_function.ads", line 89, characters 0-0
  (not (<= 0 i4)))
(check-sat)
(exit)
