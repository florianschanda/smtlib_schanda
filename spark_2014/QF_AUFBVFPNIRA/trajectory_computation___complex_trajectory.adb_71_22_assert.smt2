;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun abstr () (_ BitVec 16))

(declare-fun abstr1 () (_ BitVec 16))

(declare-fun abstr2 () (_ BitVec 16))

(declare-fun abstr3 () (_ BitVec 16))

(declare-fun abstr4 () (_ BitVec 16))

(define-fun nth_bv ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr6 () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun abstr7 () (_ BitVec 8))

(declare-fun abstr8 () (_ BitVec 8))

(declare-fun abstr9 () (_ BitVec 8))

(declare-fun abstr10 () (_ BitVec 8))

(declare-fun abstr11 () (_ BitVec 8))

(define-fun nth_bv1 ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-fun abstr12 () Bool)

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr12)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun abstr13 () (_ BitVec 32))

(declare-fun abstr14 () (_ BitVec 32))

(declare-fun abstr15 () (_ BitVec 32))

(declare-fun abstr16 () (_ BitVec 32))

(declare-fun abstr17 () (_ BitVec 32))

(define-fun nth_bv2 ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-fun abstr18 () Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr18)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun abstr19 () (_ BitVec 64))

(declare-fun abstr20 () (_ BitVec 64))

(declare-fun abstr21 () (_ BitVec 64))

(declare-fun abstr22 () (_ BitVec 64))

(declare-fun abstr23 () (_ BitVec 64))

(define-fun nth_bv3 ((x (_ BitVec 64))
  (i (_ BitVec 64))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000))
                          true false))

(declare-fun abstr24 () Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool abstr24)

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(define-fun dynamic_invariant ((temp___expr_165 (_ BitVec 16))
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_201 Float64)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (or (= temp___is_init_198 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_201) (fp.isNaN temp___expr_201)))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 25000)))

(define-fun dynamic_invariant2 ((temp___expr_207 Int)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=>
                                      (or (= temp___is_init_204 true)
                                      (<= 0 25000)) (in_range2
                                      temp___expr_207)))

(define-fun in_range3 ((x Float64)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_213 Float64)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)) Bool (=>
                                      (or (= temp___is_init_210 true)
                                      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                      (in_range3 temp___expr_213)))

(define-fun in_range4 ((x Float64)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)))))

(define-fun dynamic_invariant4 ((temp___expr_219 Float64)
  (temp___is_init_216 Bool) (temp___skip_constant_217 Bool)
  (temp___do_toplevel_218 Bool)) Bool (=>
                                      (or (= temp___is_init_216 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000000000000000000000000000000000000000000000000000)))
                                      (in_range4 temp___expr_219)))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun factor () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun drag () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun old_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun delta_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_15)))

(declare-fun n_bv () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

;; delta_speed__def_axiom
  (assert
  (= delta_speed (fp.add RNE drag (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010010111100011010100111111011111001110111)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)))))

(declare-fun abstr25 () (_ BitVec 16))

;; n_bv__def_axiom
  (assert (= n_bv abstr25))

(declare-fun speed () Float64)

(declare-fun distance () Float64)

(declare-fun average () Float64)

(declare-fun o () Float64)

(declare-fun o1 () Float64)

(declare-fun o2 () Float64)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Float64)

(declare-fun o6 () Bool)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Float64)

(declare-fun o10 () Bool)

(declare-fun o11 () Float64)

(declare-fun o12 () Int)

(declare-fun result () Float64)

(declare-fun speed1 () Float64)

(declare-fun result1 () Float64)

(declare-fun average1 () Float64)

(declare-fun result2 () Float64)

(declare-fun distance1 () Float64)

(declare-fun speed2 () Float64)

(declare-fun distance2 () Float64)

(declare-fun average2 () Float64)

(declare-fun speed3 () Float64)

(declare-fun distance3 () Float64)

(declare-fun average3 () Float64)

;; H
  (assert (in_range2 n))

;; H
  (assert (in_range3 factor))

;; H
  (assert (in_range4 drag))

;; H
  (assert (not (or (fp.isInfinite speed) (fp.isNaN speed))))

;; H
  (assert (not (or (fp.isInfinite distance) (fp.isNaN distance))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite average) (fp.isNaN average)))))

(declare-fun abstr26 () Bool)

;; H
  (assert (and (< n 25000) (= abstr26 true)))

;; H
  (assert (= speed old_speed))

;; H
  (assert (not (or (fp.isInfinite old_speed) (fp.isNaN old_speed))))

;; H
  (assert
  (= (fp.add RNE drag (fp.mul RNE (fp.mul RNE factor (fp #b0 #b10000000010 #b0011100111010010111100011010100111111011111001110111)) (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)))
  delta_speed))

;; H
  (assert (not (or (fp.isInfinite delta_speed) (fp.isNaN delta_speed))))

;; H
  (assert (= abstr25 n_bv))

;; H
  (assert
  (and (= o (fp.add RNE speed delta_speed))
  (not (or (fp.isInfinite (fp.add RNE speed delta_speed)) (fp.isNaN (fp.add RNE
  speed delta_speed))))))

;; H
  (assert (= speed1 o))

;; H
  (assert
  (and
  (fp.leq (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))
  delta_speed)
  (fp.leq delta_speed (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

(declare-fun abstr27 () Bool)

;; H
  (assert (= abstr27 true))

(declare-fun abstr28 () Bool)

;; H
  (assert (= abstr28 true))

;; H
  (assert
  (fp.eq (fp.add RNE (fp.mul RNE ((_ to_fp_unsigned 11 53) RNE n_bv) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.add RNE ((_ to_fp_unsigned 11 53) RNE
  n_bv) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.eq (fp.add RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.add RNE ((_ to_fp 11 53) RNE (to_real
  n)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.eq (fp.sub RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.add RNE ((_ to_fp 11 53) RNE (to_real
  n)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))))

(declare-fun abstr29 () Float64)

;; H
  (assert
  (fp.eq abstr29 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (fp.eq (fp.add RNE ((_ to_fp 11 53) RNE (to_real n)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) ((_ to_fp 11 53) RNE (to_real (+
  n 1)))))

;; H
  (assert
  (fp.leq (fp.sub RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real n)) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))
  speed1))

;; H
  (assert
  (fp.leq (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+ n 1))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)))
  speed1))

;; H
  (assert
  (fp.leq speed1 (fp.add RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.leq speed1 (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+ n 1))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))))

;; H
  (assert
  (and (= o1 (fp.add RNE old_speed speed1))
  (not (or (fp.isInfinite (fp.add RNE old_speed speed1)) (fp.isNaN (fp.add RNE
  old_speed speed1))))))

;; H
  (assert
  (= o2 (fp.div RNE o1 (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert (= average1 o2))

(declare-fun abstr30 () Float64)

(declare-fun abstr31 () Float64)

;; H
  (assert (and (fp.leq abstr31 old_speed) (fp.leq old_speed abstr30)))

;; H
  (assert
  (=> (fp.leq old_speed speed1)
  (and (fp.leq old_speed average1) (fp.leq average1 speed1))))

;; H
  (assert
  (=> (not (fp.leq old_speed speed1))
  (and (fp.leq speed1 average1) (fp.leq average1 old_speed))))

;; H
  (assert (and (fp.leq abstr31 average1) (fp.leq average1 abstr30)))

;; H
  (assert
  (fp.leq (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))
  average1))

;; H
  (assert
  (fp.leq average1 (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.leq (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE
  average1 (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))

;; H
  (assert
  (fp.leq (fp.mul RNE average1 (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (and
  (= o11 (fp.add RNE distance (fp.mul RNE average1 (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))
  (not (or (fp.isInfinite (fp.add RNE distance (fp.mul RNE average1 (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001)))) (fp.isNaN (fp.add RNE
  distance (fp.mul RNE average1 (fp #b0 #b01111111001 #b0001000100010001000100010001000100010001000100010001))))))))

;; H
  (assert (= distance1 o11))

;; H
  (assert
  (fp.eq (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) ((_ to_fp 11 53) RNE (to_real (+ n 1)))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))) (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+
  n 1))) ((_ to_fp 11 53) RNE (to_real (+ n 2)))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.eq (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) ((_ to_fp 11 53) RNE (to_real (+ n 1)))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))) (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+
  n 1))) ((_ to_fp 11 53) RNE (to_real (+ n 2)))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))))

;; H
  (assert
  (fp.leq (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) ((_ to_fp 11 53) RNE (to_real (+ n 1)))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)))
  distance1))

;; H
  (assert
  (fp.leq distance1 (fp.add RNE (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real
  n)) ((_ to_fp 11 53) RNE (to_real (+ n 1)))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)) (fp.mul RNE (fp.mul RNE (fp.mul RNE (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  n))) (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000)) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000)))))

(assert
;; WP_parameter_def
 ;; File "complex_trajectory.ads", line 29, characters 0-0
  (not
  (fp.leq (fp.mul RNE (fp.mul RNE (fp.mul RNE ((_ to_fp 11 53) RNE (to_real (+
  n 1))) ((_ to_fp 11 53) RNE (to_real (+ n 2)))) (fp.neg (fp #b0 #b10000000101 #b0000010000000000000000000000000000000000000000000000))) (fp #b0 #b01111111110 #b0000000000000000000000000000000000000000000000000000))
  distance1)))
(check-sat)
(exit)
