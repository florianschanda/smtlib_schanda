;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            abstr (- (- 65536 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-const abstr1 (_ BitVec 16))

(declare-const abstr2 (_ BitVec 16))

(declare-const abstr3 (_ BitVec 16))

(declare-const abstr4 (_ BitVec 16))

(declare-const abstr5 (_ BitVec 16))

(define-fun nth_bv ((x (_ BitVec 16))
  (i (_ BitVec 16))) Bool (ite (not (= (bvand (bvlshr x i) #x0001) #x0000))
                          true false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const logger__log_entry__ngrotations__first__bit Int)

(declare-const logger__log_entry__ngrotations__last__bit Int)

(declare-const logger__log_entry__ngrotations__position Int)

;; logger__log_entry__ngrotations__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngrotations__first__bit))

;; logger__log_entry__ngrotations__last__bit_axiom
  (assert
  (< logger__log_entry__ngrotations__first__bit logger__log_entry__ngrotations__last__bit))

;; logger__log_entry__ngrotations__position_axiom
  (assert (<= 0 logger__log_entry__ngrotations__position))

(declare-const logger__log_entry__ngclicktime__first__bit Int)

(declare-const logger__log_entry__ngclicktime__last__bit Int)

(declare-const logger__log_entry__ngclicktime__position Int)

;; logger__log_entry__ngclicktime__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__first__bit))

;; logger__log_entry__ngclicktime__last__bit_axiom
  (assert
  (< logger__log_entry__ngclicktime__first__bit logger__log_entry__ngclicktime__last__bit))

;; logger__log_entry__ngclicktime__position_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__position))

(declare-const logger__log_entry__millisecs__first__bit Int)

(declare-const logger__log_entry__millisecs__last__bit Int)

(declare-const logger__log_entry__millisecs__position Int)

;; logger__log_entry__millisecs__first__bit_axiom
  (assert (<= 0 logger__log_entry__millisecs__first__bit))

;; logger__log_entry__millisecs__last__bit_axiom
  (assert
  (< logger__log_entry__millisecs__first__bit logger__log_entry__millisecs__last__bit))

;; logger__log_entry__millisecs__position_axiom
  (assert (<= 0 logger__log_entry__millisecs__position))

(declare-const logger__log_entry__estimatedgroundvelocity__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__position Int)

;; logger__log_entry__estimatedgroundvelocity__first__bit_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__first__bit))

;; logger__log_entry__estimatedgroundvelocity__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocity__first__bit logger__log_entry__estimatedgroundvelocity__last__bit))

;; logger__log_entry__estimatedgroundvelocity__position_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__position))

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__position Int)

;; logger__log_entry__estimatedgroundvelocityisavailable__first__bit_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__first__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocityisavailable__first__bit
  logger__log_entry__estimatedgroundvelocityisavailable__last__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__position_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__position))

(declare-const abstr7 (_ BitVec 16))

(declare-const abstr8 (_ BitVec 16))

(define-fun in_range1 ((x (_ BitVec 16))) Bool (and (bvule abstr8 x)
                                               (bvule x abstr7)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(define-fun dynamic_invariant ((temp___expr_213 (_ BitVec 16))
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)) Bool (=>
                                      (or (= temp___is_init_210 true)
                                      (bvule abstr8 abstr7)) (in_range1
                                      temp___expr_213)))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (in_range1 low) (in_range1 high))))))

(declare-const value__size1 Int)

(declare-const value__component__size Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(define-fun in_range2 ((x (_ BitVec 16))) Bool (and (bvule abstr8 x)
                                               (bvule x abstr7)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(declare-const value__size2 Int)

(declare-const value__component__size1 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const value__size3 Int)

(declare-const value__alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-const logger__log_database__data__first__bit Int)

(declare-const logger__log_database__data__last__bit Int)

(declare-const logger__log_database__data__position Int)

;; logger__log_database__data__first__bit_axiom
  (assert (<= 0 logger__log_database__data__first__bit))

;; logger__log_database__data__last__bit_axiom
  (assert
  (< logger__log_database__data__first__bit logger__log_database__data__last__bit))

;; logger__log_database__data__position_axiom
  (assert (<= 0 logger__log_database__data__position))

(declare-const logger__log_database__first__first__bit Int)

(declare-const logger__log_database__first__last__bit Int)

(declare-const logger__log_database__first__position Int)

;; logger__log_database__first__first__bit_axiom
  (assert (<= 0 logger__log_database__first__first__bit))

;; logger__log_database__first__last__bit_axiom
  (assert
  (< logger__log_database__first__first__bit logger__log_database__first__last__bit))

;; logger__log_database__first__position_axiom
  (assert (<= 0 logger__log_database__first__position))

(declare-const logger__log_database__last__first__bit Int)

(declare-const logger__log_database__last__last__bit Int)

(declare-const logger__log_database__last__position Int)

;; logger__log_database__last__first__bit_axiom
  (assert (<= 0 logger__log_database__last__first__bit))

;; logger__log_database__last__last__bit_axiom
  (assert
  (< logger__log_database__last__first__bit logger__log_database__last__last__bit))

;; logger__log_database__last__position_axiom
  (assert (<= 0 logger__log_database__last__position))

(declare-const logger__log_database__empty__first__bit Int)

(declare-const logger__log_database__empty__last__bit Int)

(declare-const logger__log_database__empty__position Int)

;; logger__log_database__empty__first__bit_axiom
  (assert (<= 0 logger__log_database__empty__first__bit))

;; logger__log_database__empty__last__bit_axiom
  (assert
  (< logger__log_database__empty__first__bit logger__log_database__empty__last__bit))

;; logger__log_database__empty__position_axiom
  (assert (<= 0 logger__log_database__empty__position))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(define-fun dynamic_invariant3 ((temp___expr_166 (_ BitVec 16))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool true)

(declare-const tmp (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_property1 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property2 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))))

(declare-const value__size4 Int)

(declare-const value__component__size2 Int)

(declare-const value__alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r4b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r5b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property3 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property4 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (dynamic_property3 range_first range_last
                             low) (dynamic_property3 range_first range_last
                             high))))))

(declare-const value__size5 Int)

(declare-const value__component__size3 Int)

(declare-const value__alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

(declare-const r8b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r11b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_property5 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property6 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (dynamic_property5 range_first range_last
                             low) (dynamic_property5 range_first range_last
                             high))))))

(declare-const value__size6 Int)

(declare-const value__component__size4 Int)

(declare-const value__alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

(define-fun dynamic_property7 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property8 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (dynamic_property7 range_first range_last
                             low) (dynamic_property7 range_first range_last
                             high))))))

(declare-const value__size7 Int)

(declare-const value__component__size5 Int)

(declare-const value__alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; value__component__size_axiom
  (assert (<= 0 value__component__size5))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

(declare-const event_log__split_fields Bool)

(declare-const o Bool)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const logger__log_content__B_1__tmp__assume (_ BitVec 16))

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 (_ BitVec 16))

(declare-const o11 Int)

(declare-const o12 Int)

(declare-const o13 Int)

;; H
  (assert (not (= event_log__split_fields true)))

;; H
  (assert (= o2 (- o1 1)))

;; H
  (assert (and (= o3 o2) (in_range_int o2)))

(declare-const abstr9 (_ BitVec 16))

;; H
  (assert (= logger__log_content__B_1__tmp__assume abstr9))

;; H
  (assert (= logger__log_content__B_1__tmp__assume tmp))

;; H
  (assert (in_range1 tmp))

;; H
  (assert (in_range1 r8b))

;; H
  (assert (in_range1 r11b))

;; H
  (assert (bvule abstr8 r11b))

(assert
;; WP_parameter_def
 ;; File "logger.ads", line 23, characters 0-0
  (not (bvule abstr8 abstr8)))
(check-sat)
(exit)
