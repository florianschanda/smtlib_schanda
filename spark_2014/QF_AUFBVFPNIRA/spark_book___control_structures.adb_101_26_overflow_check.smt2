;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant3 ((temp___expr_466 Int)
  (temp___is_init_463 Bool) (temp___skip_constant_464 Bool)
  (temp___do_toplevel_465 Bool)) Bool (=>
                                      (or (= temp___is_init_463 true)
                                      (<= 0 255)) (in_range3
                                      temp___expr_466)))

(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(define-fun dynamic_invariant4 ((temp___expr_472 Int)
  (temp___is_init_469 Bool) (temp___skip_constant_470 Bool)
  (temp___do_toplevel_471 Bool)) Bool (=>
                                      (or (= temp___is_init_469 true)
                                      (<= 2 16)) (in_range4 temp___expr_472)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant5 ((temp___expr_508 Int)
  (temp___is_init_505 Bool) (temp___skip_constant_506 Bool)
  (temp___do_toplevel_507 Bool)) Bool (=>
                                      (or (= temp___is_init_505 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_508)))

(define-fun in_range6 ((x Int)) Bool (and (<= 65 x) (<= x 90)))

(define-fun dynamic_invariant6 ((temp___expr_521 Int)
  (temp___is_init_518 Bool) (temp___skip_constant_519 Bool)
  (temp___do_toplevel_520 Bool)) Bool (=>
                                      (or (= temp___is_init_518 true)
                                      (<= 65 90)) (in_range6
                                      temp___expr_521)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const tolerance Float32)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const r4b Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const r5b Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const r7b Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const r8b Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const c10b Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

;; tolerance__def_axiom
  (assert (= tolerance (fp #b0 #b01110001 #b10100011011011100010111)))

(declare-const default_width Int)

(declare-const default_base Int)

(declare-const a Int)

(declare-const b Int)

(declare-const c Int)

(declare-const d Int)

(declare-const e Int)

(declare-const f Int)

(declare-const g Int)

(declare-const h Int)

(declare-const ch Int)

(declare-const temperature Int)

(declare-const valve_setting Int)

(declare-const value Int)

(declare-const sum Int)

(declare-const success Bool)

(declare-const approx Float32)

(declare-const x Float32)

(declare-const y Float32)

(declare-const letter Int)

(declare-const count Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const temp___525 Int)

(declare-const temp___524 Int)

(declare-const o15 Int)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const temp___526 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Bool)

(declare-const o29 Int)

(declare-const g1 Int)

(declare-const letter1 Int)

(declare-const a1 Int)

(declare-const b1 Int)

(declare-const c1 Int)

(declare-const d1 Int)

(declare-const e1 Int)

(declare-const ch1 Int)

(declare-const x1 Float32)

(declare-const a2 Int)

(declare-const d2 Int)

(declare-const b2 Int)

(declare-const e2 Int)

(declare-const f1 Int)

(declare-const e3 Int)

(declare-const f2 Int)

(declare-const f3 Int)

(declare-const f4 Int)

(declare-const f5 Int)

(declare-const g2 Int)

(declare-const g3 Int)

(declare-const g4 Int)

(declare-const success1 Bool)

(declare-const h1 Int)

(declare-const h2 Int)

(declare-const h3 Int)

(declare-const h4 Int)

(declare-const h5 Int)

(declare-const success2 Bool)

(declare-const c2 Int)

(declare-const c3 Int)

(declare-const c4 Int)

(declare-const c5 Int)

(declare-const c6 Int)

(declare-const c7 Int)

(declare-const c8 Int)

(declare-const y1 Float32)

(declare-const y2 Float32)

(declare-const y3 Float32)

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const value1 Int)

(declare-const sum1 Int)

(declare-const value2 Int)

(declare-const sum2 Int)

(declare-const ada__integer_text_io__get__2__item Int)

(declare-const value3 Int)

(declare-const sum3 Int)

(declare-const value4 Int)

(declare-const sum4 Int)

(declare-const value5 Int)

(declare-const sum5 Int)

(declare-const approx1 Float32)

(declare-const result5 Bool)

(declare-const approx2 Float32)

(declare-const approx3 Float32)

(declare-const result6 Bool)

(declare-const approx4 Float32)

(declare-const approx5 Float32)

(declare-const count1 Int)

(declare-const count2 Int)

(declare-const count3 Int)

(declare-const count4 Int)

(declare-const count5 Int)

(declare-const count6 Int)

(declare-const count7 Int)

(declare-const count8 Int)

(declare-const a3 Int)

(declare-const b3 Int)

(declare-const count9 Int)

(declare-const count10 Int)

(declare-const count11 Int)

(declare-const count12 Int)

(declare-const count13 Int)

(declare-const count14 Int)

(declare-const count15 Int)

(declare-const count16 Int)

(declare-const temperature1 Int)

(declare-const valve_setting1 Int)

(declare-const temperature2 Int)

;; H
  (assert (in_range3 default_width))

;; H
  (assert (in_range4 default_base))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 a)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 b)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 d)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 e)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 f)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 g)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 h)))

;; H
  (assert (=> (<= 0 255) (in_range2 ch)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 temperature)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 valve_setting)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 value)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 sum)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 x)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 y)))

;; H
  (assert (fp.isFinite32 tolerance))

;; H
  (assert (= letter1 81))

;; H
  (assert (in_range6 letter1))

;; H
  (assert (= a1 1))

;; H
  (assert (= b1 2))

;; H
  (assert (= c1 3))

;; H
  (assert (= d1 3))

;; H
  (assert (= e1 4))

;; H
  (assert (= ch1 68))

;; H
  (assert (= x1 (fp #b0 #b10000101 #b11101101110100011000001)))

;; H
  (assert (=> (< a1 0) (and (= o (- a1)) (in_range1 (- a1)))))

;; H
  (assert (=> (< a1 0) (= a2 o)))

;; H
  (assert (=> (< a1 0) (= d2 1)))

;; H
  (assert (=> (not (< a1 0)) (= d2 d1)))

;; H
  (assert (=> (not (< a1 0)) (= a2 a1)))

;; H
  (assert (=> (and (<= 1 a2) (<= a2 12)) (= b2 17)))

;; H
  (assert (=> (not (and (<= 1 a2) (<= a2 12))) (= b2 b1)))

;; H
  (assert (=> (< b2 a2) (= e2 1)))

;; H
  (assert (=> (< b2 a2) (= f1 a2)))

;; H
  (assert (=> (not (< b2 a2)) (= e3 2)))

;; H
  (assert (=> (not (< b2 a2)) (= f2 b2)))

;; H
  (assert (=> (not (< b2 a2)) (= f1 f2)))

;; H
  (assert (=> (not (< b2 a2)) (= e2 e3)))

;; H
  (assert (=> (= a2 b2) (= f3 3)))

;; H
  (assert (=> (not (= a2 b2)) (=> (< b2 a2) (= f4 4))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f5 5))))

;; H
  (assert (=> (not (= a2 b2)) (=> (not (< b2 a2)) (= f4 f5))))

;; H
  (assert (=> (not (= a2 b2)) (= f3 f4)))

;; H
  (assert (=> (and (< b2 a2) (< c1 a2)) (= g2 6)))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (and (< a2 b2) (< c1 b2)) (= g3 7))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (and (< a2 c1) (< b2 c1)) (= g4 8)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2)))
  (=> (not (and (< a2 c1) (< b2 c1))) (= g4 g1)))))

;; H
  (assert
  (=> (not (and (< b2 a2) (< c1 a2)))
  (=> (not (and (< a2 b2) (< c1 b2))) (= g3 g4))))

;; H
  (assert (=> (not (and (< b2 a2) (< c1 a2))) (= g2 g3)))

;; H
  (assert (= success1 (of_int 1)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= h1 1)))

;; H
  (assert (=> (and (<= 97 ch1) (<= ch1 122)) (= success2 success1)))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= h2 2))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (and (<= 65 ch1) (<= ch1 90)) (= success2 success1))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= h3 3)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (and (<= 48 ch1) (<= ch1 57)) (= success2 success1)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))) (= h4 4))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))
  (= success2 success1))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h5 5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63))))
  (= success2 (of_int 0)))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57)))
  (=> (not (=> (not (= ch1 46)) (=> (not (= ch1 33)) (= ch1 63)))) (= h4 h5))))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90)))
  (=> (not (and (<= 48 ch1) (<= ch1 57))) (= h3 h4)))))

;; H
  (assert
  (=> (not (and (<= 97 ch1) (<= ch1 122)))
  (=> (not (and (<= 65 ch1) (<= ch1 90))) (= h2 h3))))

;; H
  (assert (=> (not (and (<= 97 ch1) (<= ch1 122))) (= h1 h2)))

;; H
  (assert (=> (< b2 a2) (and (= o1 (+ d2 5)) (in_range1 (+ d2 5)))))

;; H
  (assert (=> (< b2 a2) (= c2 o1)))

(declare-const abstr Int)

;; H
  (assert (=> (not (< b2 a2)) (= c3 abstr)))

;; H
  (assert (=> (not (< b2 a2)) (= c2 c3)))

;; H
  (assert (< b2 a2))

(assert
;; WP_parameter_def
 ;; File "control_structures.adb", line 29, characters 0-0
  (not (in_range1 (+ d2 5))))
(check-sat)
(exit)
