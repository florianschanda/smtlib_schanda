;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun lower () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun upper () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun list_handler__integer_list__list_node__value__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__value__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__value__position () Int)

;; list_handler__integer_list__list_node__value__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__first__bit))

;; list_handler__integer_list__list_node__value__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__value__first__bit list_handler__integer_list__list_node__value__last__bit))

;; list_handler__integer_list__list_node__value__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__position))

(declare-fun list_handler__integer_list__list_node__next__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__next__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__next__position () Int)

;; list_handler__integer_list__list_node__next__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__first__bit))

;; list_handler__integer_list__list_node__next__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__next__first__bit list_handler__integer_list__list_node__next__last__bit))

;; list_handler__integer_list__list_node__next__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__position))

(declare-fun list_handler__integer_list__list_node__previous__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__previous__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__previous__position () Int)

;; list_handler__integer_list__list_node__previous__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__first__bit))

;; list_handler__integer_list__list_node__previous__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__previous__first__bit list_handler__integer_list__list_node__previous__last__bit))

;; list_handler__integer_list__list_node__previous__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__position))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun dynamic_invariant1 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 3)) (in_range4 temp___expr_147)))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 0 128)) (in_range3
                                      temp___expr_164)))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(define-fun dynamic_invariant3 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= 0 128)) (in_range5
                                      temp___expr_153)))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_invariant4 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_141)))

(declare-fun count () Int)

(declare-fun free () Int)

(declare-fun current () Int)

(declare-fun status () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun result () Int)

(declare-fun current1 () Int)

(declare-fun count1 () Int)

(declare-fun free1 () Int)

(declare-fun current2 () Int)

(declare-fun status1 () Int)

(declare-fun count2 () Int)

(declare-fun free2 () Int)

(declare-fun status2 () Int)

;; H
  (assert (in_range1 lower))

;; H
  (assert (in_range1 upper))

;; H
  (assert (in_range3 count))

;; H
  (assert (in_range3 free))

;; H
  (assert (= result current))

;; H
  (assert (= current1 lower))

;; H
  (assert (in_range1 current1))

;; H
  (assert (=> (<= 0 3) (in_range4 status)))

;; H
  (assert (<= current1 upper))

;; H
  (assert
  (and
  (and
  (and
  (and (in_range3 free1)
  (=> (<= (- 2147483648) 2147483647) (in_range1 current2)))
  (=> (<= 0 3) (in_range4 status1))) (in_range3 count1)) (<= current2
  upper)))

;; H
  (assert
  (and (and (in_range4 status2) (in_range3 count2)) (in_range3 free2)))

;; H
  (assert (= status2 0))

;; H
  (assert (not (= current2 upper)))

(assert
;; WP_parameter_def
 ;; File "double_list.adb", line 5, characters 0-0
  (not (in_range1 (+ current2 1))))
(check-sat)
(exit)
