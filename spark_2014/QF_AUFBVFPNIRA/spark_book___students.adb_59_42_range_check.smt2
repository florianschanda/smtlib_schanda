;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 512)))

(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun abstr () Int)

(define-fun pos_div_relation ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(declare-fun abstr1 () Int)

(define-fun pos_div_relation_rna ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr1))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun abstr2 () Int)

(define-fun pos_div_relation1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr2))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(declare-fun abstr3 () Int)

(define-fun pos_div_relation_rna1 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr3))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 9999999) x) (<= x 9999999)))

(declare-fun abstr4 () Int)

(define-fun pos_div_relation2 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr4))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (and (<= exact res) (<= res (+ exact 1)))))))

(declare-fun abstr5 () Int)

(define-fun pos_div_relation_rna2 ((res Int) (num Int)
  (den Int)) Bool (let ((exact abstr5))
                  (ite (= num 0) (= res 0)
                  (ite (= num (* exact den)) (= res exact)
                  (ite (< (- num (* exact den)) (- (* (+ exact 1) den) num))
                  (= res exact) (= res (+ exact 1)))))))

(define-fun in_range6 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun value__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 999999)))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun students__student_record__birth_date__first__bit () Int)

(declare-fun students__student_record__birth_date__last__bit () Int)

(declare-fun students__student_record__birth_date__position () Int)

;; students__student_record__birth_date__first__bit_axiom
  (assert (<= 0 students__student_record__birth_date__first__bit))

;; students__student_record__birth_date__last__bit_axiom
  (assert
  (< students__student_record__birth_date__first__bit students__student_record__birth_date__last__bit))

;; students__student_record__birth_date__position_axiom
  (assert (<= 0 students__student_record__birth_date__position))

(declare-fun students__student_record__id__first__bit () Int)

(declare-fun students__student_record__id__last__bit () Int)

(declare-fun students__student_record__id__position () Int)

;; students__student_record__id__first__bit_axiom
  (assert (<= 0 students__student_record__id__first__bit))

;; students__student_record__id__last__bit_axiom
  (assert
  (< students__student_record__id__first__bit students__student_record__id__last__bit))

;; students__student_record__id__position_axiom
  (assert (<= 0 students__student_record__id__position))

(declare-fun students__student_record__gender__first__bit () Int)

(declare-fun students__student_record__gender__last__bit () Int)

(declare-fun students__student_record__gender__position () Int)

;; students__student_record__gender__first__bit_axiom
  (assert (<= 0 students__student_record__gender__first__bit))

;; students__student_record__gender__last__bit_axiom
  (assert
  (< students__student_record__gender__first__bit students__student_record__gender__last__bit))

;; students__student_record__gender__position_axiom
  (assert (<= 0 students__student_record__gender__position))

(declare-fun students__student_record__gpa__first__bit () Int)

(declare-fun students__student_record__gpa__last__bit () Int)

(declare-fun students__student_record__gpa__position () Int)

;; students__student_record__gpa__first__bit_axiom
  (assert (<= 0 students__student_record__gpa__first__bit))

;; students__student_record__gpa__last__bit_axiom
  (assert
  (< students__student_record__gpa__first__bit students__student_record__gpa__last__bit))

;; students__student_record__gpa__position_axiom
  (assert (<= 0 students__student_record__gpa__position))

(declare-fun students__student_record__part_time__first__bit () Int)

(declare-fun students__student_record__part_time__last__bit () Int)

(declare-fun students__student_record__part_time__position () Int)

;; students__student_record__part_time__first__bit_axiom
  (assert (<= 0 students__student_record__part_time__first__bit))

;; students__student_record__part_time__last__bit_axiom
  (assert
  (< students__student_record__part_time__first__bit students__student_record__part_time__last__bit))

;; students__student_record__part_time__position_axiom
  (assert (<= 0 students__student_record__part_time__position))

(declare-fun students__student_record__in_state__first__bit () Int)

(declare-fun students__student_record__in_state__last__bit () Int)

(declare-fun students__student_record__in_state__position () Int)

;; students__student_record__in_state__first__bit_axiom
  (assert (<= 0 students__student_record__in_state__first__bit))

;; students__student_record__in_state__last__bit_axiom
  (assert
  (< students__student_record__in_state__first__bit students__student_record__in_state__last__bit))

;; students__student_record__in_state__position_axiom
  (assert (<= 0 students__student_record__in_state__position))

(declare-fun students__student_record__resident__first__bit () Int)

(declare-fun students__student_record__resident__last__bit () Int)

(declare-fun students__student_record__resident__position () Int)

;; students__student_record__resident__first__bit_axiom
  (assert (<= 0 students__student_record__resident__first__bit))

;; students__student_record__resident__last__bit_axiom
  (assert
  (< students__student_record__resident__first__bit students__student_record__resident__last__bit))

;; students__student_record__resident__position_axiom
  (assert (<= 0 students__student_record__resident__position))

(declare-fun students__student_record__meal_plan__first__bit () Int)

(declare-fun students__student_record__meal_plan__last__bit () Int)

(declare-fun students__student_record__meal_plan__position () Int)

;; students__student_record__meal_plan__first__bit_axiom
  (assert (<= 0 students__student_record__meal_plan__first__bit))

;; students__student_record__meal_plan__last__bit_axiom
  (assert
  (< students__student_record__meal_plan__first__bit students__student_record__meal_plan__last__bit))

;; students__student_record__meal_plan__position_axiom
  (assert (<= 0 students__student_record__meal_plan__position))

(declare-fun students__student_record__self_insured__first__bit () Int)

(declare-fun students__student_record__self_insured__last__bit () Int)

(declare-fun students__student_record__self_insured__position () Int)

;; students__student_record__self_insured__first__bit_axiom
  (assert (<= 0 students__student_record__self_insured__first__bit))

;; students__student_record__self_insured__last__bit_axiom
  (assert
  (< students__student_record__self_insured__first__bit students__student_record__self_insured__last__bit))

;; students__student_record__self_insured__position_axiom
  (assert (<= 0 students__student_record__self_insured__position))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant ((temp___expr_215 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)) Bool (=>
                                      (or (= temp___is_init_212 true)
                                      (<= 0 2)) (in_range1 temp___expr_215)))

(define-fun dynamic_invariant1 ((temp___expr_221 Int)
  (temp___is_init_218 Bool) (temp___skip_constant_219 Bool)
  (temp___do_toplevel_220 Bool)) Bool (=>
                                      (or (= temp___is_init_218 true)
                                      (<= 0 3)) (in_range2 temp___expr_221)))

(define-fun dynamic_invariant2 ((temp___expr_227 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)) Bool (=>
                                      (or (= temp___is_init_224 true)
                                      (<= 0 999999)) (in_range9
                                      temp___expr_227)))

(define-fun dynamic_invariant3 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 2000 2099)) (in_range6
                                      temp___expr_135)))

(define-fun dynamic_invariant4 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 1 12)) (in_range7 temp___expr_141)))

(define-fun dynamic_invariant5 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 1 31)) (in_range8 temp___expr_147)))

(assert
;; WP_parameter_def
 ;; File "students.ads", line 11, characters 0-0
  (not false))
(check-sat)
(exit)
