;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 46)))

(define-fun dynamic_invariant ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 0 46)) (in_range2 temp___expr_185)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const number_theory__fib__result Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const result Int)

(declare-const number_theory__fib__result1 Int)

(declare-const number_theory__fib__result2 Int)

(declare-const number_theory__fib__result3 Int)

(declare-const number_theory__fib__result4 Int)

(declare-const number_theory__fib__result5 Int)

;; H
  (assert (in_range2 n))

;; H
  (assert (= number_theory__fib__result1 number_theory__fib__result2))

;; H
  (assert (= number_theory__fib__result3 number_theory__fib__result1))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= o5 n)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (and (= o1 (- n 2)) (in_range2 (- n 2)))))

(declare-const abstr Float32)

(declare-const abstr1 Int)

(declare-const abstr2 Int)

(declare-const abstr3 Int)

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (and (= o2 abstr3)
  (and (in_range3 o2)
  (and (= o2 (ite (or (= o1 0) (= o1 1)) o1 (+ abstr1 abstr2)))
  (fp.lt ((_ to_fp 8 24) RNE (to_real o2)) (fp.add RNE (fp.div RNE abstr (fp #b0 #b10000000 #b00011110001101010100000)) (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (and (= o (- n 1)) (in_range2 (- n 1)))))

(declare-const abstr4 Float32)

(declare-const abstr5 Int)

(declare-const abstr6 Int)

(declare-const abstr7 Int)

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (and (= o3 abstr7)
  (and (in_range3 o3)
  (and (= o3 (ite (or (= o 0) (= o 1)) o (+ abstr5 abstr6)))
  (fp.lt ((_ to_fp 8 24) RNE (to_real o3)) (fp.add RNE (fp.div RNE abstr4 (fp #b0 #b10000000 #b00011110001101010100000)) (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= o4 (+ o3 o2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1))) (and (= o5 o4) (in_range1 o4))))

;; H
  (assert (= number_theory__fib__result1 o5))

;; H
  (assert (= number_theory__fib__result5 number_theory__fib__result3))

;; H
  (assert
  (=> (< n 0)
  (not (fp.eq (fp #b0 #b01111111 #b10011110001110111100111) ((_ to_fp 8 24) #x00000000)))))

(declare-const abstr8 Float32)

;; H
  (assert (= o6 abstr8))

;; H
  (assert (and (= o7 o6) (fp.isFinite32 o6)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (not (fp.isZero      (fp #b0 #b10000000 #b00011110001101010100000)))))
(check-sat)
(exit)
