;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun abstr () (_ BitVec 8))

(declare-fun abstr1 () (_ BitVec 8))

(declare-fun abstr2 () (_ BitVec 8))

(declare-fun abstr3 () (_ BitVec 8))

(declare-fun abstr4 () (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr6 () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_202 Float32)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_202) (fp.isNaN temp___expr_202)))))

(declare-fun abstr7 () (_ BitVec 8))

(declare-fun abstr8 () (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr7)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 49)))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule abstr8 abstr7)) (in_range2
                                      temp___expr_208)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun abstr9 () (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr9)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(define-fun dynamic_invariant3 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule abstr8 abstr9)) (in_range3
                                      temp___expr_214)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr9)))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(define-fun dynamic_invariant4 ((temp___expr_244 (_ BitVec 8))
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)) Bool (=>
                                      (or (= temp___is_init_241 true)
                                      (bvule abstr8 abstr9)) (in_range4
                                      temp___expr_244)))

(declare-fun battery_level () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun c () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun current_time () (_ BitVec 8))

(declare-fun counter () (_ BitVec 8))

(declare-fun o () (_ BitVec 8))

(declare-fun o1 () (_ BitVec 8))

(declare-fun o2 () Bool)

(declare-fun o3 () Bool)

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 8))

(declare-fun temp___280 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 8))

(declare-fun temp___282 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 8))

(declare-fun o9 () (_ BitVec 8))

(declare-fun temp___279 () (_ BitVec 8))

(declare-fun o10 () (_ BitVec 8))

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () Float32)

(declare-fun result () (_ BitVec 8))

(declare-fun current_time1 () (_ BitVec 8))

(declare-fun result1 () (_ BitVec 8))

(declare-fun counter1 () (_ BitVec 8))

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun result7 () (_ BitVec 8))

(declare-fun counter2 () (_ BitVec 8))

(declare-fun current_time2 () (_ BitVec 8))

(declare-fun counter3 () (_ BitVec 8))

(declare-fun current_time3 () (_ BitVec 8))

(declare-fun counter4 () (_ BitVec 8))

;; H
  (assert (in_range4 counter))

;; H
  (assert (in_range2 current_time))

;; H
  (assert (not (or (fp.isInfinite battery_level) (fp.isNaN battery_level))))

;; H
  (assert (= counter c))

(assert
;; WP_parameter_def
 ;; File "failsafe.adb", line 31, characters 0-0
  (not false))
(check-sat)
(exit)
