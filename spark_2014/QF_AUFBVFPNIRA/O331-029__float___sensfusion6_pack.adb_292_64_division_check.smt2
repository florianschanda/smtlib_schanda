;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(define-fun in_range1 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000111 #b01101000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_1312 Float32)
  (temp___is_init_1309 Bool) (temp___skip_constant_1310 Bool)
  (temp___do_toplevel_1311 Bool)) Bool (=>
                                       (or (= temp___is_init_1309 true)
                                       (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000)))
                                       (in_range1 temp___expr_1312)))

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_1336 Float32)
  (temp___is_init_1333 Bool) (temp___skip_constant_1334 Bool)
  (temp___do_toplevel_1335 Bool)) Bool (=>
                                       (or (= temp___is_init_1333 true)
                                       (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                       (in_range2 temp___expr_1336)))

(define-fun in_range3 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(define-fun dynamic_invariant3 ((temp___expr_1342 Float32)
  (temp___is_init_1339 Bool) (temp___skip_constant_1340 Bool)
  (temp___do_toplevel_1341 Bool)) Bool (=>
                                       (or (= temp___is_init_1339 true)
                                       (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) (fp #b0 #b10000001 #b10010010000111111011011)))
                                       (in_range3 temp___expr_1342)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun euler_roll_actual () Float32)

(declare-fun euler_pitch_actual () Float32)

(declare-fun euler_yaw_actual () Float32)

(declare-fun q0 () Float32)

(declare-fun q1 () Float32)

(declare-fun q2 () Float32)

(declare-fun q3 () Float32)

(declare-fun grav_x () Float32)

(declare-fun grav_y () Float32)

(declare-fun grav_z () Float32)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun result () Float32)

(declare-fun grav_x1 () Float32)

(declare-fun result1 () Float32)

(declare-fun grav_y1 () Float32)

(declare-fun result2 () Float32)

(declare-fun grav_z1 () Float32)

(declare-fun result3 () Float32)

(declare-fun grav_x2 () Float32)

(declare-fun result4 () Float32)

(declare-fun euler_yaw_actual1 () Float32)

(declare-fun result5 () Float32)

(declare-fun euler_pitch_actual1 () Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_roll_actual)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_pitch_actual)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_yaw_actual)))

;; H
  (assert (in_range2 q0))

;; H
  (assert (in_range2 q1))

;; H
  (assert (in_range2 q2))

;; H
  (assert (in_range2 q3))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite grav_x) (fp.isNaN grav_x)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite grav_y) (fp.isNaN grav_y)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite grav_z) (fp.isNaN grav_z)))))

;; H
  (assert (= result grav_x))

;; H
  (assert
  (= grav_x1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.sub RNE (fp.mul RNE
  q1 q3) (fp.mul RNE q0 q2)))))

;; H
  (assert (= result1 grav_y))

;; H
  (assert
  (= grav_y1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.add RNE (fp.mul RNE
  q0 q1) (fp.mul RNE q2 q3)))))

;; H
  (assert (= result2 grav_z))

;; H
  (assert
  (= grav_z1 (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp.mul RNE
  q1 q1)) (fp.mul RNE q2 q2)) (fp.mul RNE q3 q3))))

(declare-fun abstr1 () Float32)

;; H
  (assert
  (and (= o abstr1)
  (and (not (or (fp.isInfinite o) (fp.isNaN o)))
  (ite (fp.lt grav_x1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) grav_x1)
  (fp.eq o (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o grav_x1))))))

;; H
  (assert (= result3 grav_x1))

;; H
  (assert (= grav_x2 o))

(declare-fun abstr2 () Float32)

;; H
  (assert (and (= o1 abstr2) (in_range3 o1)))

;; H
  (assert
  (= o2 (fp.mul RNE o1 (fp #b0 #b10000110 #b01101000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "sensfusion6_pack.adb", line 248, characters 0-0
  (not (not (fp.isZero      (fp #b0 #b10000000 #b10010010000111111011011)))))
(check-sat)
(exit)
