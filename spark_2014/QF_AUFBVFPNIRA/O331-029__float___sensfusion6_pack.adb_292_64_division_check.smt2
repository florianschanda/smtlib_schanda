;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x)
                                        (and
                                        (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) x)
                                        (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(define-fun dynamic_invariant1 ((temp___expr_1557 Float32)
  (temp___is_init_1553 Bool) (temp___skip_constant_1554 Bool)
  (temp___do_toplevel_1555 Bool)
  (temp___do_typ_inv_1556 Bool)) Bool (=>
                                      (or (= temp___is_init_1553 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range temp___expr_1557)))

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000111 #b01101000000000000000000)))))

(define-fun dynamic_invariant2 ((temp___expr_1522 Float32)
  (temp___is_init_1518 Bool) (temp___skip_constant_1519 Bool)
  (temp___do_toplevel_1520 Bool)
  (temp___do_typ_inv_1521 Bool)) Bool (=>
                                      (or (= temp___is_init_1518 true)
                                      (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000)))
                                      (in_range1 temp___expr_1522)))

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(define-fun dynamic_invariant3 ((temp___expr_1550 Float32)
  (temp___is_init_1546 Bool) (temp___skip_constant_1547 Bool)
  (temp___do_toplevel_1548 Bool)
  (temp___do_typ_inv_1549 Bool)) Bool (=>
                                      (or (= temp___is_init_1546 true)
                                      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                      (in_range2 temp___expr_1550)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const euler_roll_actual Float32)

(declare-const euler_pitch_actual Float32)

(declare-const euler_yaw_actual Float32)

(declare-const q0 Float32)

(declare-const q1 Float32)

(declare-const q2 Float32)

(declare-const q3 Float32)

(declare-const grav_x Float32)

(declare-const grav_y Float32)

(declare-const grav_z Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const result Float32)

(declare-const grav_x1 Float32)

(declare-const result1 Float32)

(declare-const grav_y1 Float32)

(declare-const result2 Float32)

(declare-const grav_z1 Float32)

(declare-const result3 Float32)

(declare-const grav_x2 Float32)

(declare-const result4 Float32)

(declare-const euler_yaw_actual1 Float32)

(declare-const result5 Float32)

(declare-const euler_pitch_actual1 Float32)

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_roll_actual)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_pitch_actual)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000))
  (in_range1 euler_yaw_actual)))

;; H
  (assert (in_range2 q0))

;; H
  (assert (in_range2 q1))

;; H
  (assert (in_range2 q2))

;; H
  (assert (in_range2 q3))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 grav_x)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 grav_y)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 grav_z)))

;; H
  (assert (= result grav_x))

;; H
  (assert
  (= grav_x1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.sub RNE (fp.mul RNE
  q1 q3) (fp.mul RNE q0 q2)))))

;; H
  (assert (= result1 grav_y))

;; H
  (assert
  (= grav_y1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.add RNE (fp.mul RNE
  q0 q1) (fp.mul RNE q2 q3)))))

;; H
  (assert (= result2 grav_z))

;; H
  (assert
  (= grav_z1 (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp.mul RNE
  q1 q1)) (fp.mul RNE q2 q2)) (fp.mul RNE q3 q3))))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o abstr)
  (and (fp.isFinite32 o)
  (ite (fp.lt grav_x1 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (fp.eq o (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) grav_x1)
  (fp.eq o (fp #b0 #b01111111 #b00000000000000000000000)) (fp.eq o grav_x1))))))

;; H
  (assert (= result3 grav_x1))

;; H
  (assert (= grav_x2 o))

(declare-const abstr1 Float32)

;; H
  (assert (and (= o1 abstr1) (in_range o1)))

;; H
  (assert
  (= o2 (fp.mul RNE o1 (fp #b0 #b10000110 #b01101000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "sensfusion6_pack.adb", line 248, characters 0-0
  (not (not (fp.isZero (fp #b0 #b10000000 #b10010010000111111011011)))))
(check-sat)
(exit)
