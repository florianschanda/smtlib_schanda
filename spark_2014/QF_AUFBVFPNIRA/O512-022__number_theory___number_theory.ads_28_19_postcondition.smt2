;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 46)))

(define-fun dynamic_invariant2 ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 0 46)) (in_range4 temp___expr_185)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const result__ Int)

(declare-const old__ Int)

(declare-const oldest Int)

(declare-const temp Int)

(declare-const i Int)

(declare-const number_theory__fibonacci__result Int)

(declare-const temp___194 Int)

(declare-const temp___193 Int)

(declare-const temp___192 Int)

(declare-const temp___191 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Bool)

(declare-const o4 Int)

(declare-const old__1 Int)

(declare-const oldest1 Int)

(declare-const temp1 Int)

(declare-const i1 Int)

(declare-const result Int)

(declare-const result__1 Int)

(declare-const result1 Int)

(declare-const oldest2 Int)

(declare-const result2 Int)

(declare-const old__2 Int)

(declare-const result3 Int)

(declare-const i2 Int)

(declare-const old__3 Int)

(declare-const oldest3 Int)

(declare-const temp2 Int)

(declare-const i3 Int)

(declare-const result4 Int)

(declare-const temp3 Int)

(declare-const result5 Int)

(declare-const oldest4 Int)

(declare-const result6 Int)

(declare-const old__4 Int)

(declare-const result7 Int)

(declare-const i4 Int)

(declare-const old__5 Int)

(declare-const oldest5 Int)

(declare-const temp4 Int)

(declare-const i5 Int)

(declare-const old__6 Int)

(declare-const oldest6 Int)

(declare-const temp5 Int)

(declare-const i6 Int)

(declare-const old__7 Int)

(declare-const oldest7 Int)

(declare-const temp6 Int)

(declare-const old__8 Int)

(declare-const oldest8 Int)

(declare-const temp7 Int)

(declare-const i7 Int)

(declare-const old__9 Int)

(declare-const oldest9 Int)

(declare-const temp8 Int)

(declare-const i8 Int)

(declare-const result__2 Int)

(declare-const result__3 Int)

(declare-const old__10 Int)

(declare-const oldest10 Int)

(declare-const temp9 Int)

(declare-const i9 Int)

(declare-const number_theory__fibonacci__result1 Int)

(declare-const number_theory__fibonacci__result2 Int)

(declare-const result__4 Int)

(declare-const old__11 Int)

(declare-const oldest11 Int)

(declare-const temp10 Int)

(declare-const i10 Int)

(declare-const number_theory__fibonacci__result3 Int)

(declare-const result8 Int)

;; H
  (assert (in_range4 n))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 result__)))

;; H
  (assert (=> (<= 1 2147483647) (in_range3 old__)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 oldest)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 temp)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result result__)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__1 n)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= i9 i1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= temp9 temp1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= oldest10 oldest1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= old__10 old__1)))

;; H
  (assert (=> (=> (not (= n 0)) (= n 1)) (= result__3 result__1)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest2 0)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__2 1)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i2 2)))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= i8 i7))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= temp8 temp7))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= oldest9 oldest8))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (and (<= 2 i2) (<= i2 n)) (= old__9 old__8))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= i8 i2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= temp8 temp1))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= oldest9 oldest2))))

;; H
  (assert
  (=> (not (=> (not (= n 0)) (= n 1)))
  (=> (not (and (<= 2 i2) (<= i2 n))) (= old__9 old__2))))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= i9 i8)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= temp9 temp8)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= oldest10 oldest9)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= old__10 old__9)))

;; H
  (assert (=> (not (=> (not (= n 0)) (= n 1))) (= result__3 result__2)))

;; H
  (assert
  (= number_theory__fibonacci__result2 number_theory__fibonacci__result1))

;; H
  (assert
  (= number_theory__fibonacci__result3 number_theory__fibonacci__result2))

;; H
  (assert (= i10 i9))

;; H
  (assert (= temp10 temp9))

;; H
  (assert (= oldest11 oldest10))

;; H
  (assert (= old__11 old__10))

;; H
  (assert (= result__4 result__3))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not false))
(check-sat)
(exit)
