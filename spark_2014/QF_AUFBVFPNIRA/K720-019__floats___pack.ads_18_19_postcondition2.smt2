;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const pack__associativity_test__result Bool)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Bool)

(declare-const result Bool)

(declare-const pack__associativity_test__result1 Bool)

(declare-const pack__associativity_test__result2 Bool)

(declare-const pack__associativity_test__result3 Bool)

(declare-const pack__associativity_test__result4 Bool)

(declare-const pack__associativity_test__result5 Bool)

(declare-const result1 Bool)

;; H
  (assert
  (= pack__associativity_test__result1 pack__associativity_test__result2))

;; H
  (assert
  (= pack__associativity_test__result3 pack__associativity_test__result1))

(declare-const abstr Float32)

;; H
  (assert
  (and (= o1 abstr)
  (and (fp.isFinite32 o1)
  (fp.eq o1 (fp.add RNE (fp #b0 #b01111100 #b10011001100110011001101) (fp #b0 #b01111101 #b00110011001100110011010))))))

(declare-const abstr1 Float32)

;; H
  (assert
  (and (= o2 abstr1)
  (and (fp.isFinite32 o2)
  (fp.eq o2 (fp.add RNE (fp #b0 #b01111011 #b10011001100110011001101)
  o1)))))

(declare-const abstr2 Float32)

;; H
  (assert
  (and (= o abstr2)
  (and (fp.isFinite32 o)
  (fp.eq o (fp.add RNE (fp #b0 #b01111011 #b10011001100110011001101) (fp #b0 #b01111100 #b10011001100110011001101))))))

(declare-const abstr3 Float32)

;; H
  (assert
  (and (= o3 abstr3)
  (and (fp.isFinite32 o3)
  (fp.eq o3 (fp.add RNE o (fp #b0 #b01111101 #b00110011001100110011010))))))

;; H
  (assert (= o4 (ite (fp.eq o3 o2) true false)))

;; H
  (assert (= result pack__associativity_test__result))

;; H
  (assert (= pack__associativity_test__result1 o4))

;; H
  (assert
  (= pack__associativity_test__result5 pack__associativity_test__result3))

;; H
  (assert (= result1 pack__associativity_test__result4))

;; H
  (assert (= pack__associativity_test__result4 true))

(assert
;; WP_parameter_def
 ;; File "pack.ads", line 17, characters 0-0
  (not true))
(check-sat)
(exit)
