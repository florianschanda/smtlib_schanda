;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(declare-const wheel_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const vehicle_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const apply_brakes Float64)

(declare-const epsifzero_out1 Float64)

(declare-const diff_out1 Float64)

(declare-const difference_out1 Float64)

(declare-const sum_out1 Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 Float64)

(declare-const o5 Float64)

(declare-const o6 Float64)

(declare-const o7 Float64)

(declare-const result Float64)

(declare-const epsifzero_out11 Float64)

(declare-const result1 Float64)

(declare-const epsifzero_out12 Float64)

(declare-const result2 Float64)

(declare-const diff_out11 Float64)

(declare-const result3 Float64)

(declare-const difference_out11 Float64)

(declare-const result4 Float64)

(declare-const sum_out11 Float64)

;; H
  (assert (fp.isFinite64 wheel_speed))

;; H
  (assert (fp.isFinite64 vehicle_speed))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 apply_brakes)))

;; H
  (assert
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010)
  wheel_speed))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 epsifzero_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 diff_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 difference_out1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 sum_out1)))

;; H
  (assert
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010)
  wheel_speed))

;; H
  (assert
  (=>
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (= result epsifzero_out1)))

;; H
  (assert
  (=>
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (= epsifzero_out11 vehicle_speed)))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= result1 epsifzero_out1)))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= epsifzero_out12 (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010))))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= epsifzero_out11 epsifzero_out12)))

(assert
;; WP_parameter_def
 ;; File "abs_controller_oem_with_property.ads", line 20, characters 0-0
  (not (not (fp.isZero      epsifzero_out11))))
(check-sat)
(exit)
