;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic QF_AUFFPBVNIRA)
(set-info :source |Quantifier-free VCs generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-const abstr Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10001011 #b00000000000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_211 Float32)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)) Bool (=>
                                      (or (= temp___is_init_208 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001011 #b00000000000000000000000)) (fp #b0 #b10001011 #b00000000000000000000000)))
                                      (in_range2 temp___expr_211)))

(declare-const a_x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b_x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const b_y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c_x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c_y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const vec_ba_x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const vec_ba_y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const vec_bc_x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const vec_bc_y Float32)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const ba_dot_bc Float32)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const length_ba Float32)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const length_bc Float32)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

;; vec_ba_x__def_axiom
  (assert (= vec_ba_x (fp.sub RNE a_x b_x)))

;; vec_ba_y__def_axiom
  (assert (= vec_ba_y (fp.sub RNE a_y b_y)))

;; vec_bc_x__def_axiom
  (assert (= vec_bc_x (fp.sub RNE c_x b_x)))

;; vec_bc_y__def_axiom
  (assert (= vec_bc_y (fp.sub RNE c_y b_y)))

;; ba_dot_bc__def_axiom
  (assert
  (= ba_dot_bc (fp.add RNE (fp.mul RNE vec_ba_x vec_bc_x) (fp.mul RNE
  vec_ba_y vec_bc_y))))

;; length_ba__def_axiom
  (assert
  (= length_ba (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE
  b_x a_x)) (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y))))))

;; length_bc__def_axiom
  (assert
  (= length_bc (fp.sqrt RNE (fp.add RNE (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE
  b_x c_x)) (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y))))))

(declare-const res Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const floating_point__angle_between__ba_dot_bc__assume Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const floating_point__angle_between__length_ba__assume Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const floating_point__angle_between__length_bc__assume Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const result Float32)

(declare-const res1 Float32)

;; H
  (assert (in_range2 a_x))

;; H
  (assert (in_range2 a_y))

;; H
  (assert (in_range2 b_x))

;; H
  (assert (in_range2 b_y))

;; H
  (assert (in_range2 c_x))

;; H
  (assert (in_range2 c_y))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 res)))

;; H
  (assert (= (fp.sub RNE a_x b_x) vec_ba_x))

;; H
  (assert (fp.isFinite32 vec_ba_x))

;; H
  (assert (= (fp.sub RNE a_y b_y) vec_ba_y))

;; H
  (assert (fp.isFinite32 vec_ba_y))

;; H
  (assert (= (fp.sub RNE c_x b_x) vec_bc_x))

;; H
  (assert (fp.isFinite32 vec_bc_x))

;; H
  (assert (= (fp.sub RNE c_y b_y) vec_bc_y))

;; H
  (assert (fp.isFinite32 vec_bc_y))

;; H
  (assert
  (and (= o (fp.mul RNE vec_ba_y vec_bc_y))
  (fp.isFinite32 (fp.mul RNE vec_ba_y vec_bc_y))))

;; H
  (assert
  (and (= o1 (fp.mul RNE vec_ba_x vec_bc_x))
  (fp.isFinite32 (fp.mul RNE vec_ba_x vec_bc_x))))

;; H
  (assert (= o2 (fp.add RNE o1 o)))

;; H
  (assert
  (and (= floating_point__angle_between__ba_dot_bc__assume o2)
  (fp.isFinite32 o2)))

;; H
  (assert (= floating_point__angle_between__ba_dot_bc__assume ba_dot_bc))

;; H
  (assert (fp.isFinite32 ba_dot_bc))

;; H
  (assert
  (and (= o3 (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y)))
  (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_y a_y) (fp.sub RNE b_y a_y)))))

;; H
  (assert
  (and (= o4 (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE b_x a_x)))
  (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_x a_x) (fp.sub RNE b_x a_x)))))

;; H
  (assert (= o5 (fp.add RNE o4 o3)))

;; H
  (assert (and (= o6 o5) (fp.isFinite32 o5)))

;; H
  (assert
  (= floating_point__angle_between__length_ba__assume (fp.sqrt RNE o6)))

;; H
  (assert (= floating_point__angle_between__length_ba__assume length_ba))

;; H
  (assert (fp.isFinite32 length_ba))

;; H
  (assert
  (and (= o7 (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y)))
  (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_y c_y) (fp.sub RNE b_y c_y)))))

;; H
  (assert
  (and (= o8 (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE b_x c_x)))
  (fp.isFinite32 (fp.mul RNE (fp.sub RNE b_x c_x) (fp.sub RNE b_x c_x)))))

;; H
  (assert (= o9 (fp.add RNE o8 o7)))

;; H
  (assert (and (= o10 o9) (fp.isFinite32 o9)))

;; H
  (assert
  (= floating_point__angle_between__length_bc__assume (fp.sqrt RNE o10)))

;; H
  (assert (= floating_point__angle_between__length_bc__assume length_bc))

;; H
  (assert (fp.isFinite32 length_bc))

;; H
  (assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) length_ba))

;; H
  (assert (fp.lt (fp #b0 #b01110101 #b00000110001001001101111) length_bc))

;; H
  (assert
  (and (= o11 (fp.mul RNE length_ba length_bc))
  (fp.isFinite32 (fp.mul RNE length_ba length_bc))))

;; H
  (assert (= o12 (fp.div RNE ba_dot_bc o11)))

;; H
  (assert (and (= o13 o12) (fp.isFinite32 o12)))

;; H
  (assert (= result res))

;; H
  (assert (= res1 o13))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000001010100)) res1)))
(check-sat)
(exit)
