;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1024)))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1025)))

(define-fun dynamic_invariant2 ((temp___expr_583 Int)
  (temp___is_init_580 Bool) (temp___skip_constant_581 Bool)
  (temp___do_toplevel_582 Bool)) Bool (=>
                                      (or (= temp___is_init_580 true)
                                      (<= 1 1025)) (in_range4
                                      temp___expr_583)))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(define-fun dynamic_invariant3 ((temp___expr_589 Int)
  (temp___is_init_586 Bool) (temp___skip_constant_587 Bool)
  (temp___do_toplevel_588 Bool)) Bool (=>
                                      (or (= temp___is_init_586 true)
                                      (<= 0 1024)) (in_range5
                                      temp___expr_589)))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun first_char () Int)

(declare-fun last_char () Int)

(declare-fun line_num () Int)

(declare-fun c () Int)

(declare-fun temp___651 () Int)

(declare-fun temp___649 () Int)

(declare-fun temp___648 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun first_char1 () Int)

(declare-fun last_char1 () Int)

(declare-fun line_num1 () Int)

(declare-fun first_char2 () Int)

(declare-fun last_char2 () Int)

(declare-fun line_num2 () Int)

(declare-fun first_char3 () Int)

(declare-fun last_char3 () Int)

(declare-fun line_num3 () Int)

(declare-fun first_char4 () Int)

(declare-fun last_char4 () Int)

(declare-fun line_num4 () Int)

(declare-fun first_char5 () Int)

(declare-fun last_char5 () Int)

(declare-fun line_num5 () Int)

(declare-fun first_char6 () Int)

(declare-fun last_char6 () Int)

(declare-fun line_num6 () Int)

(declare-fun first_char7 () Int)

(declare-fun last_char7 () Int)

(declare-fun line_num7 () Int)

(declare-fun result () Int)

(declare-fun c1 () Int)

;; H
  (assert (in_range4 first_char))

;; H
  (assert (in_range5 last_char))

;; H
  (assert (in_range1 line_num))

;; H
  (assert (=> (<= 0 255) (in_range2 c)))

;; H
  (assert (<= first_char 1024))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= temp___651 first_char)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= temp___649 line_num)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= temp___648 last_char)))

;; H
  (assert
  (=> (< last_char (+ first_char 0))
  (and
  (and (and (in_range5 last_char2) (in_range1 line_num2)) (in_range4
  first_char2)) (< last_char2 (+ first_char2 0)))))

;; H
  (assert
  (=> (< last_char (+ first_char 0))
  (and (and (in_range4 first_char3) (in_range5 last_char3)) (in_range1
  line_num3))))

;; H
  (assert
  (=> (< last_char (+ first_char 0)) (not (< last_char3 (+ first_char3 0)))))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= line_num3 line_num4)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= last_char3 last_char4)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= first_char3 first_char4)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= line_num5 line_num3)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= last_char5 last_char3)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= first_char5 first_char3)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= line_num7 line_num5)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= last_char7 last_char5)))

;; H
  (assert (=> (< last_char (+ first_char 0)) (= first_char7 first_char5)))

;; H
  (assert (=> (not (< last_char (+ first_char 0))) (= line_num7 line_num1)))

;; H
  (assert
  (=> (not (< last_char (+ first_char 0))) (= last_char7 last_char1)))

;; H
  (assert
  (=> (not (< last_char (+ first_char 0))) (= first_char7 first_char1)))

;; H
  (assert (and (<= 1 first_char6) (<= first_char6 1024)))

;; H
  (assert (= o first_char6))

;; H
  (assert (= result c))

;; H
  (assert (= c1 o1))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range4 (+ first_char6 1))))
(check-sat)
(exit)
