;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 3)) (in_range2 temp___expr_135)))

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const tagged_discr__t__discr__first__bit Int)

(declare-const tagged_discr__t__discr__last__bit Int)

(declare-const tagged_discr__t__discr__position Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit tagged_discr__t__discr__last__bit))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position))

(declare-const tagged_discr__t__z__first__bit Int)

(declare-const tagged_discr__t__z__last__bit Int)

(declare-const tagged_discr__t__z__position Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit tagged_discr__t__z__last__bit))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position))

(declare-const tagged_discr__t__x__first__bit Int)

(declare-const tagged_discr__t__x__last__bit Int)

(declare-const tagged_discr__t__x__position Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit tagged_discr__t__x__last__bit))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position))

(declare-const tagged_discr__t__y__first__bit Int)

(declare-const tagged_discr__t__y__last__bit Int)

(declare-const tagged_discr__t__y__position Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit tagged_discr__t__y__last__bit))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const tagged_discr__t__discr__first__bit1 Int)

(declare-const tagged_discr__t__discr__last__bit1 Int)

(declare-const tagged_discr__t__discr__position1 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit1))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit1 tagged_discr__t__discr__last__bit1))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position1))

(declare-const tagged_discr__u1__w__first__bit Int)

(declare-const tagged_discr__u1__w__last__bit Int)

(declare-const tagged_discr__u1__w__position Int)

;; tagged_discr__u1__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u1__w__first__bit))

;; tagged_discr__u1__w__last__bit_axiom
  (assert (< tagged_discr__u1__w__first__bit tagged_discr__u1__w__last__bit))

;; tagged_discr__u1__w__position_axiom
  (assert (<= 0 tagged_discr__u1__w__position))

(declare-const tagged_discr__t__z__first__bit1 Int)

(declare-const tagged_discr__t__z__last__bit1 Int)

(declare-const tagged_discr__t__z__position1 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit1))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit1 tagged_discr__t__z__last__bit1))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position1))

(declare-const tagged_discr__t__x__first__bit1 Int)

(declare-const tagged_discr__t__x__last__bit1 Int)

(declare-const tagged_discr__t__x__position1 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit1))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit1 tagged_discr__t__x__last__bit1))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position1))

(declare-const tagged_discr__t__y__first__bit1 Int)

(declare-const tagged_discr__t__y__last__bit1 Int)

(declare-const tagged_discr__t__y__position1 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit1))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit1 tagged_discr__t__y__last__bit1))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position1))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const tagged_discr__t__discr__first__bit2 Int)

(declare-const tagged_discr__t__discr__last__bit2 Int)

(declare-const tagged_discr__t__discr__position2 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit2))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit2 tagged_discr__t__discr__last__bit2))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position2))

(declare-const tagged_discr__t__z__first__bit2 Int)

(declare-const tagged_discr__t__z__last__bit2 Int)

(declare-const tagged_discr__t__z__position2 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit2))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit2 tagged_discr__t__z__last__bit2))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position2))

(declare-const tagged_discr__t__x__first__bit2 Int)

(declare-const tagged_discr__t__x__last__bit2 Int)

(declare-const tagged_discr__t__x__position2 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit2))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit2 tagged_discr__t__x__last__bit2))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position2))

(declare-const tagged_discr__t__y__first__bit2 Int)

(declare-const tagged_discr__t__y__last__bit2 Int)

(declare-const tagged_discr__t__y__position2 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit2))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit2 tagged_discr__t__y__last__bit2))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position2))

(declare-const tagged_discr__u1__w__first__bit1 Int)

(declare-const tagged_discr__u1__w__last__bit1 Int)

(declare-const tagged_discr__u1__w__position1 Int)

;; tagged_discr__u1__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u1__w__first__bit1))

;; tagged_discr__u1__w__last__bit_axiom
  (assert
  (< tagged_discr__u1__w__first__bit1 tagged_discr__u1__w__last__bit1))

;; tagged_discr__u1__w__position_axiom
  (assert (<= 0 tagged_discr__u1__w__position1))

(declare-const v__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r5b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const us_tag3 Int)

(declare-const value__size3 Int)

(declare-const value__alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-const tagged_discr__t__discr__first__bit3 Int)

(declare-const tagged_discr__t__discr__last__bit3 Int)

(declare-const tagged_discr__t__discr__position3 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit3))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit3 tagged_discr__t__discr__last__bit3))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position3))

(declare-const tagged_discr__t__y__first__bit3 Int)

(declare-const tagged_discr__t__y__last__bit3 Int)

(declare-const tagged_discr__t__y__position3 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit3))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit3 tagged_discr__t__y__last__bit3))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position3))

(declare-const tagged_discr__t__z__first__bit3 Int)

(declare-const tagged_discr__t__z__last__bit3 Int)

(declare-const tagged_discr__t__z__position3 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit3))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit3 tagged_discr__t__z__last__bit3))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position3))

(declare-const tagged_discr__t__x__first__bit3 Int)

(declare-const tagged_discr__t__x__last__bit3 Int)

(declare-const tagged_discr__t__x__position3 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit3))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit3 tagged_discr__t__x__last__bit3))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position3))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const v__split_fields Bool)

(declare-const o Bool)

(declare-const tagged_discr__init__2__R7b__assume Bool)

(declare-const tagged_discr__init__2__R7b__assume1 Int)

(declare-const o1 Bool)

(declare-const temp___211 Bool)

(declare-const temp___2111 Int)

(declare-const usq_ Bool)

(declare-const usq_1 Int)

(declare-const temp___213 Bool)

(declare-const temp___2131 Int)

(declare-const result Bool)

(declare-const v__split_fields1 Bool)

(declare-const v__split_fields2 Bool)

;; H
  (assert (in_range2 r5b))

;; H
  (assert (= (of_int 0) o))

;; H
  (assert (= tagged_discr__init__2__R7b__assume o))

;; H
  (assert (= us_tag3 tagged_discr__init__2__R7b__assume1))

;; H
  (assert (= temp___211 o1))

;; H
  (assert (= us_tag2 temp___2111))

;; H
  (assert (= usq_ temp___213))

;; H
  (assert (= v__attr__tag temp___2131))

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= temp___213 v__split_fields1))

;; H
  (assert (= v__split_fields2 v__split_fields1))

(assert
;; WP_parameter_def
 ;; File "tagged_discr.ads", line 33, characters 0-0
  (not false))
(check-sat)
(exit)
