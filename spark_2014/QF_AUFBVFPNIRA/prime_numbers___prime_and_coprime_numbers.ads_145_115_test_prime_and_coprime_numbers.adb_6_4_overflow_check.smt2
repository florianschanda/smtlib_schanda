;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_178)))

(declare-fun abstr () Bool)

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first)) abstr)
                      true false))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun dynamic_invariant1 ((temp___expr_193 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (=>
                                      (or (= temp___is_init_190 true)
                                      (<= 0 2)) (in_range3 temp___expr_193)))

(define-fun mod1 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun value () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun mode () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun is_prime () (Array Int Bool))

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result () Int)

(declare-fun o () Int)

(declare-fun v () Int)

(declare-fun o1 () Int)

(declare-fun v1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Bool)

(declare-fun o4 () Int)

(declare-fun v2 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Bool)

(declare-fun o14 () Int)

(declare-fun v3 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Bool)

(declare-fun o24 () Int)

(declare-fun result () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result1 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result2 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result3 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result4 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_prime_number__result5 () Int)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

;; H
  (assert (in_range2 value))

;; H
  (assert (in_range3 mode))

(declare-fun abstr1 () Bool)

(declare-fun abstr2 () Bool)

(declare-fun abstr3 () Bool)

(declare-fun abstr4 () Bool)

;; H
  (assert
  (and (and (<= 0 value) (<= value 100000))
  (and (= abstr4 true)
  (ite (= mode 0) (= abstr3 true)
  (ite (= mode 1) (= abstr2 true) (= abstr1 true))))))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result1
  test_prime_and_coprime_numbers__p__nearest_prime_number__result2))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result3
  test_prime_and_coprime_numbers__p__nearest_prime_number__result1))

(declare-fun abstr5 () Bool)

(declare-fun abstr6 () Bool)

(declare-fun abstr7 () Bool)

(declare-fun abstr8 () Int)

;; H
  (assert
  (and (= o abstr8)
  (and (in_range2 o)
  (and (and (and (<= 0 o) (<= o 100000)) (= (select is_prime o) true))
  (ite (= (= (to_int1 (select is_prime value)) (to_int1 (of_int 1))) true)
  (= o value)
  (ite (= abstr7 true) (and (< value o) true)
  (ite (= abstr6 true) (and (< o value) true)
  (=> (= abstr5 true) (and true true)))))))))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result1
  o))

;; H
  (assert
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result5
  test_prime_and_coprime_numbers__p__nearest_prime_number__result3))

(declare-fun abstr9 () Bool)

;; H
  (assert
  (=> (= abstr9 true)
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result4
  value)))

(declare-fun abstr10 () Bool)

;; H
  (assert
  (=> (= abstr10 true)
  (and
  (< value test_prime_and_coprime_numbers__p__nearest_prime_number__result4)
  true)))

(declare-fun abstr11 () Bool)

;; H
  (assert
  (=> (= abstr11 true)
  (and
  (< test_prime_and_coprime_numbers__p__nearest_prime_number__result4
  value) true)))

(declare-fun abstr12 () Bool)

;; H
  (assert (= abstr12 true))

;; H
  (assert
  (and
  (= o15 (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))
  (in_range1
  (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result4))))

;; H
  (assert (= o16 (abs o15)))

;; H
  (assert (and (= o17 o16) (in_range1 o16)))

;; H
  (assert (= o18 (- value o17)))

;; H
  (assert (and (= o19 o18) (in_range1 o18)))

;; H
  (assert (= o20 (+ o19 1)))

(assert
;; WP_parameter_def
 ;; File "prime_and_coprime_numbers.ads", line 3, characters 0-0
  (not (in_range1 o20)))
(check-sat)
(exit)
