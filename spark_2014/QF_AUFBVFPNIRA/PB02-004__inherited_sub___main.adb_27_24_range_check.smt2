;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun rec__sub_arr__f__first__bit () Int)

(declare-fun rec__sub_arr__f__last__bit () Int)

(declare-fun rec__sub_arr__f__position () Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit rec__sub_arr__f__last__bit))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position))

(declare-fun rec__sub_arr__l__first__bit () Int)

(declare-fun rec__sub_arr__l__last__bit () Int)

(declare-fun rec__sub_arr__l__position () Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit rec__sub_arr__l__last__bit))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position))

(declare-fun rec__sub_arr__content__first__bit () Int)

(declare-fun rec__sub_arr__content__last__bit () Int)

(declare-fun rec__sub_arr__content__position () Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit rec__sub_arr__content__last__bit))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position))

(declare-fun f () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun l () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-fun value__size2 () Int)

(declare-fun value__component__size1 () Int)

(declare-fun value__alignment2 () Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-fun value__size3 () Int)

(declare-fun value__alignment3 () Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

(declare-fun rec__sub_arr__f__first__bit1 () Int)

(declare-fun rec__sub_arr__f__last__bit1 () Int)

(declare-fun rec__sub_arr__f__position1 () Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit1))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit1 rec__sub_arr__f__last__bit1))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position1))

(declare-fun rec__sub_arr__l__first__bit1 () Int)

(declare-fun rec__sub_arr__l__last__bit1 () Int)

(declare-fun rec__sub_arr__l__position1 () Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit1))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit1 rec__sub_arr__l__last__bit1))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position1))

(declare-fun rec__sub_arr__content__first__bit1 () Int)

(declare-fun rec__sub_arr__content__last__bit1 () Int)

(declare-fun rec__sub_arr__content__position1 () Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit1))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit1 rec__sub_arr__content__last__bit1))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position1))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-fun us () Int)

(declare-fun us1 () Int)

;; H
  (assert (in_range1 f))

;; H
  (assert (in_range1 l))

;; H
  (assert (and (= us l) (in_range1 l)))

(assert
;; WP_parameter_def
 ;; File "rec.ads", line 30, characters 0-0
  (not (in_range1 f)))
(check-sat)
(exit)
