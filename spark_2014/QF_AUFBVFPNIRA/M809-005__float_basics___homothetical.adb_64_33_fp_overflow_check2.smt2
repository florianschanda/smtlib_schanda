;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 1 2)) (in_range1 temp___expr_166)))

(declare-const i Int)

(declare-const i1 Int)

(declare-const j Int)

(declare-const temp___195 Int)

(declare-const j1 Int)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Float32)

(declare-const o33 Float32)

(declare-const o34 Float32)

(declare-const o35 Float32)

(declare-const o36 Float32)

(declare-const o37 Float32)

(declare-const o38 Float32)

(declare-const o39 Float32)

(declare-const o40 Float32)

(declare-const o41 Float32)

(declare-const o42 Float32)

(declare-const o43 Float32)

(declare-const o44 Float32)

(declare-const result Int)

(declare-const i2 Int)

(declare-const i3 Int)

(declare-const result1 Int)

(declare-const i4 Int)

(declare-const i5 Int)

(declare-const i6 Int)

(declare-const i7 Int)

(declare-const i8 Int)

(declare-const i9 Int)

(declare-const i10 Int)

(declare-const i11 Int)

(declare-const j2 Int)

(declare-const j3 Int)

(declare-const i12 Int)

(declare-const j4 Int)

(declare-const j5 Int)

(declare-const i13 Int)

(declare-const i14 Int)

(declare-const j6 Int)

;; H
  (assert (= i11 1))

;; H
  (assert (= j2 1))

;; H
  (assert (=> (not (= i11 j2)) (= o3 (fp.div RNE o1 o2))))

;; H
  (assert (=> (not (= i11 j2)) (and (= o4 o3) (fp.isFinite32 o3))))

;; H
  (assert (=> (not (= i11 j2)) (= o8 (fp.div RNE o6 o7))))

;; H
  (assert (=> (not (= i11 j2)) (and (= o9 o8) (fp.isFinite32 o8))))

;; H
  (assert (= j3 2))

;; H
  (assert (=> (not (= i11 j3)) (= o13 (fp.div RNE o11 o12))))

;; H
  (assert (=> (not (= i11 j3)) (and (= o14 o13) (fp.isFinite32 o13))))

;; H
  (assert (=> (not (= i11 j3)) (= o18 (fp.div RNE o16 o17))))

;; H
  (assert (=> (not (= i11 j3)) (and (= o19 o18) (fp.isFinite32 o18))))

(assert
;; WP_parameter_def
 ;; File "homothetical.adb", line 48, characters 0-0
  (not false))
(check-sat)
(exit)
