;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_57) (fp.isNaN temp___expr_57)))))

(declare-fun wheel_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun vehicle_speed () Float64)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun apply_brakes () Float64)

(declare-fun epsifzero_out1 () Float64)

(declare-fun diff_out1 () Float64)

(declare-fun difference_out1 () Float64)

(declare-fun sum_out1 () Float64)

(declare-fun o () Float64)

(declare-fun o1 () Float64)

(declare-fun o2 () Float64)

(declare-fun o3 () Float64)

(declare-fun o4 () Float64)

(declare-fun o5 () Float64)

(declare-fun o6 () Float64)

(declare-fun o7 () Float64)

(declare-fun result () Float64)

(declare-fun epsifzero_out11 () Float64)

(declare-fun result1 () Float64)

(declare-fun epsifzero_out12 () Float64)

(declare-fun result2 () Float64)

(declare-fun diff_out11 () Float64)

(declare-fun result3 () Float64)

(declare-fun difference_out11 () Float64)

(declare-fun result4 () Float64)

(declare-fun sum_out11 () Float64)

;; H
  (assert (not (or (fp.isInfinite wheel_speed) (fp.isNaN wheel_speed))))

;; H
  (assert (not (or (fp.isInfinite vehicle_speed) (fp.isNaN vehicle_speed))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite apply_brakes) (fp.isNaN apply_brakes)))))

;; H
  (assert
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010)
  wheel_speed))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite epsifzero_out1) (fp.isNaN epsifzero_out1)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite diff_out1) (fp.isNaN diff_out1)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite difference_out1) (fp.isNaN difference_out1)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (not (or (fp.isInfinite sum_out1) (fp.isNaN sum_out1)))))

;; H
  (assert
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010)
  wheel_speed))

;; H
  (assert
  (=>
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (= result epsifzero_out1)))

;; H
  (assert
  (=>
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (= epsifzero_out11 vehicle_speed)))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= result1 epsifzero_out1)))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= epsifzero_out12 (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010))))

;; H
  (assert
  (=>
  (not
  (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
  (= epsifzero_out11 epsifzero_out12)))

;; H
  (assert
  (and (= o (fp.div RNE wheel_speed epsifzero_out11))
  (not (or (fp.isInfinite (fp.div RNE wheel_speed epsifzero_out11)) (fp.isNaN (fp.div RNE
  wheel_speed epsifzero_out11))))))

;; H
  (assert
  (= o1 (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)
  o)))

(assert
;; WP_parameter_def
 ;; File "abs_controller_oem_with_property.ads", line 20, characters 0-0
  (not (not (or (fp.isInfinite o1) (fp.isNaN o1)))))
(check-sat)
(exit)
