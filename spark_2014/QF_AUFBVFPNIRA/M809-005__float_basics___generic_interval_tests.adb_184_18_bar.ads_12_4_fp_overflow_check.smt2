;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_141 Float64)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                      (fp.isFinite64 temp___expr_141)))

(declare-const a Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const d Float64)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant1 ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(declare-const z Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

(declare-const o4 Float64)

(declare-const result Float64)

(declare-const z1 Float64)

(declare-const z2 Float64)

(declare-const z3 Float64)

;; H
  (assert (fp.isFinite64 a))

;; H
  (assert (fp.isFinite64 b))

;; H
  (assert (fp.isFinite64 c))

;; H
  (assert (fp.isFinite64 d))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 z)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  a)
  (fp.leq a (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)))
  (and
  (fp.leq (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)
  b)
  (fp.leq b (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000))))
  (and
  (fp.leq (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000)
  c)
  (fp.leq c (fp #b0 #b10000000001 #b1000000000000000000000000000000000000000000000000000))))
  (fp.lt a d)) (fp.lt d b)) (fp.leq c a)) (fp.leq b c)))

;; H
  (assert (fp.lt a b))

;; H
  (assert
  (fp.eq c (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (and
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  d)
  (fp.leq d (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000))))

;; H
  (assert (and (= o (fp.add RNE a b)) (fp.isFinite64 (fp.add RNE a b))))

;; H
  (assert (= o1 (fp.add RNE o c)))

(assert
;; WP_parameter_def
 ;; File "generic_interval_tests.adb", line 162, characters 0-0
  (not (fp.isFinite64 o1)))
(check-sat)
(exit)
