;; produced by colibri_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic QF_AUFBVFPNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-const abstr Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8)) abstr
                                           (- (- 256 abstr))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-const abstr1 (_ BitVec 8))

(declare-const abstr2 (_ BitVec 8))

(declare-const abstr3 (_ BitVec 8))

(declare-const abstr4 (_ BitVec 8))

(declare-const abstr5 (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-const abstr6 Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr6)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(define-fun in_range3 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000010 #b01000000000000000000000)))))

(declare-const value__size Int)

(declare-const value__component__size Int)

(declare-const value__alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-const value__alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-const some_package__float_buffer__buffer_tag__mode__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__mode__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__mode__position Int)

;; some_package__float_buffer__buffer_tag__mode__first__bit_axiom
  (assert (<= 0 some_package__float_buffer__buffer_tag__mode__first__bit))

;; some_package__float_buffer__buffer_tag__mode__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__mode__first__bit some_package__float_buffer__buffer_tag__mode__last__bit))

;; some_package__float_buffer__buffer_tag__mode__position_axiom
  (assert (<= 0 some_package__float_buffer__buffer_tag__mode__position))

(declare-const some_package__float_buffer__buffer_tag__buffer__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__buffer__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__buffer__position Int)

;; some_package__float_buffer__buffer_tag__buffer__first__bit_axiom
  (assert (<= 0 some_package__float_buffer__buffer_tag__buffer__first__bit))

;; some_package__float_buffer__buffer_tag__buffer__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__buffer__first__bit some_package__float_buffer__buffer_tag__buffer__last__bit))

;; some_package__float_buffer__buffer_tag__buffer__position_axiom
  (assert (<= 0 some_package__float_buffer__buffer_tag__buffer__position))

(declare-const some_package__float_buffer__buffer_tag__index_head__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__index_head__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__index_head__position Int)

;; some_package__float_buffer__buffer_tag__index_head__first__bit_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__index_head__first__bit))

;; some_package__float_buffer__buffer_tag__index_head__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__index_head__first__bit some_package__float_buffer__buffer_tag__index_head__last__bit))

;; some_package__float_buffer__buffer_tag__index_head__position_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__index_head__position))

(declare-const some_package__float_buffer__buffer_tag__index_tail__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__index_tail__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__index_tail__position Int)

;; some_package__float_buffer__buffer_tag__index_tail__first__bit_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__index_tail__first__bit))

;; some_package__float_buffer__buffer_tag__index_tail__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__index_tail__first__bit some_package__float_buffer__buffer_tag__index_tail__last__bit))

;; some_package__float_buffer__buffer_tag__index_tail__position_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__index_tail__position))

(declare-const some_package__float_buffer__buffer_tag__haselements__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__haselements__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__haselements__position Int)

;; some_package__float_buffer__buffer_tag__haselements__first__bit_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__haselements__first__bit))

;; some_package__float_buffer__buffer_tag__haselements__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__haselements__first__bit
  some_package__float_buffer__buffer_tag__haselements__last__bit))

;; some_package__float_buffer__buffer_tag__haselements__position_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__haselements__position))

(declare-const some_package__float_buffer__buffer_tag__num_overflows__first__bit Int)

(declare-const some_package__float_buffer__buffer_tag__num_overflows__last__bit Int)

(declare-const some_package__float_buffer__buffer_tag__num_overflows__position Int)

;; some_package__float_buffer__buffer_tag__num_overflows__first__bit_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__num_overflows__first__bit))

;; some_package__float_buffer__buffer_tag__num_overflows__last__bit_axiom
  (assert
  (< some_package__float_buffer__buffer_tag__num_overflows__first__bit
  some_package__float_buffer__buffer_tag__num_overflows__last__bit))

;; some_package__float_buffer__buffer_tag__num_overflows__position_axiom
  (assert
  (<= 0 some_package__float_buffer__buffer_tag__num_overflows__position))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 256)))

(define-fun dynamic_invariant ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= 0 256)) (in_range4 temp___expr_260)))

(define-fun in_range5 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-const value__size2 Int)

(declare-const value__component__size1 Int)

(declare-const value__alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_273 Int)
  (temp___is_init_269 Bool) (temp___skip_constant_270 Bool)
  (temp___do_toplevel_271 Bool)
  (temp___do_typ_inv_272 Bool)) Bool (=>
                                     (or (= temp___is_init_269 true)
                                     (<= 0 1)) (in_range2 temp___expr_273)))

(define-fun dynamic_invariant4 ((temp___expr_246 (_ BitVec 8))
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_253 Float32)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)
  (temp___do_typ_inv_252 Bool)) Bool (=>
                                     (or (= temp___is_init_249 true)
                                     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000010 #b01000000000000000000000)))
                                     (in_range3 temp___expr_253)))

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(assert
;; WP_parameter_def
 ;; File "generic_queue.ads", line 64, characters 0-0
  (not (in_range o)))
(check-sat)
(exit)
