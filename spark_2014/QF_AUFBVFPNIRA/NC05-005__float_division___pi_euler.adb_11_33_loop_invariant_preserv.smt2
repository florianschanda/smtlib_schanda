;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const index Int)

(declare-const pi1 Float64)

(declare-const erreur Float64)

(declare-const o Float64)

(declare-const o1 Int)

(declare-const result Float64)

(declare-const pi2 Float64)

(declare-const result1 Int)

(declare-const index1 Int)

(declare-const result2 Float64)

(declare-const erreur1 Float64)

(declare-const index2 Int)

(declare-const pi3 Float64)

(declare-const erreur2 Float64)

(declare-const result3 Float64)

(declare-const erreur3 Float64)

(declare-const result4 Float64)

(declare-const pi4 Float64)

(declare-const result5 Int)

(declare-const index3 Int)

;; H
  (assert (=> (<= 1 2147483647) (in_range2 index)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 pi1)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 erreur)))

;; H
  (assert (= result pi1))

;; H
  (assert
  (= pi2 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert (= result1 index))

;; H
  (assert (= index1 1))

;; H
  (assert (= result2 erreur))

;; H
  (assert
  (= erreur1 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (not
  (fp.lt erreur1 (fp #b0 #b01111100111 #b0101011110011000111011100010001100001000110000111010))))

;; H
  (assert (<= 1 index2))

;; H
  (assert
  (and
  (and
  (and (=> (<= 1 2147483647) (in_range2 index2))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 pi3)))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 erreur2)))
  (not
  (fp.lt erreur2 (fp #b0 #b01111100111 #b0101011110011000111011100010001100001000110000111010)))))

;; H
  (assert
  (fp.leq (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  index2))))

;; H
  (assert (= erreur2 result3))

;; H
  (assert
  (= erreur3 (fp.div RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) ((_ to_fp 11 53) RNE (to_real
  index2)))))

;; H
  (assert
  (and (= o (fp.add RNE pi3 erreur3))
  (fp.isFinite64 (fp.add RNE pi3 erreur3))))

;; H
  (assert (= pi3 result4))

;; H
  (assert (= pi4 o))

;; H
  (assert (and (= o1 (+ index2 1)) (in_range1 (+ index2 1))))

;; H
  (assert (= result5 index2))

;; H
  (assert (= index3 o1))

;; H
  (assert
  (not
  (fp.lt erreur3 (fp #b0 #b01111100111 #b0101011110011000111011100010001100001000110000111010))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 1 index3)))
(check-sat)
(exit)
