;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun abstr () (_ BitVec 32))

(declare-fun abstr1 () (_ BitVec 32))

(declare-fun abstr2 () (_ BitVec 32))

(declare-fun abstr3 () (_ BitVec 32))

(declare-fun abstr4 () (_ BitVec 32))

(define-fun nth_bv ((x (_ BitVec 32))
  (i (_ BitVec 32))) Bool (ite (not
                               (= (bvand (bvlshr x i) #x00000001) #x00000000))
                          true false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr6 () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr6))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(define-fun dynamic_invariant1 ((temp___expr_182 (_ BitVec 32))
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool true)

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant2 ((temp___expr_1348 Float32)
  (temp___is_init_1345 Bool) (temp___skip_constant_1346 Bool)
  (temp___do_toplevel_1347 Bool)) Bool (=>
                                       (or (= temp___is_init_1345 true)
                                       (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (not (or (fp.isInfinite temp___expr_1348) (fp.isNaN temp___expr_1348)))))

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 32))

(define-fun dynamic_invariant3 ((temp___expr_1354 (_ BitVec 32))
  (temp___is_init_1351 Bool) (temp___skip_constant_1352 Bool)
  (temp___do_toplevel_1353 Bool)) Bool true)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 32))

(define-fun dynamic_invariant4 ((temp___expr_1360 (_ BitVec 32))
  (temp___is_init_1357 Bool) (temp___skip_constant_1358 Bool)
  (temp___do_toplevel_1359 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_1366 Float32)
  (temp___is_init_1363 Bool) (temp___skip_constant_1364 Bool)
  (temp___do_toplevel_1365 Bool)) Bool (=>
                                       (or (= temp___is_init_1363 true)
                                       (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                       (not (or (fp.isInfinite temp___expr_1366) (fp.isNaN temp___expr_1366)))))

(declare-fun half_x () Float32)

(declare-fun y () Float32)

(declare-fun magic_num () (_ BitVec 32))

(declare-fun i () (_ BitVec 32))

(declare-fun maths_pack__inv_sqrt__result () Float32)

(declare-fun o () (_ BitVec 32))

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun result () Float32)

(declare-fun half_x1 () Float32)

(declare-fun result1 () Float32)

(declare-fun y1 () Float32)

(declare-fun result2 () (_ BitVec 32))

(declare-fun magic_num1 () (_ BitVec 32))

(declare-fun result3 () (_ BitVec 32))

(declare-fun i1 () (_ BitVec 32))

(declare-fun result4 () (_ BitVec 32))

(declare-fun i2 () (_ BitVec 32))

(declare-fun result5 () Float32)

(declare-fun y2 () Float32)

(declare-fun result6 () Float32)

(declare-fun y3 () Float32)

(declare-fun result7 () Float32)

(declare-fun maths_pack__inv_sqrt__result1 () Float32)

(declare-fun maths_pack__inv_sqrt__result2 () Float32)

(declare-fun maths_pack__inv_sqrt__result3 () Float32)

(declare-fun half_x2 () Float32)

(declare-fun y4 () Float32)

(declare-fun magic_num2 () (_ BitVec 32))

(declare-fun i3 () (_ BitVec 32))

(declare-fun maths_pack__inv_sqrt__result4 () Float32)

(declare-fun half_x3 () Float32)

(declare-fun y5 () Float32)

(declare-fun magic_num3 () (_ BitVec 32))

(declare-fun i4 () (_ BitVec 32))

(declare-fun maths_pack__inv_sqrt__result5 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) x))

;; H
  (assert
  (= half_x1 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000)
  x)))

;; H
  (assert (not (or (fp.isInfinite half_x1) (fp.isNaN half_x1))))

;; H
  (assert (= y1 x))

;; H
  (assert (not (or (fp.isInfinite y1) (fp.isNaN y1))))

(declare-fun abstr7 () (_ BitVec 32))

;; H
  (assert (= magic_num1 abstr7))

(declare-fun abstr8 () (_ BitVec 32))

;; H
  (assert (= o abstr8))

;; H
  (assert (= i1 o))

;; H
  (assert (= i1 result4))

(declare-fun abstr9 () (_ BitVec 32))

;; H
  (assert (= i2 (bvsub magic_num1 (bvlshr i1 abstr9))))

(declare-fun abstr10 () Float32)

;; H
  (assert (and (= o1 abstr10) (not (or (fp.isInfinite o1) (fp.isNaN o1)))))

;; H
  (assert (= y1 result5))

;; H
  (assert (= y2 o1))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.mul RNE half_x1 y2)) (fp.isNaN (fp.mul RNE
  half_x1 y2))))))
(check-sat)
(exit)
