;; produced by colibri_gnatprove.drv ;;
(set-logic QF_AUFFPBVNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(declare-fun abstr () Real)

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range abstr))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun z () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun in_range1 ((x1 Float32)) Bool (and
                                          (not (or (fp.isInfinite x1) (fp.isNaN x1)))
                                          (and
                                          (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) x1)
                                          (fp.leq x1 (fp #b0 #b10001010 #b01110111000000000000000)))))

(define-fun dynamic_invariant1 ((temp___expr_135 Float32)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (fp.leq (fp.neg (fp #b0 #b10001010 #b01110111000000000000000)) (fp #b0 #b10001010 #b01110111000000000000000)))
                                      (in_range1 temp___expr_135)))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun roll_rate_desired () Float32)

(declare-fun pitch_rate_desired () Float32)

(declare-fun yaw_rate_desired () Float32)

(declare-fun o () Float32)

(declare-fun get_out_subtype__controller_get_desired_rate__pitch_rate_desired () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun result () Float32)

(declare-fun roll_rate_desired1 () Float32)

(declare-fun result1 () Float32)

(declare-fun pitch_rate_desired1 () Float32)

(declare-fun result2 () Float32)

(declare-fun yaw_rate_desired1 () Float32)

(declare-fun get_out_subtype__controller_get_desired_rate__yaw_rate_desired () Float32)

(declare-fun get_out_subtype__controller_get_desired_rate__pitch_rate_desired1 () Float32)

(declare-fun get_out_subtype__controller_get_desired_rate__roll_rate_desired () Float32)

(declare-fun result3 () Float32)

(declare-fun roll_rate_desired2 () Float32)

(declare-fun result4 () Float32)

(declare-fun pitch_rate_desired2 () Float32)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert (not (or (fp.isInfinite y) (fp.isNaN y))))

;; H
  (assert (not (or (fp.isInfinite z) (fp.isNaN z))))

;; H
  (assert (= result roll_rate_desired))

;; H
  (assert
  (= roll_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range1 roll_rate_desired1))

;; H
  (assert (= result1 pitch_rate_desired))

;; H
  (assert
  (= pitch_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range1 pitch_rate_desired1))

;; H
  (assert (= result2 yaw_rate_desired))

;; H
  (assert
  (= yaw_rate_desired1 (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (in_range1 yaw_rate_desired1))

(assert
;; WP_parameter_def
 ;; File "get_out_subtype.adb", line 7, characters 0-0
  (not
  (not (or (fp.isInfinite pitch_rate_desired1) (fp.isNaN pitch_rate_desired1)))))
(check-sat)
(exit)
