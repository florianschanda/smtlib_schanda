;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-fun dummy1 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-fun to_rep1 (index) Int)

(declare-fun of_rep1 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun last () Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-fun dummy2 () integer)

(declare-datatypes () ((t10s__ref (mk_t10s__ref (t10s__content integer)))))
(define-fun t10s__ref___projection ((a t10s__ref)) integer (t10s__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last1 (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep (last1 (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last2 a))
                                  (+ (- (last2 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last1 (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last1 (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-datatypes () ((t11s__ref (mk_t11s__ref (t11s__content us_t)))))
(define-fun t11s__ref___projection ((a t11s__ref)) us_t (t11s__content a))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__stack__stack__n index)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) index 
  (rec__stack__stack__n a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__stack__stack__top index)(rec__stack__stack__content us_t)))))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) index 
  (rec__stack__stack__top a))

(define-fun us_split_fields_Content__projection ((a us_split_fields)) us_t 
  (rec__stack__stack__content a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__stack__stack__n (us_split_discrs1 a))) 
                        (to_rep1 (rec__stack__stack__n (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__stack__stack__top (us_split_fields1 a))) 
                        (to_rep1
                        (rec__stack__stack__top (us_split_fields1 b)))))
                        (= (bool_eq4
                           (rec__stack__stack__content (us_split_fields1 a))
                           (rec__stack__stack__content (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun stack__stack__n__first__bit () Int)

(declare-fun stack__stack__n__last__bit () Int)

(declare-fun stack__stack__n__position () Int)

;; stack__stack__n__first__bit_axiom
  (assert (<= 0 stack__stack__n__first__bit))

;; stack__stack__n__last__bit_axiom
  (assert (< stack__stack__n__first__bit stack__stack__n__last__bit))

;; stack__stack__n__position_axiom
  (assert (<= 0 stack__stack__n__position))

(declare-fun stack__stack__top__first__bit () Int)

(declare-fun stack__stack__top__last__bit () Int)

(declare-fun stack__stack__top__position () Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit stack__stack__top__last__bit))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position))

(declare-fun stack__stack__content__first__bit () Int)

(declare-fun stack__stack__content__last__bit () Int)

(declare-fun stack__stack__content__position () Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit stack__stack__content__last__bit))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position))

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((stack__ref (mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content
                                                            a))

(define-fun dynamic_invariant1 ((temp___expr_147 us_rep)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (let ((temp___148 (rec__stack__stack__n
                                                        (us_split_discrs1
                                                        temp___expr_147))))
                                      (and (dynamic_property1 1
                                      (to_rep1 temp___148)
                                      (first1
                                      (rec__stack__stack__content
                                      (us_split_fields1 temp___expr_147)))
                                      (last2
                                      (rec__stack__stack__content
                                      (us_split_fields1 temp___expr_147))))
                                      (and
                                      (= (first1
                                         (rec__stack__stack__content
                                         (us_split_fields1 temp___expr_147))) 1)
                                      (= (last2
                                         (rec__stack__stack__content
                                         (us_split_fields1 temp___expr_147))) 
                                      (to_rep1 temp___148))))))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (positive positive) Bool)

(declare-fun dummy5 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last3 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last3 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last4 ((a us_t1)) Int (to_rep (last3 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last4 a))
                                    (+ (- (last4 a) (first3 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq7 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last3 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last3 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-fun dummy6 () us_t1)

(declare-datatypes () ((m__ref (mk_m__ref (m__content us_t1)))))
(define-fun m__ref___projection ((a m__ref)) us_t1 (m__content a))

(declare-fun to__ (us_rep) us_t1)

(declare-fun to____function_guard (us_t1 us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_153 us_t1)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (not (= temp___skip_constant_151 true))
                                      (dynamic_property2 1 2147483647
                                      (first3 temp___expr_153)
                                      (last4 temp___expr_153))))

(declare-fun last5 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last6 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last6 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))

(define-fun of_array2 ((a (Array Int integer)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last7 ((a us_t2)) Int (to_rep (last6 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last7 a))
                                    (+ (- (last7 a) (first5 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int integer)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq9 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last6 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last6 (rt2 y)))))

(declare-fun user_eq8 (us_t2 us_t2) Bool)

(declare-fun dummy8 () us_t2)

(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content us_t2)))))
(define-fun t4b__ref___projection ((a t4b__ref)) us_t2 (t4b__content a))

;; to____post_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (dynamic_invariant1 s true true true)
     (let ((result (to__ s)))
     (=> (to____function_guard result s) (dynamic_invariant2 result true
     false true)))) :pattern ((to__ s)) )))

;; to____def_axiom
  (assert
  (forall ((s us_rep))
  (! (=>
     (and (dynamic_invariant1 s true true true) (to____function_guard
     (to__ s) s))
     (= (to__ s) (let ((temp___168 (let ((temp___166 (to_rep1
                                                     (rec__stack__stack__top
                                                     (us_split_fields1 s)))))
                                   (let ((temp___165 1))
                                   (let ((temp___167 (rec__stack__stack__content
                                                     (us_split_fields1 s))))
                                   (of_array2 (to_array temp___167)
                                   temp___165 temp___166))))))
                 (of_array1 (to_array2 temp___168) (first5 temp___168)
                 (last7 temp___168))))) :pattern ((to__ s)) )))

(declare-fun to_but_top (us_rep) us_t1)

(declare-fun to_but_top__function_guard (us_t1 us_rep) Bool)

(declare-fun last8 () Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (integer integer) Bool)

(declare-fun dummy9 () integer)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content integer)))))
(define-fun t7b__ref___projection ((a t7b__ref)) integer (t7b__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last9 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last9 (mk3 f l))) l)))) :pattern (
  (mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int integer))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int integer) (elts3 a))

(define-fun of_array3 ((a (Array Int integer)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))

(define-fun last10 ((a us_t3)) Int (to_rep (last9 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last10 a))
                                    (+ (- (last10 a) (first7 a)) 1) 0))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int integer)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int integer)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq11 ((x us_t3)
  (y us_t3)) Bool (bool_eq2 (elts3 x) (to_rep (first6 (rt3 x)))
                  (to_rep (last9 (rt3 x))) (elts3 y)
                  (to_rep (first6 (rt3 y))) (to_rep (last9 (rt3 y)))))

(declare-fun user_eq10 (us_t3 us_t3) Bool)

(declare-fun dummy10 () us_t3)

(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content us_t3)))))
(define-fun t8b__ref___projection ((a t8b__ref)) us_t3 (t8b__content a))

;; to_but_top__post_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (dynamic_invariant1 s true true true)
     (let ((result (to_but_top s)))
     (=> (to_but_top__function_guard result s) (dynamic_invariant2 result
     true false true)))) :pattern ((to_but_top s)) )))

;; to_but_top__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=>
     (and (dynamic_invariant1 s true true true) (to_but_top__function_guard
     (to_but_top s) s))
     (= (to_but_top s) (let ((temp___182 (let ((temp___180 (- (to_rep1
                                                              (rec__stack__stack__top
                                                              (us_split_fields1
                                                              s))) 1)))
                                         (let ((temp___179 1))
                                         (let ((temp___181 (rec__stack__stack__content
                                                           (us_split_fields1
                                                           s))))
                                         (of_array3 (to_array temp___181)
                                         temp___179 temp___180))))))
                       (of_array1 (to_array3 temp___182) (first7 temp___182)
                       (last10 temp___182))))) :pattern ((to_but_top s)) )))

(declare-fun is_full (us_rep) Bool)

(declare-fun is_full__function_guard (Bool us_rep) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_full__function_guard (is_full s) s)
     (= (= (is_full s) true)
     (<= (last2 (rec__stack__stack__content (us_split_fields1 s))) (to_rep1
                                                                   (rec__stack__stack__top
                                                                   (us_split_fields1
                                                                   s)))))) :pattern (
  (is_full s)) )))

(declare-fun top (us_rep) Int)

(declare-fun top__function_guard (Int us_rep) Bool)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; top__post_axiom
  (assert
  (forall ((s us_rep))
  (! (and (is_empty__function_guard (is_empty s) s)
     (=>
     (and (dynamic_invariant1 s true true true) (not (= (is_empty s) true)))
     (let ((result (top s)))
     (=> (top__function_guard result s) (dynamic_invariant result true false
     true))))) :pattern ((top s)) )))

;; top__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=>
     (and (dynamic_invariant1 s true true true) (top__function_guard 
     (top s) s))
     (= (top s) (to_rep1 (rec__stack__stack__top (us_split_fields1 s))))) :pattern (
  (top s)) )))

(declare-fun s__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_136)))

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_empty__function_guard (is_empty s) s)
     (= (= (is_empty s) true)
     (< (to_rep1 (rec__stack__stack__top (us_split_fields1 s))) 1))) :pattern (
  (is_empty s)) )))

(declare-fun s__split_fields () index)

(declare-fun s__split_fields1 () (Array Int integer))

(declare-fun s__split_fields2 () t)

(declare-fun o () Int)

(declare-fun o1 () index)

(declare-fun o2 () index)

(declare-fun o3 () (Array Int integer))

(declare-fun o4 () t)

(declare-fun temp___259 () index)

(declare-fun temp___2591 () index)

(declare-fun temp___2592 () (Array Int integer))

(declare-fun temp___2593 () t)

(declare-fun o5 () integer)

(declare-fun o6 () Int)

(declare-fun o7 () (Array Int integer))

(declare-fun o8 () (Array Int integer))

(declare-fun o9 () t)

(declare-fun o10 () index)

(declare-fun o11 () (Array Int integer))

(declare-fun o12 () t)

(declare-fun temp___263 () index)

(declare-fun temp___2631 () index)

(declare-fun temp___2632 () (Array Int integer))

(declare-fun temp___2633 () t)

(declare-fun temp___268 () (Array Int integer))

(declare-fun temp___2681 () t1)

(declare-fun temp___267 () (Array Int integer))

(declare-fun temp___2671 () t1)

(declare-fun o13 () Bool)

(declare-fun result () index)

(declare-fun result1 () (Array Int integer))

(declare-fun result2 () t)

(declare-fun s__split_fields3 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun s__split_fields4 () us_split_fields)

(declare-fun s__split_fields5 () us_split_fields__ref)

(declare-fun s__split_fields6 () us_split_fields)

(define-fun temp___2672 () us_t1 (mk___t1 temp___267 temp___2671))

(define-fun temp___2682 () us_t1 (mk___t1 temp___268 temp___2681))

;; H
  (assert (dynamic_invariant1
  (mk___rep s__split_discrs
  (mk___split_fields s__split_fields
  (mk___t s__split_fields1 s__split_fields2))) true false true))

;; H
  (assert (in_range1 x))

;; H
  (assert (is_full__function_guard
  (is_full
  (mk___rep s__split_discrs
  (mk___split_fields s__split_fields
  (mk___t s__split_fields1 s__split_fields2))))
  (mk___rep s__split_discrs
  (mk___split_fields s__split_fields
  (mk___t s__split_fields1 s__split_fields2)))))

;; H
  (assert
  (not
  (= (is_full
     (mk___rep s__split_discrs
     (mk___split_fields s__split_fields
     (mk___t s__split_fields1 s__split_fields2)))) true)))

;; H
  (assert
  (and (= o (+ (to_rep1 s__split_fields) 1)) (in_range2
  (+ (to_rep1 s__split_fields) 1))))

;; H
  (assert (= (to_rep1 o1) o))

;; H
  (assert (= o1 o2))

;; H
  (assert (= s__split_fields1 o3))

;; H
  (assert (= s__split_fields2 o4))

;; H
  (assert (= s__split_discrs (mk___split_discrs temp___259)))

;; H
  (assert (= temp___2591 o2))

;; H
  (assert (= temp___2592 o3))

;; H
  (assert (= temp___2593 o4))

;; H
  (assert
  (= (mk___split_fields__ref
     (mk___split_fields result (mk___t result1 result2))) (mk___split_fields__ref
                                                          (mk___split_fields
                                                          s__split_fields
                                                          (mk___t
                                                          s__split_fields1
                                                          s__split_fields2)))))

;; H
  (assert
  (= s__split_fields3 (mk___split_fields temp___2591
                      (mk___t temp___2592 temp___2593))))

;; H
  (assert (= s__split_discrs (mk___split_discrs temp___259)))

;; H
  (assert (= (to_rep o5) x))

;; H
  (assert
  (and
  (<= (to_rep (first (rt (rec__stack__stack__content s__split_fields3)))) 
  (to_rep1 (rec__stack__stack__top s__split_fields3)))
  (<= (to_rep1 (rec__stack__stack__top s__split_fields3)) (to_rep
                                                          (last1
                                                          (rt
                                                          (rec__stack__stack__content
                                                          s__split_fields3)))))))

;; H
  (assert (= o6 (to_rep1 (rec__stack__stack__top s__split_fields3))))

;; H
  (assert
  (= o7 (store (elts (rec__stack__stack__content s__split_fields3)) o6 
  o5)))

;; H
  (assert (= o7 o8))

;; H
  (assert (= (rt (rec__stack__stack__content s__split_fields3)) o9))

;; H
  (assert (= (rec__stack__stack__top s__split_fields3) o10))

;; H
  (assert (= o11 o8))

;; H
  (assert (= o12 o9))

;; H
  (assert (= s__split_discrs (mk___split_discrs temp___263)))

;; H
  (assert (= temp___2631 o10))

;; H
  (assert (= temp___2632 o11))

;; H
  (assert (= temp___2633 o12))

;; H
  (assert (= result3 (mk___split_fields__ref s__split_fields3)))

;; H
  (assert
  (= s__split_fields4 (mk___split_fields temp___2631
                      (mk___t temp___2632 temp___2633))))

;; H
  (assert (= s__split_discrs (mk___split_discrs temp___263)))

;; H
  (assert (= s__split_fields5 (mk___split_fields__ref s__split_fields4)))

;; H
  (assert (= s__split_fields6 s__split_fields4))

;; H
  (assert
  (and
  (and
  (= temp___2682 (to__
                 (mk___rep s__split_discrs
                 (mk___split_fields s__split_fields
                 (mk___t s__split_fields1 s__split_fields2)))))
  (to____function_guard temp___2682
  (mk___rep s__split_discrs
  (mk___split_fields s__split_fields
  (mk___t s__split_fields1 s__split_fields2)))))
  (and (dynamic_invariant2 temp___2682 true false true)
  (and (= s__split_fields1 temp___268)
  (= (mk1 (to_rep (first4 (mk2 1 (to_rep1 s__split_fields))))
     (to_rep (last6 (mk2 1 (to_rep1 s__split_fields))))) temp___2681)))))

;; H
  (assert
  (and
  (and
  (= temp___2672 (to_but_top
                 (mk___rep s__split_discrs
                 (us_split_fields__content s__split_fields5))))
  (to_but_top__function_guard temp___2672
  (mk___rep s__split_discrs (us_split_fields__content s__split_fields5))))
  (and (dynamic_invariant2 temp___2672 true false true)
  (and
  (= (elts
     (rec__stack__stack__content (us_split_fields__content s__split_fields5))) 
  temp___267)
  (= (mk1
     (to_rep
     (first6
     (mk3 1
     (- (to_rep1
        (rec__stack__stack__top (us_split_fields__content s__split_fields5))) 1))))
     (to_rep
     (last9
     (mk3 1
     (- (to_rep1
        (rec__stack__stack__top (us_split_fields__content s__split_fields5))) 1))))) 
  temp___2671)))))

;; H
  (assert
  (= o13 (bool_eq2 temp___267 (to_rep (first2 temp___2671))
         (to_rep (last3 temp___2671)) temp___268
         (to_rep (first2 temp___2681)) (to_rep (last3 temp___2681)))))

;; H
  (assert (is_empty__function_guard
  (is_empty
  (mk___rep s__split_discrs (us_split_fields__content s__split_fields5)))
  (mk___rep s__split_discrs (us_split_fields__content s__split_fields5))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (not
  (= (is_empty
     (mk___rep s__split_discrs (us_split_fields__content s__split_fields5))) true))))
(check-sat)
