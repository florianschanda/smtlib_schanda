;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-fun dummy () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

(declare-sort extended_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)

(declare-fun dummy1 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_156)))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort position_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (position_type position_type) Bool)

(declare-fun dummy2 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort direction 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (direction direction) Bool)

(declare-fun dummy3 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq4 (us_rep us_rep) Bool)

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (count_type count_type) Bool)

(declare-fun dummy5 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_144)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_199 us_rep)
  (temp___skip_top_level_200 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_200 true))
                                         (= (length temp___expr_199) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length container)) )))

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq4
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy6 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-fun is_concat (us_rep us_rep us_rep) Bool)

(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)

;; is_concat__post_axiom
  (assert true)

;; is_concat__def_axiom
  (assert
  (forall ((q us_rep) (v us_rep) (p us_rep))
  (! (= (= (is_concat q v p) true)
     (and
     (and
     (and (= (- (length p) (length v)) (length q))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length q))) (= (get p i) (get q i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length v)))
     (= (get p (+ i (length q))) (get v i)))))
     (forall ((i Int))
     (=> (and (<= (+ (length q) 1) i) (<= i (length p)))
     (= (get v (- i (length q))) (get p i)))))) :pattern ((is_concat q v p)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq6 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq6 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1)
  (Array Int us_rep1)) Bool)

(define-fun dynamic_invariant3 ((temp___expr_216 (Array Int us_rep1))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int))
                                      (=>
                                      (and (<= 1 temp___217)
                                      (<= temp___217 100))
                                      (=> (= temp___is_init_213 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_216 temp___217)))) 100)))))

(define-fun default_initial_assumption1 ((temp___expr_219 (Array Int us_rep1))
  (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int))
                                         (=>
                                         (and (<= 1 temp___221)
                                         (<= temp___221 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221))) 
                                         (of_int 0))))))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1)))
  (! (= (= (oeq1 m1 m2) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true)
     (=
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true)
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true)))))) :pattern (
  (oeq1 m1 m2)) )))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq8 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy7 () us_rep2)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq9 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq8 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq9 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq8 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy8 () (Array Int us_rep2))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int us_rep2)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep2)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq8 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq10 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq9
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq9 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy9 () us_rep3)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content
                                                               a))

(declare-fun size (us_rep3) Int)

(declare-fun size__function_guard (Int us_rep3) Bool)

(declare-fun tree_structure (us_rep3) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)

(define-fun default_initial_assumption2 ((temp___expr_275 us_rep3)
  (temp___skip_top_level_276 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_275))) 0)
                                         (forall ((temp___278 Int))
                                         (=>
                                         (and (<= 1 temp___278)
                                         (<= temp___278 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_275)) temp___278)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_276 true))
                                         (= (size temp___expr_275) 0))))

(define-fun type_invariant ((temp___281 us_rep3)) Bool (= (tree_structure
                                                          temp___281) true))

(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)

(declare-fun valid_root (us_rep3 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)

(declare-fun parent (us_rep3 Int) Int)

(declare-fun parent__function_guard (Int us_rep3 Int) Bool)

(declare-fun position (us_rep3 Int) Int)

(declare-fun position__function_guard (Int us_rep3 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((root Int))
  (! (=>
     (and (and (dynamic_invariant root true true true) (type_invariant f))
     (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant3 result true false true)))) :pattern (
  (model__ f root)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun root () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun r186b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-sort tcount_typeB 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy10 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-fun to_rep2 (tcount_typeB) Int)

(declare-fun of_rep2 (Int) tcount_typeB)

;; inversion_axiom
  (assert
  (forall ((x tcount_typeB))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tcount_typeB)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy11 () tcount_typeB)

(declare-datatypes ()
((t187b__ref (mk_t187b__ref (t187b__content tcount_typeB)))))
(define-fun t187b__ref___projection ((a t187b__ref)) tcount_typeB (t187b__content
                                                                  a))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

;; size__post_axiom
  (assert
  (forall ((f us_rep3))
  (! (=> (type_invariant f) (dynamic_invariant1 (size f) true false true)) :pattern (
  (size f)) )))

;; size__def_axiom
  (assert
  (forall ((f us_rep3))
  (! (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f)))) :pattern (
  (size f)) )))

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern ((valid_root
                                                                    f i)) ))))

;; valid_root__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (= (= (valid_root f i) true)
     (and (<= i (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___288 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___288 i))))) 2))) :pattern ((valid_root f i)) ))))

;; parent__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (let ((result (parent f i)))
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false
     true)))) :pattern ((parent f i)) ))))

;; parent__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (parent f i) (to_rep
                     (rec__binary_trees__cell__parent
                     (us_split_fields3
                     (let ((temp___292 (rec__binary_trees__forest__c
                                       (us_split_fields5 f))))
                     (select temp___292 i))))))) :pattern ((parent f i)) ))))

(define-fun dynamic_invariant4 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 1)) (in_range4 temp___expr_168)))

;; position__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (and (dynamic_invariant i true true true) (type_invariant f))
     (not (= (parent f i) 0))) (dynamic_invariant4 (position f i) true false
     true)) :pattern ((position f i)) ))))

;; position__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true)
     (= (position f i) (to_rep1
                       (rec__binary_trees__cell__position
                       (us_split_fields3
                       (let ((temp___296 (rec__binary_trees__forest__c
                                         (us_split_fields5 f))))
                       (select temp___296 i))))))) :pattern ((position f i)) ))))

(define-fun default_initial_assumption3 ((temp___expr_259 us_rep2)
  (temp___skip_top_level_260 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_259))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_259))) 2)))

(define-fun default_initial_assumption4 ((temp___expr_266 (Array Int us_rep2))
  (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int))
                                         (=>
                                         (and (<= 1 temp___268)
                                         (<= temp___268 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

;; tree_structure__def_axiom
  (assert
  (forall ((f us_rep3))
  (! (= (= (tree_structure f) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (forall ((i Int))
     (=>
     (and
     (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))) 1) i)
     (<= i 100))
     (= (bool_eq8
        (let ((temp___397 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___397 i))
        (mk___rep1
        (mk___split_fields1 (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true)))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__parent
           (us_split_fields3
           (let ((temp___398 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___398 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields3
         (let ((temp___398 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___398 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__left
           (us_split_fields3
           (let ((temp___399 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___399 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__left
         (us_split_fields3
         (let ((temp___399 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___399 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__right
           (us_split_fields3
           (let ((temp___400 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___400 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__right
         (us_split_fields3
         (let ((temp___400 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___400 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields5 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___402 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___402 i))))) 2)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___401 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___401 i))))) 0)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___407 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___407 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___403 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___403 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___404 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___404 i)))))))))) 0)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___405 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___405 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___406 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___406 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___412 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___412 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___408 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___408 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___409 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___409 i)))))))))) 1)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___410 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___410 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___411 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___411 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___415 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___415 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___416 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___416 i))))) 0))
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___413 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___413 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___414 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___414 i)))))))))) i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___419 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___419 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___420 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___420 i))))) 1))
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___417 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___417 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___418 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___418 i)))))))))) i)))))) :pattern (
  (tree_structure f)) )))

(define-fun dynamic_invariant5 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range3 temp___expr_162)))

(define-fun dynamic_invariant6 ((temp___expr_205 us_rep1)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true)
                                      (=> (= temp___is_init_202 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_205))) 100))))

(define-fun default_initial_assumption5 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_207))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_207)) (of_int 0))))

(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___211))) 100))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2)) ))))

(declare-sort extended_index 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (extended_index extended_index) Bool)

(declare-fun dummy12 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant7 ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_192)))

(declare-sort element_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (element_type element_type) Bool)

(declare-fun dummy13 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 1)) (in_range8 temp___expr_186)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position1 Int))
  (! (=>
     (and (dynamic_invariant7 position1 true true true)
     (and (<= 1 position1) (<= position1 (last container))))
     (dynamic_invariant8 (get container position1) true false true)) :pattern (
  (get container position1)) ))))

(declare-fun f__split_fields () extended_index_type)

(declare-fun f__split_fields1 () (Array Int us_rep2))

(declare-fun v () Int)

(declare-fun f_old__split_fields () extended_index_type)

(declare-fun f_old__split_fields1 () (Array Int us_rep2))

(declare-fun n () Int)

(declare-fun temp___1213 () (Array Int us_rep1))

(declare-fun o () us_rep1)

(declare-fun o1 () us_split_fields)

(declare-fun temp___1212 () (Array Int us_rep1))

(declare-fun o2 () us_rep1)

(declare-fun o3 () us_split_fields)

(declare-fun o4 () us_rep)

(declare-fun o5 () Int)

(declare-fun temp___1211 () (Array Int us_rep1))

(declare-fun o6 () us_rep1)

(declare-fun o7 () us_split_fields)

(declare-fun temp___1214 () (Array Int us_rep1))

(declare-fun o8 () Int)

(declare-fun o9 () us_rep1)

(declare-fun o10 () us_split_fields)

(declare-fun o11 () us_rep)

(declare-fun temp___1217 () (Array Int us_rep1))

(declare-fun o12 () Int)

(declare-fun o13 () us_rep1)

(declare-fun o14 () us_split_fields)

(declare-fun o15 () us_rep)

(declare-fun temp___1220 () (Array Int us_rep1))

(declare-fun o16 () us_rep1)

(declare-fun o17 () us_split_fields)

(declare-fun o18 () us_rep)

(declare-fun temp___1221 () (Array Int us_rep1))

(declare-fun o19 () us_rep1)

(declare-fun o20 () us_split_fields)

(declare-fun o21 () us_rep)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun o24 () Int)

(declare-fun temp___1225 () (Array Int us_rep1))

(declare-fun o25 () us_rep1)

(declare-fun o26 () us_split_fields)

(declare-fun temp___1224 () (Array Int us_rep1))

(declare-fun o27 () us_rep1)

(declare-fun o28 () us_split_fields)

(declare-fun o29 () us_rep)

(declare-fun o30 () Int)

(declare-fun temp___1223 () (Array Int us_rep1))

(declare-fun o31 () us_rep1)

(declare-fun o32 () us_split_fields)

(declare-fun o33 () Bool)

(declare-fun o34 () Int)

(declare-fun o35 () Int)

(declare-fun temp___1229 () (Array Int us_rep1))

(declare-fun o36 () Int)

(declare-fun o37 () us_rep1)

(declare-fun o38 () us_split_fields)

(declare-fun o39 () us_rep)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun temp___1232 () (Array Int us_rep1))

(declare-fun o42 () us_rep1)

(declare-fun o43 () us_split_fields)

(declare-fun o44 () us_rep)

(declare-fun temp___1233 () (Array Int us_rep1))

(declare-fun o45 () us_rep1)

(declare-fun o46 () us_split_fields)

(declare-fun o47 () us_rep)

(declare-fun temp___1234 () (Array Int us_rep1))

(declare-fun o48 () Int)

(declare-fun o49 () us_rep1)

(declare-fun o50 () us_split_fields)

(declare-fun o51 () us_rep)

(declare-fun o52 () Int)

(declare-fun result () int__ref)

(declare-fun n1 () Int)

(declare-fun n2 () Int)

(declare-fun ki () Int)

(declare-fun result1 () int__ref)

(declare-fun ki1 () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun result7 () Bool)

;; H
  (assert (in_range1 root))

;; H
  (assert (in_range2 v))

;; H
  (assert
  (and
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))

;; H
  (assert
  (and (= (to_rep f__split_fields) (to_rep f_old__split_fields))
  (and (<= root (to_rep f__split_fields))
  (and
  (= (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3 (select f_old__split_fields1 root)))) 2)
  (and (not (= v root))
  (and (and (<= 1 v) (<= v (to_rep f__split_fields)))
  (and
  (= (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3 (select f__split_fields1 v)))) 2)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) v))) true)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i v))
  (= (to_rep
     (rec__binary_trees__cell__parent
     (us_split_fields3 (select f__split_fields1 i)))) (to_rep
                                                      (rec__binary_trees__cell__parent
                                                      (us_split_fields3
                                                      (select f_old__split_fields1 i))))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i v))
  (= (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3 (select f__split_fields1 i)))) (to_rep1
                                                      (rec__binary_trees__cell__position
                                                      (us_split_fields3
                                                      (select f_old__split_fields1 i))))))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) j))) true))
  (= (to_rep
     (rec__binary_trees__cell__left
     (us_split_fields3 (select f__split_fields1 j)))) (to_rep
                                                      (rec__binary_trees__cell__left
                                                      (us_split_fields3
                                                      (select f_old__split_fields1 j))))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) j))) true))
  (= (to_rep
     (rec__binary_trees__cell__right
     (us_split_fields3 (select f__split_fields1 j)))) (to_rep
                                                      (rec__binary_trees__cell__right
                                                      (us_split_fields3
                                                      (select f_old__split_fields1 j)))))))))))))))))))

;; H
  (assert
  (= (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3 (select f__split_fields1 root)))) 2))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (< 0 (to_rep
       (rec__binary_trees__cell__parent
       (us_split_fields3 (select f__split_fields1 i)))))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) 
     (to_rep
     (rec__binary_trees__cell__parent
     (us_split_fields3 (select f__split_fields1 i))))))) true))
  (and (not (= i v))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) i))) true))))))

;; H
  (assert
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) 
     v))) true)))

;; H
  (assert (= result (mk_int__ref n)))

;; H
  (assert (= n1 1))

;; H
  (assert (<= 1 n1))

;; H
  (assert (<= n1 100))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i))) true)
  (<= (length
      (rec__tree_model__path_type__a
      (us_split_fields1
      (select (model__
              (mk___rep2
              (mk___split_fields2 f_old__split_fields f_old__split_fields1))
              root) i)))) (- n2 1)))
  (ite (= (ole
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (mk___split_fields2 f_old__split_fields
                  f_old__split_fields1)) root) v)))
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (mk___split_fields2 f_old__split_fields
                  f_old__split_fields1)) root) i)))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) i))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) i))) true))))))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) i))) true)
  (<= (length
      (rec__tree_model__path_type__a
      (us_split_fields1
      (select (model__
              (mk___rep2
              (mk___split_fields2 f__split_fields f__split_fields1)) 
              root) i)))) (- n2 1)))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i))) true)))))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) i))) true)
  (<= (length
      (rec__tree_model__path_type__a
      (us_split_fields1
      (select (model__
              (mk___rep2
              (mk___split_fields2 f__split_fields f__split_fields1)) 
              v) i)))) (- n2 1)))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i))) true)))))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i))) true)
  (<= (length
      (rec__tree_model__path_type__a
      (us_split_fields1
      (select (model__
              (mk___rep2
              (mk___split_fields2 f_old__split_fields f_old__split_fields1))
              root) i)))) (- n2 1)))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) i))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) i)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i)))) true))))))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i))) true)
  (<= (length
      (rec__tree_model__path_type__a
      (us_split_fields1
      (select (model__
              (mk___rep2
              (mk___split_fields2 f_old__split_fields f_old__split_fields1))
              root) i)))) (- n2 1)))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) i))) true)
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) v)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) v) i)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))
             root) i)))) true))))))

;; H
  (assert (and (=> (<= 1 100) (in_range1 n2)) (and (<= 1 n2) (<= n2 100))))

;; H
  (assert (= result1 (mk_int__ref ki)))

;; H
  (assert (= ki1 1))

;; H
  (assert (<= 1 ki1))

;; H
  (assert (<= ki1 100))

;; H
  (assert
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))

;; H
  (assert
  (and
  (= temp___1211 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1211 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1211 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1211 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1211 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1211 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1211 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1211 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1211 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1211 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1211 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1211 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1211 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1211 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1211 j)))) true))
  (= j i))))))))))))))

;; H
  (assert (= o6 (select temp___1211 ki1)))

;; H
  (assert (= o7 (us_split_fields1 o6)))

;; H
  (assert (= result4 (rec__tree_model__path_type__k o7)))

;; H
  (assert
  (=> (= result4 true)
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))

;; H
  (assert
  (=> (= result4 true)
  (and
  (= temp___1212 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1212 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1212 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1212 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1212 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1212 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1212 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1212 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1212 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1212 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1212 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1212 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1212 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1212 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1212 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result4 true) (= o2 (select temp___1212 ki1))))

;; H
  (assert (=> (= result4 true) (= o3 (us_split_fields1 o2))))

;; H
  (assert (=> (= result4 true) (= o4 (rec__tree_model__path_type__a o3))))

;; H
  (assert
  (=> (= result4 true)
  (and (= o5 (length o4)) (and (in_range5 o5) (<= (+ 0 o5) 2147483647)))))

;; H
  (assert (=> (= result4 true) (= result3 (ite (= o5 n2) true false))))

;; H
  (assert (=> (not (= result4 true)) (= result3 false)))

;; H
  (assert
  (=> (= result3 true)
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))

;; H
  (assert
  (=> (= result3 true)
  (and
  (= temp___1213 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 root))
  (and (dynamic_invariant3 temp___1213 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1213 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1213 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1213 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1213 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1213 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1213 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1213 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1213 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1213 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1213 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1213 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1213 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1213 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result3 true) (= o (select temp___1213 ki1))))

;; H
  (assert (=> (= result3 true) (= o1 (us_split_fields1 o))))

;; H
  (assert
  (=> (= result3 true) (= result2 (rec__tree_model__path_type__k o1))))

;; H
  (assert (=> (not (= result3 true)) (= result2 false)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= o22 (to_rep1
         (rec__binary_trees__cell__position
         (us_split_fields3 (select f__split_fields1 ki1)))))
  (in_range4
  (to_rep1
  (rec__binary_trees__cell__position
  (us_split_fields3 (select f__split_fields1 ki1))))))))

;; H
  (assert
  (=> (= result2 true)
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= temp___1221 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1221 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1221 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1221 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1221 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1221 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1221 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1221 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1221 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1221 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1221 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1221 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1221 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1221 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1221 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result2 true) (= o19 (select temp___1221 ki1))))

;; H
  (assert (=> (= result2 true) (= o20 (us_split_fields1 o19))))

;; H
  (assert (=> (= result2 true) (= o21 (rec__tree_model__path_type__a o20))))

;; H
  (assert
  (=> (= result2 true)
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= temp___1220 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 root))
  (and (dynamic_invariant3 temp___1220 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1220 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1220 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1220 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1220 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1220 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1220 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1220 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1220 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1220 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1220 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1220 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1220 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1220 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result2 true) (= o16 (select temp___1220 ki1))))

;; H
  (assert (=> (= result2 true) (= o17 (us_split_fields1 o16))))

;; H
  (assert (=> (= result2 true) (= o18 (rec__tree_model__path_type__a o17))))

;; H
  (assert
  (=> (= result2 true)
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= temp___1217 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1217 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1217 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1217 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1217 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1217 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1217 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1217 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1217 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1217 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1217 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1217 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1217 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1217 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1217 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert
  (=> (= result2 true)
  (and
  (<= 1 (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3 (select f__split_fields1 ki1)))))
  (<= (to_rep
      (rec__binary_trees__cell__parent
      (us_split_fields3 (select f__split_fields1 ki1)))) 100))))

;; H
  (assert
  (=> (= result2 true)
  (= o12 (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields3 (select f__split_fields1 ki1)))))))

;; H
  (assert (=> (= result2 true) (= o13 (select temp___1217 o12))))

;; H
  (assert (=> (= result2 true) (= o14 (us_split_fields1 o13))))

;; H
  (assert (=> (= result2 true) (= o15 (rec__tree_model__path_type__a o14))))

;; H
  (assert
  (=> (= result2 true)
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (= temp___1214 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 root))
  (and (dynamic_invariant3 temp___1214 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1214 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1214 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1214 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1214 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1214 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1214 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1214 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1214 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1214 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1214 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1214 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1214 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1214 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert
  (=> (= result2 true)
  (and
  (<= 1 (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3 (select f__split_fields1 ki1)))))
  (<= (to_rep
      (rec__binary_trees__cell__parent
      (us_split_fields3 (select f__split_fields1 ki1)))) 100))))

;; H
  (assert
  (=> (= result2 true)
  (= o8 (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3 (select f__split_fields1 ki1)))))))

;; H
  (assert (=> (= result2 true) (= o9 (select temp___1214 o8))))

;; H
  (assert (=> (= result2 true) (= o10 (us_split_fields1 o9))))

;; H
  (assert (=> (= result2 true) (= o11 (rec__tree_model__path_type__a o10))))

;; H
  (assert (=> (= result2 true) (= (oeq o18 o21) true)))

;; H
  (assert
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))

;; H
  (assert
  (and
  (= temp___1223 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1223 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1223 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1223 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1223 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1223 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1223 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1223 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1223 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1223 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1223 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1223 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1223 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1223 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1223 j)))) true))
  (= j i))))))))))))))

;; H
  (assert (= o31 (select temp___1223 ki1)))

;; H
  (assert (= o32 (us_split_fields1 o31)))

;; H
  (assert (= result7 (rec__tree_model__path_type__k o32)))

;; H
  (assert
  (=> (= result7 true)
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true)))

;; H
  (assert
  (=> (= result7 true)
  (and
  (= temp___1224 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1224 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1224 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1224 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1224 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1224 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1224 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1224 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1224 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1224 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1224 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1224 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1224 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1224 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1224 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result7 true) (= o27 (select temp___1224 ki1))))

;; H
  (assert (=> (= result7 true) (= o28 (us_split_fields1 o27))))

;; H
  (assert (=> (= result7 true) (= o29 (rec__tree_model__path_type__a o28))))

;; H
  (assert
  (=> (= result7 true)
  (and (= o30 (length o29)) (and (in_range5 o30) (<= (+ 0 o30) 2147483647)))))

;; H
  (assert (=> (= result7 true) (= result6 (ite (= o30 n2) true false))))

;; H
  (assert (=> (not (= result7 true)) (= result6 false)))

;; H
  (assert (=> (= result6 true) (and (= o23 v) (in_range1 v))))

;; H
  (assert
  (=> (= result6 true)
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true)))

;; H
  (assert (=> (= result6 true) (and (= o24 v) (in_range1 v))))

;; H
  (assert
  (=> (= result6 true)
  (and
  (= temp___1225 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 o24))
  (and (dynamic_invariant3 temp___1225 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1225 o24))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1225 o24)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i o24))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1225 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1225 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1225 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1225 i))) true)
       (not (= i o24)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1225 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1225 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1225 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1225 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1225 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1225 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1225 j)))) true))
  (= j i)))))))))))))))

;; H
  (assert (=> (= result6 true) (= o25 (select temp___1225 ki1))))

;; H
  (assert (=> (= result6 true) (= o26 (us_split_fields1 o25))))

;; H
  (assert (=> (= result6 true) (= o33 (rec__tree_model__path_type__k o26))))

;; H
  (assert (=> (not (= result6 true)) (= o33 false)))

;; H
  (assert (= result5 (ite (and (= o33 true) (not (= ki1 v))) true false)))

;; H
  (assert (= result5 true))

;; H
  (assert
  (and
  (= o52 (to_rep1
         (rec__binary_trees__cell__position
         (us_split_fields3 (select f__split_fields1 ki1)))))
  (in_range4
  (to_rep1
  (rec__binary_trees__cell__position
  (us_split_fields3 (select f__split_fields1 ki1)))))))

;; H
  (assert
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))

;; H
  (assert
  (and
  (= temp___1234 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1234 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1234 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1234 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1234 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1234 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1234 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1234 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1234 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1234 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1234 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1234 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1234 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1234 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1234 j)))) true))
  (= j i))))))))))))))

;; H
  (assert (and (<= 1 v) (<= v 100)))

;; H
  (assert (= o48 v))

;; H
  (assert (= o49 (select temp___1234 o48)))

;; H
  (assert (= o50 (us_split_fields1 o49)))

;; H
  (assert (= o51 (rec__tree_model__path_type__a o50)))

;; H
  (assert
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))

;; H
  (assert
  (and
  (= temp___1233 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1233 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1233 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1233 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1233 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1233 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1233 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1233 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1233 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1233 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1233 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1233 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1233 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1233 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1233 j)))) true))
  (= j i))))))))))))))

;; H
  (assert (= o45 (select temp___1233 ki1)))

;; H
  (assert (= o46 (us_split_fields1 o45)))

;; H
  (assert (= o47 (rec__tree_model__path_type__a o46)))

;; H
  (assert (and (= o40 v) (in_range1 v)))

;; H
  (assert
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))

;; H
  (assert (and (= o41 v) (in_range1 v)))

;; H
  (assert
  (and
  (= temp___1232 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 o41))
  (and (dynamic_invariant3 temp___1232 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1232 o41))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1232 o41)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i o41))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1232 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1232 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1232 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1232 i))) true)
       (not (= i o41)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1232 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1232 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1232 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1232 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1232 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1232 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1232 j)))) true))
  (= j i))))))))))))))

;; H
  (assert (= o42 (select temp___1232 ki1)))

;; H
  (assert (= o43 (us_split_fields1 o42)))

;; H
  (assert (= o44 (rec__tree_model__path_type__a o43)))

;; H
  (assert
  (= (tree_structure
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1))) true))

;; H
  (assert
  (and
  (= temp___1229 (model__
                 (mk___rep2
                 (mk___split_fields2 f_old__split_fields
                 f_old__split_fields1)) root))
  (and (dynamic_invariant3 temp___1229 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1229 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1229 root)))) 0)
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=> (not (= i root))
  (ite (and
       (not
       (= (parent
          (mk___rep2
          (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1229 (parent
                              (mk___rep2
                              (mk___split_fields2 f_old__split_fields
                              f_old__split_fields1)) i)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1229 i))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1229 i))) true))))))
  (and
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1229 i))) true)
       (not (= i root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1229 (parent
                         (mk___rep2
                         (mk___split_fields2 f_old__split_fields
                         f_old__split_fields1)) i))))
     (position
     (mk___rep2
     (mk___split_fields2 f_old__split_fields f_old__split_fields1)) i)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1229 i)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1229 i)))) 0))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1229 i))) true)
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1229 j))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1229 i)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1229 j)))) true))
  (= j i))))))))))))))

;; H
  (assert
  (and
  (<= 1 (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3 (select f__split_fields1 ki1)))))
  (<= (to_rep
      (rec__binary_trees__cell__parent
      (us_split_fields3 (select f__split_fields1 ki1)))) 100)))

;; H
  (assert
  (= o36 (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields3 (select f__split_fields1 ki1))))))

;; H
  (assert (= o37 (select temp___1229 o36)))

;; H
  (assert (= o38 (us_split_fields1 o37)))

;; H
  (assert (= o39 (rec__tree_model__path_type__a o38)))

;; H
  (assert (and (= o34 v) (in_range1 v)))

;; H
  (assert
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))) true))

;; H
  (assert (and (= o35 v) (in_range1 v)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (valid_root
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) 
     o35) true)))
(check-sat)
