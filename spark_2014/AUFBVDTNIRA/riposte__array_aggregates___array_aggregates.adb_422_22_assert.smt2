;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort small_index_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (small_index_t small_index_t) Bool)

(declare-fun dummy () small_index_t)

(declare-datatypes ()
((small_index_t__ref
 (mk_small_index_t__ref (small_index_t__content small_index_t)))))
(define-fun small_index_t__ref___projection ((a small_index_t__ref)) small_index_t 
  (small_index_t__content a))

(declare-sort length_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (length_t length_t) Bool)

(declare-fun dummy1 () length_t)

(declare-datatypes ()
((length_t__ref (mk_length_t__ref (length_t__content length_t)))))
(define-fun length_t__ref_2__projection ((a length_t__ref)) length_t 
  (length_t__content a))

(declare-fun to_rep (length_t) Int)

(declare-fun of_rep (Int) length_t)

;; inversion_axiom
  (assert
  (forall ((x length_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x length_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_t 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_t index_t) Bool)

(declare-fun dummy2 () index_t)

(declare-datatypes ()
((index_t__ref (mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content
                                                                 a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-fun dummy3 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy4 () (Array Int character))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__array_aggregates__string_t__len length_t)(rec__array_aggregates__string_t__elem (Array Int character))))))
(define-fun us_split_fields_Len2__projection ((a us_split_fields)) length_t 
  (rec__array_aggregates__string_t__len a))

(define-fun us_split_fields_Elem__projection ((a us_split_fields)) (Array Int character) 
  (rec__array_aggregates__string_t__elem a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__array_aggregates__string_t__len
                           (us_split_fields1 a))) (to_rep
                                                  (rec__array_aggregates__string_t__len
                                                  (us_split_fields1 b))))
                        (= (bool_eq4
                           (rec__array_aggregates__string_t__elem
                           (us_split_fields1 a)) 1 5
                           (rec__array_aggregates__string_t__elem
                           (us_split_fields1 b)) 1 5) true))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun array_aggregates__string_t__len__first__bit () Int)

(declare-fun array_aggregates__string_t__len__last__bit () Int)

(declare-fun array_aggregates__string_t__len__position () Int)

;; array_aggregates__string_t__len__first__bit_axiom
  (assert (<= 0 array_aggregates__string_t__len__first__bit))

;; array_aggregates__string_t__len__last__bit_axiom
  (assert
  (< array_aggregates__string_t__len__first__bit array_aggregates__string_t__len__last__bit))

;; array_aggregates__string_t__len__position_axiom
  (assert (<= 0 array_aggregates__string_t__len__position))

(declare-fun array_aggregates__string_t__elem__first__bit () Int)

(declare-fun array_aggregates__string_t__elem__last__bit () Int)

(declare-fun array_aggregates__string_t__elem__position () Int)

;; array_aggregates__string_t__elem__first__bit_axiom
  (assert (<= 0 array_aggregates__string_t__elem__first__bit))

;; array_aggregates__string_t__elem__last__bit_axiom
  (assert
  (< array_aggregates__string_t__elem__first__bit array_aggregates__string_t__elem__last__bit))

;; array_aggregates__string_t__elem__position_axiom
  (assert (<= 0 array_aggregates__string_t__elem__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((string_t__ref (mk_string_t__ref (string_t__content us_rep)))))
(define-fun string_t__ref___projection ((a string_t__ref)) us_rep (string_t__content
                                                                  a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_147 Int))
                           (=>
                           (and (<= a__first temp___idx_147)
                           (<= temp___idx_147 a__last))
                           (= (bool_eq5 (select a temp___idx_147)
                              (select b (+ (- b__first a__first) temp___idx_147))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_147 Int))
  (=> (and (<= a__first temp___idx_147) (<= temp___idx_147 a__last))
  (= (bool_eq5 (select a temp___idx_147)
     (select b (+ (- b__first a__first) temp___idx_147))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t126b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (t126b t126b) Bool)

(declare-fun dummy6 () t126b)

(declare-datatypes () ((t126b__ref (mk_t126b__ref (t126b__content t126b)))))
(define-fun t126b__ref___projection ((a t126b__ref)) t126b (t126b__content a))

(declare-sort t124b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (t124b t124b) Bool)

(declare-fun dummy7 () t124b)

(declare-datatypes () ((t124b__ref (mk_t124b__ref (t124b__content t124b)))))
(define-fun t124b__ref___projection ((a t124b__ref)) t124b (t124b__content a))

(declare-sort t129b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (t129b t129b) Bool)

(declare-fun dummy8 () t129b)

(declare-datatypes () ((t129b__ref (mk_t129b__ref (t129b__content t129b)))))
(define-fun t129b__ref___projection ((a t129b__ref)) t129b (t129b__content a))

(declare-fun temp___654 (us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___656 us_rep))
  (forall ((temp___657 Int))
  (= (select (temp___654 temp___656) temp___657) temp___656))))

(declare-fun temp___658 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___660 Int))
  (forall ((temp___661 Int))
  (= (select (temp___658 temp___660) temp___661) (of_rep1 temp___660)))))

(declare-fun temp___662 (Int Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___664 Int) (temp___665 Int))
  (let ((temp___663 (temp___662 temp___664 temp___665)))
  (forall ((temp___666 Int))
  (ite (= temp___666 1)
  (= (select temp___663 temp___666) (of_rep1 temp___664))
  (= (select temp___663 temp___666) (of_rep1 temp___665)))))))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant1 ((temp___expr_275 Int)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)) Bool (=>
                                      (or (= temp___is_init_272 true)
                                      (<= 1 1000)) (in_range1
                                      temp___expr_275)))

(define-fun dynamic_invariant2 ((temp___expr_322 Int)
  (temp___is_init_319 Bool) (temp___skip_constant_320 Bool)
  (temp___do_toplevel_321 Bool)) Bool (=>
                                      (or (= temp___is_init_319 true)
                                      (<= 0 5)) (in_range2 temp___expr_322)))

(define-fun dynamic_invariant3 ((temp___expr_328 Int)
  (temp___is_init_325 Bool) (temp___skip_constant_326 Bool)
  (temp___do_toplevel_327 Bool)) Bool (=>
                                      (or (= temp___is_init_325 true)
                                      (<= 1 5)) (in_range3 temp___expr_328)))

(declare-fun x () (Array Int us_rep))

(declare-fun o () (Array Int character))

(declare-fun o1 () length_t)

(declare-fun o2 () length_t)

(declare-fun o3 () (Array Int character))

(declare-fun o4 () length_t)

(declare-fun o5 () (Array Int character))

(declare-fun o6 () (Array Int us_rep))

(declare-fun result () (Array Int us_rep))

(declare-fun x1 () (Array Int us_rep))

;; H
  (assert (= o (temp___658 32)))

;; H
  (assert (= (to_rep o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert (= o6 (temp___654 (mk___rep (mk___split_fields o4 o5)))))

;; H
  (assert (= result x))

;; H
  (assert (= x1 o6))

(declare-fun n () Int)

;; H
  (assert (<= 1 n))

;; H
  (assert (<= n 1000))

(assert
;; WP_parameter_def
 ;; File "array_aggregates.adb", line 400, characters 0-0
  (not
  (= (bool_eq5 (select x1 n)
     (mk___rep (mk___split_fields (of_rep 0) (temp___662 32 32)))) true)))
(check-sat)
