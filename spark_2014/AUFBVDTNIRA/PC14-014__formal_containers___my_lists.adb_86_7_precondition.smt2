;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tcount_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-fun dummy1 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__my_lists__m__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type 
  (rec__my_lists__m__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__my_lists__m__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type 
  (rec__my_lists__m__list a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_lists__m__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_lists__m__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__my_lists__m__list (us_split_fields1 a))
                           (rec__my_lists__m__list (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_lists__m__list__capacity__first__bit () Int)

(declare-fun my_lists__m__list__capacity__last__bit () Int)

(declare-fun my_lists__m__list__capacity__position () Int)

;; my_lists__m__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__m__list__capacity__first__bit))

;; my_lists__m__list__capacity__last__bit_axiom
  (assert
  (< my_lists__m__list__capacity__first__bit my_lists__m__list__capacity__last__bit))

;; my_lists__m__list__capacity__position_axiom
  (assert (<= 0 my_lists__m__list__capacity__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__my_lists__m__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type 
  (rec__my_lists__m__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__my_lists__m__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__my_lists__m__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun my_lists__m__cursor__node__first__bit () Int)

(declare-fun my_lists__m__cursor__node__last__bit () Int)

(declare-fun my_lists__m__cursor__node__position () Int)

;; my_lists__m__cursor__node__first__bit_axiom
  (assert (<= 0 my_lists__m__cursor__node__first__bit))

;; my_lists__m__cursor__node__last__bit_axiom
  (assert
  (< my_lists__m__cursor__node__first__bit my_lists__m__cursor__node__last__bit))

;; my_lists__m__cursor__node__position_axiom
  (assert (<= 0 my_lists__m__cursor__node__position))

(declare-fun dummy3 () us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(define-fun default_initial_assumption ((temp___expr_195 us_rep1)
  (temp___skip_top_level_196 Bool)) Bool (= (to_rep
                                            (rec__my_lists__m__cursor__node
                                            (us_split_fields3
                                            temp___expr_195))) 0))

(declare-fun no_element () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_141)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_lists__m__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq4 (us_rep2 us_rep2) Bool)

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy4 () us_rep2)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep2)))))
(define-fun map__ref___projection ((a map__ref)) us_rep2 (map__content a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                   a))

(declare-fun get (us_rep2 us_rep1) Int)

(declare-fun get__function_guard (Int us_rep2 us_rep1) Bool)

(declare-sort element_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-fun dummy5 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_239 Int)
  (temp___is_init_236 Bool) (temp___skip_constant_237 Bool)
  (temp___do_toplevel_238 Bool)) Bool (=>
                                      (or (= temp___is_init_236 true)
                                      (<= 1 2147483647)) (in_range3
                                      temp___expr_239)))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption1 ((temp___expr_246 us_rep2)
  (temp___skip_top_level_247 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_247 true))
                                         (and
                                         (= (is_empty temp___expr_246) true)
                                         (= (length1 temp___expr_246) 0))))

(declare-fun has_key (us_rep2 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)

(declare-fun witness (us_rep2 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep1) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

(define-fun default_initial_assumption2 ((temp___expr_234 us_rep1)
  (temp___skip_top_level_235 Bool)) Bool (= (to_rep
                                            (rec__my_lists__m__cursor__node
                                            (us_split_fields3
                                            temp___expr_234))) 0))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq3 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((get container
                                                              key)) ))))

(declare-fun positions (us_rep) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and (and (<= 1 (get result i)) (<= (get result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq3 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq6 (us_rep3 us_rep3) Bool)

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun dummy6 () us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(define-fun oeq ((left us_rep3)
  (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get1 left
                                                                   n) 
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun model__ (us_rep) us_rep3)

(declare-fun model____function_guard (us_rep3 us_rep) Bool)

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun copy (us_rep Int) us_rep)

(declare-fun copy__function_guard (us_rep us_rep Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep))
  (forall ((capacity Int))
  (! (=>
     (and (dynamic_invariant capacity true true true)
     (or (= capacity 0)
     (<= (to_rep
         (rec__my_lists__m__list__capacity (us_split_discrs1 source))) capacity)))
     (let ((result (copy source capacity)))
     (and
     (and (= (oeq (model__ result) (model__ source)) true)
     (= (oeq1 (positions result) (positions source)) true))
     (ite (= capacity 0)
     (= (to_rep (rec__my_lists__m__list__capacity (us_split_discrs1 result))) 
     (to_rep (rec__my_lists__m__list__capacity (us_split_discrs1 source))))
     (= (to_rep (rec__my_lists__m__list__capacity (us_split_discrs1 result))) capacity))))) :pattern (
  (copy source capacity)) ))))

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (get1
                                                                    left i) 
                                                                    (get1
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun last1 (us_rep) us_rep1)

(declare-fun last__function_guard1 (us_rep1 us_rep) Bool)

;; last__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (last1 container)))
     (ite (= (length container) 0) (= (bool_eq3 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) (length container))))) :pattern (
  (last1 container)) )))

(define-fun ole ((left us_rep3)
  (right us_rep3)) Bool (and (<= (length2 left) (length2 right)) (ite 
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last left)))
                                                                 (= (get1
                                                                    left n) 
                                                                 (get1 right
                                                                 n)))) true
                                                                 false)))

(declare-fun ole__function_guard (Bool us_rep3 us_rep3) Bool)

(define-fun range_equal ((left us_rep3) (right us_rep3) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (get1 left i) (get1 right i))))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)

(define-fun range_shifted ((left us_rep3) (right us_rep3) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get1 left i) (get1 right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get1 left (- i offset)) 
                                           (get1 right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep3 us_rep3 Int Int
  Int) Bool)

(declare-fun ole1 (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun keys_included_except (us_rep2 us_rep2 us_rep1) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep2 us_rep2
  us_rep1) Bool)

(declare-fun p_positions_shifted (us_rep2 us_rep2 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(define-fun constant_range ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (get1 container i) item)))
                   true false))

(declare-fun constant_range__function_guard (Bool us_rep3 Int Int Int) Bool)

(declare-fun p_positions_truncated (us_rep2 us_rep2 Int Int) Bool)

(declare-fun p_positions_truncated__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(define-fun m_elements_reversed ((left us_rep3)
  (right us_rep3)) Bool (and (and (= (length2 left) (length2 right)) 
  (ite (forall ((i Int))
       (=> (and (<= 1 i) (<= i (length2 left)))
       (= (get1 left i) (get1 right (+ (- (length2 left) i) 1)))))
  true false)) (ite (forall ((i Int))
                    (=> (and (<= 1 i) (<= i (length2 left)))
                    (= (get1 right i) (get1 left (+ (- (length2 left) i) 1)))))
               true false)))

(declare-fun m_elements_reversed__function_guard (Bool us_rep3 us_rep3) Bool)

(define-fun equal_except__2 ((left us_rep3) (right us_rep3) (x Int)
  (y Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                             ((i Int))
                                                             (=>
                                                             (and (<= 1 i)
                                                             (<= i (last
                                                                   left)))
                                                             (=>
                                                             (and
                                                             (not (= i x))
                                                             (not (= i y)))
                                                             (= (get1 left i) 
                                                             (get1 right i)))))
                                                        true false)))

(declare-fun equal_except__2__function_guard (Bool us_rep3 us_rep3 Int
  Int) Bool)

(define-fun m_elements_swapped ((left us_rep3) (right us_rep3) (x Int)
  (y Int)) Bool (and (and (and (= (length2 left) (length2 right)) (= 
  (get1 left x) (get1 right y))) (= (get1 left y) (get1 right x))) (equal_except__2
                                                                   left right
                                                                   x y)))

(declare-fun m_elements_swapped__function_guard (Bool us_rep3 us_rep3 Int
  Int) Bool)

(declare-fun p_positions_swapped (us_rep2 us_rep2 us_rep1 us_rep1) Bool)

(declare-fun p_positions_swapped__function_guard (Bool us_rep2 us_rep2
  us_rep1 us_rep1) Bool)

(define-fun m_elements_included ((left us_rep3) (l_fst Int) (l_lst Int)
  (right us_rep3) (r_fst Int)
  (r_lst Int)) Bool (ite (forall ((i Int))
                         (=> (and (<= l_fst i) (<= i l_lst))
                         (exists ((j Int))
                         (and (and (<= r_fst j) (<= j r_lst))
                         (= (get1 left i) (get1 right j))))))
                    true false))

(declare-fun m_elements_included__function_guard (Bool us_rep3 Int Int
  us_rep3 Int Int) Bool)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq3 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) 1)))) :pattern ((first container)) )))

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq3 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq3 position no_element) true)
          (= (get (positions container) position) (length container)))
     (= (bool_eq3 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) (+ (get (positions container)
                                              position) 1)))))) :pattern (
  (next container position)) ))))

(declare-fun previous (us_rep us_rep1) us_rep1)

(declare-fun previous__function_guard (us_rep1 us_rep us_rep1) Bool)

;; previous__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq3 position no_element) true))
     (let ((result (previous container position)))
     (ite (or (= (bool_eq3 position no_element) true)
          (= (get (positions container) position) 1))
     (= (bool_eq3 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) (- (get (positions container)
                                              position) 1)))))) :pattern (
  (previous container position)) ))))

(declare-fun find (us_rep Int us_rep1) us_rep1)

(declare-fun find__function_guard (us_rep1 us_rep Int us_rep1) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (element_type1 element_type1) Bool)

(declare-fun dummy7 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_183 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool (=>
                                      (or (= temp___is_init_180 true)
                                      (<= 1 2147483647)) (in_range4
                                      temp___expr_183)))

(define-fun contains ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get1 container i) item)))
                   true false))

(declare-fun contains__function_guard (Bool us_rep3 Int Int Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (forall ((position us_rep1))
  (! (=>
     (and (dynamic_invariant2 item true true true)
     (or (= (has_element container position) true)
     (= (bool_eq3 position no_element) true)))
     (let ((result (find container item position)))
     (ite (not
          (= (contains (model__ container)
             (ite (= (bool_eq3 position no_element) true) 1
             (get (positions container) position)) (length container) item) true))
     (= (bool_eq3 result no_element) true)
     (and
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (model__ container) (get (positions container) result)) item))
     (=> (not (= (bool_eq3 position no_element) true))
     (<= (get (positions container) position) (get (positions container)
                                              result))))
     (not
     (= (contains (model__ container)
        (ite (= (bool_eq3 position no_element) true) 1
        (get (positions container) position))
        (- (get (positions container) result) 1) item) true)))))) :pattern (
  (find container item position)) )))))

(declare-fun reverse_find (us_rep Int us_rep1) us_rep1)

(declare-fun reverse_find__function_guard (us_rep1 us_rep Int us_rep1) Bool)

;; reverse_find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (forall ((position us_rep1))
  (! (=>
     (and (dynamic_invariant2 item true true true)
     (or (= (has_element container position) true)
     (= (bool_eq3 position no_element) true)))
     (let ((result (reverse_find container item position)))
     (ite (not
          (= (contains (model__ container) 1
             (ite (= (bool_eq3 position no_element) true) (length container)
             (get (positions container) position)) item) true))
     (= (bool_eq3 result no_element) true)
     (and
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (model__ container) (get (positions container) result)) item))
     (=> (not (= (bool_eq3 position no_element) true))
     (<= (get (positions container) result) (get (positions container)
                                            position))))
     (not
     (= (contains (model__ container)
        (+ (get (positions container) result) 1)
        (ite (= (bool_eq3 position no_element) true) (length container)
        (get (positions container) position)) item) true)))))) :pattern (
  (reverse_find container item position)) )))))

(declare-fun is_sorted (us_rep) Bool)

(declare-fun is_sorted__function_guard (Bool us_rep) Bool)

(define-fun m_elements_sorted ((container us_rep3)) Bool (ite (forall
                                                              ((i Int))
                                                              (=>
                                                              (and (<= 1 i)
                                                              (<= i (length2
                                                                    container)))
                                                              (forall
                                                              ((j Int))
                                                              (=>
                                                              (and (<= i j)
                                                              (<= j (length2
                                                                    container)))
                                                              (or
                                                              (= (get1
                                                                 container i) 
                                                              (get1 container
                                                              j))
                                                              (< (get1
                                                                 container i) 
                                                              (get1 container
                                                              j)))))))
                                                         true false))

(declare-fun m_elements_sorted__function_guard (Bool us_rep3) Bool)

;; is_sorted__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_sorted container) true)
     (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted
                                                                 container)) )))

(define-fun m_elements_in_union ((container us_rep3) (left us_rep3)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length2 container)))
                             (or
                             (exists ((j Int))
                             (and (and (<= 1 j) (<= j (length2 left)))
                             (= (get1 container i) (get1 left j))))
                             (exists ((j Int))
                             (and (and (<= 1 j) (<= j (length2 right)))
                             (= (get1 container i) (get1 right j)))))))
                        true false))

(declare-fun m_elements_in_union__function_guard (Bool us_rep3 us_rep3
  us_rep3) Bool)

(define-fun in_range5 ((rec__my_lists__m__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__m__list__capacity1 (to_rep
                                                        (rec__my_lists__m__list__capacity
                                                        (us_split_discrs1 a)))))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-fun my_lists__m__list__capacity__first__bit1 () Int)

(declare-fun my_lists__m__list__capacity__last__bit1 () Int)

(declare-fun my_lists__m__list__capacity__position1 () Int)

;; my_lists__m__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__m__list__capacity__first__bit1))

;; my_lists__m__list__capacity__last__bit_axiom
  (assert
  (< my_lists__m__list__capacity__first__bit1 my_lists__m__list__capacity__last__bit1))

;; my_lists__m__list__capacity__position_axiom
  (assert (<= 0 my_lists__m__list__capacity__position1))

(declare-fun dummy8 () us_rep)

(declare-datatypes () ((tlS__ref (mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___projection ((a tlS__ref)) us_rep (tlS__content a))

(define-fun dynamic_invariant3 ((temp___expr_363 us_rep)
  (temp___is_init_360 Bool) (temp___skip_constant_361 Bool)
  (temp___do_toplevel_362 Bool)) Bool (=>
                                      (not (= temp___skip_constant_361 true))
                                      (in_range5 10 temp___expr_363)))

(define-fun default_initial_assumption3 ((temp___expr_365 us_rep)
  (temp___skip_top_level_366 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__m__list__capacity
                                            (us_split_discrs1
                                            temp___expr_365))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_366 true))
                                         (= (is_empty1 temp___expr_365) true))))

(declare-fun l__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range6 ((rec__my_lists__m__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__m__list__capacity1 (to_rep
                                                        (rec__my_lists__m__list__capacity
                                                        (us_split_discrs1 a)))))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-fun my_lists__m__list__capacity__first__bit2 () Int)

(declare-fun my_lists__m__list__capacity__last__bit2 () Int)

(declare-fun my_lists__m__list__capacity__position2 () Int)

;; my_lists__m__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__m__list__capacity__first__bit2))

;; my_lists__m__list__capacity__last__bit_axiom
  (assert
  (< my_lists__m__list__capacity__first__bit2 my_lists__m__list__capacity__last__bit2))

;; my_lists__m__list__capacity__position_axiom
  (assert (<= 0 my_lists__m__list__capacity__position2))

(declare-fun dummy9 () us_rep)

(declare-datatypes () ((tkS__ref (mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___projection ((a tkS__ref)) us_rep (tkS__content a))

(define-fun dynamic_invariant4 ((temp___expr_372 us_rep)
  (temp___is_init_369 Bool) (temp___skip_constant_370 Bool)
  (temp___do_toplevel_371 Bool)) Bool (=>
                                      (not (= temp___skip_constant_370 true))
                                      (in_range6 10 temp___expr_372)))

(define-fun default_initial_assumption4 ((temp___expr_374 us_rep)
  (temp___skip_top_level_375 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__m__list__capacity
                                            (us_split_discrs1
                                            temp___expr_374))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_375 true))
                                         (= (is_empty1 temp___expr_374) true))))

(declare-fun k__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (positive_count_type positive_count_type) Bool)

(declare-fun dummy10 () positive_count_type)

(declare-datatypes ()
((positive_count_type__ref
 (mk_positive_count_type__ref
 (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type 
  (positive_count_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_202 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (<= 1 2147483647)) (in_range7
                                      temp___expr_202)))

(declare-fun keys_included (us_rep2 us_rep2) Bool)

(declare-fun keys_included__function_guard (Bool us_rep2 us_rep2) Bool)

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep2) (big us_rep2))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant5 cut true true true) (dynamic_invariant count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key small i) true)
     (ite (< (get small i) cut) (= (get big i) (get small i))
     (= (- (get big i) count) (get small i))))))
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get big i) count))
     (<= (- (get big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                           small big cut
                                                           count)) ))))

(define-fun same_keys ((left us_rep2)
  (right us_rep2)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun elements_equal_except__2 (us_rep2 us_rep2 us_rep1 us_rep1) Bool)

(declare-fun elements_equal_except__2__function_guard (Bool us_rep2 us_rep2
  us_rep1 us_rep1) Bool)

;; p_positions_swapped__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((x us_rep1) (y us_rep1))
  (! (= (= (p_positions_swapped left right x y) true)
     (and
     (and
     (and
     (and
     (and (= (same_keys left right) true)
     (= (elements_equal_except__2 left right x y) true))
     (= (has_key left x) true)) (= (has_key left y) true))
     (= (get left x) (get right y))) (= (get left y) (get right x)))) :pattern (
  (p_positions_swapped left right x y)) ))))

;; p_positions_truncated__post_axiom
  (assert
  (forall ((small us_rep2) (big us_rep2))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant5 cut true true true) (dynamic_invariant count
     true true true))
     (= (= (p_positions_truncated small big cut count) true)
     (and (= (ole1 small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get big i) count))
     (<= (- (get big i) count) (- cut 1))))))))) :pattern ((p_positions_truncated
                                                           small big cut
                                                           count)) ))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption5 ((temp___expr_227 us_rep3)
  (temp___skip_top_level_228 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_228 true))
                                         (= (length2 temp___expr_227) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length2 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-sort extended_index 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (extended_index extended_index) Bool)

(declare-fun dummy11 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant6 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_220)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length2 container)) )))

(declare-sort element_type2 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (element_type2 element_type2) Bool)

(declare-fun dummy12 () element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_2__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant7 ((temp___expr_214 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (<= 1 2147483647)) (in_range9
                                      temp___expr_214)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant6 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant7 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container k) true) (= (bool_eq3 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length1 container)
  true false true) :pattern ((length1 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole1 left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get right key) (get left key)))))) :pattern (
  (ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get right key) (get left key)))))
     (forall ((key us_rep1))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (keys_included left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern (
  (keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((new_key us_rep1))
  (! (= (= (keys_included_except left right new_key) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (=> (not (= (bool_eq3 key new_key) true)) (= (has_key right key) true))))) :pattern (
  (keys_included_except left right new_key)) ))))

;; elements_equal_except__2__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((x us_rep1) (y us_rep1))
  (! (= (= (elements_equal_except__2 left right x y) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (=>
     (and (not (= (bool_eq3 key x) true)) (not (= (bool_eq3 key y) true)))
     (and (= (has_key right key) true) (= (get left key) (get right key))))))) :pattern (
  (elements_equal_except__2 left right x y)) ))))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant1
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-fun l__split_fields () us_main_type)

(declare-fun k__split_fields () us_main_type)

(declare-fun c__split_fields () count_type)

(declare-fun d__split_fields () count_type)

(declare-fun o () count_type)

(declare-fun o1 () count_type)

(declare-fun temp___566 () count_type)

(declare-fun us () Int)

(declare-fun us1 () Int)

(declare-fun o2 () us_rep1)

(declare-fun temp___526 () us_rep1)

(declare-fun k__split_fields1 () us_split_fields)

(declare-fun l__split_fields1 () us_split_fields)

(declare-fun c__split_fields1 () us_split_fields2)

(declare-fun d__split_fields1 () us_split_fields2)

(declare-fun my_lists__m__insert__3__container__fields () us_split_fields)

(declare-fun result () us_split_fields__ref)

(declare-fun l__split_fields2 () us_split_fields)

(declare-fun d__split_fields2 () us_split_fields2)

(declare-fun my_lists__m__insert__4__container__fields () us_split_fields)

(declare-fun result1 () us_split_fields__ref)

(declare-fun l__split_fields3 () us_split_fields)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun c__split_fields2 () us_split_fields2)

(declare-fun d__split_fields3 () us_split_fields2)

(declare-fun my_lists__m__insert__3__container__fields1 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun l__split_fields4 () us_split_fields)

(declare-fun d__split_fields4 () us_split_fields2)

(declare-fun my_lists__m__insert__4__container__fields1 () us_split_fields)

(declare-fun result4 () us_split_fields__ref)

(declare-fun l__split_fields5 () us_split_fields)

(declare-fun d__split_fields5 () us_split_fields2)

(declare-fun my_lists__m__insert__4__container__fields2 () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun l__split_fields6 () us_split_fields)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___566 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___566)) no_element))

;; H
  (assert (and (= us 10) (in_range2 10)))

;; H
  (assert (default_initial_assumption3
  (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))

;; H
  (assert (= 10 (to_rep (rec__my_lists__m__list__capacity l__split_discrs))))

;; H
  (assert (and (= us1 10) (in_range2 10)))

;; H
  (assert (default_initial_assumption4
  (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))

;; H
  (assert (= 10 (to_rep (rec__my_lists__m__list__capacity k__split_discrs))))

;; H
  (assert (= (to_rep c__split_fields) 0))

;; H
  (assert (= (to_rep d__split_fields) 0))

;; H
  (assert
  (and
  (and (= (bool_eq3 (mk___rep1 c__split_fields1) no_element) true)
  (= (length (mk___rep l__split_discrs l__split_fields1)) 0))
  (= (length (mk___rep k__split_discrs k__split_fields1)) 10)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields)) (+ 
  (length (mk___rep l__split_discrs l__split_fields1)) 1))
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1)) true))
  (ite (= (bool_eq3 (mk___rep1 c__split_fields1) no_element) true)
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1)) (length
                                   (mk___rep l__split_discrs
                                   my_lists__m__insert__3__container__fields)))
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1)) (get
                                   (positions
                                   (mk___rep l__split_discrs
                                   l__split_fields1))
                                   (mk___rep1 c__split_fields1)))))
  (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields1))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields)) 1
     (- (get
        (positions
        (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
        (mk___rep1 d__split_fields1)) 1)) true))
  (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields1))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1))
     (length (mk___rep l__split_discrs l__split_fields1)) 1) true))
  (= (get1
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1))) 8))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields1))
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields))
     (mk___rep1 d__split_fields1)) 1) true)))

;; H
  (assert (= result (mk___split_fields__ref l__split_fields1)))

;; H
  (assert (= l__split_fields2 my_lists__m__insert__3__container__fields))

;; H
  (assert
  (and
  (= (length
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields)) (+ 
  (length (mk___rep l__split_discrs l__split_fields2)) 4))
  (ite (= (= 4 0) true)
  (and
  (and
  (= (bool_eq3 (mk___rep1 d__split_fields2) (mk___rep1 c__split_fields1)) true)
  (= (oeq
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields2))) true))
  (= (oeq1
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields2))) true))
  (and
  (and
  (and
  (and
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2)) true)
  (ite (= (bool_eq3 (mk___rep1 c__split_fields1) no_element) true)
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2)) (+ (length
                                      (mk___rep l__split_discrs
                                      l__split_fields2)) 1))
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2)) (get
                                   (positions
                                   (mk___rep l__split_discrs
                                   l__split_fields2))
                                   (mk___rep1 c__split_fields1)))))
  (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields2))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields)) 1
     (- (get
        (positions
        (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
        (mk___rep1 d__split_fields2)) 1)) true))
  (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields2))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2))
     (length (mk___rep l__split_discrs l__split_fields2)) 4) true))
  (= (constant_range
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2))
     (+ (- (get
           (positions
           (mk___rep l__split_discrs
           my_lists__m__insert__4__container__fields))
           (mk___rep1 d__split_fields2)) 1) 4)
     7) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields2))
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields))
     (mk___rep1 d__split_fields2)) 4) true)))))

;; H
  (assert (= result1 (mk___split_fields__ref l__split_fields2)))

;; H
  (assert (= l__split_fields3 my_lists__m__insert__4__container__fields))

;; H
  (assert
  (and (= o2 (last1 (mk___rep l__split_discrs l__split_fields3)))
  (ite (= (= (length (mk___rep l__split_discrs l__split_fields3)) 0) true)
  (= (bool_eq3 o2 no_element) true)
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3)) o2) true)
  (= (get (positions (mk___rep l__split_discrs l__split_fields3)) o2) 
  (length (mk___rep l__split_discrs l__split_fields3)))))))

;; H
  (assert
  (and
  (= temp___526 (previous (mk___rep l__split_discrs l__split_fields3) o2))
  (ite (= (ite (= (bool_eq3 o2 no_element) false) (= (get
                                                     (positions
                                                     (mk___rep
                                                     l__split_discrs
                                                     l__split_fields3)) 
                                                     o2) 1) true) true)
  (= (bool_eq3 temp___526 no_element) true)
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields3))
     temp___526) true)
  (= (get (positions (mk___rep l__split_discrs l__split_fields3)) temp___526) (- 
  (get (positions (mk___rep l__split_discrs l__split_fields3)) o2) 1))))))

;; H
  (assert (= result2 (mk___split_fields__ref1 c__split_fields1)))

;; H
  (assert (= c__split_fields2 (us_split_fields3 temp___526)))

;; H
  (assert (not (= (bool_eq3 (mk___rep1 c__split_fields2) no_element) true)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1)) (+ 
  (length (mk___rep l__split_discrs l__split_fields3)) 1))
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3)) true))
  (ite (= (bool_eq3 (mk___rep1 c__split_fields2) no_element) true)
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3)) (length
                                   (mk___rep l__split_discrs
                                   my_lists__m__insert__3__container__fields1)))
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3)) (get
                                   (positions
                                   (mk___rep l__split_discrs
                                   l__split_fields3))
                                   (mk___rep1 c__split_fields2)))))
  (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields3))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1)) 1
     (- (get
        (positions
        (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
        (mk___rep1 d__split_fields3)) 1)) true))
  (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields3))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3))
     (length (mk___rep l__split_discrs l__split_fields3)) 1) true))
  (= (get1
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3))) 10))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields3))
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__3__container__fields1))
     (mk___rep1 d__split_fields3)) 1) true)))

;; H
  (assert (= result3 (mk___split_fields__ref l__split_fields3)))

;; H
  (assert (= l__split_fields4 my_lists__m__insert__3__container__fields1))

;; H
  (assert
  (and
  (= (length
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1)) (+ 
  (length (mk___rep l__split_discrs l__split_fields4)) 4))
  (ite (= (= 4 0) true)
  (and
  (and
  (= (bool_eq3 (mk___rep1 d__split_fields4) (mk___rep1 c__split_fields2)) true)
  (= (oeq
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (model__ (mk___rep l__split_discrs l__split_fields4))) true))
  (= (oeq1
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (positions (mk___rep l__split_discrs l__split_fields4))) true))
  (and
  (and
  (and
  (and
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4)) true)
  (ite (= (bool_eq3 (mk___rep1 c__split_fields2) no_element) true)
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4)) (+ (length
                                      (mk___rep l__split_discrs
                                      l__split_fields4)) 1))
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4)) (get
                                   (positions
                                   (mk___rep l__split_discrs
                                   l__split_fields4))
                                   (mk___rep1 c__split_fields2)))))
  (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields4))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1)) 1
     (- (get
        (positions
        (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
        (mk___rep1 d__split_fields4)) 1)) true))
  (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields4))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4))
     (length (mk___rep l__split_discrs l__split_fields4)) 4) true))
  (= (constant_range
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4))
     (+ (- (get
           (positions
           (mk___rep l__split_discrs
           my_lists__m__insert__4__container__fields1))
           (mk___rep1 d__split_fields4)) 1) 4)
     9) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields4))
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields1))
     (mk___rep1 d__split_fields4)) 4) true)))))

;; H
  (assert (= result4 (mk___split_fields__ref l__split_fields4)))

;; H
  (assert (= l__split_fields5 my_lists__m__insert__4__container__fields1))

;; H
  (assert
  (and
  (= (length
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2)) (+ 
  (length (mk___rep l__split_discrs l__split_fields5)) 0))
  (ite (= (= 0 0) true)
  (and
  (and
  (= (bool_eq3 (mk___rep1 d__split_fields5) (mk___rep1 c__split_fields2)) true)
  (= (oeq
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (model__ (mk___rep l__split_discrs l__split_fields5))) true))
  (= (oeq1
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (positions (mk___rep l__split_discrs l__split_fields5))) true))
  (and
  (and
  (and
  (and
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5)) true)
  (ite (= (bool_eq3 (mk___rep1 c__split_fields2) no_element) true)
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5)) (+ (length
                                      (mk___rep l__split_discrs
                                      l__split_fields5)) 1))
  (= (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5)) (get
                                   (positions
                                   (mk___rep l__split_discrs
                                   l__split_fields5))
                                   (mk___rep1 c__split_fields2)))))
  (= (range_equal (model__ (mk___rep l__split_discrs l__split_fields5))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2)) 1
     (- (get
        (positions
        (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
        (mk___rep1 d__split_fields5)) 1)) true))
  (= (range_shifted (model__ (mk___rep l__split_discrs l__split_fields5))
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5))
     (length (mk___rep l__split_discrs l__split_fields5)) 0) true))
  (= (constant_range
     (model__
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5))
     (+ (- (get
           (positions
           (mk___rep l__split_discrs
           my_lists__m__insert__4__container__fields2))
           (mk___rep1 d__split_fields5)) 1) 0)
     8) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields5))
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (get
     (positions
     (mk___rep l__split_discrs my_lists__m__insert__4__container__fields2))
     (mk___rep1 d__split_fields5)) 0) true)))))

;; H
  (assert (= result5 (mk___split_fields__ref l__split_fields5)))

;; H
  (assert (= l__split_fields6 my_lists__m__insert__4__container__fields2))

;; H
  (assert (= (length (mk___rep l__split_discrs l__split_fields6)) 10))

(assert
;; WP_parameter_def
 ;; File "a-cfdlli.ads", line 1572, characters 0-0
  (not
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields6))
     (mk___rep1 c__split_fields2)) true)))
(check-sat)
