;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy1 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-fun dummy2 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range3
                                      temp___expr_150)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq3 (us_rep us_rep) Bool)

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (count_type count_type) Bool)

(declare-fun dummy4 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_144)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption ((temp___expr_199 us_rep)
  (temp___skip_top_level_200 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_200 true))
                                         (= (length temp___expr_199) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-fun dummy5 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 1)) (in_range5 temp___expr_186)))

(declare-sort extended_index 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (extended_index extended_index) Bool)

(declare-fun dummy6 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_192)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant3 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant2 (get container position) true false true)) :pattern (
  (get container position)) ))))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq3
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-fun is_concat (us_rep us_rep us_rep) Bool)

(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)

;; is_concat__post_axiom
  (assert true)

;; is_concat__def_axiom
  (assert
  (forall ((q us_rep) (v us_rep) (p us_rep))
  (! (= (= (is_concat q v p) true)
     (and
     (and
     (and (= (- (length p) (length v)) (length q))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length q))) (= (get p i) (get q i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length v)))
     (= (get p (+ i (length q))) (get v i)))))
     (forall ((i Int))
     (=> (and (<= (+ (length q) 1) i) (<= i (length p)))
     (= (get v (- i (length q))) (get p i)))))) :pattern ((is_concat q v p)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq8 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq7 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq7 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort extended_index_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (extended_index_type extended_index_type) Bool)

(declare-fun dummy8 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(declare-fun to_rep1 (extended_index_type) Int)

(declare-fun of_rep1 (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range7
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort position_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (position_type position_type) Bool)

(declare-fun dummy9 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep2 (position_type) Int)

(declare-fun of_rep2 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range8
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq11 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep1
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy10 () us_rep2)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq12 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq11 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq11 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy11 () (Array Int us_rep2))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int us_rep2)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep2)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq11 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq13 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq12
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy12 () us_rep3)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content
                                                               a))

(declare-fun size (us_rep3) Int)

(declare-fun size__function_guard (Int us_rep3) Bool)

(declare-fun tree_structure (us_rep3) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)

(define-fun dynamic_invariant4 ((temp___expr_273 us_rep3)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)) Bool (= (tree_structure temp___expr_273) true))

(define-fun default_initial_assumption1 ((temp___expr_276 us_rep3)
  (temp___skip_top_level_277 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_276))) 0)
                                         (forall ((temp___279 Int))
                                         (=>
                                         (and (<= 1 temp___279)
                                         (<= temp___279 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_277 true))
                                         (= (size temp___expr_276) 0))))

(define-fun type_invariant ((temp___282 us_rep3)) Bool (= (tree_structure
                                                          temp___282) true))

(declare-fun valid_root (us_rep3 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant4 f true true true) (dynamic_invariant i true
     true true)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern (
  (valid_root f i)) ))))

(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)

(define-fun dynamic_invariant5 ((temp___expr_216 (Array Int us_rep1))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int))
                                      (=>
                                      (and (<= 1 temp___217)
                                      (<= temp___217 100))
                                      (=> (= temp___is_init_213 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_216 temp___217)))) 100)))))

(define-fun default_initial_assumption2 ((temp___expr_219 (Array Int us_rep1))
  (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int))
                                         (=>
                                         (and (<= 1 temp___221)
                                         (<= temp___221 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221))) 
                                         (of_int 0))))))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(declare-fun parent (us_rep3 Int) Int)

(declare-fun parent__function_guard (Int us_rep3 Int) Bool)

(declare-fun position (us_rep3 Int) Int)

(declare-fun position__function_guard (Int us_rep3 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((root Int))
  (! (=>
     (and
     (and (dynamic_invariant4 f true true true) (dynamic_invariant root true
     true true)) (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant5 result true false true)))) :pattern (
  (model__ f root)) ))))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep (select a temp___idx_134)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep (select a temp___idx_134)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq14 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq14 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq14 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun ordered_leafs (us_rep3 Int (Array Int natural)) Bool)

(declare-fun ordered_leafs__function_guard (Bool us_rep3 Int
  (Array Int natural)) Bool)

;; ordered_leafs__post_axiom
  (assert true)

;; ordered_leafs__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((root Int))
  (forall ((values (Array Int natural)))
  (! (= (= (ordered_leafs f root values) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___482 (model__ f root))) (select temp___482 i)))) true)
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___483 (model__ f root))) (select temp___483 j)))) true))
     (= (olt
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___484 (model__ f root))) (select temp___484 i))))
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___485 (model__ f root))) (select temp___485 j))))) true))
     (ite (= (get
             (rec__tree_model__path_type__a
             (us_split_fields1
             (let ((temp___480 (model__ f root))) (select temp___480 j))))
             (+ (length
                (rec__tree_model__path_type__a
                (us_split_fields1
                (let ((temp___481 (model__ f root))) (select temp___481 i))))) 1)) 0)
     (< (to_rep (select values j)) (to_rep (select values i)))
     (< (to_rep (select values i)) (to_rep (select values j)))))))))) :pattern (
  (ordered_leafs f root values)) )))))

(declare-fun f () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun f_old () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun root () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun v () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun values () (Array Int natural))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_invariant6 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant7 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range7
                                      temp___expr_156)))

(define-fun dynamic_invariant8 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range8 temp___expr_162)))

(declare-sort direction 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (direction direction) Bool)

(declare-fun dummy13 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant9 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 1)) (in_range9 temp___expr_168)))

(define-fun dynamic_invariant10 ((temp___expr_205 us_rep1)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true)
                                      (=> (= temp___is_init_202 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_205))) 100))))

(define-fun default_initial_assumption3 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_207))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_207)) (of_int 0))))

(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___211))) 100))

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2)) ))))

;; size__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (! (=> (dynamic_invariant4 f1 true true true) (dynamic_invariant7 (size f1)
     true false true)) :pattern ((size f1)) )))

;; parent__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant4 f1 true true true) (dynamic_invariant i true
     true true))
     (let ((result (parent f1 i)))
     (and
     (and (=> (= (valid_root f1 i) true) (= result 0))
     (=> (= (size f1) 0) (= result 0))) (dynamic_invariant7 result true false
     true)))) :pattern ((parent f1 i)) ))))

;; position__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant4 f1 true true true) (dynamic_invariant i true
     true true)) (not (= (parent f1 i) 0))) (dynamic_invariant9
     (position f1 i) true false true)) :pattern ((position f1 i)) ))))

(define-fun default_initial_assumption4 ((temp___expr_259 us_rep2)
  (temp___skip_top_level_260 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_259))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_259))) 2)))

(define-fun default_initial_assumption5 ((temp___expr_266 (Array Int us_rep2))
  (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int))
                                         (=>
                                         (and (<= 1 temp___268)
                                         (<= temp___268 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

(declare-fun i () Int)

(declare-fun k () Int)

(declare-fun j () Int)

(declare-fun temp___1331 () (Array Int us_rep1))

(declare-fun o () Int)

(declare-fun o1 () us_rep1)

(declare-fun o2 () us_split_fields)

(declare-fun o3 () us_rep)

(declare-fun temp___1332 () (Array Int us_rep1))

(declare-fun o4 () us_rep1)

(declare-fun o5 () us_split_fields)

(declare-fun o6 () us_rep)

(declare-fun temp___1330 () (Array Int us_rep1))

(declare-fun o7 () us_rep1)

(declare-fun o8 () us_split_fields)

(declare-fun temp___1329 () (Array Int us_rep1))

(declare-fun o9 () Int)

(declare-fun o10 () us_rep1)

(declare-fun o11 () us_split_fields)

(declare-fun temp___1328 () (Array Int us_rep1))

(declare-fun o12 () Int)

(declare-fun o13 () us_rep1)

(declare-fun o14 () us_split_fields)

(declare-fun o15 () us_rep)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun result () int__ref)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

;; H
  (assert (= (tree_structure f) true))

;; H
  (assert (= (tree_structure f_old) true))

;; H
  (assert (in_range3 root))

;; H
  (assert (in_range3 v))

;; H
  (assert
  (and (= (valid_root f_old root) true)
  (and (= (valid_root f root) true)
  (and (= (valid_root f v) true)
  (and (not (= (valid_root f_old v) true))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f_old root) v))) true)
  (and (= (ordered_leafs f_old root values) true)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f_old root) i3))) true)
  (ite (= (ole
          (rec__tree_model__path_type__a
          (us_split_fields1 (select (model__ f_old root) v)))
          (rec__tree_model__path_type__a
          (us_split_fields1 (select (model__ f_old root) i3)))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f v) i3))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) i3))) true)))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) i3))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f_old root) i3))) true))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (and (not (= v 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f v) i3))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f_old root) i3))) true))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) i3))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f root) i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f_old root) i3)))) true))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (and (not (= v 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f v) i3))) true))
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f_old root) v)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f v) i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f_old root) i3)))) true)))))))))))))))

;; H
  (assert (= result (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 100))

;; H
  (assert
  (forall ((k1 Int))
  (=> (and (<= 1 k1) (<= k1 (- i2 1)))
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) k1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) j1))) true))
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f root) k1)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select (model__ f root) j1)))) true))
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1 (select (model__ f root) j1)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1 (select (model__ f root) k1)))) 1)) 0)
  (< (to_rep (select values j1)) (to_rep (select values k1)))
  (< (to_rep (select values k1)) (to_rep (select values j1))))))))))

;; H
  (assert (and (=> (<= 1 100) (in_range3 i2)) (and (<= 1 i2) (<= i2 100))))

;; H
  (assert (<= 1 k))

;; H
  (assert (<= k (- i2 1)))

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j 100))

;; H
  (assert
  (and (= temp___1329 (model__ f root))
  (and (dynamic_invariant5 temp___1329 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1329 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 root)))) 0)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=> (not (= i3 root))
  (ite (and (not (= (parent f i3) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1329 (parent f i3)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1329 i3))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1329 i3))) true))))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1329 i3))) true)
       (not (= i3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 (parent f i3)))) (position f i3)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 i3)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 i3)))) 0))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1329 i3))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1329 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1329 j1)))) true))
  (= j1 i3))))))))))))))

;; H
  (assert (and (<= 1 k) (<= k 100)))

;; H
  (assert (= o9 k))

;; H
  (assert (= o10 (select temp___1329 o9)))

;; H
  (assert (= o11 (us_split_fields1 o10)))

;; H
  (assert (= result3 (rec__tree_model__path_type__k o11)))

;; H
  (assert
  (=> (= result3 true)
  (and (= temp___1330 (model__ f root))
  (and (dynamic_invariant5 temp___1330 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1330 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 root)))) 0)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=> (not (= i3 root))
  (ite (and (not (= (parent f i3) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1330 (parent f i3)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1330 i3))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1330 i3))) true))))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1330 i3))) true)
       (not (= i3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 (parent f i3)))) (position f i3)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 i3)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 i3)))) 0))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1330 i3))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1330 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1330 j1)))) true))
  (= j1 i3)))))))))))))))

;; H
  (assert (=> (= result3 true) (= o7 (select temp___1330 j))))

;; H
  (assert (=> (= result3 true) (= o8 (us_split_fields1 o7))))

;; H
  (assert
  (=> (= result3 true) (= result2 (rec__tree_model__path_type__k o8))))

;; H
  (assert (=> (not (= result3 true)) (= result2 false)))

;; H
  (assert
  (=> (= result2 true)
  (and (= temp___1332 (model__ f root))
  (and (dynamic_invariant5 temp___1332 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1332 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 root)))) 0)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=> (not (= i3 root))
  (ite (and (not (= (parent f i3) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1332 (parent f i3)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1332 i3))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1332 i3))) true))))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1332 i3))) true)
       (not (= i3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 (parent f i3)))) (position f i3)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 i3)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 i3)))) 0))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1332 i3))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1332 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1332 j1)))) true))
  (= j1 i3)))))))))))))))

;; H
  (assert (=> (= result2 true) (= o4 (select temp___1332 j))))

;; H
  (assert (=> (= result2 true) (= o5 (us_split_fields1 o4))))

;; H
  (assert (=> (= result2 true) (= o6 (rec__tree_model__path_type__a o5))))

;; H
  (assert
  (=> (= result2 true)
  (and (= temp___1331 (model__ f root))
  (and (dynamic_invariant5 temp___1331 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1331 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 root)))) 0)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=> (not (= i3 root))
  (ite (and (not (= (parent f i3) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1331 (parent f i3)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1331 i3))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1331 i3))) true))))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1331 i3))) true)
       (not (= i3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 (parent f i3)))) (position f i3)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 i3)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 i3)))) 0))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1331 i3))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1331 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1331 j1)))) true))
  (= j1 i3)))))))))))))))

;; H
  (assert (=> (= result2 true) (and (<= 1 k) (<= k 100))))

;; H
  (assert (=> (= result2 true) (= o k)))

;; H
  (assert (=> (= result2 true) (= o1 (select temp___1331 o))))

;; H
  (assert (=> (= result2 true) (= o2 (us_split_fields1 o1))))

;; H
  (assert (=> (= result2 true) (= o3 (rec__tree_model__path_type__a o2))))

;; H
  (assert
  (=> (= result2 true)
  (and (= result1 (olt o3 o6))
  (= (= result1 true)
  (and (< (length o3) (length o6))
  (forall ((n Int))
  (=> (and (<= 1 n) (<= n (last o3))) (= (get o3 n) (get o6 n)))))))))

;; H
  (assert (=> (not (= result2 true)) (= result1 false)))

;; H
  (assert (= result1 true))

;; H
  (assert
  (and (= temp___1328 (model__ f root))
  (and (dynamic_invariant5 temp___1328 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1328 root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 root)))) 0)
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=> (not (= i3 root))
  (ite (and (not (= (parent f i3) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1328 (parent f i3)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1328 i3))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1328 i3))) true))))))
  (and
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1328 i3))) true)
       (not (= i3 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 (parent f i3)))) (position f i3)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 i3)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 i3)))) 0))))
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1328 i3))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1328 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 i3)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1328 j1)))) true))
  (= j1 i3))))))))))))))

;; H
  (assert (and (<= 1 k) (<= k 100)))

;; H
  (assert (= o12 k))

;; H
  (assert (= o13 (select temp___1328 o12)))

;; H
  (assert (= o14 (us_split_fields1 o13)))

;; H
  (assert (= o15 (rec__tree_model__path_type__a o14)))

;; H
  (assert
  (and (= o16 (length o15)) (and (in_range4 o16) (<= (+ 0 o16) 2147483647))))

;; H
  (assert (= o17 (+ o16 1)))

(assert
;; WP_parameter_def
 ;; File "tree_model.ads", line 12, characters 0-0
  (not (in_range2 o17)))
(check-sat)
