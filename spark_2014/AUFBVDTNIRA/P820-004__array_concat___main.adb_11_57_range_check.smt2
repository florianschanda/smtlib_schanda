;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool)
  (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun vstring () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort tTcsSP1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tTcsSP1 tTcsSP1) Bool)

(declare-fun dummy4 () tTcsSP1)

(declare-datatypes ()
((tTcsSP1__ref (mk_tTcsSP1__ref (tTcsSP1__content tTcsSP1)))))
(define-fun tTcsSP1__ref___projection ((a tTcsSP1__ref)) tTcsSP1 (tTcsSP1__content
                                                                 a))

(declare-fun cs () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun main__cs__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___133 Int))
  (forall ((temp___134 Int))
  (= (select (main__cs__aggregate_def temp___133) temp___134) (of_rep
                                                              temp___133)))))

(declare-fun catstring () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun catstring1 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun catstring2 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun catstring8 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun catstring9 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun catstring10 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun catstring3 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun temp___String_Literal_141 (tuple0) (Array Int character))

;; temp___String_Literal_141__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_141 us_void_param) 6)) 111)) :pattern (
  (temp___String_Literal_141 us_void_param)) )))

(declare-fun catstring4 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun temp___String_Literal_144 (tuple0) (Array Int character))

;; temp___String_Literal_144__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_144 us_void_param) 6)) 111)) :pattern (
  (temp___String_Literal_144 us_void_param)) )))

(declare-fun catstring5 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun temp___String_Literal_147 (tuple0) (Array Int character))

;; temp___String_Literal_147__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_147 us_void_param) 6)) 111)) :pattern (
  (temp___String_Literal_147 us_void_param)) )))

(declare-fun catstring6 () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun temp___String_Literal_150 (tuple0) (Array Int character))

;; temp___String_Literal_150__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_150 us_void_param) 1)) 104)
     (= (to_rep (select (temp___String_Literal_150 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_150 us_void_param) 3)) 108))
     (= (to_rep (select (temp___String_Literal_150 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_150 us_void_param) 5)) 111)) :pattern (
  (temp___String_Literal_150 us_void_param)) )))

(declare-fun temp___String_Literal_152 (tuple0) (Array Int character))

;; temp___String_Literal_152__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_152 us_void_param) 1)) 104)
     (= (to_rep (select (temp___String_Literal_152 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_152 us_void_param) 3)) 108))
     (= (to_rep (select (temp___String_Literal_152 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_152 us_void_param) 5)) 111)) :pattern (
  (temp___String_Literal_152 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

;; vstring__def_axiom
  (assert (= vstring (to_string (attr__ATTRIBUTE_IMAGE1 10))))

;; cs__def_axiom
  (assert (= cs (main__cs__aggregate_def 32)))

;; catstring__def_axiom
  (assert
  (= catstring (let ((temp___135 (ite (= (length vstring) 0)
                                 (of_array (to_array vstring)
                                 (first1 vstring) (last1 vstring))
                                 (of_array
                                 (concat1 (to_array vstring) (first1 vstring)
                                 (last1 vstring) (to_array vstring)
                                 (first1 vstring) (last1 vstring))
                                 (first1 vstring)
                                 (- (+ (first1 vstring) (+ (ite (<= (first1
                                                                    vstring) 
                                                           (last1 vstring))
                                                           (+ (- (last1
                                                                 vstring) 
                                                           (first1 vstring)) 1)
                                                           0) (ite (<= 
                                                              (first1
                                                              vstring) 
                                                              (last1 
                                                              vstring))
                                                              (+ (- (last1
                                                                    vstring) 
                                                              (first1
                                                              vstring)) 1) 0))) 1)))))
               (ite (= (length temp___135) 0)
               (of_array (to_array vstring) (first1 vstring) (last1 vstring))
               (of_array
               (concat1 (to_array temp___135) (first1 temp___135)
               (last1 temp___135) (to_array vstring) (first1 vstring)
               (last1 vstring)) (first1 temp___135)
               (- (+ (first1 temp___135) (+ (ite (<= (first1 temp___135) 
                                            (last1 temp___135))
                                            (+ (- (last1 temp___135) 
                                            (first1 temp___135)) 1) 0) 
               (ite (<= (first1 vstring) (last1 vstring))
               (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring1__def_axiom
  (assert
  (= catstring1 (let ((temp___136 (ite (= (length vstring) 0)
                                  (of_array (to_array vstring)
                                  (first1 vstring) (last1 vstring))
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring)
                                  (to_array vstring) (first1 vstring)
                                  (last1 vstring)) (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 
                                                               (first1
                                                               vstring) 
                                                               (last1
                                                               vstring))
                                                               (+ (- 
                                                               (last1
                                                               vstring) 
                                                               (first1
                                                               vstring)) 1)
                                                               0))) 1)))))
                (ite (= (length temp___136) 0)
                (of_array (to_array vstring) (first1 vstring)
                (last1 vstring))
                (of_array
                (concat1 (to_array temp___136) (first1 temp___136)
                (last1 temp___136) (to_array vstring) (first1 vstring)
                (last1 vstring)) (first1 temp___136)
                (- (+ (first1 temp___136) (+ (ite (<= (first1 temp___136) 
                                             (last1 temp___136))
                                             (+ (- (last1 temp___136) 
                                             (first1 temp___136)) 1) 0) 
                (ite (<= (first1 vstring) (last1 vstring))
                (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring2__def_axiom
  (assert
  (= catstring2 (let ((temp___137 (ite (= (length vstring) 0)
                                  (of_array (to_array vstring)
                                  (first1 vstring) (last1 vstring))
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring)
                                  (to_array vstring) (first1 vstring)
                                  (last1 vstring)) (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 
                                                               (first1
                                                               vstring) 
                                                               (last1
                                                               vstring))
                                                               (+ (- 
                                                               (last1
                                                               vstring) 
                                                               (first1
                                                               vstring)) 1)
                                                               0))) 1)))))
                (ite (= (length vstring) 0)
                (of_array (to_array temp___137) (first1 temp___137)
                (last1 temp___137))
                (of_array
                (concat1 (to_array vstring) (first1 vstring) (last1 vstring)
                (to_array temp___137) (first1 temp___137) (last1 temp___137))
                (first1 vstring)
                (- (+ (first1 vstring) (+ (ite (<= (first1 vstring) (last1
                                                                    vstring))
                                          (+ (- (last1 vstring) (first1
                                                                vstring)) 1)
                                          0) (ite (<= (first1 temp___137) 
                                             (last1 temp___137))
                                             (+ (- (last1 temp___137) 
                                             (first1 temp___137)) 1) 0))) 1))))))

;; catstring8__def_axiom
  (assert
  (= catstring8 (let ((temp___138 (ite (= (length vstring) 0)
                                  (of_array cs 1 2)
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring) cs 1 2)
                                  (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 1 2)
                                                               (+ (- 2 1) 1)
                                                               0))) 1)))))
                (ite (= (length temp___138) 0)
                (of_array (to_array vstring) (first1 vstring)
                (last1 vstring))
                (of_array
                (concat1 (to_array temp___138) (first1 temp___138)
                (last1 temp___138) (to_array vstring) (first1 vstring)
                (last1 vstring)) (first1 temp___138)
                (- (+ (first1 temp___138) (+ (ite (<= (first1 temp___138) 
                                             (last1 temp___138))
                                             (+ (- (last1 temp___138) 
                                             (first1 temp___138)) 1) 0) 
                (ite (<= (first1 vstring) (last1 vstring))
                (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring9__def_axiom
  (assert
  (= catstring9 (let ((temp___139 (ite (= (length vstring) 0)
                                  (of_array cs 1 2)
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring) cs 1 2)
                                  (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 1 2)
                                                               (+ (- 2 1) 1)
                                                               0))) 1)))))
                (ite (= (length temp___139) 0)
                (of_array (to_array vstring) (first1 vstring)
                (last1 vstring))
                (of_array
                (concat1 (to_array temp___139) (first1 temp___139)
                (last1 temp___139) (to_array vstring) (first1 vstring)
                (last1 vstring)) (first1 temp___139)
                (- (+ (first1 temp___139) (+ (ite (<= (first1 temp___139) 
                                             (last1 temp___139))
                                             (+ (- (last1 temp___139) 
                                             (first1 temp___139)) 1) 0) 
                (ite (<= (first1 vstring) (last1 vstring))
                (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring10__def_axiom
  (assert
  (= catstring10 (let ((temp___140 (of_array
                                   (concat1 cs 1 2 (to_array vstring)
                                   (first1 vstring) (last1 vstring)) 1
                                   (- (+ 1 (+ (ite (<= 1 2) (+ (- 2 1) 1) 0) 
                                   (ite (<= (first1 vstring) (last1 vstring))
                                   (+ (- (last1 vstring) (first1 vstring)) 1)
                                   0))) 1))))
                 (ite (= (length vstring) 0)
                 (of_array (to_array temp___140) (first1 temp___140)
                 (last1 temp___140))
                 (of_array
                 (concat1 (to_array vstring) (first1 vstring) (last1 vstring)
                 (to_array temp___140) (first1 temp___140)
                 (last1 temp___140)) (first1 vstring)
                 (- (+ (first1 vstring) (+ (ite (<= (first1 vstring) 
                                           (last1 vstring))
                                           (+ (- (last1 vstring) (first1
                                                                 vstring)) 1)
                                           0) (ite (<= (first1 temp___140) 
                                              (last1 temp___140))
                                              (+ (- (last1 temp___140) 
                                              (first1 temp___140)) 1) 0))) 1))))))

;; catstring3__def_axiom
  (assert
  (= catstring3 (let ((temp___143 (let ((temp___142 (temp___String_Literal_141
                                                    Tuple0)))
                                  (ite (= (length vstring) 0)
                                  (of_array temp___142 1 6)
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring) temp___142
                                  1 6) (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 1 6)
                                                               (+ (- 6 1) 1)
                                                               0))) 1))))))
                (ite (= (length temp___143) 0)
                (of_array (to_array vstring) (first1 vstring)
                (last1 vstring))
                (of_array
                (concat1 (to_array temp___143) (first1 temp___143)
                (last1 temp___143) (to_array vstring) (first1 vstring)
                (last1 vstring)) (first1 temp___143)
                (- (+ (first1 temp___143) (+ (ite (<= (first1 temp___143) 
                                             (last1 temp___143))
                                             (+ (- (last1 temp___143) 
                                             (first1 temp___143)) 1) 0) 
                (ite (<= (first1 vstring) (last1 vstring))
                (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring4__def_axiom
  (assert
  (= catstring4 (let ((temp___146 (let ((temp___145 (temp___String_Literal_144
                                                    Tuple0)))
                                  (ite (= (length vstring) 0)
                                  (of_array temp___145 1 6)
                                  (of_array
                                  (concat1 (to_array vstring)
                                  (first1 vstring) (last1 vstring) temp___145
                                  1 6) (first1 vstring)
                                  (- (+ (first1 vstring) (+ (ite (<= 
                                                            (first1 vstring) 
                                                            (last1 vstring))
                                                            (+ (- (last1
                                                                  vstring) 
                                                            (first1 vstring)) 1)
                                                            0) (ite (<= 1 6)
                                                               (+ (- 6 1) 1)
                                                               0))) 1))))))
                (ite (= (length temp___146) 0)
                (of_array (to_array vstring) (first1 vstring)
                (last1 vstring))
                (of_array
                (concat1 (to_array temp___146) (first1 temp___146)
                (last1 temp___146) (to_array vstring) (first1 vstring)
                (last1 vstring)) (first1 temp___146)
                (- (+ (first1 temp___146) (+ (ite (<= (first1 temp___146) 
                                             (last1 temp___146))
                                             (+ (- (last1 temp___146) 
                                             (first1 temp___146)) 1) 0) 
                (ite (<= (first1 vstring) (last1 vstring))
                (+ (- (last1 vstring) (first1 vstring)) 1) 0))) 1))))))

;; catstring5__def_axiom
  (assert
  (= catstring5 (let ((temp___149 (let ((temp___148 (temp___String_Literal_147
                                                    Tuple0)))
                                  (of_array
                                  (concat1 temp___148 1 6 (to_array vstring)
                                  (first1 vstring) (last1 vstring)) 1
                                  (- (+ 1 (+ (ite (<= 1 6) (+ (- 6 1) 1) 0) 
                                  (ite (<= (first1 vstring) (last1 vstring))
                                  (+ (- (last1 vstring) (first1 vstring)) 1)
                                  0))) 1)))))
                (ite (= (length vstring) 0)
                (of_array (to_array temp___149) (first1 temp___149)
                (last1 temp___149))
                (of_array
                (concat1 (to_array vstring) (first1 vstring) (last1 vstring)
                (to_array temp___149) (first1 temp___149) (last1 temp___149))
                (first1 vstring)
                (- (+ (first1 vstring) (+ (ite (<= (first1 vstring) (last1
                                                                    vstring))
                                          (+ (- (last1 vstring) (first1
                                                                vstring)) 1)
                                          0) (ite (<= (first1 temp___149) 
                                             (last1 temp___149))
                                             (+ (- (last1 temp___149) 
                                             (first1 temp___149)) 1) 0))) 1))))))

;; catstring6__def_axiom
  (assert
  (= catstring6 (let ((temp___154 (temp___String_Literal_152 Tuple0)))
                (let ((temp___153 (let ((temp___151 (temp___String_Literal_150
                                                    Tuple0)))
                                  (of_array
                                  (concat1 temp___151 1 5 (to_array vstring)
                                  (first1 vstring) (last1 vstring)) 1
                                  (- (+ 1 (+ (ite (<= 1 5) (+ (- 5 1) 1) 0) 
                                  (ite (<= (first1 vstring) (last1 vstring))
                                  (+ (- (last1 vstring) (first1 vstring)) 1)
                                  0))) 1)))))
                (ite (= (length temp___153) 0) (of_array temp___154 1 5)
                (of_array
                (concat1 (to_array temp___153) (first1 temp___153)
                (last1 temp___153) temp___154 1 5) (first1 temp___153)
                (- (+ (first1 temp___153) (+ (ite (<= (first1 temp___153) 
                                             (last1 temp___153))
                                             (+ (- (last1 temp___153) 
                                             (first1 temp___153)) 1) 0) 
                (ite (<= 1 5) (+ (- 5 1) 1) 0))) 1)))))))

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun temp___200 () (Array Int character))

(declare-fun temp___2001 () t)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun main__catstring__assume () (Array Int character))

(declare-fun main__catstring__assume1 () t)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun temp___201 () (Array Int character))

(declare-fun temp___2011 () t)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

;; H
  (assert (= (to_string (attr__ATTRIBUTE_IMAGE1 10)) vstring))

;; H
  (assert (dynamic_invariant vstring true false true))

;; H
  (assert (and (<= (length vstring) 11) (< 0 (length vstring))))

;; H
  (assert (= (main__cs__aggregate_def 32) cs))

;; H
  (assert (=> (= (length vstring) 0) (= (elts vstring) temp___200)))

;; H
  (assert
  (=> (= (length vstring) 0)
  (= (mk (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) 
  temp___2001)))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1)))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o 0))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o1 (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1)))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o1 0))))

;; H
  (assert (=> (not (= (length vstring) 0)) (= o2 (+ o1 o))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= o3 (+ (to_rep1 (first (rt vstring))) o2))))

;; H
  (assert (=> (not (= (length vstring) 0)) (= o4 (- o3 1))))

;; H
  (assert (=> (not (= (length vstring) 0)) (and (= o5 o4) (in_range2 o4))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= (concat1 (elts vstring) (to_rep1 (first (rt vstring)))
     (to_rep1 (last (rt vstring))) (elts vstring)
     (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) temp___200)))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= (mk (to_rep1 (first (rt vstring))) o5) temp___2001)))

;; H
  (assert
  (=> (= (length (mk___t temp___200 temp___2001)) 0)
  (= (elts vstring) main__catstring__assume)))

;; H
  (assert
  (=> (= (length (mk___t temp___200 temp___2001)) 0)
  (= (mk (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) 
  main__catstring__assume1)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o6 (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o6 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (=> (<= (to_rep1 (first temp___2001)) (to_rep1 (last temp___2001)))
  (= o7 (+ (- (to_rep1 (last temp___2001)) (to_rep1 (first temp___2001))) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (=> (not (<= (to_rep1 (first temp___2001)) (to_rep1 (last temp___2001))))
  (= o7 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0)) (= o8 (+ o7 o6))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (= o9 (+ (to_rep1 (first temp___2001)) o8))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0)) (= o10 (- o9 1))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (and (= o11 o10) (in_range2 o10))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (= (concat1 temp___200 (to_rep1 (first temp___2001))
     (to_rep1 (last temp___2001)) (elts vstring)
     (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) main__catstring__assume)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___200 temp___2001)) 0))
  (= (mk (to_rep1 (first temp___2001)) o11) main__catstring__assume1)))

;; H
  (assert
  (= (mk___t main__catstring__assume main__catstring__assume1) catstring))

;; H
  (assert (dynamic_invariant catstring true false true))

;; H
  (assert (=> (= (length vstring) 0) (= (elts vstring) temp___201)))

;; H
  (assert
  (=> (= (length vstring) 0)
  (= (mk (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) 
  temp___2011)))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o12 (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1)))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o12 0))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o13 (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1)))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o13 0))))

;; H
  (assert (=> (not (= (length vstring) 0)) (= o14 (+ o13 o12))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= o15 (+ (to_rep1 (first (rt vstring))) o14))))

;; H
  (assert (=> (not (= (length vstring) 0)) (= o16 (- o15 1))))

;; H
  (assert
  (=> (not (= (length vstring) 0)) (and (= o17 o16) (in_range2 o16))))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= (concat1 (elts vstring) (to_rep1 (first (rt vstring)))
     (to_rep1 (last (rt vstring))) (elts vstring)
     (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))) temp___201)))

;; H
  (assert
  (=> (not (= (length vstring) 0))
  (= (mk (to_rep1 (first (rt vstring))) o17) temp___2011)))

;; H
  (assert (not (= (length (mk___t temp___201 temp___2011)) 0)))

;; H
  (assert
  (=> (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring))))
  (= o18 (+ (- (to_rep1 (last (rt vstring))) (to_rep1 (first (rt vstring)))) 1))))

;; H
  (assert
  (=> (not (<= (to_rep1 (first (rt vstring))) (to_rep1 (last (rt vstring)))))
  (= o18 0)))

;; H
  (assert
  (=> (<= (to_rep1 (first temp___2011)) (to_rep1 (last temp___2011)))
  (= o19 (+ (- (to_rep1 (last temp___2011)) (to_rep1 (first temp___2011))) 1))))

;; H
  (assert
  (=> (not (<= (to_rep1 (first temp___2011)) (to_rep1 (last temp___2011))))
  (= o19 0)))

;; H
  (assert (= o20 (+ o19 o18)))

;; H
  (assert (= o21 (+ (to_rep1 (first temp___2011)) o20)))

;; H
  (assert (= o22 (- o21 1)))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 1, characters 0-0
  (not (in_range2 o22)))
(check-sat)
