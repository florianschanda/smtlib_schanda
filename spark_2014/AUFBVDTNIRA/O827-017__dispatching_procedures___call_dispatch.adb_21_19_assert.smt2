;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-fun dummy2 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-datatypes ()
((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__dispatch__mut_rec__d Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__dispatch__mut_rec__d
                                                                    a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__dispatch__mut_rec__i integer)))))
(define-fun us_split_fields_I__projection ((a us_split_fields)) integer 
  (rec__dispatch__mut_rec__i a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__dispatch__mut_rec__d (us_split_discrs1 a)) 
                        (rec__dispatch__mut_rec__d (us_split_discrs1 b)))
                        (= (to_rep
                           (rec__dispatch__mut_rec__i (us_split_fields1 a))) 
                        (to_rep
                        (rec__dispatch__mut_rec__i (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun dispatch__mut_rec__d__first__bit () Int)

(declare-fun dispatch__mut_rec__d__last__bit () Int)

(declare-fun dispatch__mut_rec__d__position () Int)

;; dispatch__mut_rec__d__first__bit_axiom
  (assert (<= 0 dispatch__mut_rec__d__first__bit))

;; dispatch__mut_rec__d__last__bit_axiom
  (assert
  (< dispatch__mut_rec__d__first__bit dispatch__mut_rec__d__last__bit))

;; dispatch__mut_rec__d__position_axiom
  (assert (<= 0 dispatch__mut_rec__d__position))

(declare-fun dispatch__mut_rec__i__first__bit () Int)

(declare-fun dispatch__mut_rec__i__last__bit () Int)

(declare-fun dispatch__mut_rec__i__position () Int)

;; dispatch__mut_rec__i__first__bit_axiom
  (assert (<= 0 dispatch__mut_rec__i__first__bit))

;; dispatch__mut_rec__i__last__bit_axiom
  (assert
  (< dispatch__mut_rec__i__first__bit dispatch__mut_rec__i__last__bit))

;; dispatch__mut_rec__i__position_axiom
  (assert (<= 0 dispatch__mut_rec__i__position))

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((mut_rec__ref (mk_mut_rec__ref (mut_rec__content us_rep)))))
(define-fun mut_rec__ref___projection ((a mut_rec__ref)) us_rep (mut_rec__content
                                                                a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range3 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(define-fun default_initial_assumption ((temp___expr_144 us_rep)
  (temp___skip_top_level_145 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_144) false)
                                         (= (rec__dispatch__mut_rec__d
                                            (us_split_discrs1
                                            temp___expr_144)) (of_int 1))))

(declare-fun init (Int) Int)

(declare-fun init__function_guard (Int Int) Bool)

;; init__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true)
     (let ((result (init x)))
     (=> (init__function_guard result x) (dynamic_invariant result true false
     true)))) :pattern ((init x)) )))

(define-fun dynamic_invariant2 ((temp___expr_137 us_t)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (not (= temp___skip_constant_135 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_137)
                                      (last1 temp___expr_137))))

(declare-fun init__2 (us_t) us_t)

(declare-fun init__2__function_guard (us_t us_t) Bool)

;; init__2__post_axiom
  (assert
  (forall ((x us_t))
  (! (=> (dynamic_invariant2 x true true true)
     (let ((result (init__2 x)))
     (=> (init__2__function_guard result x) (dynamic_invariant2 result true
     false true)))) :pattern ((init__2 x)) )))

(declare-fun init__3 (us_rep) us_rep)

(declare-fun init__3__function_guard (us_rep us_rep) Bool)

;; init__3__post_axiom
  (assert true)

(declare-fun id (Int) Int)

(declare-fun id__function_guard (Int Int) Bool)

(declare-fun b_max () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun last2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes ()
((tTa1SP1__ref (mk_tTa1SP1__ref (tTa1SP1__content integer)))))
(define-fun tTa1SP1__ref___projection ((a tTa1SP1__ref)) integer (tTa1SP1__content
                                                                 a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last3 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last3 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int natural))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int natural) (elts1 a))

(define-fun of_array1 ((a (Array Int natural)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last4 ((a us_t1)) Int (to_rep (last3 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last4 a))
                                    (+ (- (last4 a) (first3 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq7 ((x us_t1)
  (y us_t1)) Bool (bool_eq3 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last3 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last3 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-fun dummy6 () us_t1)

(declare-datatypes () ((ta1S__ref (mk_ta1S__ref (ta1S__content us_t1)))))
(define-fun ta1S__ref___projection ((a ta1S__ref)) us_t1 (ta1S__content a))

(declare-fun a1__first () integer)

(declare-fun a1__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun last5 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes ()
((tTa2SP1__ref (mk_tTa2SP1__ref (tTa2SP1__content integer)))))
(define-fun tTa2SP1__ref___projection ((a tTa2SP1__ref)) integer (tTa2SP1__content
                                                                 a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last6 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last6 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int natural))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int natural) (elts2 a))

(define-fun of_array2 ((a (Array Int natural)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last7 ((a us_t2)) Int (to_rep (last6 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last7 a))
                                    (+ (- (last7 a) (first5 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int natural)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int natural)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq9 ((x us_t2)
  (y us_t2)) Bool (bool_eq3 (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last6 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last6 (rt2 y)))))

(declare-fun user_eq8 (us_t2 us_t2) Bool)

(declare-fun dummy8 () us_t2)

(declare-datatypes () ((ta2S__ref (mk_ta2S__ref (ta2S__content us_t2)))))
(define-fun ta2S__ref___projection ((a ta2S__ref)) us_t2 (ta2S__content a))

(declare-fun a2__first () integer)

(declare-fun a2__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun last8 () Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (integer integer) Bool)

(declare-fun dummy9 () integer)

(declare-datatypes ()
((tTa3SP1__ref (mk_tTa3SP1__ref (tTa3SP1__content integer)))))
(define-fun tTa3SP1__ref___projection ((a tTa3SP1__ref)) integer (tTa3SP1__content
                                                                 a))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last9 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last9 (mk3 f l))) l)))) :pattern (
  (mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int natural))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int natural) (elts3 a))

(define-fun of_array3 ((a (Array Int natural)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))

(define-fun last10 ((a us_t3)) Int (to_rep (last9 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last10 a))
                                    (+ (- (last10 a) (first7 a)) 1) 0))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int natural)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int natural)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq11 ((x us_t3)
  (y us_t3)) Bool (bool_eq3 (elts3 x) (to_rep (first6 (rt3 x)))
                  (to_rep (last9 (rt3 x))) (elts3 y)
                  (to_rep (first6 (rt3 y))) (to_rep (last9 (rt3 y)))))

(declare-fun user_eq10 (us_t3 us_t3) Bool)

(declare-fun dummy10 () us_t3)

(declare-datatypes () ((ta3S__ref (mk_ta3S__ref (ta3S__content us_t3)))))
(define-fun ta3S__ref___projection ((a ta3S__ref)) us_t3 (ta3S__content a))

(declare-fun a3__first () integer)

(declare-fun a3__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun r1__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun r2__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun r3__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__dispatch__root__i integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_I2__projection ((a us_split_fields2)) integer 
  (rec__dispatch__root__i a))

(define-fun us_split_fields___projection ((a us_split_fields2)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag Int)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_5__projection ((a us_rep1)) Int (attr__tag a))

(define-fun bool_eq12 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__dispatch__root__i (us_split_fields3 a))) 
                    (to_rep (rec__dispatch__root__i (us_split_fields3 b))))
                    true false))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep1) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment5 a))))

(declare-fun dispatch__root__i__first__bit () Int)

(declare-fun dispatch__root__i__last__bit () Int)

(declare-fun dispatch__root__i__position () Int)

;; dispatch__root__i__first__bit_axiom
  (assert (<= 0 dispatch__root__i__first__bit))

;; dispatch__root__i__last__bit_axiom
  (assert (< dispatch__root__i__first__bit dispatch__root__i__last__bit))

;; dispatch__root__i__position_axiom
  (assert (<= 0 dispatch__root__i__position))

(declare-fun dummy11 () us_rep1)

(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep1)))))
(define-fun root__ref___projection ((a root__ref)) us_rep1 (root__content a))

(define-fun default_initial_assumption1 ((temp___expr_187 us_rep1)
  (temp___skip_top_level_188 Bool)) Bool (= (attr__tag temp___expr_187) 
  us_tag))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__dispatch__child__j integer)(rec__dispatch__root__i1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_J__projection ((a us_split_fields4)) integer 
  (rec__dispatch__child__j a))

(define-fun us_split_fields_I3__projection ((a us_split_fields4)) integer 
  (rec__dispatch__root__i1 a))

(define-fun us_split_fields_2__projection ((a us_split_fields4)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)(attr__tag1 Int)))))
(define-fun us_rep_6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_7__projection ((a us_rep2)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer us_private) us_private)

(declare-fun extract__j (us_private) integer)

;; extract__j__conv
  (assert
  (forall ((j integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__j (hide_ext__ j rec__ext__2)) j))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep1
                                          (mk___split_fields1
                                          (rec__dispatch__root__i1
                                          (us_split_fields5 a))
                                          (hide_ext__
                                          (rec__dispatch__child__j
                                          (us_split_fields5 a))
                                          (rec__ext__1 (us_split_fields5 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep2
                                          (mk___split_fields2
                                          (extract__j
                                          (rec__ext__ (us_split_fields3 r)))
                                          (rec__dispatch__root__i
                                          (us_split_fields3 r))
                                          (extract__ext__
                                          (rec__ext__ (us_split_fields3 r))))
                                          (attr__tag r)))

(define-fun bool_eq13 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__dispatch__child__j (us_split_fields5 a))) 
                         (to_rep
                         (rec__dispatch__child__j (us_split_fields5 b))))
                         (= (to_rep
                            (rec__dispatch__root__i1 (us_split_fields5 a))) 
                         (to_rep
                         (rec__dispatch__root__i1 (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-fun dispatch__child__j__first__bit () Int)

(declare-fun dispatch__child__j__last__bit () Int)

(declare-fun dispatch__child__j__position () Int)

;; dispatch__child__j__first__bit_axiom
  (assert (<= 0 dispatch__child__j__first__bit))

;; dispatch__child__j__last__bit_axiom
  (assert (< dispatch__child__j__first__bit dispatch__child__j__last__bit))

;; dispatch__child__j__position_axiom
  (assert (<= 0 dispatch__child__j__position))

(declare-fun dispatch__root__i__first__bit1 () Int)

(declare-fun dispatch__root__i__last__bit1 () Int)

(declare-fun dispatch__root__i__position1 () Int)

;; dispatch__root__i__first__bit_axiom
  (assert (<= 0 dispatch__root__i__first__bit1))

;; dispatch__root__i__last__bit_axiom
  (assert (< dispatch__root__i__first__bit1 dispatch__root__i__last__bit1))

;; dispatch__root__i__position_axiom
  (assert (<= 0 dispatch__root__i__position1))

(declare-fun dummy12 () us_rep2)

(declare-datatypes ()
((child__ref (mk_child__ref (child__content us_rep2)))))
(define-fun child__ref___projection ((a child__ref)) us_rep2 (child__content
                                                             a))

(declare-fun p__specific_post (Int us_rep1 us_split_fields2 Int
  us_split_fields2 Int Int Int Int us_t (Array Int natural) integer integer
  (Array Int natural) integer integer us_rep us_split_fields us_split_discrs
  Bool us_split_fields us_split_discrs Bool Int Int (Array Int natural)
  (Array Int natural) us_split_fields us_split_discrs us_split_fields
  us_split_discrs Int (Array Int natural) us_split_fields us_split_discrs
  us_split_fields2 us_split_fields2 Int Int (Array Int natural)
  (Array Int natural) us_split_fields us_split_discrs us_split_fields
  us_split_discrs Int Int (Array Int natural) (Array Int natural)
  us_split_fields us_split_discrs us_split_fields us_split_discrs Int
  (Array Int natural) us_split_fields us_split_discrs) Bool)

;; dispatch__root__compat_axiom
  (assert
  (forall ((x1 us_rep1))
  (forall ((dispatch__p__x2__fields us_split_fields2)
  (dispatch__p__x3__fields us_split_fields2)
  (dispatch__p__x2__old__fields us_split_fields2)
  (dispatch__p__x3__old__fields us_split_fields2))
  (forall ((x2__attr__tag Int) (x3__attr__tag Int) (y1 Int)
  (dispatch__p__y2 Int) (dispatch__p__y3 Int) (dispatch__c1 Int)
  (dispatch__c3 Int) (dispatch__c2 Int) (dispatch__p__y2__old Int)
  (dispatch__p__y3__old Int) (dispatch__c1__old Int) (dispatch__c3__old Int)
  (dispatch__c2__old Int))
  (forall ((z1 us_t))
  (forall ((dispatch__p__z2 (Array Int natural))
  (dispatch__p__z3 (Array Int natural)) (dispatch__a1 (Array Int natural))
  (dispatch__a3 (Array Int natural)) (dispatch__a2 (Array Int natural))
  (dispatch__p__z2__old (Array Int natural))
  (dispatch__p__z3__old (Array Int natural))
  (dispatch__a1__old (Array Int natural))
  (dispatch__a3__old (Array Int natural))
  (dispatch__a2__old (Array Int natural)))
  (forall ((z2__first integer) (z2__last integer) (z3__first integer)
  (z3__last integer))
  (forall ((w1 us_rep))
  (forall ((dispatch__p__w2__fields us_split_fields)
  (dispatch__p__w3__fields us_split_fields)
  (dispatch__r1__fields us_split_fields)
  (dispatch__r3__fields us_split_fields)
  (dispatch__r2__fields us_split_fields)
  (dispatch__p__w2__old__fields us_split_fields)
  (dispatch__p__w3__old__fields us_split_fields)
  (dispatch__r1__old__fields us_split_fields)
  (dispatch__r3__old__fields us_split_fields)
  (dispatch__r2__old__fields us_split_fields))
  (forall ((dispatch__p__w2__discrs us_split_discrs)
  (dispatch__p__w3__discrs us_split_discrs)
  (dispatch__r1__discrs us_split_discrs)
  (dispatch__r3__discrs us_split_discrs)
  (dispatch__r2__discrs us_split_discrs)
  (dispatch__p__w2__old__discrs us_split_discrs)
  (dispatch__p__w3__old__discrs us_split_discrs)
  (dispatch__r1__old__discrs us_split_discrs)
  (dispatch__r3__old__discrs us_split_discrs)
  (dispatch__r2__old__discrs us_split_discrs))
  (forall ((w2__attr__constrained Bool) (w3__attr__constrained Bool))
  (! (=> (p__specific_post us_tag x1 dispatch__p__x2__fields x2__attr__tag
     dispatch__p__x3__fields x3__attr__tag y1 dispatch__p__y2 dispatch__p__y3
     z1 dispatch__p__z2 z2__first z2__last dispatch__p__z3 z3__first z3__last
     w1 dispatch__p__w2__fields dispatch__p__w2__discrs w2__attr__constrained
     dispatch__p__w3__fields dispatch__p__w3__discrs w3__attr__constrained
     dispatch__c1 dispatch__c3 dispatch__a1 dispatch__a3 dispatch__r1__fields
     dispatch__r1__discrs dispatch__r3__fields dispatch__r3__discrs
     dispatch__c2 dispatch__a2 dispatch__r2__fields dispatch__r2__discrs
     dispatch__p__x2__old__fields dispatch__p__x3__old__fields
     dispatch__p__y2__old dispatch__p__y3__old dispatch__p__z2__old
     dispatch__p__z3__old dispatch__p__w2__old__fields
     dispatch__p__w2__old__discrs dispatch__p__w3__old__fields
     dispatch__p__w3__old__discrs dispatch__c1__old dispatch__c3__old
     dispatch__a1__old dispatch__a3__old dispatch__r1__old__fields
     dispatch__r1__old__discrs dispatch__r3__old__fields
     dispatch__r3__old__discrs dispatch__c2__old dispatch__a2__old
     dispatch__r2__old__fields dispatch__r2__old__discrs)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep
        (rec__dispatch__root__i
        (us_split_fields3 (mk___rep1 dispatch__p__x2__fields x2__attr__tag)))) 
     (to_rep (rec__dispatch__root__i (us_split_fields3 x1))))
     (= (to_rep
        (rec__dispatch__root__i
        (us_split_fields3 (mk___rep1 dispatch__p__x3__fields x3__attr__tag)))) 
     (to_rep
     (rec__dispatch__root__i
     (us_split_fields3
     (mk___rep1 dispatch__p__x3__old__fields x3__attr__tag))))))
     (= dispatch__p__y3 dispatch__p__y3__old))
     (= (bool_eq3 dispatch__p__z3 (to_rep z3__first) (to_rep z3__last)
        dispatch__p__z3__old (to_rep z3__first) (to_rep z3__last)) true))
     (= (bool_eq5
        (mk___rep dispatch__p__w3__discrs dispatch__p__w3__fields
        w3__attr__constrained)
        (mk___rep dispatch__p__w3__old__discrs dispatch__p__w3__old__fields
        w3__attr__constrained)) true))
     (= dispatch__c3 dispatch__c3__old))
     (= (bool_eq3 dispatch__a3 (to_rep a3__first) (to_rep a3__last)
        dispatch__a3__old (to_rep a3__first) (to_rep a3__last)) true))
     (= (bool_eq5
        (mk___rep dispatch__r3__discrs dispatch__r3__fields
        r3__attr__constrained)
        (mk___rep dispatch__r3__old__discrs dispatch__r3__old__fields
        r3__attr__constrained)) true))) :pattern ((p__specific_post
  us_tag x1 dispatch__p__x2__fields x2__attr__tag dispatch__p__x3__fields
  x3__attr__tag y1 dispatch__p__y2 dispatch__p__y3 z1 dispatch__p__z2
  z2__first z2__last dispatch__p__z3 z3__first z3__last w1
  dispatch__p__w2__fields dispatch__p__w2__discrs w2__attr__constrained
  dispatch__p__w3__fields dispatch__p__w3__discrs w3__attr__constrained
  dispatch__c1 dispatch__c3 dispatch__a1 dispatch__a3 dispatch__r1__fields
  dispatch__r1__discrs dispatch__r3__fields dispatch__r3__discrs dispatch__c2
  dispatch__a2 dispatch__r2__fields dispatch__r2__discrs
  dispatch__p__x2__old__fields dispatch__p__x3__old__fields
  dispatch__p__y2__old dispatch__p__y3__old dispatch__p__z2__old
  dispatch__p__z3__old dispatch__p__w2__old__fields
  dispatch__p__w2__old__discrs dispatch__p__w3__old__fields
  dispatch__p__w3__old__discrs dispatch__c1__old dispatch__c3__old
  dispatch__a1__old dispatch__a3__old dispatch__r1__old__fields
  dispatch__r1__old__discrs dispatch__r3__old__fields
  dispatch__r3__old__discrs dispatch__c2__old dispatch__a2__old
  dispatch__r2__old__fields dispatch__r2__old__discrs)) ))))))))))))

;; dispatch__child__compat_axiom
  (assert
  (forall ((x1 us_rep1))
  (forall ((dispatch__p__x2__fields us_split_fields2)
  (dispatch__p__x3__fields us_split_fields2)
  (dispatch__p__x2__old__fields us_split_fields2)
  (dispatch__p__x3__old__fields us_split_fields2))
  (forall ((x2__attr__tag Int) (x3__attr__tag Int) (y1 Int)
  (dispatch__p__y2 Int) (dispatch__p__y3 Int) (dispatch__c1 Int)
  (dispatch__c3 Int) (dispatch__c2 Int) (dispatch__p__y2__old Int)
  (dispatch__p__y3__old Int) (dispatch__c1__old Int) (dispatch__c3__old Int)
  (dispatch__c2__old Int))
  (forall ((z1 us_t))
  (forall ((dispatch__p__z2 (Array Int natural))
  (dispatch__p__z3 (Array Int natural)) (dispatch__a1 (Array Int natural))
  (dispatch__a3 (Array Int natural)) (dispatch__a2 (Array Int natural))
  (dispatch__p__z2__old (Array Int natural))
  (dispatch__p__z3__old (Array Int natural))
  (dispatch__a1__old (Array Int natural))
  (dispatch__a3__old (Array Int natural))
  (dispatch__a2__old (Array Int natural)))
  (forall ((z2__first integer) (z2__last integer) (z3__first integer)
  (z3__last integer))
  (forall ((w1 us_rep))
  (forall ((dispatch__p__w2__fields us_split_fields)
  (dispatch__p__w3__fields us_split_fields)
  (dispatch__r1__fields us_split_fields)
  (dispatch__r3__fields us_split_fields)
  (dispatch__r2__fields us_split_fields)
  (dispatch__p__w2__old__fields us_split_fields)
  (dispatch__p__w3__old__fields us_split_fields)
  (dispatch__r1__old__fields us_split_fields)
  (dispatch__r3__old__fields us_split_fields)
  (dispatch__r2__old__fields us_split_fields))
  (forall ((dispatch__p__w2__discrs us_split_discrs)
  (dispatch__p__w3__discrs us_split_discrs)
  (dispatch__r1__discrs us_split_discrs)
  (dispatch__r3__discrs us_split_discrs)
  (dispatch__r2__discrs us_split_discrs)
  (dispatch__p__w2__old__discrs us_split_discrs)
  (dispatch__p__w3__old__discrs us_split_discrs)
  (dispatch__r1__old__discrs us_split_discrs)
  (dispatch__r3__old__discrs us_split_discrs)
  (dispatch__r2__old__discrs us_split_discrs))
  (forall ((w2__attr__constrained Bool) (w3__attr__constrained Bool))
  (! (=> (p__specific_post us_tag1 x1 dispatch__p__x2__fields x2__attr__tag
     dispatch__p__x3__fields x3__attr__tag y1 dispatch__p__y2 dispatch__p__y3
     z1 dispatch__p__z2 z2__first z2__last dispatch__p__z3 z3__first z3__last
     w1 dispatch__p__w2__fields dispatch__p__w2__discrs w2__attr__constrained
     dispatch__p__w3__fields dispatch__p__w3__discrs w3__attr__constrained
     dispatch__c1 dispatch__c3 dispatch__a1 dispatch__a3 dispatch__r1__fields
     dispatch__r1__discrs dispatch__r3__fields dispatch__r3__discrs
     dispatch__c2 dispatch__a2 dispatch__r2__fields dispatch__r2__discrs
     dispatch__p__x2__old__fields dispatch__p__x3__old__fields
     dispatch__p__y2__old dispatch__p__y3__old dispatch__p__z2__old
     dispatch__p__z3__old dispatch__p__w2__old__fields
     dispatch__p__w2__old__discrs dispatch__p__w3__old__fields
     dispatch__p__w3__old__discrs dispatch__c1__old dispatch__c3__old
     dispatch__a1__old dispatch__a3__old dispatch__r1__old__fields
     dispatch__r1__old__discrs dispatch__r3__old__fields
     dispatch__r3__old__discrs dispatch__c2__old dispatch__a2__old
     dispatch__r2__old__fields dispatch__r2__old__discrs)
     (let ((temp___x3_228 (of_base
                          (mk___rep1 dispatch__p__x3__old__fields
                          x3__attr__tag))))
     (let ((temp___x3_2281 (of_base
                           (mk___rep1 dispatch__p__x3__fields x3__attr__tag))))
     (let ((temp___x2_227 (of_base
                          (mk___rep1 dispatch__p__x2__fields x2__attr__tag))))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (< (to_rep (rec__dispatch__child__j (us_split_fields5 temp___x2_227))) 0)
     (= (to_rep (rec__dispatch__root__i1 (us_split_fields5 temp___x2_227))) 
     (to_rep (rec__dispatch__root__i1 (us_split_fields5 (of_base x1))))))
     (= (to_rep (rec__dispatch__root__i1 (us_split_fields5 temp___x3_2281))) 
     (to_rep (rec__dispatch__root__i1 (us_split_fields5 temp___x3_228)))))
     (= (to_rep (rec__dispatch__child__j (us_split_fields5 temp___x3_2281))) 
     (to_rep (rec__dispatch__child__j (us_split_fields5 temp___x3_228)))))
     (= dispatch__p__y3 dispatch__p__y3__old))
     (= (bool_eq3 dispatch__p__z3 (to_rep z3__first) (to_rep z3__last)
        dispatch__p__z3__old (to_rep z3__first) (to_rep z3__last)) true))
     (= (bool_eq5
        (mk___rep dispatch__p__w3__discrs dispatch__p__w3__fields
        w3__attr__constrained)
        (mk___rep dispatch__p__w3__old__discrs dispatch__p__w3__old__fields
        w3__attr__constrained)) true))
     (= dispatch__c3 dispatch__c3__old))
     (= (bool_eq3 dispatch__a3 (to_rep a3__first) (to_rep a3__last)
        dispatch__a3__old (to_rep a3__first) (to_rep a3__last)) true))
     (= (bool_eq5
        (mk___rep dispatch__r3__discrs dispatch__r3__fields
        r3__attr__constrained)
        (mk___rep dispatch__r3__old__discrs dispatch__r3__old__fields
        r3__attr__constrained)) true)))))) :pattern ((p__specific_post
  us_tag1 x1 dispatch__p__x2__fields x2__attr__tag dispatch__p__x3__fields
  x3__attr__tag y1 dispatch__p__y2 dispatch__p__y3 z1 dispatch__p__z2
  z2__first z2__last dispatch__p__z3 z3__first z3__last w1
  dispatch__p__w2__fields dispatch__p__w2__discrs w2__attr__constrained
  dispatch__p__w3__fields dispatch__p__w3__discrs w3__attr__constrained
  dispatch__c1 dispatch__c3 dispatch__a1 dispatch__a3 dispatch__r1__fields
  dispatch__r1__discrs dispatch__r3__fields dispatch__r3__discrs dispatch__c2
  dispatch__a2 dispatch__r2__fields dispatch__r2__discrs
  dispatch__p__x2__old__fields dispatch__p__x3__old__fields
  dispatch__p__y2__old dispatch__p__y3__old dispatch__p__z2__old
  dispatch__p__z3__old dispatch__p__w2__old__fields
  dispatch__p__w2__old__discrs dispatch__p__w3__old__fields
  dispatch__p__w3__old__discrs dispatch__c1__old dispatch__c3__old
  dispatch__a1__old dispatch__a3__old dispatch__r1__old__fields
  dispatch__r1__old__discrs dispatch__r3__old__fields
  dispatch__r3__old__discrs dispatch__c2__old dispatch__a2__old
  dispatch__r2__old__fields dispatch__r2__old__discrs)) ))))))))))))

(declare-fun x1__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun x2__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun x3__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun v1__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun v2__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun v3__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun z1__first () integer)

(declare-fun z1__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun z2__first () integer)

(declare-fun z2__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun z3__first () integer)

(declare-fun z3__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun w1__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun w2__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun w3__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

;; id__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant1 x true true true)
     (let ((result (id x)))
     (=> (id__function_guard result x) (dynamic_invariant1 result true false
     true)))) :pattern ((id x)) )))

;; id__def_axiom
  (assert
  (forall ((x Int))
  (! (=>
     (and (dynamic_invariant1 x true true true) (id__function_guard (id x)
     x)) (= (id x) x)) :pattern ((id x)) )))

;; b_max__def_axiom
  (assert (and (id__function_guard (id 100) 100) (= b_max (id 100))))

(define-fun default_initial_assumption2 ((temp___expr_241 us_rep2)
  (temp___skip_top_level_242 Bool)) Bool (= (attr__tag1 temp___expr_241) 
  us_tag1))

(define-fun dynamic_invariant4 ((temp___expr_159 us_t1)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool (=>
                                      (not (= temp___skip_constant_157 true))
                                      (and (dynamic_property2 1 b_max
                                      (first3 temp___expr_159)
                                      (last4 temp___expr_159))
                                      (and (= (first3 temp___expr_159) 1)
                                      (= (last4 temp___expr_159) b_max)))))

(define-fun dynamic_invariant5 ((temp___expr_168 us_t2)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (not (= temp___skip_constant_166 true))
                                      (and (dynamic_property4 1 b_max
                                      (first5 temp___expr_168)
                                      (last7 temp___expr_168))
                                      (and (= (first5 temp___expr_168) 1)
                                      (= (last7 temp___expr_168) b_max)))))

(define-fun dynamic_invariant6 ((temp___expr_177 us_t3)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (not (= temp___skip_constant_175 true))
                                      (and (dynamic_property6 1 b_max
                                      (first7 temp___expr_177)
                                      (last10 temp___expr_177))
                                      (and (= (first7 temp___expr_177) 1)
                                      (= (last10 temp___expr_177) b_max)))))

(declare-fun c1 () Int)

(declare-fun c2 () Int)

(declare-fun c3 () Int)

(declare-fun a1 () (Array Int natural))

(declare-fun a2 () (Array Int natural))

(declare-fun a3 () (Array Int natural))

(declare-fun r1__split_fields () integer)

(declare-fun r1__split_discrs () Bool)

(declare-fun r2__split_fields () integer)

(declare-fun r2__split_discrs () Bool)

(declare-fun r3__split_fields () integer)

(declare-fun r3__split_discrs () Bool)

(declare-fun x1__split_fields () integer)

(declare-fun x1__split_fields1 () us_private)

(declare-fun x2__split_fields () integer)

(declare-fun x2__split_fields1 () us_private)

(declare-fun x3__split_fields () us_split_fields__ref1)

(declare-fun v1__split_fields () us_split_fields__ref1)

(declare-fun v2__split_fields () us_split_fields__ref1)

(declare-fun v3__split_fields () us_split_fields__ref1)

(declare-fun y1 () int__ref)

(declare-fun y2 () int__ref)

(declare-fun y3 () int__ref)

(declare-fun z1 () map__ref)

(declare-fun z2 () map__ref)

(declare-fun z3 () map__ref)

(declare-fun w1__split_fields () us_split_fields__ref)

(declare-fun w1__split_discrs () us_split_discrs__ref)

(declare-fun w2__split_fields () us_split_fields__ref)

(declare-fun w2__split_discrs () us_split_discrs__ref)

(declare-fun w3__split_fields () us_split_fields__ref)

(declare-fun w3__split_discrs () us_split_discrs__ref)

(declare-fun o () integer)

(declare-fun o1 () us_split_fields2)

(declare-fun call_dispatch__x1__assume () us_rep1)

(declare-fun o2 () integer)

(declare-fun o3 () us_split_fields2)

(declare-fun call_dispatch__x2__assume () us_rep1)

(declare-fun o4 () integer)

(declare-fun o5 () us_split_fields2)

(declare-fun call_dispatch__x3__assume () us_rep1)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun o8 () us_split_fields4)

(declare-fun o9 () us_rep2)

(declare-fun call_dispatch__v1__assume () us_rep1)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun o12 () us_split_fields4)

(declare-fun o13 () us_rep2)

(declare-fun call_dispatch__v2__assume () us_rep1)

(declare-fun o14 () integer)

(declare-fun o15 () integer)

(declare-fun o16 () us_split_fields4)

(declare-fun o17 () us_rep2)

(declare-fun call_dispatch__v3__assume () us_rep1)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun call_dispatch__z1__assume () us_t)

(declare-fun call_dispatch__z2__assume () us_t)

(declare-fun call_dispatch__z3__assume () us_t)

(declare-fun call_dispatch__w1__assume () us_rep)

(declare-fun call_dispatch__w2__assume () us_rep)

(declare-fun call_dispatch__w3__assume () us_rep)

(declare-fun result () us_split_fields__ref1)

(declare-fun x1__split_fields2 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun x2__split_fields2 () us_split_fields2)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun x3__split_fields1 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun v1__split_fields1 () us_split_fields2)

(declare-fun result4 () us_split_fields__ref1)

(declare-fun v2__split_fields1 () us_split_fields2)

(declare-fun result5 () us_split_fields__ref1)

(declare-fun v3__split_fields1 () us_split_fields2)

(declare-fun result6 () int__ref)

(declare-fun y11 () Int)

(declare-fun result7 () int__ref)

(declare-fun y31 () Int)

(declare-fun result8 () map__ref)

(declare-fun z11 () (Array Int natural))

(declare-fun result9 () map__ref)

(declare-fun z21 () (Array Int natural))

(declare-fun result10 () map__ref)

(declare-fun z31 () (Array Int natural))

(declare-fun result11 () us_split_fields__ref)

(declare-fun w1__split_fields1 () us_split_fields)

(declare-fun result12 () us_split_discrs__ref)

(declare-fun w1__split_discrs1 () us_split_discrs)

(declare-fun result13 () us_split_fields__ref)

(declare-fun w2__split_fields1 () us_split_fields)

(declare-fun result14 () us_split_discrs__ref)

(declare-fun w2__split_discrs1 () us_split_discrs)

(declare-fun result15 () us_split_fields__ref)

(declare-fun w3__split_fields1 () us_split_fields)

(declare-fun result16 () us_split_discrs__ref)

(declare-fun w3__split_discrs1 () us_split_discrs)

(declare-fun c21 () Int)

(declare-fun c31 () Int)

(declare-fun a21 () (Array Int natural))

(declare-fun a31 () (Array Int natural))

(declare-fun r2__split_fields1 () us_split_fields)

(declare-fun r2__split_discrs1 () us_split_discrs)

(declare-fun r3__split_fields1 () us_split_fields)

(declare-fun r3__split_discrs1 () us_split_discrs)

(declare-fun x2__split_fields3 () us_split_fields2)

(declare-fun x3__split_fields2 () us_split_fields2)

(declare-fun y21 () Int)

(declare-fun y32 () Int)

(declare-fun z22 () (Array Int natural))

(declare-fun z32 () (Array Int natural))

(declare-fun w2__split_fields2 () us_split_fields)

(declare-fun w2__split_discrs2 () us_split_discrs)

(declare-fun w3__split_fields2 () us_split_fields)

(declare-fun w3__split_discrs2 () us_split_discrs)

;; H
  (assert (in_range1 b_max))

;; H
  (assert (= (id 100) b_max))

;; H
  (assert (in_range1 b_max))

;; H
  (assert (= (id 100) b_max))

;; H
  (assert (in_range c1))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range c2)))

;; H
  (assert (in_range c3))

;; H
  (assert
  (and (dynamic_property2 1 b_max (to_rep a1__first) (to_rep a1__last))
  (and (= (to_rep a1__first) 1) (= (to_rep a1__last) b_max))))

;; H
  (assert
  (and (dynamic_property4 1 b_max (to_rep a2__first) (to_rep a2__last))
  (and (= (to_rep a2__first) 1) (= (to_rep a2__last) b_max))))

;; H
  (assert
  (and (dynamic_property6 1 b_max (to_rep a3__first) (to_rep a3__last))
  (and (= (to_rep a3__first) 1) (= (to_rep a3__last) b_max))))

;; H
  (assert (= r1__attr__constrained false))

;; H
  (assert (= r2__attr__constrained false))

;; H
  (assert (= r3__attr__constrained false))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= o1 (mk___split_fields1 o us_null_ext__)))

;; H
  (assert (= call_dispatch__x1__assume (mk___rep1 o1 us_tag)))

;; H
  (assert
  (= result (mk___split_fields__ref1
            (mk___split_fields1 x1__split_fields x1__split_fields1))))

;; H
  (assert (= x1__split_fields2 (us_split_fields3 call_dispatch__x1__assume)))

;; H
  (assert (= x1__attr__tag (attr__tag call_dispatch__x1__assume)))

;; H
  (assert (= (to_rep o2) 2))

;; H
  (assert (= o3 (mk___split_fields1 o2 us_null_ext__)))

;; H
  (assert (= call_dispatch__x2__assume (mk___rep1 o3 us_tag)))

;; H
  (assert
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1 x2__split_fields x2__split_fields1))))

;; H
  (assert (= x2__split_fields2 (us_split_fields3 call_dispatch__x2__assume)))

;; H
  (assert (= x2__attr__tag (attr__tag call_dispatch__x2__assume)))

;; H
  (assert (= (to_rep o4) 3))

;; H
  (assert (= o5 (mk___split_fields1 o4 us_null_ext__)))

;; H
  (assert (= call_dispatch__x3__assume (mk___rep1 o5 us_tag)))

;; H
  (assert (= result2 x3__split_fields))

;; H
  (assert
  (= (let ((subject x3__split_fields)) x3__split_fields1) (us_split_fields3
                                                          call_dispatch__x3__assume)))

;; H
  (assert (= x3__attr__tag (attr__tag call_dispatch__x3__assume)))

;; H
  (assert (= (to_rep o6) 1))

;; H
  (assert (= (to_rep o7) 1))

;; H
  (assert (= o8 (mk___split_fields2 o7 o6 us_null_ext__)))

;; H
  (assert (= o9 (mk___rep2 o8 us_tag1)))

;; H
  (assert
  (= call_dispatch__v1__assume (mk___rep1
                               (mk___split_fields1
                               (rec__dispatch__root__i1
                               (us_split_fields5 o9))
                               (hide_ext__
                               (rec__dispatch__child__j
                               (us_split_fields5 o9))
                               (rec__ext__1 (us_split_fields5 o9))))
                               (attr__tag1 o9))))

;; H
  (assert (= result3 v1__split_fields))

;; H
  (assert
  (= (let ((subject v1__split_fields)) v1__split_fields1) (us_split_fields3
                                                          call_dispatch__v1__assume)))

;; H
  (assert (= v1__attr__tag (attr__tag call_dispatch__v1__assume)))

;; H
  (assert (= (to_rep o10) 2))

;; H
  (assert (= (to_rep o11) 2))

;; H
  (assert (= o12 (mk___split_fields2 o11 o10 us_null_ext__)))

;; H
  (assert (= o13 (mk___rep2 o12 us_tag1)))

;; H
  (assert
  (= call_dispatch__v2__assume (mk___rep1
                               (mk___split_fields1
                               (rec__dispatch__root__i1
                               (us_split_fields5 o13))
                               (hide_ext__
                               (rec__dispatch__child__j
                               (us_split_fields5 o13))
                               (rec__ext__1 (us_split_fields5 o13))))
                               (attr__tag1 o13))))

;; H
  (assert (= result4 v2__split_fields))

;; H
  (assert
  (= (let ((subject v2__split_fields)) v2__split_fields1) (us_split_fields3
                                                          call_dispatch__v2__assume)))

;; H
  (assert (= v2__attr__tag (attr__tag call_dispatch__v2__assume)))

;; H
  (assert (= (to_rep o14) 3))

;; H
  (assert (= (to_rep o15) 3))

;; H
  (assert (= o16 (mk___split_fields2 o15 o14 us_null_ext__)))

;; H
  (assert (= o17 (mk___rep2 o16 us_tag1)))

;; H
  (assert
  (= call_dispatch__v3__assume (mk___rep1
                               (mk___split_fields1
                               (rec__dispatch__root__i1
                               (us_split_fields5 o17))
                               (hide_ext__
                               (rec__dispatch__child__j
                               (us_split_fields5 o17))
                               (rec__ext__1 (us_split_fields5 o17))))
                               (attr__tag1 o17))))

;; H
  (assert (= result5 v3__split_fields))

;; H
  (assert
  (= (let ((subject v3__split_fields)) v3__split_fields1) (us_split_fields3
                                                          call_dispatch__v3__assume)))

;; H
  (assert (= v3__attr__tag (attr__tag call_dispatch__v3__assume)))

;; H
  (assert
  (and (and (= o18 (init c1)) (init__function_guard o18 c1)) (in_range o18)))

;; H
  (assert (= result6 y1))

;; H
  (assert (= (let ((subject y1)) y11) o18))

;; H
  (assert (in_range (let ((subject y1)) y11)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range (int__content y2))))

;; H
  (assert
  (and (and (= o19 (init c3)) (init__function_guard o19 c3)) (in_range o19)))

;; H
  (assert (= result7 y3))

;; H
  (assert (= (let ((subject y3)) y31) o19))

;; H
  (assert (in_range (let ((subject y3)) y31)))

;; H
  (assert
  (and
  (and
  (= call_dispatch__z1__assume (init__2
                               (mk___t a1
                               (mk (to_rep a1__first) (to_rep a1__last)))))
  (init__2__function_guard call_dispatch__z1__assume
  (mk___t a1 (mk (to_rep a1__first) (to_rep a1__last))))) (dynamic_invariant2
  call_dispatch__z1__assume true false true)))

;; H
  (assert (= result8 z1))

;; H
  (assert (= (let ((subject z1)) z11) (elts call_dispatch__z1__assume)))

;; H
  (assert
  (= (to_rep z1__first) (to_rep (first (rt call_dispatch__z1__assume)))))

;; H
  (assert
  (= (to_rep z1__last) (to_rep (last (rt call_dispatch__z1__assume)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep z1__first)
  (to_rep z1__last)))

;; H
  (assert
  (and
  (and
  (= call_dispatch__z2__assume (init__2
                               (mk___t a2
                               (mk (to_rep a2__first) (to_rep a2__last)))))
  (init__2__function_guard call_dispatch__z2__assume
  (mk___t a2 (mk (to_rep a2__first) (to_rep a2__last))))) (dynamic_invariant2
  call_dispatch__z2__assume true false true)))

;; H
  (assert (= result9 z2))

;; H
  (assert (= (let ((subject z2)) z21) (elts call_dispatch__z2__assume)))

;; H
  (assert
  (= (to_rep z2__first) (to_rep (first (rt call_dispatch__z2__assume)))))

;; H
  (assert
  (= (to_rep z2__last) (to_rep (last (rt call_dispatch__z2__assume)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep z2__first)
  (to_rep z2__last)))

;; H
  (assert
  (and
  (and
  (= call_dispatch__z3__assume (init__2
                               (mk___t a3
                               (mk (to_rep a3__first) (to_rep a3__last)))))
  (init__2__function_guard call_dispatch__z3__assume
  (mk___t a3 (mk (to_rep a3__first) (to_rep a3__last))))) (dynamic_invariant2
  call_dispatch__z3__assume true false true)))

;; H
  (assert (= result10 z3))

;; H
  (assert (= (let ((subject z3)) z31) (elts call_dispatch__z3__assume)))

;; H
  (assert
  (= (to_rep z3__first) (to_rep (first (rt call_dispatch__z3__assume)))))

;; H
  (assert
  (= (to_rep z3__last) (to_rep (last (rt call_dispatch__z3__assume)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep z3__first)
  (to_rep z3__last)))

;; H
  (assert
  (and
  (= call_dispatch__w1__assume (init__3
                               (mk___rep (mk___split_discrs r1__split_discrs)
                               (mk___split_fields r1__split_fields)
                               r1__attr__constrained)))
  (init__3__function_guard call_dispatch__w1__assume
  (mk___rep (mk___split_discrs r1__split_discrs)
  (mk___split_fields r1__split_fields) r1__attr__constrained))))

;; H
  (assert (= result11 w1__split_fields))

;; H
  (assert
  (= (let ((subject w1__split_fields)) w1__split_fields1) (us_split_fields1
                                                          call_dispatch__w1__assume)))

;; H
  (assert (= result12 w1__split_discrs))

;; H
  (assert
  (= (let ((subject w1__split_discrs)) w1__split_discrs1) (us_split_discrs1
                                                          call_dispatch__w1__assume)))

;; H
  (assert (= w1__attr__constrained false))

;; H
  (assert
  (and
  (= call_dispatch__w2__assume (init__3
                               (mk___rep (mk___split_discrs r2__split_discrs)
                               (mk___split_fields r2__split_fields)
                               r2__attr__constrained)))
  (init__3__function_guard call_dispatch__w2__assume
  (mk___rep (mk___split_discrs r2__split_discrs)
  (mk___split_fields r2__split_fields) r2__attr__constrained))))

;; H
  (assert (= result13 w2__split_fields))

;; H
  (assert
  (= (let ((subject w2__split_fields)) w2__split_fields1) (us_split_fields1
                                                          call_dispatch__w2__assume)))

;; H
  (assert (= result14 w2__split_discrs))

;; H
  (assert
  (= (let ((subject w2__split_discrs)) w2__split_discrs1) (us_split_discrs1
                                                          call_dispatch__w2__assume)))

;; H
  (assert (= w2__attr__constrained false))

;; H
  (assert
  (and
  (= call_dispatch__w3__assume (init__3
                               (mk___rep (mk___split_discrs r3__split_discrs)
                               (mk___split_fields r3__split_fields)
                               r3__attr__constrained)))
  (init__3__function_guard call_dispatch__w3__assume
  (mk___rep (mk___split_discrs r3__split_discrs)
  (mk___split_fields r3__split_fields) r3__attr__constrained))))

;; H
  (assert (= result15 w3__split_fields))

;; H
  (assert
  (= (let ((subject w3__split_fields)) w3__split_fields1) (us_split_fields1
                                                          call_dispatch__w3__assume)))

;; H
  (assert (= result16 w3__split_discrs))

;; H
  (assert
  (= (let ((subject w3__split_discrs)) w3__split_discrs1) (us_split_discrs1
                                                          call_dispatch__w3__assume)))

;; H
  (assert (= w3__attr__constrained false))

;; H
  (assert
  (and (= x1__attr__tag x2__attr__tag) (= x1__attr__tag x3__attr__tag)))

;; H
  (assert
  (and
  (and
  (and
  (and (in_range (let ((subject y2)) y21)) (in_range
  (let ((subject y3)) y32))) (in_range c21)) (in_range c31))
  (p__specific_post x1__attr__tag (mk___rep1 x1__split_fields2 x1__attr__tag)
  x2__split_fields3 x2__attr__tag
  (let ((subject x3__split_fields)) x3__split_fields2) x3__attr__tag
  (let ((subject y1)) y11) (let ((subject y2)) y21) (let ((subject y3)) y32)
  (mk___t (let ((subject z1)) z11) (mk (to_rep z1__first) (to_rep z1__last)))
  (let ((subject z2)) z22) z2__first z2__last (let ((subject z3)) z32)
  z3__first z3__last
  (mk___rep (let ((subject w1__split_discrs)) w1__split_discrs1)
  (let ((subject w1__split_fields)) w1__split_fields1) w1__attr__constrained)
  (let ((subject w2__split_fields)) w2__split_fields2)
  (let ((subject w2__split_discrs)) w2__split_discrs2) w2__attr__constrained
  (let ((subject w3__split_fields)) w3__split_fields2)
  (let ((subject w3__split_discrs)) w3__split_discrs2) w3__attr__constrained
  c1 c31 a1 a31 (mk___split_fields r1__split_fields)
  (mk___split_discrs r1__split_discrs) r3__split_fields1 r3__split_discrs1
  c21 a21 r2__split_fields1 r2__split_discrs1 x2__split_fields2
  (let ((subject x3__split_fields)) x3__split_fields1) (int__content y2)
  (let ((subject y3)) y31) (let ((subject z2)) z21) (let ((subject z3)) z31)
  (let ((subject w2__split_fields)) w2__split_fields1)
  (let ((subject w2__split_discrs)) w2__split_discrs1)
  (let ((subject w3__split_fields)) w3__split_fields1)
  (let ((subject w3__split_discrs)) w3__split_discrs1) c1 c3 a1 a3
  (mk___split_fields r1__split_fields) (mk___split_discrs r1__split_discrs)
  (mk___split_fields r3__split_fields) (mk___split_discrs r3__split_discrs)
  c2 a2 (mk___split_fields r2__split_fields)
  (mk___split_discrs r2__split_discrs))))

;; H
  (assert
  (= (to_rep (rec__dispatch__root__i x2__split_fields3)) (to_rep
                                                         (rec__dispatch__root__i
                                                         x1__split_fields2))))

(assert
;; WP_parameter_def
 ;; File "dispatch.ads", line 24, characters 0-0
  (not
  (= (to_rep
     (rec__dispatch__root__i
     (let ((subject x3__split_fields)) x3__split_fields2))) 3)))
(check-sat)
