;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-fun dummy2 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort value 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (value value) Bool)

(declare-fun dummy3 () value)

(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))

(declare-fun to_rep2 (value) Int)

(declare-fun of_rep2 (Int) value)

;; inversion_axiom
  (assert
  (forall ((x value))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x value)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))

;; slide_eq
  (assert
  (forall ((a (Array Int value)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int value) Int Int (Array Int value) Int
  Int) (Array Int value))

;; concat_def
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (value Int) (Array Int value))

;; singleton_def
  (assert
  (forall ((v value))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int value)) (a__first Int) (a__last Int)
  (b (Array Int value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_151 Int))
                           (=>
                           (and (<= a__first temp___idx_151)
                           (<= temp___idx_151 a__last))
                           (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_151)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_151 Int))
  (=> (and (<= a__first temp___idx_151) (<= temp___idx_151 a__last))
  (= (to_rep2 (select a temp___idx_151)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_151)))))))))))

(declare-fun compare ((Array Int value) Int Int (Array Int value) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int value))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int value) (elts a))

(define-fun of_array ((a (Array Int value)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int value)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int value)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment a))))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((values__ref (mk_values__ref (values__content us_t)))))
(define-fun values__ref___projection ((a values__ref)) us_t (values__content
                                                            a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref_2__projection ((a t3s__ref)) integer (t3s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int value))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))

(define-fun of_array1 ((a (Array Int value)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int value)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int value)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq7 ((x us_t1)
  (y us_t1)) Bool (bool_eq4 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-fun dummy6 () us_t1)

(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural 
  (rec__simple_unc_arrays__table__last a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__simple_unc_arrays__table__v us_t1)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) us_t1 
  (rec__simple_unc_arrays__table__v a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq8 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__simple_unc_arrays__table__last
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__simple_unc_arrays__table__last
                                                  (us_split_discrs1 b))))
                        (= (bool_eq7
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 a))
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun simple_unc_arrays__table__last__first__bit () Int)

(declare-fun simple_unc_arrays__table__last__last__bit () Int)

(declare-fun simple_unc_arrays__table__last__position () Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position))

(declare-fun simple_unc_arrays__table__v__first__bit () Int)

(declare-fun simple_unc_arrays__table__v__last__bit () Int)

(declare-fun simple_unc_arrays__table__v__position () Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position))

(declare-fun dummy7 () us_rep)

(declare-datatypes () ((table__ref (mk_table__ref (table__content us_rep)))))
(define-fun table__ref___projection ((a table__ref)) us_rep (table__content
                                                            a))

(define-fun dynamic_invariant2 ((temp___expr_542 us_rep)
  (temp___is_init_539 Bool) (temp___skip_constant_540 Bool)
  (temp___do_toplevel_541 Bool)) Bool (let ((temp___543 (rec__simple_unc_arrays__table__last
                                                        (us_split_discrs1
                                                        temp___expr_542))))
                                      (and (dynamic_property2 1
                                      (to_rep temp___543)
                                      (first3
                                      (rec__simple_unc_arrays__table__v
                                      (us_split_fields1 temp___expr_542)))
                                      (last3
                                      (rec__simple_unc_arrays__table__v
                                      (us_split_fields1 temp___expr_542))))
                                      (and
                                      (= (first3
                                         (rec__simple_unc_arrays__table__v
                                         (us_split_fields1 temp___expr_542))) 1)
                                      (= (last3
                                         (rec__simple_unc_arrays__table__v
                                         (us_split_fields1 temp___expr_542))) 
                                      (to_rep temp___543))))))

(declare-fun a__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r22b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-fun dummy8 () integer)

(declare-datatypes ()
((tS21bP1__ref (mk_tS21bP1__ref (tS21bP1__content integer)))))
(define-fun tS21bP1__ref___projection ((a tS21bP1__ref)) integer (tS21bP1__content
                                                                 a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int value))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int value) (elts2 a))

(define-fun of_array2 ((a (Array Int value)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int value)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int value)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq10 ((x us_t2)
  (y us_t2)) Bool (bool_eq4 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq9 (us_t2 us_t2) Bool)

(declare-fun dummy9 () us_t2)

(declare-datatypes () ((s21b__ref (mk_s21b__ref (s21b__content us_t2)))))
(define-fun s21b__ref___projection ((a s21b__ref)) us_t2 (s21b__content a))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_531 Int)
  (temp___is_init_528 Bool) (temp___skip_constant_529 Bool)
  (temp___do_toplevel_530 Bool)) Bool (=>
                                      (or (= temp___is_init_528 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_531)))

(define-fun dynamic_invariant5 ((temp___expr_537 us_t)
  (temp___is_init_534 Bool) (temp___skip_constant_535 Bool)
  (temp___do_toplevel_536 Bool)) Bool (=>
                                      (not (= temp___skip_constant_535 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_537)
                                      (last1 temp___expr_537))))

(define-fun dynamic_invariant6 ((temp___expr_675 us_t2)
  (temp___is_init_672 Bool) (temp___skip_constant_673 Bool)
  (temp___do_toplevel_674 Bool)) Bool (=>
                                      (not (= temp___skip_constant_673 true))
                                      (and (dynamic_property4 1 r22b
                                      (first5 temp___expr_675)
                                      (last5 temp___expr_675))
                                      (and (= (first5 temp___expr_675) 1)
                                      (= (last5 temp___expr_675) r22b)))))

(declare-fun a__split_fields () (Array Int value))

(declare-fun a__split_fields1 () t1)

(declare-fun low () Int)

(declare-fun high () Int)

(declare-fun temp___829 () (Array Int value))

(declare-fun temp___8291 () t1)

(declare-fun temp___822 () natural)

(declare-fun temp___8221 () (Array Int value))

(declare-fun temp___8222 () t1)

(declare-fun temp___821 () Int)

(declare-fun temp___825 () (Array Int value))

(declare-fun temp___8251 () t1)

(declare-fun temp___820 () Int)

(declare-fun simple_unc_arrays__swap_cells__a__compl () (Array Int value))

(declare-fun simple_unc_arrays__swap_cells__a__compl1 () t2)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun a__split_fields2 () (Array Int value))

(declare-fun a__split_fields3 () t1)

(declare-fun result () Int)

(declare-fun low1 () Int)

(declare-fun result1 () Int)

(declare-fun high1 () Int)

(declare-fun a__split_fields4 () (Array Int value))

(declare-fun a__split_fields5 () t1)

(declare-fun low2 () Int)

(declare-fun high2 () Int)

(declare-fun simple_unc_arrays__swap_cells__a () (Array Int value))

(declare-fun result2 () (Array Int value))

(declare-fun result3 () t1)

(declare-fun a__split_fields6 () us_split_fields)

(declare-fun result4 () int__ref)

(declare-fun low3 () Int)

(declare-fun result5 () int__ref)

(declare-fun high3 () Int)

(declare-fun a__split_fields7 () us_split_fields__ref)

(declare-fun low4 () int__ref)

(declare-fun high4 () int__ref)

(declare-fun a__split_fields8 () us_split_fields)

(declare-fun low5 () Int)

(declare-fun high5 () Int)

(declare-fun a__split_fields9 () us_split_fields__ref)

(declare-fun low6 () int__ref)

(declare-fun high6 () int__ref)

(declare-fun a__split_fields10 () us_split_fields)

(declare-fun low7 () Int)

(declare-fun high7 () Int)

(declare-fun a__split_fields11 () us_split_fields__ref)

(declare-fun low8 () int__ref)

(declare-fun high8 () int__ref)

(declare-fun a__split_fields12 () us_split_fields)

(declare-fun low9 () Int)

(declare-fun high9 () Int)

;; H
  (assert (dynamic_invariant2
  (mk___rep a__split_discrs
  (mk___split_fields (mk___t1 a__split_fields a__split_fields1))) true false
  true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref low)))

;; H
  (assert (= low1 1))

;; H
  (assert (in_range3 low1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref high)))

;; H
  (assert
  (= high1 (to_rep (rec__simple_unc_arrays__table__last a__split_discrs))))

;; H
  (assert (in_range2 high1))

;; H
  (assert
  (=> (< low1 high1)
  (and (= a__split_fields temp___829) (= a__split_fields1 temp___8291))))

;; H
  (assert
  (=> (< low1 high1)
  (and (= a__split_discrs (mk___split_discrs temp___822))
  (and (= a__split_fields temp___8221) (= a__split_fields1 temp___8222)))))

;; H
  (assert (=> (< low1 high1) (= temp___821 high1)))

;; H
  (assert
  (=> (< low1 high1)
  (and (= a__split_fields temp___825) (= a__split_fields1 temp___8251))))

;; H
  (assert (=> (< low1 high1) (= temp___820 low1)))

;; H
  (assert
  (=> (< low1 high1)
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (- low2 1)))
  (= (to_rep2 (select a__split_fields4 j)) (to_rep2
                                           (select temp___825 (+ (- (to_rep
                                                                    (rec__simple_unc_arrays__table__last
                                                                    a__split_discrs)) j) 1))))))
  (forall ((j Int))
  (=>
  (and (<= (- low2 1) j)
  (<= j (to_rep (rec__simple_unc_arrays__table__last a__split_discrs))))
  (= (to_rep2 (select a__split_fields4 j)) (to_rep2 (select temp___829 j))))))))

;; H
  (assert
  (=> (< low1 high1)
  (and
  (and
  (and
  (and (=> (<= 1 2147483647) (in_range3 low2))
  (=> (<= 0 2147483647) (in_range2 high2))) (dynamic_invariant2
  (mk___rep a__split_discrs
  (mk___split_fields (mk___t1 a__split_fields4 a__split_fields5))) true true
  true))
  (= (rec__simple_unc_arrays__table__last a__split_discrs) temp___822))
  (< low2 high2))))

;; H
  (assert
  (=> (< low1 high1)
  (= (to_rep (rec__simple_unc_arrays__table__last a__split_discrs)) r22b)))

;; H
  (assert (=> (< low1 high1) (in_range2 r22b)))

;; H
  (assert
  (=> (< low1 high1)
  (= (ite (<= (to_rep1 (first2 a__split_fields5)) (to_rep1
                                                  (last2 a__split_fields5)))
     (+ (- (to_rep1 (last2 a__split_fields5)) (to_rep1
                                              (first2 a__split_fields5))) 1)
     0) (ite (<= 1 r22b) (+ (- r22b 1) 1) 0))))

;; H
  (assert
  (=> (< low1 high1)
  (= a__split_fields4 simple_unc_arrays__swap_cells__a__compl)))

;; H
  (assert
  (=> (< low1 high1)
  (= (mk2 (to_rep1 (first2 a__split_fields5))
     (to_rep1 (last2 a__split_fields5))) simple_unc_arrays__swap_cells__a__compl1)))

;; H
  (assert (=> (< low1 high1) (and (= o2 high2) (in_range3 high2))))

;; H
  (assert
  (=> (< low1 high1)
  (= (to_rep1 o1) (to_rep1 (last4 simple_unc_arrays__swap_cells__a__compl1)))))

;; H
  (assert
  (=> (< low1 high1)
  (= (to_rep1 o) (to_rep1 (first4 simple_unc_arrays__swap_cells__a__compl1)))))

;; H
  (assert
  (=> (< low1 high1)
  (and
  (and
  (= (to_rep2 (select simple_unc_arrays__swap_cells__a low2)) (to_rep2
                                                              (select 
                                                              simple_unc_arrays__swap_cells__a__compl 
                                                              o2)))
  (= (to_rep2 (select simple_unc_arrays__swap_cells__a o2)) (to_rep2
                                                            (select simple_unc_arrays__swap_cells__a__compl 
                                                            low2))))
  (forall ((k Int))
  (=> (and (<= (to_rep1 o) k) (<= k (to_rep1 o1)))
  (=> (and (not (= k low2)) (not (= k o2)))
  (= (to_rep2 (select simple_unc_arrays__swap_cells__a k)) (to_rep2
                                                           (select simple_unc_arrays__swap_cells__a__compl k)))))))))

;; H
  (assert (=> (< low1 high1) (= result2 a__split_fields4)))

;; H
  (assert (=> (< low1 high1) (= result3 a__split_fields5)))

;; H
  (assert
  (=> (< low1 high1)
  (= a__split_fields6 (mk___split_fields
                      (mk___t1
                      (slide simple_unc_arrays__swap_cells__a
                      (to_rep1
                      (first
                      (mk
                      (to_rep1
                      (first4 simple_unc_arrays__swap_cells__a__compl1))
                      (to_rep1
                      (last4 simple_unc_arrays__swap_cells__a__compl1))))) 1)
                      (mk1 (to_rep1 (first4 (mk2 1 r22b)))
                      (to_rep1 (last4 (mk2 1 r22b)))))))))

;; H
  (assert (=> (< low1 high1) (and (= o3 (+ low2 1)) (in_range1 (+ low2 1)))))

;; H
  (assert (=> (< low1 high1) (= result4 (mk_int__ref low2))))

;; H
  (assert (=> (< low1 high1) (= low3 o3)))

;; H
  (assert
  (=> (< low1 high1) (and (= o4 (- high2 1)) (in_range2 (- high2 1)))))

;; H
  (assert (=> (< low1 high1) (= result5 (mk_int__ref high2))))

;; H
  (assert (=> (< low1 high1) (= high3 o4)))

;; H
  (assert (=> (< low1 high1) (not (< low3 high3))))

;; H
  (assert (=> (< low1 high1) (= high4 (mk_int__ref high3))))

;; H
  (assert (=> (< low1 high1) (= low4 (mk_int__ref low3))))

;; H
  (assert
  (=> (< low1 high1)
  (= a__split_fields7 (mk___split_fields__ref a__split_fields6))))

;; H
  (assert (=> (< low1 high1) (= high5 high3)))

;; H
  (assert (=> (< low1 high1) (= low5 low3)))

;; H
  (assert (=> (< low1 high1) (= a__split_fields8 a__split_fields6)))

;; H
  (assert (=> (< low1 high1) (= high6 high4)))

;; H
  (assert (=> (< low1 high1) (= low6 low4)))

;; H
  (assert (=> (< low1 high1) (= a__split_fields9 a__split_fields7)))

;; H
  (assert (=> (< low1 high1) (= high7 high5)))

;; H
  (assert (=> (< low1 high1) (= low7 low5)))

;; H
  (assert (=> (< low1 high1) (= a__split_fields10 a__split_fields8)))

;; H
  (assert (=> (not (< low1 high1)) (= high6 (mk_int__ref high1))))

;; H
  (assert (=> (not (< low1 high1)) (= low6 (mk_int__ref low1))))

;; H
  (assert
  (=> (not (< low1 high1))
  (= a__split_fields9 (mk___split_fields__ref
                      (mk___split_fields
                      (mk___t1 a__split_fields a__split_fields1))))))

;; H
  (assert (=> (not (< low1 high1)) (= high7 high1)))

;; H
  (assert (=> (not (< low1 high1)) (= low7 low1)))

;; H
  (assert
  (=> (not (< low1 high1))
  (= a__split_fields10 (mk___split_fields
                       (mk___t1 a__split_fields2 a__split_fields3)))))

;; H
  (assert (= high8 high6))

;; H
  (assert (= low8 low6))

;; H
  (assert (= a__split_fields11 a__split_fields9))

;; H
  (assert (= high9 high7))

;; H
  (assert (= low9 low7))

;; H
  (assert (= a__split_fields12 a__split_fields10))

(declare-fun j () Int)

;; H
  (assert (<= 1 j))

;; H
  (assert
  (<= j (to_rep (rec__simple_unc_arrays__table__last a__split_discrs))))

(assert
;; WP_parameter_def
 ;; File "simple_unc_arrays.ads", line 10, characters 0-0
  (not
  (= (to_rep2
     (select (elts1
             (rec__simple_unc_arrays__table__v
             (us_split_fields__content a__split_fields11))) j)) (to_rep2
                                                                (select 
                                                                a__split_fields (+ (- 
                                                                (to_rep
                                                                (rec__simple_unc_arrays__table__last
                                                                a__split_discrs)) 
                                                                j) 1))))))
(check-sat)
