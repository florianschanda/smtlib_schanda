;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort statust 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (statust statust) Bool)

(declare-fun dummy () statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 0 1)) (in_range1 temp___expr_152)))

(declare-fun theauditalarm (us_private) Int)

(declare-fun theauditalarm__function_guard (Int us_private) Bool)

;; theauditalarm__post_axiom
  (assert
  (forall ((auditlog__state us_private))
  (! (let ((result (theauditalarm auditlog__state)))
     (=> (theauditalarm__function_guard result auditlog__state)
     (dynamic_invariant result true false true))) :pattern ((theauditalarm
                                                            auditlog__state)) )))

(declare-fun thedooralarm (us_private) Int)

(declare-fun thedooralarm__function_guard (Int us_private) Bool)

;; thedooralarm__post_axiom
  (assert
  (forall ((door__state us_private))
  (! (let ((result (thedooralarm door__state)))
     (=> (thedooralarm__function_guard result door__state) (dynamic_invariant
     result true false true))) :pattern ((thedooralarm door__state)) )))

(declare-fun isalarming (tuple0) Bool)

(declare-fun isalarming__function_guard (Bool tuple0) Bool)

(declare-fun isalarming1 (tuple0) Bool)

(declare-fun isalarming__function_guard1 (Bool tuple0) Bool)

;; isalarming__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (=> (isalarming__function_guard (isalarming us_void_param)
     us_void_param)
     (and (isalarming__function_guard1 (isalarming1 Tuple0) Tuple0)
     (= (= (isalarming us_void_param) true) (= (isalarming1 Tuple0) true)))) :pattern (
  (isalarming us_void_param)) )))

(declare-fun state () us_private)

(declare-fun state1 () us_private)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Bool)

(declare-fun o3 () Bool)

(declare-fun result () Bool)

(declare-fun output () us_private)

(declare-fun output1 () us_private)

(declare-fun output2 () us_private)

(declare-fun output3 () us_private)

;; H
  (assert (isalarming__function_guard1 (isalarming1 Tuple0) Tuple0))

;; H
  (assert (isalarming__function_guard1 (isalarming1 Tuple0) Tuple0))

;; H
  (assert
  (and
  (and (= o1 (theauditalarm state)) (theauditalarm__function_guard o1 state))
  (in_range1 o1)))

;; H
  (assert (= o2 (ite (= o1 0) true false)))

;; H
  (assert
  (and
  (and (= o (thedooralarm state1)) (thedooralarm__function_guard o state1))
  (in_range1 o)))

;; H
  (assert (= o3 (ite (= o 0) true false)))

;; H
  (assert (= result (ite (= o3 false) o2 true)))

;; H
  (assert (=> (= result true) (= (isalarming1 Tuple0) true)))

;; H
  (assert (=> (not (= result true)) (not (= (isalarming1 Tuple0) true))))

;; H
  (assert (=> (not (= result true)) (= output output1)))

;; H
  (assert (= output2 output))

;; H
  (assert (= output3 output))

;; H
  (assert (thedooralarm__function_guard (thedooralarm state1) state1))

;; H
  (assert (isalarming__function_guard1 (isalarming1 Tuple0) Tuple0))

(assert
;; WP_parameter_def
 ;; File "alarm.adb", line 30, characters 0-0
  (not
  (<= (to_int1 (= (thedooralarm state1) 0)) (to_int1 (isalarming1 Tuple0)))))
(check-sat)
