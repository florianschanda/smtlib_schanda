;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun x () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun result () Int)

(declare-fun x1 () Int)

(declare-fun result1 () Int)

(declare-fun x2 () Int)

(declare-fun result2 () Int)

(declare-fun x3 () Int)

(declare-fun result3 () Int)

(declare-fun x4 () Int)

(declare-fun result4 () Int)

(declare-fun x5 () Int)

(declare-fun x6 () Int)

(declare-fun x7 () Int)

;; H
  (assert (in_range1 x))

;; H
  (assert
  (=> (and (<= (- 100) x) (<= x 100))
  (and (= o (* x 2)) (in_range1 (* x 2)))))

;; H
  (assert (=> (and (<= (- 100) x) (<= x 100)) (= result x)))

;; H
  (assert (=> (and (<= (- 100) x) (<= x 100)) (= x1 o)))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (and (<= 0 x) (<= x 199)) (and (= o1 (+ x 1)) (in_range1 (+ x 1))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (and (<= 0 x) (<= x 199)) (= result1 x))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (and (<= 0 x) (<= x 199)) (= x2 o1))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (and (<= (- 199) x) (<= x 0)) (and (= o2 (- x 1)) (in_range1 (- x 1)))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (and (<= (- 199) x) (<= x 0)) (= result2 x)))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (and (<= (- 199) x) (<= x 0)) (= x3 o2)))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0))) (=> (<= 200 x) (= result3 x))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0))) (=> (<= 200 x) (= x4 200))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0)))
  (=> (not (<= 200 x)) (= result4 x))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0)))
  (=> (not (<= 200 x)) (= x5 (- 200)))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0))) (=> (not (<= 200 x)) (= x4 x5))))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199)))
  (=> (not (and (<= (- 199) x) (<= x 0))) (= x3 x4)))))

;; H
  (assert
  (=> (not (and (<= (- 100) x) (<= x 100)))
  (=> (not (and (<= 0 x) (<= x 199))) (= x2 x3))))

;; H
  (assert (=> (not (and (<= (- 100) x) (<= x 100))) (= x1 x2)))

;; H
  (assert (= x1 x6))

;; H
  (assert (= x7 x1))

;; H
  (assert (=> (and (<= 1 x) (<= x 199)) (<= x x6)))

;; H
  (assert (=> (and (<= (- 199) x) (<= x (- 1))) (<= x6 x)))

;; H
  (assert (=> (= (>= x 200) true) (= x6 200)))

;; H
  (assert (= (<= x (- 200)) true))

(assert
;; WP_parameter_def
 ;; File "p.adb", line 5, characters 0-0
  (not (= x6 (- 200))))
(check-sat)
