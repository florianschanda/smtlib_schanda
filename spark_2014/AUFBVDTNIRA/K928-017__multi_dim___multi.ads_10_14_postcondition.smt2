;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort ta4D1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (ta4D1 ta4D1) Bool)

(declare-fun dummy1 () ta4D1)

(declare-datatypes () ((ta4D1__ref (mk_ta4D1__ref (ta4D1__content ta4D1)))))
(define-fun ta4D1__ref___projection ((a ta4D1__ref)) ta4D1 (ta4D1__content a))

(declare-sort ta4D2 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (ta4D2 ta4D2) Bool)

(declare-fun dummy2 () ta4D2)

(declare-datatypes () ((ta4D2__ref (mk_ta4D2__ref (ta4D2__content ta4D2)))))
(define-fun ta4D2__ref___projection ((a ta4D2__ref)) ta4D2 (ta4D2__content a))

(declare-sort map1 0)

(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_133 Int)
                             (temp___idx_134 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_133)
                             (<= temp___idx_133 a__last))
                             (and (<= a__first_2 temp___idx_134)
                             (<= temp___idx_134 a__last_2)))
                             (= (to_rep
                                (get a temp___idx_133 temp___idx_134)) 
                             (to_rep
                             (get b (+ (- b__first a__first) temp___idx_133)
                             (+ (- b__first_2 a__first_2) temp___idx_134)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_133 Int) (temp___idx_134 Int))
  (=>
  (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2)))
  (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep
                                                    (get b
                                                    (+ (- b__first a__first) temp___idx_133)
                                                    (+ (- b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort t1b 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (t1b t1b) Bool)

(declare-fun dummy3 () t1b)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))

(declare-sort t2b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (t2b t2b) Bool)

(declare-fun dummy4 () t2b)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))

(declare-sort t4b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (t4b t4b) Bool)

(declare-fun dummy5 () t4b)

(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content t4b)))))
(define-fun t4b__ref___projection ((a t4b__ref)) t4b (t4b__content a))

(declare-sort t5b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (t5b t5b) Bool)

(declare-fun dummy6 () t5b)

(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a t5b__ref)) t5b (t5b__content a))

(declare-sort t7b 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq7 (t7b t7b) Bool)

(declare-fun dummy7 () t7b)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content t7b)))))
(define-fun t7b__ref___projection ((a t7b__ref)) t7b (t7b__content a))

(declare-sort t8b 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq8 (t8b t8b) Bool)

(declare-fun dummy8 () t8b)

(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))

(declare-sort t10b 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq9 (t10b t10b) Bool)

(declare-fun dummy9 () t10b)

(declare-datatypes () ((t10b__ref (mk_t10b__ref (t10b__content t10b)))))
(define-fun t10b__ref___projection ((a t10b__ref)) t10b (t10b__content a))

(declare-sort t11b 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq10 (t11b t11b) Bool)

(declare-fun dummy10 () t11b)

(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))

(declare-sort t13b 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq11 (t13b t13b) Bool)

(declare-fun dummy11 () t13b)

(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content t13b)))))
(define-fun t13b__ref___projection ((a t13b__ref)) t13b (t13b__content a))

(declare-sort t14b 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq12 (t14b t14b) Bool)

(declare-fun dummy12 () t14b)

(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content t14b)))))
(define-fun t14b__ref___projection ((a t14b__ref)) t14b (t14b__content a))

(declare-fun temp___159 (Int Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___161 Int) (temp___162 Int) (temp___163 Int)
  (temp___164 Int))
  (let ((temp___160 (temp___159 temp___161 temp___162 temp___163 temp___164)))
  (and
  (and (= (get temp___160 1 1) (of_rep temp___161))
  (= (get temp___160 1 2) (of_rep temp___162)))
  (and (= (get temp___160 2 1) (of_rep temp___163))
  (= (get temp___160 2 2) (of_rep temp___164)))))))

(declare-fun temp___167 (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___169 Int))
  (forall ((temp___170 Int) (temp___171 Int))
  (= (get (temp___167 temp___169) temp___170 temp___171) (of_rep temp___169)))))

(declare-fun temp___172 (Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___174 Int) (temp___175 Int) (temp___176 Int))
  (let ((temp___173 (temp___172 temp___174 temp___175 temp___176)))
  (forall ((temp___177 Int) (temp___178 Int))
  (ite (= temp___177 1)
  (ite (= temp___178 1)
  (= (get temp___173 temp___177 temp___178) (of_rep temp___174))
  (= (get temp___173 temp___177 temp___178) (of_rep temp___175)))
  (=> (= temp___177 2)
  (= (get temp___173 temp___177 temp___178) (of_rep temp___176))))))))

(declare-fun temp___179 (Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___181 Int) (temp___182 Int) (temp___183 Int))
  (let ((temp___180 (temp___179 temp___181 temp___182 temp___183)))
  (forall ((temp___184 Int) (temp___185 Int))
  (ite (= temp___184 1)
  (ite (= temp___185 1)
  (= (get temp___180 temp___184 temp___185) (of_rep temp___181))
  (= (get temp___180 temp___184 temp___185) (of_rep temp___182)))
  (=> (= temp___184 2)
  (= (get temp___180 temp___184 temp___185) (of_rep temp___183))))))))

(declare-fun temp___186 (Int Int Int Int) map1)

;; def_axiom
  (assert
  (forall ((temp___188 Int) (temp___189 Int) (temp___190 Int)
  (temp___191 Int))
  (let ((temp___187 (temp___186 temp___188 temp___189 temp___190 temp___191)))
  (forall ((temp___192 Int) (temp___193 Int))
  (ite (= temp___192 2)
  (ite (= temp___193 1)
  (= (get temp___187 temp___192 temp___193) (of_rep temp___188))
  (=> (= temp___193 2)
  (= (get temp___187 temp___192 temp___193) (of_rep temp___189))))
  (ite (= temp___193 1)
  (= (get temp___187 temp___192 temp___193) (of_rep temp___190))
  (=> (= temp___193 2)
  (= (get temp___187 temp___192 temp___193) (of_rep temp___191)))))))))

(declare-fun one () Int)

(declare-fun a () map1)

(declare-fun o () map1)

(declare-fun o1 () map1)

(declare-fun o2 () map1)

(declare-fun o3 () map1)

(declare-fun o4 () map1)

(declare-fun result () map1)

(declare-fun a1 () map1)

(declare-fun result1 () map1)

(declare-fun a2 () map1)

(declare-fun result2 () map1)

(declare-fun a3 () map1)

(declare-fun result3 () map1)

(declare-fun a4 () map1)

(declare-fun result4 () map1)

(declare-fun a5 () map1)

(declare-fun a6 () map1)

(declare-fun a7 () map1)

(define-fun a8 () map__ref (mk_map__ref a))

;; H
  (assert (in_range1 one))

;; H
  (assert (in_range1 b))

;; H
  (assert (= one 1))

;; H
  (assert (=> (= b 1) (= o (temp___159 one 2 one 2))))

;; H
  (assert (=> (= b 1) (= (mk_map__ref result) a8)))

;; H
  (assert (=> (= b 1) (= a1 o)))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o1 (temp___167 one)))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (mk_map__ref result1) a8))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= a2 o1))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= o2 (temp___172 one one one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= (mk_map__ref result2) a8)))))

;; H
  (assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= a3 o2)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= o3 (temp___179 2 one one)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= (mk_map__ref result3) a8))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= a4 o3))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= o4 (temp___186 2 one one one)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= (mk_map__ref result4) a8))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a5 o4))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a4 a5))))))

;; H
  (assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= a3 a4)))))

;; H
  (assert (=> (not (= b 1)) (=> (not (= b 2)) (= a2 a3))))

;; H
  (assert (=> (not (= b 1)) (= a1 a2)))

;; H
  (assert (= a1 a6))

;; H
  (assert (= a7 a1))

;; H
  (assert (= b 1))

(declare-fun k () Int)

;; H
  (assert (<= 1 k))

;; H
  (assert (<= k 2))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (to_rep (get a6 k one)) one)))
(check-sat)
