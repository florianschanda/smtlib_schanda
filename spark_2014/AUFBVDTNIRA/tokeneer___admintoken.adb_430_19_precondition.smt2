;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort namecountt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (namecountt namecountt) Bool)

(declare-fun dummy4 () namecountt)

(declare-datatypes ()
((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt 
  (namecountt__content a))

(declare-fun to_rep2 (namecountt) Int)

(declare-fun of_rep2 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun dummy5 () (Array Int character))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array Int character) (Array Int character)) Bool)

(declare-sort issueridt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (issueridt issueridt) Bool)

(declare-fun dummy6 () issueridt)

(declare-datatypes ()
((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt 
  (issueridt__content a))

(declare-fun to_rep3 (issueridt) Int)

(declare-fun of_rep3 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt 
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt 
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) 
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq7 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq3
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun cryptotypes__issuert__id__first__bit () Int)

(declare-fun cryptotypes__issuert__id__last__bit () Int)

(declare-fun cryptotypes__issuert__id__position () Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-fun cryptotypes__issuert__namelength__first__bit () Int)

(declare-fun cryptotypes__issuert__namelength__last__bit () Int)

(declare-fun cryptotypes__issuert__namelength__position () Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-fun cryptotypes__issuert__name__first__bit () Int)

(declare-fun cryptotypes__issuert__name__last__bit () Int)

(declare-fun cryptotypes__issuert__name__position () Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun dummy7 () us_rep)

(declare-datatypes ()
((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-sort serialnumbert 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (serialnumbert serialnumbert) Bool)

(declare-fun dummy8 () serialnumbert)

(declare-datatypes ()
((serialnumbert__ref
 (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert 
  (serialnumbert__content a))

(declare-fun to_rep4 (serialnumbert) Int)

(declare-fun of_rep4 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__certtypes__idt__issuer us_rep)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep 
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert 
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq9 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq7
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 b))) true)
                         (= (to_rep4
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun certtypes__idt__issuer__first__bit () Int)

(declare-fun certtypes__idt__issuer__last__bit () Int)

(declare-fun certtypes__idt__issuer__position () Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-fun certtypes__idt__serialnumber__first__bit () Int)

(declare-fun certtypes__idt__serialnumber__last__bit () Int)

(declare-fun certtypes__idt__serialnumber__position () Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun dummy9 () us_rep1)

(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))

(declare-sort descriptioni 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 150)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (descriptioni descriptioni) Bool)

(declare-fun dummy10 () descriptioni)

(declare-datatypes ()
((descriptioni__ref
 (mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni 
  (descriptioni__content a))

(declare-fun nodescription () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___139 Int))
  (forall ((temp___140 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___139) temp___140) 
  (of_rep temp___139)))))

(declare-sort algorithmt 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (algorithmt algorithmt) Bool)

(declare-fun dummy11 () algorithmt)

(declare-datatypes ()
((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt 
  (algorithmt__content a))

(declare-fun to_rep5 (algorithmt) Int)

(declare-fun of_rep5 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range8
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort yearst 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (yearst yearst) Bool)

(declare-fun dummy12 () yearst)

(declare-datatypes ()
((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep6 (yearst) Int)

(declare-fun of_rep6 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort monthst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (monthst monthst) Bool)

(declare-fun dummy13 () monthst)

(declare-datatypes ()
((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep7 (monthst) Int)

(declare-fun of_rep7 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range10 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-sort dayst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (dayst dayst) Bool)

(declare-fun dummy14 () dayst)

(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep8 (dayst) Int)

(declare-fun of_rep8 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range11 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-sort millisecst 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (millisecst millisecst) Bool)

(declare-fun dummy15 () millisecst)

(declare-datatypes ()
((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst 
  (millisecst__content a))

(declare-fun to_rep9 (millisecst) Int)

(declare-fun of_rep9 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range12
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields4)) yearst 
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields4)) monthst 
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields4)) dayst 
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) millisecst 
  (rec__clock__timet__millisec a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq16 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep6
                            (rec__clock__timet__year (us_split_fields5 a))) 
                         (to_rep6
                         (rec__clock__timet__year (us_split_fields5 b))))
                         (= (to_rep7
                            (rec__clock__timet__month (us_split_fields5 a))) 
                         (to_rep7
                         (rec__clock__timet__month (us_split_fields5 b)))))
                         (= (to_rep8
                            (rec__clock__timet__day (us_split_fields5 a))) 
                         (to_rep8
                         (rec__clock__timet__day (us_split_fields5 b)))))
                         (= (to_rep9
                            (rec__clock__timet__millisec
                            (us_split_fields5 a))) (to_rep9
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq16 (us_rep2 us_rep2) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-fun clock__timet__year__first__bit () Int)

(declare-fun clock__timet__year__last__bit () Int)

(declare-fun clock__timet__year__position () Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-fun clock__timet__month__first__bit () Int)

(declare-fun clock__timet__month__last__bit () Int)

(declare-fun clock__timet__month__position () Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-fun clock__timet__day__first__bit () Int)

(declare-fun clock__timet__day__last__bit () Int)

(declare-fun clock__timet__day__position () Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-fun clock__timet__millisec__first__bit () Int)

(declare-fun clock__timet__millisec__last__bit () Int)

(declare-fun clock__timet__millisec__position () Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun dummy16 () us_rep2)

(declare-datatypes ()
((timet__ref (mk_timet__ref (timet__content us_rep2)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep2 (timet__content
                                                             a))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__cert__contentst__id us_rep1)(rec__cert__contentst__notbefore us_rep2)(rec__cert__contentst__notafter us_rep2)(rec__cert__contentst__mechanism algorithmt)))))
(define-fun us_split_fields_ID3__projection ((a us_split_fields6)) us_rep1 
  (rec__cert__contentst__id a))

(define-fun us_split_fields_NotBefore__projection ((a us_split_fields6)) us_rep2 
  (rec__cert__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__projection ((a us_split_fields6)) us_rep2 
  (rec__cert__contentst__notafter a))

(define-fun us_split_fields_Mechanism__projection ((a us_split_fields6)) algorithmt 
  (rec__cert__contentst__mechanism a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq17 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq9
                            (rec__cert__contentst__id (us_split_fields7 a))
                            (rec__cert__contentst__id (us_split_fields7 b))) true)
                         (= (bool_eq16
                            (rec__cert__contentst__notbefore
                            (us_split_fields7 a))
                            (rec__cert__contentst__notbefore
                            (us_split_fields7 b))) true))
                         (= (bool_eq16
                            (rec__cert__contentst__notafter
                            (us_split_fields7 a))
                            (rec__cert__contentst__notafter
                            (us_split_fields7 b))) true))
                         (= (to_rep5
                            (rec__cert__contentst__mechanism
                            (us_split_fields7 a))) (to_rep5
                                                   (rec__cert__contentst__mechanism
                                                   (us_split_fields7 b)))))
                    true false))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-fun cert__contentst__id__first__bit () Int)

(declare-fun cert__contentst__id__last__bit () Int)

(declare-fun cert__contentst__id__position () Int)

;; cert__contentst__id__first__bit_axiom
  (assert (<= 0 cert__contentst__id__first__bit))

;; cert__contentst__id__last__bit_axiom
  (assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))

;; cert__contentst__id__position_axiom
  (assert (<= 0 cert__contentst__id__position))

(declare-fun cert__contentst__notbefore__first__bit () Int)

(declare-fun cert__contentst__notbefore__last__bit () Int)

(declare-fun cert__contentst__notbefore__position () Int)

;; cert__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__contentst__notbefore__first__bit))

;; cert__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))

;; cert__contentst__notbefore__position_axiom
  (assert (<= 0 cert__contentst__notbefore__position))

(declare-fun cert__contentst__notafter__first__bit () Int)

(declare-fun cert__contentst__notafter__last__bit () Int)

(declare-fun cert__contentst__notafter__position () Int)

;; cert__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__contentst__notafter__first__bit))

;; cert__contentst__notafter__last__bit_axiom
  (assert
  (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))

;; cert__contentst__notafter__position_axiom
  (assert (<= 0 cert__contentst__notafter__position))

(declare-fun cert__contentst__mechanism__first__bit () Int)

(declare-fun cert__contentst__mechanism__last__bit () Int)

(declare-fun cert__contentst__mechanism__position () Int)

;; cert__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__contentst__mechanism__first__bit))

;; cert__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))

;; cert__contentst__mechanism__position_axiom
  (assert (<= 0 cert__contentst__mechanism__position))

(declare-fun dummy17 () us_rep3)

(declare-datatypes ()
((contentst__ref (mk_contentst__ref (contentst__content us_rep3)))))
(define-fun contentst__ref___projection ((a contentst__ref)) us_rep3 
  (contentst__content a))

(declare-fun theid (us_rep3) us_rep1)

(declare-fun theid__function_guard (us_rep1 us_rep3) Bool)

;; theid__post_axiom
  (assert true)

(declare-fun iscurrent (us_rep3 us_private) Bool)

(declare-fun iscurrent__function_guard (Bool us_rep3 us_private) Bool)

;; iscurrent__post_axiom
  (assert true)

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__cert__attr__contentst__id us_rep1)(rec__cert__attr__contentst__notbefore us_rep2)(rec__cert__attr__contentst__notafter us_rep2)(rec__cert__attr__contentst__mechanism algorithmt)(rec__cert__attr__contentst__basecertid us_rep1)))))
(define-fun us_split_fields_ID4__projection ((a us_split_fields8)) us_rep1 
  (rec__cert__attr__contentst__id a))

(define-fun us_split_fields_NotBefore2__projection ((a us_split_fields8)) us_rep2 
  (rec__cert__attr__contentst__notbefore a))

(define-fun us_split_fields_NotAfter2__projection ((a us_split_fields8)) us_rep2 
  (rec__cert__attr__contentst__notafter a))

(define-fun us_split_fields_Mechanism2__projection ((a us_split_fields8)) algorithmt 
  (rec__cert__attr__contentst__mechanism a))

(define-fun us_split_fields_BaseCertID__projection ((a us_split_fields8)) us_rep1 
  (rec__cert__attr__contentst__basecertid a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_12__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                 a))

(define-fun bool_eq18 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (bool_eq9
                            (rec__cert__attr__contentst__id
                            (us_split_fields9 a))
                            (rec__cert__attr__contentst__id
                            (us_split_fields9 b))) true)
                         (= (bool_eq16
                            (rec__cert__attr__contentst__notbefore
                            (us_split_fields9 a))
                            (rec__cert__attr__contentst__notbefore
                            (us_split_fields9 b))) true))
                         (= (bool_eq16
                            (rec__cert__attr__contentst__notafter
                            (us_split_fields9 a))
                            (rec__cert__attr__contentst__notafter
                            (us_split_fields9 b))) true))
                         (= (to_rep5
                            (rec__cert__attr__contentst__mechanism
                            (us_split_fields9 a))) (to_rep5
                                                   (rec__cert__attr__contentst__mechanism
                                                   (us_split_fields9 b)))))
                         (= (bool_eq9
                            (rec__cert__attr__contentst__basecertid
                            (us_split_fields9 a))
                            (rec__cert__attr__contentst__basecertid
                            (us_split_fields9 b))) true))
                    true false))

(declare-fun user_eq18 (us_rep4 us_rep4) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-fun cert__attr__contentst__id__first__bit () Int)

(declare-fun cert__attr__contentst__id__last__bit () Int)

(declare-fun cert__attr__contentst__id__position () Int)

;; cert__attr__contentst__id__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__id__first__bit))

;; cert__attr__contentst__id__last__bit_axiom
  (assert
  (< cert__attr__contentst__id__first__bit cert__attr__contentst__id__last__bit))

;; cert__attr__contentst__id__position_axiom
  (assert (<= 0 cert__attr__contentst__id__position))

(declare-fun cert__attr__contentst__notbefore__first__bit () Int)

(declare-fun cert__attr__contentst__notbefore__last__bit () Int)

(declare-fun cert__attr__contentst__notbefore__position () Int)

;; cert__attr__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__notbefore__first__bit))

;; cert__attr__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__attr__contentst__notbefore__first__bit cert__attr__contentst__notbefore__last__bit))

;; cert__attr__contentst__notbefore__position_axiom
  (assert (<= 0 cert__attr__contentst__notbefore__position))

(declare-fun cert__attr__contentst__notafter__first__bit () Int)

(declare-fun cert__attr__contentst__notafter__last__bit () Int)

(declare-fun cert__attr__contentst__notafter__position () Int)

;; cert__attr__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__notafter__first__bit))

;; cert__attr__contentst__notafter__last__bit_axiom
  (assert
  (< cert__attr__contentst__notafter__first__bit cert__attr__contentst__notafter__last__bit))

;; cert__attr__contentst__notafter__position_axiom
  (assert (<= 0 cert__attr__contentst__notafter__position))

(declare-fun cert__attr__contentst__mechanism__first__bit () Int)

(declare-fun cert__attr__contentst__mechanism__last__bit () Int)

(declare-fun cert__attr__contentst__mechanism__position () Int)

;; cert__attr__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__mechanism__first__bit))

;; cert__attr__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__attr__contentst__mechanism__first__bit cert__attr__contentst__mechanism__last__bit))

;; cert__attr__contentst__mechanism__position_axiom
  (assert (<= 0 cert__attr__contentst__mechanism__position))

(declare-fun cert__attr__contentst__basecertid__first__bit () Int)

(declare-fun cert__attr__contentst__basecertid__last__bit () Int)

(declare-fun cert__attr__contentst__basecertid__position () Int)

;; cert__attr__contentst__basecertid__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__basecertid__first__bit))

;; cert__attr__contentst__basecertid__last__bit_axiom
  (assert
  (< cert__attr__contentst__basecertid__first__bit cert__attr__contentst__basecertid__last__bit))

;; cert__attr__contentst__basecertid__position_axiom
  (assert (<= 0 cert__attr__contentst__basecertid__position))

(declare-fun dummy18 () us_rep4)

(declare-datatypes ()
((contentst__ref1 (mk_contentst__ref1 (contentst__content1 us_rep4)))))
(define-fun contentst__ref_2__projection ((a contentst__ref1)) us_rep4 
  (contentst__content1 a))

(declare-fun thebasecert (us_rep4) us_rep1)

(declare-fun thebasecert__function_guard (us_rep1 us_rep4) Bool)

;; thebasecert__post_axiom
  (assert true)

(declare-sort privileget 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq19 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq19 (privileget privileget) Bool)

(declare-fun dummy19 () privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget 
  (privileget__content a))

(declare-fun to_rep10 (privileget) Int)

(declare-fun of_rep10 (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range13
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-sort classt 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq20 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq20 (classt classt) Bool)

(declare-fun dummy20 () classt)

(declare-datatypes ()
((classt__ref (mk_classt__ref (classt__content classt)))))
(define-fun classt__ref___projection ((a classt__ref)) classt (classt__content
                                                              a))

(declare-fun to_rep11 (classt) Int)

(declare-fun of_rep11 (Int) classt)

;; inversion_axiom
  (assert
  (forall ((x classt))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x classt)) (! (in_range14
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range14 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5 (rec__privtypes__clearancet__class classt)))))
(define-fun us_split_fields_Class__projection ((a us_split_fields10)) classt 
  (rec__privtypes__clearancet__class a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5 (mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep_10__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                  a))

(define-fun bool_eq21 ((a us_rep5)
  (b us_rep5)) Bool (ite (= (to_rep11
                            (rec__privtypes__clearancet__class
                            (us_split_fields11 a))) (to_rep11
                                                    (rec__privtypes__clearancet__class
                                                    (us_split_fields11 b))))
                    true false))

(declare-fun user_eq21 (us_rep5 us_rep5) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-fun privtypes__clearancet__class__first__bit () Int)

(declare-fun privtypes__clearancet__class__last__bit () Int)

(declare-fun privtypes__clearancet__class__position () Int)

;; privtypes__clearancet__class__first__bit_axiom
  (assert (<= 0 privtypes__clearancet__class__first__bit))

;; privtypes__clearancet__class__last__bit_axiom
  (assert
  (< privtypes__clearancet__class__first__bit privtypes__clearancet__class__last__bit))

;; privtypes__clearancet__class__position_axiom
  (assert (<= 0 privtypes__clearancet__class__position))

(declare-fun dummy21 () us_rep5)

(declare-datatypes ()
((clearancet__ref (mk_clearancet__ref (clearancet__content us_rep5)))))
(define-fun clearancet__ref___projection ((a clearancet__ref)) us_rep5 
  (clearancet__content a))

(declare-datatypes ()
((us_split_fields12
 (mk___split_fields6
 (rec__cert__attr__auth__contentst__id us_rep1)(rec__cert__attr__auth__contentst__notbefore us_rep2)(rec__cert__attr__auth__contentst__notafter us_rep2)(rec__cert__attr__auth__contentst__mechanism algorithmt)(rec__cert__attr__auth__contentst__basecertid us_rep1)(rec__cert__attr__auth__contentst__role privileget)(rec__cert__attr__auth__contentst__clearance us_rep5)))))
(define-fun us_split_fields_ID5__projection ((a us_split_fields12)) us_rep1 
  (rec__cert__attr__auth__contentst__id a))

(define-fun us_split_fields_NotBefore3__projection ((a us_split_fields12)) us_rep2 
  (rec__cert__attr__auth__contentst__notbefore a))

(define-fun us_split_fields_NotAfter3__projection ((a us_split_fields12)) us_rep2 
  (rec__cert__attr__auth__contentst__notafter a))

(define-fun us_split_fields_Mechanism3__projection ((a us_split_fields12)) algorithmt 
  (rec__cert__attr__auth__contentst__mechanism a))

(define-fun us_split_fields_BaseCertID2__projection ((a us_split_fields12)) us_rep1 
  (rec__cert__attr__auth__contentst__basecertid a))

(define-fun us_split_fields_Role__projection ((a us_split_fields12)) privileget 
  (rec__cert__attr__auth__contentst__role a))

(define-fun us_split_fields_Clearance__projection ((a us_split_fields12)) us_rep5 
  (rec__cert__attr__auth__contentst__clearance a))

(declare-datatypes ()
((us_split_fields__ref6
 (mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref_12__projection ((a us_split_fields__ref6)) us_split_fields12 
  (us_split_fields__content6 a))

(declare-datatypes ()
((us_rep6 (mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep_13__projection ((a us_rep6)) us_split_fields12 (us_split_fields13
                                                                  a))

(define-fun bool_eq22 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq9
                            (rec__cert__attr__auth__contentst__id
                            (us_split_fields13 a))
                            (rec__cert__attr__auth__contentst__id
                            (us_split_fields13 b))) true)
                         (= (bool_eq16
                            (rec__cert__attr__auth__contentst__notbefore
                            (us_split_fields13 a))
                            (rec__cert__attr__auth__contentst__notbefore
                            (us_split_fields13 b))) true))
                         (= (bool_eq16
                            (rec__cert__attr__auth__contentst__notafter
                            (us_split_fields13 a))
                            (rec__cert__attr__auth__contentst__notafter
                            (us_split_fields13 b))) true))
                         (= (to_rep5
                            (rec__cert__attr__auth__contentst__mechanism
                            (us_split_fields13 a))) (to_rep5
                                                    (rec__cert__attr__auth__contentst__mechanism
                                                    (us_split_fields13 b)))))
                         (= (bool_eq9
                            (rec__cert__attr__auth__contentst__basecertid
                            (us_split_fields13 a))
                            (rec__cert__attr__auth__contentst__basecertid
                            (us_split_fields13 b))) true))
                         (= (to_rep10
                            (rec__cert__attr__auth__contentst__role
                            (us_split_fields13 a))) (to_rep10
                                                    (rec__cert__attr__auth__contentst__role
                                                    (us_split_fields13 b)))))
                         (= (bool_eq21
                            (rec__cert__attr__auth__contentst__clearance
                            (us_split_fields13 a))
                            (rec__cert__attr__auth__contentst__clearance
                            (us_split_fields13 b))) true))
                    true false))

(declare-fun user_eq22 (us_rep6 us_rep6) Bool)

(declare-fun value__size8 () Int)

(declare-fun object__size8 (us_rep6) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment8 a))))

(declare-fun cert__attr__auth__contentst__id__first__bit () Int)

(declare-fun cert__attr__auth__contentst__id__last__bit () Int)

(declare-fun cert__attr__auth__contentst__id__position () Int)

;; cert__attr__auth__contentst__id__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__id__first__bit))

;; cert__attr__auth__contentst__id__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__id__first__bit cert__attr__auth__contentst__id__last__bit))

;; cert__attr__auth__contentst__id__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__id__position))

(declare-fun cert__attr__auth__contentst__notbefore__first__bit () Int)

(declare-fun cert__attr__auth__contentst__notbefore__last__bit () Int)

(declare-fun cert__attr__auth__contentst__notbefore__position () Int)

;; cert__attr__auth__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__notbefore__first__bit))

;; cert__attr__auth__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__notbefore__first__bit cert__attr__auth__contentst__notbefore__last__bit))

;; cert__attr__auth__contentst__notbefore__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__notbefore__position))

(declare-fun cert__attr__auth__contentst__notafter__first__bit () Int)

(declare-fun cert__attr__auth__contentst__notafter__last__bit () Int)

(declare-fun cert__attr__auth__contentst__notafter__position () Int)

;; cert__attr__auth__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__notafter__first__bit))

;; cert__attr__auth__contentst__notafter__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__notafter__first__bit cert__attr__auth__contentst__notafter__last__bit))

;; cert__attr__auth__contentst__notafter__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__notafter__position))

(declare-fun cert__attr__auth__contentst__mechanism__first__bit () Int)

(declare-fun cert__attr__auth__contentst__mechanism__last__bit () Int)

(declare-fun cert__attr__auth__contentst__mechanism__position () Int)

;; cert__attr__auth__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__mechanism__first__bit))

;; cert__attr__auth__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__mechanism__first__bit cert__attr__auth__contentst__mechanism__last__bit))

;; cert__attr__auth__contentst__mechanism__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__mechanism__position))

(declare-fun cert__attr__auth__contentst__basecertid__first__bit () Int)

(declare-fun cert__attr__auth__contentst__basecertid__last__bit () Int)

(declare-fun cert__attr__auth__contentst__basecertid__position () Int)

;; cert__attr__auth__contentst__basecertid__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__basecertid__first__bit))

;; cert__attr__auth__contentst__basecertid__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__basecertid__first__bit cert__attr__auth__contentst__basecertid__last__bit))

;; cert__attr__auth__contentst__basecertid__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__basecertid__position))

(declare-fun cert__attr__auth__contentst__role__first__bit () Int)

(declare-fun cert__attr__auth__contentst__role__last__bit () Int)

(declare-fun cert__attr__auth__contentst__role__position () Int)

;; cert__attr__auth__contentst__role__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__role__first__bit))

;; cert__attr__auth__contentst__role__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__role__first__bit cert__attr__auth__contentst__role__last__bit))

;; cert__attr__auth__contentst__role__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__role__position))

(declare-fun cert__attr__auth__contentst__clearance__first__bit () Int)

(declare-fun cert__attr__auth__contentst__clearance__last__bit () Int)

(declare-fun cert__attr__auth__contentst__clearance__position () Int)

;; cert__attr__auth__contentst__clearance__first__bit_axiom
  (assert (<= 0 cert__attr__auth__contentst__clearance__first__bit))

;; cert__attr__auth__contentst__clearance__last__bit_axiom
  (assert
  (< cert__attr__auth__contentst__clearance__first__bit cert__attr__auth__contentst__clearance__last__bit))

;; cert__attr__auth__contentst__clearance__position_axiom
  (assert (<= 0 cert__attr__auth__contentst__clearance__position))

(declare-fun dummy22 () us_rep6)

(declare-datatypes ()
((contentst__ref2 (mk_contentst__ref2 (contentst__content2 us_rep6)))))
(define-fun contentst__ref_3__projection ((a contentst__ref2)) us_rep6 
  (contentst__content2 a))

(declare-fun cert_attr_auth_to_cert (us_rep6) us_rep3)

(declare-fun cert_attr_auth_to_cert__function_guard (us_rep3 us_rep6) Bool)

;; cert_attr_auth_to_cert__post_axiom
  (assert true)

(declare-fun cert_attr_auth_to_cert_attr (us_rep6) us_rep4)

(declare-fun cert_attr_auth_to_cert_attr__function_guard (us_rep4
  us_rep6) Bool)

;; cert_attr_auth_to_cert_attr__post_axiom
  (assert true)

(declare-sort keyidt 0)

(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq23 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq23 (keyidt keyidt) Bool)

(declare-fun dummy23 () keyidt)

(declare-datatypes ()
((keyidt__ref (mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep12 (keyidt) Int)

(declare-fun of_rep12 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep12 (to_rep12 x)) x) :pattern ((to_rep12 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range15
  (to_rep12 x)) :pattern ((to_rep12 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range15 x) (= (to_rep12 (of_rep12 x)) x)) :pattern ((to_rep12
                                                                 (of_rep12 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range16 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(define-fun bool_eq24 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq24 (keylengtht keylengtht) Bool)

(declare-fun dummy24 () keylengtht)

(declare-datatypes ()
((keylengtht__ref (mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht 
  (keylengtht__content a))

(declare-fun to_rep13 (keylengtht) Int)

(declare-fun of_rep13 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep13 (to_rep13 x)) x) :pattern ((to_rep13 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range16
  (to_rep13 x)) :pattern ((to_rep13 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range16 x) (= (to_rep13 (of_rep13 x)) x)) :pattern ((to_rep13
                                                                 (of_rep13 x))) )))

(declare-datatypes ()
((us_split_fields14
 (mk___split_fields7
 (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields14)) algorithmt 
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields14)) keyidt 
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields14)) keylengtht 
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ()
((us_split_fields__ref7
 (mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref7)) us_split_fields14 
  (us_split_fields__content7 a))

(declare-datatypes ()
((us_rep7 (mk___rep7 (us_split_fields15 us_split_fields14)))))
(define-fun us_rep_2__projection ((a us_rep7)) us_split_fields14 (us_split_fields15
                                                                 a))

(define-fun bool_eq25 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (and
                         (= (to_rep5
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields15 a))) (to_rep5
                                                    (rec__cryptotypes__keypartt__algorithmid
                                                    (us_split_fields15 b))))
                         (= (to_rep12
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields15 a))) (to_rep12
                                                    (rec__cryptotypes__keypartt__keyid
                                                    (us_split_fields15 b)))))
                         (= (to_rep13
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields15 a))) (to_rep13
                                                    (rec__cryptotypes__keypartt__keylength
                                                    (us_split_fields15 b)))))
                    true false))

(declare-fun user_eq25 (us_rep7 us_rep7) Bool)

(declare-fun value__size9 () Int)

(declare-fun object__size9 (us_rep7) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment9 a))))

(declare-fun cryptotypes__keypartt__algorithmid__first__bit () Int)

(declare-fun cryptotypes__keypartt__algorithmid__last__bit () Int)

(declare-fun cryptotypes__keypartt__algorithmid__position () Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-fun cryptotypes__keypartt__keyid__first__bit () Int)

(declare-fun cryptotypes__keypartt__keyid__last__bit () Int)

(declare-fun cryptotypes__keypartt__keyid__position () Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-fun cryptotypes__keypartt__keylength__first__bit () Int)

(declare-fun cryptotypes__keypartt__keylength__last__bit () Int)

(declare-fun cryptotypes__keypartt__keylength__position () Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun dummy25 () us_rep7)

(declare-datatypes ()
((keypartt__ref (mk_keypartt__ref (keypartt__content us_rep7)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep7 (keypartt__content
                                                                   a))

(declare-datatypes ()
((us_split_fields16
 (mk___split_fields8
 (rec__cert__id__contentst__id us_rep1)(rec__cert__id__contentst__notbefore us_rep2)(rec__cert__id__contentst__notafter us_rep2)(rec__cert__id__contentst__mechanism algorithmt)(rec__cert__id__contentst__subject us_rep)(rec__cert__id__contentst__subjectpublickey us_rep7)))))
(define-fun us_split_fields_ID6__projection ((a us_split_fields16)) us_rep1 
  (rec__cert__id__contentst__id a))

(define-fun us_split_fields_NotBefore4__projection ((a us_split_fields16)) us_rep2 
  (rec__cert__id__contentst__notbefore a))

(define-fun us_split_fields_NotAfter4__projection ((a us_split_fields16)) us_rep2 
  (rec__cert__id__contentst__notafter a))

(define-fun us_split_fields_Mechanism4__projection ((a us_split_fields16)) algorithmt 
  (rec__cert__id__contentst__mechanism a))

(define-fun us_split_fields_Subject__projection ((a us_split_fields16)) us_rep 
  (rec__cert__id__contentst__subject a))

(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields16)) us_rep7 
  (rec__cert__id__contentst__subjectpublickey a))

(declare-datatypes ()
((us_split_fields__ref8
 (mk___split_fields__ref8 (us_split_fields__content8 us_split_fields16)))))
(define-fun us_split_fields__ref_13__projection ((a us_split_fields__ref8)) us_split_fields16 
  (us_split_fields__content8 a))

(declare-datatypes ()
((us_rep8 (mk___rep8 (us_split_fields17 us_split_fields16)))))
(define-fun us_rep_14__projection ((a us_rep8)) us_split_fields16 (us_split_fields17
                                                                  a))

(define-fun bool_eq26 ((a us_rep8)
  (b us_rep8)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq9
                            (rec__cert__id__contentst__id
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__id
                            (us_split_fields17 b))) true)
                         (= (bool_eq16
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields17 b))) true))
                         (= (bool_eq16
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__notafter
                            (us_split_fields17 b))) true))
                         (= (to_rep5
                            (rec__cert__id__contentst__mechanism
                            (us_split_fields17 a))) (to_rep5
                                                    (rec__cert__id__contentst__mechanism
                                                    (us_split_fields17 b)))))
                         (= (bool_eq7
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subject
                            (us_split_fields17 b))) true))
                         (= (bool_eq25
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 a))
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields17 b))) true))
                    true false))

(declare-fun user_eq26 (us_rep8 us_rep8) Bool)

(declare-fun value__size10 () Int)

(declare-fun object__size10 (us_rep8) Int)

(declare-fun value__alignment10 () Int)

(declare-fun object__alignment10 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment10 a))))

(declare-fun cert__id__contentst__id__first__bit () Int)

(declare-fun cert__id__contentst__id__last__bit () Int)

(declare-fun cert__id__contentst__id__position () Int)

;; cert__id__contentst__id__first__bit_axiom
  (assert (<= 0 cert__id__contentst__id__first__bit))

;; cert__id__contentst__id__last__bit_axiom
  (assert
  (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))

;; cert__id__contentst__id__position_axiom
  (assert (<= 0 cert__id__contentst__id__position))

(declare-fun cert__id__contentst__notbefore__first__bit () Int)

(declare-fun cert__id__contentst__notbefore__last__bit () Int)

(declare-fun cert__id__contentst__notbefore__position () Int)

;; cert__id__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notbefore__first__bit))

;; cert__id__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))

;; cert__id__contentst__notbefore__position_axiom
  (assert (<= 0 cert__id__contentst__notbefore__position))

(declare-fun cert__id__contentst__notafter__first__bit () Int)

(declare-fun cert__id__contentst__notafter__last__bit () Int)

(declare-fun cert__id__contentst__notafter__position () Int)

;; cert__id__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notafter__first__bit))

;; cert__id__contentst__notafter__last__bit_axiom
  (assert
  (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))

;; cert__id__contentst__notafter__position_axiom
  (assert (<= 0 cert__id__contentst__notafter__position))

(declare-fun cert__id__contentst__mechanism__first__bit () Int)

(declare-fun cert__id__contentst__mechanism__last__bit () Int)

(declare-fun cert__id__contentst__mechanism__position () Int)

;; cert__id__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__id__contentst__mechanism__first__bit))

;; cert__id__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))

;; cert__id__contentst__mechanism__position_axiom
  (assert (<= 0 cert__id__contentst__mechanism__position))

(declare-fun cert__id__contentst__subject__first__bit () Int)

(declare-fun cert__id__contentst__subject__last__bit () Int)

(declare-fun cert__id__contentst__subject__position () Int)

;; cert__id__contentst__subject__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subject__first__bit))

;; cert__id__contentst__subject__last__bit_axiom
  (assert
  (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))

;; cert__id__contentst__subject__position_axiom
  (assert (<= 0 cert__id__contentst__subject__position))

(declare-fun cert__id__contentst__subjectpublickey__first__bit () Int)

(declare-fun cert__id__contentst__subjectpublickey__last__bit () Int)

(declare-fun cert__id__contentst__subjectpublickey__position () Int)

;; cert__id__contentst__subjectpublickey__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))

;; cert__id__contentst__subjectpublickey__last__bit_axiom
  (assert
  (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))

;; cert__id__contentst__subjectpublickey__position_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__position))

(declare-fun dummy26 () us_rep8)

(declare-datatypes ()
((contentst__ref3 (mk_contentst__ref3 (contentst__content3 us_rep8)))))
(define-fun contentst__ref_4__projection ((a contentst__ref3)) us_rep8 
  (contentst__content3 a))

(declare-fun cert_id_to_cert (us_rep8) us_rep3)

(declare-fun cert_id_to_cert__function_guard (us_rep3 us_rep8) Bool)

;; cert_id_to_cert__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool)
  (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun makedescription (us_t) (Array Int character))

(declare-fun makedescription__function_guard ((Array Int character)
  us_t) Bool)

;; makedescription__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun temp___String_Literal_1454 (tuple0) (Array Int character))

;; temp___String_Literal_1454__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 2)) 117))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 4)) 104))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 15)) 67))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 20)) 102))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 21)) 105))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 22)) 99))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 25)) 101))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 27)) 78))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 28)) 111))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 29)) 116))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 31)) 67))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 32)) 117))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 33)) 114))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 34)) 114))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 35)) 101))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 36)) 110))
     (= (to_rep (select (temp___String_Literal_1454 us_void_param) 37)) 116)) :pattern (
  (temp___String_Literal_1454 us_void_param)) )))

(declare-fun temp___String_Literal_1455 (tuple0) (Array Int character))

;; temp___String_Literal_1455__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 2)) 117))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 4)) 104))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 15)) 67))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 20)) 102))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 21)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 22)) 99))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 25)) 101))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 27)) 78))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 28)) 111))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 29)) 116))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 31)) 86))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 32)) 101))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 33)) 114))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 34)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 35)) 102))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 36)) 105))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 37)) 97))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 38)) 98))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 39)) 108))
     (= (to_rep (select (temp___String_Literal_1455 us_void_param) 40)) 101)) :pattern (
  (temp___String_Literal_1455 us_void_param)) )))

(declare-fun temp___String_Literal_1456 (tuple0) (Array Int character))

;; temp___String_Literal_1456__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 2)) 117))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 4)) 104))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 15)) 67))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 20)) 102))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 21)) 105))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 22)) 99))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 24)) 116))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 25)) 101))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 27)) 66))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 28)) 97))
     (= (to_rep (select (temp___String_Literal_1456 us_void_param) 29)) 100)) :pattern (
  (temp___String_Literal_1456 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_439 Int)
  (temp___is_init_436 Bool) (temp___skip_constant_437 Bool)
  (temp___do_toplevel_438 Bool)) Bool (=>
                                      (or (= temp___is_init_436 true)
                                      (<= 1 150)) (in_range7
                                      temp___expr_439)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

(define-fun dynamic_invariant5 ((temp___expr_341 Int)
  (temp___is_init_338 Bool) (temp___skip_constant_339 Bool)
  (temp___do_toplevel_340 Bool)) Bool (=>
                                      (or (= temp___is_init_338 true)
                                      (<= 1901 2099)) (in_range9
                                      temp___expr_341)))

(define-fun dynamic_invariant6 ((temp___expr_347 Int)
  (temp___is_init_344 Bool) (temp___skip_constant_345 Bool)
  (temp___do_toplevel_346 Bool)) Bool (=>
                                      (or (= temp___is_init_344 true)
                                      (<= 1 12)) (in_range10
                                      temp___expr_347)))

(define-fun dynamic_invariant7 ((temp___expr_353 Int)
  (temp___is_init_350 Bool) (temp___skip_constant_351 Bool)
  (temp___do_toplevel_352 Bool)) Bool (=>
                                      (or (= temp___is_init_350 true)
                                      (<= 1 31)) (in_range11
                                      temp___expr_353)))

(define-fun dynamic_invariant8 ((temp___expr_377 Int)
  (temp___is_init_374 Bool) (temp___skip_constant_375 Bool)
  (temp___do_toplevel_376 Bool)) Bool (=>
                                      (or (= temp___is_init_374 true)
                                      (<= 0 86399999)) (in_range12
                                      temp___expr_377)))

(define-fun dynamic_invariant9 ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 40)) (in_range4 temp___expr_179)))

(define-fun dynamic_invariant10 ((temp___expr_200 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)) Bool (=>
                                      (or (= temp___is_init_197 true)
                                      (<= 0 4294967295)) (in_range5
                                      temp___expr_200)))

(define-fun dynamic_invariant11 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 10)) (in_range8 temp___expr_218)))

(define-fun dynamic_invariant12 ((temp___expr_230 Int)
  (temp___is_init_227 Bool) (temp___skip_constant_228 Bool)
  (temp___do_toplevel_229 Bool)) Bool (=>
                                      (or (= temp___is_init_227 true)
                                      (<= 0 4294967295)) (in_range15
                                      temp___expr_230)))

(define-fun dynamic_invariant13 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 128)) (in_range16
                                      temp___expr_236)))

(define-fun dynamic_invariant14 ((temp___expr_885 Int)
  (temp___is_init_882 Bool) (temp___skip_constant_883 Bool)
  (temp___do_toplevel_884 Bool)) Bool (=>
                                      (or (= temp___is_init_882 true)
                                      (<= 0 3)) (in_range13 temp___expr_885)))

(define-fun dynamic_invariant15 ((temp___expr_897 Int)
  (temp___is_init_894 Bool) (temp___skip_constant_895 Bool)
  (temp___do_toplevel_896 Bool)) Bool (=>
                                      (or (= temp___is_init_894 true)
                                      (<= 0 5)) (in_range14 temp___expr_897)))

(define-fun dynamic_invariant16 ((temp___expr_321 Int)
  (temp___is_init_318 Bool) (temp___skip_constant_319 Bool)
  (temp___do_toplevel_320 Bool)) Bool (=>
                                      (or (= temp___is_init_318 true)
                                      (<= 0 4294967295)) (in_range6
                                      temp___expr_321)))

(declare-fun currenttime () us_private)

(declare-fun filestate () us_private)

(declare-fun state () us_private)

(declare-fun description () (Array Int character))

(declare-fun authvalid () Bool)

(declare-fun authcertcontents__split_fields () us_split_fields__ref6)

(declare-fun idcertcontents__split_fields () us_split_fields__ref8)

(declare-fun extractok () Bool)

(declare-fun verified () Bool)

(declare-fun current () Bool)

(declare-fun baseidmatches () Bool)

(declare-fun o () us_rep3)

(declare-fun o1 () us_rep4)

(declare-fun o2 () issueridt)

(declare-fun o3 () namecountt)

(declare-fun o4 () (Array Int character))

(declare-fun o5 () serialnumbert)

(declare-fun o6 () issueridt)

(declare-fun o7 () namecountt)

(declare-fun o8 () (Array Int character))

(declare-fun o9 () serialnumbert)

(declare-fun o10 () Bool)

(declare-fun o11 () us_rep3)

(declare-fun o12 () Bool)

(declare-fun filestate1 () us_private)

(declare-fun state1 () us_private)

(declare-fun authcertcontents__split_fields1 () us_split_fields12)

(declare-fun result () Bool)

(declare-fun extractok1 () Bool)

(declare-fun result1 () Bool)

(declare-fun verified1 () Bool)

(declare-fun result2 () bool__ref)

(declare-fun current1 () Bool)

(declare-fun result3 () bool__ref)

(declare-fun baseidmatches1 () Bool)

(declare-fun certfound () Bool)

(declare-fun authcertcontents__split_fields2 () us_split_fields12)

(declare-fun extractok2 () Bool)

(declare-fun result4 () bool__ref)

(declare-fun baseidmatches2 () Bool)

(declare-fun filestate2 () us_private)

(declare-fun state2 () us_private)

(declare-fun verified2 () Bool)

(declare-fun result5 () bool__ref)

(declare-fun current2 () Bool)

(declare-fun result6 () bool__ref)

(declare-fun authvalid1 () Bool)

(define-fun o13 () us_rep1 (mk___rep1
                           (mk___split_fields1
                           (mk___rep (mk___split_fields o6 o7 o8)) o9)))

(define-fun o14 () us_rep1 (mk___rep1
                           (mk___split_fields1
                           (mk___rep (mk___split_fields o2 o3 o4)) o5)))

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert (= result extractok))

;; H
  (assert (= extractok1 (of_int 0)))

;; H
  (assert (= result1 verified))

;; H
  (assert (= verified1 (of_int 0)))

;; H
  (assert (= result2 (mk_bool__ref current)))

;; H
  (assert (= current1 (of_int 0)))

;; H
  (assert (= result3 (mk_bool__ref baseidmatches)))

;; H
  (assert (= baseidmatches1 (of_int 0)))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and
  (= o1 (cert_attr_auth_to_cert_attr
        (mk___rep6
        (let ((subject authcertcontents__split_fields))
        authcertcontents__split_fields2))))
  (cert_attr_auth_to_cert_attr__function_guard o1
  (mk___rep6
  (let ((subject authcertcontents__split_fields))
  authcertcontents__split_fields2)))))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and (= o14 (thebasecert o1)) (thebasecert__function_guard o14 o1)))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and
  (= o (cert_id_to_cert
       (mk___rep8 (us_split_fields__content8 idcertcontents__split_fields))))
  (cert_id_to_cert__function_guard o
  (mk___rep8 (us_split_fields__content8 idcertcontents__split_fields)))))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and (= o13 (theid o)) (theid__function_guard o13 o)))))

;; H
  (assert
  (=> (= certfound true) (=> (= extractok2 true) (= o10 (bool_eq9 o13 o14)))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true) (= result4 (mk_bool__ref baseidmatches1)))))

;; H
  (assert
  (=> (= certfound true) (=> (= extractok2 true) (= baseidmatches2 o10))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and
  (= o11 (cert_attr_auth_to_cert
         (mk___rep6
         (let ((subject authcertcontents__split_fields))
         authcertcontents__split_fields2))))
  (cert_attr_auth_to_cert__function_guard o11
  (mk___rep6
  (let ((subject authcertcontents__split_fields))
  authcertcontents__split_fields2)))))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (and (= o12 (iscurrent o11 currenttime)) (iscurrent__function_guard 
  o12 o11 currenttime)))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true) (= result5 (mk_bool__ref current1)))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= current2 o12))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= baseidmatches2 baseidmatches1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= current2 current1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= verified2 verified1))))

;; H
  (assert
  (=> (= certfound true) (=> (not (= extractok2 true)) (= state2 state))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= filestate2 filestate))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= baseidmatches2 baseidmatches1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= current2 current1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= verified2 verified1))))

;; H
  (assert
  (=> (= certfound true) (=> (not (= extractok2 true)) (= state2 state1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= filestate2 filestate1))))

;; H
  (assert (=> (not (= certfound true)) (= baseidmatches2 baseidmatches1)))

;; H
  (assert (=> (not (= certfound true)) (= current2 current1)))

;; H
  (assert (=> (not (= certfound true)) (= verified2 verified1)))

;; H
  (assert (=> (not (= certfound true)) (= extractok2 extractok1)))

;; H
  (assert
  (=> (not (= certfound true))
  (= (let ((subject authcertcontents__split_fields))
     (mk___split_fields__ref6 authcertcontents__split_fields2)) authcertcontents__split_fields)))

;; H
  (assert (=> (not (= certfound true)) (= state2 state)))

;; H
  (assert (=> (not (= certfound true)) (= filestate2 filestate)))

;; H
  (assert (=> (not (= certfound true)) (= baseidmatches2 baseidmatches1)))

;; H
  (assert (=> (not (= certfound true)) (= current2 current1)))

;; H
  (assert (=> (not (= certfound true)) (= verified2 verified1)))

;; H
  (assert (=> (not (= certfound true)) (= extractok2 extractok1)))

;; H
  (assert
  (=> (not (= certfound true))
  (= authcertcontents__split_fields2 authcertcontents__split_fields1)))

;; H
  (assert (=> (not (= certfound true)) (= state2 state1)))

;; H
  (assert (=> (not (= certfound true)) (= filestate2 filestate1)))

;; H
  (assert (= result6 (mk_bool__ref authvalid)))

;; H
  (assert
  (= authvalid1 (ite (= (ite (= (ite (= (ite (= certfound true) extractok2 false) true) 
                                baseidmatches2 false) true) verified2 false) true) 
                current2 false)))

;; H
  (assert (= (bool_eq3 description 1 150 nodescription 1 150) true))

;; H
  (assert (not (not (= certfound true))))

;; H
  (assert (not (not (= extractok2 true))))

;; H
  (assert (not (not (= baseidmatches2 true))))

;; H
  (assert (= verified2 true))

;; H
  (assert (not (= current2 true)))

(assert
;; WP_parameter_def
 ;; File "admintoken.adb", line 242, characters 0-0
  (not (= (to_rep1 (first (mk 1 37))) 1)))
(check-sat)
