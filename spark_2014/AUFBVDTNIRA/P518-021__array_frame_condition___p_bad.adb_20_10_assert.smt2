;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-fun dummy1 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy2 () (Array Int integer))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) (Array Int integer))

(declare-fun set (map1 Int Int (Array Int integer)) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a (Array Int integer)))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a (Array Int integer)))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_133 Int)
                             (temp___idx_134 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_133)
                             (<= temp___idx_133 a__last))
                             (and (<= a__first_2 temp___idx_134)
                             (<= temp___idx_134 a__last_2)))
                             (= (bool_eq2
                                (get a temp___idx_133 temp___idx_134) 1 3
                                (get b
                                (+ (- b__first a__first) temp___idx_133)
                                (+ (- b__first_2 a__first_2) temp___idx_134))
                                1 3) true))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_133 Int) (temp___idx_134 Int))
  (=>
  (and (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (and (<= a__first_2 temp___idx_134) (<= temp___idx_134 a__last_2)))
  (= (bool_eq2 (get a temp___idx_133 temp___idx_134) 1 3
     (get b (+ (- b__first a__first) temp___idx_133)
     (+ (- b__first_2 a__first_2) temp___idx_134)) 1 3) true))))))))

(declare-fun dummy3 () map1)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (map1) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 (map1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq3 (map1 map1) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int map1))))))
(declare-fun slide2 ((Array Int map1) Int Int) (Array Int map1))

;; slide_eq
  (assert
  (forall ((a (Array Int map1)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int map1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int map1) Int Int (Array Int map1) Int
  Int) (Array Int map1))

;; concat_def
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (map1 Int) (Array Int map1))

;; singleton_def
  (assert
  (forall ((v map1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int map1)) (a__first Int) (a__last Int)
  (b (Array Int map1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_135 Int))
                           (=>
                           (and (<= a__first temp___idx_135)
                           (<= temp___idx_135 a__last))
                           (= (bool_eq3 (select a temp___idx_135) 1 3 1 3
                              (select b (+ (- b__first a__first) temp___idx_135))
                              1 3 1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_135 Int))
  (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last))
  (= (bool_eq3 (select a temp___idx_135) 1 3 1 3
     (select b (+ (- b__first a__first) temp___idx_135)) 1 3 1 3) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y () (Array Int map1))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y1 Int)) Bool (ite (= x y1) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes () ((t12b__ref (mk_t12b__ref (t12b__content integer)))))
(define-fun t12b__ref___projection ((a t12b__ref)) integer (t12b__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int map1))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int map1) (elts a))

(define-fun of_array ((a (Array Int map1)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int map1)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int map1)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int map1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int map1))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int map1))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int map1))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq6 ((x us_t)
  (y1 us_t)) Bool (bool_eq4 (elts x) (to_rep (first (rt x)))
                  (to_rep (last (rt x))) (elts y1) (to_rep (first (rt y1)))
                  (to_rep (last (rt y1)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-fun dummy5 () us_t)

(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content us_t)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t (t13b__content a))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq7 ((x Int) (y1 Int)) Bool (ite (= x y1) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int map1))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int map1) (elts1 a))

(define-fun of_array1 ((a (Array Int map1)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int map1)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int map1)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int map1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int map1))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int map1))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int map1))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq8 ((x us_t1)
  (y1 us_t1)) Bool (bool_eq4 (elts1 x) (to_rep (first2 (rt1 x)))
                   (to_rep (last2 (rt1 x))) (elts1 y1)
                   (to_rep (first2 (rt1 y1))) (to_rep (last2 (rt1 y1)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-fun dummy7 () us_t1)

(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))

(declare-fun p_bad__x__aggregate_def (map1) (Array Int map1))

;; def_axiom
  (assert
  (forall ((temp___219 map1))
  (forall ((temp___220 Int))
  (= (select (p_bad__x__aggregate_def temp___219) temp___220) temp___219))))

(declare-fun temp___221 ((Array Int integer)) map1)

;; def_axiom
  (assert
  (forall ((temp___223 (Array Int integer)))
  (forall ((temp___224 Int) (temp___225 Int))
  (= (get (temp___221 temp___223) temp___224 temp___225) temp___223))))

(declare-fun temp___226 (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___228 Int))
  (forall ((temp___229 Int))
  (= (select (temp___226 temp___228) temp___229) (of_rep temp___228)))))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_175 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)) Bool (=>
                                      (or (= temp___is_init_172 true)
                                      (<= 1 3)) (in_range2 temp___expr_175)))

(declare-fun x () (Array Int map1))

(declare-fun i3 () Int)

(declare-fun temp___247 () (Array Int map1))

(declare-fun temp___240 () (Array Int map1))

(declare-fun temp___233 () (Array Int map1))

(declare-fun o () integer)

(declare-fun o1 () (Array Int integer))

(declare-fun o2 () map1)

(declare-fun o3 () (Array Int map1))

(declare-fun result () (Array Int map1))

(declare-fun x1 () (Array Int map1))

(declare-fun result1 () Int)

(declare-fun i31 () Int)

(declare-fun x2 () (Array Int map1))

(declare-fun i32 () Int)

(declare-fun i21 () Int)

(declare-fun i22 () Int)

(declare-fun i1 () Int)

(declare-fun result2 () Int)

(declare-fun i211 () Int)

(declare-fun x3 () (Array Int map1))

(declare-fun i212 () Int)

(declare-fun i221 () Int)

(declare-fun i11 () Int)

(declare-fun result3 () Int)

(declare-fun i222 () Int)

(declare-fun x4 () (Array Int map1))

(declare-fun i223 () Int)

(declare-fun i12 () Int)

(declare-fun result4 () Int)

(declare-fun i13 () Int)

(declare-fun x5 () (Array Int map1))

(declare-fun i14 () Int)

(declare-fun result5 () (Array Int map1))

(declare-fun x6 () (Array Int map1))

(declare-fun x7 () (Array Int map1))

(declare-fun i15 () Int)

(declare-fun x8 () (Array Int map1))

(declare-fun i16 () Int)

(declare-fun x9 () (Array Int map1))

(declare-fun i17 () Int)

(declare-fun x10 () (Array Int map1))

(declare-fun i18 () Int)

(declare-fun x11 () map__ref2)

(declare-fun i224 () int__ref)

(declare-fun i19 () int__ref)

(declare-fun x12 () (Array Int map1))

(declare-fun i225 () Int)

(declare-fun i110 () Int)

(declare-fun x13 () map__ref2)

(declare-fun i226 () int__ref)

(declare-fun i111 () int__ref)

(declare-fun x14 () (Array Int map1))

(declare-fun i227 () Int)

(declare-fun i112 () Int)

(declare-fun x15 () map__ref2)

(declare-fun i213 () int__ref)

(declare-fun i228 () int__ref)

(declare-fun i113 () int__ref)

(declare-fun x16 () (Array Int map1))

(declare-fun i214 () Int)

(declare-fun i229 () Int)

(declare-fun i114 () Int)

(declare-fun x17 () map__ref2)

(declare-fun i215 () int__ref)

(declare-fun i2210 () int__ref)

(declare-fun i115 () int__ref)

(declare-fun x18 () (Array Int map1))

(declare-fun i216 () Int)

(declare-fun i2211 () Int)

(declare-fun i116 () Int)

(define-fun i117 () int__ref (mk_int__ref i17))

(define-fun x19 () map__ref2 (mk_map__ref2 x9))

;; H
  (assert (= result x))

;; H
  (assert (= x1 (p_bad__x__aggregate_def (temp___221 (temp___226 0)))))

;; H
  (assert (= x1 y))

;; H
  (assert (= result1 i3))

;; H
  (assert (= i31 1))

;; H
  (assert (<= 1 i31))

;; H
  (assert (<= i31 3))

;; H
  (assert
  (and
  (forall ((temp___263 Int))
  (=> (and (<= 1 temp___263) (<= temp___263 3))
  (=> (<= i32 temp___263) (= (select x2 temp___263) (select x1 temp___263)))))
  (and (<= 1 i32) (<= i32 3))))

;; H
  (assert (= result2 i21))

;; H
  (assert (= i211 1))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= temp___247 x2)))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (and
  (forall ((temp___248 Int))
  (=> (and (<= 1 temp___248) (<= temp___248 3))
  (ite (not (= i32 temp___248))
  (= (select x3 temp___248) (select temp___247 temp___248))
  (forall ((temp___249 Int) (temp___250 Int))
  (=>
  (and (and (<= 1 temp___249) (<= temp___249 3))
  (and (<= 1 temp___250) (<= temp___250 3)))
  (=> (<= i212 temp___249)
  (= (get (select x3 temp___248) temp___249 temp___250) (get
                                                        (select temp___247 temp___248)
                                                        temp___249
                                                        temp___250))))))))
  (and (<= 1 i212) (<= i212 3)))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= result3 i221)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i222 1)))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= temp___240 x3))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (and
  (forall ((temp___241 Int))
  (=> (and (<= 1 temp___241) (<= temp___241 3))
  (ite (not (= i32 temp___241))
  (= (select x4 temp___241) (select temp___240 temp___241))
  (forall ((temp___242 Int) (temp___243 Int))
  (=>
  (and (and (<= 1 temp___242) (<= temp___242 3))
  (and (<= 1 temp___243) (<= temp___243 3)))
  (=> (or (<= i223 temp___243) (not (= i212 temp___242)))
  (= (get (select x4 temp___241) temp___242 temp___243) (get
                                                        (select temp___240 temp___241)
                                                        temp___242
                                                        temp___243))))))))
  (and (<= 1 i223) (<= i223 3))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= result4 i12))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i13 1))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= temp___233 x4)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3))
  (and
  (forall ((temp___234 Int))
  (=> (and (<= 1 temp___234) (<= temp___234 3))
  (ite (not (= i32 temp___234))
  (= (select x5 temp___234) (select temp___233 temp___234))
  (forall ((temp___235 Int) (temp___236 Int))
  (=>
  (and (and (<= 1 temp___235) (<= temp___235 3))
  (and (<= 1 temp___236) (<= temp___236 3)))
  (ite (or (not (= i223 temp___236)) (not (= i212 temp___235)))
  (= (get (select x5 temp___234) temp___235 temp___236) (get
                                                        (select temp___233 temp___234)
                                                        temp___235
                                                        temp___236))
  (forall ((temp___237 Int))
  (=> (and (<= 1 temp___237) (<= temp___237 3))
  (=> (<= i14 temp___237)
  (= (select (get (select x5 temp___234) temp___235 temp___236) temp___237) (select 
  (get (select temp___233 temp___234) temp___235 temp___236) temp___237)))))))))))
  (and (<= 1 i14) (<= i14 3)))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= (to_rep o) 1)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3))
  (= o1 (store (get (select x5 i32) i212 i223) i14 o))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= o2 (set (select x5 i32) i212 i223 o1))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= o3 (store x5 i32 o2))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= result5 x5)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= x6 o3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= i14 3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= i14 i15)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= x6 x7)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= i16 i14)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= x8 x6)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= i117 (mk_int__ref i15))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= x19 (mk_map__ref2 x7))))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= i18 i16)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (and (<= 1 i13) (<= i13 3)) (= x10 x8)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= i13 i17)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= x4 x9)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= i18 i13)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3))
  (=> (not (and (<= 1 i13) (<= i13 3))) (= x10 x4)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i223 3))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i19 i117))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i224 (mk_int__ref i223)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= x11 x19))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i110 i18))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i225 i223))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= x12 x10))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i111 i19))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i226 i224))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= x13 x11))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i112 i110))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= i227 i225))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (and (<= 1 i222) (<= i222 3)) (= x14 x12))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= i111 (mk_int__ref i11)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= i226 (mk_int__ref i222)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= x13 (mk_map__ref2 x3)))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= i112 i11))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= i227 i222))))

;; H
  (assert
  (=> (and (<= 1 i211) (<= i211 3))
  (=> (not (and (<= 1 i222) (<= i222 3))) (= x14 x3))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i212 3)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i113 i111)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i228 i226)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i213 (mk_int__ref i212))))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x15 x13)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i114 i112)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i229 i227)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i214 i212)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x16 x14)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i115 i113)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i2210 i228)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i215 i213)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x17 x15)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i116 i114)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i2211 i229)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= i216 i214)))

;; H
  (assert (=> (and (<= 1 i211) (<= i211 3)) (= x18 x16)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i115 (mk_int__ref i1))))

;; H
  (assert
  (=> (not (and (<= 1 i211) (<= i211 3))) (= i2210 (mk_int__ref i22))))

;; H
  (assert
  (=> (not (and (<= 1 i211) (<= i211 3))) (= i215 (mk_int__ref i211))))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= x17 (mk_map__ref2 x2))))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i116 i1)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i2211 i22)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= i216 i211)))

;; H
  (assert (=> (not (and (<= 1 i211) (<= i211 3))) (= x18 x2)))

(assert
;; WP_parameter_def
 ;; File "p_bad.adb", line 1, characters 0-0
  (not
  (= (bool_eq4 (map__content2 x17) (to_rep (first (mk i32 3)))
     (to_rep (last (mk i32 3))) y (to_rep (first2 (mk1 i32 3)))
     (to_rep (last2 (mk1 i32 3)))) true)))
(check-sat)
