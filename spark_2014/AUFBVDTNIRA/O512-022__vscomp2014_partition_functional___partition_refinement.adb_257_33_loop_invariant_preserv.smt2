;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-fun dummy () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep (positive) Int)

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy1 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_count 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_count index_count) Bool)

(declare-fun dummy2 () index_count)

(declare-datatypes ()
((index_count__ref (mk_index_count__ref (index_count__content index_count)))))
(define-fun index_count__ref___projection ((a index_count__ref)) index_count 
  (index_count__content a))

(declare-fun to_rep1 (index_count) Int)

(declare-fun of_rep1 (Int) index_count)

;; inversion_axiom
  (assert
  (forall ((x index_count))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x index_count)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index index) Bool)

(declare-fun dummy3 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-fun to_rep2 (index) Int)

(declare-fun of_rep2 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int positive) Int Int (Array Int positive) Int
  Int) (Array Int positive))

;; concat_def
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (positive Int) (Array Int positive))

;; singleton_def
  (assert
  (forall ((v positive))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int positive) Int Int (Array Int positive) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (count_type count_type) Bool)

(declare-fun dummy4 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(declare-fun to_rep3 (count_type) Int)

(declare-fun of_rep3 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__partition_refinement__partitioning_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields)) count_type 
  (rec__partition_refinement__partitioning_sets__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_9__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq6 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep3
                           (rec__partition_refinement__partitioning_sets__cursor__node
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__partition_refinement__partitioning_sets__cursor__node
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun partition_refinement__partitioning_sets__cursor__node__first__bit () Int)

(declare-fun partition_refinement__partitioning_sets__cursor__node__last__bit () Int)

(declare-fun partition_refinement__partitioning_sets__cursor__node__position () Int)

;; partition_refinement__partitioning_sets__cursor__node__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__cursor__node__first__bit))

;; partition_refinement__partitioning_sets__cursor__node__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__cursor__node__first__bit 
  partition_refinement__partitioning_sets__cursor__node__last__bit))

;; partition_refinement__partitioning_sets__cursor__node__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__cursor__node__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content
                                                              a))

(define-fun default_initial_assumption ((temp___expr_332 us_rep)
  (temp___skip_top_level_333 Bool)) Bool (= (to_rep3
                                            (rec__partition_refinement__partitioning_sets__cursor__node
                                            (us_split_fields1
                                            temp___expr_332))) 0))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__partition_refinement__partitioning_sets__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type 
  (rec__partition_refinement__partitioning_sets__list__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__partition_refinement__partitioning_sets__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields2)) us_main_type 
  (rec__partition_refinement__partitioning_sets__list a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_7__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep3
                            (rec__partition_refinement__partitioning_sets__list__capacity
                            (us_split_discrs1 a))) (to_rep3
                                                   (rec__partition_refinement__partitioning_sets__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__partition_refinement__partitioning_sets__list
                            (us_split_fields3 a))
                            (rec__partition_refinement__partitioning_sets__list
                            (us_split_fields3 b))) true))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun partition_refinement__partitioning_sets__list__capacity__first__bit () Int)

(declare-fun partition_refinement__partitioning_sets__list__capacity__last__bit () Int)

(declare-fun partition_refinement__partitioning_sets__list__capacity__position () Int)

;; partition_refinement__partitioning_sets__list__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__first__bit))

;; partition_refinement__partitioning_sets__list__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__list__capacity__first__bit 
  partition_refinement__partitioning_sets__list__capacity__last__bit))

;; partition_refinement__partitioning_sets__list__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__position))

(declare-fun dummy6 () us_rep1)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep1)))))
(define-fun list__ref___projection ((a list__ref)) us_rep1 (list__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq8 (us_rep2 us_rep2) Bool)

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy7 () us_rep2)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref___projection ((a map__ref1)) us_rep2 (map__content1 a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep (key_type__content
                                                                  a))

(declare-fun has_key (us_rep2 us_rep) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep) Bool)

(declare-fun positions (us_rep1) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep1) Bool)

(define-fun has_element ((container us_rep1)
  (position us_rep)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq9 (us_rep3 us_rep3) Bool)

(declare-fun user_eq8 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun dummy8 () us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get (us_rep3 Int) Int)

(declare-fun get__function_guard (Int us_rep3 Int) Bool)

(declare-fun get1 (us_rep2 us_rep) Int)

(declare-fun get__function_guard1 (Int us_rep2 us_rep) Bool)

(declare-fun model__ (us_rep1) us_rep3)

(declare-fun model____function_guard (us_rep3 us_rep1) Bool)

(define-fun element ((container us_rep1)
  (position us_rep)) Int (get (model__ container)
                         (get1 (positions container) position)))

(declare-fun element__function_guard (Int us_rep1 us_rep) Bool)

(declare-sort element_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (element_type element_type) Bool)

(declare-fun dummy9 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_320 Int)
  (temp___is_init_317 Bool) (temp___skip_constant_318 Bool)
  (temp___do_toplevel_319 Bool)) Bool (=>
                                      (or (= temp___is_init_317 true)
                                      (<= 1 2147483647)) (in_range6
                                      temp___expr_320)))

(declare-fun no_element () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun first (us_rep1) us_rep)

(declare-fun first__function_guard (us_rep us_rep1) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq6 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-fun partition_refinement__partitioning_sets__list__capacity__first__bit1 () Int)

(declare-fun partition_refinement__partitioning_sets__list__capacity__last__bit1 () Int)

(declare-fun partition_refinement__partitioning_sets__list__capacity__position1 () Int)

;; partition_refinement__partitioning_sets__list__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__first__bit1))

;; partition_refinement__partitioning_sets__list__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__list__capacity__first__bit1 
  partition_refinement__partitioning_sets__list__capacity__last__bit1))

;; partition_refinement__partitioning_sets__list__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__position1))

(declare-fun dummy10 () us_rep1)

(declare-datatypes ()
((partitioning_set__ref
 (mk_partitioning_set__ref (partitioning_set__content us_rep1)))))
(define-fun partitioning_set__ref___projection ((a partitioning_set__ref)) us_rep1 
  (partitioning_set__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__partition_refinement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node2__projection ((a us_split_fields4)) count_type 
  (rec__partition_refinement__inverse_sets__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_12__projection ((a us_rep4)) us_split_fields4 (us_split_fields5
                                                                 a))

(define-fun bool_eq11 ((a us_rep4)
  (b us_rep4)) Bool (ite (= (to_rep3
                            (rec__partition_refinement__inverse_sets__cursor__node
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__partition_refinement__inverse_sets__cursor__node
                                                   (us_split_fields5 b))))
                    true false))

(declare-fun user_eq10 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun partition_refinement__inverse_sets__cursor__node__first__bit () Int)

(declare-fun partition_refinement__inverse_sets__cursor__node__last__bit () Int)

(declare-fun partition_refinement__inverse_sets__cursor__node__position () Int)

;; partition_refinement__inverse_sets__cursor__node__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__cursor__node__first__bit))

;; partition_refinement__inverse_sets__cursor__node__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__cursor__node__first__bit partition_refinement__inverse_sets__cursor__node__last__bit))

;; partition_refinement__inverse_sets__cursor__node__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__cursor__node__position))

(declare-fun dummy11 () us_rep4)

(declare-datatypes ()
((cursor__ref1 (mk_cursor__ref1 (cursor__content1 us_rep4)))))
(define-fun cursor__ref_2__projection ((a cursor__ref1)) us_rep4 (cursor__content1
                                                                 a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1
 (rec__partition_refinement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) count_type 
  (rec__partition_refinement__inverse_sets__map__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__partition_refinement__inverse_sets__map us_main_type3)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields6)) us_main_type3 
  (rec__partition_refinement__inverse_sets__map a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep5
 (mk___rep3
 (us_split_discrs3 us_split_discrs2)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep_10__projection ((a us_rep5)) us_split_discrs2 (us_split_discrs3
                                                                 a))

(define-fun us_rep_11__projection ((a us_rep5)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq12 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep3
                            (rec__partition_refinement__inverse_sets__map__capacity
                            (us_split_discrs3 a))) (to_rep3
                                                   (rec__partition_refinement__inverse_sets__map__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq3
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields7 a))
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields7 b))) true))
                    true false))

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep5) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment6 a))))

(declare-fun partition_refinement__inverse_sets__map__capacity__first__bit () Int)

(declare-fun partition_refinement__inverse_sets__map__capacity__last__bit () Int)

(declare-fun partition_refinement__inverse_sets__map__capacity__position () Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit partition_refinement__inverse_sets__map__capacity__last__bit))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__map__capacity__position))

(declare-fun dummy12 () us_rep5)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep5)))))
(define-fun map__ref_2__projection ((a map__ref2)) us_rep5 (map__content2 a))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-sort us_rep6 0)

(declare-fun bool_eq13 (us_rep6 us_rep6) Bool)

(declare-fun user_eq12 (us_rep6 us_rep6) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep6) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))

(declare-fun dummy13 () us_rep6)

(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 us_rep6)))))
(define-fun map__ref_4__projection ((a map__ref3)) us_rep6 (map__content3 a))

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep4)))))
(define-fun key_type__ref_4__projection ((a key_type__ref1)) us_rep4 
  (key_type__content1 a))

(declare-fun has_key1 (us_rep6 us_rep4) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep6 us_rep4) Bool)

(declare-fun positions1 (us_rep5) us_rep6)

(declare-fun positions__function_guard1 (us_rep6 us_rep5) Bool)

(define-fun has_element1 ((container us_rep5)
  (position us_rep4)) Bool (has_key1 (positions1 container) position))

(declare-fun has_element__function_guard1 (Bool us_rep5 us_rep4) Bool)

(declare-fun has_element2 (Int us_rep5 us_rep4) Bool)

(declare-fun has_element__function_guard2 (Bool Int us_rep5 us_rep4) Bool)

(declare-fun oeq (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard (Bool us_rep5 us_rep5) Bool)

(declare-fun oeq1 (Int us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep5 us_rep5) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)) )))

;; has_element__post__dispatch_axiom
  (assert true)

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq14 (us_rep7 us_rep7) Bool)

(declare-fun user_eq13 (us_rep7 us_rep7) Bool)

(declare-fun value__size8 () Int)

(declare-fun object__size8 (us_rep7) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment8 a))))

(declare-fun dummy14 () us_rep7)

(declare-datatypes ()
((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref_2__projection ((a sequence__ref1)) us_rep7 
  (sequence__content1 a))

(declare-fun get2 (us_rep7 Int) Int)

(declare-fun get__function_guard2 (Int us_rep7 Int) Bool)

(declare-fun get3 (us_rep6 us_rep4) Int)

(declare-fun get__function_guard3 (Int us_rep6 us_rep4) Bool)

(declare-fun keys (us_rep5) us_rep7)

(declare-fun keys__function_guard (us_rep7 us_rep5) Bool)

(define-fun key ((container us_rep5)
  (position us_rep4)) Int (get2 (keys container)
                          (get3 (positions1 container) position)))

(declare-fun key__function_guard (Int us_rep5 us_rep4) Bool)

(declare-fun key1 (Int us_rep5 us_rep4) Int)

(declare-fun key__function_guard1 (Int Int us_rep5 us_rep4) Bool)

(declare-sort key_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (key_type key_type) Bool)

(declare-fun dummy15 () key_type)

(declare-datatypes ()
((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type)))))
(define-fun key_type__ref_2__projection ((a key_type__ref2)) key_type 
  (key_type__content2 a))

(define-fun dynamic_invariant1 ((temp___expr_497 Int)
  (temp___is_init_494 Bool) (temp___skip_constant_495 Bool)
  (temp___do_toplevel_496 Bool)) Bool (=>
                                      (or (= temp___is_init_494 true)
                                      (<= 1 2147483647)) (in_range7
                                      temp___expr_497)))

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep5))
  (forall ((position us_rep4)) (! (dynamic_invariant1
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

(declare-sort us_main_type6 0)

(declare-fun us_main_eq6 (us_main_type6 us_main_type6) Bool)

(declare-sort us_rep8 0)

(declare-fun bool_eq16 (us_rep8 us_rep8) Bool)

(declare-fun user_eq15 (us_rep8 us_rep8) Bool)

(declare-fun value__size9 () Int)

(declare-fun object__size9 (us_rep8) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment9 a))))

(declare-fun dummy16 () us_rep8)

(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 us_rep8)))))
(define-fun map__ref_3__projection ((a map__ref4)) us_rep8 (map__content4 a))

(declare-fun get4 (us_rep8 Int) Int)

(declare-fun get__function_guard4 (Int us_rep8 Int) Bool)

(declare-fun model__1 (us_rep5) us_rep8)

(declare-fun model____function_guard1 (us_rep8 us_rep5) Bool)

(define-fun element1 ((container us_rep5)
  (position us_rep4)) Int (get4 (model__1 container)
                          (key container position)))

(declare-fun element__function_guard1 (Int us_rep5 us_rep4) Bool)

(declare-fun element2 (Int us_rep5 us_rep4) Int)

(declare-fun element__function_guard2 (Int Int us_rep5 us_rep4) Bool)

(declare-sort element_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq17 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq16 (element_type1 element_type1) Bool)

(declare-fun dummy17 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_4__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_503 Int)
  (temp___is_init_500 Bool) (temp___skip_constant_501 Bool)
  (temp___do_toplevel_502 Bool)) Bool (=>
                                      (or (= temp___is_init_500 true)
                                      (<= 0 5)) (in_range8 temp___expr_503)))

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep5))
  (forall ((position us_rep4)) (! (dynamic_invariant2
  (element2 attr__tag container position) true false
  true) :pattern ((element2 attr__tag container position)) )))))

(declare-fun has_key2 (us_rep8 Int) Bool)

(declare-fun has_key__function_guard2 (Bool us_rep8 Int) Bool)

(define-fun contains ((container us_rep5)
  (key2 Int)) Bool (has_key2 (model__1 container) key2))

(declare-fun contains__function_guard (Bool us_rep5 Int) Bool)

(declare-fun contains1 (Int us_rep5 Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep5 Int) Bool)

;; contains__post__dispatch_axiom
  (assert true)

(declare-fun find (us_rep5 Int) us_rep4)

(declare-fun find__function_guard (us_rep4 us_rep5 Int) Bool)

(declare-fun find1 (Int us_rep5 Int) us_rep4)

(declare-fun find__function_guard1 (us_rep4 Int us_rep5 Int) Bool)

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-fun no_element1 () us_rep4)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun find2 (us_rep7 Int) Int)

(declare-fun find__function_guard2 (Int us_rep7 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant1 key2 true true true)
     (let ((result (find container key2)))
     (ite (not (= (has_key2 (model__1 container) key2) true))
     (and (not (= (has_key1 (positions1 container) result) true))
     (= (bool_eq11 result no_element1) true))
     (and
     (and (= (has_key1 (positions1 container) result) true)
     (= (get3 (positions1 container) result) (find2 (keys container) key2)))
     (= (equivalent_keys (key container result) key2) true))))) :pattern (
  (find container key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-fun value__size10 () Int)

(declare-fun object__size10 (us_rep5) Int)

(declare-fun value__alignment10 () Int)

(declare-fun object__alignment10 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment10 a))))

(declare-fun partition_refinement__inverse_sets__map__capacity__first__bit1 () Int)

(declare-fun partition_refinement__inverse_sets__map__capacity__last__bit1 () Int)

(declare-fun partition_refinement__inverse_sets__map__capacity__position1 () Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit1))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit1 partition_refinement__inverse_sets__map__capacity__last__bit1))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__position1))

(declare-fun dummy18 () us_rep5)

(declare-datatypes ()
((inverse_set__ref (mk_inverse_set__ref (inverse_set__content us_rep5)))))
(define-fun inverse_set__ref___projection ((a inverse_set__ref)) us_rep5 
  (inverse_set__content a))

(declare-sort partition_index 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq18 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq17 (partition_index partition_index) Bool)

(declare-fun dummy19 () partition_index)

(declare-datatypes ()
((partition_index__ref
 (mk_partition_index__ref (partition_index__content partition_index)))))
(define-fun partition_index__ref___projection ((a partition_index__ref)) partition_index 
  (partition_index__content a))

(declare-fun to_rep4 (partition_index) Int)

(declare-fun of_rep4 (Int) partition_index)

;; inversion_axiom
  (assert
  (forall ((x partition_index))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x partition_index)) (! (in_range9
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort index_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq19 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq18 (index_type index_type) Bool)

(declare-fun dummy20 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref_3__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__partition_refinement__interval__first index)(rec__partition_refinement__interval__last index)(rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_First__projection ((a us_split_fields8)) index 
  (rec__partition_refinement__interval__first a))

(define-fun us_split_fields_Last__projection ((a us_split_fields8)) index 
  (rec__partition_refinement__interval__last a))

(define-fun us_split_fields_Count__projection ((a us_split_fields8)) index_count 
  (rec__partition_refinement__interval__count a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep9 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_13__projection ((a us_rep9)) us_split_fields8 (us_split_fields9
                                                                 a))

(define-fun bool_eq20 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__partition_refinement__interval__first
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__partition_refinement__interval__first
                                                   (us_split_fields9 b))))
                         (= (to_rep2
                            (rec__partition_refinement__interval__last
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__partition_refinement__interval__last
                                                   (us_split_fields9 b)))))
                         (= (to_rep1
                            (rec__partition_refinement__interval__count
                            (us_split_fields9 a))) (to_rep1
                                                   (rec__partition_refinement__interval__count
                                                   (us_split_fields9 b)))))
                    true false))

(declare-fun user_eq19 (us_rep9 us_rep9) Bool)

(declare-fun value__size11 () Int)

(declare-fun object__size11 (us_rep9) Int)

(declare-fun value__alignment11 () Int)

(declare-fun object__alignment11 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size11 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment11 a))))

(declare-fun partition_refinement__interval__first__first__bit () Int)

(declare-fun partition_refinement__interval__first__last__bit () Int)

(declare-fun partition_refinement__interval__first__position () Int)

;; partition_refinement__interval__first__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__first__first__bit))

;; partition_refinement__interval__first__last__bit_axiom
  (assert
  (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))

;; partition_refinement__interval__first__position_axiom
  (assert (<= 0 partition_refinement__interval__first__position))

(declare-fun partition_refinement__interval__last__first__bit () Int)

(declare-fun partition_refinement__interval__last__last__bit () Int)

(declare-fun partition_refinement__interval__last__position () Int)

;; partition_refinement__interval__last__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__last__first__bit))

;; partition_refinement__interval__last__last__bit_axiom
  (assert
  (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))

;; partition_refinement__interval__last__position_axiom
  (assert (<= 0 partition_refinement__interval__last__position))

(declare-fun partition_refinement__interval__count__first__bit () Int)

(declare-fun partition_refinement__interval__count__last__bit () Int)

(declare-fun partition_refinement__interval__count__position () Int)

;; partition_refinement__interval__count__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__count__first__bit))

;; partition_refinement__interval__count__last__bit_axiom
  (assert
  (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))

;; partition_refinement__interval__count__position_axiom
  (assert (<= 0 partition_refinement__interval__count__position))

(declare-fun dummy21 () us_rep9)

(declare-datatypes ()
((interval__ref (mk_interval__ref (interval__content us_rep9)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep9 (interval__content
                                                                   a))

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 us_rep9)))))
(define-fun element_type__ref_8__projection ((a element_type__ref2)) us_rep9 
  (element_type__content2 a))

(declare-sort capacity_range 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))

(define-fun bool_eq21 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq20 (capacity_range capacity_range) Bool)

(declare-fun dummy22 () capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-fun to_rep5 (capacity_range) Int)

(declare-fun of_rep5 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range11
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(declare-sort us_main_type7 0)

(declare-fun us_main_eq7 (us_main_type7 us_main_type7) Bool)

(declare-datatypes ()
((us_split_discrs4
 (mk___split_discrs2
 (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs4)) capacity_range 
  (rec__partition_refinement__partitions__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref2
 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ()
((us_split_fields10
 (mk___split_fields5
 (rec__partition_refinement__partitions__vector us_main_type7)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields10)) us_main_type7 
  (rec__partition_refinement__partitions__vector a))

(declare-datatypes ()
((us_split_fields__ref5
 (mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep10
 (mk___rep5
 (us_split_discrs5 us_split_discrs4)(us_split_fields11 us_split_fields10)))))
(define-fun us_rep_14__projection ((a us_rep10)) us_split_discrs4 (us_split_discrs5
                                                                  a))

(define-fun us_rep_15__projection ((a us_rep10)) us_split_fields10 (us_split_fields11
                                                                   a))

(declare-fun user_eq21 (us_rep10 us_rep10) Bool)

(declare-fun value__size12 () Int)

(declare-fun object__size12 (us_rep10) Int)

(declare-fun value__alignment12 () Int)

(declare-fun object__alignment12 (us_rep10) Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__size12 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

;; object__alignment_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__alignment12 a))))

(declare-fun partition_refinement__partitions__vector__capacity__first__bit () Int)

(declare-fun partition_refinement__partitions__vector__capacity__last__bit () Int)

(declare-fun partition_refinement__partitions__vector__capacity__position () Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position))

(declare-fun dummy23 () us_rep10)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep10)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep10 (vector__content
                                                                a))

(define-fun capacity ((container us_rep10)) Int (ite (= (of_int 1) true)
                                                (to_rep5
                                                (rec__partition_refinement__partitions__vector__capacity
                                                (us_split_discrs5 container)))
                                                10001))

(declare-fun capacity__function_guard (Int us_rep10) Bool)

(define-fun dynamic_invariant3 ((temp___expr_733 Int)
  (temp___is_init_730 Bool) (temp___skip_constant_731 Bool)
  (temp___do_toplevel_732 Bool)) Bool (=>
                                      (or (= temp___is_init_730 true)
                                      (<= 0 10001)) (in_range11
                                      temp___expr_733)))

(declare-fun length1 (us_rep10) Int)

(declare-fun length__function_guard1 (Int us_rep10) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep10))
  (! (let ((result (length1 container)))
     (and (<= result (capacity container)) (dynamic_invariant3 result true
     false true))) :pattern ((length1 container)) )))

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 us_rep9)))))
(define-fun element_type__ref_9__projection ((a element_type__ref3)) us_rep9 
  (element_type__content3 a))

(declare-sort us_main_type8 0)

(declare-fun us_main_eq8 (us_main_type8 us_main_type8) Bool)

(declare-sort us_rep11 0)

(declare-fun bool_eq22 (us_rep11 us_rep11) Bool)

(declare-fun user_eq22 (us_rep11 us_rep11) Bool)

(declare-fun value__size13 () Int)

(declare-fun object__size13 (us_rep11) Int)

(declare-fun value__alignment13 () Int)

(declare-fun object__alignment13 (us_rep11) Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__size13 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

;; object__alignment_axiom
  (assert (forall ((a us_rep11)) (<= 0 (object__alignment13 a))))

(declare-fun dummy24 () us_rep11)

(declare-datatypes ()
((sequence__ref2 (mk_sequence__ref2 (sequence__content2 us_rep11)))))
(define-fun sequence__ref_3__projection ((a sequence__ref2)) us_rep11 
  (sequence__content2 a))

(declare-fun get5 (us_rep11 Int) us_rep9)

(declare-fun get__function_guard5 (us_rep9 us_rep11 Int) Bool)

(declare-fun model__2 (us_rep10) us_rep11)

(declare-fun model____function_guard2 (us_rep11 us_rep10) Bool)

(define-fun element3 ((container us_rep10)
  (index1 Int)) us_rep9 (get5 (model__2 container) index1))

(declare-fun element__function_guard3 (us_rep9 us_rep10 Int) Bool)

(declare-fun length2 (us_rep11) Int)

(declare-fun length__function_guard2 (Int us_rep11) Bool)

(define-fun last ((container us_rep11)) Int (+ (- 1) (length2 container)))

(declare-fun last__function_guard (Int us_rep11) Bool)

(define-fun last_index ((container us_rep10)) Int (last (model__2 container)))

(declare-fun last_index__function_guard (Int us_rep10) Bool)

(declare-fun first_index__function_guard (Int us_rep10) Bool)

(declare-fun value__size14 () Int)

(declare-fun object__size14 (us_rep10) Int)

(declare-fun value__alignment14 () Int)

(declare-fun object__alignment14 (us_rep10) Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__size14 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

;; object__alignment_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__alignment14 a))))

(declare-fun partition_refinement__partitions__vector__capacity__first__bit1 () Int)

(declare-fun partition_refinement__partitions__vector__capacity__last__bit1 () Int)

(declare-fun partition_refinement__partitions__vector__capacity__position1 () Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit1 
  partition_refinement__partitions__vector__capacity__last__bit1))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position1))

(declare-fun dummy25 () us_rep10)

(declare-datatypes ()
((partition__ref (mk_partition__ref (partition__content us_rep10)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep10 
  (partition__content a))

(declare-datatypes ()
((map__ref5 (mk_map__ref5 (map__content5 (Array Int partition_index))))))
(declare-fun slide1 ((Array Int partition_index) Int
  Int) (Array Int partition_index))

;; slide_eq
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((first1 Int))
  (! (= (slide1 a first1 first1) a) :pattern ((slide1 a first1 first1)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int partition_index) Int Int
  (Array Int partition_index) Int Int) (Array Int partition_index))

;; concat_def
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (partition_index Int) (Array Int partition_index))

;; singleton_def
  (assert
  (forall ((v partition_index))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq23 ((a (Array Int partition_index)) (a__first Int)
  (a__last Int) (b (Array Int partition_index)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep4 (select a temp___idx_134)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq23 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep4 (select a temp___idx_134)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare1 ((Array Int partition_index) Int Int
  (Array Int partition_index) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq23 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq23 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq23 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun d__split_discrs () us_split_discrs2)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun p__split_discrs () us_split_discrs4)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun x () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun element__2 ((container us_rep5)
  (key2 Int)) Int (get4 (model__1 container) key2))

(declare-fun element__2__function_guard (Int us_rep5 Int) Bool)

(declare-fun element__21 (Int us_rep5 Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep5 Int) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun d_old () us_rep5)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_299 Int)
  (temp___is_init_296 Bool) (temp___skip_constant_297 Bool)
  (temp___do_toplevel_298 Bool)) Bool (=>
                                      (or (= temp___is_init_296 true)
                                      (<= 0 6)) (in_range3 temp___expr_299)))

(define-fun dynamic_invariant6 ((temp___expr_305 Int)
  (temp___is_init_302 Bool) (temp___skip_constant_303 Bool)
  (temp___do_toplevel_304 Bool)) Bool (=>
                                      (or (= temp___is_init_302 true)
                                      (<= 0 5)) (in_range4 temp___expr_305)))

(define-fun dynamic_invariant7 ((temp___expr_706 Int)
  (temp___is_init_703 Bool) (temp___skip_constant_704 Bool)
  (temp___do_toplevel_705 Bool)) Bool (=>
                                      (or (= temp___is_init_703 true)
                                      (<= 0 10000)) (in_range9
                                      temp___expr_706)))

(define-fun dynamic_invariant8 ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_152)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep (mk___split_fields (of_rep3 0)))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep3
                (rec__partition_refinement__partitioning_sets__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant8 result true false true))) :pattern ((length
                                                             container)) )))

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(define-fun last1 ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard1 (Int us_rep3) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq8 a b) (oeq2 a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_364 us_rep3)
  (temp___skip_top_level_365 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_365 true))
                                         (= (length3 temp___expr_364) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length3 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-fun length4 (us_rep2) Int)

(declare-fun length__function_guard4 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption2 ((temp___expr_383 us_rep2)
  (temp___skip_top_level_384 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_384 true))
                                         (and
                                         (= (is_empty temp___expr_383) true)
                                         (= (length4 temp___expr_383) 0))))

(define-fun default_initial_assumption3 ((temp___expr_371 us_rep)
  (temp___skip_top_level_372 Bool)) Bool (= (to_rep3
                                            (rec__partition_refinement__partitioning_sets__cursor__node
                                            (us_split_fields1
                                            temp___expr_371))) 0))

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq6 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-sort extended_index 0)

(define-fun in_range12 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 2147483647)))

(define-fun bool_eq24 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq23 (extended_index extended_index) Bool)

(declare-fun dummy26 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant9 ((temp___expr_357 Int)
  (temp___is_init_354 Bool) (temp___skip_constant_355 Bool)
  (temp___do_toplevel_356 Bool)) Bool (=>
                                      (or (= temp___is_init_354 true)
                                      (<= 0 2147483647)) (in_range12
                                      temp___expr_357)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant8 result true false
     true))) :pattern ((length3 container)) )))

(declare-sort element_type2 0)

(define-fun in_range13 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(define-fun bool_eq25 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq24 (element_type2 element_type2) Bool)

(declare-fun dummy27 () element_type2)

(declare-datatypes ()
((element_type__ref4
 (mk_element_type__ref4 (element_type__content4 element_type2)))))
(define-fun element_type__ref_2__projection ((a element_type__ref4)) element_type2 
  (element_type__content4 a))

(define-fun dynamic_invariant10 ((temp___expr_351 Int)
  (temp___is_init_348 Bool) (temp___skip_constant_349 Bool)
  (temp___do_toplevel_350 Bool)) Bool (=>
                                      (or (= temp___is_init_348 true)
                                      (<= 1 2147483647)) (in_range13
                                      temp___expr_351)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant9 position true true true)
     (and (<= 1 position) (<= position (last1 container))))
     (dynamic_invariant10 (get container position) true false true)) :pattern (
  (get container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key container k) true) (= (bool_eq6 k key2) true)))
     (= (has_key container key2) true))) :pattern ((has_key container key2)) ))))

(declare-sort element_type3 0)

(define-fun in_range14 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(define-fun bool_eq26 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq25 (element_type3 element_type3) Bool)

(declare-fun dummy28 () element_type3)

(declare-datatypes ()
((element_type__ref5
 (mk_element_type__ref5 (element_type__content5 element_type3)))))
(define-fun element_type__ref_3__projection ((a element_type__ref5)) element_type3 
  (element_type__content5 a))

(define-fun dynamic_invariant11 ((temp___expr_376 Int)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)) Bool (=>
                                      (or (= temp___is_init_373 true)
                                      (<= 1 2147483647)) (in_range14
                                      temp___expr_376)))

(declare-fun witness (us_rep2 us_rep) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep))
  (! (=> (= (has_key container key2) true)
     (let ((result (get1 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key2)))
     (forall ((k us_rep))
     (=> (= (has_key container k) true)
     (= (= (bool_eq6 k key2) true)
     (= (witness container key2) (witness container k)))))))
     (dynamic_invariant11 result true false true)))) :pattern ((get1
                                                               container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant8 (length4 container)
  true false true) :pattern ((length4 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key2 us_rep)) (not (= (has_key container key2) true)))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep))
  (! (=> (= (has_key container key2) true)
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant8 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant8 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant11
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

;; no_element__def_axiom
  (assert (= no_element1 (mk___rep2 (mk___split_fields2 (of_rep3 0)))))

(declare-fun length5 (us_rep5) Int)

(declare-fun length__function_guard5 (Int us_rep5) Bool)

(declare-fun length6 (Int us_rep5) Int)

(declare-fun length__function_guard6 (Int Int us_rep5) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length5 container)))
     (and
     (<= result (to_rep3
                (rec__partition_refinement__inverse_sets__map__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant8 result true false true))) :pattern ((length5
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep5)) (! (dynamic_invariant8
  (length6 attr__tag container) true false
  true) :pattern ((length6 attr__tag container)) ))))

(declare-fun length7 (us_rep7) Int)

(declare-fun length__function_guard7 (Int us_rep7) Bool)

(define-fun k_bigger_than_range ((container us_rep7) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get2 container i) key2)))
                   true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep7 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep7) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< key2 (get2 container i))))
                   true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep7 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep7) (key2 Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key2) (of_int 1)) (ite (< position (length7
                                                               container))
                                              (k_smaller_than_range container
                                              (+ position 1)
                                              (length7 container) key2)
                                              (of_int 1))))

(declare-fun k_is_find__function_guard (Bool us_rep7 Int Int) Bool)

(define-fun last2 ((container us_rep7)) Int (+ 0 (length7 container)))

(declare-fun last__function_guard2 (Int us_rep7) Bool)

(define-fun oeq3 ((left us_rep7)
  (right us_rep7)) Bool (and (= (length7 left) (length7 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last2 left)))
                                                                (= (get2 left
                                                                   n) 
                                                                (get2 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard3 (Bool us_rep7 us_rep7) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq13 a b) (oeq3 a b)) :pattern ((user_eq13 a b)) )))

(define-fun default_initial_assumption4 ((temp___expr_573 us_rep7)
  (temp___skip_top_level_574 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_574 true))
                                         (= (length7 temp___expr_573) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant1 key2 true true true)
     (let ((result (find2 container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length7 container))
     (= (equivalent_keys key2 (get2 container result)) true)))
     (dynamic_invariant8 result true false true)))) :pattern ((find2
                                                              container key2)) ))))

(declare-fun length8 (us_rep8) Int)

(declare-fun length__function_guard8 (Int us_rep8) Bool)

(declare-fun is_empty1 (us_rep8) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep8) Bool)

(define-fun default_initial_assumption5 ((temp___expr_542 us_rep8)
  (temp___skip_top_level_543 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_543 true))
                                         (and
                                         (= (is_empty1 temp___expr_542) true)
                                         (= (length8 temp___expr_542) 0))))

;; model____post_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range15 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(define-fun bool_eq27 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq26 (key_type1 key_type1) Bool)

(declare-fun dummy29 () key_type1)

(declare-datatypes ()
((key_type__ref3 (mk_key_type__ref3 (key_type__content3 key_type1)))))
(define-fun key_type__ref_3__projection ((a key_type__ref3)) key_type1 
  (key_type__content3 a))

(declare-sort extended_index1 0)

(define-fun in_range16 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 2147483647)))

(define-fun bool_eq28 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq27 (extended_index1 extended_index1) Bool)

(declare-fun dummy30 () extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun iter_has_element ((container us_rep7)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last2
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep7 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length7 result) (length5 container))
     (forall ((temp___607 Int))
     (=>
     (and (in_range16 temp___607)
     (= (iter_has_element result temp___607) true))
     (= (has_key2 (model__1 container) (get2 result temp___607)) true))))
     (forall ((key2 Int))
     (=>
     (and (in_range15 key2) (= (has_key2 (model__1 container) key2) true))
     (and (< 0 (find2 result key2))
     (= (equivalent_keys (get2 result (find2 result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length5 container)))
     (and (= (find2 result (get2 result i)) i)
     (= (k_is_find result (get2 result i) i) true)))))) :pattern ((keys
                                                                  container)) )))

(declare-fun length9 (us_rep6) Int)

(declare-fun length__function_guard9 (Int us_rep6) Bool)

(declare-fun is_empty2 (us_rep6) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep6) Bool)

(define-fun default_initial_assumption6 ((temp___expr_593 us_rep6)
  (temp___skip_top_level_594 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_594 true))
                                         (and
                                         (= (is_empty2 temp___expr_593) true)
                                         (= (length9 temp___expr_593) 0))))

;; positions__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (positions1 container)))
     (and (not (= (has_key1 result no_element1) true))
     (forall ((i us_rep4))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get3 result i)) (<= (get3 result i) (length5 container)))
     (forall ((j us_rep4))
     (=> (= (has_key1 result j) true)
     (=> (= (get3 result i) (get3 result j)) (= (bool_eq11 i j) true))))))))) :pattern (
  (positions1 container)) )))

(declare-fun oeq4 (us_rep8 us_rep8) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep8 us_rep8) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq left right) true)
     (= (oeq4 (model__1 left) (model__1 right)) true)) :pattern ((oeq left
                                                                 right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key2 Int))
  (forall ((container us_rep5))
  (! (=> (dynamic_invariant1 key2 true true true) (dynamic_invariant2
     (element__21 attr__tag container key2) true false true)) :pattern (
  (element__21 attr__tag container key2)) ))))

(define-fun dynamic_invariant12 ((temp___expr_529 Int)
  (temp___is_init_526 Bool) (temp___skip_constant_527 Bool)
  (temp___do_toplevel_528 Bool)) Bool (=>
                                      (or (= temp___is_init_526 true)
                                      (<= 1 2147483647)) (in_range15
                                      temp___expr_529)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant12 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range15 k) (= (has_key2 container k) true))
     (= (equivalent_keys k key2) true))) (= (has_key2 container key2) true)))) :pattern (
  (has_key2 container key2)) ))))

(declare-sort element_type4 0)

(define-fun in_range17 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 5)))

(define-fun bool_eq29 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq28 (element_type4 element_type4) Bool)

(declare-fun dummy31 () element_type4)

(declare-datatypes ()
((element_type__ref6
 (mk_element_type__ref6 (element_type__content6 element_type4)))))
(define-fun element_type__ref_5__projection ((a element_type__ref6)) element_type4 
  (element_type__content6 a))

(define-fun dynamic_invariant13 ((temp___expr_535 Int)
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)) Bool (=>
                                      (or (= temp___is_init_532 true)
                                      (<= 0 5)) (in_range17 temp___expr_535)))

(declare-fun witness1 (us_rep8 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep8 Int) Bool)

(declare-fun w_get1 (us_rep8 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep8 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant12 key2 true true true)
     (= (has_key2 container key2) true))
     (let ((result (get4 container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k Int))
     (=> (and (in_range15 k) (= (has_key2 container k) true))
     (= (= (equivalent_keys k key2) true)
     (= (witness1 container key2) (witness1 container k)))))))
     (dynamic_invariant13 result true false true)))) :pattern ((get4
                                                               container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep8)) (! (dynamic_invariant8 (length8 container)
  true false true) :pattern ((length8 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep8) (right us_rep8))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range15 key2) (= (has_key2 left key2) true))
     (and (= (has_key2 right key2) true)
     (= (get4 right key2) (get4 left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range15 key2) (= (has_key2 right key2) true))
     (= (has_key2 left key2) true))))) :pattern ((oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (= (= (is_empty1 container) true)
     (forall ((key2 Int))
     (not (and (in_range15 key2) (= (has_key2 container key2) true))))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep8 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep8 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant12 key2 true true true)
     (= (has_key2 container key2) true))
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant8 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant8 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant13
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(define-fun dynamic_invariant14 ((temp___expr_566 Int)
  (temp___is_init_563 Bool) (temp___skip_constant_564 Bool)
  (temp___do_toplevel_565 Bool)) Bool (=>
                                      (or (= temp___is_init_563 true)
                                      (<= 0 2147483647)) (in_range16
                                      temp___expr_566)))

;; length__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (let ((result (length7 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant8 result true false
     true))) :pattern ((length7 container)) )))

(declare-sort element_type5 0)

(define-fun in_range18 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(define-fun bool_eq30 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq29 (element_type5 element_type5) Bool)

(declare-fun dummy32 () element_type5)

(declare-datatypes ()
((element_type__ref7
 (mk_element_type__ref7 (element_type__content7 element_type5)))))
(define-fun element_type__ref_6__projection ((a element_type__ref7)) element_type5 
  (element_type__content7 a))

(define-fun dynamic_invariant15 ((temp___expr_560 Int)
  (temp___is_init_557 Bool) (temp___skip_constant_558 Bool)
  (temp___do_toplevel_559 Bool)) Bool (=>
                                      (or (= temp___is_init_557 true)
                                      (<= 1 2147483647)) (in_range18
                                      temp___expr_560)))

;; get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant14 position true true true)
     (and (<= 1 position) (<= position (last2 container))))
     (dynamic_invariant15 (get2 container position) true false true)) :pattern (
  (get2 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key2 us_rep4))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep4))
     (and (= (has_key1 container k) true) (= (bool_eq11 k key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

(declare-sort element_type6 0)

(define-fun in_range19 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(define-fun bool_eq31 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE19 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check19 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE19 (us_image) Int)

(declare-fun user_eq30 (element_type6 element_type6) Bool)

(declare-fun dummy33 () element_type6)

(declare-datatypes ()
((element_type__ref8
 (mk_element_type__ref8 (element_type__content8 element_type6)))))
(define-fun element_type__ref_7__projection ((a element_type__ref8)) element_type6 
  (element_type__content8 a))

(define-fun dynamic_invariant16 ((temp___expr_586 Int)
  (temp___is_init_583 Bool) (temp___skip_constant_584 Bool)
  (temp___do_toplevel_585 Bool)) Bool (=>
                                      (or (= temp___is_init_583 true)
                                      (<= 1 2147483647)) (in_range19
                                      temp___expr_586)))

(declare-fun witness2 (us_rep6 us_rep4) Int)

(declare-fun witness__function_guard2 (Int us_rep6 us_rep4) Bool)

(declare-fun w_get2 (us_rep6 Int) Int)

(declare-fun w_get__function_guard2 (Int us_rep6 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key2 us_rep4))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (get3 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get2 container (witness2 container key2)))
     (forall ((k us_rep4))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq11 k key2) true)
     (= (witness2 container key2) (witness2 container k)))))))
     (dynamic_invariant16 result true false true)))) :pattern ((get3
                                                               container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep6)) (! (dynamic_invariant8 (length9 container)
  true false true) :pattern ((length9 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep6))
  (! (= (= (is_empty2 container) true)
     (forall ((key2 us_rep4)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty2 container)) )))

(declare-fun has_witness2 (us_rep6 Int) Bool)

(declare-fun has_witness__function_guard2 (Bool us_rep6 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key2 us_rep4))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness2 container key2)))
     (and (= (has_witness2 container result) true) (dynamic_invariant8 result
     true false true)))) :pattern ((witness2 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((witness3 Int))
  (! (=>
     (and (dynamic_invariant8 witness3 true true true)
     (= (has_witness2 container witness3) true)) (dynamic_invariant16
     (w_get2 container witness3) true false true)) :pattern ((w_get2
                                                             container
                                                             witness3)) ))))

(declare-sort extended_index2 0)

(define-fun in_range20 ((x1 Int)) Bool (and (<= (- 1) x1) (<= x1 10001)))

(define-fun bool_eq32 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE20 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check20 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE20 (us_image) Int)

(declare-fun user_eq31 (extended_index2 extended_index2) Bool)

(declare-fun dummy34 () extended_index2)

(declare-datatypes ()
((extended_index__ref2
 (mk_extended_index__ref2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref_3__projection ((a extended_index__ref2)) extended_index2 
  (extended_index__content2 a))

(define-fun dynamic_invariant17 ((temp___expr_727 Int)
  (temp___is_init_724 Bool) (temp___skip_constant_725 Bool)
  (temp___do_toplevel_726 Bool)) Bool (=>
                                      (or (= temp___is_init_724 true)
                                      (<= (- 1) 10001)) (in_range20
                                      temp___expr_727)))

(define-fun oeq5 ((left us_rep11)
  (right us_rep11)) Bool (and (= (length2 left) (length2 right)) (ite 
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 0 n)
                                                                 (<= n 
                                                                 (last left)))
                                                                 (= (bool_eq20
                                                                    (get5
                                                                    left n)
                                                                    (get5
                                                                    right n)) true)))
                                                                 true false)))

(declare-fun oeq__function_guard5 (Bool us_rep11 us_rep11) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep11) (b us_rep11))
  (! (= (user_eq22 a b) (oeq5 a b)) :pattern ((user_eq22 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_770 us_rep11)
  (temp___skip_top_level_771 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_771 true))
                                         (= (length2 temp___expr_770) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep10))
  (! (= (length2 (model__2 container)) (length1 container)) :pattern (
  (model__2 container)) )))

(define-fun dynamic_invariant18 ((temp___expr_712 Int)
  (temp___is_init_709 Bool) (temp___skip_constant_710 Bool)
  (temp___do_toplevel_711 Bool)) Bool (=>
                                      (or (= temp___is_init_709 true)
                                      (<= 0 10000)) (in_range10
                                      temp___expr_712)))

(declare-sort extended_index3 0)

(define-fun in_range21 ((x1 Int)) Bool (and (<= (- 1) x1) (<= x1 10000)))

(define-fun bool_eq33 ((x1 Int) (y Int)) Bool (ite (= x1 y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE21 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check21 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE21 (us_image) Int)

(declare-fun user_eq32 (extended_index3 extended_index3) Bool)

(declare-fun dummy35 () extended_index3)

(declare-datatypes ()
((extended_index__ref3
 (mk_extended_index__ref3 (extended_index__content3 extended_index3)))))
(define-fun extended_index__ref_4__projection ((a extended_index__ref3)) extended_index3 
  (extended_index__content3 a))

(define-fun dynamic_invariant19 ((temp___expr_763 Int)
  (temp___is_init_760 Bool) (temp___skip_constant_761 Bool)
  (temp___do_toplevel_762 Bool)) Bool (=>
                                      (or (= temp___is_init_760 true)
                                      (<= (- 1) 10000)) (in_range21
                                      temp___expr_763)))

;; length__post_axiom
  (assert
  (forall ((container us_rep11))
  (! (let ((result (length2 container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant8 result true false
     true))) :pattern ((length2 container)) )))

;; get__post_axiom
  (assert true)

(declare-fun a () (Array Int positive))

(declare-fun d__split_fields () us_main_type3)

(declare-fun p__split_fields () us_main_type7)

(declare-fun f () (Array Int partition_index))

(declare-fun c__split_fields () count_type)

(declare-fun partition_refinement__refine__c__assume () us_rep)

(declare-fun o () Int)

(declare-fun o1 () Bool)

(declare-fun o2 () Int)

(declare-fun result () us_split_fields__ref)

(declare-fun c__split_fields1 () us_split_fields)

(declare-fun result1 () Bool)

(declare-fun a1 () (Array Int positive))

(declare-fun d__split_fields1 () us_split_fields6)

(declare-fun p__split_fields1 () us_split_fields10)

(declare-fun c__split_fields2 () us_split_fields)

(declare-fun a2 () (Array Int positive))

(declare-fun d__split_fields2 () us_split_fields6)

(declare-fun p__split_fields2 () us_split_fields10)

(declare-fun c__split_fields3 () us_split_fields)

(declare-fun result2 () Bool)

(declare-fun a3 () (Array Int positive))

(declare-fun d__split_fields3 () us_split_fields6)

(declare-fun p__split_fields3 () us_split_fields10)

(declare-fun c__split_fields4 () us_split_fields)

;; H
  (assert
  (and
  (<= (* 2 (length1
           (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields)))) 
  (capacity (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))))
  (and
  (<= (length1
      (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) 5000)
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (has_key2
     (model__1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields)))
     (to_rep (select a j))) true)))
  (and
  (forall ((c us_rep4))
  (=>
  (= (has_key1
     (positions1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields))) c) true)
  (= (to_rep
     (select a (element1
               (mk___rep3 d__split_discrs
               (mk___split_fields3 d__split_fields)) c))) (key
                                                          (mk___rep3
                                                          d__split_discrs
                                                          (mk___split_fields3
                                                          d__split_fields))
                                                          c))))
  (and
  (forall ((c us_rep))
  (=> (= (has_key (positions x) c) true)
  (= (has_key2
     (model__1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields)))
     (element x c)) true)))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (and (<= 0 (to_rep4 (select f j)))
  (<= (to_rep4 (select f j)) (- (length1
                                (mk___rep5 p__split_discrs
                                (mk___split_fields5 p__split_fields))) 1)))))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (and
  (<= (to_rep2
      (rec__partition_refinement__interval__first
      (us_split_fields9
      (get5
      (model__2
      (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields)))
      (to_rep4 (select f j)))))) j)
  (<= j (to_rep2
        (rec__partition_refinement__interval__last
        (us_split_fields9
        (get5
        (model__2
        (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields)))
        (to_rep4 (select f j))))))))))
  (and
  (forall ((j Int))
  (=>
  (and (<= 0 j)
  (<= j (- (length1
           (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) 1)))
  (forall ((k Int))
  (=>
  (and
  (<= (to_rep2
      (rec__partition_refinement__interval__first
      (us_split_fields9
      (get5
      (model__2
      (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) j)))) k)
  (<= k (to_rep2
        (rec__partition_refinement__interval__last
        (us_split_fields9
        (get5
        (model__2
        (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) j))))))
  (= (to_rep4 (select f k)) j)))))
  (forall ((j Int))
  (=>
  (and (<= 0 j)
  (<= j (- (length1
           (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) 1)))
  (= (to_rep1
     (rec__partition_refinement__interval__count
     (us_split_fields9
     (get5
     (model__2
     (mk___rep5 p__split_discrs (mk___split_fields5 p__split_fields))) j)))) 0))))))))))))

;; H
  (assert
  (and (= partition_refinement__refine__c__assume (first x))
  (ite (= (= (length x) 0) true)
  (= (bool_eq6 partition_refinement__refine__c__assume no_element) true)
  (and
  (= (has_key (positions x) partition_refinement__refine__c__assume) true)
  (= (get1 (positions x) partition_refinement__refine__c__assume) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref (mk___split_fields c__split_fields))))

;; H
  (assert
  (= c__split_fields1 (us_split_fields1
                      partition_refinement__refine__c__assume)))

;; H
  (assert
  (= (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields)) 
  d_old))

;; H
  (assert
  (and (= result1 (has_key (positions x) (mk___rep c__split_fields1)))
  (= (= result1 true)
  (= (has_key (positions x) (mk___rep c__split_fields1)) true))))

;; H
  (assert (= result1 true))

;; H
  (assert
  (= (has_key1
     (positions1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields)))
     (find d_old (element x (mk___rep c__split_fields1)))) true))

;; H
  (assert
  (= (has_key2
     (model__1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields)))
     (element x (mk___rep c__split_fields1))) true))

;; H
  (assert
  (and (= o (element x (mk___rep c__split_fields1)))
  (and (in_range6 o)
  (= o (get (model__ x) (get1 (positions x) (mk___rep c__split_fields1)))))))

;; H
  (assert
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 5))
  (= (to_rep (select a1 k)) (ite (= k (get4
                                      (model__1
                                      (mk___rep3 d__split_discrs
                                      (mk___split_fields3 d__split_fields)))
                                      o))
                            (to_rep
                            (select a (+ (to_rep2
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields9
                                         (get5
                                         (model__2
                                         (mk___rep5 p__split_discrs
                                         (mk___split_fields5 p__split_fields)))
                                         (to_rep4
                                         (select f (get4
                                                   (model__1
                                                   (mk___rep3 d__split_discrs
                                                   (mk___split_fields3
                                                   d__split_fields))) 
                                                   o))))))) (to_rep1
                                                            (rec__partition_refinement__interval__count
                                                            (us_split_fields9
                                                            (get5
                                                            (model__2
                                                            (mk___rep5
                                                            p__split_discrs
                                                            (mk___split_fields5
                                                            p__split_fields)))
                                                            (to_rep4
                                                            (select f 
                                                            (get4
                                                            (model__1
                                                            (mk___rep3
                                                            d__split_discrs
                                                            (mk___split_fields3
                                                            d__split_fields)))
                                                            o))))))))))
                            (ite (= k (+ (to_rep2
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields9
                                         (get5
                                         (model__2
                                         (mk___rep5 p__split_discrs
                                         (mk___split_fields5 p__split_fields)))
                                         (to_rep4
                                         (select f (get4
                                                   (model__1
                                                   (mk___rep3 d__split_discrs
                                                   (mk___split_fields3
                                                   d__split_fields))) 
                                                   o))))))) (to_rep1
                                                            (rec__partition_refinement__interval__count
                                                            (us_split_fields9
                                                            (get5
                                                            (model__2
                                                            (mk___rep5
                                                            p__split_discrs
                                                            (mk___split_fields5
                                                            p__split_fields)))
                                                            (to_rep4
                                                            (select f 
                                                            (get4
                                                            (model__1
                                                            (mk___rep3
                                                            d__split_discrs
                                                            (mk___split_fields3
                                                            d__split_fields)))
                                                            o)))))))))
                            (to_rep
                            (select a (get4
                                      (model__1
                                      (mk___rep3 d__split_discrs
                                      (mk___split_fields3 d__split_fields)))
                                      o)))
                            (to_rep (select a k)))))))
  (and
  (= (capacity (mk___rep5 p__split_discrs p__split_fields1)) (capacity
                                                             (mk___rep5
                                                             p__split_discrs
                                                             (mk___split_fields5
                                                             p__split_fields))))
  (and
  (= (length1 (mk___rep5 p__split_discrs p__split_fields1)) (length1
                                                            (mk___rep5
                                                            p__split_discrs
                                                            (mk___split_fields5
                                                            p__split_fields))))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (has_key2 (model__1 (mk___rep3 d__split_discrs d__split_fields1))
     (to_rep (select a1 j))) true)))
  (and
  (forall ((c us_rep4))
  (=>
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields1)) c) true)
  (= (to_rep
     (select a1 (element1 (mk___rep3 d__split_discrs d__split_fields1) c))) 
  (key (mk___rep3 d__split_discrs d__split_fields1) c))))
  (forall ((c us_rep4))
  (=>
  (= (has_key1
     (positions1
     (mk___rep3 d__split_discrs (mk___split_fields3 d__split_fields))) c) true)
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields1)) c) true)))))))))

;; H
  (assert
  (ite (= (ite (= (bool_eq6 (mk___rep c__split_fields1) no_element) false) (= 
          (get1 (positions x) (mk___rep c__split_fields1)) (length x)) true) true)
  (= (bool_eq6 (mk___rep c__split_fields2) no_element) true)
  (and (= (has_key (positions x) (mk___rep c__split_fields2)) true)
  (= (get1 (positions x) (mk___rep c__split_fields2)) (+ (get1 (positions x)
                                                         (mk___rep
                                                         c__split_fields1)) 1)))))

;; H
  (assert
  (= (capacity (mk___rep5 p__split_discrs p__split_fields2)) (capacity
                                                             (mk___rep5
                                                             p__split_discrs
                                                             (mk___split_fields5
                                                             p__split_fields)))))

;; H
  (assert
  (= (length1 (mk___rep5 p__split_discrs p__split_fields2)) (length1
                                                            (mk___rep5
                                                            p__split_discrs
                                                            (mk___split_fields5
                                                            p__split_fields)))))

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (has_key2 (model__1 (mk___rep3 d__split_discrs d__split_fields2))
     (to_rep (select a2 j))) true))))

;; H
  (assert
  (forall ((c us_rep4))
  (=>
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields2)) c) true)
  (= (to_rep
     (select a2 (element1 (mk___rep3 d__split_discrs d__split_fields2) c))) 
  (key (mk___rep3 d__split_discrs d__split_fields2) c)))))

;; H
  (assert
  (forall ((c us_rep4))
  (=> (= (has_key1 (positions1 d_old) c) true)
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields2)) c) true))))

;; H
  (assert
  (forall ((c us_rep))
  (=> (= (has_key (positions x) c) true)
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields2))
     (find d_old (element x c))) true))))

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (and (<= 0 (to_rep4 (select f j)))
  (<= (to_rep4 (select f j)) (- (length1
                                (mk___rep5 p__split_discrs p__split_fields2)) 1))))))

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (and
  (<= (to_rep2
      (rec__partition_refinement__interval__first
      (us_split_fields9
      (get5 (model__2 (mk___rep5 p__split_discrs p__split_fields2))
      (to_rep4 (select f j)))))) j)
  (<= j (to_rep2
        (rec__partition_refinement__interval__last
        (us_split_fields9
        (get5 (model__2 (mk___rep5 p__split_discrs p__split_fields2))
        (to_rep4 (select f j)))))))))))

;; H
  (assert
  (forall ((j Int))
  (=>
  (and (<= 0 j)
  (<= j (- (length1 (mk___rep5 p__split_discrs p__split_fields2)) 1)))
  (forall ((k Int))
  (=>
  (and
  (<= (to_rep2
      (rec__partition_refinement__interval__first
      (us_split_fields9
      (get5 (model__2 (mk___rep5 p__split_discrs p__split_fields2)) j)))) k)
  (<= k (to_rep2
        (rec__partition_refinement__interval__last
        (us_split_fields9
        (get5 (model__2 (mk___rep5 p__split_discrs p__split_fields2)) j))))))
  (= (to_rep4 (select f k)) j))))))

;; H
  (assert
  (and (= o1 (has_key (positions x) (mk___rep c__split_fields3)))
  (= (= o1 true)
  (= (has_key (positions x) (mk___rep c__split_fields3)) true))))

;; H
  (assert (= result2 (ite (not (= o1 true)) true false)))

;; H
  (assert (not (= result2 true)))

;; H
  (assert
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields2))
     (find d_old (element x (mk___rep c__split_fields3)))) true))

;; H
  (assert
  (= (has_key2 (model__1 (mk___rep3 d__split_discrs d__split_fields2))
     (element x (mk___rep c__split_fields3))) true))

;; H
  (assert
  (and (= o2 (element x (mk___rep c__split_fields3)))
  (and (in_range6 o2)
  (= o2 (get (model__ x) (get1 (positions x) (mk___rep c__split_fields3)))))))

;; H
  (assert
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 5))
  (= (to_rep (select a3 k)) (ite (= k (get4
                                      (model__1
                                      (mk___rep3 d__split_discrs
                                      d__split_fields2)) o2))
                            (to_rep
                            (select a2 (+ (to_rep2
                                          (rec__partition_refinement__interval__first
                                          (us_split_fields9
                                          (get5
                                          (model__2
                                          (mk___rep5 p__split_discrs
                                          p__split_fields2))
                                          (to_rep4
                                          (select f (get4
                                                    (model__1
                                                    (mk___rep3
                                                    d__split_discrs
                                                    d__split_fields2)) 
                                                    o2))))))) (to_rep1
                                                              (rec__partition_refinement__interval__count
                                                              (us_split_fields9
                                                              (get5
                                                              (model__2
                                                              (mk___rep5
                                                              p__split_discrs
                                                              p__split_fields2))
                                                              (to_rep4
                                                              (select 
                                                              f (get4
                                                                (model__1
                                                                (mk___rep3
                                                                d__split_discrs
                                                                d__split_fields2))
                                                                o2))))))))))
                            (ite (= k (+ (to_rep2
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields9
                                         (get5
                                         (model__2
                                         (mk___rep5 p__split_discrs
                                         p__split_fields2))
                                         (to_rep4
                                         (select f (get4
                                                   (model__1
                                                   (mk___rep3 d__split_discrs
                                                   d__split_fields2)) 
                                                   o2))))))) (to_rep1
                                                             (rec__partition_refinement__interval__count
                                                             (us_split_fields9
                                                             (get5
                                                             (model__2
                                                             (mk___rep5
                                                             p__split_discrs
                                                             p__split_fields2))
                                                             (to_rep4
                                                             (select 
                                                             f (get4
                                                               (model__1
                                                               (mk___rep3
                                                               d__split_discrs
                                                               d__split_fields2))
                                                               o2)))))))))
                            (to_rep
                            (select a2 (get4
                                       (model__1
                                       (mk___rep3 d__split_discrs
                                       d__split_fields2)) o2)))
                            (to_rep (select a2 k)))))))
  (and
  (= (capacity (mk___rep5 p__split_discrs p__split_fields3)) (capacity
                                                             (mk___rep5
                                                             p__split_discrs
                                                             p__split_fields2)))
  (and
  (= (length1 (mk___rep5 p__split_discrs p__split_fields3)) (length1
                                                            (mk___rep5
                                                            p__split_discrs
                                                            p__split_fields2)))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (has_key2 (model__1 (mk___rep3 d__split_discrs d__split_fields3))
     (to_rep (select a3 j))) true)))
  (and
  (forall ((c us_rep4))
  (=>
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields3)) c) true)
  (= (to_rep
     (select a3 (element1 (mk___rep3 d__split_discrs d__split_fields3) c))) 
  (key (mk___rep3 d__split_discrs d__split_fields3) c))))
  (forall ((c us_rep4))
  (=>
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields2)) c) true)
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields3)) c) true)))))))))

;; H
  (assert
  (ite (= (ite (= (bool_eq6 (mk___rep c__split_fields3) no_element) false) (= 
          (get1 (positions x) (mk___rep c__split_fields3)) (length x)) true) true)
  (= (bool_eq6 (mk___rep c__split_fields4) no_element) true)
  (and (= (has_key (positions x) (mk___rep c__split_fields4)) true)
  (= (get1 (positions x) (mk___rep c__split_fields4)) (+ (get1 (positions x)
                                                         (mk___rep
                                                         c__split_fields3)) 1)))))

(declare-fun c () us_rep4)

;; H
  (assert (= (has_key1 (positions1 d_old) c) true))

(assert
;; WP_parameter_def
 ;; File "a-cofove.ads", line 807, characters 0-0
  (not
  (= (has_key1 (positions1 (mk___rep3 d__split_discrs d__split_fields3)) c) true)))
(check-sat)
