;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort resource 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (resource resource) Bool)

(declare-fun dummy () resource)

(declare-datatypes ()
((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content
                                                                    a))

(declare-sort valid_resource 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10000)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (valid_resource valid_resource) Bool)

(declare-fun dummy1 () valid_resource)

(declare-datatypes ()
((valid_resource__ref
 (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource 
  (valid_resource__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (count_type count_type) Bool)

(declare-fun dummy3 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_142)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption ((temp___expr_185 us_rep)
  (temp___skip_top_level_186 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_186 true))
                                         (= (length temp___expr_185) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-fun dummy4 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 10000)) (in_range4
                                      temp___expr_172)))

(declare-sort extended_index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (extended_index extended_index) Bool)

(declare-fun dummy5 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_178)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant2 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant1 (get container position) true false true)) :pattern (
  (get container position)) ))))

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-fun add (us_rep Int) us_rep)

(declare-fun add__function_guard (us_rep us_rep Int) Bool)

;; add__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((new_item Int))
  (! (=>
     (and (dynamic_invariant1 new_item true true true)
     (and (< (length container) 2147483647) (< (last container) 2147483647)))
     (let ((result (add container new_item)))
     (and (= (length result) (+ (length container) 1))
     (and (= (get result (last result)) new_item)
     (= (ole container result) true))))) :pattern ((add container new_item)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq6 (us_rep1 us_rep1) Bool)

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dummy6 () us_rep1)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep1)))))
(define-fun set__ref___projection ((a set__ref)) us_rep1 (set__content a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

(define-fun default_initial_assumption1 ((temp___expr_198 us_rep1)
  (temp___skip_top_level_199 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_199 true))
                                         (= (is_empty temp___expr_198) true)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant (length1 container)
  true false true) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (element_type1 element_type1) Bool)

(declare-fun dummy7 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(declare-fun contains (us_rep1 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep1 Int) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range6 item) (= (contains container item) true)))))
     (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty
                                                               container)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__list_allocator__m__t__available us_rep)(rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields)) us_rep 
  (rec__list_allocator__m__t__available a))

(define-fun us_split_fields_Allocated__projection ((a us_split_fields)) us_rep1 
  (rec__list_allocator__m__t__allocated a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep2 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep2)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq8 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (user_eq2
                            (rec__list_allocator__m__t__available
                            (us_split_fields1 a))
                            (rec__list_allocator__m__t__available
                            (us_split_fields1 b))) true)
                         (= (bool_eq6
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields1 a))
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields1 b))) true))
                    true false))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun list_allocator__m__t__available__first__bit () Int)

(declare-fun list_allocator__m__t__available__last__bit () Int)

(declare-fun list_allocator__m__t__available__position () Int)

;; list_allocator__m__t__available__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__available__first__bit))

;; list_allocator__m__t__available__last__bit_axiom
  (assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; list_allocator__m__t__available__position_axiom
  (assert (<= 0 list_allocator__m__t__available__position))

(declare-fun list_allocator__m__t__allocated__first__bit () Int)

(declare-fun list_allocator__m__t__allocated__last__bit () Int)

(declare-fun list_allocator__m__t__allocated__position () Int)

;; list_allocator__m__t__allocated__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; list_allocator__m__t__allocated__last__bit_axiom
  (assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; list_allocator__m__t__allocated__position_axiom
  (assert (<= 0 list_allocator__m__t__allocated__position))

(declare-fun dummy8 () us_rep2)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (and (oeq__function_guard1 (oeq1 a b) a b)
     (= (user_eq8 a b) (oeq1 a b))) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_212 us_rep2)
  (temp___skip_top_level_213 Bool)) Bool (and
                                         (= (length
                                            (rec__list_allocator__m__t__available
                                            (us_split_fields1
                                            temp___expr_212))) 0)
                                         (= (is_empty
                                            (rec__list_allocator__m__t__allocated
                                            (us_split_fields1
                                            temp___expr_212))) true)))

(declare-fun contains1 (us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 0 10000)) (in_range1
                                      temp___expr_148)))

;; contains__post_axiom
  (assert true)

;; contains__def_axiom
  (assert
  (forall ((s us_rep))
  (forall ((e Int))
  (! (=> (contains__function_guard1 (contains1 s e) s e)
     (= (= (contains1 s e) true)
     (exists ((i Int))
     (and (and (<= 1 i) (<= i (length s))) (= (get s i) e))))) :pattern (
  (contains1 s e)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant4 ((temp___expr_154 Int)
  (temp___is_init_151 Bool) (temp___skip_constant_152 Bool)
  (temp___do_toplevel_153 Bool)) Bool (=>
                                      (or (= temp___is_init_151 true)
                                      (<= 1 10000)) (in_range2
                                      temp___expr_154)))

(declare-fun oeq2 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep2) (y us_rep2))
  (! (=> (oeq__function_guard1 (oeq1 x y) x y)
     (= (= (oeq1 x y) true)
     (and
     (= (oeq (rec__list_allocator__m__t__available (us_split_fields1 x))
        (rec__list_allocator__m__t__available (us_split_fields1 y))) true)
     (= (oeq2 (rec__list_allocator__m__t__allocated (us_split_fields1 x))
        (rec__list_allocator__m__t__allocated (us_split_fields1 y))) true)))) :pattern (
  (oeq1 x y)) )))

(define-fun dynamic_invariant5 ((temp___expr_191 Int)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)) Bool (=>
                                      (or (= temp___is_init_188 true)
                                      (<= 0 10000)) (in_range6
                                      temp___expr_191)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item Int))
  (! (=> (dynamic_invariant5 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range6 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun ole1 (us_rep1 us_rep1) Bool)

(declare-fun ole__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; ole__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (ole1 left right) true)
     (forall ((item Int))
     (=> (and (in_range6 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq2 left right) true)
     (and (= (ole1 left right) true) (= (ole1 right left) true))) :pattern (
  (oeq2 left right)) )))

(declare-fun model____split_fields () us_rep)

(declare-fun model____split_fields1 () us_rep1)

(declare-fun r () Int)

(declare-fun o () us_rep)

(declare-fun o1 () us_rep)

(declare-fun o2 () us_rep1)

(declare-fun temp___284 () us_rep)

(declare-fun temp___2841 () us_rep1)

(declare-fun result () Int)

(declare-fun r1 () Int)

(declare-fun result1 () us_rep)

(declare-fun result2 () us_rep1)

(declare-fun model____split_fields2 () us_rep)

(declare-fun model____split_fields3 () us_rep1)

;; H
  (assert
  (and (= (length model____split_fields) 0)
  (= (is_empty model____split_fields1) true)))

;; H
  (assert (= (length model____split_fields) 0))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref r)))

;; H
  (assert (= r1 1))

;; H
  (assert (<= 1 r1))

;; H
  (assert (<= r1 10000))

;; H
  (assert
  (and (= o (add model____split_fields r1))
  (and (= (length o) (+ (length model____split_fields) 1))
  (and (= (get o (last o)) r1) (= (ole model____split_fields o) true)))))

;; H
  (assert (= o o1))

;; H
  (assert (= model____split_fields1 o2))

;; H
  (assert (= temp___284 o1))

;; H
  (assert (= temp___2841 o2))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result1 result2)) (mk___split_fields__ref
                                                                  (mk___split_fields
                                                                  model____split_fields
                                                                  model____split_fields1))))

;; H
  (assert (= temp___284 model____split_fields2))

;; H
  (assert (= temp___2841 model____split_fields3))

(declare-fun rr () Int)

;; H
  (assert (<= 1 rr))

;; H
  (assert (<= rr r1))

;; H
  (assert (contains__function_guard1 (contains1 model____split_fields2 rr)
  model____split_fields2 rr))

(assert
;; WP_parameter_def
 ;; File "list_allocator.adb", line 21, characters 0-0
  (not (= (contains1 model____split_fields2 rr) true)))
(check-sat)
