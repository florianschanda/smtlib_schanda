;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort states_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (states_t states_t) Bool)

(declare-fun dummy () states_t)

(declare-datatypes ()
((states_t__ref (mk_states_t__ref (states_t__content states_t)))))
(define-fun states_t__ref___projection ((a states_t__ref)) states_t (states_t__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 3)) (in_range1 temp___expr_147)))

(declare-fun to_rep (states_t) Int)

(declare-fun of_rep (Int) states_t)

;; inversion_axiom
  (assert
  (forall ((x states_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x states_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort triggers_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (triggers_t triggers_t) Bool)

(declare-fun dummy1 () triggers_t)

(declare-datatypes ()
((triggers_t__ref (mk_triggers_t__ref (triggers_t__content triggers_t)))))
(define-fun triggers_t__ref___projection ((a triggers_t__ref)) triggers_t 
  (triggers_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= 0 4)) (in_range2 temp___expr_153)))

(declare-fun to_rep1 (triggers_t) Int)

(declare-fun of_rep1 (Int) triggers_t)

;; inversion_axiom
  (assert
  (forall ((x triggers_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x triggers_t)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun get_state (Int) Int)

(declare-fun get_state__function_guard (Int Int) Bool)

;; get_state__post_axiom
  (assert
  (forall ((sm_using_case_expression__state Int))
  (! (=> (dynamic_invariant sm_using_case_expression__state true true true)
     (let ((result (get_state sm_using_case_expression__state)))
     (=> (get_state__function_guard result sm_using_case_expression__state)
     (dynamic_invariant result true false true)))) :pattern ((get_state
                                                             sm_using_case_expression__state)) )))

;; get_state__def_axiom
  (assert
  (forall ((sm_using_case_expression__state Int))
  (! (=>
     (and (dynamic_invariant sm_using_case_expression__state true true true)
     (get_state__function_guard (get_state sm_using_case_expression__state)
     sm_using_case_expression__state))
     (= (get_state sm_using_case_expression__state) sm_using_case_expression__state)) :pattern (
  (get_state sm_using_case_expression__state)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__sm_using_case_expression__invalid_transition_record_t__initial_state states_t)(rec__sm_using_case_expression__invalid_transition_record_t__trigger triggers_t)))))
(define-fun us_split_fields_Initial_State__projection ((a us_split_fields)) states_t 
  (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
  a))

(define-fun us_split_fields_Trigger__projection ((a us_split_fields)) triggers_t 
  (rec__sm_using_case_expression__invalid_transition_record_t__trigger a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
                           (us_split_fields1 a))) (to_rep
                                                  (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__sm_using_case_expression__invalid_transition_record_t__trigger
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__sm_using_case_expression__invalid_transition_record_t__trigger
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit () Int)

(declare-fun sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit () Int)

(declare-fun sm_using_case_expression__invalid_transition_record_t__initial_state__position () Int)

;; sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit))

;; sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit_axiom
  (assert
  (< sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit 
  sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit))

;; sm_using_case_expression__invalid_transition_record_t__initial_state__position_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__initial_state__position))

(declare-fun sm_using_case_expression__invalid_transition_record_t__trigger__first__bit () Int)

(declare-fun sm_using_case_expression__invalid_transition_record_t__trigger__last__bit () Int)

(declare-fun sm_using_case_expression__invalid_transition_record_t__trigger__position () Int)

;; sm_using_case_expression__invalid_transition_record_t__trigger__first__bit_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__trigger__first__bit))

;; sm_using_case_expression__invalid_transition_record_t__trigger__last__bit_axiom
  (assert
  (< sm_using_case_expression__invalid_transition_record_t__trigger__first__bit 
  sm_using_case_expression__invalid_transition_record_t__trigger__last__bit))

;; sm_using_case_expression__invalid_transition_record_t__trigger__position_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__trigger__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((invalid_transition_record_t__ref
 (mk_invalid_transition_record_t__ref
 (invalid_transition_record_t__content us_rep)))))
(define-fun invalid_transition_record_t__ref___projection ((a invalid_transition_record_t__ref)) us_rep 
  (invalid_transition_record_t__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq2 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq2 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun invalid_transition_array () (Array Int us_rep))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun sm_using_case_expression__invalid_transition_array__aggregate_def (us_rep
  us_rep us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___134 us_rep) (temp___135 us_rep) (temp___136 us_rep)
  (temp___137 us_rep) (temp___138 us_rep) (temp___139 us_rep)
  (temp___140 us_rep) (temp___141 us_rep) (temp___142 us_rep))
  (let ((temp___133 (sm_using_case_expression__invalid_transition_array__aggregate_def
                    temp___134 temp___135 temp___136 temp___137 temp___138
                    temp___139 temp___140 temp___141 temp___142)))
  (forall ((temp___143 Int))
  (ite (= temp___143 8) (= (select temp___133 temp___143) temp___141)
  (ite (= temp___143 7) (= (select temp___133 temp___143) temp___140)
  (ite (= temp___143 6) (= (select temp___133 temp___143) temp___139)
  (ite (= temp___143 5) (= (select temp___133 temp___143) temp___138)
  (ite (= temp___143 4) (= (select temp___133 temp___143) temp___137)
  (ite (= temp___143 3) (= (select temp___133 temp___143) temp___136)
  (ite (= temp___143 2) (= (select temp___133 temp___143) temp___135)
  (ite (= temp___143 1) (= (select temp___133 temp___143) temp___134)
  (= (select temp___133 temp___143) temp___142)))))))))))))

(declare-fun my_sm (Int Int) Int)

(declare-fun my_sm__function_guard (Int Int Int) Bool)

;; my_sm__post_axiom
  (assert
  (forall ((state Int) (trigger Int))
  (! (=>
     (and (dynamic_invariant state true true true) (dynamic_invariant1
     trigger true true true))
     (let ((result (my_sm state trigger)))
     (=> (my_sm__function_guard result state trigger) (dynamic_invariant
     result true false true)))) :pattern ((my_sm state trigger)) )))

;; my_sm__def_axiom
  (assert
  (forall ((state Int) (trigger Int))
  (! (=>
     (and
     (and (dynamic_invariant state true true true) (dynamic_invariant1
     trigger true true true)) (my_sm__function_guard (my_sm state trigger)
     state trigger))
     (= (my_sm state trigger) (ite (= state 0)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 1 (ite (= trigger 1) 0 3))))
                              (ite (= state 1)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 2 (ite (= trigger 1) 1 3))))
                              (ite (= state 2)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 2 (ite (= trigger 1) 2 3))))
                              (ite (= trigger 2) 0 (ite (= trigger 3) 2 3))))))) :pattern (
  (my_sm state trigger)) )))

(declare-fun trigger () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun old_state () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

;; invalid_transition_array__def_axiom
  (assert
  (= invalid_transition_array (sm_using_case_expression__invalid_transition_array__aggregate_def
                              (mk___rep
                              (mk___split_fields (of_rep 0) (of_rep1 4)))
                              (mk___rep
                              (mk___split_fields (of_rep 1) (of_rep1 4)))
                              (mk___rep
                              (mk___split_fields (of_rep 2) (of_rep1 4)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 0)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 1)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 2)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 3)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 4)))
                              (mk___rep
                              (mk___split_fields (of_rep 3) (of_rep1 4))))))

(declare-fun state () Int)

(declare-fun o () triggers_t)

(declare-fun o1 () states_t)

(declare-fun o2 () states_t)

(declare-fun o3 () triggers_t)

(declare-fun o4 () triggers_t)

(declare-fun o5 () states_t)

(declare-fun o6 () states_t)

(declare-fun o7 () triggers_t)

(declare-fun o8 () triggers_t)

(declare-fun o9 () states_t)

(declare-fun o10 () states_t)

(declare-fun o11 () triggers_t)

(declare-fun o12 () triggers_t)

(declare-fun o13 () states_t)

(declare-fun o14 () states_t)

(declare-fun o15 () triggers_t)

(declare-fun o16 () triggers_t)

(declare-fun o17 () states_t)

(declare-fun o18 () states_t)

(declare-fun o19 () triggers_t)

(declare-fun o20 () triggers_t)

(declare-fun o21 () states_t)

(declare-fun o22 () states_t)

(declare-fun o23 () triggers_t)

(declare-fun o24 () triggers_t)

(declare-fun o25 () states_t)

(declare-fun o26 () states_t)

(declare-fun o27 () triggers_t)

(declare-fun o28 () triggers_t)

(declare-fun o29 () states_t)

(declare-fun o30 () states_t)

(declare-fun o31 () triggers_t)

(declare-fun o32 () triggers_t)

(declare-fun o33 () states_t)

(declare-fun o34 () states_t)

(declare-fun o35 () triggers_t)

(declare-fun o36 () states_t)

(declare-fun o37 () triggers_t)

(declare-fun o38 () states_t)

(declare-fun o39 () triggers_t)

(declare-fun o40 () states_t)

(declare-fun o41 () triggers_t)

(declare-fun o42 () states_t)

(declare-fun o43 () triggers_t)

(declare-fun o44 () states_t)

(declare-fun o45 () triggers_t)

(declare-fun o46 () states_t)

(declare-fun o47 () triggers_t)

(declare-fun o48 () us_rep)

(declare-fun o49 () us_rep)

(declare-fun o50 () us_rep)

(declare-fun temp___199 () (Array Int us_rep))

;; H
  (assert (= (to_rep1 o32) 4))

;; H
  (assert (= (to_rep o33) 3))

;; H
  (assert (= o33 o34))

;; H
  (assert (= o32 o35))

;; H
  (assert (= o36 o34))

;; H
  (assert (= o37 o35))

;; H
  (assert (= (to_rep1 o28) 4))

;; H
  (assert (= (to_rep o29) 3))

;; H
  (assert (= o29 o30))

;; H
  (assert (= o28 o31))

;; H
  (assert (= o38 o30))

;; H
  (assert (= o39 o31))

;; H
  (assert (= (to_rep1 o24) 3))

;; H
  (assert (= (to_rep o25) 3))

;; H
  (assert (= o25 o26))

;; H
  (assert (= o24 o27))

;; H
  (assert (= o40 o26))

;; H
  (assert (= o41 o27))

;; H
  (assert (= (to_rep1 o20) 2))

;; H
  (assert (= (to_rep o21) 3))

;; H
  (assert (= o21 o22))

;; H
  (assert (= o20 o23))

;; H
  (assert (= o42 o22))

;; H
  (assert (= o43 o23))

;; H
  (assert (= (to_rep1 o16) 1))

;; H
  (assert (= (to_rep o17) 3))

;; H
  (assert (= o17 o18))

;; H
  (assert (= o16 o19))

;; H
  (assert (= o44 o18))

;; H
  (assert (= o45 o19))

;; H
  (assert (= (to_rep1 o12) 0))

;; H
  (assert (= (to_rep o13) 3))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert (= o46 o14))

;; H
  (assert (= o47 o15))

;; H
  (assert (= (to_rep1 o8) 4))

;; H
  (assert (= (to_rep o9) 2))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= o48 (mk___rep (mk___split_fields o10 o11))))

;; H
  (assert (= (to_rep1 o4) 4))

;; H
  (assert (= (to_rep o5) 1))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= o49 (mk___rep (mk___split_fields o6 o7))))

;; H
  (assert (= (to_rep1 o) 4))

;; H
  (assert (= (to_rep o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o50 (mk___rep (mk___split_fields o2 o3))))

;; H
  (assert
  (= temp___199 (sm_using_case_expression__invalid_transition_array__aggregate_def
                o50 o49 o48 (mk___rep (mk___split_fields o46 o47))
                (mk___rep (mk___split_fields o44 o45))
                (mk___rep (mk___split_fields o42 o43))
                (mk___rep (mk___split_fields o40 o41))
                (mk___rep (mk___split_fields o38 o39))
                (mk___rep (mk___split_fields o36 o37)))))

;; H
  (assert (= temp___199 invalid_transition_array))

;; H
  (assert (in_range1 state))

;; H
  (assert (in_range2 trigger))

;; H
  (assert (= state old_state))

;; H
  (assert (in_range1 old_state))

;; H
  (assert
  (forall ((initial_state Int) (trigger2 Int)) (my_sm__function_guard
  (my_sm initial_state trigger2) initial_state trigger2)))

;; H
  (assert
  (forall ((final_state Int))
  (=> (and (<= 0 final_state) (<= final_state 3))
  (exists ((initial_state Int))
  (and (and (<= 0 initial_state) (<= initial_state 3))
  (exists ((trigger2 Int))
  (and (and (<= 0 trigger2) (<= trigger2 4))
  (= final_state (my_sm initial_state trigger2)))))))))

(declare-fun state2 () Int)

;; H
  (assert (<= 0 state2))

;; H
  (assert (<= state2 3))

(declare-fun trigger1 () Int)

;; H
  (assert (<= 0 trigger1))

;; H
  (assert (<= trigger1 4))

(assert
;; WP_parameter_def
 ;; File "sm_types.ads", line 8, characters 0-0
  (not
  (or
  (=> (my_sm__function_guard (my_sm state2 trigger1) state2 trigger1)
  (not (= (my_sm state2 trigger1) 3)))
  (exists ((idx Int))
  (and (and (<= 1 idx) (<= idx 20))
  (and
  (= (to_rep
     (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
     (us_split_fields1 (select invalid_transition_array idx)))) state2)
  (= (to_rep1
     (rec__sm_using_case_expression__invalid_transition_record_t__trigger
     (us_split_fields1 (select invalid_transition_array idx)))) trigger1)))))))
(check-sat)
