;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq5 (us_rep us_rep) Bool)

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((unbounded_string__ref
 (mk_unbounded_string__ref (unbounded_string__content us_rep)))))
(define-fun unbounded_string__ref___projection ((a unbounded_string__ref)) us_rep 
  (unbounded_string__content a))

(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool)
  (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun to_string1 (us_rep) us_t)

(declare-fun to_string__function_guard (us_t us_rep) Bool)

(declare-fun to_string2 (Int us_rep) us_t)

(declare-fun to_string__function_guard1 (us_t Int us_rep) Bool)

;; to_string__post_axiom
  (assert
  (forall ((source us_rep)) (! (dynamic_invariant (to_string1 source) true
  false true) :pattern ((to_string1 source)) )))

;; to_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((source us_rep)) (! (dynamic_invariant
  (to_string2 attr__tag source) true false
  true) :pattern ((to_string2 attr__tag source)) ))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__people__person__name us_rep)(rec__people__person__dob integer)(rec__people__person__alive Bool)(rec__ext__ us_private)))))
(define-fun us_split_fields_Name__projection ((a us_split_fields)) us_rep 
  (rec__people__person__name a))

(define-fun us_split_fields_DOB__projection ((a us_split_fields)) integer 
  (rec__people__person__dob a))

(define-fun us_split_fields_Alive__projection ((a us_split_fields)) Bool 
  (rec__people__person__alive a))

(define-fun us_split_fields_3__projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep_11__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep_12__projection ((a us_rep1)) Int (attr__tag a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq5
                            (rec__people__person__name (us_split_fields1 a))
                            (rec__people__person__name (us_split_fields1 b))) true)
                         (= (to_rep1
                            (rec__people__person__dob (us_split_fields1 a))) 
                         (to_rep1
                         (rec__people__person__dob (us_split_fields1 b)))))
                         (= (rec__people__person__alive (us_split_fields1 a)) 
                         (rec__people__person__alive (us_split_fields1 b))))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun people__person__name__first__bit () Int)

(declare-fun people__person__name__last__bit () Int)

(declare-fun people__person__name__position () Int)

;; people__person__name__first__bit_axiom
  (assert (<= 0 people__person__name__first__bit))

;; people__person__name__last__bit_axiom
  (assert
  (< people__person__name__first__bit people__person__name__last__bit))

;; people__person__name__position_axiom
  (assert (<= 0 people__person__name__position))

(declare-fun people__person__dob__first__bit () Int)

(declare-fun people__person__dob__last__bit () Int)

(declare-fun people__person__dob__position () Int)

;; people__person__dob__first__bit_axiom
  (assert (<= 0 people__person__dob__first__bit))

;; people__person__dob__last__bit_axiom
  (assert (< people__person__dob__first__bit people__person__dob__last__bit))

;; people__person__dob__position_axiom
  (assert (<= 0 people__person__dob__position))

(declare-fun people__person__alive__first__bit () Int)

(declare-fun people__person__alive__last__bit () Int)

(declare-fun people__person__alive__position () Int)

;; people__person__alive__first__bit_axiom
  (assert (<= 0 people__person__alive__first__bit))

;; people__person__alive__last__bit_axiom
  (assert
  (< people__person__alive__first__bit people__person__alive__last__bit))

;; people__person__alive__position_axiom
  (assert (<= 0 people__person__alive__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((person__ref (mk_person__ref (person__content us_rep1)))))
(define-fun person__ref___projection ((a person__ref)) us_rep1 (person__content
                                                               a))

(declare-fun to_unbounded_string (us_t) us_rep)

(declare-fun to_unbounded_string__function_guard (us_rep us_t) Bool)

(declare-fun to_unbounded_string1 (Int us_t) us_rep)

(declare-fun to_unbounded_string__function_guard1 (us_rep Int us_t) Bool)

(declare-fun temp___String_Literal_928 (tuple0) (Array Int character))

;; temp___String_Literal_928__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 2)) 97))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 3)) 109))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_928 us_void_param) 8)) 115)) :pattern (
  (temp___String_Literal_928 us_void_param)) )))

(define-fun default_initial_assumption ((temp___expr_926 us_rep1)
  (temp___skip_top_level_927 Bool)) Bool (and
                                         (= (attr__tag temp___expr_926) 
                                         us_tag)
                                         (and
                                         (and
                                         (= (rec__people__person__name
                                            (us_split_fields1
                                            temp___expr_926)) (to_unbounded_string
                                                              (of_array
                                                              (temp___String_Literal_928
                                                              Tuple0) 1 8)))
                                         (= (to_rep1
                                            (rec__people__person__dob
                                            (us_split_fields1
                                            temp___expr_926))) (- 1)))
                                         (= (rec__people__person__alive
                                            (us_split_fields1
                                            temp___expr_926)) (of_int 0)))))

(declare-fun get_name (us_rep1) us_rep)

(declare-fun get_name__function_guard (us_rep us_rep1) Bool)

(declare-fun get_name1 (Int us_rep1) us_rep)

(declare-fun get_name__function_guard1 (us_rep Int us_rep1) Bool)

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-fun dummy6 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort professions 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (professions professions) Bool)

(declare-fun dummy7 () professions)

(declare-datatypes ()
((professions__ref (mk_professions__ref (professions__content professions)))))
(define-fun professions__ref___projection ((a professions__ref)) professions 
  (professions__content a))

(declare-fun to_rep3 (professions) Int)

(declare-fun of_rep3 (Int) professions)

;; inversion_axiom
  (assert
  (forall ((x professions))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x professions)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort skills 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (skills skills) Bool)

(declare-fun dummy8 () skills)

(declare-datatypes ()
((skills__ref (mk_skills__ref (skills__content skills)))))
(define-fun skills__ref___projection ((a skills__ref)) skills (skills__content
                                                              a))

(declare-fun to_rep4 (skills) Int)

(declare-fun of_rep4 (Int) skills)

;; inversion_axiom
  (assert
  (forall ((x skills))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x skills)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int skills))))))
(declare-fun slide1 ((Array Int skills) Int Int) (Array Int skills))

;; slide_eq
  (assert
  (forall ((a (Array Int skills)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int skills)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int skills) Int Int (Array Int skills) Int
  Int) (Array Int skills))

;; concat_def
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (skills Int) (Array Int skills))

;; singleton_def
  (assert
  (forall ((v skills))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq10 ((a (Array Int skills)) (a__first Int) (a__last Int)
  (b (Array Int skills)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_159 Int))
                           (=>
                           (and (<= a__first temp___idx_159)
                           (<= temp___idx_159 a__last))
                           (= (to_rep4 (select a temp___idx_159)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_159)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_159 Int))
  (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (= (to_rep4 (select a temp___idx_159)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_159)))))))))))

(declare-fun compare1 ((Array Int skills) Int Int (Array Int skills) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq10 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq10 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq10 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun dummy9 () (Array Int skills))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int skills)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int skills)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int skills)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int skills))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int skills))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int skills))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq9 ((Array Int skills) (Array Int skills)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__professionals__professional__profession professions)(rec__professionals__professional__skilled_in (Array Int skills))(rec__professionals__professional__number_of_people_killed natural)(rec__people__person__name1 us_rep)(rec__people__person__dob1 integer)(rec__people__person__alive1 Bool)(rec__ext__1 us_private)))))
(define-fun us_split_fields_Profession__projection ((a us_split_fields2)) professions 
  (rec__professionals__professional__profession a))

(define-fun us_split_fields_Skilled_In__projection ((a us_split_fields2)) (Array Int skills) 
  (rec__professionals__professional__skilled_in a))

(define-fun us_split_fields_Number_Of_People_Killed__projection ((a us_split_fields2)) natural 
  (rec__professionals__professional__number_of_people_killed a))

(define-fun us_split_fields_Name2__projection ((a us_split_fields2)) us_rep 
  (rec__people__person__name1 a))

(define-fun us_split_fields_DOB2__projection ((a us_split_fields2)) integer 
  (rec__people__person__dob1 a))

(define-fun us_split_fields_Alive2__projection ((a us_split_fields2)) Bool 
  (rec__people__person__alive1 a))

(define-fun us_split_fields_5__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_15__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                 a))

(define-fun us_rep_16__projection ((a us_rep2)) Int (attr__tag1 a))

(declare-fun hide_ext__ (professions (Array Int skills) natural
  us_private) us_private)

(declare-fun extract__profession (us_private) professions)

;; extract__profession__conv
  (assert
  (forall ((profession professions))
  (forall ((skilled_in (Array Int skills)))
  (forall ((number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__profession
     (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) profession))))))

(declare-fun extract__skilled_in (us_private) (Array Int skills))

;; extract__skilled_in__conv
  (assert
  (forall ((profession professions))
  (forall ((skilled_in (Array Int skills)))
  (forall ((number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__skilled_in
     (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) skilled_in))))))

(declare-fun extract__number_of_people_killed (us_private) natural)

;; extract__number_of_people_killed__conv
  (assert
  (forall ((profession professions))
  (forall ((skilled_in (Array Int skills)))
  (forall ((number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__number_of_people_killed
     (hide_ext__ profession skilled_in number_of_people_killed rec__ext__2)) number_of_people_killed))))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep2)) us_rep1 (mk___rep
                                          (mk___split_fields
                                          (rec__people__person__name1
                                          (us_split_fields3 a))
                                          (rec__people__person__dob1
                                          (us_split_fields3 a))
                                          (rec__people__person__alive1
                                          (us_split_fields3 a))
                                          (hide_ext__
                                          (rec__professionals__professional__profession
                                          (us_split_fields3 a))
                                          (rec__professionals__professional__skilled_in
                                          (us_split_fields3 a))
                                          (rec__professionals__professional__number_of_people_killed
                                          (us_split_fields3 a))
                                          (rec__ext__1 (us_split_fields3 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r us_rep1)) us_rep2 (mk___rep1
                                          (mk___split_fields1
                                          (extract__profession
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__skilled_in
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__number_of_people_killed
                                          (rec__ext__ (us_split_fields1 r)))
                                          (rec__people__person__name
                                          (us_split_fields1 r))
                                          (rec__people__person__dob
                                          (us_split_fields1 r))
                                          (rec__people__person__alive
                                          (us_split_fields1 r))
                                          (extract__ext__
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq11 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep3
                            (rec__professionals__professional__profession
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__professionals__professional__profession
                                                   (us_split_fields3 b))))
                         (= (bool_eq10
                            (rec__professionals__professional__skilled_in
                            (us_split_fields3 a)) 1 4
                            (rec__professionals__professional__skilled_in
                            (us_split_fields3 b)) 1 4) true))
                         (= (to_rep2
                            (rec__professionals__professional__number_of_people_killed
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__professionals__professional__number_of_people_killed
                                                   (us_split_fields3 b)))))
                         (= (bool_eq5
                            (rec__people__person__name1 (us_split_fields3 a))
                            (rec__people__person__name1 (us_split_fields3 b))) true))
                         (= (to_rep1
                            (rec__people__person__dob1 (us_split_fields3 a))) 
                         (to_rep1
                         (rec__people__person__dob1 (us_split_fields3 b)))))
                         (= (rec__people__person__alive1
                            (us_split_fields3 a)) (rec__people__person__alive1
                                                  (us_split_fields3 b))))
                    true false))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-fun professionals__professional__profession__first__bit () Int)

(declare-fun professionals__professional__profession__last__bit () Int)

(declare-fun professionals__professional__profession__position () Int)

;; professionals__professional__profession__first__bit_axiom
  (assert (<= 0 professionals__professional__profession__first__bit))

;; professionals__professional__profession__last__bit_axiom
  (assert
  (< professionals__professional__profession__first__bit professionals__professional__profession__last__bit))

;; professionals__professional__profession__position_axiom
  (assert (<= 0 professionals__professional__profession__position))

(declare-fun professionals__professional__skilled_in__first__bit () Int)

(declare-fun professionals__professional__skilled_in__last__bit () Int)

(declare-fun professionals__professional__skilled_in__position () Int)

;; professionals__professional__skilled_in__first__bit_axiom
  (assert (<= 0 professionals__professional__skilled_in__first__bit))

;; professionals__professional__skilled_in__last__bit_axiom
  (assert
  (< professionals__professional__skilled_in__first__bit professionals__professional__skilled_in__last__bit))

;; professionals__professional__skilled_in__position_axiom
  (assert (<= 0 professionals__professional__skilled_in__position))

(declare-fun professionals__professional__number_of_people_killed__first__bit () Int)

(declare-fun professionals__professional__number_of_people_killed__last__bit () Int)

(declare-fun professionals__professional__number_of_people_killed__position () Int)

;; professionals__professional__number_of_people_killed__first__bit_axiom
  (assert
  (<= 0 professionals__professional__number_of_people_killed__first__bit))

;; professionals__professional__number_of_people_killed__last__bit_axiom
  (assert
  (< professionals__professional__number_of_people_killed__first__bit 
  professionals__professional__number_of_people_killed__last__bit))

;; professionals__professional__number_of_people_killed__position_axiom
  (assert
  (<= 0 professionals__professional__number_of_people_killed__position))

(declare-fun people__person__name__first__bit1 () Int)

(declare-fun people__person__name__last__bit1 () Int)

(declare-fun people__person__name__position1 () Int)

;; people__person__name__first__bit_axiom
  (assert (<= 0 people__person__name__first__bit1))

;; people__person__name__last__bit_axiom
  (assert
  (< people__person__name__first__bit1 people__person__name__last__bit1))

;; people__person__name__position_axiom
  (assert (<= 0 people__person__name__position1))

(declare-fun people__person__dob__first__bit1 () Int)

(declare-fun people__person__dob__last__bit1 () Int)

(declare-fun people__person__dob__position1 () Int)

;; people__person__dob__first__bit_axiom
  (assert (<= 0 people__person__dob__first__bit1))

;; people__person__dob__last__bit_axiom
  (assert
  (< people__person__dob__first__bit1 people__person__dob__last__bit1))

;; people__person__dob__position_axiom
  (assert (<= 0 people__person__dob__position1))

(declare-fun people__person__alive__first__bit1 () Int)

(declare-fun people__person__alive__last__bit1 () Int)

(declare-fun people__person__alive__position1 () Int)

;; people__person__alive__first__bit_axiom
  (assert (<= 0 people__person__alive__first__bit1))

;; people__person__alive__last__bit_axiom
  (assert
  (< people__person__alive__first__bit1 people__person__alive__last__bit1))

;; people__person__alive__position_axiom
  (assert (<= 0 people__person__alive__position1))

(declare-fun dummy10 () us_rep2)

(declare-datatypes ()
((professional__ref (mk_professional__ref (professional__content us_rep2)))))
(define-fun professional__ref___projection ((a professional__ref)) us_rep2 
  (professional__content a))

;; get_name__post_axiom
  (assert true)

;; get_name__post__dispatch_axiom
  (assert true)

;; professionals__professional__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (= (get_name p) (get_name1 us_tag1 p)) :pattern ((get_name1 us_tag1 p)) )))

;; people__person__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (= (get_name p) (get_name1 us_tag p)) :pattern ((get_name1 us_tag p)) )))

(declare-fun is_alive (us_rep1) Bool)

(declare-fun is_alive__function_guard (Bool us_rep1) Bool)

(declare-fun is_alive1 (Int us_rep1) Bool)

(declare-fun is_alive__function_guard1 (Bool Int us_rep1) Bool)

;; is_alive__post_axiom
  (assert true)

;; is_alive__post__dispatch_axiom
  (assert true)

;; professionals__professional__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (= (to_int1 (is_alive p)) (to_int1 (is_alive1 us_tag1 p))) :pattern (
  (is_alive1 us_tag1 p)) )))

;; people__person__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (= (to_int1 (is_alive p)) (to_int1 (is_alive1 us_tag p))) :pattern (
  (is_alive1 us_tag p)) )))

(define-fun default_initial_assumption1 ((temp___expr_980 us_rep2)
  (temp___skip_top_level_981 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_980) 
                                         us_tag1)
                                         (and
                                         (and
                                         (= (rec__people__person__name1
                                            (us_split_fields3
                                            temp___expr_980)) (to_unbounded_string
                                                              (of_array
                                                              (temp___String_Literal_928
                                                              Tuple0) 1 8)))
                                         (= (to_rep1
                                            (rec__people__person__dob1
                                            (us_split_fields3
                                            temp___expr_980))) (- 1)))
                                         (= (rec__people__person__alive1
                                            (us_split_fields3
                                            temp___expr_980)) (of_int 0)))))

(declare-fun this () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun temp___String_Literal_1058 (tuple0) (Array Int character))

;; temp___String_Literal_1058__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1058 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1058 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_1058 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_1058 us_void_param) 4)) 32)) :pattern (
  (temp___String_Literal_1058 us_void_param)) )))

(declare-fun temp___String_Literal_1061 (tuple0) (Array Int character))

;; temp___String_Literal_1061__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1061 us_void_param) 1)) 100)
     (= (to_rep (select (temp___String_Literal_1061 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_1061 us_void_param) 3)) 97))
     (= (to_rep (select (temp___String_Literal_1061 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_1061 us_void_param) 5)) 46)) :pattern (
  (temp___String_Literal_1061 us_void_param)) )))

(declare-fun temp___String_Literal_1062 (tuple0) (Array Int character))

;; temp___String_Literal_1062__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 1)) 97)
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 2)) 108))
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 3)) 105))
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 4)) 118))
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1062 us_void_param) 6)) 46)) :pattern (
  (temp___String_Literal_1062 us_void_param)) )))

(declare-fun temp___String_Literal_1063 (tuple0) (Array Int character))

;; temp___String_Literal_1063__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 2)) 114))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 4)) 102))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 6)) 115))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 9)) 111))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 10)) 110))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 11)) 58))
     (= (to_rep (select (temp___String_Literal_1063 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_1063 us_void_param)) )))

(declare-fun temp___String_Literal_1066 (tuple0) (Array Int character))

;; temp___String_Literal_1066__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 2)) 107))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 3)) 105))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 7)) 100))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 10)) 110))
     (= (to_rep (select (temp___String_Literal_1066 us_void_param) 11)) 32)) :pattern (
  (temp___String_Literal_1066 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant5 ((temp___expr_951 Int)
  (temp___is_init_948 Bool) (temp___skip_constant_949 Bool)
  (temp___do_toplevel_950 Bool)) Bool (=>
                                      (or (= temp___is_init_948 true)
                                      (<= 0 3)) (in_range5 temp___expr_951)))

(define-fun dynamic_invariant6 ((temp___expr_957 Int)
  (temp___is_init_954 Bool) (temp___skip_constant_955 Bool)
  (temp___do_toplevel_956 Bool)) Bool (=>
                                      (or (= temp___is_init_954 true)
                                      (<= 0 12)) (in_range6 temp___expr_957)))

;; to_unbounded_string__post_axiom
  (assert true)

;; to_unbounded_string__post__dispatch_axiom
  (assert true)

(declare-fun i () Int)

(declare-fun o () us_rep)

(declare-fun temp___1059 () (Array Int character))

(declare-fun temp___10591 () t)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () (Array Int character))

(declare-fun o8 () t)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () (Array Int character))

(declare-fun o16 () t)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun result () Bool)

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(define-fun temp___10592 () us_t (mk___t temp___1059 temp___10591))

;; H
  (assert
  (= o (get_name
       (mk___rep
       (mk___split_fields
       (rec__people__person__name1 (us_split_fields3 this))
       (rec__people__person__dob1 (us_split_fields3 this))
       (rec__people__person__alive1 (us_split_fields3 this))
       (hide_ext__
       (rec__professionals__professional__profession (us_split_fields3 this))
       (rec__professionals__professional__skilled_in (us_split_fields3 this))
       (rec__professionals__professional__number_of_people_killed
       (us_split_fields3 this)) (rec__ext__1 (us_split_fields3 this))))
       (attr__tag1 this)))))

;; H
  (assert
  (and (= temp___10592 (to_string1 o)) (dynamic_invariant temp___10592 true
  false true)))

;; H
  (assert
  (=> (= (length temp___10592) 0) (= (temp___String_Literal_1058 Tuple0) o7)))

;; H
  (assert (=> (= (length temp___10592) 0) (= (mk 1 4) o8)))

;; H
  (assert
  (=> (not (= (length temp___10592) 0)) (=> (<= 1 4) (= o1 (+ (- 4 1) 1)))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0)) (=> (not (<= 1 4)) (= o1 0))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0))
  (=> (<= (to_rep1 (first temp___10591)) (to_rep1 (last temp___10591)))
  (= o2 (+ (- (to_rep1 (last temp___10591)) (to_rep1 (first temp___10591))) 1)))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0))
  (=> (not (<= (to_rep1 (first temp___10591)) (to_rep1 (last temp___10591))))
  (= o2 0))))

;; H
  (assert (=> (not (= (length temp___10592) 0)) (= o3 (+ o2 o1))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0))
  (= o4 (+ (to_rep1 (first temp___10591)) o3))))

;; H
  (assert (=> (not (= (length temp___10592) 0)) (= o5 (- o4 1))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0)) (and (= o6 o5) (in_range2 o5))))

;; H
  (assert
  (=> (not (= (length temp___10592) 0))
  (= (concat1 temp___1059 (to_rep1 (first temp___10591))
     (to_rep1 (last temp___10591)) (temp___String_Literal_1058 Tuple0) 1 4) 
  o7)))

;; H
  (assert
  (=> (not (= (length temp___10592) 0))
  (= (mk (to_rep1 (first temp___10591)) o6) o8)))

;; H
  (assert
  (= result (is_alive
            (mk___rep
            (mk___split_fields
            (rec__people__person__name1 (us_split_fields3 this))
            (rec__people__person__dob1 (us_split_fields3 this))
            (rec__people__person__alive1 (us_split_fields3 this))
            (hide_ext__
            (rec__professionals__professional__profession
            (us_split_fields3 this))
            (rec__professionals__professional__skilled_in
            (us_split_fields3 this))
            (rec__professionals__professional__number_of_people_killed
            (us_split_fields3 this)) (rec__ext__1 (us_split_fields3 this))))
            (attr__tag1 this)))))

;; H
  (assert
  (=>
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE5
      (to_rep3
      (rec__professionals__professional__profession (us_split_fields3 this)))))))) 
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE5
  (to_rep3
  (rec__professionals__professional__profession (us_split_fields3 this)))))))))
  (= o9 (+ (- (to_rep1
              (last
              (rt
              (to_string
              (attr__ATTRIBUTE_IMAGE5
              (to_rep3
              (rec__professionals__professional__profession
              (us_split_fields3 this)))))))) (to_rep1
                                             (first
                                             (rt
                                             (to_string
                                             (attr__ATTRIBUTE_IMAGE5
                                             (to_rep3
                                             (rec__professionals__professional__profession
                                             (us_split_fields3 this))))))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE5
      (to_rep3
      (rec__professionals__professional__profession (us_split_fields3 this)))))))) 
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE5
  (to_rep3
  (rec__professionals__professional__profession (us_split_fields3 this))))))))))
  (= o9 0)))

;; H
  (assert (=> (<= 1 12) (= o10 (+ (- 12 1) 1))))

;; H
  (assert (=> (not (<= 1 12)) (= o10 0)))

;; H
  (assert (= o11 (+ o10 o9)))

;; H
  (assert (= o12 (+ 1 o11)))

;; H
  (assert (= o13 (- o12 1)))

;; H
  (assert (and (= o14 o13) (in_range2 o13)))

;; H
  (assert
  (= o15 (concat1 (temp___String_Literal_1063 Tuple0) 1 12
         (elts
         (to_string
         (attr__ATTRIBUTE_IMAGE5
         (to_rep3
         (rec__professionals__professional__profession
         (us_split_fields3 this))))))
         (to_rep1
         (first
         (rt
         (to_string
         (attr__ATTRIBUTE_IMAGE5
         (to_rep3
         (rec__professionals__professional__profession
         (us_split_fields3 this))))))))
         (to_rep1
         (last
         (rt
         (to_string
         (attr__ATTRIBUTE_IMAGE5
         (to_rep3
         (rec__professionals__professional__profession
         (us_split_fields3 this)))))))))))

;; H
  (assert (= o16 (mk 1 o14)))

;; H
  (assert (= result1 i))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 4))

;; H
  (assert (and (<= 1 i2) (<= i2 4)))

;; H
  (assert
  (=>
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE6
      (to_rep4
      (select (rec__professionals__professional__skilled_in
              (us_split_fields3 this)) i2))))))) (to_rep1
                                                 (last
                                                 (rt
                                                 (to_string
                                                 (attr__ATTRIBUTE_IMAGE6
                                                 (to_rep4
                                                 (select (rec__professionals__professional__skilled_in
                                                         (us_split_fields3
                                                         this)) i2))))))))
  (= o17 (+ (- (to_rep1
               (last
               (rt
               (to_string
               (attr__ATTRIBUTE_IMAGE6
               (to_rep4
               (select (rec__professionals__professional__skilled_in
                       (us_split_fields3 this)) i2))))))) (to_rep1
                                                          (first
                                                          (rt
                                                          (to_string
                                                          (attr__ATTRIBUTE_IMAGE6
                                                          (to_rep4
                                                          (select (rec__professionals__professional__skilled_in
                                                                  (us_split_fields3
                                                                  this)) 
                                                          i2)))))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE6
      (to_rep4
      (select (rec__professionals__professional__skilled_in
              (us_split_fields3 this)) i2))))))) (to_rep1
                                                 (last
                                                 (rt
                                                 (to_string
                                                 (attr__ATTRIBUTE_IMAGE6
                                                 (to_rep4
                                                 (select (rec__professionals__professional__skilled_in
                                                         (us_split_fields3
                                                         this)) i2)))))))))
  (= o17 0)))

;; H
  (assert (=> (<= 1 11) (= o18 (+ (- 11 1) 1))))

;; H
  (assert (=> (not (<= 1 11)) (= o18 0)))

;; H
  (assert (= o19 (+ o18 o17)))

;; H
  (assert (= o20 (+ 1 o19)))

;; H
  (assert (= o21 (- o20 1)))

(assert
;; WP_parameter_def
 ;; File "professionals.ads", line 30, characters 0-0
  (not (in_range2 o21)))
(check-sat)
