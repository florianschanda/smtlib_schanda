;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tcount_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-fun dummy1 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_152)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (count_type count_type) Bool)

(declare-fun dummy3 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_146 Int)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_146)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_202 true))
                                         (= (length temp___expr_201) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-fun dummy4 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 0 1)) (in_range4 temp___expr_188)))

(declare-sort extended_index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (extended_index extended_index) Bool)

(declare-fun dummy5 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_194)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant3 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant2 (get container position) true false true)) :pattern (
  (get container position)) ))))

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq2
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy6 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq6 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq6 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(define-fun dynamic_invariant4 ((temp___expr_218 (Array Int us_rep1))
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (forall ((temp___219 Int))
                                      (=>
                                      (and (<= 1 temp___219)
                                      (<= temp___219 100))
                                      (=> (= temp___is_init_215 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_218 temp___219)))) 100)))))

(define-fun default_initial_assumption1 ((temp___expr_221 (Array Int us_rep1))
  (temp___skip_top_level_222 Bool)) Bool (forall ((temp___223 Int))
                                         (=>
                                         (and (<= 1 temp___223)
                                         (<= temp___223 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223))) 
                                         (of_int 0))))))

(declare-sort extended_index_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (extended_index_type extended_index_type) Bool)

(declare-fun dummy7 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range6
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort position_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (position_type position_type) Bool)

(declare-fun dummy8 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range7
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq10 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy9 () us_rep2)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq11 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq10 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq11 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq10 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy10 () (Array Int us_rep2))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int us_rep2)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep2)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq10 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq12 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq11
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy11 () us_rep3)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content
                                                               a))

(declare-fun size (us_rep3) Int)

(declare-fun size__function_guard (Int us_rep3) Bool)

(declare-fun tree_structure (us_rep3) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)

;; temp___result_283_def
  (assert
  (forall ((temp___282 us_rep3)) (tree_structure__function_guard
  (tree_structure temp___282) temp___282)))

(define-fun dynamic_invariant5 ((temp___expr_281 us_rep3)
  (temp___is_init_278 Bool) (temp___skip_constant_279 Bool)
  (temp___do_toplevel_280 Bool)) Bool (= (tree_structure temp___expr_281) true))

;; temp___result_291_def
  (assert
  (forall ((temp___290 us_rep3)) (size__function_guard (size temp___290)
  temp___290)))

(define-fun default_initial_assumption2 ((temp___expr_285 us_rep3)
  (temp___skip_top_level_286 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_285))) 0)
                                         (forall ((temp___288 Int))
                                         (=>
                                         (and (<= 1 temp___288)
                                         (<= temp___288 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_286 true))
                                         (= (size temp___expr_285) 0))))

;; temp___result_294_def
  (assert
  (forall ((temp___293 us_rep3)) (tree_structure__function_guard
  (tree_structure temp___293) temp___293)))

(define-fun type_invariant ((temp___292 us_rep3)) Bool (= (tree_structure
                                                          temp___292) true))

(declare-fun valid_root (us_rep3 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant5 f true true true) (dynamic_invariant i true
     true true))
     (let ((result (valid_root f i)))
     (and (size__function_guard (size f) f)
     (=> (valid_root__function_guard result f i)
     (=> (< (size f) i) (not (= result true))))))) :pattern ((valid_root f i)) ))))

(define-fun dynamic_invariant6 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 100)) (in_range6
                                      temp___expr_158)))

(declare-fun parent (us_rep3 Int) Int)

(declare-fun parent__function_guard (Int us_rep3 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant5 f true true true) (dynamic_invariant i true
     true true))
     (let ((result (parent f i)))
     (and (valid_root__function_guard (valid_root f i) f i)
     (and (size__function_guard (size f) f)
     (=> (parent__function_guard result f i)
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant6 result true false
     true))))))) :pattern ((parent f i)) ))))

(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(declare-fun position (us_rep3 Int) Int)

(declare-fun position__function_guard (Int us_rep3 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((root Int))
  (! (and (valid_root__function_guard (valid_root f root) f root)
     (=>
     (and
     (and (dynamic_invariant5 f true true true) (dynamic_invariant root true
     true true)) (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and
     (forall ((i Int)) (is_add__function_guard
     (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i))))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i)))))
     (=> (model____function_guard result f root)
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant4 result true false true))))))))))))) :pattern (
  (model__ f root)) ))))

(declare-fun f () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun root () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun j () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun m () (Array Int us_rep1))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

;; m__def_axiom
  (assert
  (and (model____function_guard (model__ f root) f root)
  (= m (model__ f root))))

(define-fun dynamic_invariant7 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 0 2)) (in_range7 temp___expr_164)))

(declare-sort direction 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (direction direction) Bool)

(declare-fun dummy12 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant8 ((temp___expr_170 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (<= 0 1)) (in_range8 temp___expr_170)))

(define-fun dynamic_invariant9 ((temp___expr_207 us_rep1)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=> (= temp___do_toplevel_206 true)
                                      (=> (= temp___is_init_204 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_207))) 100))))

(define-fun default_initial_assumption3 ((temp___expr_209 us_rep1)
  (temp___skip_top_level_210 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_209))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_209)) (of_int 0))))

(define-fun dynamic_predicate ((temp___213 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___213))) 100))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (=> (is_add__function_guard (is_add s1 d s2) s1 d s2)
     (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d)))) :pattern ((is_add s1 d s2)) ))))

;; size__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (! (=> (dynamic_invariant5 f1 true true true)
     (let ((result (size f1)))
     (=> (size__function_guard result f1) (dynamic_invariant6 result true
     false true)))) :pattern ((size f1)) )))

;; position__post_axiom
  (assert
  (forall ((f1 us_rep3))
  (forall ((i1 Int))
  (! (and (parent__function_guard (parent f1 i1) f1 i1)
     (=>
     (and
     (and (dynamic_invariant5 f1 true true true) (dynamic_invariant i1 true
     true true)) (not (= (parent f1 i1) 0)))
     (let ((result (position f1 i1)))
     (=> (position__function_guard result f1 i1) (dynamic_invariant8 result
     true false true))))) :pattern ((position f1 i1)) ))))

(define-fun default_initial_assumption4 ((temp___expr_267 us_rep2)
  (temp___skip_top_level_268 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_267))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_267))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_267))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_267))) 2)))

(define-fun default_initial_assumption5 ((temp___expr_274 (Array Int us_rep2))
  (temp___skip_top_level_275 Bool)) Bool (forall ((temp___276 Int))
                                         (=>
                                         (and (<= 1 temp___276)
                                         (<= temp___276 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

(declare-fun ki () Int)

(declare-fun kj () Int)

(declare-fun search_trees__find_root__result () Int)

(declare-fun search_trees__find_root__m__assume () (Array Int us_rep1))

(declare-fun temp___2353 () Int)

(declare-fun temp___2352 () Int)

(declare-fun temp___2355 () Int)

(declare-fun temp___2354 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun result () int__ref)

(declare-fun ki1 () Int)

(declare-fun result1 () int__ref)

(declare-fun kj1 () Int)

(declare-fun ki2 () Int)

(declare-fun kj2 () Int)

(declare-fun temp___23551 () Int)

(declare-fun temp___23541 () Int)

(declare-fun result2 () int__ref)

(declare-fun temp___23552 () Int)

(declare-fun result3 () int__ref)

(declare-fun temp___23542 () Int)

(declare-fun result4 () Bool)

(declare-fun result5 () int__ref)

(declare-fun ki3 () Int)

(declare-fun result6 () Bool)

(declare-fun result7 () int__ref)

(declare-fun kj3 () Int)

(declare-fun result8 () int__ref)

(declare-fun ki4 () Int)

(declare-fun result9 () int__ref)

(declare-fun kj4 () Int)

(declare-fun ki5 () int__ref)

(declare-fun kj5 () int__ref)

(declare-fun ki6 () Int)

(declare-fun kj6 () Int)

(declare-fun ki7 () int__ref)

(declare-fun kj7 () int__ref)

(declare-fun ki8 () Int)

(declare-fun kj8 () Int)

(declare-fun result10 () int__ref)

(declare-fun search_trees__find_root__result1 () Int)

(declare-fun search_trees__find_root__result2 () int__ref)

(declare-fun search_trees__find_root__result3 () Int)

(declare-fun ki9 () int__ref)

(declare-fun kj9 () int__ref)

(declare-fun search_trees__find_root__result4 () int__ref)

(declare-fun ki10 () Int)

(declare-fun kj10 () Int)

(declare-fun search_trees__find_root__result5 () Int)

(declare-fun result11 () Int)

;; H
  (assert (valid_root__function_guard (valid_root f root) f root))

;; H
  (assert (model____function_guard (model__ f root) f root))

;; H
  (assert (model____function_guard (model__ f root) f root))

;; H
  (assert (forall ((i1 Int)) (parent__function_guard (parent f i1) f i1)))

;; H
  (assert (forall ((i1 Int)) (parent__function_guard (parent f i1) f i1)))

;; H
  (assert (forall ((i1 Int)) (parent__function_guard (parent f i1) f i1)))

;; H
  (assert
  (forall ((i1 Int)) (position__function_guard (position f i1) f i1)))

;; H
  (assert (forall ((i1 Int)) (parent__function_guard (parent f i1) f i1)))

;; H
  (assert
  (forall ((i1 Int)) (position__function_guard (position f i1) f i1)))

;; H
  (assert
  (forall ((i1 Int)) (is_add__function_guard
  (is_add
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select search_trees__find_root__m__assume (parent f i1)))) (position f i1)
  (rec__tree_model__path_type__a
  (us_split_fields1 (select search_trees__find_root__m__assume i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select search_trees__find_root__m__assume (parent f i1)))) (position f i1)
  (rec__tree_model__path_type__a
  (us_split_fields1 (select search_trees__find_root__m__assume i1))))))

;; H
  (assert (valid_root__function_guard (valid_root f ki2) f ki2))

;; H
  (assert (size__function_guard (size f) f))

;; H
  (assert (valid_root__function_guard (valid_root f kj2) f kj2))

;; H
  (assert (size__function_guard (size f) f))

;; H
  (assert (valid_root__function_guard (valid_root f ki2) f ki2))

;; H
  (assert (size__function_guard (size f) f))

;; H
  (assert (valid_root__function_guard (valid_root f kj2) f kj2))

;; H
  (assert (size__function_guard (size f) f))

;; H
  (assert (dynamic_invariant5 f true false true))

;; H
  (assert (in_range2 root))

;; H
  (assert (in_range2 i))

;; H
  (assert (in_range2 j))

;; H
  (assert
  (and (= (valid_root f root) true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) i))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__ f root) j))) true))))

;; H
  (assert
  (and
  (and (= search_trees__find_root__m__assume (model__ f root))
  (model____function_guard search_trees__find_root__m__assume f root))
  (and (dynamic_invariant4 search_trees__find_root__m__assume true false
  true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select search_trees__find_root__m__assume root))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select search_trees__find_root__m__assume root)))) 0)
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=> (not (= i1 root))
  (ite (and (not (= (parent f i1) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select search_trees__find_root__m__assume (parent f i1)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select search_trees__find_root__m__assume i1))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select search_trees__find_root__m__assume i1))) true))))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select search_trees__find_root__m__assume i1))) true)
       (not (= i1 root)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select search_trees__find_root__m__assume (parent f i1))))
     (position f i1)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select search_trees__find_root__m__assume i1)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select search_trees__find_root__m__assume i1)))) 0))))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select search_trees__find_root__m__assume i1))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select search_trees__find_root__m__assume j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select search_trees__find_root__m__assume i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select search_trees__find_root__m__assume j1)))) true))
  (= j1 i1))))))))))))))

;; H
  (assert (= search_trees__find_root__m__assume m))

;; H
  (assert (dynamic_invariant4 m true false true))

;; H
  (assert (= result (mk_int__ref ki)))

;; H
  (assert (= ki1 i))

;; H
  (assert (in_range2 ki1))

;; H
  (assert (= result1 (mk_int__ref kj)))

;; H
  (assert (= kj1 j))

;; H
  (assert (in_range2 kj1))

;; H
  (assert (=> (not (= ki1 kj1)) (= temp___2353 ki1)))

;; H
  (assert (=> (not (= ki1 kj1)) (= temp___2352 kj1)))

;; H
  (assert (=> (not (= ki1 kj1)) (= 0 temp___2355)))

;; H
  (assert (=> (not (= ki1 kj1)) (= 0 temp___2354)))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (and
  (= (rec__tree_model__path_type__k (us_split_fields1 (select m ki2))) true)
  (= (ole (rec__tree_model__path_type__a (us_split_fields1 (select m ki2)))
     (rec__tree_model__path_type__a (us_split_fields1 (select m i)))) true))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (= (ole (rec__tree_model__path_type__a (us_split_fields1 (select m kj2)))
     (rec__tree_model__path_type__a (us_split_fields1 (select m j)))) true)))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (= (rec__tree_model__path_type__k (us_split_fields1 (select m kj2))) true)))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=>
  (< (length
     (rec__tree_model__path_type__a (us_split_fields1 (select m kj2)))) 
  (length (rec__tree_model__path_type__a (us_split_fields1 (select m ki2)))))
  (= kj2 j))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=>
  (< (length
     (rec__tree_model__path_type__a (us_split_fields1 (select m ki2)))) 
  (length (rec__tree_model__path_type__a (us_split_fields1 (select m kj2)))))
  (= ki2 i))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (and (and (=> (<= 1 100) (in_range2 kj2)) (=> (<= 1 100) (in_range2 ki2)))
  (not (= ki2 kj2)))))

;; H
  (assert (=> (not (= ki1 kj1)) (= result2 (mk_int__ref temp___23551))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (= temp___23552 (length
                  (rec__tree_model__path_type__a
                  (us_split_fields1 (select m ki2)))))))

;; H
  (assert (=> (not (= ki1 kj1)) (= result3 (mk_int__ref temp___23541))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (= temp___23542 (length
                  (rec__tree_model__path_type__a
                  (us_split_fields1 (select m kj2)))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (and
  (= o (length
       (rec__tree_model__path_type__a (us_split_fields1 (select m kj2)))))
  (and (in_range3 o) (<= (+ 0 o) 2147483647)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (and
  (= o1 (length
        (rec__tree_model__path_type__a (us_split_fields1 (select m ki2)))))
  (and (in_range3 o1) (<= (+ 0 o1) 2147483647)))))

;; H
  (assert (=> (not (= ki1 kj1)) (= result4 (ite (< o o1) true false))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (= result4 true)
  (and (and (= o2 (parent f ki2)) (parent__function_guard o2 f ki2))
  (and (in_range6 o2)
  (and (=> (= (valid_root f ki2) true) (= o2 0))
  (=> (= (size f) 0) (= o2 0))))))))

;; H
  (assert
  (=> (not (= ki1 kj1)) (=> (= result4 true) (and (= o3 o2) (in_range2 o2)))))

;; H
  (assert
  (=> (not (= ki1 kj1)) (=> (= result4 true) (= result5 (mk_int__ref ki2)))))

;; H
  (assert (=> (not (= ki1 kj1)) (=> (= result4 true) (= ki3 o3))))

;; H
  (assert (=> (not (= ki1 kj1)) (=> (= result4 true) (= kj3 kj2))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (and
  (= o4 (length
        (rec__tree_model__path_type__a (us_split_fields1 (select m ki2)))))
  (and (in_range3 o4) (<= (+ 0 o4) 2147483647))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (and
  (= o5 (length
        (rec__tree_model__path_type__a (us_split_fields1 (select m kj2)))))
  (and (in_range3 o5) (<= (+ 0 o5) 2147483647))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (= result6 (ite (< o4 o5) true false)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (= result6 true)
  (and (and (= o6 (parent f kj2)) (parent__function_guard o6 f kj2))
  (and (in_range6 o6)
  (and (=> (= (valid_root f kj2) true) (= o6 0))
  (=> (= (size f) 0) (= o6 0)))))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (= result6 true) (and (= o7 o6) (in_range2 o6))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (= result6 true) (= result7 (mk_int__ref kj2))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (=> (= result6 true) (= kj3 o7)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (=> (= result6 true) (= ki4 ki2)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true))
  (and (and (= o8 (parent f ki2)) (parent__function_guard o8 f ki2))
  (and (in_range6 o8)
  (and (=> (= (valid_root f ki2) true) (= o8 0))
  (=> (= (size f) 0) (= o8 0)))))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true)) (and (= o9 o8) (in_range2 o8))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true)) (= result8 (mk_int__ref ki2))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (=> (not (= result6 true)) (= ki4 o9)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true))
  (and (and (= o10 (parent f kj2)) (parent__function_guard o10 f kj2))
  (and (in_range6 o10)
  (and (=> (= (valid_root f kj2) true) (= o10 0))
  (=> (= (size f) 0) (= o10 0)))))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true)) (and (= o11 o10) (in_range2 o10))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true))
  (=> (not (= result6 true)) (= result9 (mk_int__ref kj2))))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (=> (not (= result6 true)) (= kj4 o11)))))

;; H
  (assert
  (=> (not (= ki1 kj1))
  (=> (not (= result4 true)) (=> (not (= result6 true)) (= kj3 kj4)))))

;; H
  (assert (=> (not (= ki1 kj1)) (=> (not (= result4 true)) (= ki3 ki4))))

;; H
  (assert (=> (not (= ki1 kj1)) (= ki3 kj3)))

;; H
  (assert (=> (not (= ki1 kj1)) (= kj5 (mk_int__ref kj3))))

;; H
  (assert (=> (not (= ki1 kj1)) (= ki5 (mk_int__ref ki3))))

;; H
  (assert (=> (not (= ki1 kj1)) (= kj6 kj3)))

;; H
  (assert (=> (not (= ki1 kj1)) (= ki6 ki3)))

;; H
  (assert (=> (not (= ki1 kj1)) (= kj7 kj5)))

;; H
  (assert (=> (not (= ki1 kj1)) (= ki7 ki5)))

;; H
  (assert (=> (not (= ki1 kj1)) (= kj8 kj6)))

;; H
  (assert (=> (not (= ki1 kj1)) (= ki8 ki6)))

;; H
  (assert (=> (not (not (= ki1 kj1))) (= kj7 (mk_int__ref kj1))))

;; H
  (assert (=> (not (not (= ki1 kj1))) (= ki7 (mk_int__ref ki1))))

;; H
  (assert (=> (not (not (= ki1 kj1))) (= kj8 kj1)))

;; H
  (assert (=> (not (not (= ki1 kj1))) (= ki8 ki1)))

;; H
  (assert
  (= search_trees__find_root__result2 (mk_int__ref
                                      search_trees__find_root__result1)))

;; H
  (assert
  (= search_trees__find_root__result3 search_trees__find_root__result1))

;; H
  (assert (= result10 (mk_int__ref search_trees__find_root__result)))

;; H
  (assert (= search_trees__find_root__result1 (int__content ki7)))

;; H
  (assert
  (= search_trees__find_root__result4 search_trees__find_root__result2))

;; H
  (assert (= kj9 kj7))

;; H
  (assert (= ki9 ki7))

;; H
  (assert
  (= search_trees__find_root__result5 search_trees__find_root__result3))

;; H
  (assert (= kj10 kj8))

;; H
  (assert (= ki10 ki8))

;; H
  (assert (= result11 (int__content search_trees__find_root__result4)))

;; H
  (assert (model____function_guard (model__ f root) f root))

(assert
;; WP_parameter_def
 ;; File "tree_model.ads", line 12, characters 0-0
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ f root) (int__content search_trees__find_root__result4)))) true)))
(check-sat)
