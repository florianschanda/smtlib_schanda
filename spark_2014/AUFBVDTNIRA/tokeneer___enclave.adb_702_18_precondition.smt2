;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort privileget 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (privileget privileget) Bool)

(declare-fun dummy () privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget 
  (privileget__content a))

(declare-fun to_rep (privileget) Int)

(declare-fun of_rep (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort opandnullt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (opandnullt opandnullt) Bool)

(declare-fun dummy1 () opandnullt)

(declare-datatypes ()
((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt 
  (opandnullt__content a))

(declare-fun to_rep1 (opandnullt) Int)

(declare-fun of_rep1 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget 
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt 
  (rec__admin__t__currentop a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__admin__t__rolepresent (us_split_fields1 a))) 
                        (to_rep
                        (rec__admin__t__rolepresent (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__admin__t__currentop (us_split_fields1 a))) 
                        (to_rep1
                        (rec__admin__t__currentop (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun admin__t__rolepresent__first__bit () Int)

(declare-fun admin__t__rolepresent__last__bit () Int)

(declare-fun admin__t__rolepresent__position () Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-fun admin__t__currentop__first__bit () Int)

(declare-fun admin__t__currentop__last__bit () Int)

(declare-fun admin__t__currentop__position () Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun rolepresent (us_rep) Int)

(declare-fun rolepresent__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 3)) (in_range1 temp___expr_179)))

;; rolepresent__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (let ((result (rolepresent theadmin)))
     (=> (rolepresent__function_guard result theadmin) (dynamic_invariant
     result true false true))) :pattern ((rolepresent theadmin)) )))

(declare-fun isdoingop (us_rep) Bool)

(declare-fun isdoingop__function_guard (Bool us_rep) Bool)

;; isdoingop__post_axiom
  (assert true)

(declare-fun thecurrentop (us_rep) Int)

(declare-fun thecurrentop__function_guard (Int us_rep) Bool)

(declare-sort opt 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (opt opt) Bool)

(declare-fun dummy3 () opt)

(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(define-fun dynamic_invariant1 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 4)) (in_range3 temp___expr_267)))

;; thecurrentop__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (and (isdoingop__function_guard (isdoingop theadmin) theadmin)
     (=> (= (isdoingop theadmin) true)
     (let ((result (thecurrentop theadmin)))
     (=> (thecurrentop__function_guard result theadmin) (dynamic_invariant1
     result true false true))))) :pattern ((thecurrentop theadmin)) )))

(declare-fun ispresent (us_rep) Bool)

(declare-fun ispresent__function_guard (Bool us_rep) Bool)

;; ispresent__post_axiom
  (assert true)

(declare-fun theauthcertrole (us_private) Int)

(declare-fun theauthcertrole__function_guard (Int us_private) Bool)

;; theauthcertrole__post_axiom
  (assert
  (forall ((admintoken__state us_private))
  (! (let ((result (theauthcertrole admintoken__state)))
     (=> (theauthcertrole__function_guard result admintoken__state)
     (dynamic_invariant result true false true))) :pattern ((theauthcertrole
                                                            admintoken__state)) )))

(declare-fun isgood (us_private) Bool)

(declare-fun isgood__function_guard (Bool us_private) Bool)

;; isgood__post_axiom
  (assert true)

(declare-fun authcertvalid (us_private) Bool)

(declare-fun authcertvalid__function_guard (Bool us_private) Bool)

;; authcertvalid__post_axiom
  (assert true)

(declare-sort statust 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (statust statust) Bool)

(declare-fun dummy4 () statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref_2__projection ((a statust__ref)) statust (statust__content
                                                                  a))

(define-fun dynamic_invariant2 ((temp___expr_1903 Int)
  (temp___is_init_1900 Bool) (temp___skip_constant_1901 Bool)
  (temp___do_toplevel_1902 Bool)) Bool (=>
                                       (or (= temp___is_init_1900 true)
                                       (<= 0 8)) (in_range4
                                       temp___expr_1903)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant3 ((temp___expr_261 Int)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (or (= temp___is_init_258 true)
                                      (<= 0 4)) (in_range2 temp___expr_261)))

(declare-fun state () us_private)

(declare-fun output () us_private)

(declare-fun status () Int)

(declare-fun theadmin__split_fields () privileget)

(declare-fun theadmin__split_fields1 () opandnullt)

(declare-fun o () Bool)

(declare-fun o1 () Bool)

(declare-fun o2 () Int)

(declare-fun o3 () Bool)

(declare-fun o4 () Bool)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun o7 () Bool)

(declare-fun o8 () Bool)

(declare-fun o9 () Int)

(declare-fun o10 () Bool)

(declare-fun o11 () Bool)

(declare-fun o12 () Int)

(declare-fun o13 () Bool)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Bool)

(declare-fun o17 () Bool)

(declare-fun o18 () Bool)

(declare-fun o19 () Bool)

(declare-fun o20 () Bool)

(declare-fun o21 () Bool)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun o24 () Bool)

(declare-fun output1 () us_private)

(declare-fun theadmin__split_fields2 () privileget)

(declare-fun theadmin__split_fields3 () opandnullt)

(declare-fun filestate () us_private)

(declare-fun state1 () us_private)

(declare-fun state2 () us_private)

(declare-fun writtenstate () us_private)

(declare-fun output2 () us_private)

(declare-fun state3 () us_private)

(declare-fun status1 () Int)

(declare-fun filestate1 () us_private)

(declare-fun state4 () us_private)

(declare-fun state5 () us_private)

(declare-fun writtenstate1 () us_private)

(declare-fun state6 () us_private)

(declare-fun status2 () Int)

(declare-fun theadmin__split_fields4 () privileget)

(declare-fun theadmin__split_fields5 () opandnullt)

(declare-fun filestate2 () us_private)

(declare-fun state7 () us_private)

(declare-fun state8 () us_private)

(declare-fun writtenstate2 () us_private)

(declare-fun output3 () us_private)

(declare-fun state9 () us_private)

(declare-fun status3 () Int)

(declare-fun theadmin__split_fields6 () privileget)

(declare-fun theadmin__split_fields7 () opandnullt)

(declare-fun filestate3 () us_private)

(declare-fun state10 () us_private)

(declare-fun state11 () us_private)

(declare-fun writtenstate3 () us_private)

(declare-fun output4 () us_private)

(declare-fun state12 () us_private)

(declare-fun status4 () Int)

(declare-fun theadmin__split_fields8 () us_split_fields)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(define-fun theadmin__split_fields9 () us_split_fields (mk___split_fields
                                                       theadmin__split_fields4
                                                       theadmin__split_fields5))

;; H
  (assert (in_range4 status))

;; H
  (assert (ispresent__function_guard
  (ispresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isgood__function_guard (isgood state) state))

;; H
  (assert (authcertvalid__function_guard (authcertvalid state) state))

;; H
  (assert (theauthcertrole__function_guard (theauthcertrole state) state))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and (or (= status 6) (= status 7))
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (and (and (= (isgood state) true) (= (authcertvalid state) true))
  (= (theauthcertrole state) 1))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (or
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))

;; H
  (assert (ispresent__function_guard
  (ispresent (mk___rep theadmin__split_fields9))
  (mk___rep theadmin__split_fields9)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields9))
  (mk___rep theadmin__split_fields9)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields9))
  (mk___rep theadmin__split_fields9)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert
  (=> (= status 6)
  (and (or (= status1 6) (= status1 7)) (in_range4 status1))))

;; H
  (assert
  (=> (= status 6) (= theadmin__split_fields theadmin__split_fields4)))

;; H
  (assert
  (=> (= status 6) (= theadmin__split_fields1 theadmin__split_fields5)))

;; H
  (assert
  (=> (= status 6)
  (= theadmin__split_fields9 (mk___split_fields theadmin__split_fields2
                             theadmin__split_fields3))))

;; H
  (assert
  (=> (not (= status 6))
  (and
  (and
  (and
  (and (= status2 3) (= (ispresent (mk___rep theadmin__split_fields9)) true))
  (not (= (isdoingop (mk___rep theadmin__split_fields9)) true)))
  (= (rolepresent (mk___rep theadmin__split_fields9)) (rolepresent
                                                      (mk___rep
                                                      (mk___split_fields
                                                      theadmin__split_fields
                                                      theadmin__split_fields1)))))
  (in_range4 status2))))

;; H
  (assert (=> (not (= status 6)) (= status1 status2)))

;; H
  (assert (=> (not (= status 6)) (= state3 state6)))

;; H
  (assert (=> (not (= status 6)) (= output2 output)))

;; H
  (assert (=> (not (= status 6)) (= writtenstate writtenstate1)))

;; H
  (assert (=> (not (= status 6)) (= state2 state5)))

;; H
  (assert (=> (not (= status 6)) (= state1 state4)))

;; H
  (assert (=> (not (= status 6)) (= filestate filestate1)))

;; H
  (assert (=> (not (= status 6)) (= status1 status2)))

;; H
  (assert (=> (not (= status 6)) (= state3 state6)))

;; H
  (assert (=> (not (= status 6)) (= output2 output1)))

;; H
  (assert (=> (not (= status 6)) (= writtenstate writtenstate1)))

;; H
  (assert (=> (not (= status 6)) (= state2 state5)))

;; H
  (assert (=> (not (= status 6)) (= state1 state4)))

;; H
  (assert (=> (not (= status 6)) (= filestate filestate1)))

;; H
  (assert (= theadmin__split_fields6 theadmin__split_fields4))

;; H
  (assert (= theadmin__split_fields7 theadmin__split_fields5))

;; H
  (assert (= status1 status3))

;; H
  (assert (= state3 state9))

;; H
  (assert (= output2 output3))

;; H
  (assert (= writtenstate writtenstate2))

;; H
  (assert (= state2 state8))

;; H
  (assert (= state1 state7))

;; H
  (assert (= filestate filestate2))

;; H
  (assert (= theadmin__split_fields8 theadmin__split_fields9))

;; H
  (assert (= status4 status1))

;; H
  (assert (= state12 state3))

;; H
  (assert (= output4 output2))

;; H
  (assert (= writtenstate3 writtenstate))

;; H
  (assert (= state11 state2))

;; H
  (assert (= state10 state1))

;; H
  (assert (= filestate3 filestate))

;; H
  (assert
  (and
  (and
  (= o22 (rolepresent
         (mk___rep
         (mk___split_fields theadmin__split_fields theadmin__split_fields1))))
  (rolepresent__function_guard o22
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))
  (in_range1 o22)))

;; H
  (assert
  (and
  (and
  (= o23 (rolepresent
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (rolepresent__function_guard o23
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range1 o23)))

;; H
  (assert (= o24 (ite (= o23 o22) true false)))

;; H
  (assert
  (and
  (and
  (= o14 (rolepresent
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (rolepresent__function_guard o14
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range1 o14)))

;; H
  (assert (= result (ite (= o14 1) true false)))

;; H
  (assert
  (=> (= result true)
  (and
  (= o18 (isdoingop
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (isdoingop__function_guard o18
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))))

;; H
  (assert (=> (= result true) (= o19 (ite (not (= o18 true)) true false))))

;; H
  (assert
  (=> (= result true)
  (and
  (and
  (= o15 (thecurrentop
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (thecurrentop__function_guard o15
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range3 o15))))

;; H
  (assert (=> (= result true) (= o16 (ite (= o15 3) true false))))

;; H
  (assert
  (=> (= result true)
  (and
  (= o17 (isdoingop
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (isdoingop__function_guard o17
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))))

;; H
  (assert (=> (= result true) (= o20 (ite (= o17 true) o16 false))))

;; H
  (assert (=> (= result true) (= o21 (ite (= o20 false) o19 true))))

;; H
  (assert (=> (not (= result true)) (= o21 (of_int 1))))

;; H
  (assert
  (and
  (and
  (= o9 (thecurrentop
        (mk___rep
        (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (thecurrentop__function_guard o9
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range3 o9)))

;; H
  (assert (= o10 (ite (= o9 3) true false)))

;; H
  (assert
  (and
  (= o11 (isdoingop
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (isdoingop__function_guard o11
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7)))))

;; H
  (assert (= result1 (ite (= o11 true) o10 false)))

;; H
  (assert
  (=> (= result1 true)
  (and
  (and
  (= o12 (rolepresent
         (mk___rep
         (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (rolepresent__function_guard o12
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range1 o12))))

;; H
  (assert (=> (= result1 true) (= o13 (ite (= o12 1) true false))))

;; H
  (assert (=> (not (= result1 true)) (= o13 (of_int 1))))

;; H
  (assert
  (and
  (and
  (= o2 (rolepresent
        (mk___rep
        (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (rolepresent__function_guard o2
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (in_range1 o2)))

;; H
  (assert (= result2 (ite (= o2 1) true false)))

;; H
  (assert
  (=> (= result2 true)
  (and
  (and (= o5 (theauthcertrole state)) (theauthcertrole__function_guard 
  o5 state)) (in_range1 o5))))

;; H
  (assert (=> (= result2 true) (= o6 (ite (= o5 1) true false))))

;; H
  (assert
  (=> (= result2 true)
  (and (= o3 (authcertvalid state)) (authcertvalid__function_guard o3 state))))

;; H
  (assert
  (=> (= result2 true)
  (and (= o4 (isgood state)) (isgood__function_guard o4 state))))

;; H
  (assert (=> (= result2 true) (= o7 (ite (= o4 true) o3 false))))

;; H
  (assert (=> (= result2 true) (= o8 (ite (= o7 true) o6 false))))

;; H
  (assert (=> (not (= result2 true)) (= o8 (of_int 1))))

;; H
  (assert
  (=> (= status3 3)
  (and
  (= o (isdoingop
       (mk___rep
       (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))
  (isdoingop__function_guard o
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))))

;; H
  (assert (=> (= status3 3) (= o1 (ite (not (= o true)) true false))))

;; H
  (assert (=> (not (= status3 3)) (= o1 (of_int 1))))

;; H
  (assert (=> (not (= status3 6)) (= status3 7)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7)))
  (mk___rep
  (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))))

(assert
;; WP_parameter_def
 ;; File "enclave.ads", line 50, characters 0-0
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields6 theadmin__split_fields7))) true)))
(check-sat)
