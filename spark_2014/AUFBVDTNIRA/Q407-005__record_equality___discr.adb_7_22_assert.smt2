;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort positive 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-fun dummy () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep (positive) Int)

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-fun dummy1 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_132 Int)
                             (temp___idx_133 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_132)
                             (<= temp___idx_132 a__last))
                             (and (<= a__first_2 temp___idx_133)
                             (<= temp___idx_133 a__last_2)))
                             (= (to_rep1
                                (get a temp___idx_132 temp___idx_133)) 
                             (to_rep1
                             (get b (+ (- b__first a__first) temp___idx_132)
                             (+ (- b__first_2 a__first_2) temp___idx_133)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_132 Int) (temp___idx_133 Int))
  (=>
  (and (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (and (<= a__first_2 temp___idx_133) (<= temp___idx_133 a__last_2)))
  (= (to_rep1 (get a temp___idx_132 temp___idx_133)) (to_rep1
                                                     (get b
                                                     (+ (- b__first a__first) temp___idx_132)
                                                     (+ (- b__first_2 a__first_2) temp___idx_133)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range low) (in_range high))))))

(declare-sort t1 0)

(declare-fun first1 (t1) integer)

(declare-fun last1 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first1 (mk1 f l))) f)
     (= (to_rep1 (last1 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range low) (in_range high))))))

(declare-datatypes () ((us_t (mk___t (elts map1)(rt t)(rt_2 t1)))))
(define-fun to_array ((a us_t)) map1 (elts a))

(define-fun of_array ((a map1) (f Int) (l Int) (f2 Int)
  (l2 Int)) us_t (mk___t a (mk f l) (mk1 f2 l2)))

(define-fun first2 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first2 a) (last2 a))
                                  (+ (- (last2 a) (first2 a)) 1) 0))

(define-fun first_2 ((a us_t)) Int (to_rep1 (first1 (rt_2 a))))

(define-fun last_2 ((a us_t)) Int (to_rep1 (last1 (rt_2 a))))

(define-fun length_2 ((a us_t)) Int (ite (<= (first_2 a) (last_2 a))
                                    (+ (- (last_2 a) (first_2 a)) 1) 0))

(define-fun dynamic_property2 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int)
  (l2 Int)) Bool (and (dynamic_property range_first1 range_last1 f1 l1)
                 (dynamic_property1 range_first2 range_last2 f2 l2)))

(declare-fun value__size () Int)

(declare-fun object__size (map1) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size (map1) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment a))))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (to_rep1 (first1 (rt_2 x)))
                 (to_rep1 (last1 (rt_2 x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y))) (to_rep1 (first1 (rt_2 y)))
                 (to_rep1 (last1 (rt_2 y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-fun dummy2 () us_t)

(declare-datatypes ()
((t_array__ref (mk_t_array__ref (t_array__content us_t)))))
(define-fun t_array__ref___projection ((a t_array__ref)) us_t (t_array__content
                                                              a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-fun dummy3 () integer)

(declare-datatypes () ((t1s__ref (mk_t1s__ref (t1s__content integer)))))
(define-fun t1s__ref___projection ((a t1s__ref)) integer (t1s__content a))

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes () ((t2s__ref (mk_t2s__ref (t2s__content integer)))))
(define-fun t2s__ref___projection ((a t2s__ref)) integer (t2s__content a))

(declare-sort t2 0)

(declare-fun first3 (t2) integer)

(declare-fun last3 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first3 (mk2 f l))) f)
     (= (to_rep1 (last3 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property5 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-sort t3 0)

(declare-fun first4 (t3) integer)

(declare-fun last4 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk3 f l))) f)
     (= (to_rep1 (last4 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property4 range_first range_last low)
                   (dynamic_property4 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 map1)(rt1 t2)(rt_21 t3)))))
(define-fun to_array1 ((a us_t1)) map1 (elts1 a))

(define-fun of_array1 ((a map1) (f Int) (l Int) (f2 Int)
  (l2 Int)) us_t1 (mk___t1 a (mk2 f l) (mk3 f2 l2)))

(define-fun first5 ((a us_t1)) Int (to_rep1 (first3 (rt1 a))))

(define-fun last5 ((a us_t1)) Int (to_rep1 (last3 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(define-fun first_21 ((a us_t1)) Int (to_rep1 (first4 (rt_21 a))))

(define-fun last_21 ((a us_t1)) Int (to_rep1 (last4 (rt_21 a))))

(define-fun length_21 ((a us_t1)) Int (ite (<= (first_21 a) (last_21 a))
                                      (+ (- (last_21 a) (first_21 a)) 1) 0))

(define-fun dynamic_property7 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int)
  (l2 Int)) Bool (and (dynamic_property5 range_first1 range_last1 f1 l1)
                 (dynamic_property6 range_first2 range_last2 f2 l2)))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (map1) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 (map1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(define-fun bool_eq6 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first3 (rt1 x)))
                  (to_rep1 (last3 (rt1 x))) (to_rep1 (first4 (rt_21 x)))
                  (to_rep1 (last4 (rt_21 x))) (elts1 y)
                  (to_rep1 (first3 (rt1 y))) (to_rep1 (last3 (rt1 y)))
                  (to_rep1 (first4 (rt_21 y))) (to_rep1 (last4 (rt_21 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-fun dummy5 () us_t1)

(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content us_t1)))))
(define-fun t3s__ref___projection ((a t3s__ref)) us_t1 (t3s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__discr__t_record__row_first positive)(rec__discr__t_record__row_last positive)(rec__discr__t_record__col_first positive)(rec__discr__t_record__col_last positive)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) positive 
  (rec__discr__t_record__row_first a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) positive 
  (rec__discr__t_record__row_last a))

(define-fun us_split_discrs_3__projection ((a us_split_discrs)) positive 
  (rec__discr__t_record__col_first a))

(define-fun us_split_discrs_4__projection ((a us_split_discrs)) positive 
  (rec__discr__t_record__col_last a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__discr__t_record__data us_t1)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields)) us_t1 
  (rec__discr__t_record__data a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq7 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__discr__t_record__row_first
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__discr__t_record__row_first
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__discr__t_record__row_last
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__discr__t_record__row_last
                                                  (us_split_discrs1 b)))))
                        (= (to_rep
                           (rec__discr__t_record__col_first
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__discr__t_record__col_first
                                                  (us_split_discrs1 b)))))
                        (= (to_rep
                           (rec__discr__t_record__col_last
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__discr__t_record__col_last
                                                  (us_split_discrs1 b)))))
                        (= (bool_eq6
                           (rec__discr__t_record__data (us_split_fields1 a))
                           (rec__discr__t_record__data (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun discr__t_record__row_first__first__bit () Int)

(declare-fun discr__t_record__row_first__last__bit () Int)

(declare-fun discr__t_record__row_first__position () Int)

;; discr__t_record__row_first__first__bit_axiom
  (assert (<= 0 discr__t_record__row_first__first__bit))

;; discr__t_record__row_first__last__bit_axiom
  (assert
  (< discr__t_record__row_first__first__bit discr__t_record__row_first__last__bit))

;; discr__t_record__row_first__position_axiom
  (assert (<= 0 discr__t_record__row_first__position))

(declare-fun discr__t_record__row_last__first__bit () Int)

(declare-fun discr__t_record__row_last__last__bit () Int)

(declare-fun discr__t_record__row_last__position () Int)

;; discr__t_record__row_last__first__bit_axiom
  (assert (<= 0 discr__t_record__row_last__first__bit))

;; discr__t_record__row_last__last__bit_axiom
  (assert
  (< discr__t_record__row_last__first__bit discr__t_record__row_last__last__bit))

;; discr__t_record__row_last__position_axiom
  (assert (<= 0 discr__t_record__row_last__position))

(declare-fun discr__t_record__col_first__first__bit () Int)

(declare-fun discr__t_record__col_first__last__bit () Int)

(declare-fun discr__t_record__col_first__position () Int)

;; discr__t_record__col_first__first__bit_axiom
  (assert (<= 0 discr__t_record__col_first__first__bit))

;; discr__t_record__col_first__last__bit_axiom
  (assert
  (< discr__t_record__col_first__first__bit discr__t_record__col_first__last__bit))

;; discr__t_record__col_first__position_axiom
  (assert (<= 0 discr__t_record__col_first__position))

(declare-fun discr__t_record__col_last__first__bit () Int)

(declare-fun discr__t_record__col_last__last__bit () Int)

(declare-fun discr__t_record__col_last__position () Int)

;; discr__t_record__col_last__first__bit_axiom
  (assert (<= 0 discr__t_record__col_last__first__bit))

;; discr__t_record__col_last__last__bit_axiom
  (assert
  (< discr__t_record__col_last__first__bit discr__t_record__col_last__last__bit))

;; discr__t_record__col_last__position_axiom
  (assert (<= 0 discr__t_record__col_last__position))

(declare-fun discr__t_record__data__first__bit () Int)

(declare-fun discr__t_record__data__last__bit () Int)

(declare-fun discr__t_record__data__position () Int)

;; discr__t_record__data__first__bit_axiom
  (assert (<= 0 discr__t_record__data__first__bit))

;; discr__t_record__data__last__bit_axiom
  (assert
  (< discr__t_record__data__first__bit discr__t_record__data__last__bit))

;; discr__t_record__data__position_axiom
  (assert (<= 0 discr__t_record__data__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((t_record__ref (mk_t_record__ref (t_record__content us_rep)))))
(define-fun t_record__ref___projection ((a t_record__ref)) us_rep (t_record__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_145 us_rep)
  (temp___is_init_142 Bool) (temp___skip_constant_143 Bool)
  (temp___do_toplevel_144 Bool)) Bool (let ((temp___149 (rec__discr__t_record__col_last
                                                        (us_split_discrs1
                                                        temp___expr_145))))
                                      (let ((temp___148 (rec__discr__t_record__col_first
                                                        (us_split_discrs1
                                                        temp___expr_145))))
                                      (let ((temp___147 (rec__discr__t_record__row_last
                                                        (us_split_discrs1
                                                        temp___expr_145))))
                                      (let ((temp___146 (rec__discr__t_record__row_first
                                                        (us_split_discrs1
                                                        temp___expr_145))))
                                      (and
                                      (and (dynamic_property7
                                      (to_rep temp___146) (to_rep temp___147)
                                      (first5
                                      (rec__discr__t_record__data
                                      (us_split_fields1 temp___expr_145)))
                                      (last5
                                      (rec__discr__t_record__data
                                      (us_split_fields1 temp___expr_145)))
                                      (to_rep temp___148) (to_rep temp___149)
                                      (first_21
                                      (rec__discr__t_record__data
                                      (us_split_fields1 temp___expr_145)))
                                      (last_21
                                      (rec__discr__t_record__data
                                      (us_split_fields1 temp___expr_145))))
                                      (and
                                      (= (first5
                                         (rec__discr__t_record__data
                                         (us_split_fields1 temp___expr_145))) 
                                      (to_rep temp___146))
                                      (= (last5
                                         (rec__discr__t_record__data
                                         (us_split_fields1 temp___expr_145))) 
                                      (to_rep temp___147))))
                                      (and
                                      (= (first_21
                                         (rec__discr__t_record__data
                                         (us_split_fields1 temp___expr_145))) 
                                      (to_rep temp___148))
                                      (= (last_21
                                         (rec__discr__t_record__data
                                         (us_split_fields1 temp___expr_145))) 
                                      (to_rep temp___149)))))))))

(declare-fun rec__ () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun data_copy__first () integer)

(declare-fun data_copy__last () integer)

(declare-fun data_copy__first_2 () integer)

(declare-fun data_copy__last_2 () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_139 us_t)
  (temp___is_init_136 Bool) (temp___skip_constant_137 Bool)
  (temp___do_toplevel_138 Bool)) Bool (=>
                                      (not (= temp___skip_constant_137 true))
                                      (dynamic_property2 1 2147483647
                                      (first2 temp___expr_139)
                                      (last2 temp___expr_139) 1 2147483647
                                      (first_2 temp___expr_139)
                                      (last_2 temp___expr_139))))

(declare-fun data_copy () map1)

(declare-fun us () Int)

(declare-fun us1 () Int)

(declare-fun us2 () Int)

(declare-fun us3 () Int)

(declare-fun result () map1)

(declare-fun data_copy1 () map1)

;; H
  (assert (dynamic_invariant rec__ true false true))

;; H
  (assert
  (and
  (= us (to_rep (rec__discr__t_record__col_last (us_split_discrs1 rec__))))
  (in_range
  (to_rep (rec__discr__t_record__col_last (us_split_discrs1 rec__))))))

;; H
  (assert
  (and
  (= us1 (to_rep (rec__discr__t_record__col_first (us_split_discrs1 rec__))))
  (in_range
  (to_rep (rec__discr__t_record__col_first (us_split_discrs1 rec__))))))

;; H
  (assert
  (and
  (= us2 (to_rep (rec__discr__t_record__row_last (us_split_discrs1 rec__))))
  (in_range
  (to_rep (rec__discr__t_record__row_last (us_split_discrs1 rec__))))))

;; H
  (assert
  (and
  (= us3 (to_rep (rec__discr__t_record__row_first (us_split_discrs1 rec__))))
  (in_range
  (to_rep (rec__discr__t_record__row_first (us_split_discrs1 rec__))))))

;; H
  (assert (= result data_copy))

;; H
  (assert
  (= data_copy1 (elts1 (rec__discr__t_record__data (us_split_fields1 rec__)))))

;; H
  (assert
  (= (to_rep1 data_copy__first) (to_rep1
                                (first
                                (mk
                                (to_rep1
                                (first3
                                (rt1
                                (rec__discr__t_record__data
                                (us_split_fields1 rec__)))))
                                (to_rep1
                                (last3
                                (rt1
                                (rec__discr__t_record__data
                                (us_split_fields1 rec__))))))))))

;; H
  (assert
  (= (to_rep1 data_copy__last) (to_rep1
                               (last
                               (mk
                               (to_rep1
                               (first3
                               (rt1
                               (rec__discr__t_record__data
                               (us_split_fields1 rec__)))))
                               (to_rep1
                               (last3
                               (rt1
                               (rec__discr__t_record__data
                               (us_split_fields1 rec__))))))))))

;; H
  (assert
  (= (to_rep1 data_copy__first_2) (to_rep1
                                  (first1
                                  (mk1
                                  (to_rep1
                                  (first4
                                  (rt_21
                                  (rec__discr__t_record__data
                                  (us_split_fields1 rec__)))))
                                  (to_rep1
                                  (last4
                                  (rt_21
                                  (rec__discr__t_record__data
                                  (us_split_fields1 rec__))))))))))

;; H
  (assert
  (= (to_rep1 data_copy__last_2) (to_rep1
                                 (last1
                                 (mk1
                                 (to_rep1
                                 (first4
                                 (rt_21
                                 (rec__discr__t_record__data
                                 (us_split_fields1 rec__)))))
                                 (to_rep1
                                 (last4
                                 (rt_21
                                 (rec__discr__t_record__data
                                 (us_split_fields1 rec__))))))))))

;; H
  (assert (dynamic_property2 1 2147483647 (to_rep1 data_copy__first)
  (to_rep1 data_copy__last) 1 2147483647 (to_rep1 data_copy__first_2)
  (to_rep1 data_copy__last_2)))

(assert
;; WP_parameter_def
 ;; File "discr.ads", line 12, characters 0-0
  (not
  (= (let ((temp___208 (rec__discr__t_record__data (us_split_fields1 rec__))))
     (bool_eq2 data_copy1 (to_rep1 data_copy__first)
     (to_rep1 data_copy__last) (to_rep1 data_copy__first_2)
     (to_rep1 data_copy__last_2) (elts1 temp___208)
     (to_rep1 (first3 (rt1 temp___208))) (to_rep1 (last3 (rt1 temp___208)))
     (to_rep1 (first4 (rt_21 temp___208)))
     (to_rep1 (last4 (rt_21 temp___208))))) true)))
(check-sat)
