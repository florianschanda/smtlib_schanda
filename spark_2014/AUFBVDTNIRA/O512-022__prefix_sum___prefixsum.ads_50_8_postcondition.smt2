;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-fun dummy2 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(declare-sort index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index index) Bool)

(declare-fun dummy3 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun all_elements_in ((Array Int integer) Int) Bool)

(declare-fun all_elements_in__function_guard (Bool (Array Int integer)
  Int) Bool)

;; all_elements_in__post_axiom
  (assert true)

;; all_elements_in__def_axiom
  (assert
  (forall ((a (Array Int integer)))
  (forall ((max Int))
  (! (=> (all_elements_in__function_guard (all_elements_in a max) a max)
     (= (= (all_elements_in a max) true)
     (forall ((k Int))
     (=> (and (<= 0 k) (<= k 7))
     (and (<= (- max) (to_rep (select a k))) (<= (to_rep (select a k)) max)))))) :pattern (
  (all_elements_in a max)) ))))

(declare-fun intermediate_form ((Array Int integer)
  (Array Int integer)) Bool)

(declare-fun intermediate_form__function_guard (Bool (Array Int integer)
  (Array Int integer)) Bool)

;; intermediate_form__post_axiom
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (! (and (all_elements_in__function_guard (all_elements_in a 8000000) a
     8000000) (all_elements_in__function_guard (all_elements_in b 1000000) b
     1000000)) :pattern ((intermediate_form a b)) )))

;; intermediate_form__def_axiom
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (! (=> (intermediate_form__function_guard (intermediate_form a b) a b)
     (= (= (intermediate_form a b) true)
     (forall ((k Int))
     (=> (and (<= 0 k) (<= k 7))
     (ite (= (mod2 (+ k 1) 8) 0)
     (= (to_rep (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep (select b 0)) 
     (to_rep (select b 1))) (to_rep (select b 2))) (to_rep (select b 3))) 
     (to_rep (select b 4))) (to_rep (select b 5))) (to_rep (select b 6))) 
     (to_rep (select b 7))))
     (ite (= (mod2 (+ k 1) 4) 0)
     (= (to_rep (select a k)) (+ (+ (+ (to_rep (select b k)) (to_rep
                                                             (select b (- k 1)))) 
     (to_rep (select b (- k 2)))) (to_rep (select b (- k 3)))))
     (ite (= (mod2 (+ k 1) 2) 0)
     (= (to_rep (select a k)) (+ (to_rep (select b k)) (to_rep
                                                       (select b (- k 1)))))
     (= (to_rep (select a k)) (to_rep (select b k)))))))))) :pattern (
  (intermediate_form a b)) )))

(declare-fun ghost__ () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun input_space () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 7)) (in_range4 temp___expr_136)))

(declare-fun a () (Array Int integer))

(declare-fun space () Int)

(declare-fun left () Int)

(declare-fun right () Int)

(declare-fun temp () Int)

(declare-fun o () Int)

(declare-fun o1 () integer)

(declare-fun o2 () (Array Int integer))

(declare-fun temp___246 () (Array Int integer))

(declare-fun temp___250 () (Array Int integer))

(declare-fun temp___255 () (Array Int integer))

(declare-fun temp___254 () (Array Int integer))

(declare-fun temp___261 () (Array Int integer))

(declare-fun temp___244 () (Array Int integer))

(declare-fun temp___243 () Int)

(declare-fun temp___260 () (Array Int integer))

(declare-fun temp___253 () (Array Int integer))

(declare-fun temp___259 () (Array Int integer))

(declare-fun temp___248 () (Array Int integer))

(declare-fun temp___242 () Int)

(declare-fun temp___258 () (Array Int integer))

(declare-fun temp___247 () (Array Int integer))

(declare-fun temp___241 () Int)

(declare-fun temp___252 () (Array Int integer))

(declare-fun temp___257 () (Array Int integer))

(declare-fun temp___240 () Int)

(declare-fun temp___256 () (Array Int integer))

(declare-fun temp___263 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun temp___238 () (Array Int integer))

(declare-fun temp___237 () (Array Int integer))

(declare-fun temp___230 () (Array Int integer))

(declare-fun temp___229 () Int)

(declare-fun temp___235 () (Array Int integer))

(declare-fun temp___228 () Int)

(declare-fun temp___227 () Int)

(declare-fun temp___233 () (Array Int integer))

(declare-fun temp___232 () (Array Int integer))

(declare-fun temp___239 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () integer)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () integer)

(declare-fun o14 () Int)

(declare-fun o15 () integer)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () integer)

(declare-fun o21 () Int)

(declare-fun o22 () (Array Int integer))

(declare-fun o23 () integer)

(declare-fun o24 () Int)

(declare-fun o25 () (Array Int integer))

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun left1 () Int)

(declare-fun right1 () Int)

(declare-fun temp1 () Int)

(declare-fun result () Int)

(declare-fun space1 () Int)

(declare-fun result1 () (Array Int integer))

(declare-fun a1 () (Array Int integer))

(declare-fun result2 () Int)

(declare-fun space2 () Int)

(declare-fun a2 () (Array Int integer))

(declare-fun space3 () Int)

(declare-fun left2 () Int)

(declare-fun right2 () Int)

(declare-fun temp2 () Int)

(declare-fun temp___2631 () Int)

(declare-fun rho () Int)

(declare-fun result3 () Int)

(declare-fun temp___2632 () Int)

(declare-fun result4 () Int)

(declare-fun right3 () Int)

(declare-fun a3 () (Array Int integer))

(declare-fun left3 () Int)

(declare-fun right4 () Int)

(declare-fun temp3 () Int)

(declare-fun temp___2391 () Int)

(declare-fun result5 () Int)

(declare-fun temp___2392 () Int)

(declare-fun result6 () Int)

(declare-fun left4 () Int)

(declare-fun result7 () Int)

(declare-fun temp4 () Int)

(declare-fun result8 () (Array Int integer))

(declare-fun a4 () (Array Int integer))

(declare-fun result9 () (Array Int integer))

(declare-fun a5 () (Array Int integer))

(declare-fun result10 () Int)

(declare-fun right5 () Int)

(declare-fun a6 () map__ref)

(declare-fun left5 () int__ref)

(declare-fun right6 () int__ref)

(declare-fun temp5 () int__ref)

(declare-fun a7 () (Array Int integer))

(declare-fun left6 () Int)

(declare-fun right7 () Int)

(declare-fun temp6 () Int)

(declare-fun rho1 () Int)

(declare-fun a8 () map__ref)

(declare-fun left7 () int__ref)

(declare-fun right8 () int__ref)

(declare-fun temp7 () int__ref)

(declare-fun a9 () (Array Int integer))

(declare-fun left8 () Int)

(declare-fun right9 () Int)

(declare-fun temp8 () Int)

(declare-fun rho2 () Int)

(declare-fun result11 () int__ref)

(declare-fun space4 () Int)

(declare-fun a10 () map__ref)

(declare-fun space5 () int__ref)

(declare-fun left9 () int__ref)

(declare-fun right10 () int__ref)

(declare-fun temp9 () int__ref)

(declare-fun a11 () (Array Int integer))

(declare-fun space6 () Int)

(declare-fun left10 () Int)

(declare-fun right11 () Int)

(declare-fun temp10 () Int)

(declare-fun a12 () map__ref)

(declare-fun space7 () int__ref)

(declare-fun left11 () int__ref)

(declare-fun right12 () int__ref)

(declare-fun temp11 () int__ref)

(declare-fun a13 () (Array Int integer))

(declare-fun space8 () Int)

(declare-fun left12 () Int)

(declare-fun right13 () Int)

(declare-fun temp12 () Int)

(declare-fun a14 () map__ref)

(declare-fun space9 () int__ref)

(declare-fun left13 () int__ref)

(declare-fun right14 () int__ref)

(declare-fun temp13 () int__ref)

(declare-fun a15 () (Array Int integer))

(declare-fun space10 () Int)

(declare-fun left14 () Int)

(declare-fun right15 () Int)

(declare-fun temp14 () Int)

;; H
  (assert (all_elements_in__function_guard (all_elements_in ghost__ 1000000)
  ghost__ 1000000))

;; H
  (assert (all_elements_in__function_guard (all_elements_in a 8000000) 
  a 8000000))

;; H
  (assert (intermediate_form__function_guard (intermediate_form a ghost__) 
  a ghost__))

;; H
  (assert (all_elements_in__function_guard
  (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) a2
  (* (* (div1 4 space3) 8) 1000000)))

;; H
  (assert (all_elements_in__function_guard
  (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) a2
  (* (* (div1 4 space3) 8) 1000000)))

;; H
  (assert (in_range3 input_space))

;; H
  (assert
  (and (= (all_elements_in ghost__ 1000000) true)
  (and (= (all_elements_in a 8000000) true)
  (and (= input_space 8) (= (intermediate_form a ghost__) true)))))

;; H
  (assert (and (= o input_space) (in_range2 input_space)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref space)))

;; H
  (assert (= space1 o))

;; H
  (assert (in_range2 space1))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 left)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 right)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 temp)))

;; H
  (assert (= (to_rep o1) 0))

;; H
  (assert (= o2 (store a 7 o1)))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref a)))

;; H
  (assert (= a1 o2))

;; H
  (assert (= space1 result2))

;; H
  (assert (= space2 (div1 space1 2)))

;; H
  (assert (=> (< 0 space2) (= temp___246 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___250 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___255 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___254 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___261 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___244 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___243 temp)))

;; H
  (assert (=> (< 0 space2) (= temp___260 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___253 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___259 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___248 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___242 right)))

;; H
  (assert (=> (< 0 space2) (= temp___258 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___247 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___241 left)))

;; H
  (assert (=> (< 0 space2) (= temp___252 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___257 a1)))

;; H
  (assert (=> (< 0 space2) (= temp___240 space2)))

;; H
  (assert (=> (< 0 space2) (= temp___256 a1)))

;; H
  (assert (=> (< 0 space2) (= 0 temp___263)))

;; H
  (assert
  (=> (< 0 space2)
  (and
  (and (or (or (= space3 4) (= space3 2)) (= space3 1))
  (= (all_elements_in a2 (* (* (div1 4 space3) 8) 1000000)) true))
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 7))
  (ite (= space3 4) (= (to_rep (select a2 k)) (to_rep (select temp___246 k)))
  (ite (and (= space3 2) (= (mod2 (+ k 1) 8) 0))
  (= (to_rep (select a2 k)) (+ (to_rep (select temp___247 k)) (to_rep
                                                              (select 
                                                              temp___248 (- k (* 2 
                                                              space3))))))
  (ite (and (= space3 2) (= (mod2 (+ k 1) 4) 0))
  (= (to_rep (select a2 k)) (to_rep (select temp___250 (+ k (* 2 space3)))))
  (ite (= space3 2) (= (to_rep (select a2 k)) (to_rep (select temp___252 k)))
  (ite (and (= space3 1) (= (mod2 (+ k 1) 2) 0))
  (and
  (and
  (and (= (to_rep (select a2 1)) (to_rep (select temp___253 7)))
  (= (to_rep (select a2 3)) (+ (to_rep (select temp___254 1)) (to_rep
                                                              (select 
                                                              temp___255 7)))))
  (= (to_rep (select a2 5)) (+ (to_rep (select temp___256 7)) (to_rep
                                                              (select 
                                                              temp___257 3)))))
  (= (to_rep (select a2 7)) (+ (+ (to_rep (select temp___258 5)) (to_rep
                                                                 (select 
                                                                 temp___259 7))) 
  (to_rep (select temp___260 3)))))
  (= (to_rep (select a2 k)) (to_rep (select temp___261 k)))))))))))))

;; H
  (assert
  (=> (< 0 space2)
  (and
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range2 space3))
  (=> (<= 0 2147483647) (in_range2 left2)))
  (=> (<= 0 2147483647) (in_range2 right2)))
  (=> (<= (- 2147483648) 2147483647) (in_range1 temp2))) (< 0 space3))))

;; H
  (assert (=> (< 0 space2) (= temp___2631 result3)))

;; H
  (assert (=> (< 0 space2) (= temp___2632 space3)))

;; H
  (assert
  (=> (< 0 space2) (and (= o3 (* space3 2)) (in_range1 (* space3 2)))))

;; H
  (assert (=> (< 0 space2) (= o4 (- o3 1))))

;; H
  (assert (=> (< 0 space2) (and (= o5 o4) (in_range1 o4))))

;; H
  (assert (=> (< 0 space2) (and (= o6 o5) (in_range2 o5))))

;; H
  (assert (=> (< 0 space2) (= right2 result4)))

;; H
  (assert (=> (< 0 space2) (= right3 o6)))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___238 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___237 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___230 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___229 temp2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___235 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___228 right3))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___227 left2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___233 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___232 a2))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= 0 temp___239))))

;; H
  (assert
  (=> (< 0 space2)
  (=> (< right3 8)
  (and
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 7))
  (ite (and (<= 0 k) (<= k (- right4 (* space3 2))))
  (ite (= (mod2 (+ k 1) (* 2 space3)) 0)
  (= (to_rep (select a3 k)) (+ (to_rep (select temp___232 k)) (to_rep
                                                              (select 
                                                              temp___233 (- k 
                                                              space3)))))
  (ite (= (mod2 (+ k 1) space3) 0)
  (= (to_rep (select a3 k)) (to_rep (select temp___235 (+ k space3))))
  (= (to_rep (select a3 k)) (to_rep (select temp___237 k)))))
  (= (to_rep (select a3 k)) (to_rep (select temp___238 k))))))
  (= (mod2 (+ right4 1) (* space3 2)) 0)) (not (<= 8 right4))))))

;; H
  (assert
  (=> (< 0 space2)
  (=> (< right3 8)
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range2 left3))
  (=> (<= 0 2147483647) (in_range2 right4)))
  (=> (<= (- 2147483648) 2147483647) (in_range1 temp3))) (< right4 8)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___2391 result5))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp___2392 right4))))

;; H
  (assert
  (=> (< 0 space2)
  (=> (< right3 8)
  (and (= o7 (- right4 space3)) (in_range1 (- right4 space3))))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (and (= o8 o7) (in_range2 o7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left3 result6))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left4 o8))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o9 right4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o10 (select a3 o9)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o11 (to_rep o10)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp3 result7))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp4 o11))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o14 right4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o15 (select a3 o14)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o16 (to_rep o15)))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (<= 0 left4) (<= left4 7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o12 left4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o13 (select a3 o12)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o17 (to_rep o13)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o18 (+ o17 o16)))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (= o19 o18) (in_range1 o18)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= (to_rep o20) o19))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (<= 0 right4) (<= right4 7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o21 right4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o22 (store a3 o21 o20)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a3 result8))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a4 o22))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= (to_rep o23) temp4))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (<= 0 left4) (<= left4 7)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o24 left4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o25 (store a4 o24 o23)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a4 result9))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a5 o25))))

;; H
  (assert
  (=> (< 0 space2)
  (=> (< right3 8) (and (= o26 (* space3 2)) (in_range1 (* space3 2))))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= o27 (+ right4 o26)))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (= o28 o27) (in_range1 o27)))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (and (= o29 o28) (in_range2 o28)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= right4 result10))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= right5 o29))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (not (< right5 8)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp5 (mk_int__ref temp4)))))

;; H
  (assert
  (=> (< 0 space2) (=> (< right3 8) (= right6 (mk_int__ref right5)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left5 (mk_int__ref left4)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a6 (mk_map__ref a5)))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= rho1 temp___2392))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp6 temp4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= right7 right5))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left6 left4))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a7 a5))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp7 temp5))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= right8 right6))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left7 left5))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a8 a6))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= rho2 rho1))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= temp8 temp6))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= right9 right7))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= left8 left6))))

;; H
  (assert (=> (< 0 space2) (=> (< right3 8) (= a9 a7))))

;; H
  (assert
  (=> (< 0 space2) (=> (not (< right3 8)) (= temp7 (mk_int__ref temp2)))))

;; H
  (assert
  (=> (< 0 space2) (=> (not (< right3 8)) (= right8 (mk_int__ref right3)))))

;; H
  (assert
  (=> (< 0 space2) (=> (not (< right3 8)) (= left7 (mk_int__ref left2)))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= a8 (mk_map__ref a2)))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= rho2 rho))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= temp8 temp2))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= right9 right3))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= left8 left2))))

;; H
  (assert (=> (< 0 space2) (=> (not (< right3 8)) (= a9 a2))))

;; H
  (assert (=> (< 0 space2) (= result11 (mk_int__ref space3))))

;; H
  (assert (=> (< 0 space2) (= space4 (div1 space3 2))))

;; H
  (assert (=> (< 0 space2) (not (< 0 space4))))

;; H
  (assert (=> (< 0 space2) (= temp9 temp7)))

;; H
  (assert (=> (< 0 space2) (= right10 right8)))

;; H
  (assert (=> (< 0 space2) (= left9 left7)))

;; H
  (assert (=> (< 0 space2) (= space5 (mk_int__ref space4))))

;; H
  (assert (=> (< 0 space2) (= a10 a8)))

;; H
  (assert (=> (< 0 space2) (= temp10 temp8)))

;; H
  (assert (=> (< 0 space2) (= right11 right9)))

;; H
  (assert (=> (< 0 space2) (= left10 left8)))

;; H
  (assert (=> (< 0 space2) (= space6 space4)))

;; H
  (assert (=> (< 0 space2) (= a11 a9)))

;; H
  (assert (=> (< 0 space2) (= temp11 temp9)))

;; H
  (assert (=> (< 0 space2) (= right12 right10)))

;; H
  (assert (=> (< 0 space2) (= left11 left9)))

;; H
  (assert (=> (< 0 space2) (= space7 space5)))

;; H
  (assert (=> (< 0 space2) (= a12 a10)))

;; H
  (assert (=> (< 0 space2) (= temp12 temp10)))

;; H
  (assert (=> (< 0 space2) (= right13 right11)))

;; H
  (assert (=> (< 0 space2) (= left12 left10)))

;; H
  (assert (=> (< 0 space2) (= space8 space6)))

;; H
  (assert (=> (< 0 space2) (= a13 a11)))

;; H
  (assert (=> (not (< 0 space2)) (= temp11 (mk_int__ref temp))))

;; H
  (assert (=> (not (< 0 space2)) (= right12 (mk_int__ref right))))

;; H
  (assert (=> (not (< 0 space2)) (= left11 (mk_int__ref left))))

;; H
  (assert (=> (not (< 0 space2)) (= space7 (mk_int__ref space2))))

;; H
  (assert (=> (not (< 0 space2)) (= a12 (mk_map__ref a1))))

;; H
  (assert (=> (not (< 0 space2)) (= temp12 temp1)))

;; H
  (assert (=> (not (< 0 space2)) (= right13 right1)))

;; H
  (assert (=> (not (< 0 space2)) (= left12 left1)))

;; H
  (assert (=> (not (< 0 space2)) (= space8 space2)))

;; H
  (assert (=> (not (< 0 space2)) (= a13 a1)))

;; H
  (assert (= temp13 temp11))

;; H
  (assert (= right14 right12))

;; H
  (assert (= left13 left11))

;; H
  (assert (= space9 space7))

;; H
  (assert (= a14 a12))

;; H
  (assert (= temp14 temp12))

;; H
  (assert (= right15 right13))

;; H
  (assert (= left14 left12))

;; H
  (assert (= space10 space8))

;; H
  (assert (= a15 a13))

(assert
;; WP_parameter_def
 ;; File "prefixsum.ads", line 36, characters 0-0
  (not (= (to_rep (select (map__content a14) 0)) 0)))
(check-sat)
