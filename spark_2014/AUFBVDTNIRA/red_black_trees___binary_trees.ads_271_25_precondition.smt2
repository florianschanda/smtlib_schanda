;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-fun dummy () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

(declare-sort extended_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (extended_index_type extended_index_type) Bool)

(declare-fun dummy1 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_156)))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort position_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (position_type position_type) Bool)

(declare-fun dummy2 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort direction 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (direction direction) Bool)

(declare-fun dummy3 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant2 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 1)) (in_range4 temp___expr_168)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq4 (us_rep us_rep) Bool)

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(define-fun ole ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq4
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-fun is_concat (us_rep us_rep us_rep) Bool)

(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_199 us_rep)
  (temp___skip_top_level_200 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_200 true))
                                         (= (length temp___expr_199) 0)))

;; is_concat__post_axiom
  (assert true)

;; is_concat__def_axiom
  (assert
  (forall ((q us_rep) (v us_rep) (p us_rep))
  (! (=> (is_concat__function_guard (is_concat q v p) q v p)
     (= (= (is_concat q v p) true)
     (and
     (and
     (and (= (- (length p) (length v)) (length q))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length q))) (= (get p i) (get q i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length v)))
     (= (get p (+ i (length q))) (get v i)))))
     (forall ((i Int))
     (=> (and (<= (+ (length q) 1) i) (<= i (length p)))
     (= (get v (- i (length q))) (get p i))))))) :pattern ((is_concat q v p)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq5 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq5 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1)
  (Array Int us_rep1)) Bool)

(define-fun dynamic_invariant3 ((temp___expr_216 (Array Int us_rep1))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int))
                                      (=>
                                      (and (<= 1 temp___217)
                                      (<= temp___217 100))
                                      (=> (= temp___is_init_213 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_216 temp___217)))) 100)))))

(define-fun default_initial_assumption1 ((temp___expr_219 (Array Int us_rep1))
  (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int))
                                         (=>
                                         (and (<= 1 temp___221)
                                         (<= temp___221 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221))) 
                                         (of_int 0))))))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1)))
  (! (=> (oeq__function_guard1 (oeq1 m1 m2) m1 m2)
     (= (= (oeq1 m1 m2) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true)
     (=
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true)
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true))))))) :pattern (
  (oeq1 m1 m2)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq7 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy6 () us_rep2)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep2)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep2 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq8 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq7 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq7 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy7 () (Array Int us_rep2))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int us_rep2)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep2)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq7 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep2))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep2) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq9 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq8
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq8 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy8 () us_rep3)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep3)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep3 (forest__content
                                                               a))

(declare-fun size (us_rep3) Int)

(declare-fun size__function_guard (Int us_rep3) Bool)

(declare-fun tree_structure (us_rep3) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep3) Bool)

;; temp___result_287_def
  (assert
  (forall ((temp___286 us_rep3)) (size__function_guard (size temp___286)
  temp___286)))

(define-fun default_initial_assumption2 ((temp___expr_281 us_rep3)
  (temp___skip_top_level_282 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_281))) 0)
                                         (forall ((temp___284 Int))
                                         (=>
                                         (and (<= 1 temp___284)
                                         (<= temp___284 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_281)) temp___284)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_281)) temp___284)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_281)) temp___284)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_281)) temp___284)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_282 true))
                                         (= (size temp___expr_281) 0))))

;; temp___result_290_def
  (assert
  (forall ((temp___289 us_rep3)) (tree_structure__function_guard
  (tree_structure temp___289) temp___289)))

(define-fun type_invariant ((temp___288 us_rep3)) Bool (= (tree_structure
                                                          temp___288) true))

;; size__post_axiom
  (assert
  (forall ((f us_rep3))
  (! (=> (type_invariant f)
     (let ((result (size f)))
     (=> (size__function_guard result f) (dynamic_invariant1 result true
     false true)))) :pattern ((size f)) )))

;; size__def_axiom
  (assert
  (forall ((f us_rep3))
  (! (=> (size__function_guard (size f) f)
     (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))))) :pattern (
  (size f)) )))

(declare-fun valid_root (us_rep3 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep3 Int) Bool)

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (let ((result (valid_root f i)))
     (and (size__function_guard (size f) f)
     (=> (valid_root__function_guard result f i)
     (=> (< (size f) i) (not (= result true))))))) :pattern ((valid_root f i)) ))))

;; valid_root__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (valid_root__function_guard (valid_root f i) f i)
     (= (= (valid_root f i) true)
     (and (<= i (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___298 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___298 i))))) 2)))) :pattern ((valid_root f i)) ))))

(declare-fun parent (us_rep3 Int) Int)

(declare-fun parent__function_guard (Int us_rep3 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=> (and (dynamic_invariant i true true true) (type_invariant f))
     (let ((result (parent f i)))
     (and (valid_root__function_guard (valid_root f i) f i)
     (and (size__function_guard (size f) f)
     (=> (parent__function_guard result f i)
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false
     true))))))) :pattern ((parent f i)) ))))

;; parent__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant i true true true) (parent__function_guard
     (parent f i) f i))
     (= (parent f i) (to_rep
                     (rec__binary_trees__cell__parent
                     (us_split_fields3
                     (let ((temp___306 (rec__binary_trees__forest__c
                                       (us_split_fields5 f))))
                     (select temp___306 i))))))) :pattern ((parent f i)) ))))

(declare-fun position (us_rep3 Int) Int)

(declare-fun position__function_guard (Int us_rep3 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (and (parent__function_guard (parent f i) f i)
     (=>
     (and (and (dynamic_invariant i true true true) (type_invariant f))
     (not (= (parent f i) 0)))
     (let ((result (position f i)))
     (=> (position__function_guard result f i) (dynamic_invariant2 result
     true false true))))) :pattern ((position f i)) ))))

;; position__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant i true true true) (position__function_guard
     (position f i) f i))
     (= (position f i) (to_rep1
                       (rec__binary_trees__cell__position
                       (us_split_fields3
                       (let ((temp___312 (rec__binary_trees__forest__c
                                         (us_split_fields5 f))))
                       (select temp___312 i))))))) :pattern ((position f i)) ))))

(declare-fun peek (us_rep3 Int Int) Int)

(declare-fun peek__function_guard (Int us_rep3 Int Int) Bool)

;; peek__post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant i true true true) (dynamic_invariant2 d true
     true true)) (type_invariant f))
     (let ((result (peek f i d)))
     (and (position__function_guard (position f result) f result)
     (and (parent__function_guard (parent f result) f result)
     (and (forall ((j Int)) (parent__function_guard (parent f j) f j))
     (and (forall ((j Int)) (position__function_guard (position f j) f j))
     (and (forall ((j Int)) (parent__function_guard (parent f j) f j))
     (and (forall ((j Int)) (position__function_guard (position f j) f j))
     (=> (peek__function_guard result f i d)
     (and
     (and
     (ite (not (= result 0))
     (and (= (position f result) d) (= (parent f result) i))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (= (parent f j) i) (not (= (position f j) d))))))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (and (= (parent f j) i) (= (position f j) d)) (= result j)))))
     (dynamic_invariant1 result true false true))))))))))) :pattern (
  (peek f i d)) ))))

;; peek__def_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant i true true true) (dynamic_invariant2 d true
     true true)) (peek__function_guard (peek f i d) f i d))
     (= (peek f i d) (ite (= d 0)
                     (to_rep
                     (rec__binary_trees__cell__left
                     (us_split_fields3
                     (let ((temp___329 (rec__binary_trees__forest__c
                                       (us_split_fields5 f))))
                     (select temp___329 i)))))
                     (to_rep
                     (rec__binary_trees__cell__right
                     (us_split_fields3
                     (let ((temp___330 (rec__binary_trees__forest__c
                                       (us_split_fields5 f))))
                     (select temp___330 i)))))))) :pattern ((peek f i d)) ))))

(declare-fun model__ (us_rep3 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep3 Int) Bool)

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep3))
  (forall ((root Int))
  (! (and (valid_root__function_guard (valid_root f root) f root)
     (=>
     (and (and (dynamic_invariant root true true true) (type_invariant f))
     (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and
     (forall ((i Int)) (is_add__function_guard
     (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i))))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i)))))
     (=> (model____function_guard result f root)
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant3 result true false true))))))))))))) :pattern (
  (model__ f root)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun root () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun d () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun v () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun default_initial_assumption3 ((temp___expr_265 us_rep2)
  (temp___skip_top_level_266 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_265))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_265))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_265))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_265))) 2)))

(define-fun default_initial_assumption4 ((temp___expr_272 (Array Int us_rep2))
  (temp___skip_top_level_273 Bool)) Bool (forall ((temp___274 Int))
                                         (=>
                                         (and (<= 1 temp___274)
                                         (<= temp___274 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_272 temp___274)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_272 temp___274)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_272 temp___274)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_272 temp___274)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

;; tree_structure__def_axiom
  (assert
  (forall ((f us_rep3))
  (! (=> (tree_structure__function_guard (tree_structure f) f)
     (= (= (tree_structure f) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (forall ((i1 Int))
     (=>
     (and
     (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields5 f))) 1) i1)
     (<= i1 100))
     (= (bool_eq7
        (let ((temp___580 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___580 i1))
        (mk___rep1
        (mk___split_fields1 (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true)))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__parent
           (us_split_fields3
           (let ((temp___581 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___581 i1))))))
     (<= (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields3
         (let ((temp___581 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___581 i1))))) (to_rep
                                    (rec__binary_trees__forest__s
                                    (us_split_fields5 f))))))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__left
           (us_split_fields3
           (let ((temp___582 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___582 i1))))))
     (<= (to_rep
         (rec__binary_trees__cell__left
         (us_split_fields3
         (let ((temp___582 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___582 i1))))) (to_rep
                                    (rec__binary_trees__forest__s
                                    (us_split_fields5 f))))))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__right
           (us_split_fields3
           (let ((temp___583 (rec__binary_trees__forest__c
                             (us_split_fields5 f))))
           (select temp___583 i1))))))
     (<= (to_rep
         (rec__binary_trees__cell__right
         (us_split_fields3
         (let ((temp___583 (rec__binary_trees__forest__c
                           (us_split_fields5 f))))
         (select temp___583 i1))))) (to_rep
                                    (rec__binary_trees__forest__s
                                    (us_split_fields5 f))))))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (=>
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___585 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___585 i1))))) 2)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___584 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___584 i1))))) 0)))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___590 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___590 i1))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___586 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___586 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___587 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___587 i1)))))))))) 0)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___588 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___588 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields3
                           (let ((temp___589 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___589 i1)))))))))) i1))))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___595 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___595 i1))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___591 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___591 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___592 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___592 i1)))))))))) 1)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___593 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___593 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields3
                           (let ((temp___594 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___594 i1)))))))))) i1))))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___598 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___598 i1))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___599 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___599 i1))))) 0))
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields3
        (let ((temp___596 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___596 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___597 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___597 i1)))))))))) i1)))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields3
        (let ((temp___602 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___602 i1))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields3
        (let ((temp___603 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___603 i1))))) 1))
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields3
        (let ((temp___600 (rec__binary_trees__forest__c (us_split_fields5 f))))
        (select temp___600 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields3
                           (let ((temp___601 (rec__binary_trees__forest__c
                                             (us_split_fields5 f))))
                           (select temp___601 i1)))))))))) i1))))))) :pattern (
  (tree_structure f)) )))

(define-fun dynamic_invariant4 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range3 temp___expr_162)))

(define-fun dynamic_invariant5 ((temp___expr_205 us_rep1)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true)
                                      (=> (= temp___is_init_202 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_205))) 100))))

(define-fun default_initial_assumption5 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_207))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_207)) (of_int 0))))

(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___211))) 100))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d1 Int))
  (! (=> (is_add__function_guard (is_add s1 d1 s2) s1 d1 s2)
     (= (= (is_add s1 d1 s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d1)))) :pattern ((is_add s1 d1 s2)) ))))

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (count_type count_type) Bool)

(declare-fun dummy9 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant6 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_144)))

(declare-sort extended_index 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (extended_index extended_index) Bool)

(declare-fun dummy10 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant7 ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_192)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (element_type element_type) Bool)

(declare-fun dummy11 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 1)) (in_range7 temp___expr_186)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position1 Int))
  (! (=>
     (and (dynamic_invariant7 position1 true true true)
     (and (<= 1 position1) (<= position1 (last container))))
     (dynamic_invariant8 (get container position1) true false true)) :pattern (
  (get container position1)) ))))

(declare-fun f__split_fields () extended_index_type)

(declare-fun f__split_fields1 () (Array Int us_rep2))

(declare-fun f_old__split_fields () extended_index_type)

(declare-fun f_old__split_fields1 () (Array Int us_rep2))

(declare-fun o () extended_index_type)

(declare-fun o1 () extended_index_type)

(declare-fun o2 () extended_index_type)

(declare-fun o3 () extended_index_type)

(declare-fun o4 () position_type)

(declare-fun o5 () extended_index_type)

(declare-fun o6 () extended_index_type)

(declare-fun o7 () extended_index_type)

(declare-fun o8 () position_type)

(declare-fun o9 () (Array Int us_rep2))

(declare-fun o10 () extended_index_type)

(declare-fun o11 () (Array Int us_rep2))

(declare-fun temp___1199 () extended_index_type)

(declare-fun temp___11991 () (Array Int us_rep2))

(declare-fun o12 () extended_index_type)

(declare-fun o13 () extended_index_type)

(declare-fun o14 () extended_index_type)

(declare-fun o15 () extended_index_type)

(declare-fun o16 () position_type)

(declare-fun o17 () extended_index_type)

(declare-fun o18 () extended_index_type)

(declare-fun o19 () extended_index_type)

(declare-fun o20 () position_type)

(declare-fun o21 () (Array Int us_rep2))

(declare-fun o22 () extended_index_type)

(declare-fun o23 () (Array Int us_rep2))

(declare-fun temp___1194 () extended_index_type)

(declare-fun temp___11941 () (Array Int us_rep2))

(declare-fun o24 () position_type)

(declare-fun o25 () extended_index_type)

(declare-fun o26 () extended_index_type)

(declare-fun o27 () extended_index_type)

(declare-fun o28 () position_type)

(declare-fun o29 () extended_index_type)

(declare-fun o30 () extended_index_type)

(declare-fun o31 () extended_index_type)

(declare-fun o32 () position_type)

(declare-fun o33 () Int)

(declare-fun o34 () (Array Int us_rep2))

(declare-fun o35 () us_split_fields4)

(declare-fun temp___1204 () us_rep3)

(declare-fun o36 () extended_index_type)

(declare-fun o37 () us_split_fields2)

(declare-fun o38 () us_rep2)

(declare-fun o39 () Int)

(declare-fun o40 () (Array Int us_rep2))

(declare-fun o41 () us_split_fields4)

(declare-fun temp___1209 () us_rep3)

(declare-fun j () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Int)

(declare-fun temp___1264 () (Array Int us_rep1))

(declare-fun o44 () us_rep1)

(declare-fun o45 () us_split_fields)

(declare-fun o46 () Int)

(declare-fun o47 () Int)

(declare-fun o48 () Int)

(declare-fun f__split_fields2 () us_split_fields4)

(declare-fun result () us_split_fields__ref2)

(declare-fun f_old__split_fields2 () us_split_fields4)

(declare-fun result1 () us_split_fields__ref2)

(declare-fun f__split_fields3 () us_split_fields4)

(declare-fun result2 () us_split_fields__ref2)

(declare-fun f__split_fields4 () us_split_fields4)

(declare-fun result3 () us_split_fields__ref2)

(declare-fun f__split_fields5 () us_split_fields4)

(declare-fun result4 () us_split_fields__ref2)

(declare-fun f__split_fields6 () us_split_fields4)

(declare-fun f__split_fields7 () us_split_fields__ref2)

(declare-fun f_old__split_fields3 () us_split_fields__ref2)

(declare-fun f__split_fields8 () us_split_fields4)

(declare-fun f_old__split_fields4 () us_split_fields4)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(declare-fun result9 () Bool)

(declare-fun result10 () Bool)

(declare-fun result11 () Bool)

(declare-fun result12 () Bool)

(declare-fun result13 () Bool)

(define-fun f__split_fields9 () us_split_fields__ref2 (mk___split_fields__ref2
                                                      (mk___split_fields2
                                                      f__split_fields
                                                      f__split_fields1)))

;; H
  (assert (in_range1 root))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range4 d))

;; H
  (assert (in_range2 v))

;; H
  (assert (type_invariant
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))))

;; H
  (assert (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root)
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  root) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  root))

;; H
  (assert (peek__function_guard
  (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) 
  i d) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) 
  i d))

;; H
  (assert (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) v)
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) v))

;; H
  (assert
  (and
  (= (valid_root
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) 
     root) true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) 
     i))) true)
  (and
  (= (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
     i d) 0)
  (and (not (= root v))
  (=> (not (= v 0))
  (= (valid_root
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) 
     v) true)))))))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) v)
  (mk___rep2 f_old__split_fields2) v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) root)
  (mk___rep2 f_old__split_fields2) root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) root)
  (mk___rep2 f_old__split_fields2) root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) v)
  (mk___rep2 f_old__split_fields2) v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) root)
  (mk___rep2 f_old__split_fields2) root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) root)
  (mk___rep2 f_old__split_fields2) root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) v)
  (mk___rep2 f_old__split_fields2) v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) v)
  (mk___rep2 f_old__split_fields2) v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) v)
  (mk___rep2 f_old__split_fields2) v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f__split_fields6) root) (mk___rep2 f__split_fields6)
  root))

;; H
  (assert
  (forall ((i1 Int)) (is_concat__function_guard
  (is_concat
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) v)))
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) v) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) v)))
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f_old__split_fields2) v) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1 (select (model__ (mk___rep2 f__split_fields6) root) i1))))))

;; H
  (assert
  (forall ((r Int)) (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) r)
  (mk___rep2 f_old__split_fields2) r)))

;; H
  (assert
  (forall ((r Int)) (model____function_guard
  (model__ (mk___rep2 f__split_fields6) r) (mk___rep2 f__split_fields6) r)))

;; H
  (assert
  (forall ((r Int)) (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) r)
  (mk___rep2 f_old__split_fields2) r)))

;; H
  (assert
  (forall ((r Int)) (model____function_guard
  (model__ (mk___rep2 f__split_fields6) r) (mk___rep2 f__split_fields6) r)))

;; H
  (assert
  (forall ((r Int)) (oeq__function_guard1
  (oeq1 (model__ (mk___rep2 f_old__split_fields2) r)
  (model__ (mk___rep2 f__split_fields6) r))
  (model__ (mk___rep2 f_old__split_fields2) r)
  (model__ (mk___rep2 f__split_fields6) r))))

;; H
  (assert
  (= result (mk___split_fields__ref2
            (mk___split_fields2 f_old__split_fields f_old__split_fields1))))

;; H
  (assert
  (= f_old__split_fields2 (mk___split_fields2 f__split_fields
                          f__split_fields1)))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= (to_rep o) v))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o o1))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (= d 0)
  (= (rec__binary_trees__cell__right
     (us_split_fields3 (select f__split_fields1 i))) o2))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (= d 0)
  (= (rec__binary_trees__cell__parent
     (us_split_fields3 (select f__split_fields1 i))) o3))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (= d 0)
  (= (rec__binary_trees__cell__position
     (us_split_fields3 (select f__split_fields1 i))) o4))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o5 o1))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o6 o2))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o7 o3))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o8 o4))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (= d 0)
  (= o9 (store f__split_fields1 i (mk___rep1
                                  (mk___split_fields1 o5 o6 o7 o8)))))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= f__split_fields o10))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= o9 o11))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= temp___1199 o10))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= temp___11991 o11))))

;; H
  (assert (=> (not (= v 0)) (=> (= d 0) (= result1 f__split_fields9))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (= d 0)
  (= f__split_fields3 (mk___split_fields2 temp___1199 temp___11991)))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= (to_rep o12) v))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (not (= d 0))
  (= (rec__binary_trees__cell__left
     (us_split_fields3 (select f__split_fields1 i))) o13))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o12 o14))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (not (= d 0))
  (= (rec__binary_trees__cell__parent
     (us_split_fields3 (select f__split_fields1 i))) o15))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (not (= d 0))
  (= (rec__binary_trees__cell__position
     (us_split_fields3 (select f__split_fields1 i))) o16))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o17 o13))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o18 o14))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o19 o15))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o20 o16))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (not (= d 0))
  (= o21 (store f__split_fields1 i (mk___rep1
                                   (mk___split_fields1 o17 o18 o19 o20)))))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= f__split_fields o22))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= o21 o23))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= temp___1194 o22))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= temp___11941 o23))))

;; H
  (assert (=> (not (= v 0)) (=> (not (= d 0)) (= result2 f__split_fields9))))

;; H
  (assert
  (=> (not (= v 0))
  (=> (not (= d 0))
  (= f__split_fields4 (mk___split_fields2 temp___1194 temp___11941)))))

;; H
  (assert
  (=> (not (= v 0)) (=> (not (= d 0)) (= f__split_fields3 f__split_fields4))))

;; H
  (assert (=> (not (= v 0)) (= (to_rep1 o24) d)))

;; H
  (assert
  (=> (not (= v 0))
  (= (rec__binary_trees__cell__left
     (us_split_fields3
     (select (rec__binary_trees__forest__c f__split_fields3) v))) o25)))

;; H
  (assert
  (=> (not (= v 0))
  (= (rec__binary_trees__cell__right
     (us_split_fields3
     (select (rec__binary_trees__forest__c f__split_fields3) v))) o26)))

;; H
  (assert
  (=> (not (= v 0))
  (= (rec__binary_trees__cell__parent
     (us_split_fields3
     (select (rec__binary_trees__forest__c f__split_fields3) v))) o27)))

;; H
  (assert (=> (not (= v 0)) (= o24 o28)))

;; H
  (assert (=> (not (= v 0)) (= o29 o25)))

;; H
  (assert (=> (not (= v 0)) (= o30 o26)))

;; H
  (assert (=> (not (= v 0)) (= o31 o27)))

;; H
  (assert (=> (not (= v 0)) (= o32 o28)))

;; H
  (assert (=> (not (= v 0)) (and (<= 1 v) (<= v 100))))

;; H
  (assert (=> (not (= v 0)) (= o33 v)))

;; H
  (assert
  (=> (not (= v 0))
  (= o34 (store (rec__binary_trees__forest__c f__split_fields3) o33 (mk___rep1
                                                                    (mk___split_fields1
                                                                    o29 
                                                                    o30 
                                                                    o31 
                                                                    o32))))))

;; H
  (assert
  (=> (not (= v 0))
  (= o35 (mk___split_fields2 (rec__binary_trees__forest__s f__split_fields3)
         o34))))

;; H
  (assert (=> (not (= v 0)) (= temp___1204 (mk___rep2 o35))))

;; H
  (assert
  (=> (not (= v 0)) (= result3 (mk___split_fields__ref2 f__split_fields3))))

;; H
  (assert
  (=> (not (= v 0)) (= f__split_fields5 (us_split_fields5 temp___1204))))

;; H
  (assert (=> (not (= v 0)) (= (to_rep o36) i)))

;; H
  (assert
  (=> (not (= v 0))
  (= o37 (mk___split_fields1
         (rec__binary_trees__cell__left
         (us_split_fields3
         (select (rec__binary_trees__forest__c f__split_fields5) v)))
         (rec__binary_trees__cell__right
         (us_split_fields3
         (select (rec__binary_trees__forest__c f__split_fields5) v))) 
         o36
         (rec__binary_trees__cell__position
         (us_split_fields3
         (select (rec__binary_trees__forest__c f__split_fields5) v)))))))

;; H
  (assert (=> (not (= v 0)) (= o38 (mk___rep1 o37))))

;; H
  (assert (=> (not (= v 0)) (and (<= 1 v) (<= v 100))))

;; H
  (assert (=> (not (= v 0)) (= o39 v)))

;; H
  (assert
  (=> (not (= v 0))
  (= o40 (store (rec__binary_trees__forest__c f__split_fields5) o39 o38))))

;; H
  (assert
  (=> (not (= v 0))
  (= o41 (mk___split_fields2 (rec__binary_trees__forest__s f__split_fields5)
         o40))))

;; H
  (assert (=> (not (= v 0)) (= temp___1209 (mk___rep2 o41))))

;; H
  (assert
  (=> (not (= v 0)) (= result4 (mk___split_fields__ref2 f__split_fields5))))

;; H
  (assert
  (=> (not (= v 0)) (= f__split_fields6 (us_split_fields5 temp___1209))))

;; H
  (assert
  (=> (not (= v 0))
  (and (type_invariant (mk___rep2 f_old__split_fields2)) (type_invariant
  (mk___rep2 f__split_fields6)))))

;; H
  (assert
  (=> (not (= v 0))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) v))) true)
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) i1))) true)
  (ite (= (ole
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__ (mk___rep2 f__split_fields6) root) v)))
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__ (mk___rep2 f__split_fields6) root) i1)))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) v) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) root) i1))) true)))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) root) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) v) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) root) i1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) root) i1)))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) v) i1))) true)
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) v)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) v) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f__split_fields6) root) i1)))) true))))
  (forall ((r Int))
  (=>
  (and (<= 1 r)
  (<= r (to_rep (rec__binary_trees__forest__s f__split_fields6))))
  (=>
  (and (and (not (= r root)) (not (= r v)))
  (= (to_rep1
     (rec__binary_trees__cell__position
     (us_split_fields3
     (select (rec__binary_trees__forest__c f_old__split_fields2) r)))) 2))
  (= (oeq1 (model__ (mk___rep2 f_old__split_fields2) r)
     (model__ (mk___rep2 f__split_fields6) r)) true))))))))))))

;; H
  (assert
  (=> (not (not (= v 0)))
  (= f__split_fields6 (mk___split_fields2 f__split_fields f__split_fields1))))

;; H
  (assert (=> (not (not (= v 0))) (= f__split_fields6 f__split_fields2)))

;; H
  (assert
  (= f_old__split_fields3 (mk___split_fields__ref2 f_old__split_fields2)))

;; H
  (assert (= f__split_fields7 (mk___split_fields__ref2 f__split_fields6)))

;; H
  (assert (= f_old__split_fields4 f_old__split_fields2))

;; H
  (assert (= f__split_fields8 f__split_fields6))

;; H
  (assert (type_invariant
  (mk___rep2 (us_split_fields__content2 f__split_fields7))))

;; H
  (assert (type_invariant
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))))

;; H
  (assert
  (and
  (and
  (= o47 (size
         (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))))
  (size__function_guard o47
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))))
  (and (in_range2 o47) (= o47 (to_rep f__split_fields)))))

;; H
  (assert (type_invariant
  (mk___rep2 (us_split_fields__content2 f__split_fields7))))

;; H
  (assert
  (and
  (and
  (= o48 (size (mk___rep2 (us_split_fields__content2 f__split_fields7))))
  (size__function_guard o48
  (mk___rep2 (us_split_fields__content2 f__split_fields7))))
  (and (in_range2 o48)
  (= o48 (to_rep
         (rec__binary_trees__forest__s
         (us_split_fields__content2 f__split_fields7)))))))

;; H
  (assert (= result5 (ite (= o48 o47) true false)))

;; H
  (assert (= result5 true))

;; H
  (assert (position__function_guard
  (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46))

;; H
  (assert (parent__function_guard
  (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46))

;; H
  (assert
  (forall ((j1 Int)) (parent__function_guard
  (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (position__function_guard
  (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (parent__function_guard
  (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (position__function_guard
  (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert (type_invariant
  (mk___rep2 (us_split_fields__content2 f__split_fields7))))

;; H
  (assert
  (and
  (and
  (= o46 (peek (mk___rep2 (us_split_fields__content2 f__split_fields7)) i d))
  (peek__function_guard o46
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) i d))
  (and (in_range2 o46)
  (and
  (= o46 (ite (= d 0)
         (to_rep
         (rec__binary_trees__cell__left
         (us_split_fields3
         (select (rec__binary_trees__forest__c
                 (us_split_fields__content2 f__split_fields7)) i))))
         (to_rep
         (rec__binary_trees__cell__right
         (us_split_fields3
         (select (rec__binary_trees__forest__c
                 (us_split_fields__content2 f__split_fields7)) i))))))
  (and
  (ite (not (= o46 0))
  (and
  (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46) 
  d)
  (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) o46) 
  i))
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  i)
  (not
  (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  d))))))
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  i)
  (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  d)) (= o46 j1)))))))))

;; H
  (assert (= result6 (ite (= v o46) true false)))

;; H
  (assert (= result6 true))

;; H
  (assert
  (forall ((j1 Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (valid_root__function_guard
  (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (= (= result7 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (valid_root
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1) true)
  (not (= j1 v)))
  (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) true))))))

;; H
  (assert (= result7 true))

;; H
  (assert
  (forall ((j1 Int)) (valid_root__function_guard
  (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)))

;; H
  (assert
  (= (= result8 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) true)
  (= (valid_root
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1) true))))))

;; H
  (assert (= result8 true))

;; H
  (assert
  (forall ((j1 Int)) (parent__function_guard
  (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  j1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)))

;; H
  (assert
  (= (= result9 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=> (not (= j1 v))
  (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  j1)))))))

;; H
  (assert (= result9 true))

;; H
  (assert
  (forall ((j1 Int)) (parent__function_guard
  (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (position__function_guard
  (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1)))

;; H
  (assert
  (forall ((j1 Int)) (position__function_guard
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  j1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1)))

;; H
  (assert
  (= (= result10 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and (not (= j1 v))
  (not
  (= (parent (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 0)))
  (= (position (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1) 
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  j1)))))))

;; H
  (assert (= result10 true))

;; H
  (assert
  (forall ((j1 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1 e)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1 e)))

;; H
  (assert
  (forall ((j1 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1
  e) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1 e)))

;; H
  (assert
  (= (= result11 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 1))
  (=> (or (not (= j1 i)) (not (= e d)))
  (= (peek (mk___rep2 (us_split_fields__content2 f__split_fields7)) j1 e) 
  (peek (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) j1
  e)))))))))

;; H
  (assert (= result11 true))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  root) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  root))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (us_split_fields__content2 f__split_fields7)) root)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) root))

;; H
  (assert
  (= (= result12 true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 f__split_fields f__split_fields1)) root) j1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2 (us_split_fields__content2 f__split_fields7)) 
             root) j1))) true))))))

;; H
  (assert (= result12 true))

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j 100))

;; H
  (assert
  (forall ((i1 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (position__function_guard
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (position__function_guard
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1) (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)))

;; H
  (assert
  (forall ((i1 Int)) (is_add__function_guard
  (is_add
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select temp___1264 (parent
                      (mk___rep2
                      (mk___split_fields2 f__split_fields f__split_fields1))
                      i1))))
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1)
  (rec__tree_model__path_type__a (us_split_fields1 (select temp___1264 i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select temp___1264 (parent
                      (mk___rep2
                      (mk___split_fields2 f__split_fields f__split_fields1))
                      i1))))
  (position (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
  i1)
  (rec__tree_model__path_type__a (us_split_fields1 (select temp___1264 i1))))))

;; H
  (assert (=> (not (= v 0)) (and (= o42 v) (in_range1 v))))

;; H
  (assert
  (=> (not (= v 0)) (type_invariant
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)))))

;; H
  (assert (=> (not (= v 0)) (and (= o43 v) (in_range1 v))))

;; H
  (assert
  (=> (not (= v 0))
  (and
  (and
  (= temp___1264 (model__
                 (mk___rep2
                 (mk___split_fields2 f__split_fields f__split_fields1)) 
                 o43))
  (model____function_guard temp___1264
  (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) o43))
  (and (dynamic_invariant3 temp___1264 true false true)
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1264 o43))) true)
  (and
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1264 o43)))) 0)
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=> (not (= i1 o43))
  (ite (and
       (not
       (= (parent
          (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1))
          i1) 0))
       (= (rec__tree_model__path_type__k
          (us_split_fields1
          (select temp___1264 (parent
                              (mk___rep2
                              (mk___split_fields2 f__split_fields
                              f__split_fields1)) i1)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1264 i1))) true)
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1264 i1))) true))))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (ite (and
       (= (rec__tree_model__path_type__k
          (us_split_fields1 (select temp___1264 i1))) true)
       (not (= i1 o43)))
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select temp___1264 (parent
                         (mk___rep2
                         (mk___split_fields2 f__split_fields
                         f__split_fields1)) i1))))
     (position
     (mk___rep2 (mk___split_fields2 f__split_fields f__split_fields1)) i1)
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1264 i1)))) true)
  (= (length
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1264 i1)))) 0))))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1264 i1))) true)
  (forall ((j1 Int))
  (=> (and (<= 1 j1) (<= j1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select temp___1264 j1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1264 i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select temp___1264 j1)))) true))
  (= j1 i1)))))))))))))))

;; H
  (assert (=> (not (= v 0)) (= o44 (select temp___1264 j))))

;; H
  (assert (=> (not (= v 0)) (= o45 (us_split_fields1 o44))))

;; H
  (assert
  (=> (not (= v 0)) (= result13 (rec__tree_model__path_type__k o45))))

;; H
  (assert (=> (not (not (= v 0))) (= result13 false)))

;; H
  (assert (= result13 true))

;; H
  (assert (type_invariant
  (mk___rep2 (us_split_fields__content2 f__split_fields7))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7)) root)
  (mk___rep2 (us_split_fields__content2 f__split_fields7)) root))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (valid_root (mk___rep2 (us_split_fields__content2 f__split_fields7))
     root) true)))
(check-sat)
