;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (bv2nat ((_ int2bv 64) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort unsigned_64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(define-fun bool_eq2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy2 () unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64 
  (unsigned_64__content a))

(define-fun dynamic_invariant2 ((temp___expr_184 (_ BitVec 64))
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool true)

(declare-sort my_index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (my_index my_index) Bool)

(declare-fun dummy3 () my_index)

(declare-datatypes ()
((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content
                                                                    a))

(declare-fun nth1 ((_ BitVec 8) Int) Bool)

(declare-fun lsr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun to_int3 ((_ BitVec 8)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 256)) (= (bv2nat ((_ int2bv 8) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv1 x ((_ int2bv 8) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 8))))))
(declare-fun power1 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort unsigned_8 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(define-fun bool_eq4 ((x (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (unsigned_8 unsigned_8) Bool)

(declare-fun dummy4 () unsigned_8)

(declare-datatypes ()
((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8 
  (unsigned_8__content a))

(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)

;; inversion_axiom
  (assert
  (forall ((x unsigned_8))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x unsigned_8)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_8)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int unsigned_8))))))
(declare-fun slide ((Array Int unsigned_8) Int Int) (Array Int unsigned_8))

;; slide_eq
  (assert
  (forall ((a (Array Int unsigned_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int unsigned_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int unsigned_8) Int Int (Array Int unsigned_8)
  Int Int) (Array Int unsigned_8))

;; concat_def
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned_8 Int) (Array Int unsigned_8))

;; singleton_def
  (assert
  (forall ((v unsigned_8))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int unsigned_8)) (a__first Int) (a__last Int)
  (b (Array Int unsigned_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int unsigned_8) Int Int (Array Int unsigned_8)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int unsigned_8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int unsigned_8) (elts a))

(define-fun of_array ((a (Array Int unsigned_8)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int unsigned_8)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int unsigned_8)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int unsigned_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int unsigned_8))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int unsigned_8))) (<= 0 (object__alignment a))))

(define-fun bool_eq6 ((x us_t)
  (y us_t)) Bool (bool_eq5 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-fun dummy5 () us_t)

(declare-datatypes ()
((byte_sequence__ref (mk_byte_sequence__ref (byte_sequence__content us_t)))))
(define-fun byte_sequence__ref___projection ((a byte_sequence__ref)) us_t 
  (byte_sequence__content a))

(declare-fun nth8_stream (us_t Int) Bool)

(declare-fun nth8_stream__function_guard (Bool us_t Int) Bool)

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun dynamic_invariant3 ((temp___expr_208 us_t)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (not (= temp___skip_constant_206 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_208)
                                      (last1 temp___expr_208))))

;; nth8_stream__post_axiom
  (assert true)

;; nth8_stream__def_axiom
  (assert
  (forall ((stream us_t))
  (forall ((pos Int))
  (! (= (= (nth8_stream stream pos) true)
     (= (nth1 (to_rep1 (select (to_array stream) (div1 pos 8)))
        (- 7 (mod1 pos 8))) true)) :pattern ((nth8_stream stream pos)) ))))

(declare-fun maxvalue (Int) (_ BitVec 64))

(declare-fun maxvalue__function_guard ((_ BitVec 64) Int) Bool)

;; maxvalue__post_axiom
  (assert
  (forall ((len Int))
  (! (=> (dynamic_invariant1 len true true true) (dynamic_invariant2
     (maxvalue len) true false true)) :pattern ((maxvalue len)) )))

;; maxvalue__def_axiom
  (assert
  (forall ((len Int))
  (! (=> (dynamic_invariant1 len true true true)
     (= (maxvalue len) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))) :pattern (
  (maxvalue len)) )))

(declare-fun peekbit64 ((_ BitVec 64) Int) Bool)

(declare-fun peekbit64__function_guard (Bool (_ BitVec 64) Int) Bool)

;; peekbit64__post_axiom
  (assert
  (forall ((value (_ BitVec 64)))
  (forall ((left Int))
  (! (=>
     (and
     (and (dynamic_invariant2 value true true true) (dynamic_invariant1 left
     true true true)) (< left 64))
     (= (= (peekbit64 value left) true) (= (nth value (- 63 left)) true))) :pattern (
  (peekbit64 value left)) ))))

;; peekbit64__def_axiom
  (assert
  (forall ((value (_ BitVec 64)))
  (forall ((left Int))
  (! (= (= (peekbit64 value left) true)
     (not
     (= (bvand value (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- 63 left)))) ((_ int2bv 64) 0)))) :pattern (
  (peekbit64 value left)) ))))

(declare-fun start () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun len () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun addr__first () integer)

(declare-fun addr__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun value () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t26b__ref (mk_t26b__ref (t26b__content integer)))))
(define-fun t26b__ref___projection ((a t26b__ref)) integer (t26b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant4 ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_202 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_202)))

(declare-fun addr () (Array Int unsigned_8))

(declare-fun result__ () Int)

(declare-fun flag () Bool)

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () (_ BitVec 64))

(declare-fun temp___299 () Int)

(declare-fun temp___300 () (Array Int unsigned_8))

(declare-fun temp___298 () (Array Int unsigned_8))

(declare-fun temp___296 () Bool)

(declare-fun temp___301 () (Array Int unsigned_8))

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Bool)

(declare-fun o9 () Int)

(declare-fun i1 () Int)

(declare-fun o10 () (_ BitVec 64))

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Bool)

(declare-fun o15 () Bool)

(declare-fun o16 () Bool)

(declare-fun o17 () Int)

(declare-fun o18 () (_ BitVec 64))

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Bool)

(declare-fun o23 () Bool)

(declare-fun o24 () Bool)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Bool)

(declare-fun o30 () Int)

(declare-fun addr1 () (Array Int unsigned_8))

(declare-fun result__1 () Int)

(declare-fun flag1 () Bool)

(declare-fun i2 () Int)

(declare-fun result () Bool)

(declare-fun result1 () Int)

(declare-fun result__2 () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Int)

(declare-fun result__3 () Int)

(declare-fun result__4 () Int)

(declare-fun result__5 () Int)

(declare-fun result4 () Int)

(declare-fun i3 () Int)

(declare-fun addr2 () (Array Int unsigned_8))

(declare-fun flag2 () Bool)

(declare-fun i4 () Int)

(declare-fun result5 () Bool)

(declare-fun flag3 () Bool)

(declare-fun addr3 () (Array Int unsigned_8))

(declare-fun addr4 () (Array Int unsigned_8))

(declare-fun flag4 () Bool)

(declare-fun i5 () Int)

(declare-fun addr5 () (Array Int unsigned_8))

(declare-fun flag5 () Bool)

(declare-fun i6 () Int)

(declare-fun addr6 () (Array Int unsigned_8))

(declare-fun flag6 () Bool)

(declare-fun i7 () Int)

(declare-fun addr7 () (Array Int unsigned_8))

(declare-fun flag7 () Bool)

(declare-fun i8 () Int)

(declare-fun result6 () Int)

(declare-fun result__6 () Int)

(declare-fun addr8 () (Array Int unsigned_8))

(declare-fun result__7 () int__ref)

(declare-fun flag8 () bool__ref)

(declare-fun i9 () int__ref)

(declare-fun addr9 () (Array Int unsigned_8))

(declare-fun result__8 () Int)

(declare-fun flag9 () Bool)

(declare-fun i10 () Int)

(declare-fun addr10 () map__ref)

(declare-fun result__9 () int__ref)

(declare-fun flag10 () bool__ref)

(declare-fun i11 () int__ref)

(declare-fun addr11 () (Array Int unsigned_8))

(declare-fun result__10 () Int)

(declare-fun flag11 () Bool)

(declare-fun i12 () Int)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(declare-fun result9 () Bool)

(declare-fun result10 () Bool)

(define-fun addr12 () map__ref (mk_map__ref addr8))

(define-fun i13 () int__ref (mk_int__ref i7))

(define-fun flag12 () bool__ref (mk_bool__ref flag6))

(define-fun addr13 () map__ref (mk_map__ref addr6))

(define-fun i14 () int__ref (mk_int__ref i))

(define-fun flag13 () bool__ref (mk_bool__ref flag))

(define-fun result__11 () int__ref (mk_int__ref result__))

(define-fun addr14 () map__ref (mk_map__ref addr))

;; H
  (assert (in_range2 start))

;; H
  (assert (in_range2 len))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep addr__first)
  (to_rep addr__last)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 result__)))

;; H
  (assert
  (and (= (to_rep addr__first) 0)
  (and
  (<= (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last))
           (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 2147483647)
  (and (< (+ start len) 2147483647) (and (<= 0 len) (<= len 63))))))

;; H
  (assert
  (or
  (and
  (and
  (and (= i9 i14)
  (and (= flag8 flag13)
  (and (= result__7 (mk_int__ref result__4)) (= addr12 addr14))))
  (and (= i10 i2)
  (and (= flag9 flag1) (and (= result__8 result__5) (= addr9 addr1)))))
  (and
  (and
  (and
  (and
  (and
  (ite (<= (to_rep addr__first) (to_rep addr__last))
  (= o (+ (- (to_rep addr__last) (to_rep addr__first)) 1)) (= o 0))
  (and (= o1 o) (in_range1 o))) (= o2 (* o1 8)))
  (and (= o3 o2) (in_range1 o2)))
  (and (and (= o4 (+ start len)) (in_range1 (+ start len)))
  (= result (ite (< o3 o4) true false))))
  (ite (= result true)
  (and (and (= result__2 result__4) (= result__5 result__2))
  (and (= (mk_int__ref result1) result__11) (= result__2 (- 1))))
  (and (and (= result__3 result__4) (= result__5 result__3))
  (and
  (and
  (and (= o5 (maxvalue len))
  (= o5 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len))))
  (= result2 (ite (bvuge value o5) true false)))
  (and (= result2 true)
  (and (= (mk_int__ref result3) result__11) (= result__3 (- 2)))))))))
  (and
  (and
  (and
  (and
  (and
  (and
  (ite (<= (to_rep addr__first) (to_rep addr__last))
  (= o (+ (- (to_rep addr__last) (to_rep addr__first)) 1)) (= o 0))
  (and (= o1 o) (in_range1 o))) (= o2 (* o1 8)))
  (and (= o3 o2) (in_range1 o2)))
  (and (and (= o4 (+ start len)) (in_range1 (+ start len)))
  (= result (ite (< o3 o4) true false))))
  (and (not (= result true))
  (and
  (and
  (and
  (and (= o5 (maxvalue len))
  (= o5 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len))))
  (= result2 (ite (bvuge value o5) true false)))
  (and (not (= result2 true))
  (and (= result__3 result__) (= result__3 result__1))))
  (= result__2 result__3))))
  (and
  (and
  (and (= i9 i13)
  (and (= flag8 flag12)
  (and (= result__7 (mk_int__ref result__6)) (= addr12 addr13))))
  (and (= i10 i8)
  (and (= flag9 flag7) (and (= result__8 result__6) (= addr9 addr7)))))
  (and
  (and (and (= (mk_int__ref result4) i14) (= i3 0))
  (ite (and (<= 0 i3) (<= i3 (- len 1)))
  (and
  (and
  (and (= temp___299 i3)
  (and (= temp___300 addr)
  (and (= temp___298 addr)
  (and (= temp___296 flag)
  (and (= temp___301 addr)
  (and
  (and (and (<= 0 i4) (<= i4 len))
  (and
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j (- start 1)))
  (=
  (= (nth8_stream
     (mk___t temp___300 (mk (to_rep addr__first) (to_rep addr__last))) j) true)
  (= (nth8_stream
     (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j) true))))
  (and
  (forall ((j Int))
  (=> (and (<= start j) (<= j (- (+ start i4) 1)))
  (=
  (= (nth8_stream
     (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j) true)
  (= (nth value (+ (- (- len j) 1) start)) true))))
  (forall ((j Int))
  (=>
  (and (<= (+ start i4) j)
  (<= j (- (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last))
                (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 1)))
  (=
  (= (nth8_stream
     (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) j) true)
  (= (nth8_stream
     (mk___t temp___301 (mk (to_rep addr__first) (to_rep addr__last))) j) true)))))))
  (and
  (and (=> (<= 0 (- len 1)) (dynamic_property1 0 (- len 1) i4))
  (and (<= 0 i4) (<= i4 (- len 1))))
  (and
  (and
  (and
  (and (and (= o6 (+ (- 64 len) i4)) (in_range1 (+ (- 64 len) i4)))
  (and (= o7 o6) (in_range2 o6)))
  (and (= o8 (peekbit64 value o7))
  (and
  (= (= o8 true)
  (not
  (= (bvand value (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- 63 o7)))) ((_ int2bv 64) 0))))
  (= (= o8 true) (= (nth value (- 63 o7)) true)))))
  (and (= flag2 result5) (= flag3 o8)))
  (and
  (and (and (= o9 (+ start i4)) (in_range1 (+ start i4)))
  (and
  (forall ((i15 Int))
  (=>
  (and (<= 0 i15)
  (<= i15 (- (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last))
                  (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 1)))
  (=> (not (= i15 o9))
  (=
  (= (nth8_stream
     (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) i15) true)
  (= (nth8_stream
     (mk___t addr2 (mk (to_rep addr__first) (to_rep addr__last))) i15) true)))))
  (=
  (= (nth8_stream
     (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) o9) true)
  (= flag3 true))))
  (and
  (=
  (= (nth8_stream
     (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last)))
     (+ start i4)) true)
  (= (nth value (- (- len i4) 1)) true))
  (and
  (forall ((k Int))
  (=> (and (<= start k) (<= k (- (+ start i4) 1)))
  (and
  (and (not (= k (+ start i4)))
  (and (<= 0 k)
  (<= k (- (* 8 (ite (<= (to_rep addr__first) (to_rep addr__last))
                (+ (- (to_rep addr__last) (to_rep addr__first)) 1) 0)) 1))))
  (=
  (= (nth8_stream
     (mk___t addr3 (mk (to_rep addr__first) (to_rep addr__last))) k) true)
  (= (nth value (- (- (+ start len) k) 1)) true))))) (= i4 (- len 1)))))))))))))
  (and (and (= i4 i5) (and (= flag3 flag4) (= addr3 addr4)))
  (and (= i6 i4) (and (= flag5 flag3) (= addr5 addr3)))))
  (and
  (and (= i13 (mk_int__ref i5))
  (and (= flag12 (mk_bool__ref flag4)) (= addr13 (mk_map__ref addr4))))
  (and (= i8 i6) (and (= flag7 flag5) (= addr7 addr5)))))
  (and (and (= i3 i7) (and (= flag12 flag13) (= addr13 addr14)))
  (and (= i8 i3) (and (= flag7 flag1) (= addr7 addr1))))))
  (and (= result__2 result6) (= result__6 0)))))))

;; H
  (assert (= i11 i9))

;; H
  (assert (= flag10 flag8))

;; H
  (assert (= result__9 result__7))

;; H
  (assert (= addr10 addr12))

;; H
  (assert (= i12 i10))

;; H
  (assert (= flag11 flag9))

;; H
  (assert (= result__10 result__8))

;; H
  (assert (= addr11 addr9))

;; H
  (assert (<= (- 2) (int__content result__9)))

;; H
  (assert (<= (int__content result__9) 0))

;; H
  (assert
  (=> (<= (to_rep addr__first) (to_rep addr__last))
  (= o26 (+ (- (to_rep addr__last) (to_rep addr__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep addr__first) (to_rep addr__last))) (= o26 0)))

;; H
  (assert (and (= o27 o26) (in_range1 o26)))

;; H
  (assert (= o28 (* 8 o27)))

;; H
  (assert (= o29 (ite (< o28 (+ start len)) true false)))

;; H
  (assert (= o30 (to_int2 o29)))

;; H
  (assert
  (= result7 (ite (= (to_int2
                     (ite (= (int__content result__9) (- 1)) true false)) 
             o30) true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (=> (<= (to_rep addr__first) (to_rep addr__last))
  (= o19 (+ (- (to_rep addr__last) (to_rep addr__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep addr__first) (to_rep addr__last))) (= o19 0)))

;; H
  (assert (and (= o20 o19) (in_range1 o19)))

;; H
  (assert (= o21 (* 8 o20)))

;; H
  (assert (= o22 (ite (<= (+ start len) o21) true false)))

;; H
  (assert
  (and (= o18 (maxvalue len))
  (= o18 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))))

;; H
  (assert (= o23 (ite (bvule o18 value) true false)))

;; H
  (assert (= o24 (ite (= o23 true) o22 false)))

;; H
  (assert (= o25 (to_int2 o24)))

;; H
  (assert
  (= result8 (ite (= (to_int2
                     (ite (= (int__content result__9) (- 2)) true false)) 
             o25) true false)))

;; H
  (assert (= result8 true))

;; H
  (assert
  (=> (<= (to_rep addr__first) (to_rep addr__last))
  (= o11 (+ (- (to_rep addr__last) (to_rep addr__first)) 1))))

;; H
  (assert (=> (not (<= (to_rep addr__first) (to_rep addr__last))) (= o11 0)))

;; H
  (assert (and (= o12 o11) (in_range1 o11)))

;; H
  (assert (= o13 (* 8 o12)))

;; H
  (assert (= o14 (ite (<= (+ start len) o13) true false)))

;; H
  (assert
  (and (= o10 (maxvalue len))
  (= o10 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))))

;; H
  (assert (= o15 (ite (bvugt o10 value) true false)))

;; H
  (assert (= o16 (ite (= o15 true) o14 false)))

;; H
  (assert (= o17 (to_int2 o16)))

;; H
  (assert
  (= result9 (ite (= (to_int2
                     (ite (= (int__content result__9) 0) true false)) 
             o17) true false)))

;; H
  (assert (= result9 true))

;; H
  (assert
  (=> (= (int__content result__9) 0)
  (= (= result10 true)
  (forall ((i15 Int))
  (=> (and (<= 0 i15) (<= i15 (- start 1)))
  (=
  (= (nth8_stream (mk___t addr (mk (to_rep addr__first) (to_rep addr__last)))
     i15) true)
  (= (nth8_stream
     (mk___t (map__content addr10)
     (mk (to_rep addr__first) (to_rep addr__last))) i15) true)))))))

;; H
  (assert (=> (not (= (int__content result__9) 0)) (= result10 (of_int 1))))

;; H
  (assert (= result10 true))

;; H
  (assert (= (int__content result__9) 0))

;; H
  (assert (<= start i1))

;; H
  (assert (<= i1 (- (+ start len) 1)))

(assert
;; WP_parameter_def
 ;; File "bitwalker.ads", line 77, characters 0-0
  (not (in_range2 (+ (- (- len i1) 1) start))))
(check-sat)
