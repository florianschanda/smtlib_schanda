;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-fun dummy () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__my_ordered_sets__m__set__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type 
  (rec__my_ordered_sets__m__set__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__my_ordered_sets__m__set us_main_type)))))
(define-fun us_split_fields_Set__projection ((a us_split_fields)) us_main_type 
  (rec__my_ordered_sets__m__set a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_ordered_sets__m__set__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_ordered_sets__m__set__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__my_ordered_sets__m__set
                           (us_split_fields1 a))
                           (rec__my_ordered_sets__m__set
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_ordered_sets__m__set__capacity__first__bit () Int)

(declare-fun my_ordered_sets__m__set__capacity__last__bit () Int)

(declare-fun my_ordered_sets__m__set__capacity__position () Int)

;; my_ordered_sets__m__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__first__bit))

;; my_ordered_sets__m__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__m__set__capacity__first__bit my_ordered_sets__m__set__capacity__last__bit))

;; my_ordered_sets__m__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref___projection ((a set__ref)) us_rep (set__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__my_ordered_sets__m__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type 
  (rec__my_ordered_sets__m__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__my_ordered_sets__m__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__my_ordered_sets__m__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun my_ordered_sets__m__cursor__node__first__bit () Int)

(declare-fun my_ordered_sets__m__cursor__node__last__bit () Int)

(declare-fun my_ordered_sets__m__cursor__node__position () Int)

;; my_ordered_sets__m__cursor__node__first__bit_axiom
  (assert (<= 0 my_ordered_sets__m__cursor__node__first__bit))

;; my_ordered_sets__m__cursor__node__last__bit_axiom
  (assert
  (< my_ordered_sets__m__cursor__node__first__bit my_ordered_sets__m__cursor__node__last__bit))

;; my_ordered_sets__m__cursor__node__position_axiom
  (assert (<= 0 my_ordered_sets__m__cursor__node__position))

(declare-fun dummy2 () us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-fun no_element () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_142)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_ordered_sets__m__set__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq3 (us_rep2 us_rep2) Bool)

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy3 () us_rep2)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep2)))))
(define-fun map__ref___projection ((a map__ref)) us_rep2 (map__content a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                   a))

(declare-fun get (us_rep2 us_rep1) Int)

(declare-fun get__function_guard (Int us_rep2 us_rep1) Bool)

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-fun dummy4 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_4__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 1 2147483647)) (in_range2
                                      temp___expr_366)))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_373 us_rep2)
  (temp___skip_top_level_374 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_374 true))
                                         (and
                                         (= (is_empty temp___expr_373) true)
                                         (= (length2 temp___expr_373) 0))))

(declare-fun has_key (us_rep2 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)

(declare-fun witness (us_rep2 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep1) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq2 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((get container
                                                              key)) ))))

(declare-fun positions (us_rep) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and (and (<= 1 (get result i)) (<= (get result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq2 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-sort extended_index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (extended_index extended_index) Bool)

(declare-fun dummy5 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq6 (us_rep3 us_rep3) Bool)

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun dummy6 () us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-fun elements (us_rep) us_rep3)

(declare-fun elements__function_guard (us_rep3 us_rep) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get1 left
                                                                   n) 
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

(define-fun e_elements_included ((left us_rep3)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length3 left)))
                             (and (< 0 (find right (get1 left i)))
                             (= (get1 right (find right (get1 left i))) 
                             (get1 left i)))))
                        true false))

(declare-fun e_elements_included__function_guard (Bool us_rep3 us_rep3) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (ite (= (oeq left right) true)
     (= (oeq2 (elements left) (elements right)) true)
     (or
     (not (= (e_elements_included (elements left) (elements right)) true))
     (not (= (e_elements_included (elements right) (elements left)) true)))) :pattern (
  (oeq left right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(declare-fun equivalent_sets (us_rep us_rep) Bool)

(declare-fun equivalent_sets__function_guard (Bool us_rep us_rep) Bool)

(declare-fun equivalent_sets1 (Int us_rep us_rep) Bool)

(declare-fun equivalent_sets__function_guard1 (Bool Int us_rep us_rep) Bool)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq7 (us_rep4 us_rep4) Bool)

(declare-fun user_eq7 (us_rep4 us_rep4) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun dummy7 () us_rep4)

(declare-datatypes () ((set__ref1 (mk_set__ref1 (set__content1 us_rep4)))))
(define-fun set__ref_2__projection ((a set__ref1)) us_rep4 (set__content1 a))

(declare-fun oeq3 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)

(declare-fun model__ (us_rep) us_rep4)

(declare-fun model____function_guard (us_rep4 us_rep) Bool)

;; equivalent_sets__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (equivalent_sets left right) true)
     (= (oeq3 (model__ left) (model__ right)) true)) :pattern ((equivalent_sets
                                                               left right)) )))

;; equivalent_sets__post__dispatch_axiom
  (assert true)

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

(declare-fun is_empty2 (Int us_rep) Bool)

(declare-fun is_empty__function_guard2 (Bool Int us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern (
  (is_empty1 container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(declare-fun assign__specific_post (Int us_split_fields us_split_discrs
  us_rep us_split_fields) Bool)

(declare-fun contains (us_rep4 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep4 Int) Bool)

(declare-fun included_except (us_rep4 us_rep4 Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep4 us_rep4 Int) Bool)

(declare-fun oeq4 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep2 us_rep2) Bool)

(declare-fun mapping_preserved_except (us_rep3 us_rep3 us_rep2 us_rep2
  us_rep1) Bool)

(declare-fun mapping_preserved_except__function_guard (Bool us_rep3 us_rep3
  us_rep2 us_rep2 us_rep1) Bool)

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get1 (elements container)
                          (get (positions container) position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(declare-fun element1 (Int us_rep us_rep1) Int)

(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)

(declare-fun replace_element__specific_post (Int us_split_fields
  us_split_discrs us_rep1 Int us_split_fields) Bool)

(declare-fun move__specific_post (Int us_split_fields us_split_discrs
  us_split_fields us_split_discrs us_split_fields us_split_fields) Bool)

(define-fun contains1 ((container us_rep)
  (item Int)) Bool (contains (model__ container) item))

(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)

(declare-fun contains2 (Int us_rep Int) Bool)

(declare-fun contains__function_guard2 (Bool Int us_rep Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (element_type1 element_type1) Bool)

(declare-fun dummy8 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_289 Int)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (or (= temp___is_init_286 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_289)))

;; contains__post__dispatch_axiom
  (assert true)

(define-fun equivalent_elements ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)

(declare-fun ole (us_rep4 us_rep4) Bool)

(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)

(define-fun range_equal ((left us_rep3) (right us_rep3) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (get1 left i) (get1 right i))))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)

(define-fun range_shifted ((left us_rep3) (right us_rep3) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get1 left i) (get1 right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get1 left (- i offset)) 
                                           (get1 right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep3 us_rep3 Int Int
  Int) Bool)

(define-fun e_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get1 container i) item)))
                   true false))

(declare-fun e_bigger_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< item (get1 container i))))
                   true false))

(declare-fun e_smaller_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_is_find ((container us_rep3) (item Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range container 1 (- position 1)
                            item) (of_int 1)) (ite (< position (length3
                                                               container))
                                              (e_smaller_than_range container
                                              (+ position 1)
                                              (length3 container) item)
                                              (of_int 1))))

(declare-fun e_is_find__function_guard (Bool us_rep3 Int Int) Bool)

(declare-fun p_positions_shifted (us_rep2 us_rep2 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(declare-fun insert__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields2 Bool us_split_fields us_split_fields2 Bool) Bool)

(declare-fun insert__2__specific_post (Int us_split_fields us_split_discrs
  Int us_split_fields) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length3 left) (length3 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (get1
                                                                    left i) 
                                                                    (get1
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(declare-fun include__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun replace__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun exclude__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun delete__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun delete__2__specific_post (Int us_split_fields us_split_discrs
  us_split_fields2 us_split_fields us_split_fields2) Bool)

(declare-fun first_element (us_rep) Int)

(declare-fun first_element__function_guard (Int us_rep) Bool)

(declare-fun first_element1 (Int us_rep) Int)

(declare-fun first_element__function_guard1 (Int Int us_rep) Bool)

(declare-fun delete_first__specific_post (Int us_split_fields us_split_discrs
  us_split_fields) Bool)

(declare-fun ole1 (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun last_element (us_rep) Int)

(declare-fun last_element__function_guard (Int us_rep) Bool)

(declare-fun last_element1 (Int us_rep) Int)

(declare-fun last_element__function_guard1 (Int Int us_rep) Bool)

(declare-fun delete_last__specific_post (Int us_split_fields us_split_discrs
  us_split_fields) Bool)

(declare-fun intersection__2 (us_rep us_rep) us_rep)

(declare-fun intersection__2__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun intersection__21 (Int us_rep us_rep) us_rep)

(declare-fun intersection__2__function_guard1 (us_rep Int us_rep
  us_rep) Bool)

(declare-fun includes_intersection (us_rep4 us_rep4 us_rep4) Bool)

(declare-fun includes_intersection__function_guard (Bool us_rep4 us_rep4
  us_rep4) Bool)

(declare-fun num_overlaps (us_rep4 us_rep4) Int)

(declare-fun num_overlaps__function_guard (Int us_rep4 us_rep4) Bool)

(define-fun e_elements_included__2 ((left us_rep3) (model__1 us_rep4)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length3 left)))
                             (=> (= (contains model__1 (get1 left i)) true)
                             (and (< 0 (find right (get1 left i)))
                             (= (get1 right (find right (get1 left i))) 
                             (get1 left i))))))
                        true false))

(declare-fun e_elements_included__2__function_guard (Bool us_rep3 us_rep4
  us_rep3) Bool)

;; intersection__2__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (let ((result (intersection__2 left right)))
     (and
     (and
     (and
     (and
     (and (= (length result) (num_overlaps (model__ left) (model__ right)))
     (= (ole (model__ result) (model__ left)) true))
     (= (ole (model__ result) (model__ right)) true))
     (= (includes_intersection (model__ result) (model__ left)
        (model__ right)) true))
     (= (e_elements_included (elements result) (elements left)) true))
     (= (e_elements_included__2 (elements left) (model__ right)
        (elements result)) true))) :pattern ((intersection__2 left right)) )))

;; intersection__2__post__dispatch_axiom
  (assert true)

(declare-fun included_in_union (us_rep4 us_rep4 us_rep4) Bool)

(declare-fun included_in_union__function_guard (Bool us_rep4 us_rep4
  us_rep4) Bool)

(define-fun e_elements_included__3 ((container us_rep3) (model__1 us_rep4)
  (left us_rep3)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length3 container)))
                             (ite (= (contains model__1 (get1 container i)) true)
                             (and (< 0 (find left (get1 container i)))
                             (= (get1 left (find left (get1 container i))) 
                             (get1 container i)))
                             (and (< 0 (find right (get1 container i)))
                             (= (get1 right (find right (get1 container i))) 
                             (get1 container i))))))
                        true false))

(declare-fun e_elements_included__3__function_guard (Bool us_rep3 us_rep4
  us_rep3 us_rep3) Bool)

(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep2 us_rep2) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep2
  us_rep2) Bool)

(declare-fun union__specific_post (Int us_split_fields us_split_discrs us_rep
  us_split_fields) Bool)

(declare-fun union__2 (us_rep us_rep) us_rep)

(declare-fun union__2__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun union__21 (Int us_rep us_rep) us_rep)

(declare-fun union__2__function_guard1 (us_rep Int us_rep us_rep) Bool)

;; union__2__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (<= (length left) (- 2147483647 (length right)))
     (let ((result (union__2 left right)))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (length result) (+ (- (length left) (num_overlaps (model__ left)
                                            (model__ right))) (length right)))
     (= (ole (model__ left) (model__ result)) true))
     (= (ole (model__ right) (model__ result)) true))
     (= (included_in_union (model__ result) (model__ left) (model__ right)) true))
     (= (e_elements_included__3 (elements result) (model__ left)
        (elements left) (elements right)) true))
     (= (e_elements_included__2 (elements left) (model__ left)
        (elements result)) true))
     (= (e_elements_included__3 (elements right) (model__ left)
        (elements right) (elements result)) true)))) :pattern ((union__2 left
                                                               right)) )))

;; union__2__post__dispatch_axiom
  (assert true)

(declare-fun intersection__specific_post (Int us_split_fields us_split_discrs
  us_rep us_split_fields) Bool)

(declare-fun no_overlap (us_rep4 us_rep4) Bool)

(declare-fun no_overlap__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-fun difference__specific_post (Int us_split_fields us_split_discrs
  us_rep us_split_fields) Bool)

(declare-fun difference__2 (us_rep us_rep) us_rep)

(declare-fun difference__2__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun difference__21 (Int us_rep us_rep) us_rep)

(declare-fun difference__2__function_guard1 (us_rep Int us_rep us_rep) Bool)

;; difference__2__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (let ((result (difference__2 left right)))
     (and
     (and
     (and
     (and
     (and
     (= (length result) (- (length left) (num_overlaps (model__ left)
                                         (model__ right))))
     (= (ole (model__ result) (model__ left)) true))
     (= (no_overlap (model__ result) (model__ right)) true))
     (= (included_in_union (model__ left) (model__ result) (model__ right)) true))
     (= (e_elements_included (elements result) (elements left)) true))
     (= (e_elements_included__2 (elements left) (model__ result)
        (elements result)) true))) :pattern ((difference__2 left right)) )))

;; difference__2__post__dispatch_axiom
  (assert true)

(declare-fun not_in_both (us_rep4 us_rep4 us_rep4) Bool)

(declare-fun not_in_both__function_guard (Bool us_rep4 us_rep4 us_rep4) Bool)

(declare-fun symmetric_difference__specific_post (Int us_split_fields
  us_split_discrs us_rep us_split_fields) Bool)

(declare-fun symmetric_difference__2 (us_rep us_rep) us_rep)

(declare-fun symmetric_difference__2__function_guard (us_rep us_rep
  us_rep) Bool)

(declare-fun symmetric_difference__21 (Int us_rep us_rep) us_rep)

(declare-fun symmetric_difference__2__function_guard1 (us_rep Int us_rep
  us_rep) Bool)

;; symmetric_difference__2__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (<= (length left) (- 2147483647 (length right)))
     (let ((result (symmetric_difference__2 left right)))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (length result) (+ (- (length left) (* 2 (num_overlaps (model__ left)
                                                 (model__ right)))) (length
                                                                    right)))
     (= (not_in_both (model__ result) (model__ left) (model__ right)) true))
     (= (included_in_union (model__ left) (model__ result) (model__ right)) true))
     (= (included_in_union (model__ right) (model__ result) (model__ left)) true))
     (= (e_elements_included__3 (elements result) (model__ left)
        (elements left) (elements right)) true))
     (= (e_elements_included__2 (elements left) (model__ result)
        (elements result)) true))
     (= (e_elements_included__2 (elements right) (model__ result)
        (elements result)) true)))) :pattern ((symmetric_difference__2 left
                                              right)) )))

;; symmetric_difference__2__post__dispatch_axiom
  (assert true)

(declare-fun overlap (us_rep us_rep) Bool)

(declare-fun overlap__function_guard (Bool us_rep us_rep) Bool)

(declare-fun overlap1 (Int us_rep us_rep) Bool)

(declare-fun overlap__function_guard1 (Bool Int us_rep us_rep) Bool)

;; overlap__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (overlap left right) true)
     (not (= (no_overlap (model__ left) (model__ right)) true))) :pattern (
  (overlap left right)) )))

;; overlap__post__dispatch_axiom
  (assert true)

(declare-fun is_subset (us_rep us_rep) Bool)

(declare-fun is_subset__function_guard (Bool us_rep us_rep) Bool)

(declare-fun is_subset1 (Int us_rep us_rep) Bool)

(declare-fun is_subset__function_guard1 (Bool Int us_rep us_rep) Bool)

;; is_subset__post_axiom
  (assert
  (forall ((subset2 us_rep) (of_set us_rep))
  (! (= (= (is_subset subset2 of_set) true)
     (= (ole (model__ subset2) (model__ of_set)) true)) :pattern ((is_subset
                                                                  subset2
                                                                  of_set)) )))

;; is_subset__post__dispatch_axiom
  (assert true)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

(declare-fun first1 (Int us_rep) us_rep1)

(declare-fun first__function_guard1 (us_rep1 Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

(declare-fun next1 (Int us_rep us_rep1) us_rep1)

(declare-fun next__function_guard1 (us_rep1 Int us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq2 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq2 position no_element) true)
          (= (get (positions container) position) (length container)))
     (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) (+ (get (positions container)
                                              position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-fun find1 (us_rep Int) us_rep1)

(declare-fun find__function_guard1 (us_rep1 us_rep Int) Bool)

(declare-fun find2 (Int us_rep Int) us_rep1)

(declare-fun find__function_guard2 (us_rep1 Int us_rep Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant2 item true true true)
     (let ((result (find1 container item)))
     (ite (not (= (contains (model__ container) item) true))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq2 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get (positions container) result) (find (elements container) item)))
     (= (equivalent_elements (element container result) item) true))))) :pattern (
  (find1 container item)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-fun floor (us_rep Int) us_rep1)

(declare-fun floor__function_guard (us_rep1 us_rep Int) Bool)

(declare-fun floor1 (Int us_rep Int) us_rep1)

(declare-fun floor__function_guard1 (us_rep1 Int us_rep Int) Bool)

;; floor__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant2 item true true true)
     (let ((result (floor container item)))
     (ite (or (= (length container) 0) (< item (first_element container)))
     (= (bool_eq2 result no_element) true)
     (and
     (and (= (has_element container result) true)
     (not
     (< item (get1 (elements container) (get (positions container) result)))))
     (= (e_is_find (elements container) item
        (get (positions container) result)) true))))) :pattern ((floor
                                                                container
                                                                item)) ))))

;; floor__post__dispatch_axiom
  (assert true)

(declare-fun ceiling (us_rep Int) us_rep1)

(declare-fun ceiling__function_guard (us_rep1 us_rep Int) Bool)

(declare-fun ceiling1 (Int us_rep Int) us_rep1)

(declare-fun ceiling__function_guard1 (us_rep1 Int us_rep Int) Bool)

;; ceiling__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant2 item true true true)
     (let ((result (ceiling container item)))
     (ite (or (= (length container) 0) (< (last_element container) item))
     (= (bool_eq2 result no_element) true)
     (and
     (and (= (has_element container result) true)
     (not
     (< (get1 (elements container) (get (positions container) result)) item)))
     (= (e_is_find (elements container) item
        (get (positions container) result)) true))))) :pattern ((ceiling
                                                                container
                                                                item)) ))))

;; ceiling__post__dispatch_axiom
  (assert true)

(define-fun in_range5 ((rec__my_ordered_sets__m__set__capacity1 Int)
  (a us_rep)) Bool (= rec__my_ordered_sets__m__set__capacity1 (to_rep
                                                              (rec__my_ordered_sets__m__set__capacity
                                                              (us_split_discrs1
                                                              a)))))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-fun my_ordered_sets__m__set__capacity__first__bit1 () Int)

(declare-fun my_ordered_sets__m__set__capacity__last__bit1 () Int)

(declare-fun my_ordered_sets__m__set__capacity__position1 () Int)

;; my_ordered_sets__m__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__first__bit1))

;; my_ordered_sets__m__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__m__set__capacity__first__bit1 my_ordered_sets__m__set__capacity__last__bit1))

;; my_ordered_sets__m__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__position1))

(declare-fun dummy9 () us_rep)

(declare-datatypes () ((tlS__ref (mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___projection ((a tlS__ref)) us_rep (tlS__content a))

(define-fun dynamic_invariant3 ((temp___expr_781 us_rep)
  (temp___is_init_778 Bool) (temp___skip_constant_779 Bool)
  (temp___do_toplevel_780 Bool)) Bool (=>
                                      (not (= temp___skip_constant_779 true))
                                      (in_range5 10 temp___expr_781)))

(define-fun default_initial_assumption1 ((temp___expr_783 us_rep)
  (temp___skip_top_level_784 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_ordered_sets__m__set__capacity
                                            (us_split_discrs1
                                            temp___expr_783))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_784 true))
                                         (= (is_empty1 temp___expr_783) true))))

(declare-fun l__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range6 ((rec__my_ordered_sets__m__set__capacity1 Int)
  (a us_rep)) Bool (= rec__my_ordered_sets__m__set__capacity1 (to_rep
                                                              (rec__my_ordered_sets__m__set__capacity
                                                              (us_split_discrs1
                                                              a)))))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-fun my_ordered_sets__m__set__capacity__first__bit2 () Int)

(declare-fun my_ordered_sets__m__set__capacity__last__bit2 () Int)

(declare-fun my_ordered_sets__m__set__capacity__position2 () Int)

;; my_ordered_sets__m__set__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__first__bit2))

;; my_ordered_sets__m__set__capacity__last__bit_axiom
  (assert
  (< my_ordered_sets__m__set__capacity__first__bit2 my_ordered_sets__m__set__capacity__last__bit2))

;; my_ordered_sets__m__set__capacity__position_axiom
  (assert (<= 0 my_ordered_sets__m__set__capacity__position2))

(declare-fun dummy10 () us_rep)

(declare-datatypes () ((tkS__ref (mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___projection ((a tkS__ref)) us_rep (tkS__content a))

(define-fun dynamic_invariant4 ((temp___expr_790 us_rep)
  (temp___is_init_787 Bool) (temp___skip_constant_788 Bool)
  (temp___do_toplevel_789 Bool)) Bool (=>
                                      (not (= temp___skip_constant_788 true))
                                      (in_range6 10 temp___expr_790)))

(define-fun default_initial_assumption2 ((temp___expr_792 us_rep)
  (temp___skip_top_level_793 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_ordered_sets__m__set__capacity
                                            (us_split_discrs1
                                            temp___expr_792))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_793 true))
                                         (= (is_empty1 temp___expr_792) true))))

(declare-fun k__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun m__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun m__split_discrs1 () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun m__split_discrs2 () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun m__split_discrs3 () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (positive_count_type positive_count_type) Bool)

(declare-fun dummy11 () positive_count_type)

(declare-datatypes ()
((positive_count_type__ref
 (mk_positive_count_type__ref
 (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type 
  (positive_count_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_309 Int)
  (temp___is_init_306 Bool) (temp___skip_constant_307 Bool)
  (temp___do_toplevel_308 Bool)) Bool (=>
                                      (or (= temp___is_init_306 true)
                                      (<= 1 2147483647)) (in_range7
                                      temp___expr_309)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq6 a b) (oeq2 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_353 us_rep3)
  (temp___skip_top_level_354 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_354 true))
                                         (= (length3 temp___expr_353) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((item Int))
  (! (=> (dynamic_invariant2 item true true true)
     (let ((result (find container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length3 container))
     (= (equivalent_elements item (get1 container result)) true)))
     (dynamic_invariant result true false true)))) :pattern ((find container
                                                             item)) ))))

(declare-fun keys_included (us_rep2 us_rep2) Bool)

(declare-fun keys_included__function_guard (Bool us_rep2 us_rep2) Bool)

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep2) (big us_rep2))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant5 cut true true true) (dynamic_invariant count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key small i) true)
     (ite (< (get small i) cut) (= (get big i) (get small i))
     (= (- (get big i) count) (get small i))))))
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get big i) count))
     (<= (- (get big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                           small big cut
                                                           count)) ))))

;; mapping_preserved__post_axiom
  (assert
  (forall ((e_left us_rep3) (e_right us_rep3))
  (forall ((p_left us_rep2) (p_right us_rep2))
  (! (=> (= (mapping_preserved e_left e_right p_left p_right) true)
     (and
     (and (= (keys_included p_left p_right) true)
     (= (e_elements_included e_left e_right) true))
     (forall ((c us_rep1))
     (=> (= (has_key p_left c) true)
     (= (get1 e_left (get p_left c)) (get1 e_right (get p_right c))))))) :pattern (
  (mapping_preserved e_left e_right p_left p_right)) ))))

;; mapping_preserved_except__post_axiom
  (assert
  (forall ((e_left us_rep3) (e_right us_rep3))
  (forall ((p_left us_rep2) (p_right us_rep2))
  (forall ((position us_rep1))
  (! (=>
     (= (mapping_preserved_except e_left e_right p_left p_right position) true)
     (and (= (keys_included p_left p_right) true)
     (forall ((c us_rep1))
     (=> (= (has_key p_left c) true)
     (=> (not (= (bool_eq2 c position) true))
     (= (get1 e_left (get p_left c)) (get1 e_right (get p_right c)))))))) :pattern (
  (mapping_preserved_except e_left e_right p_left p_right position)) )))))

(declare-fun is_empty3 (us_rep4) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep4) Bool)

(define-fun default_initial_assumption4 ((temp___expr_322 us_rep4)
  (temp___skip_top_level_323 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_323 true))
                                         (= (is_empty3 temp___expr_322) true)))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard4 (Int us_rep4) Bool)

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length4 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-sort element_type2 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (element_type2 element_type2) Bool)

(declare-fun dummy12 () element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_2__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

;; elements__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (elements container)))
     (and
     (and
     (and (= (length3 result) (length container))
     (forall ((temp___387 Int))
     (=>
     (and (in_range3 temp___387)
     (= (iter_has_element result temp___387) true))
     (= (contains (model__ container) (get1 result temp___387)) true))))
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains (model__ container) item) true))
     (and (< 0 (find result item))
     (= (equivalent_elements (get1 result (find result item)) item) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (and (= (find result (get1 result i)) i)
     (= (e_is_find result (get1 result i) i) true)))))) :pattern ((elements
                                                                  container)) )))

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant2
  (element1 attr__tag container position) true false
  true) :pattern ((element1 attr__tag container position)) )))))

;; first_element__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty1 container) true))
     (let ((result (first_element container)))
     (and
     (and (= result (get1 (elements container) 1))
     (= (e_smaller_than_range (elements container) 2 (length container)
        result) true))
     (dynamic_invariant2 result true false true)))) :pattern ((first_element
                                                              container)) )))

;; first_element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant2
  (first_element1 attr__tag container) true false
  true) :pattern ((first_element1 attr__tag container)) ))))

;; last_element__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty1 container) true))
     (let ((result (last_element container)))
     (and
     (and (= result (get1 (elements container) (length container)))
     (= (e_bigger_than_range (elements container) 1 (- (length container) 1)
        result) true))
     (dynamic_invariant2 result true false true)))) :pattern ((last_element
                                                              container)) )))

;; last_element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant2
  (last_element1 attr__tag container) true false
  true) :pattern ((last_element1 attr__tag container)) ))))

;; has_element__post__dispatch_axiom
  (assert true)

(define-fun dynamic_invariant6 ((temp___expr_315 Int)
  (temp___is_init_312 Bool) (temp___skip_constant_313 Bool)
  (temp___do_toplevel_314 Bool)) Bool (=>
                                      (or (= temp___is_init_312 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_315)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant6 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range8 e) (= (contains container e) true))
     (= (equivalent_elements e item) true)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant (length4 container)
  true false true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq3 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (is_empty3 container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range8 item) (= (contains container item) true)))))
     (= (= result true) (= (length4 container) 0)))) :pattern ((is_empty3
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant6 item true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range8 e) (= (contains left e) true))
     (or (= (contains right e) true) (= (equivalent_elements e item) true)))))) :pattern (
  (included_except left right item)) ))))

;; includes_intersection__post_axiom
  (assert
  (forall ((container us_rep4) (left us_rep4) (right us_rep4))
  (! (= (= (includes_intersection container left right) true)
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains left item) true))
     (=> (= (contains right item) true) (= (contains container item) true))))) :pattern (
  (includes_intersection container left right)) )))

;; included_in_union__post_axiom
  (assert
  (forall ((container us_rep4) (left us_rep4) (right us_rep4))
  (! (= (= (included_in_union container left right) true)
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains container item) true))
     (or (= (contains left item) true) (= (contains right item) true))))) :pattern (
  (included_in_union container left right)) )))

;; not_in_both__post_axiom
  (assert
  (forall ((container us_rep4) (left us_rep4) (right us_rep4))
  (! (= (= (not_in_both container left right) true)
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains container item) true))
     (or (not (= (contains left item) true))
     (not (= (contains right item) true)))))) :pattern ((not_in_both
                                                        container left right)) )))

;; no_overlap__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (no_overlap left right) true)
     (forall ((item Int))
     (=> (and (in_range8 item) (= (contains left item) true))
     (not (= (contains right item) true))))) :pattern ((no_overlap left
                                                       right)) )))

(declare-fun intersection1 (us_rep4 us_rep4) us_rep4)

(declare-fun intersection__function_guard (us_rep4 us_rep4 us_rep4) Bool)

;; num_overlaps__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (let ((result (num_overlaps left right)))
     (and
     (and
     (and
     (and (= result (length4 (intersection1 left right)))
     (ite (= (ole left right) true) (= result (length4 left))
     (< result (length4 left))))
     (ite (= (ole right left) true) (= result (length4 right))
     (< result (length4 right))))
     (= (= result 0) (= (no_overlap left right) true))) (dynamic_invariant
     result true false true))) :pattern ((num_overlaps left right)) )))

;; intersection__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (let ((result (intersection1 left right)))
     (and (and (= (ole result left) true) (= (ole result right) true))
     (= (includes_intersection result left right) true))) :pattern ((intersection1
                                                                    left
                                                                    right)) )))

(define-fun dynamic_invariant7 ((temp___expr_346 Int)
  (temp___is_init_343 Bool) (temp___skip_constant_344 Bool)
  (temp___do_toplevel_345 Bool)) Bool (=>
                                      (or (= temp___is_init_343 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_346)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length3 container)) )))

(declare-sort element_type3 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (element_type3 element_type3) Bool)

(declare-fun dummy13 () element_type3)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_3__projection ((a element_type__ref3)) element_type3 
  (element_type__content3 a))

(define-fun dynamic_invariant8 ((temp___expr_340 Int)
  (temp___is_init_337 Bool) (temp___skip_constant_338 Bool)
  (temp___do_toplevel_339 Bool)) Bool (=>
                                      (or (= temp___is_init_337 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_340)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant7 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant8 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container k) true) (= (bool_eq2 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole1 left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get right key) (get left key)))))) :pattern (
  (ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key us_rep1))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get right key) (get left key)))))
     (forall ((key us_rep1))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key us_rep1)) (not (= (has_key container key) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (keys_included left right) true)
     (forall ((key us_rep1))
     (=> (= (has_key left key) true) (= (has_key right key) true)))) :pattern (
  (keys_included left right)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant1
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-fun l__split_fields () us_main_type)

(declare-fun k__split_fields () us_main_type)

(declare-fun c__split_fields () count_type)

(declare-fun o () count_type)

(declare-fun o1 () count_type)

(declare-fun temp___1081 () count_type)

(declare-fun us () Int)

(declare-fun us1 () Int)

(declare-fun temp___1058 () count_type)

(declare-fun temp___1059 () count_type)

(declare-fun result () us_split_fields__ref1)

(declare-fun c__split_fields1 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun c__split_fields2 () us_split_fields2)

(declare-fun my_ordered_sets__m__insert__2__container__fields () us_split_fields)

(declare-fun result2 () us_split_fields__ref)

(declare-fun l__split_fields1 () us_split_fields)

(declare-fun my_ordered_sets__m__insert__2__container__fields1 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun l__split_fields2 () us_split_fields)

(declare-fun c__split_fields3 () us_split_fields2)

(declare-fun b () Bool)

(declare-fun my_ordered_sets__m__insert__container__fields () us_split_fields)

(declare-fun result4 () us_split_fields__ref)

(declare-fun l__split_fields3 () us_split_fields)

(declare-fun my_ordered_sets__m__replace_element__container__fields () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun l__split_fields4 () us_split_fields)

(declare-fun my_ordered_sets__m__replace__container__fields () us_split_fields)

(declare-fun result6 () us_split_fields__ref)

(declare-fun l__split_fields5 () us_split_fields)

(declare-fun my_ordered_sets__m__assign__target__fields () us_split_fields)

(declare-fun result7 () us_split_fields__ref)

(declare-fun k__split_fields1 () us_split_fields)

(declare-fun my_ordered_sets__m__move__source__fields () us_split_fields)

(declare-fun my_ordered_sets__m__move__target__fields () us_split_fields)

(declare-fun result8 () us_split_fields__ref)

(declare-fun l__split_fields6 () us_split_fields)

(declare-fun result9 () us_split_fields__ref)

(declare-fun k__split_fields2 () us_split_fields)

(declare-fun my_ordered_sets__m__assign__target__fields1 () us_split_fields)

(declare-fun result10 () us_split_fields__ref)

(declare-fun k__split_fields3 () us_split_fields)

(declare-fun my_ordered_sets__m__include__container__fields () us_split_fields)

(declare-fun result11 () us_split_fields__ref)

(declare-fun l__split_fields7 () us_split_fields)

(declare-fun my_ordered_sets__m__insert__2__container__fields2 () us_split_fields)

(declare-fun result12 () us_split_fields__ref)

(declare-fun l__split_fields8 () us_split_fields)

(declare-fun my_ordered_sets__m__include__container__fields1 () us_split_fields)

(declare-fun result13 () us_split_fields__ref)

(declare-fun l__split_fields9 () us_split_fields)

(declare-fun my_ordered_sets__m__insert__2__container__fields3 () us_split_fields)

(declare-fun result14 () us_split_fields__ref)

(declare-fun l__split_fields10 () us_split_fields)

(declare-fun my_ordered_sets__m__delete__container__fields () us_split_fields)

(declare-fun result15 () us_split_fields__ref)

(declare-fun l__split_fields11 () us_split_fields)

(define-fun temp___10591 () us_rep1 (mk___rep1
                                    (mk___split_fields1 temp___1059)))

(define-fun temp___10581 () us_rep1 (mk___rep1
                                    (mk___split_fields1 temp___1058)))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___1081 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___1081)) no_element))

;; H
  (assert (and (= us 10) (in_range1 10)))

;; H
  (assert (default_initial_assumption1
  (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_ordered_sets__m__set__capacity l__split_discrs))))

;; H
  (assert (and (= us1 10) (in_range1 10)))

;; H
  (assert (default_initial_assumption2
  (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_ordered_sets__m__set__capacity k__split_discrs))))

;; H
  (assert
  (= (is_empty1
     (mk___rep l__split_discrs (mk___split_fields l__split_fields))) true))

;; H
  (assert
  (and
  (= temp___10581 (first
                  (mk___rep l__split_discrs
                  (mk___split_fields l__split_fields))))
  (ite (= (= (length
             (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true)
  (= (bool_eq2 temp___10581 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___10581) true)
  (= (get
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___10581) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref1 (mk___split_fields1 c__split_fields))))

;; H
  (assert (= c__split_fields1 (mk___split_fields1 temp___1058)))

;; H
  (assert
  (and
  (= temp___10591 (next
                  (mk___rep l__split_discrs
                  (mk___split_fields l__split_fields))
                  (mk___rep1 c__split_fields1)))
  (ite (= (ite (= (bool_eq2 (mk___rep1 c__split_fields1) no_element) false) (= 
          (get
          (positions
          (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
          (mk___rep1 c__split_fields1)) (length
                                        (mk___rep l__split_discrs
                                        (mk___split_fields l__split_fields)))) true) true)
  (= (bool_eq2 temp___10591 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___10591) true)
  (= (get
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___10591) (+ (get
                      (positions
                      (mk___rep l__split_discrs
                      (mk___split_fields l__split_fields)))
                      (mk___rep1 c__split_fields1)) 1))))))

;; H
  (assert (= result1 (mk___split_fields__ref1 c__split_fields1)))

;; H
  (assert (= c__split_fields2 (mk___split_fields1 temp___1059)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) (+ (length
                                                           (mk___rep
                                                           l__split_discrs
                                                           (mk___split_fields
                                                           l__split_fields))) 1))
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) 1) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) 1)) 1))
  (= (ole
     (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields))
     (model__ (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     1) true))
  (= (range_equal
     (elements
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__insert__2__container__fields)) 1) 1)) true))
  (= (range_shifted
     (elements
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) 1)
     (length (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     1) true))
  (= (p_positions_shifted
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields)) 1) 1) true)))

;; H
  (assert
  (= result2 (mk___split_fields__ref (mk___split_fields l__split_fields))))

;; H
  (assert
  (= l__split_fields1 my_ordered_sets__m__insert__2__container__fields))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) (+ (length
                                                            (mk___rep
                                                            l__split_discrs
                                                            l__split_fields1)) 1))
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) 2) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) 2)) 2))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields1))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1))
     (model__ (mk___rep l__split_discrs l__split_fields1)) 2) true))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields1))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__insert__2__container__fields1)) 2) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields1))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) 2)
     (length (mk___rep l__split_discrs l__split_fields1)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields1))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields1)) 2) 1) true)))

;; H
  (assert (= result3 (mk___split_fields__ref l__split_fields1)))

;; H
  (assert
  (= l__split_fields2 my_ordered_sets__m__insert__2__container__fields1))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (contains
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     1) true)
  (= (has_key
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (mk___rep1 c__split_fields3)) true))
  (= (equivalent_elements
     (element
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields)
     (mk___rep1 c__split_fields3)) 1) true))
  (= (e_is_find
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     1
     (get
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (mk___rep1 c__split_fields3))) true))
  (ite (= (contains (model__ (mk___rep l__split_discrs l__split_fields2)) 1) true)
  (and
  (and
  (and (not (= b true))
  (= (oeq3
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields2))) true))
  (= (oeq2
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (elements (mk___rep l__split_discrs l__split_fields2))) true))
  (= (oeq4
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields2))) true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= b true)
  (= (length
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields)) (+ 
  (length (mk___rep l__split_discrs l__split_fields2)) 1)))
  (= (element
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields)
     (mk___rep1 c__split_fields3)) 1))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields2))
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields2)) 1) true))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields2))
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     1
     (- (get
        (positions
        (mk___rep l__split_discrs
        my_ordered_sets__m__insert__container__fields))
        (mk___rep1 c__split_fields3)) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields2))
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (mk___rep1 c__split_fields3))
     (length (mk___rep l__split_discrs l__split_fields2)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields2))
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (get
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__insert__container__fields))
     (mk___rep1 c__split_fields3)) 1) true)))))

;; H
  (assert (= result4 (mk___split_fields__ref l__split_fields2)))

;; H
  (assert (= l__split_fields3 my_ordered_sets__m__insert__container__fields))

;; H
  (assert (not (= b true)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields)) (length
                                                              (mk___rep
                                                              l__split_discrs
                                                              l__split_fields3)))
  (= (element
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields)
     (mk___rep1 c__split_fields3)) 1))
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields)) 1) true))
  (= (included_except (model__ (mk___rep l__split_discrs l__split_fields3))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields))
     (element (mk___rep l__split_discrs l__split_fields3)
     (mk___rep1 c__split_fields3))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields3)) 1) true))
  (= (mapping_preserved_except
     (elements (mk___rep l__split_discrs l__split_fields3))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields3))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields))
     (mk___rep1 c__split_fields3)) true))
  (= (oeq4
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace_element__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields3))) true)))

;; H
  (assert (= result5 (mk___split_fields__ref l__split_fields3)))

;; H
  (assert
  (= l__split_fields4 my_ordered_sets__m__replace_element__container__fields))

;; H
  (assert
  (and
  (and
  (and
  (= (oeq3 (model__ (mk___rep l__split_discrs l__split_fields4))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields))) true)
  (= (oeq4
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields4))) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields)) 1)) 1))
  (= (equal_except (elements (mk___rep l__split_discrs l__split_fields4))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__replace__container__fields)) 1)) true)))

;; H
  (assert (= result6 (mk___split_fields__ref l__split_fields4)))

;; H
  (assert
  (= l__split_fields5 my_ordered_sets__m__replace__container__fields))

;; H
  (assert
  (let ((temp___393 (elements (mk___rep l__split_discrs l__split_fields5))))
  (forall ((temp___392 Int))
  (=>
  (and (in_range3 temp___392)
  (= (iter_has_element temp___393 temp___392) true))
  (exists ((i us_rep1))
  (and
  (= (has_key (positions (mk___rep l__split_discrs l__split_fields5)) i) true)
  (= (get1 (elements (mk___rep l__split_discrs l__split_fields5))
     (get (positions (mk___rep l__split_discrs l__split_fields5)) i)) 
  (get1 temp___393 temp___392))))))))

;; H
  (assert
  (and
  (and
  (= (oeq3
     (model__
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields))
     (model__ (mk___rep l__split_discrs l__split_fields5))) true)
  (= (oeq2
     (elements
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields))
     (elements (mk___rep l__split_discrs l__split_fields5))) true))
  (= (length
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields)) 
  (length (mk___rep l__split_discrs l__split_fields5)))))

;; H
  (assert
  (= result7 (mk___split_fields__ref (mk___split_fields k__split_fields))))

;; H
  (assert (= k__split_fields1 my_ordered_sets__m__assign__target__fields))

;; H
  (assert
  (and
  (and
  (and
  (= (oeq3
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__move__target__fields))
     (model__ (mk___rep k__split_discrs k__split_fields1))) true)
  (= (oeq2
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__move__target__fields))
     (elements (mk___rep k__split_discrs k__split_fields1))) true))
  (= (length (mk___rep k__split_discrs k__split_fields1)) (length
                                                          (mk___rep
                                                          l__split_discrs
                                                          my_ordered_sets__m__move__target__fields))))
  (= (length
     (mk___rep k__split_discrs my_ordered_sets__m__move__source__fields)) 0)))

;; H
  (assert (= result8 (mk___split_fields__ref l__split_fields5)))

;; H
  (assert (= l__split_fields6 my_ordered_sets__m__move__target__fields))

;; H
  (assert (= result9 (mk___split_fields__ref k__split_fields1)))

;; H
  (assert (= k__split_fields2 my_ordered_sets__m__move__source__fields))

;; H
  (assert
  (and
  (and
  (= (oeq3
     (model__
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields1))
     (model__ (mk___rep l__split_discrs l__split_fields6))) true)
  (= (oeq2
     (elements
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields1))
     (elements (mk___rep l__split_discrs l__split_fields6))) true))
  (= (length
     (mk___rep k__split_discrs my_ordered_sets__m__assign__target__fields1)) 
  (length (mk___rep l__split_discrs l__split_fields6)))))

;; H
  (assert (= result10 (mk___split_fields__ref k__split_fields2)))

;; H
  (assert (= k__split_fields3 my_ordered_sets__m__assign__target__fields1))

;; H
  (assert
  (= (contains (model__ (mk___rep l__split_discrs l__split_fields6)) 1) true))

;; H
  (assert
  (and
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1) true)
  (ite (= (contains (model__ (mk___rep l__split_discrs l__split_fields6)) 1) true)
  (and
  (and
  (and
  (= (oeq3 (model__ (mk___rep l__split_discrs l__split_fields6))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))) true)
  (= (oeq4
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields6))) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1)) 1))
  (= (equal_except (elements (mk___rep l__split_discrs l__split_fields6))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1)) true))
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) (+ (length
                                                         (mk___rep
                                                         l__split_discrs
                                                         l__split_fields6)) 1))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields6))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields6)) 1) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1)) 1))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields6))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__include__container__fields)) 1) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields6))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1)
     (length (mk___rep l__split_discrs l__split_fields6)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields6))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields)) 1) 1) true)))))

;; H
  (assert (= result11 (mk___split_fields__ref l__split_fields6)))

;; H
  (assert
  (= l__split_fields7 my_ordered_sets__m__include__container__fields))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) (+ (length
                                                            (mk___rep
                                                            l__split_discrs
                                                            l__split_fields7)) 1))
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) 4) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) 4)) 4))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields7))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2))
     (model__ (mk___rep l__split_discrs l__split_fields7)) 4) true))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields7))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__insert__2__container__fields2)) 4) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields7))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) 4)
     (length (mk___rep l__split_discrs l__split_fields7)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields7))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields2)) 4) 1) true)))

;; H
  (assert (= result12 (mk___split_fields__ref l__split_fields7)))

;; H
  (assert
  (= l__split_fields8 my_ordered_sets__m__insert__2__container__fields2))

;; H
  (assert
  (= (get (positions (mk___rep l__split_discrs l__split_fields8))
     (floor (mk___rep l__split_discrs l__split_fields8) 1)) 1))

;; H
  (assert
  (= (get (positions (mk___rep l__split_discrs l__split_fields8))
     (floor (mk___rep l__split_discrs l__split_fields8) 3)) 2))

;; H
  (assert
  (= (bool_eq2 (floor (mk___rep l__split_discrs l__split_fields8) 0)
     no_element) true))

;; H
  (assert
  (= (get (positions (mk___rep l__split_discrs l__split_fields8))
     (ceiling (mk___rep l__split_discrs l__split_fields8) 1)) 1))

;; H
  (assert
  (= (get (positions (mk___rep l__split_discrs l__split_fields8))
     (ceiling (mk___rep l__split_discrs l__split_fields8) 3)) 3))

;; H
  (assert
  (= (bool_eq2 (ceiling (mk___rep l__split_discrs l__split_fields8) 5)
     no_element) true))

;; H
  (assert
  (not
  (= (contains (model__ (mk___rep l__split_discrs l__split_fields8)) 3) true)))

;; H
  (assert
  (and
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3) true)
  (ite (= (contains (model__ (mk___rep l__split_discrs l__split_fields8)) 3) true)
  (and
  (and
  (and
  (= (oeq3 (model__ (mk___rep l__split_discrs l__split_fields8))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))) true)
  (= (oeq4
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (positions (mk___rep l__split_discrs l__split_fields8))) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3)) 3))
  (= (equal_except (elements (mk___rep l__split_discrs l__split_fields8))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3)) true))
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) (+ (length
                                                          (mk___rep
                                                          l__split_discrs
                                                          l__split_fields8)) 1))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields8))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (model__ (mk___rep l__split_discrs l__split_fields8)) 3) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3)) 3))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields8))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__include__container__fields1)) 3) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields8))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3)
     (length (mk___rep l__split_discrs l__split_fields8)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields8))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__include__container__fields1)) 3) 1) true)))))

;; H
  (assert (= result13 (mk___split_fields__ref l__split_fields8)))

;; H
  (assert
  (= l__split_fields9 my_ordered_sets__m__include__container__fields1))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) (+ (length
                                                            (mk___rep
                                                            l__split_discrs
                                                            l__split_fields9)) 1))
  (= (contains
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) 5) true))
  (= (get1
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) 5)) 5))
  (= (ole (model__ (mk___rep l__split_discrs l__split_fields9))
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3))) true))
  (= (included_except
     (model__
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3))
     (model__ (mk___rep l__split_discrs l__split_fields9)) 5) true))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields9))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) 1
     (- (find
        (elements
        (mk___rep l__split_discrs
        my_ordered_sets__m__insert__2__container__fields3)) 5) 1)) true))
  (= (range_shifted (elements (mk___rep l__split_discrs l__split_fields9))
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) 5)
     (length (mk___rep l__split_discrs l__split_fields9)) 1) true))
  (= (p_positions_shifted
     (positions (mk___rep l__split_discrs l__split_fields9))
     (positions
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3))
     (find
     (elements
     (mk___rep l__split_discrs
     my_ordered_sets__m__insert__2__container__fields3)) 5) 1) true)))

;; H
  (assert (= result14 (mk___split_fields__ref l__split_fields9)))

;; H
  (assert
  (= l__split_fields10 my_ordered_sets__m__insert__2__container__fields3))

;; H
  (assert
  (= (contains (model__ (mk___rep l__split_discrs l__split_fields10)) 2) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields)) (- 
  (length (mk___rep l__split_discrs l__split_fields10)) 1))
  (not
  (= (contains
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     2) true)))
  (= (ole
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     (model__ (mk___rep l__split_discrs l__split_fields10))) true))
  (= (included_except (model__ (mk___rep l__split_discrs l__split_fields10))
     (model__
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     2) true))
  (= (range_equal (elements (mk___rep l__split_discrs l__split_fields10))
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     1
     (- (find (elements (mk___rep l__split_discrs l__split_fields10)) 2) 1)) true))
  (= (range_shifted
     (elements
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     (elements (mk___rep l__split_discrs l__split_fields10))
     (find (elements (mk___rep l__split_discrs l__split_fields10)) 2)
     (length
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     1) true))
  (= (p_positions_shifted
     (positions
     (mk___rep l__split_discrs my_ordered_sets__m__delete__container__fields))
     (positions (mk___rep l__split_discrs l__split_fields10))
     (find (elements (mk___rep l__split_discrs l__split_fields10)) 2) 1) true)))

;; H
  (assert (= result15 (mk___split_fields__ref l__split_fields10)))

;; H
  (assert
  (= l__split_fields11 my_ordered_sets__m__delete__container__fields))

(assert
;; WP_parameter_def
 ;; File "my_ordered_sets.adb", line 189, characters 0-0
  (not
  (not
  (= (is_subset (mk___rep k__split_discrs k__split_fields3)
     (mk___rep l__split_discrs l__split_fields11)) true))))
(check-sat)
