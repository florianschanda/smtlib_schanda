;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort enum_t 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (enum_t enum_t) Bool)

(declare-fun dummy () enum_t)

(declare-datatypes ()
((enum_t__ref (mk_enum_t__ref (enum_t__content enum_t)))))
(define-fun enum_t__ref___projection ((a enum_t__ref)) enum_t (enum_t__content
                                                              a))

(declare-fun to_rep (enum_t) Int)

(declare-fun of_rep (Int) enum_t)

;; inversion_axiom
  (assert
  (forall ((x enum_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum_t)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int enum_t))))))
(declare-fun slide ((Array Int enum_t) Int Int) (Array Int enum_t))

;; slide_eq
  (assert
  (forall ((a (Array Int enum_t)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int enum_t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int enum_t) Int Int (Array Int enum_t) Int
  Int) (Array Int enum_t))

;; concat_def
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (enum_t Int) (Array Int enum_t))

;; singleton_def
  (assert
  (forall ((v enum_t))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int enum_t)) (a__first Int) (a__last Int)
  (b (Array Int enum_t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_138 Int))
                           (=>
                           (and (<= a__first temp___idx_138)
                           (<= temp___idx_138 a__last))
                           (= (to_rep (select a temp___idx_138)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_138)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_138 Int))
  (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last))
  (= (to_rep (select a temp___idx_138)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_138)))))))))))

(declare-fun compare ((Array Int enum_t) Int Int (Array Int enum_t) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun zero_enum_map () (Array Int enum_t))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun array_aggregates__zero_enum_map__aggregate_def (Int
  Int) (Array Int enum_t))

;; def_axiom
  (assert
  (forall ((temp___141 Int) (temp___142 Int))
  (let ((temp___140 (array_aggregates__zero_enum_map__aggregate_def
                    temp___141 temp___142)))
  (forall ((temp___143 Int))
  (ite (= temp___143 2)
  (= (select temp___140 temp___143) (of_rep temp___141))
  (= (select temp___140 temp___143) (of_rep temp___142)))))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 0 2)) (in_range temp___expr_204)))

;; zero_enum_map__def_axiom
  (assert
  (= zero_enum_map (array_aggregates__zero_enum_map__aggregate_def 2 0)))

(declare-fun m () (Array Int enum_t))

(declare-fun result () (Array Int enum_t))

(declare-fun m1 () (Array Int enum_t))

;; H
  (assert
  (= (array_aggregates__zero_enum_map__aggregate_def 2 0) zero_enum_map))

;; H
  (assert (= result m))

;; H
  (assert (= m1 zero_enum_map))

(assert
;; WP_parameter_def
 ;; File "array_aggregates.adb", line 79, characters 0-0
  (not (= (to_rep (select m1 1)) 1)))
(check-sat)
