;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(declare-sort int__ 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (int__ int__) Bool)

(declare-fun dummy5 () int__)

(declare-datatypes () ((int____ref (mk_int____ref (int____content int__)))))
(define-fun int____ref_2__projection ((a int____ref)) int__ (int____content
                                                            a))

(define-fun dynamic_invariant3 ((temp___expr_340 Int)
  (temp___is_init_337 Bool) (temp___skip_constant_338 Bool)
  (temp___do_toplevel_339 Bool)) Bool (=>
                                      (or (= temp___is_init_337 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_340)))

(declare-fun eof () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun eof_ch () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort file_descr 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (file_descr file_descr) Bool)

(declare-fun dummy6 () file_descr)

(declare-datatypes ()
((file_descr__ref (mk_file_descr__ref (file_descr__content file_descr)))))
(define-fun file_descr__ref___projection ((a file_descr__ref)) file_descr 
  (file_descr__content a))

(declare-fun to_rep2 (file_descr) Int)

(declare-fun of_rep2 (Int) file_descr)

;; inversion_axiom
  (assert
  (forall ((x file_descr))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x file_descr)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort count 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (count count) Bool)

(declare-fun dummy7 () count)

(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___projection ((a count__ref)) count (count__content a))

(declare-fun to_rep3 (count) Int)

(declare-fun of_rep3 (Int) count)

;; inversion_axiom
  (assert
  (forall ((x count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__textio__file_type__descr file_descr)(rec__textio__file_type__before_lm Bool)(rec__textio__file_type__before_lm_pm Bool)(rec__textio__file_type__col count)(rec__textio__file_type__line count)(rec__textio__file_type__page count)(rec__textio__file_type__is_regular_file Bool)))))
(define-fun us_split_fields_Descr__projection ((a us_split_fields)) file_descr 
  (rec__textio__file_type__descr a))

(define-fun us_split_fields_Before_LM__projection ((a us_split_fields)) Bool 
  (rec__textio__file_type__before_lm a))

(define-fun us_split_fields_Before_LM_PM__projection ((a us_split_fields)) Bool 
  (rec__textio__file_type__before_lm_pm a))

(define-fun us_split_fields_Col__projection ((a us_split_fields)) count 
  (rec__textio__file_type__col a))

(define-fun us_split_fields_Line__projection ((a us_split_fields)) count 
  (rec__textio__file_type__line a))

(define-fun us_split_fields_Page__projection ((a us_split_fields)) count 
  (rec__textio__file_type__page a))

(define-fun us_split_fields_Is_Regular_File__projection ((a us_split_fields)) Bool 
  (rec__textio__file_type__is_regular_file a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq9 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep2
                           (rec__textio__file_type__descr
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__textio__file_type__descr
                                                  (us_split_fields1 b))))
                        (= (rec__textio__file_type__before_lm
                           (us_split_fields1 a)) (rec__textio__file_type__before_lm
                                                 (us_split_fields1 b))))
                        (= (rec__textio__file_type__before_lm_pm
                           (us_split_fields1 a)) (rec__textio__file_type__before_lm_pm
                                                 (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__textio__file_type__col (us_split_fields1 a))) 
                        (to_rep3
                        (rec__textio__file_type__col (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__textio__file_type__line
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__textio__file_type__line
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__textio__file_type__page
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__textio__file_type__page
                                                  (us_split_fields1 b)))))
                        (= (rec__textio__file_type__is_regular_file
                           (us_split_fields1 a)) (rec__textio__file_type__is_regular_file
                                                 (us_split_fields1 b))))
                   true false))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun textio__file_type__descr__first__bit () Int)

(declare-fun textio__file_type__descr__last__bit () Int)

(declare-fun textio__file_type__descr__position () Int)

;; textio__file_type__descr__first__bit_axiom
  (assert (<= 0 textio__file_type__descr__first__bit))

;; textio__file_type__descr__last__bit_axiom
  (assert
  (< textio__file_type__descr__first__bit textio__file_type__descr__last__bit))

;; textio__file_type__descr__position_axiom
  (assert (<= 0 textio__file_type__descr__position))

(declare-fun textio__file_type__before_lm__first__bit () Int)

(declare-fun textio__file_type__before_lm__last__bit () Int)

(declare-fun textio__file_type__before_lm__position () Int)

;; textio__file_type__before_lm__first__bit_axiom
  (assert (<= 0 textio__file_type__before_lm__first__bit))

;; textio__file_type__before_lm__last__bit_axiom
  (assert
  (< textio__file_type__before_lm__first__bit textio__file_type__before_lm__last__bit))

;; textio__file_type__before_lm__position_axiom
  (assert (<= 0 textio__file_type__before_lm__position))

(declare-fun textio__file_type__before_lm_pm__first__bit () Int)

(declare-fun textio__file_type__before_lm_pm__last__bit () Int)

(declare-fun textio__file_type__before_lm_pm__position () Int)

;; textio__file_type__before_lm_pm__first__bit_axiom
  (assert (<= 0 textio__file_type__before_lm_pm__first__bit))

;; textio__file_type__before_lm_pm__last__bit_axiom
  (assert
  (< textio__file_type__before_lm_pm__first__bit textio__file_type__before_lm_pm__last__bit))

;; textio__file_type__before_lm_pm__position_axiom
  (assert (<= 0 textio__file_type__before_lm_pm__position))

(declare-fun textio__file_type__col__first__bit () Int)

(declare-fun textio__file_type__col__last__bit () Int)

(declare-fun textio__file_type__col__position () Int)

;; textio__file_type__col__first__bit_axiom
  (assert (<= 0 textio__file_type__col__first__bit))

;; textio__file_type__col__last__bit_axiom
  (assert
  (< textio__file_type__col__first__bit textio__file_type__col__last__bit))

;; textio__file_type__col__position_axiom
  (assert (<= 0 textio__file_type__col__position))

(declare-fun textio__file_type__line__first__bit () Int)

(declare-fun textio__file_type__line__last__bit () Int)

(declare-fun textio__file_type__line__position () Int)

;; textio__file_type__line__first__bit_axiom
  (assert (<= 0 textio__file_type__line__first__bit))

;; textio__file_type__line__last__bit_axiom
  (assert
  (< textio__file_type__line__first__bit textio__file_type__line__last__bit))

;; textio__file_type__line__position_axiom
  (assert (<= 0 textio__file_type__line__position))

(declare-fun textio__file_type__page__first__bit () Int)

(declare-fun textio__file_type__page__last__bit () Int)

(declare-fun textio__file_type__page__position () Int)

;; textio__file_type__page__first__bit_axiom
  (assert (<= 0 textio__file_type__page__first__bit))

;; textio__file_type__page__last__bit_axiom
  (assert
  (< textio__file_type__page__first__bit textio__file_type__page__last__bit))

;; textio__file_type__page__position_axiom
  (assert (<= 0 textio__file_type__page__position))

(declare-fun textio__file_type__is_regular_file__first__bit () Int)

(declare-fun textio__file_type__is_regular_file__last__bit () Int)

(declare-fun textio__file_type__is_regular_file__position () Int)

;; textio__file_type__is_regular_file__first__bit_axiom
  (assert (<= 0 textio__file_type__is_regular_file__first__bit))

;; textio__file_type__is_regular_file__last__bit_axiom
  (assert
  (< textio__file_type__is_regular_file__first__bit textio__file_type__is_regular_file__last__bit))

;; textio__file_type__is_regular_file__position_axiom
  (assert (<= 0 textio__file_type__is_regular_file__position))

(declare-fun dummy8 () us_rep)

(declare-datatypes ()
((file_type__ref (mk_file_type__ref (file_type__content us_rep)))))
(define-fun file_type__ref___projection ((a file_type__ref)) us_rep (file_type__content
                                                                    a))

(declare-fun end_of_file (us_rep Int (Array Int character)) Bool)

(declare-fun end_of_file__function_guard (Bool us_rep Int
  (Array Int character)) Bool)

(declare-fun fpeek (us_rep Int (Array Int character)) Int)

(declare-fun fpeek__function_guard (Int us_rep Int
  (Array Int character)) Bool)

;; end_of_file__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((helpers__cur_position Int))
  (forall ((helpers__the_file (Array Int character)))
  (! (=> (dynamic_invariant1 helpers__cur_position true true true)
     (let ((result (end_of_file file helpers__cur_position helpers__the_file)))
     (and (fpeek__function_guard
     (fpeek file helpers__cur_position helpers__the_file) file
     helpers__cur_position helpers__the_file)
     (=> (end_of_file__function_guard result file helpers__cur_position
     helpers__the_file)
     (= (= result true)
     (= (fpeek file helpers__cur_position helpers__the_file) eof)))))) :pattern (
  (end_of_file file helpers__cur_position helpers__the_file)) )))))

(declare-fun item__first () integer)

(declare-fun item__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun current_file (us_split_fields) us_rep)

(declare-fun current_file__function_guard (us_rep us_split_fields) Bool)

;; current_file__post_axiom
  (assert true)

;; current_file__def_axiom
  (assert
  (forall ((textio__current_in__fields us_split_fields))
  (! (=> (current_file__function_guard
     (current_file textio__current_in__fields) textio__current_in__fields)
     (= (current_file textio__current_in__fields) (mk___rep
                                                  textio__current_in__fields))) :pattern (
  (current_file textio__current_in__fields)) )))

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_454 Int)
  (temp___is_init_451 Bool) (temp___skip_constant_452 Bool)
  (temp___do_toplevel_453 Bool)) Bool (=>
                                      (or (= temp___is_init_451 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_454)))

(declare-fun fpeek1 (Int Int (Array Int character)) Int)

(declare-fun fpeek__function_guard1 (Int Int Int (Array Int character)) Bool)

;; fpeek__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((helpers__cur_position Int))
  (forall ((helpers__the_file (Array Int character)))
  (! (=> (dynamic_invariant1 helpers__cur_position true true true)
     (let ((result (fpeek file helpers__cur_position helpers__the_file)))
     (=> (fpeek__function_guard result file helpers__cur_position
     helpers__the_file) (dynamic_invariant3 result true false true)))) :pattern (
  (fpeek file helpers__cur_position helpers__the_file)) )))))

;; fpeek__def_axiom
  (assert
  (forall ((file us_rep))
  (forall ((helpers__cur_position Int))
  (forall ((helpers__the_file (Array Int character)))
  (! (=>
     (and (dynamic_invariant1 helpers__cur_position true true true)
     (fpeek__function_guard
     (fpeek file helpers__cur_position helpers__the_file) file
     helpers__cur_position helpers__the_file))
     (and (fpeek__function_guard1
     (fpeek1
     (to_rep2 (rec__textio__file_type__descr (us_split_fields1 file)))
     helpers__cur_position helpers__the_file)
     (to_rep2 (rec__textio__file_type__descr (us_split_fields1 file)))
     helpers__cur_position helpers__the_file)
     (= (fpeek file helpers__cur_position helpers__the_file) (fpeek1
                                                             (to_rep2
                                                             (rec__textio__file_type__descr
                                                             (us_split_fields1
                                                             file)))
                                                             helpers__cur_position
                                                             helpers__the_file)))) :pattern (
  (fpeek file helpers__cur_position helpers__the_file)) )))))

;; eof_ch__def_axiom
  (assert (= eof_ch (mod2 eof 256)))

(define-fun dynamic_invariant7 ((temp___expr_388 Int)
  (temp___is_init_385 Bool) (temp___skip_constant_386 Bool)
  (temp___do_toplevel_387 Bool)) Bool (=>
                                      (or (= temp___is_init_385 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range6 temp___expr_388)))

;; fpeek__post_axiom
  (assert
  (forall ((stream Int) (helpers__cur_position Int))
  (forall ((helpers__the_file (Array Int character)))
  (! (=>
     (and (dynamic_invariant7 stream true true true) (dynamic_invariant1
     helpers__cur_position true true true))
     (let ((result (fpeek1 stream helpers__cur_position helpers__the_file)))
     (=> (fpeek__function_guard1 result stream helpers__cur_position
     helpers__the_file) (dynamic_invariant3 result true false true)))) :pattern (
  (fpeek1 stream helpers__cur_position helpers__the_file)) ))))

;; fpeek__def_axiom
  (assert
  (forall ((stream Int) (helpers__cur_position Int))
  (forall ((helpers__the_file (Array Int character)))
  (! (=>
     (and
     (and (dynamic_invariant7 stream true true true) (dynamic_invariant1
     helpers__cur_position true true true)) (fpeek__function_guard1
     (fpeek1 stream helpers__cur_position helpers__the_file) stream
     helpers__cur_position helpers__the_file))
     (= (fpeek1 stream helpers__cur_position helpers__the_file) (ite (= 
                                                                (to_rep
                                                                (select helpers__the_file helpers__cur_position)) 
                                                                eof_ch) 
                                                                eof
                                                                (to_rep
                                                                (select helpers__the_file helpers__cur_position))))) :pattern (
  (fpeek1 stream helpers__cur_position helpers__the_file)) ))))

(declare-fun the_file () (Array Int character))

(declare-fun cur_position () Int)

(declare-fun last2 () Int)

(declare-fun current_in__split_fields () file_descr)

(declare-fun current_in__split_fields1 () Bool)

(declare-fun current_in__split_fields2 () Bool)

(declare-fun current_in__split_fields3 () count)

(declare-fun current_in__split_fields4 () count)

(declare-fun current_in__split_fields5 () count)

(declare-fun current_in__split_fields6 () Bool)

(declare-fun idx () Int)

(declare-fun cur_position1 () Int)

(declare-fun item () (Array Int character))

(declare-fun last3 () Int)

(declare-fun current_in__split_fields7 () file_descr)

(declare-fun current_in__split_fields8 () Bool)

(declare-fun current_in__split_fields9 () Bool)

(declare-fun current_in__split_fields10 () count)

(declare-fun current_in__split_fields11 () count)

(declare-fun current_in__split_fields12 () count)

(declare-fun current_in__split_fields13 () Bool)

(declare-fun cur_position2 () Int)

(declare-fun item1 () (Array Int character))

(declare-fun last4 () Int)

(declare-fun current_in__split_fields14 () file_descr)

(declare-fun current_in__split_fields15 () Bool)

(declare-fun current_in__split_fields16 () Bool)

(declare-fun current_in__split_fields17 () count)

(declare-fun current_in__split_fields18 () count)

(declare-fun current_in__split_fields19 () count)

(declare-fun current_in__split_fields20 () Bool)

(declare-fun cur_position3 () Int)

(declare-fun item2 () (Array Int character))

(declare-fun last5 () Int)

(declare-fun current_in__split_fields21 () file_descr)

(declare-fun current_in__split_fields22 () Bool)

(declare-fun current_in__split_fields23 () Bool)

(declare-fun current_in__split_fields24 () count)

(declare-fun current_in__split_fields25 () count)

(declare-fun current_in__split_fields26 () count)

(declare-fun current_in__split_fields27 () Bool)

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 item__first)
  (to_rep1 item__last)))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 last2)))

;; H
  (assert (in_range2 cur_position))

;; H
  (assert (in_range3 eof_ch))

;; H
  (assert (= (mod2 eof 256) eof_ch))

;; H
  (assert (in_range5 eof))

;; H
  (assert (current_file__function_guard
  (current_file
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6))
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6)))

;; H
  (assert (current_file__function_guard
  (current_file
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6))
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6)))

;; H
  (assert (end_of_file__function_guard
  (end_of_file
  (current_file
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6)) cur_position the_file)
  (current_file
  (mk___split_fields current_in__split_fields current_in__split_fields1
  current_in__split_fields2 current_in__split_fields3
  current_in__split_fields4 current_in__split_fields5
  current_in__split_fields6)) cur_position the_file))

;; H
  (assert
  (not
  (= (end_of_file
     (current_file
     (mk___split_fields current_in__split_fields current_in__split_fields1
     current_in__split_fields2 current_in__split_fields3
     current_in__split_fields4 current_in__split_fields5
     current_in__split_fields6)) cur_position the_file) true)))

;; H
  (assert
  (and
  (ite (< (to_rep1 item__last) (to_rep1 item__first))
  (= last3 (- (to_rep1 item__first) 1))
  (and
  (and
  (and
  (or (= last3 (- (to_rep1 item__first) 1))
  (and (<= (to_rep1 item__first) last3) (<= last3 (to_rep1 item__last))))
  (forall ((idx1 Int))
  (=> (and (<= (to_rep1 item__first) idx1) (<= idx1 last3))
  (= (to_rep (select item idx1)) (to_rep
                                 (select the_file (+ (- idx1 (to_rep1
                                                             item__first)) 
                                 cur_position)))))))
  (= cur_position1 (+ (- (+ cur_position last3) (to_rep1 item__first)) 1)))
  (or
  (or (= last3 (to_rep1 item__last))
  (= (to_rep (select the_file cur_position1)) eof_ch))
  (= (to_rep (select the_file cur_position1)) 10))))
  (and (in_range4 last3) (in_range2 cur_position1))))

;; H
  (assert (= current_in__split_fields14 current_in__split_fields7))

;; H
  (assert (= current_in__split_fields15 current_in__split_fields8))

;; H
  (assert (= current_in__split_fields16 current_in__split_fields9))

;; H
  (assert (= current_in__split_fields17 current_in__split_fields10))

;; H
  (assert (= current_in__split_fields18 current_in__split_fields11))

;; H
  (assert (= current_in__split_fields19 current_in__split_fields12))

;; H
  (assert (= current_in__split_fields20 current_in__split_fields13))

;; H
  (assert (= last3 last4))

;; H
  (assert (= item item1))

;; H
  (assert (= cur_position1 cur_position2))

;; H
  (assert
  (= (mk___split_fields current_in__split_fields21 current_in__split_fields22
     current_in__split_fields23 current_in__split_fields24
     current_in__split_fields25 current_in__split_fields26
     current_in__split_fields27) (mk___split_fields current_in__split_fields7
                                 current_in__split_fields8
                                 current_in__split_fields9
                                 current_in__split_fields10
                                 current_in__split_fields11
                                 current_in__split_fields12
                                 current_in__split_fields13)))

;; H
  (assert (= last5 last3))

;; H
  (assert (= item2 item))

;; H
  (assert (= cur_position3 cur_position1))

;; H
  (assert
  (=> (= (< (to_rep1 item__last) (to_rep1 item__first)) true)
  (= last4 (- (to_rep1 item__first) 1))))

;; H
  (assert (not (= (< (to_rep1 item__last) (to_rep1 item__first)) true)))

;; H
  (assert
  (=> (not (= last4 (- (to_rep1 item__first) 1)))
  (<= (to_rep1 item__first) last4)))

;; H
  (assert
  (=> (not (= last4 (- (to_rep1 item__first) 1)))
  (<= last4 (to_rep1 item__last))))

;; H
  (assert (<= (to_rep1 item__first) idx))

;; H
  (assert (<= idx last4))

(assert
;; WP_parameter_def
 ;; File "textio.ads", line 129, characters 0-0
  (not (<= 1 (+ (- idx (to_rep1 item__first)) cur_position))))
(check-sat)
