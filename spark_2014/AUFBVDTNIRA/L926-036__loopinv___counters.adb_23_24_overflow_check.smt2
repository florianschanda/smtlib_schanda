;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort change_mode 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (change_mode change_mode) Bool)

(declare-fun dummy2 () change_mode)

(declare-datatypes ()
((change_mode__ref (mk_change_mode__ref (change_mode__content change_mode)))))
(define-fun change_mode__ref___projection ((a change_mode__ref)) change_mode 
  (change_mode__content a))

(declare-fun to_rep2 (change_mode) Int)

(declare-fun of_rep2 (Int) change_mode)

;; inversion_axiom
  (assert
  (forall ((x change_mode))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x change_mode)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__counters__counter__mode change_mode)(rec__counters__counter__ticks natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) change_mode 
  (rec__counters__counter__mode a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) natural 
  (rec__counters__counter__ticks a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__counters__counter__c integer)(rec__counters__counter__t natural)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) integer 
  (rec__counters__counter__c a))

(define-fun us_split_fields_T__projection ((a us_split_fields)) natural 
  (rec__counters__counter__t a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep2
                           (rec__counters__counter__mode
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__counters__counter__mode
                                                  (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__counters__counter__ticks
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__counters__counter__ticks
                                                  (us_split_discrs1 b)))))
                        (= (to_rep
                           (rec__counters__counter__c (us_split_fields1 a))) 
                        (to_rep
                        (rec__counters__counter__c (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__counters__counter__t (us_split_fields1 a))) 
                        (to_rep1
                        (rec__counters__counter__t (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun counters__counter__mode__first__bit () Int)

(declare-fun counters__counter__mode__last__bit () Int)

(declare-fun counters__counter__mode__position () Int)

;; counters__counter__mode__first__bit_axiom
  (assert (<= 0 counters__counter__mode__first__bit))

;; counters__counter__mode__last__bit_axiom
  (assert
  (< counters__counter__mode__first__bit counters__counter__mode__last__bit))

;; counters__counter__mode__position_axiom
  (assert (<= 0 counters__counter__mode__position))

(declare-fun counters__counter__ticks__first__bit () Int)

(declare-fun counters__counter__ticks__last__bit () Int)

(declare-fun counters__counter__ticks__position () Int)

;; counters__counter__ticks__first__bit_axiom
  (assert (<= 0 counters__counter__ticks__first__bit))

;; counters__counter__ticks__last__bit_axiom
  (assert
  (< counters__counter__ticks__first__bit counters__counter__ticks__last__bit))

;; counters__counter__ticks__position_axiom
  (assert (<= 0 counters__counter__ticks__position))

(declare-fun counters__counter__c__first__bit () Int)

(declare-fun counters__counter__c__last__bit () Int)

(declare-fun counters__counter__c__position () Int)

;; counters__counter__c__first__bit_axiom
  (assert (<= 0 counters__counter__c__first__bit))

;; counters__counter__c__last__bit_axiom
  (assert
  (< counters__counter__c__first__bit counters__counter__c__last__bit))

;; counters__counter__c__position_axiom
  (assert (<= 0 counters__counter__c__position))

(declare-fun counters__counter__t__first__bit () Int)

(declare-fun counters__counter__t__last__bit () Int)

(declare-fun counters__counter__t__position () Int)

;; counters__counter__t__first__bit_axiom
  (assert (<= 0 counters__counter__t__first__bit))

;; counters__counter__t__last__bit_axiom
  (assert
  (< counters__counter__t__first__bit counters__counter__t__last__bit))

;; counters__counter__t__position_axiom
  (assert (<= 0 counters__counter__t__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((counter__ref (mk_counter__ref (counter__content us_rep)))))
(define-fun counter__ref___projection ((a counter__ref)) us_rep (counter__content
                                                                a))

(declare-fun c__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 4)) (in_range2 temp___expr_135)))

(declare-fun c__split_fields () integer)

(declare-fun c__split_fields1 () natural)

(declare-fun o () Int)

(declare-fun o1 () natural)

(declare-fun o2 () integer)

(declare-fun o3 () natural)

(declare-fun temp___168 () change_mode)

(declare-fun temp___1681 () natural)

(declare-fun temp___1682 () integer)

(declare-fun temp___1683 () natural)

(declare-fun result () integer)

(declare-fun result1 () natural)

(declare-fun c__split_fields2 () integer)

(declare-fun c__split_fields3 () natural)

;; H
  (assert
  (and (= o (+ (to_rep1 c__split_fields1) 1)) (in_range
  (+ (to_rep1 c__split_fields1) 1))))

;; H
  (assert (= (to_rep1 o1) o))

;; H
  (assert (= c__split_fields o2))

;; H
  (assert (= o1 o3))

;; H
  (assert (= c__split_discrs (mk___split_discrs temp___168 temp___1681)))

;; H
  (assert (= temp___1682 o2))

;; H
  (assert (= temp___1683 o3))

;; H
  (assert (= result c__split_fields))

;; H
  (assert (= result1 c__split_fields1))

;; H
  (assert (= temp___1682 c__split_fields2))

;; H
  (assert (= temp___1683 c__split_fields3))

;; H
  (assert (= c__split_discrs (mk___split_discrs temp___168 temp___1681)))

;; H
  (assert
  (not (= (to_rep2 (rec__counters__counter__mode c__split_discrs)) 0)))

;; H
  (assert (= (to_rep2 (rec__counters__counter__mode c__split_discrs)) 1))

;; H
  (assert
  (not
  (<= (to_rep1 (rec__counters__counter__ticks c__split_discrs)) (to_rep1
                                                                c__split_fields3))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range (+ (to_rep c__split_fields2) 1))))
(check-sat)
