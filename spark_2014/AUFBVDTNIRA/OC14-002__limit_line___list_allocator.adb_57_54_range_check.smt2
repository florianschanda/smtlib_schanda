;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort resource 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (resource resource) Bool)

(declare-fun dummy2 () resource)

(declare-datatypes ()
((resource__ref (mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_284 Int)
  (temp___is_init_281 Bool) (temp___skip_constant_282 Bool)
  (temp___do_toplevel_283 Bool)) Bool (=>
                                      (or (= temp___is_init_281 true)
                                      (<= 0 3)) (in_range3 temp___expr_284)))

(declare-fun to_rep (resource) Int)

(declare-fun of_rep (Int) resource)

;; inversion_axiom
  (assert
  (forall ((x resource))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x resource)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort valid_resource 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (valid_resource valid_resource) Bool)

(declare-fun dummy3 () valid_resource)

(declare-datatypes ()
((valid_resource__ref
 (mk_valid_resource__ref (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref___projection ((a valid_resource__ref)) valid_resource 
  (valid_resource__content a))

(declare-sort status 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (status status) Bool)

(declare-fun dummy4 () status)

(declare-datatypes ()
((status__ref (mk_status__ref (status__content status)))))
(define-fun status__ref___projection ((a status__ref)) status (status__content
                                                              a))

(declare-fun to_rep1 (status) Int)

(declare-fun of_rep1 (Int) status)

;; inversion_axiom
  (assert
  (forall ((x status))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x status)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__list_allocator__cell__stat status)(rec__list_allocator__cell__prev resource)(rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_Stat__projection ((a us_split_fields)) status 
  (rec__list_allocator__cell__stat a))

(define-fun us_split_fields_Prev__projection ((a us_split_fields)) resource 
  (rec__list_allocator__cell__prev a))

(define-fun us_split_fields_Next__projection ((a us_split_fields)) resource 
  (rec__list_allocator__cell__next a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__list_allocator__cell__stat
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__list_allocator__cell__stat
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__list_allocator__cell__prev
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__prev
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__list_allocator__cell__next
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__next
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun list_allocator__cell__stat__first__bit () Int)

(declare-fun list_allocator__cell__stat__last__bit () Int)

(declare-fun list_allocator__cell__stat__position () Int)

;; list_allocator__cell__stat__first__bit_axiom
  (assert (<= 0 list_allocator__cell__stat__first__bit))

;; list_allocator__cell__stat__last__bit_axiom
  (assert
  (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))

;; list_allocator__cell__stat__position_axiom
  (assert (<= 0 list_allocator__cell__stat__position))

(declare-fun list_allocator__cell__prev__first__bit () Int)

(declare-fun list_allocator__cell__prev__last__bit () Int)

(declare-fun list_allocator__cell__prev__position () Int)

;; list_allocator__cell__prev__first__bit_axiom
  (assert (<= 0 list_allocator__cell__prev__first__bit))

;; list_allocator__cell__prev__last__bit_axiom
  (assert
  (< list_allocator__cell__prev__first__bit list_allocator__cell__prev__last__bit))

;; list_allocator__cell__prev__position_axiom
  (assert (<= 0 list_allocator__cell__prev__position))

(declare-fun list_allocator__cell__next__first__bit () Int)

(declare-fun list_allocator__cell__next__last__bit () Int)

(declare-fun list_allocator__cell__next__position () Int)

;; list_allocator__cell__next__first__bit_axiom
  (assert (<= 0 list_allocator__cell__next__first__bit))

;; list_allocator__cell__next__last__bit_axiom
  (assert
  (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))

;; list_allocator__cell__next__position_axiom
  (assert (<= 0 list_allocator__cell__next__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq5 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq5 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq7 (us_rep1 us_rep1) Bool)

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dummy6 () us_rep1)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun length1 (Int us_rep1) Int)

(declare-fun length__function_guard1 (Int Int us_rep1) Bool)

(declare-sort natural 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (natural natural) Bool)

(declare-fun dummy7 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_33)))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun oeq1 (Int us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (and (oeq__function_guard (oeq a b) a b) (= (user_eq6 a b) (oeq a b))) :pattern (
  (user_eq6 a b)) )))

;; temp___result_313_def
  (assert
  (forall ((temp___312 us_rep1)) (length__function_guard (length temp___312)
  temp___312)))

(define-fun default_initial_assumption ((temp___expr_310 us_rep1)
  (temp___skip_top_level_311 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_311 true))
                                         (= (length temp___expr_310) 0)))

;; length__post_axiom
  (assert
  (forall ((s us_rep1))
  (! (let ((result (length s)))
     (=> (length__function_guard result s) (dynamic_invariant1 result true
     false true))) :pattern ((length s)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((s us_rep1))
  (! (let ((result (length1 attr__tag s)))
     (=> (length__function_guard1 result attr__tag s) (dynamic_invariant1
     result true false true))) :pattern ((length1 attr__tag s)) ))))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun get1 (Int us_rep1 Int) Int)

(declare-fun get__function_guard1 (Int Int us_rep1 Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort element_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (element_type element_type) Bool)

(declare-fun dummy8 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_302 Int)
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool (=>
                                      (or (= temp___is_init_299 true)
                                      (<= 0 3)) (in_range7 temp___expr_302)))

;; get__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((n Int))
  (! (and (length__function_guard (length s) s)
     (=>
     (and (dynamic_invariant2 n true true true)
     (and (<= 1 n) (<= n (length s))))
     (let ((result (get s n)))
     (=> (get__function_guard result s n) (dynamic_invariant3 result true
     false true))))) :pattern ((get s n)) ))))

;; get__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (n Int))
  (forall ((s us_rep1))
  (! (=> (dynamic_invariant2 n true true true)
     (let ((result (get1 attr__tag s n)))
     (=> (get__function_guard1 result attr__tag s n) (dynamic_invariant3
     result true false true)))) :pattern ((get1 attr__tag s n)) ))))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__list_allocator__m__t__available us_rep1)(rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_Available__projection ((a us_split_fields2)) us_rep1 
  (rec__list_allocator__m__t__available a))

(define-fun us_split_fields_Allocated__projection ((a us_split_fields2)) us_rep1 
  (rec__list_allocator__m__t__allocated a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_7__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq10 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (user_eq6
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 b))) true)
                         (= (user_eq6
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 b))) true))
                    true false))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun list_allocator__m__t__available__first__bit () Int)

(declare-fun list_allocator__m__t__available__last__bit () Int)

(declare-fun list_allocator__m__t__available__position () Int)

;; list_allocator__m__t__available__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__available__first__bit))

;; list_allocator__m__t__available__last__bit_axiom
  (assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; list_allocator__m__t__available__position_axiom
  (assert (<= 0 list_allocator__m__t__available__position))

(declare-fun list_allocator__m__t__allocated__first__bit () Int)

(declare-fun list_allocator__m__t__allocated__last__bit () Int)

(declare-fun list_allocator__m__t__allocated__position () Int)

;; list_allocator__m__t__allocated__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; list_allocator__m__t__allocated__last__bit_axiom
  (assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; list_allocator__m__t__allocated__position_axiom
  (assert (<= 0 list_allocator__m__t__allocated__position))

(declare-fun dummy9 () us_rep2)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep2)))))
(define-fun t__ref___projection ((a t__ref)) us_rep2 (t__content a))

(declare-fun oeq2 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (and (oeq__function_guard2 (oeq2 a b) a b)
     (= (user_eq9 a b) (oeq2 a b))) :pattern ((user_eq9 a b)) )))

;; temp___result_403_def
  (assert
  (forall ((temp___402 us_rep1)) (length__function_guard (length temp___402)
  temp___402)))

;; temp___result_406_def
  (assert
  (forall ((temp___405 us_rep1)) (length__function_guard (length temp___405)
  temp___405)))

(define-fun default_initial_assumption1 ((temp___expr_399 us_rep2)
  (temp___skip_top_level_400 Bool)) Bool (and
                                         (= (length
                                            (rec__list_allocator__m__t__available
                                            (us_split_fields3
                                            temp___expr_399))) 0)
                                         (= (length
                                            (rec__list_allocator__m__t__allocated
                                            (us_split_fields3
                                            temp___expr_399))) 0)))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun mem (us_rep1 Int) Bool)

(declare-fun mem__function_guard (Bool us_rep1 Int) Bool)

;; mem__post_axiom
  (assert true)

;; mem__def_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((r Int))
  (! (=> (mem__function_guard (mem s r) s r)
     (and (length__function_guard (length s) s)
     (and (forall ((j Int)) (get__function_guard (get s j) s j))
     (= (= (mem s r) true)
     (exists ((j Int))
     (and (and (<= 1 j) (<= j (length s))) (= (get s j) r))))))) :pattern (
  (mem s r)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_507 Int)
  (temp___is_init_504 Bool) (temp___skip_constant_505 Bool)
  (temp___do_toplevel_506 Bool)) Bool (=>
                                      (or (= temp___is_init_504 true)
                                      (<= 0 1)) (in_range5 temp___expr_507)))

(define-fun dynamic_invariant6 ((temp___expr_290 Int)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)) Bool (=>
                                      (or (= temp___is_init_287 true)
                                      (<= 1 3)) (in_range4 temp___expr_290)))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep2) (y us_rep2))
  (! (=> (oeq__function_guard2 (oeq2 x y) x y)
     (and (oeq__function_guard
     (oeq (rec__list_allocator__m__t__available (us_split_fields3 x))
     (rec__list_allocator__m__t__available (us_split_fields3 y)))
     (rec__list_allocator__m__t__available (us_split_fields3 x))
     (rec__list_allocator__m__t__available (us_split_fields3 y)))
     (and (oeq__function_guard
     (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x))
     (rec__list_allocator__m__t__allocated (us_split_fields3 y)))
     (rec__list_allocator__m__t__allocated (us_split_fields3 x))
     (rec__list_allocator__m__t__allocated (us_split_fields3 y)))
     (= (= (oeq2 x y) true)
     (and
     (= (oeq (rec__list_allocator__m__t__available (us_split_fields3 x))
        (rec__list_allocator__m__t__available (us_split_fields3 y))) true)
     (= (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x))
        (rec__list_allocator__m__t__allocated (us_split_fields3 y))) true)))))) :pattern (
  (oeq2 x y)) )))

;; oeq__post_axiom
  (assert
  (forall ((s1 us_rep1) (s2 us_rep1))
  (! (let ((result (oeq s1 s2)))
     (and (length__function_guard (length s1) s1)
     (and (length__function_guard (length s2) s2)
     (and (length__function_guard (length s1) s1)
     (and (forall ((n Int)) (get__function_guard (get s1 n) s1 n))
     (and (forall ((n Int)) (get__function_guard (get s2 n) s2 n))
     (=> (oeq__function_guard result s1 s2)
     (= (= result true)
     (and (= (length s1) (length s2))
     (forall ((n Int))
     (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n))))))))))))) :pattern (
  (oeq s1 s2)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(declare-fun model____split_fields () us_rep1)

(declare-fun model____split_fields1 () us_rep1)

(declare-fun data () (Array Int us_rep))

(declare-fun first_available () Int)

(declare-fun first_allocated () Int)

(declare-fun j () Int)

(declare-fun o () Int)

(declare-fun o1 () Bool)

(declare-fun temp___591 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () status)

(declare-fun o4 () resource)

(declare-fun o5 () resource)

(declare-fun o6 () status)

(declare-fun o7 () resource)

(declare-fun o8 () resource)

(declare-fun o9 () resource)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun j1 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Bool)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(declare-fun result9 () Bool)

;; H
  (assert (in_range3 first_available))

;; H
  (assert (in_range3 first_allocated))

;; H
  (assert (length__function_guard (length model____split_fields)
  model____split_fields))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard (get model____split_fields j2)
  model____split_fields j2)))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard (get model____split_fields j2)
  model____split_fields j2)))

;; H
  (assert (length__function_guard (length model____split_fields)
  model____split_fields))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard
  (get model____split_fields (+ j2 1)) model____split_fields (+ j2 1))))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard (get model____split_fields j2)
  model____split_fields j2)))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard
  (get model____split_fields (- j2 1)) model____split_fields (- j2 1))))

;; H
  (assert (length__function_guard (length model____split_fields)
  model____split_fields))

;; H
  (assert
  (forall ((j2 Int)) (get__function_guard (get model____split_fields j2)
  model____split_fields j2)))

;; H
  (assert
  (forall ((k Int)) (get__function_guard (get model____split_fields k)
  model____split_fields k)))

;; H
  (assert
  (=> (not (= first_available 0))
  (and
  (and (= o21 (length model____split_fields)) (length__function_guard 
  o21 model____split_fields)) (in_range6 o21))))

;; H
  (assert
  (=> (not (= first_available 0)) (= result3 (ite (< 0 o21) true false))))

;; H
  (assert
  (=> (not (= first_available 0))
  (=> (= result3 true)
  (and
  (and (= o20 (get model____split_fields 1)) (get__function_guard o20
  model____split_fields 1)) (in_range7 o20)))))

;; H
  (assert
  (=> (not (= first_available 0))
  (=> (= result3 true) (= result2 (ite (= o20 first_available) true false)))))

;; H
  (assert
  (=> (not (= first_available 0))
  (=> (not (= result3 true)) (= result2 false))))

;; H
  (assert
  (=> (not (not (= first_available 0)))
  (and
  (and (= o22 (length model____split_fields)) (length__function_guard 
  o22 model____split_fields)) (in_range6 o22))))

;; H
  (assert
  (=> (not (not (= first_available 0)))
  (= result2 (ite (= o22 0) true false))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (= first_allocated 0))
  (and
  (and (= o18 (length model____split_fields1)) (length__function_guard 
  o18 model____split_fields1)) (in_range6 o18)))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (= first_allocated 0)) (= result4 (ite (< 0 o18) true false)))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (= first_allocated 0))
  (=> (= result4 true)
  (and
  (and (= o17 (get model____split_fields1 1)) (get__function_guard o17
  model____split_fields1 1)) (in_range7 o17))))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (= first_allocated 0))
  (=> (= result4 true) (= result1 (ite (= o17 first_allocated) true false))))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (= first_allocated 0))
  (=> (not (= result4 true)) (= result1 false)))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (not (= first_allocated 0)))
  (and
  (and (= o19 (length model____split_fields1)) (length__function_guard 
  o19 model____split_fields1)) (in_range6 o19)))))

;; H
  (assert
  (=> (= result2 true)
  (=> (not (not (= first_allocated 0)))
  (= result1 (ite (= o19 0) true false)))))

;; H
  (assert (=> (not (= result2 true)) (= result1 false)))

;; H
  (assert
  (=> (= result1 true)
  (and
  (and (= o15 (length model____split_fields)) (length__function_guard 
  o15 model____split_fields)) (in_range6 o15))))

;; H
  (assert (=> (= result1 true) (= o16 (ite (<= j1 o15) true false))))

;; H
  (assert (=> (= result1 true) (= result5 (ite (<= 1 j1) o16 false))))

;; H
  (assert
  (=> (= result1 true)
  (= (= result true)
  (forall ((j2 Int))
  (=> (and (<= 1 j2) (<= j2 (length model____split_fields)))
  (and
  (and
  (and (in_range4 (get model____split_fields j2))
  (= (to_rep
     (rec__list_allocator__cell__next
     (us_split_fields1 (select data (get model____split_fields j2))))) 
  (ite (< j2 (length model____split_fields))
  (get model____split_fields (+ j2 1)) 0)))
  (= (to_rep
     (rec__list_allocator__cell__prev
     (us_split_fields1 (select data (get model____split_fields j2))))) 
  (ite (< 1 j2) (get model____split_fields (- j2 1)) 0)))
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k (length model____split_fields)))
  (=> (not (= j2 k))
  (not (= (get model____split_fields j2) (get model____split_fields k))))))))))))

;; H
  (assert (=> (not (= result1 true)) (= result false)))

;; H
  (assert (= result true))

;; H
  (assert
  (and
  (and (= o (length model____split_fields1)) (length__function_guard 
  o model____split_fields1)) (in_range6 o)))

;; H
  (assert (= o1 (ite (<= j o) true false)))

;; H
  (assert (= result6 (ite (<= 1 j) o1 false)))

;; H
  (assert (= result6 true))

;; H
  (assert
  (and
  (and (= o14 (get model____split_fields1 j)) (get__function_guard o14
  model____split_fields1 j)) (in_range7 o14)))

;; H
  (assert (= result8 (ite (in_range4 o14) true false)))

;; H
  (assert
  (=> (= result8 true)
  (and
  (and (= o10 (length model____split_fields1)) (length__function_guard 
  o10 model____split_fields1)) (in_range6 o10))))

;; H
  (assert (=> (= result8 true) (= result9 (ite (< j o10) true false))))

;; H
  (assert
  (=> (= result8 true)
  (=> (= result9 true) (and (= o11 (+ j 1)) (in_range1 (+ j 1))))))

;; H
  (assert
  (=> (= result8 true)
  (=> (= result9 true)
  (and
  (and (= o12 (get model____split_fields1 o11)) (get__function_guard 
  o12 model____split_fields1 o11)) (in_range7 o12)))))

;; H
  (assert (=> (= result8 true) (=> (not (= result9 true)) (= o12 0))))

;; H
  (assert
  (=> (= result8 true)
  (and
  (and (= temp___591 (get model____split_fields1 j)) (get__function_guard
  temp___591 model____split_fields1 j)) (in_range7 temp___591))))

;; H
  (assert (=> (= result8 true) (and (<= 1 temp___591) (<= temp___591 3))))

;; H
  (assert (=> (= result8 true) (= o2 temp___591)))

;; H
  (assert
  (=> (= result8 true)
  (= (mk___rep (mk___split_fields o3 o4 o5)) (select data o2))))

;; H
  (assert (=> (= result8 true) (= o3 o6)))

;; H
  (assert (=> (= result8 true) (= o4 o7)))

;; H
  (assert (=> (= result8 true) (= o5 o8)))

;; H
  (assert (=> (= result8 true) (= o9 o8)))

;; H
  (assert (=> (= result8 true) (= o13 (to_rep o9))))

;; H
  (assert (=> (= result8 true) (= result7 (ite (= o13 o12) true false))))

;; H
  (assert (=> (not (= result8 true)) (= result7 false)))

;; H
  (assert (= result7 true))

;; H
  (assert (< 1 j))

(assert
;; WP_parameter_def
 ;; File "list_allocator.ads", line 50, characters 0-0
  (not (in_range2 (- j 1))))
(check-sat)
