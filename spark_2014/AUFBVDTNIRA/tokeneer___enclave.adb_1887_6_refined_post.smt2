;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort privileget 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (privileget privileget) Bool)

(declare-fun dummy () privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget 
  (privileget__content a))

(declare-fun to_rep (privileget) Int)

(declare-fun of_rep (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort opandnullt 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (opandnullt opandnullt) Bool)

(declare-fun dummy1 () opandnullt)

(declare-datatypes ()
((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt 
  (opandnullt__content a))

(declare-fun to_rep1 (opandnullt) Int)

(declare-fun of_rep1 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields)) privileget 
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields)) opandnullt 
  (rec__admin__t__currentop a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__admin__t__rolepresent (us_split_fields1 a))) 
                        (to_rep
                        (rec__admin__t__rolepresent (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__admin__t__currentop (us_split_fields1 a))) 
                        (to_rep1
                        (rec__admin__t__currentop (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun admin__t__rolepresent__first__bit () Int)

(declare-fun admin__t__rolepresent__last__bit () Int)

(declare-fun admin__t__rolepresent__position () Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-fun admin__t__currentop__first__bit () Int)

(declare-fun admin__t__currentop__last__bit () Int)

(declare-fun admin__t__currentop__position () Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun rolepresent (us_rep) Int)

(declare-fun rolepresent__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 3)) (in_range1 temp___expr_179)))

;; rolepresent__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (let ((result (rolepresent theadmin)))
     (=> (rolepresent__function_guard result theadmin) (dynamic_invariant
     result true false true))) :pattern ((rolepresent theadmin)) )))

(declare-fun isdoingop (us_rep) Bool)

(declare-fun isdoingop__function_guard (Bool us_rep) Bool)

;; isdoingop__post_axiom
  (assert true)

(declare-fun thecurrentop (us_rep) Int)

(declare-fun thecurrentop__function_guard (Int us_rep) Bool)

(declare-sort opt 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (opt opt) Bool)

(declare-fun dummy3 () opt)

(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(define-fun dynamic_invariant1 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 4)) (in_range3 temp___expr_267)))

;; thecurrentop__post_axiom
  (assert
  (forall ((theadmin us_rep))
  (! (and (isdoingop__function_guard (isdoingop theadmin) theadmin)
     (=> (= (isdoingop theadmin) true)
     (let ((result (thecurrentop theadmin)))
     (=> (thecurrentop__function_guard result theadmin) (dynamic_invariant1
     result true false true))))) :pattern ((thecurrentop theadmin)) )))

(declare-fun ispresent (us_rep) Bool)

(declare-fun ispresent__function_guard (Bool us_rep) Bool)

;; ispresent__post_axiom
  (assert true)

(declare-sort yearst 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (yearst yearst) Bool)

(declare-fun dummy4 () yearst)

(declare-datatypes ()
((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep2 (yearst) Int)

(declare-fun of_rep2 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort monthst 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (monthst monthst) Bool)

(declare-fun dummy5 () monthst)

(declare-datatypes ()
((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep3 (monthst) Int)

(declare-fun of_rep3 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort dayst 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (dayst dayst) Bool)

(declare-fun dummy6 () dayst)

(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep4 (dayst) Int)

(declare-fun of_rep4 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort millisecst 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (millisecst millisecst) Bool)

(declare-fun dummy7 () millisecst)

(declare-datatypes ()
((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst 
  (millisecst__content a))

(declare-fun to_rep5 (millisecst) Int)

(declare-fun of_rep5 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields2)) yearst 
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields2)) monthst 
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields2)) dayst 
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields2)) millisecst 
  (rec__clock__timet__millisec a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq8 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__clock__timet__year (us_split_fields3 a))) 
                         (to_rep2
                         (rec__clock__timet__year (us_split_fields3 b))))
                         (= (to_rep3
                            (rec__clock__timet__month (us_split_fields3 a))) 
                         (to_rep3
                         (rec__clock__timet__month (us_split_fields3 b)))))
                         (= (to_rep4
                            (rec__clock__timet__day (us_split_fields3 a))) 
                         (to_rep4
                         (rec__clock__timet__day (us_split_fields3 b)))))
                         (= (to_rep5
                            (rec__clock__timet__millisec
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun clock__timet__year__first__bit () Int)

(declare-fun clock__timet__year__last__bit () Int)

(declare-fun clock__timet__year__position () Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-fun clock__timet__month__first__bit () Int)

(declare-fun clock__timet__month__last__bit () Int)

(declare-fun clock__timet__month__position () Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-fun clock__timet__day__first__bit () Int)

(declare-fun clock__timet__day__last__bit () Int)

(declare-fun clock__timet__day__position () Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-fun clock__timet__millisec__first__bit () Int)

(declare-fun clock__timet__millisec__last__bit () Int)

(declare-fun clock__timet__millisec__position () Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun dummy8 () us_rep1)

(declare-datatypes ()
((timet__ref (mk_timet__ref (timet__content us_rep1)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep1 (timet__content
                                                             a))

(declare-fun thecurrenttime (us_private) us_rep1)

(declare-fun thecurrenttime__function_guard (us_rep1 us_private) Bool)

;; thecurrenttime__post_axiom
  (assert true)

(declare-fun greaterthanorequal (us_rep1 us_rep1) Bool)

(declare-fun greaterthanorequal__function_guard (Bool us_rep1 us_rep1) Bool)

;; greaterthanorequal__post_axiom
  (assert true)

(declare-fun theauthcertrole (us_private) Int)

(declare-fun theauthcertrole__function_guard (Int us_private) Bool)

;; theauthcertrole__post_axiom
  (assert
  (forall ((admintoken__state us_private))
  (! (let ((result (theauthcertrole admintoken__state)))
     (=> (theauthcertrole__function_guard result admintoken__state)
     (dynamic_invariant result true false true))) :pattern ((theauthcertrole
                                                            admintoken__state)) )))

(declare-fun isgood (us_private) Bool)

(declare-fun isgood__function_guard (Bool us_private) Bool)

;; isgood__post_axiom
  (assert true)

(declare-fun authcertvalid (us_private) Bool)

(declare-fun authcertvalid__function_guard (Bool us_private) Bool)

;; authcertvalid__post_axiom
  (assert true)

(declare-fun islocked (us_private) Bool)

(declare-fun islocked__function_guard (Bool us_private) Bool)

;; islocked__post_axiom
  (assert true)

(declare-fun alarm_timeout (us_private) us_rep1)

(declare-fun alarm_timeout__function_guard (us_rep1 us_private) Bool)

;; alarm_timeout__post_axiom
  (assert true)

(declare-fun thecurrentdoor (us_private) Int)

(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)

(declare-sort t 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (t t) Bool)

(declare-fun dummy9 () t)

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t)))))
(define-fun t__ref_4__projection ((a t__ref1)) t (t__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_1107 Int)
  (temp___is_init_1104 Bool) (temp___skip_constant_1105 Bool)
  (temp___do_toplevel_1106 Bool)) Bool (=>
                                       (or (= temp___is_init_1104 true)
                                       (<= 0 1)) (in_range8
                                       temp___expr_1107)))

;; thecurrentdoor__post_axiom
  (assert
  (forall ((door__state us_private))
  (! (let ((result (thecurrentdoor door__state)))
     (=> (thecurrentdoor__function_guard result door__state)
     (dynamic_invariant2 result true false true))) :pattern ((thecurrentdoor
                                                             door__state)) )))

(declare-fun thedooralarm (us_private) Int)

(declare-fun thedooralarm__function_guard (Int us_private) Bool)

(declare-sort statust 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (statust statust) Bool)

(declare-fun dummy10 () statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_336 Int)
  (temp___is_init_333 Bool) (temp___skip_constant_334 Bool)
  (temp___do_toplevel_335 Bool)) Bool (=>
                                      (or (= temp___is_init_333 true)
                                      (<= 0 1)) (in_range9 temp___expr_336)))

;; thedooralarm__post_axiom
  (assert
  (forall ((door__state us_private))
  (! (let ((result (thedooralarm door__state)))
     (=> (thedooralarm__function_guard result door__state)
     (dynamic_invariant3 result true false true))) :pattern ((thedooralarm
                                                             door__state)) )))

(declare-sort statust1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (statust1 statust1) Bool)

(declare-fun dummy11 () statust1)

(declare-datatypes ()
((statust__ref1 (mk_statust__ref1 (statust__content1 statust1)))))
(define-fun statust__ref_2__projection ((a statust__ref1)) statust1 (statust__content1
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_1903 Int)
  (temp___is_init_1900 Bool) (temp___skip_constant_1901 Bool)
  (temp___do_toplevel_1902 Bool)) Bool (=>
                                       (or (= temp___is_init_1900 true)
                                       (<= 0 8)) (in_range10
                                       temp___expr_1903)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun statusisgotadmintoken (Int) Bool)

(declare-fun statusisgotadmintoken__function_guard (Bool Int) Bool)

;; statusisgotadmintoken__post_axiom
  (assert true)

;; statusisgotadmintoken__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusisgotadmintoken__function_guard
     (statusisgotadmintoken enclave__status) enclave__status)
     (= (= (statusisgotadmintoken enclave__status) true)
     (= enclave__status 5))) :pattern ((statusisgotadmintoken
                                       enclave__status)) )))

(declare-fun statusiswaitingremoveadmintokenfail (Int) Bool)

(declare-fun statusiswaitingremoveadmintokenfail__function_guard (Bool
  Int) Bool)

;; statusiswaitingremoveadmintokenfail__post_axiom
  (assert true)

;; statusiswaitingremoveadmintokenfail__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusiswaitingremoveadmintokenfail__function_guard
     (statusiswaitingremoveadmintokenfail enclave__status) enclave__status)
     (= (= (statusiswaitingremoveadmintokenfail enclave__status) true)
     (= enclave__status 4))) :pattern ((statusiswaitingremoveadmintokenfail
                                       enclave__status)) )))

(declare-fun statusiswaitingstartadminop (Int) Bool)

(declare-fun statusiswaitingstartadminop__function_guard (Bool Int) Bool)

;; statusiswaitingstartadminop__post_axiom
  (assert true)

;; statusiswaitingstartadminop__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusiswaitingstartadminop__function_guard
     (statusiswaitingstartadminop enclave__status) enclave__status)
     (= (= (statusiswaitingstartadminop enclave__status) true)
     (= enclave__status 6))) :pattern ((statusiswaitingstartadminop
                                       enclave__status)) )))

(declare-fun statusiswaitingfinishadminop (Int) Bool)

(declare-fun statusiswaitingfinishadminop__function_guard (Bool Int) Bool)

;; statusiswaitingfinishadminop__post_axiom
  (assert true)

;; statusiswaitingfinishadminop__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusiswaitingfinishadminop__function_guard
     (statusiswaitingfinishadminop enclave__status) enclave__status)
     (= (= (statusiswaitingfinishadminop enclave__status) true)
     (= enclave__status 7))) :pattern ((statusiswaitingfinishadminop
                                       enclave__status)) )))

(declare-fun statusisenclavequiescent (Int) Bool)

(declare-fun statusisenclavequiescent__function_guard (Bool Int) Bool)

;; statusisenclavequiescent__post_axiom
  (assert true)

;; statusisenclavequiescent__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusisenclavequiescent__function_guard
     (statusisenclavequiescent enclave__status) enclave__status)
     (= (= (statusisenclavequiescent enclave__status) true)
     (= enclave__status 3))) :pattern ((statusisenclavequiescent
                                       enclave__status)) )))

(declare-fun statusisshutdown (Int) Bool)

(declare-fun statusisshutdown__function_guard (Bool Int) Bool)

;; statusisshutdown__post_axiom
  (assert true)

;; statusisshutdown__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (statusisshutdown__function_guard (statusisshutdown enclave__status)
     enclave__status)
     (= (= (statusisshutdown enclave__status) true) (= enclave__status 8))) :pattern (
  (statusisshutdown enclave__status)) )))

(declare-fun enrolmentisinprogress (Int) Bool)

(declare-fun enrolmentisinprogress__function_guard (Bool Int) Bool)

(declare-sort enrolmentstates 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (enrolmentstates enrolmentstates) Bool)

(declare-fun dummy12 () enrolmentstates)

(declare-datatypes ()
((enrolmentstates__ref
 (mk_enrolmentstates__ref (enrolmentstates__content enrolmentstates)))))
(define-fun enrolmentstates__ref___projection ((a enrolmentstates__ref)) enrolmentstates 
  (enrolmentstates__content a))

;; enrolmentisinprogress__post_axiom
  (assert true)

;; enrolmentisinprogress__def_axiom
  (assert
  (forall ((enclave__status Int))
  (! (=> (enrolmentisinprogress__function_guard
     (enrolmentisinprogress enclave__status) enclave__status)
     (= (= (enrolmentisinprogress enclave__status) true) (in_range11
     enclave__status))) :pattern ((enrolmentisinprogress enclave__status)) )))

(declare-fun currentadminactivitypossible (us_private Int) Bool)

(declare-fun currentadminactivitypossible__function_guard (Bool us_private
  Int) Bool)

;; currentadminactivitypossible__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort nonquiescentstates 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 4 x) (<= x 8)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq13 (nonquiescentstates nonquiescentstates) Bool)

(declare-fun dummy13 () nonquiescentstates)

(declare-datatypes ()
((nonquiescentstates__ref
 (mk_nonquiescentstates__ref
 (nonquiescentstates__content nonquiescentstates)))))
(define-fun nonquiescentstates__ref___projection ((a nonquiescentstates__ref)) nonquiescentstates 
  (nonquiescentstates__content a))

(define-fun dynamic_invariant5 ((temp___expr_2167 Int)
  (temp___is_init_2164 Bool) (temp___skip_constant_2165 Bool)
  (temp___do_toplevel_2166 Bool)) Bool (=>
                                       (or (= temp___is_init_2164 true)
                                       (<= 4 8)) (in_range12
                                       temp___expr_2167)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant6 ((temp___expr_2155 Int)
  (temp___is_init_2152 Bool) (temp___skip_constant_2153 Bool)
  (temp___do_toplevel_2154 Bool)) Bool (=>
                                       (or (= temp___is_init_2152 true)
                                       (<= 0 2)) (in_range11
                                       temp___expr_2155)))

(define-fun dynamic_invariant7 ((temp___expr_261 Int)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (or (= temp___is_init_258 true)
                                      (<= 0 4)) (in_range2 temp___expr_261)))

(define-fun dynamic_invariant8 ((temp___expr_396 Int)
  (temp___is_init_393 Bool) (temp___skip_constant_394 Bool)
  (temp___do_toplevel_395 Bool)) Bool (=>
                                      (or (= temp___is_init_393 true)
                                      (<= 1901 2099)) (in_range4
                                      temp___expr_396)))

(define-fun dynamic_invariant9 ((temp___expr_402 Int)
  (temp___is_init_399 Bool) (temp___skip_constant_400 Bool)
  (temp___do_toplevel_401 Bool)) Bool (=>
                                      (or (= temp___is_init_399 true)
                                      (<= 1 12)) (in_range5 temp___expr_402)))

(define-fun dynamic_invariant10 ((temp___expr_408 Int)
  (temp___is_init_405 Bool) (temp___skip_constant_406 Bool)
  (temp___do_toplevel_407 Bool)) Bool (=>
                                      (or (= temp___is_init_405 true)
                                      (<= 1 31)) (in_range6 temp___expr_408)))

(define-fun dynamic_invariant11 ((temp___expr_432 Int)
  (temp___is_init_429 Bool) (temp___skip_constant_430 Bool)
  (temp___do_toplevel_431 Bool)) Bool (=>
                                      (or (= temp___is_init_429 true)
                                      (<= 0 86399999)) (in_range7
                                      temp___expr_432)))

(declare-fun currenttime () us_private)

(declare-fun filestate () us_private)

(declare-fun state () us_private)

(declare-fun filestate1 () us_private)

(declare-fun state1 () us_private)

(declare-fun state2 () us_private)

(declare-fun status () us_private)

(declare-fun state3 () us_private)

(declare-fun state4 () us_private)

(declare-fun state5 () us_private)

(declare-fun state6 () us_private)

(declare-fun writtenstate () us_private)

(declare-fun output () us_private)

(declare-fun state7 () us_private)

(declare-fun state8 () us_private)

(declare-fun theadmin__split_fields () privileget)

(declare-fun theadmin__split_fields1 () opandnullt)

(declare-fun status1 () Int)

(declare-fun localstatus () Int)

(declare-fun o () Int)

(declare-fun filestate2 () us_private)

(declare-fun state9 () us_private)

(declare-fun filestate3 () us_private)

(declare-fun state10 () us_private)

(declare-fun state11 () us_private)

(declare-fun status2 () us_private)

(declare-fun state12 () us_private)

(declare-fun state13 () us_private)

(declare-fun state14 () us_private)

(declare-fun state15 () us_private)

(declare-fun writtenstate1 () us_private)

(declare-fun output1 () us_private)

(declare-fun state16 () us_private)

(declare-fun state17 () us_private)

(declare-fun theadmin__split_fields2 () privileget)

(declare-fun theadmin__split_fields3 () opandnullt)

(declare-fun status3 () Int)

(declare-fun result () Int)

(declare-fun localstatus1 () Int)

(declare-fun filestate4 () us_private)

(declare-fun state18 () us_private)

(declare-fun state19 () us_private)

(declare-fun status4 () us_private)

(declare-fun state20 () us_private)

(declare-fun theadmin__split_fields4 () us_split_fields)

(declare-fun status5 () Int)

(declare-fun filestate5 () us_private)

(declare-fun state21 () us_private)

(declare-fun state22 () us_private)

(declare-fun state23 () us_private)

(declare-fun status6 () Int)

(declare-fun filestate6 () us_private)

(declare-fun state24 () us_private)

(declare-fun filestate7 () us_private)

(declare-fun state25 () us_private)

(declare-fun state26 () us_private)

(declare-fun state27 () us_private)

(declare-fun state28 () us_private)

(declare-fun state29 () us_private)

(declare-fun state30 () us_private)

(declare-fun writtenstate2 () us_private)

(declare-fun output2 () us_private)

(declare-fun state31 () us_private)

(declare-fun state32 () us_private)

(declare-fun theadmin__split_fields5 () us_split_fields)

(declare-fun status7 () Int)

(declare-fun filestate8 () us_private__ref)

(declare-fun state33 () us_private__ref)

(declare-fun filestate9 () us_private__ref)

(declare-fun state34 () us_private__ref)

(declare-fun state35 () us_private__ref)

(declare-fun status8 () us_private__ref)

(declare-fun state36 () us_private__ref)

(declare-fun state37 () us_private__ref)

(declare-fun state38 () us_private__ref)

(declare-fun state39 () us_private__ref)

(declare-fun writtenstate3 () us_private__ref)

(declare-fun output3 () us_private__ref)

(declare-fun state40 () us_private__ref)

(declare-fun state41 () us_private__ref)

(declare-fun theadmin__split_fields6 () us_split_fields__ref)

(declare-fun status9 () int__ref)

(declare-fun localstatus2 () int__ref)

(declare-fun filestate10 () us_private)

(declare-fun state42 () us_private)

(declare-fun filestate11 () us_private)

(declare-fun state43 () us_private)

(declare-fun state44 () us_private)

(declare-fun status10 () us_private)

(declare-fun state45 () us_private)

(declare-fun state46 () us_private)

(declare-fun state47 () us_private)

(declare-fun state48 () us_private)

(declare-fun writtenstate4 () us_private)

(declare-fun output4 () us_private)

(declare-fun state49 () us_private)

(declare-fun state50 () us_private)

(declare-fun theadmin__split_fields7 () us_split_fields)

(declare-fun status11 () Int)

(declare-fun localstatus3 () Int)

(define-fun theadmin__split_fields8 () us_split_fields (mk___split_fields
                                                       theadmin__split_fields2
                                                       theadmin__split_fields3))

;; H
  (assert (in_range10 status1))

;; H
  (assert (enrolmentisinprogress__function_guard
  (enrolmentisinprogress status1) status1))

;; H
  (assert (currentadminactivitypossible__function_guard
  (currentadminactivitypossible state2 status1) state2 status1))

;; H
  (assert (islocked__function_guard (islocked state3) state3))

;; H
  (assert (thecurrentdoor__function_guard (thecurrentdoor state4) state4))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state4) state4))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state4) state4))

;; H
  (assert (greaterthanorequal__function_guard
  (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state4))
  (thecurrenttime currenttime) (alarm_timeout state4)))

;; H
  (assert (thedooralarm__function_guard (thedooralarm state4) state4))

;; H
  (assert (statusisgotadmintoken__function_guard
  (statusisgotadmintoken status1) status1))

;; H
  (assert (statusiswaitingremoveadmintokenfail__function_guard
  (statusiswaitingremoveadmintokenfail status1) status1))

;; H
  (assert (ispresent__function_guard
  (ispresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (ispresent__function_guard
  (ispresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (statusiswaitingstartadminop__function_guard
  (statusiswaitingstartadminop status1) status1))

;; H
  (assert (statusiswaitingfinishadminop__function_guard
  (statusiswaitingfinishadminop status1) status1))

;; H
  (assert (ispresent__function_guard
  (ispresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (statusisenclavequiescent__function_guard
  (statusisenclavequiescent status1) status1))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (statusisshutdown__function_guard (statusisshutdown status1)
  status1))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (statusiswaitingstartadminop__function_guard
  (statusiswaitingstartadminop status1) status1))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isgood__function_guard (isgood state2) state2))

;; H
  (assert (authcertvalid__function_guard (authcertvalid state2) state2))

;; H
  (assert (theauthcertrole__function_guard (theauthcertrole state2) state2))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= (enrolmentisinprogress status1) true))
  (= (currentadminactivitypossible state2 status1) true))
  (=
  (and (and (= (islocked state3) true) (= (thecurrentdoor state4) 0))
  (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state4)) true))
  (= (thedooralarm state4) 0)))
  (=>
  (or (= (statusisgotadmintoken status1) true)
  (= (statusiswaitingremoveadmintokenfail status1) true))
  (not
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=>
  (not
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=>
  (or (= (statusiswaitingstartadminop status1) true)
  (= (statusiswaitingfinishadminop status1) true))
  (and
  (= (ispresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=> (= (statusisenclavequiescent status1) true)
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))
  (=> (= (statusisshutdown status1) true)
  (and
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 0))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 4))
  (= (statusiswaitingstartadminop status1) true)))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (and (and (= (isgood state2) true) (= (authcertvalid state2) true))
  (= (theauthcertrole state2) 1))))
  (=>
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)))
  (=>
  (= (rolepresent
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 1)
  (or
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))
  (not
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true))))))

;; H
  (assert (ispresent__function_guard
  (ispresent (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (isgood__function_guard (isgood state19) state19))

;; H
  (assert (authcertvalid__function_guard (authcertvalid state19) state19))

;; H
  (assert (theauthcertrole__function_guard (theauthcertrole state19)
  state19))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields4))
  (mk___rep theadmin__split_fields4)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (ispresent__function_guard
  (ispresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (ispresent__function_guard
  (ispresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (islocked__function_guard (islocked state27) state27))

;; H
  (assert (thecurrentdoor__function_guard (thecurrentdoor state28) state28))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state28) state28))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state28) state28))

;; H
  (assert (greaterthanorequal__function_guard
  (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state28))
  (thecurrenttime currenttime) (alarm_timeout state28)))

;; H
  (assert (thedooralarm__function_guard (thedooralarm state28) state28))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (isgood__function_guard (isgood state26) state26))

;; H
  (assert (authcertvalid__function_guard (authcertvalid state26) state26))

;; H
  (assert (theauthcertrole__function_guard (theauthcertrole state26)
  state26))

;; H
  (assert (islocked__function_guard (islocked state27) state27))

;; H
  (assert (islocked__function_guard (islocked state3) state3))

;; H
  (assert (isgood__function_guard (isgood state26) state26))

;; H
  (assert (authcertvalid__function_guard (authcertvalid state26) state26))

;; H
  (assert (theauthcertrole__function_guard (theauthcertrole state26)
  state26))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (rolepresent__function_guard
  (rolepresent (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (isdoingop__function_guard
  (isdoingop (mk___rep theadmin__split_fields5))
  (mk___rep theadmin__split_fields5)))

;; H
  (assert (islocked__function_guard (islocked state27) state27))

;; H
  (assert (islocked__function_guard (islocked state3) state3))

;; H
  (assert (isdoingop__function_guard
  (isdoingop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (thecurrentop__function_guard
  (thecurrentop
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1)))
  (mk___rep
  (mk___split_fields theadmin__split_fields theadmin__split_fields1))))

;; H
  (assert (=> (<= 4 8) (in_range12 localstatus)))

;; H
  (assert (and (= o status1) (in_range12 status1)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref localstatus)))

;; H
  (assert (= localstatus1 o))

;; H
  (assert
  (=> (= localstatus1 5)
  (and
  (and
  (and
  (and
  (and
  (and (or (= status5 3) (= status5 4))
  (=> (= status5 4)
  (not (= (ispresent (mk___rep theadmin__split_fields4)) true))))
  (not (= (isdoingop (mk___rep theadmin__split_fields4)) true)))
  (=> (= (rolepresent (mk___rep theadmin__split_fields4)) 1)
  (and (and (= (isgood state19) true) (= (authcertvalid state19) true))
  (= (theauthcertrole state19) 1))))
  (=>
  (and (= (isdoingop (mk___rep theadmin__split_fields4)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields4)) 3))
  (= (rolepresent (mk___rep theadmin__split_fields4)) 1)))
  (=> (= (rolepresent (mk___rep theadmin__split_fields4)) 1)
  (or
  (and (= (isdoingop (mk___rep theadmin__split_fields4)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields4)) 3))
  (not (= (isdoingop (mk___rep theadmin__split_fields4)) true)))))
  (in_range10 status5))))

;; H
  (assert (=> (= localstatus1 5) (= state32 state8)))

;; H
  (assert (=> (= localstatus1 5) (= output2 output)))

;; H
  (assert (=> (= localstatus1 5) (= writtenstate2 writtenstate)))

;; H
  (assert (=> (= localstatus1 5) (= state30 state6)))

;; H
  (assert (=> (= localstatus1 5) (= state29 state5)))

;; H
  (assert (=> (= localstatus1 5) (= state28 state4)))

;; H
  (assert (=> (= localstatus1 5) (= state27 state3)))

;; H
  (assert (=> (= localstatus1 5) (= state24 state)))

;; H
  (assert (=> (= localstatus1 5) (= filestate6 filestate)))

;; H
  (assert (=> (= localstatus1 5) (= state32 state17)))

;; H
  (assert (=> (= localstatus1 5) (= output2 output1)))

;; H
  (assert (=> (= localstatus1 5) (= writtenstate2 writtenstate1)))

;; H
  (assert (=> (= localstatus1 5) (= state30 state15)))

;; H
  (assert (=> (= localstatus1 5) (= state29 state14)))

;; H
  (assert (=> (= localstatus1 5) (= state28 state13)))

;; H
  (assert (=> (= localstatus1 5) (= state27 state12)))

;; H
  (assert (=> (= localstatus1 5) (= state24 state9)))

;; H
  (assert (=> (= localstatus1 5) (= filestate6 filestate2)))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (and (= status6 3) (in_range10 status6)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4)
  (= theadmin__split_fields5 (mk___split_fields theadmin__split_fields
                             theadmin__split_fields1)))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state32 state8))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= output2 output))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (= writtenstate2 writtenstate))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state30 state6))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state29 state5))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state28 state4))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state27 state3))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state24 state))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (= filestate6 filestate))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (= theadmin__split_fields5 theadmin__split_fields8))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state32 state17))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= output2 output1))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (= writtenstate2 writtenstate1))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state30 state15))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state29 state14))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state28 state13))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state27 state12))))

;; H
  (assert
  (=> (not (= localstatus1 5)) (=> (= localstatus1 4) (= state24 state9))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 4) (= filestate6 filestate2))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (=> (not (= localstatus1 6)) (= localstatus1 7))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (or (or (or (= status7 6) (= status7 7)) (= status7 3)) (= status7 8))
  (=> (or (= status7 6) (= status7 7))
  (and
  (and (= (isdoingop (mk___rep theadmin__split_fields5)) true)
  (= (ispresent (mk___rep theadmin__split_fields5)) true))
  (= (rolepresent (mk___rep theadmin__split_fields5)) (rolepresent
                                                      (mk___rep
                                                      (mk___split_fields
                                                      theadmin__split_fields
                                                      theadmin__split_fields1)))))))
  (=> (= status7 3)
  (and
  (and (not (= (isdoingop (mk___rep theadmin__split_fields5)) true))
  (= (ispresent (mk___rep theadmin__split_fields5)) true))
  (= (rolepresent (mk___rep theadmin__split_fields5)) (rolepresent
                                                      (mk___rep
                                                      (mk___split_fields
                                                      theadmin__split_fields
                                                      theadmin__split_fields1)))))))
  (=> (= status7 8)
  (and (not (= (isdoingop (mk___rep theadmin__split_fields5)) true))
  (= (rolepresent (mk___rep theadmin__split_fields5)) 0))))
  (=>
  (and (= (isdoingop (mk___rep theadmin__split_fields5)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields5)) 4)) (= status7 6)))
  (=
  (and (and (= (islocked state27) true) (= (thecurrentdoor state28) 0))
  (= (greaterthanorequal (thecurrenttime currenttime)
     (alarm_timeout state28)) true))
  (= (thedooralarm state28) 0)))
  (=> (= (rolepresent (mk___rep theadmin__split_fields5)) 1)
  (and (and (= (isgood state26) true) (= (authcertvalid state26) true))
  (= (theauthcertrole state26) 1))))
  (=> (and (not (= (islocked state27) true)) (= (islocked state3) true))
  (and (and (= (isgood state26) true) (= (authcertvalid state26) true))
  (= (theauthcertrole state26) 1))))
  (=>
  (and (= (isdoingop (mk___rep theadmin__split_fields5)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields5)) 3))
  (= (rolepresent (mk___rep theadmin__split_fields5)) 1)))
  (=> (= (rolepresent (mk___rep theadmin__split_fields5)) 1)
  (or
  (and (= (isdoingop (mk___rep theadmin__split_fields5)) true)
  (= (thecurrentop (mk___rep theadmin__split_fields5)) 3))
  (not (= (isdoingop (mk___rep theadmin__split_fields5)) true)))))
  (=> (and (not (= (islocked state27) true)) (= (islocked state3) true))
  (and
  (= (isdoingop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep
     (mk___split_fields theadmin__split_fields theadmin__split_fields1))) 3))))
  (in_range10 status7))))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= status7 status1)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= theadmin__split_fields5 (mk___split_fields theadmin__split_fields
                             theadmin__split_fields1))))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state32 state8)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state31 state7)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= output2 output)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= writtenstate2 writtenstate)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state30 state6)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state29 state5)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state28 state4)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state27 state3)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state26 state2)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state25 state1)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= filestate7 filestate1)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state24 state)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= filestate6 filestate)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= status7 status3)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= theadmin__split_fields5 theadmin__split_fields8)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state32 state17)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state31 state16)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= output2 output1)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= writtenstate2 writtenstate1)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state30 state15)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state29 state14)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state28 state13)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state27 state12)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state26 state11)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state25 state10)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= filestate7 filestate3)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= state24 state9)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4))
  (=> (not (=> (not (= localstatus1 6)) (= localstatus1 7)))
  (= filestate6 filestate2)))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4)) (= status6 status7))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4)) (= state23 state31))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4)) (= state22 state26))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4)) (= state21 state25))))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 4)) (= filestate5 filestate7))))

;; H
  (assert (=> (not (= localstatus1 5)) (= status5 status6)))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (= theadmin__split_fields4 theadmin__split_fields5)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state20 state23)))

;; H
  (assert (=> (not (= localstatus1 5)) (= status4 status)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state19 state22)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state18 state21)))

;; H
  (assert (=> (not (= localstatus1 5)) (= filestate4 filestate5)))

;; H
  (assert (=> (not (= localstatus1 5)) (= status5 status6)))

;; H
  (assert
  (=> (not (= localstatus1 5))
  (= theadmin__split_fields4 theadmin__split_fields5)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state20 state23)))

;; H
  (assert (=> (not (= localstatus1 5)) (= status4 status2)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state19 state22)))

;; H
  (assert (=> (not (= localstatus1 5)) (= state18 state21)))

;; H
  (assert (=> (not (= localstatus1 5)) (= filestate4 filestate5)))

;; H
  (assert (= localstatus2 (mk_int__ref localstatus1)))

;; H
  (assert (= status9 (mk_int__ref status5)))

;; H
  (assert
  (= theadmin__split_fields6 (mk___split_fields__ref theadmin__split_fields4)))

;; H
  (assert (= state41 (mk___private__ref state32)))

;; H
  (assert (= state40 (mk___private__ref state20)))

;; H
  (assert (= output3 (mk___private__ref output2)))

;; H
  (assert (= writtenstate3 (mk___private__ref writtenstate2)))

;; H
  (assert (= state39 (mk___private__ref state30)))

;; H
  (assert (= state38 (mk___private__ref state29)))

;; H
  (assert (= state37 (mk___private__ref state28)))

;; H
  (assert (= state36 (mk___private__ref state27)))

;; H
  (assert (= status8 (mk___private__ref status4)))

;; H
  (assert (= state35 (mk___private__ref state19)))

;; H
  (assert (= state34 (mk___private__ref state18)))

;; H
  (assert (= filestate9 (mk___private__ref filestate4)))

;; H
  (assert (= state33 (mk___private__ref state24)))

;; H
  (assert (= filestate8 (mk___private__ref filestate6)))

;; H
  (assert (= localstatus3 localstatus1))

;; H
  (assert (= status11 status5))

;; H
  (assert (= theadmin__split_fields7 theadmin__split_fields4))

;; H
  (assert (= state50 state32))

;; H
  (assert (= state49 state20))

;; H
  (assert (= output4 output2))

;; H
  (assert (= writtenstate4 writtenstate2))

;; H
  (assert (= state48 state30))

;; H
  (assert (= state47 state29))

;; H
  (assert (= state46 state28))

;; H
  (assert (= state45 state27))

;; H
  (assert (= status10 status4))

;; H
  (assert (= state44 state19))

;; H
  (assert (= state43 state18))

;; H
  (assert (= filestate11 filestate4))

;; H
  (assert (= state42 state24))

;; H
  (assert (= filestate10 filestate6))

;; H
  (assert (enrolmentisinprogress__function_guard
  (enrolmentisinprogress (int__content status9)) (int__content status9)))

(assert
;; WP_parameter_def
 ;; File "enclave.ads", line 78, characters 0-0
  (not (not (= (enrolmentisinprogress (int__content status9)) true))))
(check-sat)
