;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_byte 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (unsigned_byte unsigned_byte) Bool)

(declare-fun dummy () unsigned_byte)

(declare-datatypes ()
((unsigned_byte__ref
 (mk_unsigned_byte__ref (unsigned_byte__content unsigned_byte)))))
(define-fun unsigned_byte__ref___projection ((a unsigned_byte__ref)) unsigned_byte 
  (unsigned_byte__content a))

(declare-fun to_rep (unsigned_byte) Int)

(declare-fun of_rep (Int) unsigned_byte)

;; inversion_axiom
  (assert
  (forall ((x unsigned_byte))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned_byte)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort small_index_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (small_index_t small_index_t) Bool)

(declare-fun dummy1 () small_index_t)

(declare-datatypes ()
((small_index_t__ref
 (mk_small_index_t__ref (small_index_t__content small_index_t)))))
(define-fun small_index_t__ref___projection ((a small_index_t__ref)) small_index_t 
  (small_index_t__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int unsigned_byte))))))
(declare-fun slide ((Array Int unsigned_byte) Int
  Int) (Array Int unsigned_byte))

;; slide_eq
  (assert
  (forall ((a (Array Int unsigned_byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int unsigned_byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int unsigned_byte) Int Int
  (Array Int unsigned_byte) Int Int) (Array Int unsigned_byte))

;; concat_def
  (assert
  (forall ((a (Array Int unsigned_byte)) (b (Array Int unsigned_byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned_byte Int) (Array Int unsigned_byte))

;; singleton_def
  (assert
  (forall ((v unsigned_byte))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int unsigned_byte)) (a__first Int)
  (a__last Int) (b (Array Int unsigned_byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_144 Int))
                           (=>
                           (and (<= a__first temp___idx_144)
                           (<= temp___idx_144 a__last))
                           (= (to_rep (select a temp___idx_144)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_144)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int unsigned_byte)) (b (Array Int unsigned_byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_144 Int))
  (=> (and (<= a__first temp___idx_144) (<= temp___idx_144 a__last))
  (= (to_rep (select a temp___idx_144)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_144)))))))))))

(declare-fun compare ((Array Int unsigned_byte) Int Int
  (Array Int unsigned_byte) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int unsigned_byte)) (b (Array Int unsigned_byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int unsigned_byte)) (b (Array Int unsigned_byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int unsigned_byte)) (b (Array Int unsigned_byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy2 () (Array Int unsigned_byte))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int unsigned_byte)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int unsigned_byte)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int unsigned_byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int unsigned_byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int unsigned_byte))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int unsigned_byte))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int unsigned_byte)
  (Array Int unsigned_byte)) Bool)

(declare-datatypes ()
((map__ref1
 (mk_map__ref1 (map__content1 (Array Int (Array Int unsigned_byte)))))))
(declare-fun slide1 ((Array Int (Array Int unsigned_byte)) Int
  Int) (Array Int (Array Int unsigned_byte)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int unsigned_byte))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int unsigned_byte))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int unsigned_byte)) Int Int
  (Array Int (Array Int unsigned_byte)) Int
  Int) (Array Int (Array Int unsigned_byte)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int unsigned_byte)))
  (b (Array Int (Array Int unsigned_byte))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int unsigned_byte)
  Int) (Array Int (Array Int unsigned_byte)))

;; singleton_def
  (assert
  (forall ((v (Array Int unsigned_byte)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int (Array Int unsigned_byte)))
  (a__first Int) (a__last Int) (b (Array Int (Array Int unsigned_byte)))
  (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_145 Int))
                           (=>
                           (and (<= a__first temp___idx_145)
                           (<= temp___idx_145 a__last))
                           (= (bool_eq2 (select a temp___idx_145) 1 1000
                              (select b (+ (- b__first a__first) temp___idx_145))
                              1 1000) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int unsigned_byte)))
  (b (Array Int (Array Int unsigned_byte))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_145 Int))
  (=> (and (<= a__first temp___idx_145) (<= temp___idx_145 a__last))
  (= (bool_eq2 (select a temp___idx_145) 1 1000
     (select b (+ (- b__first a__first) temp___idx_145)) 1 1000) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t63b 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (t63b t63b) Bool)

(declare-fun dummy3 () t63b)

(declare-datatypes () ((t63b__ref (mk_t63b__ref (t63b__content t63b)))))
(define-fun t63b__ref___projection ((a t63b__ref)) t63b (t63b__content a))

(declare-sort t59b 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (t59b t59b) Bool)

(declare-fun dummy4 () t59b)

(declare-datatypes () ((t59b__ref (mk_t59b__ref (t59b__content t59b)))))
(define-fun t59b__ref___projection ((a t59b__ref)) t59b (t59b__content a))

(declare-sort t61b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (t61b t61b) Bool)

(declare-fun dummy5 () t61b)

(declare-datatypes () ((t61b__ref (mk_t61b__ref (t61b__content t61b)))))
(define-fun t61b__ref___projection ((a t61b__ref)) t61b (t61b__content a))

(declare-fun temp___479 ((Array Int unsigned_byte)
  (Array Int unsigned_byte)) (Array Int (Array Int unsigned_byte)))

;; def_axiom
  (assert
  (forall ((temp___481 (Array Int unsigned_byte))
  (temp___482 (Array Int unsigned_byte)))
  (let ((temp___480 (temp___479 temp___481 temp___482)))
  (forall ((temp___483 Int))
  (ite (or (= temp___483 2) (and (<= 4 temp___483) (<= temp___483 6)))
  (= (select temp___480 temp___483) temp___481)
  (= (select temp___480 temp___483) temp___482))))))

(declare-fun temp___484 (Int Int Int Int) (Array Int unsigned_byte))

;; def_axiom
  (assert
  (forall ((temp___486 Int) (temp___487 Int) (temp___488 Int)
  (temp___489 Int))
  (let ((temp___485 (temp___484 temp___486 temp___487 temp___488 temp___489)))
  (forall ((temp___490 Int))
  (ite (= temp___490 3)
  (= (select temp___485 temp___490) (of_rep temp___488))
  (ite (= temp___490 2)
  (= (select temp___485 temp___490) (of_rep temp___487))
  (ite (= temp___490 1)
  (= (select temp___485 temp___490) (of_rep temp___486))
  (= (select temp___485 temp___490) (of_rep temp___489)))))))))

(declare-fun temp___491 (Int Int) (Array Int unsigned_byte))

;; def_axiom
  (assert
  (forall ((temp___493 Int) (temp___494 Int))
  (let ((temp___492 (temp___491 temp___493 temp___494)))
  (forall ((temp___495 Int))
  (ite (= temp___495 5)
  (= (select temp___492 temp___495) (of_rep temp___493))
  (= (select temp___492 temp___495) (of_rep temp___494)))))))

(define-fun dynamic_invariant ((temp___expr_200 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)) Bool (=>
                                      (or (= temp___is_init_197 true)
                                      (<= 0 255)) (in_range1
                                      temp___expr_200)))

(define-fun dynamic_invariant1 ((temp___expr_275 Int)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)) Bool (=>
                                      (or (= temp___is_init_272 true)
                                      (<= 1 1000)) (in_range2
                                      temp___expr_275)))

(declare-fun x () (Array Int (Array Int unsigned_byte)))

(declare-fun o () (Array Int unsigned_byte))

(declare-fun o1 () (Array Int unsigned_byte))

(declare-fun o2 () (Array Int (Array Int unsigned_byte)))

(declare-fun result () (Array Int (Array Int unsigned_byte)))

(declare-fun x1 () (Array Int (Array Int unsigned_byte)))

;; H
  (assert (= o (temp___491 10 12)))

;; H
  (assert (= o1 (temp___484 1 2 3 0)))

;; H
  (assert (= o2 (temp___479 o1 o)))

;; H
  (assert (= result x))

;; H
  (assert (= x1 o2))

(assert
;; WP_parameter_def
 ;; File "array_aggregates.adb", line 189, characters 0-0
  (not (= (to_rep (select (select x1 3) 4)) 10)))
(check-sat)
