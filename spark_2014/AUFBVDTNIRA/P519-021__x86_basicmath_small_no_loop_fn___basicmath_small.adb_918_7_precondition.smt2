;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 256)) (= (bv2nat ((_ int2bv 8) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (bv2nat ((_ int2bv 16) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 4294967296)) (= (bv2nat ((_ int2bv 32) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (bv2nat ((_ int2bv 64) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv3 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(define-fun bool_eq ((x (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64 
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(define-fun bool_eq1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-fun dummy1 () unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16 
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(define-fun bool_eq2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-fun dummy2 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8 
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-sort unsigned32 0)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 32))

(define-fun bool_eq4 ((x (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-fun dummy3 () unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32 
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (=> (eax__function_guard result x86__rax)
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true))))) :pattern ((eax x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (readreg32__function_guard (readreg32 x86__rcx) x86__rcx)
     (=> (ecx__function_guard result x86__rcx)
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))))) :pattern ((ecx x86__rcx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (readreg32__function_guard (readreg32 x86__rdx) x86__rdx)
     (=> (edx__function_guard result x86__rdx)
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))))) :pattern ((edx x86__rdx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (readreg32__function_guard (readreg32 x86__rbx) x86__rbx)
     (=> (ebx__function_guard result x86__rbx)
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant2 result true
     false true)))))) :pattern ((ebx x86__rbx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (readreg32__function_guard (readreg32 x86__rsp) x86__rsp)
     (=> (esp__function_guard result x86__rsp)
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))))) :pattern ((esp x86__rsp)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (readreg32__function_guard (readreg32 x86__rsi) x86__rsi)
     (=> (esi__function_guard result x86__rsi)
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))))) :pattern ((esi x86__rsi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (readreg32__function_guard (readreg32 x86__rdi) x86__rdi)
     (=> (edi__function_guard result x86__rdi)
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))))) :pattern ((edi x86__rdi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (=> (readmem8__function_guard result addr x86__memory)
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true))))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (=> (readmem32__function_guard result addr x86__memory)
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true))))) :pattern ((readmem32
                                                               addr
                                                               x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (=> (readmem64__function_guard result addr x86__memory)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true))))) :pattern ((readmem64 addr
                                                              x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 64))

(define-fun bool_eq5 ((x (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-fun dummy4 () unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_2__projection ((a unsigned64__ref1)) unsigned641 
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_390 (_ BitVec 64))
  (temp___is_init_387 Bool) (temp___skip_constant_388 Bool)
  (temp___do_toplevel_389 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-fun attr__ATTRIBUTE_MODULUS5 () (_ BitVec 8))

(define-fun bool_eq6 ((x (_ BitVec 8))
  (y (_ BitVec 8))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-fun dummy5 () unsigned81)

(declare-datatypes ()
((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref_2__projection ((a unsigned8__ref1)) unsigned81 
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_408 (_ BitVec 8))
  (temp___is_init_405 Bool) (temp___skip_constant_406 Bool)
  (temp___do_toplevel_407 Bool)) Bool true)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (let ((result (inrange64 var bottom range_size)))
     (=> (inrange64__function_guard result var bottom range_size)
     (= (= result true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (=> (readreg16__function_guard result reg)
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true))))) :pattern ((readreg16
                                                               reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (let ((result (writereg16post regold regnew val__)))
     (and (readreg16__function_guard (readreg16 regnew) regnew)
     (=> (writereg16post__function_guard result regold regnew val__)
     (= (= result true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080))))))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (=> (readreg32__function_guard result reg)
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true))))) :pattern ((readreg32
                                                               reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (let ((result (writereg32post regnew val__)))
     (and (readreg32__function_guard (readreg32 regnew) regnew)
     (=> (writereg32post__function_guard result regnew val__)
     (= (= result true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0)))))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-fun zeroflag () Bool)

(declare-fun carryflag () Bool)

(declare-fun signflag () Bool)

(declare-fun overflowflag () Bool)

(declare-fun xmm0 () (_ BitVec 64))

(declare-fun xmm1 () (_ BitVec 64))

(declare-fun xmm2 () (_ BitVec 64))

(declare-fun xmm3 () (_ BitVec 64))

(declare-fun xmm4 () (_ BitVec 64))

(declare-fun xmm5 () (_ BitVec 64))

(declare-fun xmm6 () (_ BitVec 64))

(declare-fun xmm7 () (_ BitVec 64))

(declare-fun rbx () t__ref3)

(declare-fun rsp () t__ref3)

(declare-fun rbp () t__ref3)

(declare-fun rsi () t__ref3)

(declare-fun rdi () t__ref3)

(declare-fun r12 () t__ref3)

(declare-fun r13 () t__ref3)

(declare-fun r14 () t__ref3)

(declare-fun r15 () t__ref3)

(declare-fun memory () map__ref)

(declare-fun savestackptr () t__ref3)

(declare-fun ra0 () t__ref)

(declare-fun ra1 () t__ref)

(declare-fun ra2 () t__ref)

(declare-fun ra3 () t__ref)

(declare-fun ra4 () t__ref)

(declare-fun ra5 () t__ref)

(declare-fun ra6 () t__ref)

(declare-fun ra7 () t__ref)

(declare-fun saverbx () t__ref3)

(declare-fun saverbp () t__ref3)

(declare-fun saver12 () t__ref3)

(declare-fun saver13 () t__ref3)

(declare-fun saver14 () t__ref3)

(declare-fun saver15 () t__ref3)

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 8))

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 8))

(declare-fun o9 () (_ BitVec 8))

(declare-fun o10 () (_ BitVec 8))

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () (_ BitVec 8))

(declare-fun o13 () (_ BitVec 8))

(declare-fun o14 () (_ BitVec 8))

(declare-fun o15 () (_ BitVec 8))

(declare-fun o16 () (_ BitVec 8))

(declare-fun o17 () (_ BitVec 64))

(declare-fun o18 () (_ BitVec 64))

(declare-fun o19 () (_ BitVec 64))

(declare-fun o20 () (_ BitVec 64))

(declare-fun o21 () (_ BitVec 64))

(declare-fun o22 () (_ BitVec 64))

(declare-fun o23 () (_ BitVec 64))

(declare-fun o24 () (_ BitVec 64))

(declare-fun o25 () (_ BitVec 64))

(declare-fun o26 () (_ BitVec 64))

(declare-fun o27 () (_ BitVec 32))

(declare-fun o28 () (_ BitVec 32))

(declare-fun o29 () (_ BitVec 64))

(declare-fun o30 () (_ BitVec 32))

(declare-fun o31 () (_ BitVec 32))

(declare-fun o32 () (_ BitVec 32))

(declare-fun o33 () (_ BitVec 32))

(declare-fun o34 () Bool)

(declare-fun o35 () (_ BitVec 32))

(declare-fun o36 () (_ BitVec 32))

(declare-fun o37 () (_ BitVec 32))

(declare-fun o38 () Bool)

(declare-fun temp___511 () (_ BitVec 64))

(declare-fun temp___512 () (_ BitVec 64))

(declare-fun temp___510 () (_ BitVec 64))

(declare-fun temp___509 () Bool)

(declare-fun temp___508 () Bool)

(declare-fun temp___507 () (_ BitVec 64))

(declare-fun temp___505 () Bool)

(declare-fun temp___506 () (_ BitVec 64))

(declare-fun temp___504 () (_ BitVec 64))

(declare-fun temp___503 () (_ BitVec 64))

(declare-fun temp___502 () Bool)

(declare-fun o39 () (_ BitVec 64))

(declare-fun o40 () (_ BitVec 32))

(declare-fun o41 () (_ BitVec 32))

(declare-fun o42 () (_ BitVec 32))

(declare-fun o43 () (_ BitVec 32))

(declare-fun o44 () (_ BitVec 32))

(declare-fun o45 () Bool)

(declare-fun o46 () (_ BitVec 32))

(declare-fun o47 () (_ BitVec 32))

(declare-fun o48 () (_ BitVec 32))

(declare-fun o49 () Bool)

(declare-fun o50 () (_ BitVec 32))

(declare-fun o51 () (_ BitVec 32))

(declare-fun o52 () Bool)

(declare-fun o53 () (_ BitVec 32))

(declare-fun o54 () (_ BitVec 32))

(declare-fun o55 () (_ BitVec 32))

(declare-fun o56 () (_ BitVec 32))

(declare-fun o57 () Bool)

(declare-fun o58 () Bool)

(declare-fun o59 () Bool)

(declare-fun o60 () (_ BitVec 64))

(declare-fun o61 () (_ BitVec 64))

(declare-fun o62 () (_ BitVec 64))

(declare-fun o63 () (_ BitVec 64))

(declare-fun o64 () (_ BitVec 32))

(declare-fun o65 () (_ BitVec 32))

(declare-fun o66 () (_ BitVec 64))

(declare-fun o67 () (_ BitVec 32))

(declare-fun o68 () (_ BitVec 32))

(declare-fun o69 () (_ BitVec 32))

(declare-fun o70 () (_ BitVec 32))

(declare-fun o71 () Bool)

(declare-fun o72 () (_ BitVec 32))

(declare-fun o73 () (_ BitVec 32))

(declare-fun o74 () (_ BitVec 32))

(declare-fun o75 () Bool)

(declare-fun temp___522 () (_ BitVec 64))

(declare-fun temp___521 () (_ BitVec 64))

(declare-fun temp___520 () Bool)

(declare-fun temp___519 () Bool)

(declare-fun temp___518 () (_ BitVec 64))

(declare-fun temp___516 () Bool)

(declare-fun temp___517 () (_ BitVec 64))

(declare-fun temp___515 () (_ BitVec 64))

(declare-fun temp___514 () (_ BitVec 64))

(declare-fun temp___513 () Bool)

(declare-fun temp___523 () (_ BitVec 64))

(declare-fun o76 () (_ BitVec 64))

(declare-fun o77 () (_ BitVec 32))

(declare-fun o78 () (_ BitVec 32))

(declare-fun o79 () (_ BitVec 32))

(declare-fun o80 () (_ BitVec 32))

(declare-fun o81 () (_ BitVec 32))

(declare-fun o82 () Bool)

(declare-fun o83 () (_ BitVec 32))

(declare-fun o84 () (_ BitVec 32))

(declare-fun o85 () (_ BitVec 32))

(declare-fun o86 () Bool)

(declare-fun o87 () (_ BitVec 32))

(declare-fun o88 () (_ BitVec 32))

(declare-fun o89 () Bool)

(declare-fun o90 () (_ BitVec 32))

(declare-fun o91 () (_ BitVec 32))

(declare-fun o92 () (_ BitVec 32))

(declare-fun o93 () (_ BitVec 32))

(declare-fun o94 () Bool)

(declare-fun o95 () Bool)

(declare-fun o96 () Bool)

(declare-fun o97 () (_ BitVec 64))

(declare-fun o98 () (_ BitVec 64))

(declare-fun o99 () (_ BitVec 64))

(declare-fun o100 () (_ BitVec 64))

(declare-fun o101 () (_ BitVec 32))

(declare-fun o102 () (_ BitVec 32))

(declare-fun o103 () (_ BitVec 64))

(declare-fun o104 () (_ BitVec 32))

(declare-fun o105 () (_ BitVec 32))

(declare-fun o106 () (_ BitVec 32))

(declare-fun o107 () (_ BitVec 32))

(declare-fun o108 () Bool)

(declare-fun o109 () (_ BitVec 32))

(declare-fun o110 () (_ BitVec 32))

(declare-fun o111 () (_ BitVec 32))

(declare-fun o112 () Bool)

(declare-fun temp___533 () (_ BitVec 64))

(declare-fun temp___532 () (_ BitVec 64))

(declare-fun temp___531 () Bool)

(declare-fun temp___530 () Bool)

(declare-fun temp___529 () (_ BitVec 64))

(declare-fun temp___527 () Bool)

(declare-fun temp___528 () (_ BitVec 64))

(declare-fun temp___526 () (_ BitVec 64))

(declare-fun temp___525 () (_ BitVec 64))

(declare-fun temp___534 () (_ BitVec 64))

(declare-fun temp___524 () Bool)

(declare-fun o113 () (_ BitVec 64))

(declare-fun o114 () (_ BitVec 32))

(declare-fun o115 () (_ BitVec 32))

(declare-fun o116 () (_ BitVec 32))

(declare-fun o117 () (_ BitVec 32))

(declare-fun o118 () (_ BitVec 32))

(declare-fun o119 () Bool)

(declare-fun o120 () (_ BitVec 32))

(declare-fun o121 () (_ BitVec 32))

(declare-fun o122 () (_ BitVec 32))

(declare-fun o123 () Bool)

(declare-fun o124 () (_ BitVec 32))

(declare-fun o125 () (_ BitVec 32))

(declare-fun o126 () Bool)

(declare-fun o127 () (_ BitVec 32))

(declare-fun o128 () (_ BitVec 32))

(declare-fun o129 () (_ BitVec 32))

(declare-fun o130 () (_ BitVec 32))

(declare-fun o131 () Bool)

(declare-fun o132 () Bool)

(declare-fun o133 () Bool)

(declare-fun o134 () (_ BitVec 64))

(declare-fun o135 () (_ BitVec 64))

(declare-fun o136 () (_ BitVec 64))

(declare-fun o137 () (_ BitVec 32))

(declare-fun o138 () (_ BitVec 32))

(declare-fun o139 () (_ BitVec 64))

(declare-fun o140 () (_ BitVec 32))

(declare-fun o141 () (_ BitVec 32))

(declare-fun o142 () (_ BitVec 32))

(declare-fun o143 () (_ BitVec 32))

(declare-fun o144 () Bool)

(declare-fun o145 () (_ BitVec 32))

(declare-fun o146 () (_ BitVec 32))

(declare-fun o147 () (_ BitVec 32))

(declare-fun o148 () Bool)

(declare-fun temp___544 () (_ BitVec 64))

(declare-fun temp___543 () (_ BitVec 64))

(declare-fun temp___542 () Bool)

(declare-fun temp___541 () Bool)

(declare-fun temp___540 () (_ BitVec 64))

(declare-fun temp___545 () (_ BitVec 64))

(declare-fun temp___538 () Bool)

(declare-fun temp___539 () (_ BitVec 64))

(declare-fun temp___537 () (_ BitVec 64))

(declare-fun temp___536 () (_ BitVec 64))

(declare-fun temp___535 () Bool)

(declare-fun o149 () (_ BitVec 64))

(declare-fun o150 () (_ BitVec 32))

(declare-fun o151 () (_ BitVec 32))

(declare-fun o152 () (_ BitVec 32))

(declare-fun o153 () (_ BitVec 32))

(declare-fun o154 () (_ BitVec 32))

(declare-fun o155 () Bool)

(declare-fun o156 () (_ BitVec 32))

(declare-fun o157 () (_ BitVec 32))

(declare-fun o158 () (_ BitVec 32))

(declare-fun o159 () Bool)

(declare-fun o160 () (_ BitVec 32))

(declare-fun o161 () (_ BitVec 32))

(declare-fun o162 () Bool)

(declare-fun o163 () (_ BitVec 32))

(declare-fun o164 () (_ BitVec 32))

(declare-fun o165 () (_ BitVec 32))

(declare-fun o166 () (_ BitVec 32))

(declare-fun o167 () Bool)

(declare-fun o168 () Bool)

(declare-fun o169 () Bool)

(declare-fun o170 () (_ BitVec 64))

(declare-fun o171 () (_ BitVec 32))

(declare-fun o172 () (_ BitVec 32))

(declare-fun o173 () (_ BitVec 64))

(declare-fun temp___644 () (_ BitVec 64))

(declare-fun temp___643 () (_ BitVec 64))

(declare-fun temp___645 () (_ BitVec 64))

(declare-fun temp___642 () (_ BitVec 64))

(declare-fun temp___640 () (_ BitVec 64))

(declare-fun temp___641 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___638 () Bool)

(declare-fun temp___639 () (_ BitVec 64))

(declare-fun temp___636 () (_ BitVec 64))

(declare-fun temp___637 () (_ BitVec 64))

(declare-fun temp___634 () Bool)

(declare-fun temp___635 () (_ BitVec 64))

(declare-fun temp___633 () (_ BitVec 64))

(declare-fun temp___632 () (_ BitVec 64))

(declare-fun temp___631 () (_ BitVec 64))

(declare-fun temp___629 () Bool)

(declare-fun temp___630 () (_ BitVec 64))

(declare-fun temp___628 () (_ BitVec 64))

(declare-fun temp___625 () (_ BitVec 64))

(declare-fun temp___626 () (_ BitVec 64))

(declare-fun temp___627 () (_ BitVec 64))

(declare-fun temp___624 () Bool)

(declare-fun temp___623 () (_ BitVec 64))

(declare-fun temp___646 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___622 () (_ BitVec 64))

(declare-fun o174 () (_ BitVec 64))

(declare-fun temp___619 () (_ BitVec 64))

(declare-fun temp___621 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___620 () (_ BitVec 64))

(declare-fun temp___618 () (_ BitVec 64))

(declare-fun temp___617 () (_ BitVec 64))

(declare-fun temp___615 () (_ BitVec 64))

(declare-fun temp___616 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___613 () Bool)

(declare-fun temp___614 () (_ BitVec 64))

(declare-fun temp___611 () (_ BitVec 64))

(declare-fun temp___612 () (_ BitVec 64))

(declare-fun temp___609 () Bool)

(declare-fun temp___610 () (_ BitVec 64))

(declare-fun temp___608 () (_ BitVec 64))

(declare-fun temp___607 () (_ BitVec 64))

(declare-fun temp___605 () Bool)

(declare-fun temp___606 () (_ BitVec 64))

(declare-fun temp___604 () (_ BitVec 64))

(declare-fun temp___601 () (_ BitVec 64))

(declare-fun temp___602 () (_ BitVec 64))

(declare-fun temp___603 () (_ BitVec 64))

(declare-fun temp___600 () Bool)

(declare-fun temp___599 () (_ BitVec 64))

(declare-fun temp___598 () (_ BitVec 64))

(declare-fun o175 () (_ BitVec 64))

(declare-fun temp___595 () (_ BitVec 64))

(declare-fun temp___594 () (_ BitVec 64))

(declare-fun temp___596 () (_ BitVec 64))

(declare-fun temp___593 () (_ BitVec 64))

(declare-fun temp___591 () (_ BitVec 64))

(declare-fun temp___592 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___589 () Bool)

(declare-fun temp___590 () (_ BitVec 64))

(declare-fun temp___597 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___587 () (_ BitVec 64))

(declare-fun temp___588 () (_ BitVec 64))

(declare-fun temp___585 () Bool)

(declare-fun temp___586 () (_ BitVec 64))

(declare-fun temp___584 () (_ BitVec 64))

(declare-fun temp___582 () Bool)

(declare-fun temp___583 () (_ BitVec 64))

(declare-fun temp___581 () (_ BitVec 64))

(declare-fun temp___578 () (_ BitVec 64))

(declare-fun temp___579 () (_ BitVec 64))

(declare-fun temp___580 () (_ BitVec 64))

(declare-fun temp___577 () Bool)

(declare-fun temp___576 () (_ BitVec 64))

(declare-fun o176 () (_ BitVec 64))

(declare-fun temp___573 () (_ BitVec 64))

(declare-fun temp___572 () (_ BitVec 64))

(declare-fun temp___571 () (_ BitVec 64))

(declare-fun temp___569 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___570 () (_ BitVec 64))

(declare-fun temp___567 () Bool)

(declare-fun temp___568 () (_ BitVec 64))

(declare-fun temp___565 () Bool)

(declare-fun temp___566 () (_ BitVec 64))

(declare-fun temp___574 () (_ BitVec 64))

(declare-fun temp___564 () (_ BitVec 64))

(declare-fun temp___562 () Bool)

(declare-fun temp___563 () (_ BitVec 64))

(declare-fun temp___561 () (_ BitVec 64))

(declare-fun temp___559 () (_ BitVec 64))

(declare-fun temp___560 () (_ BitVec 64))

(declare-fun temp___558 () Bool)

(declare-fun temp___557 () (_ BitVec 64))

(declare-fun temp___575 () (Array (_ BitVec 64) unsigned8))

(declare-fun o177 () (_ BitVec 64))

(declare-fun o178 () (_ BitVec 64))

(declare-fun o179 () (_ BitVec 64))

(declare-fun o180 () (_ BitVec 64))

(declare-fun o181 () (_ BitVec 32))

(declare-fun o182 () (_ BitVec 32))

(declare-fun o183 () Bool)

(declare-fun o184 () (_ BitVec 32))

(declare-fun o185 () Bool)

(declare-fun temp___555 () (_ BitVec 64))

(declare-fun temp___556 () (_ BitVec 64))

(declare-fun temp___554 () (_ BitVec 64))

(declare-fun temp___553 () Bool)

(declare-fun temp___552 () Bool)

(declare-fun temp___551 () (_ BitVec 64))

(declare-fun temp___549 () Bool)

(declare-fun temp___550 () (_ BitVec 64))

(declare-fun temp___548 () (_ BitVec 64))

(declare-fun temp___547 () (_ BitVec 64))

(declare-fun temp___546 () Bool)

(declare-fun o186 () (_ BitVec 64))

(declare-fun o187 () (_ BitVec 32))

(declare-fun o188 () (_ BitVec 32))

(declare-fun o189 () (_ BitVec 32))

(declare-fun o190 () (_ BitVec 32))

(declare-fun o191 () (_ BitVec 32))

(declare-fun o192 () Bool)

(declare-fun o193 () (_ BitVec 32))

(declare-fun o194 () (_ BitVec 32))

(declare-fun o195 () (_ BitVec 32))

(declare-fun o196 () Bool)

(declare-fun o197 () (_ BitVec 32))

(declare-fun o198 () (_ BitVec 32))

(declare-fun o199 () Bool)

(declare-fun o200 () (_ BitVec 32))

(declare-fun o201 () (_ BitVec 32))

(declare-fun o202 () (_ BitVec 32))

(declare-fun o203 () (_ BitVec 32))

(declare-fun o204 () Bool)

(declare-fun o205 () Bool)

(declare-fun o206 () Bool)

(declare-fun o207 () (_ BitVec 64))

(declare-fun o208 () (_ BitVec 64))

(declare-fun o209 () (_ BitVec 64))

(declare-fun o210 () (_ BitVec 64))

(declare-fun o211 () (_ BitVec 64))

(declare-fun o212 () (_ BitVec 64))

(declare-fun o213 () (_ BitVec 64))

(declare-fun o214 () (_ BitVec 64))

(declare-fun o215 () (_ BitVec 64))

(declare-fun o216 () (_ BitVec 64))

(declare-fun o217 () (_ BitVec 64))

(declare-fun o218 () (_ BitVec 64))

(declare-fun result () t__ref3)

(declare-fun savestackptr1 () (_ BitVec 64))

(declare-fun result1 () t__ref)

(declare-fun ra01 () (_ BitVec 8))

(declare-fun result2 () t__ref)

(declare-fun ra11 () (_ BitVec 8))

(declare-fun result3 () t__ref)

(declare-fun ra21 () (_ BitVec 8))

(declare-fun result4 () t__ref)

(declare-fun ra31 () (_ BitVec 8))

(declare-fun result5 () t__ref)

(declare-fun ra41 () (_ BitVec 8))

(declare-fun result6 () t__ref)

(declare-fun ra51 () (_ BitVec 8))

(declare-fun result7 () t__ref)

(declare-fun ra61 () (_ BitVec 8))

(declare-fun result8 () t__ref)

(declare-fun ra71 () (_ BitVec 8))

(declare-fun result9 () t__ref3)

(declare-fun saverbx1 () (_ BitVec 64))

(declare-fun result10 () t__ref3)

(declare-fun saverbp1 () (_ BitVec 64))

(declare-fun result11 () t__ref3)

(declare-fun saver121 () (_ BitVec 64))

(declare-fun result12 () t__ref3)

(declare-fun saver131 () (_ BitVec 64))

(declare-fun result13 () t__ref3)

(declare-fun saver141 () (_ BitVec 64))

(declare-fun result14 () t__ref3)

(declare-fun saver151 () (_ BitVec 64))

(declare-fun memory1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result15 () t__ref3)

(declare-fun rsp1 () (_ BitVec 64))

(declare-fun memory2 () (Array (_ BitVec 64) unsigned8))

(declare-fun result16 () t__ref3)

(declare-fun rsp2 () (_ BitVec 64))

(declare-fun rdi1 () (_ BitVec 64))

(declare-fun memory3 () (Array (_ BitVec 64) unsigned8))

(declare-fun result17 () t__ref3)

(declare-fun rsp3 () (_ BitVec 64))

(declare-fun memory4 () (Array (_ BitVec 64) unsigned8))

(declare-fun result18 () t__ref3)

(declare-fun rsp4 () (_ BitVec 64))

(declare-fun memory5 () (Array (_ BitVec 64) unsigned8))

(declare-fun result19 () t__ref3)

(declare-fun rsp5 () (_ BitVec 64))

(declare-fun memory6 () (Array (_ BitVec 64) unsigned8))

(declare-fun result20 () t__ref3)

(declare-fun rsp6 () (_ BitVec 64))

(declare-fun rbx1 () (_ BitVec 64))

(declare-fun result21 () t__ref3)

(declare-fun rsp7 () (_ BitVec 64))

(declare-fun result22 () t__ref3)

(declare-fun rsp8 () (_ BitVec 64))

(declare-fun rsp9 () (_ BitVec 64))

(declare-fun result23 () t__ref3)

(declare-fun rsi1 () (_ BitVec 64))

(declare-fun result24 () t__ref3)

(declare-fun rdi2 () (_ BitVec 64))

(declare-fun result25 () t__ref3)

(declare-fun rbp1 () (_ BitVec 64))

(declare-fun result26 () t__ref3)

(declare-fun xmm31 () (_ BitVec 64))

(declare-fun result27 () t__ref3)

(declare-fun xmm21 () (_ BitVec 64))

(declare-fun result28 () t__ref3)

(declare-fun xmm11 () (_ BitVec 64))

(declare-fun result29 () t__ref3)

(declare-fun xmm01 () (_ BitVec 64))

(declare-fun result30 () t__ref3)

(declare-fun rsp10 () (_ BitVec 64))

(declare-fun rsp11 () (_ BitVec 64))

(declare-fun rdi3 () (_ BitVec 64))

(declare-fun rax () (_ BitVec 64))

(declare-fun result31 () t__ref3)

(declare-fun rsp12 () (_ BitVec 64))

(declare-fun rsp13 () (_ BitVec 64))

(declare-fun rdi4 () (_ BitVec 64))

(declare-fun result32 () bool__ref)

(declare-fun zeroflag1 () Bool)

(declare-fun result33 () bool__ref)

(declare-fun signflag1 () Bool)

(declare-fun result34 () bool__ref)

(declare-fun carryflag1 () Bool)

(declare-fun result35 () bool__ref)

(declare-fun overflowflag1 () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun carryflag2 () Bool)

(declare-fun signflag2 () Bool)

(declare-fun overflowflag2 () Bool)

(declare-fun xmm02 () (_ BitVec 64))

(declare-fun rbx2 () (_ BitVec 64))

(declare-fun rsp14 () (_ BitVec 64))

(declare-fun rbp2 () (_ BitVec 64))

(declare-fun result36 () t__ref3)

(declare-fun xmm03 () (_ BitVec 64))

(declare-fun rdi5 () (_ BitVec 64))

(declare-fun rax1 () (_ BitVec 64))

(declare-fun rbx3 () (_ BitVec 64))

(declare-fun result37 () t__ref3)

(declare-fun rbp3 () (_ BitVec 64))

(declare-fun result38 () t__ref3)

(declare-fun rsp15 () (_ BitVec 64))

(declare-fun rsp16 () (_ BitVec 64))

(declare-fun result39 () bool__ref)

(declare-fun zeroflag3 () Bool)

(declare-fun result40 () bool__ref)

(declare-fun signflag3 () Bool)

(declare-fun result41 () bool__ref)

(declare-fun carryflag3 () Bool)

(declare-fun result42 () Bool)

(declare-fun result43 () Bool)

(declare-fun result44 () bool__ref)

(declare-fun overflowflag3 () Bool)

(declare-fun zeroflag4 () bool__ref)

(declare-fun carryflag4 () bool__ref)

(declare-fun signflag4 () bool__ref)

(declare-fun overflowflag4 () bool__ref)

(declare-fun xmm04 () t__ref3)

(declare-fun rax2 () t__ref3)

(declare-fun rbx4 () t__ref3)

(declare-fun rsp17 () t__ref3)

(declare-fun rbp4 () t__ref3)

(declare-fun rdi6 () t__ref3)

(declare-fun zeroflag5 () Bool)

(declare-fun carryflag5 () Bool)

(declare-fun signflag5 () Bool)

(declare-fun overflowflag5 () Bool)

(declare-fun xmm05 () (_ BitVec 64))

(declare-fun rax3 () (_ BitVec 64))

(declare-fun rbx5 () (_ BitVec 64))

(declare-fun rsp18 () (_ BitVec 64))

(declare-fun rbp5 () (_ BitVec 64))

(declare-fun rdi7 () (_ BitVec 64))

(declare-fun zeroflag6 () bool__ref)

(declare-fun carryflag6 () bool__ref)

(declare-fun signflag6 () bool__ref)

(declare-fun overflowflag6 () bool__ref)

(declare-fun xmm06 () t__ref3)

(declare-fun rax4 () t__ref3)

(declare-fun rbx6 () t__ref3)

(declare-fun rsp19 () t__ref3)

(declare-fun rbp6 () t__ref3)

(declare-fun rdi8 () t__ref3)

(declare-fun zeroflag7 () Bool)

(declare-fun carryflag7 () Bool)

(declare-fun signflag7 () Bool)

(declare-fun overflowflag7 () Bool)

(declare-fun xmm07 () (_ BitVec 64))

(declare-fun rax5 () (_ BitVec 64))

(declare-fun rbx7 () (_ BitVec 64))

(declare-fun rsp20 () (_ BitVec 64))

(declare-fun rbp7 () (_ BitVec 64))

(declare-fun rdi9 () (_ BitVec 64))

(declare-fun rdi10 () (_ BitVec 64))

(declare-fun rbx8 () (_ BitVec 64))

(declare-fun result45 () t__ref3)

(declare-fun rbp8 () (_ BitVec 64))

(declare-fun result46 () t__ref3)

(declare-fun rsp21 () (_ BitVec 64))

(declare-fun rsp22 () (_ BitVec 64))

(declare-fun result47 () t__ref3)

(declare-fun rsi2 () (_ BitVec 64))

(declare-fun result48 () t__ref3)

(declare-fun rdi11 () (_ BitVec 64))

(declare-fun result49 () t__ref3)

(declare-fun xmm32 () (_ BitVec 64))

(declare-fun result50 () t__ref3)

(declare-fun xmm22 () (_ BitVec 64))

(declare-fun result51 () t__ref3)

(declare-fun xmm12 () (_ BitVec 64))

(declare-fun result52 () t__ref3)

(declare-fun xmm08 () (_ BitVec 64))

(declare-fun result53 () t__ref3)

(declare-fun rsp23 () (_ BitVec 64))

(declare-fun rsp24 () (_ BitVec 64))

(declare-fun rax6 () (_ BitVec 64))

(declare-fun rdi12 () (_ BitVec 64))

(declare-fun result54 () t__ref3)

(declare-fun rsp25 () (_ BitVec 64))

(declare-fun rsp26 () (_ BitVec 64))

(declare-fun rsi3 () (_ BitVec 64))

(declare-fun result55 () bool__ref)

(declare-fun zeroflag8 () Bool)

(declare-fun result56 () bool__ref)

(declare-fun signflag8 () Bool)

(declare-fun result57 () bool__ref)

(declare-fun carryflag8 () Bool)

(declare-fun result58 () bool__ref)

(declare-fun overflowflag8 () Bool)

(declare-fun zeroflag9 () Bool)

(declare-fun carryflag9 () Bool)

(declare-fun signflag9 () Bool)

(declare-fun overflowflag9 () Bool)

(declare-fun xmm09 () (_ BitVec 64))

(declare-fun rbx9 () (_ BitVec 64))

(declare-fun rsp27 () (_ BitVec 64))

(declare-fun rbp9 () (_ BitVec 64))

(declare-fun result59 () t__ref3)

(declare-fun xmm010 () (_ BitVec 64))

(declare-fun rdi13 () (_ BitVec 64))

(declare-fun rax7 () (_ BitVec 64))

(declare-fun rbx10 () (_ BitVec 64))

(declare-fun result60 () t__ref3)

(declare-fun rbp10 () (_ BitVec 64))

(declare-fun result61 () t__ref3)

(declare-fun rsp28 () (_ BitVec 64))

(declare-fun rsp29 () (_ BitVec 64))

(declare-fun result62 () bool__ref)

(declare-fun zeroflag10 () Bool)

(declare-fun result63 () bool__ref)

(declare-fun signflag10 () Bool)

(declare-fun result64 () bool__ref)

(declare-fun carryflag10 () Bool)

(declare-fun result65 () Bool)

(declare-fun result66 () Bool)

(declare-fun result67 () bool__ref)

(declare-fun overflowflag10 () Bool)

(declare-fun zeroflag11 () bool__ref)

(declare-fun carryflag11 () bool__ref)

(declare-fun signflag11 () bool__ref)

(declare-fun overflowflag11 () bool__ref)

(declare-fun xmm011 () t__ref3)

(declare-fun rax8 () t__ref3)

(declare-fun rbx11 () t__ref3)

(declare-fun rsp30 () t__ref3)

(declare-fun rbp11 () t__ref3)

(declare-fun rdi14 () t__ref3)

(declare-fun zeroflag12 () Bool)

(declare-fun carryflag12 () Bool)

(declare-fun signflag12 () Bool)

(declare-fun overflowflag12 () Bool)

(declare-fun xmm012 () (_ BitVec 64))

(declare-fun rax9 () (_ BitVec 64))

(declare-fun rbx12 () (_ BitVec 64))

(declare-fun rsp31 () (_ BitVec 64))

(declare-fun rbp12 () (_ BitVec 64))

(declare-fun rdi15 () (_ BitVec 64))

(declare-fun zeroflag13 () bool__ref)

(declare-fun carryflag13 () bool__ref)

(declare-fun signflag13 () bool__ref)

(declare-fun overflowflag13 () bool__ref)

(declare-fun xmm013 () t__ref3)

(declare-fun rax10 () t__ref3)

(declare-fun rbx13 () t__ref3)

(declare-fun rsp32 () t__ref3)

(declare-fun rbp13 () t__ref3)

(declare-fun rdi16 () t__ref3)

(declare-fun zeroflag14 () Bool)

(declare-fun carryflag14 () Bool)

(declare-fun signflag14 () Bool)

(declare-fun overflowflag14 () Bool)

(declare-fun xmm014 () (_ BitVec 64))

(declare-fun rax11 () (_ BitVec 64))

(declare-fun rbx14 () (_ BitVec 64))

(declare-fun rsp33 () (_ BitVec 64))

(declare-fun rbp14 () (_ BitVec 64))

(declare-fun rdi17 () (_ BitVec 64))

(declare-fun rdi18 () (_ BitVec 64))

(declare-fun rbx15 () (_ BitVec 64))

(declare-fun result68 () t__ref3)

(declare-fun rbp15 () (_ BitVec 64))

(declare-fun result69 () t__ref3)

(declare-fun rsp34 () (_ BitVec 64))

(declare-fun rsp35 () (_ BitVec 64))

(declare-fun result70 () t__ref3)

(declare-fun rsi4 () (_ BitVec 64))

(declare-fun result71 () t__ref3)

(declare-fun rdi19 () (_ BitVec 64))

(declare-fun result72 () t__ref3)

(declare-fun xmm33 () (_ BitVec 64))

(declare-fun result73 () t__ref3)

(declare-fun xmm23 () (_ BitVec 64))

(declare-fun result74 () t__ref3)

(declare-fun xmm13 () (_ BitVec 64))

(declare-fun result75 () t__ref3)

(declare-fun xmm015 () (_ BitVec 64))

(declare-fun result76 () t__ref3)

(declare-fun rsp36 () (_ BitVec 64))

(declare-fun rsp37 () (_ BitVec 64))

(declare-fun rax12 () (_ BitVec 64))

(declare-fun rdi20 () (_ BitVec 64))

(declare-fun result77 () t__ref3)

(declare-fun rsp38 () (_ BitVec 64))

(declare-fun rsp39 () (_ BitVec 64))

(declare-fun rcx () (_ BitVec 64))

(declare-fun result78 () bool__ref)

(declare-fun zeroflag15 () Bool)

(declare-fun result79 () bool__ref)

(declare-fun signflag15 () Bool)

(declare-fun result80 () bool__ref)

(declare-fun carryflag15 () Bool)

(declare-fun result81 () bool__ref)

(declare-fun overflowflag15 () Bool)

(declare-fun zeroflag16 () Bool)

(declare-fun carryflag16 () Bool)

(declare-fun signflag16 () Bool)

(declare-fun overflowflag16 () Bool)

(declare-fun xmm016 () (_ BitVec 64))

(declare-fun rbx16 () (_ BitVec 64))

(declare-fun rsp40 () (_ BitVec 64))

(declare-fun rbp16 () (_ BitVec 64))

(declare-fun result82 () t__ref3)

(declare-fun xmm017 () (_ BitVec 64))

(declare-fun rdi21 () (_ BitVec 64))

(declare-fun rax13 () (_ BitVec 64))

(declare-fun rbx17 () (_ BitVec 64))

(declare-fun result83 () t__ref3)

(declare-fun rbp17 () (_ BitVec 64))

(declare-fun result84 () t__ref3)

(declare-fun rsp41 () (_ BitVec 64))

(declare-fun rsp42 () (_ BitVec 64))

(declare-fun result85 () bool__ref)

(declare-fun zeroflag17 () Bool)

(declare-fun result86 () bool__ref)

(declare-fun signflag17 () Bool)

(declare-fun result87 () bool__ref)

(declare-fun carryflag17 () Bool)

(declare-fun result88 () Bool)

(declare-fun result89 () Bool)

(declare-fun result90 () bool__ref)

(declare-fun overflowflag17 () Bool)

(declare-fun zeroflag18 () bool__ref)

(declare-fun carryflag18 () bool__ref)

(declare-fun signflag18 () bool__ref)

(declare-fun overflowflag18 () bool__ref)

(declare-fun xmm018 () t__ref3)

(declare-fun rax14 () t__ref3)

(declare-fun rbx18 () t__ref3)

(declare-fun rsp43 () t__ref3)

(declare-fun rbp18 () t__ref3)

(declare-fun rdi22 () t__ref3)

(declare-fun zeroflag19 () Bool)

(declare-fun carryflag19 () Bool)

(declare-fun signflag19 () Bool)

(declare-fun overflowflag19 () Bool)

(declare-fun xmm019 () (_ BitVec 64))

(declare-fun rax15 () (_ BitVec 64))

(declare-fun rbx19 () (_ BitVec 64))

(declare-fun rsp44 () (_ BitVec 64))

(declare-fun rbp19 () (_ BitVec 64))

(declare-fun rdi23 () (_ BitVec 64))

(declare-fun zeroflag20 () bool__ref)

(declare-fun carryflag20 () bool__ref)

(declare-fun signflag20 () bool__ref)

(declare-fun overflowflag20 () bool__ref)

(declare-fun xmm020 () t__ref3)

(declare-fun rax16 () t__ref3)

(declare-fun rbx20 () t__ref3)

(declare-fun rsp45 () t__ref3)

(declare-fun rbp20 () t__ref3)

(declare-fun rdi24 () t__ref3)

(declare-fun zeroflag21 () Bool)

(declare-fun carryflag21 () Bool)

(declare-fun signflag21 () Bool)

(declare-fun overflowflag21 () Bool)

(declare-fun xmm021 () (_ BitVec 64))

(declare-fun rax17 () (_ BitVec 64))

(declare-fun rbx21 () (_ BitVec 64))

(declare-fun rsp46 () (_ BitVec 64))

(declare-fun rbp21 () (_ BitVec 64))

(declare-fun rdi25 () (_ BitVec 64))

(declare-fun rdi26 () (_ BitVec 64))

(declare-fun rbx22 () (_ BitVec 64))

(declare-fun result91 () t__ref3)

(declare-fun rbp22 () (_ BitVec 64))

(declare-fun result92 () t__ref3)

(declare-fun rsp47 () (_ BitVec 64))

(declare-fun rsp48 () (_ BitVec 64))

(declare-fun result93 () t__ref3)

(declare-fun xmm24 () (_ BitVec 64))

(declare-fun result94 () t__ref3)

(declare-fun rsi5 () (_ BitVec 64))

(declare-fun result95 () t__ref3)

(declare-fun rdi27 () (_ BitVec 64))

(declare-fun result96 () t__ref3)

(declare-fun xmm34 () (_ BitVec 64))

(declare-fun result97 () t__ref3)

(declare-fun xmm14 () (_ BitVec 64))

(declare-fun result98 () t__ref3)

(declare-fun xmm022 () (_ BitVec 64))

(declare-fun result99 () t__ref3)

(declare-fun rsp49 () (_ BitVec 64))

(declare-fun rsp50 () (_ BitVec 64))

(declare-fun rax18 () (_ BitVec 64))

(declare-fun rdi28 () (_ BitVec 64))

(declare-fun result100 () t__ref3)

(declare-fun rsp51 () (_ BitVec 64))

(declare-fun rsp52 () (_ BitVec 64))

(declare-fun rdx () (_ BitVec 64))

(declare-fun result101 () bool__ref)

(declare-fun zeroflag22 () Bool)

(declare-fun result102 () bool__ref)

(declare-fun signflag22 () Bool)

(declare-fun result103 () bool__ref)

(declare-fun carryflag22 () Bool)

(declare-fun result104 () bool__ref)

(declare-fun overflowflag22 () Bool)

(declare-fun zeroflag23 () Bool)

(declare-fun carryflag23 () Bool)

(declare-fun signflag23 () Bool)

(declare-fun overflowflag23 () Bool)

(declare-fun xmm023 () (_ BitVec 64))

(declare-fun rbx23 () (_ BitVec 64))

(declare-fun rsp53 () (_ BitVec 64))

(declare-fun rbp23 () (_ BitVec 64))

(declare-fun result105 () t__ref3)

(declare-fun xmm024 () (_ BitVec 64))

(declare-fun rdi29 () (_ BitVec 64))

(declare-fun rax19 () (_ BitVec 64))

(declare-fun rbx24 () (_ BitVec 64))

(declare-fun result106 () t__ref3)

(declare-fun rbp24 () (_ BitVec 64))

(declare-fun result107 () t__ref3)

(declare-fun rsp54 () (_ BitVec 64))

(declare-fun rsp55 () (_ BitVec 64))

(declare-fun result108 () bool__ref)

(declare-fun zeroflag24 () Bool)

(declare-fun result109 () bool__ref)

(declare-fun signflag24 () Bool)

(declare-fun result110 () bool__ref)

(declare-fun carryflag24 () Bool)

(declare-fun result111 () Bool)

(declare-fun result112 () Bool)

(declare-fun result113 () bool__ref)

(declare-fun overflowflag24 () Bool)

(declare-fun zeroflag25 () bool__ref)

(declare-fun carryflag25 () bool__ref)

(declare-fun signflag25 () bool__ref)

(declare-fun overflowflag25 () bool__ref)

(declare-fun xmm025 () t__ref3)

(declare-fun rax20 () t__ref3)

(declare-fun rbx25 () t__ref3)

(declare-fun rsp56 () t__ref3)

(declare-fun rbp25 () t__ref3)

(declare-fun rdi30 () t__ref3)

(declare-fun zeroflag26 () Bool)

(declare-fun carryflag26 () Bool)

(declare-fun signflag26 () Bool)

(declare-fun overflowflag26 () Bool)

(declare-fun xmm026 () (_ BitVec 64))

(declare-fun rax21 () (_ BitVec 64))

(declare-fun rbx26 () (_ BitVec 64))

(declare-fun rsp57 () (_ BitVec 64))

(declare-fun rbp26 () (_ BitVec 64))

(declare-fun rdi31 () (_ BitVec 64))

(declare-fun zeroflag27 () bool__ref)

(declare-fun carryflag27 () bool__ref)

(declare-fun signflag27 () bool__ref)

(declare-fun overflowflag27 () bool__ref)

(declare-fun xmm027 () t__ref3)

(declare-fun rax22 () t__ref3)

(declare-fun rbx27 () t__ref3)

(declare-fun rsp58 () t__ref3)

(declare-fun rbp27 () t__ref3)

(declare-fun rdi32 () t__ref3)

(declare-fun zeroflag28 () Bool)

(declare-fun carryflag28 () Bool)

(declare-fun signflag28 () Bool)

(declare-fun overflowflag28 () Bool)

(declare-fun xmm028 () (_ BitVec 64))

(declare-fun rax23 () (_ BitVec 64))

(declare-fun rbx28 () (_ BitVec 64))

(declare-fun rsp59 () (_ BitVec 64))

(declare-fun rbp28 () (_ BitVec 64))

(declare-fun rdi33 () (_ BitVec 64))

(declare-fun rdi34 () (_ BitVec 64))

(declare-fun result114 () t__ref3)

(declare-fun r151 () (_ BitVec 64))

(declare-fun result115 () t__ref3)

(declare-fun rsp60 () (_ BitVec 64))

(declare-fun rsp61 () (_ BitVec 64))

(declare-fun result116 () t__ref3)

(declare-fun xmm61 () (_ BitVec 64))

(declare-fun memory7 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag29 () Bool)

(declare-fun carryflag29 () Bool)

(declare-fun signflag29 () Bool)

(declare-fun overflowflag29 () Bool)

(declare-fun xmm029 () (_ BitVec 64))

(declare-fun xmm15 () (_ BitVec 64))

(declare-fun xmm25 () (_ BitVec 64))

(declare-fun xmm35 () (_ BitVec 64))

(declare-fun xmm41 () (_ BitVec 64))

(declare-fun xmm51 () (_ BitVec 64))

(declare-fun xmm62 () (_ BitVec 64))

(declare-fun xmm71 () (_ BitVec 64))

(declare-fun rax24 () (_ BitVec 64))

(declare-fun rbx29 () (_ BitVec 64))

(declare-fun rsp62 () (_ BitVec 64))

(declare-fun rbp29 () (_ BitVec 64))

(declare-fun rsi6 () (_ BitVec 64))

(declare-fun rdi35 () (_ BitVec 64))

(declare-fun r121 () (_ BitVec 64))

(declare-fun r131 () (_ BitVec 64))

(declare-fun r141 () (_ BitVec 64))

(declare-fun r152 () (_ BitVec 64))

(declare-fun memory8 () (Array (_ BitVec 64) unsigned8))

(declare-fun result117 () t__ref3)

(declare-fun xmm72 () (_ BitVec 64))

(declare-fun result118 () t__ref3)

(declare-fun r142 () (_ BitVec 64))

(declare-fun memory9 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag30 () Bool)

(declare-fun carryflag30 () Bool)

(declare-fun signflag30 () Bool)

(declare-fun overflowflag30 () Bool)

(declare-fun xmm030 () (_ BitVec 64))

(declare-fun xmm16 () (_ BitVec 64))

(declare-fun xmm26 () (_ BitVec 64))

(declare-fun xmm36 () (_ BitVec 64))

(declare-fun xmm42 () (_ BitVec 64))

(declare-fun xmm52 () (_ BitVec 64))

(declare-fun xmm63 () (_ BitVec 64))

(declare-fun xmm73 () (_ BitVec 64))

(declare-fun rax25 () (_ BitVec 64))

(declare-fun rbx30 () (_ BitVec 64))

(declare-fun rsp63 () (_ BitVec 64))

(declare-fun rbp30 () (_ BitVec 64))

(declare-fun rsi7 () (_ BitVec 64))

(declare-fun rdi36 () (_ BitVec 64))

(declare-fun r122 () (_ BitVec 64))

(declare-fun r132 () (_ BitVec 64))

(declare-fun r143 () (_ BitVec 64))

(declare-fun memory10 () (Array (_ BitVec 64) unsigned8))

(declare-fun result119 () t__ref3)

(declare-fun xmm74 () (_ BitVec 64))

(declare-fun result120 () t__ref3)

(declare-fun r133 () (_ BitVec 64))

(declare-fun memory11 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag31 () Bool)

(declare-fun carryflag31 () Bool)

(declare-fun signflag31 () Bool)

(declare-fun overflowflag31 () Bool)

(declare-fun xmm031 () (_ BitVec 64))

(declare-fun xmm17 () (_ BitVec 64))

(declare-fun xmm27 () (_ BitVec 64))

(declare-fun xmm37 () (_ BitVec 64))

(declare-fun xmm43 () (_ BitVec 64))

(declare-fun xmm53 () (_ BitVec 64))

(declare-fun xmm75 () (_ BitVec 64))

(declare-fun rax26 () (_ BitVec 64))

(declare-fun rbx31 () (_ BitVec 64))

(declare-fun rsp64 () (_ BitVec 64))

(declare-fun rbp31 () (_ BitVec 64))

(declare-fun rsi8 () (_ BitVec 64))

(declare-fun rdi37 () (_ BitVec 64))

(declare-fun r123 () (_ BitVec 64))

(declare-fun r134 () (_ BitVec 64))

(declare-fun memory12 () (Array (_ BitVec 64) unsigned8))

(declare-fun result121 () t__ref3)

(declare-fun xmm76 () (_ BitVec 64))

(declare-fun result122 () t__ref3)

(declare-fun r124 () (_ BitVec 64))

(declare-fun memory13 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag32 () Bool)

(declare-fun carryflag32 () Bool)

(declare-fun signflag32 () Bool)

(declare-fun overflowflag32 () Bool)

(declare-fun xmm032 () (_ BitVec 64))

(declare-fun xmm18 () (_ BitVec 64))

(declare-fun xmm28 () (_ BitVec 64))

(declare-fun xmm38 () (_ BitVec 64))

(declare-fun xmm44 () (_ BitVec 64))

(declare-fun rsp65 () (_ BitVec 64))

(declare-fun rbp32 () (_ BitVec 64))

(declare-fun rsi9 () (_ BitVec 64))

(declare-fun rdi38 () (_ BitVec 64))

(declare-fun r125 () (_ BitVec 64))

(declare-fun memory14 () (Array (_ BitVec 64) unsigned8))

(declare-fun result123 () t__ref3)

(declare-fun rsi10 () (_ BitVec 64))

(declare-fun result124 () t__ref3)

(declare-fun rdi39 () (_ BitVec 64))

(declare-fun rbx32 () (_ BitVec 64))

(declare-fun result125 () t__ref3)

(declare-fun xmm39 () (_ BitVec 64))

(declare-fun result126 () t__ref3)

(declare-fun rbp33 () (_ BitVec 64))

(declare-fun result127 () t__ref3)

(declare-fun xmm29 () (_ BitVec 64))

(declare-fun result128 () t__ref3)

(declare-fun xmm19 () (_ BitVec 64))

(declare-fun result129 () t__ref3)

(declare-fun xmm033 () (_ BitVec 64))

(declare-fun result130 () t__ref3)

(declare-fun rsp66 () (_ BitVec 64))

(declare-fun rsp67 () (_ BitVec 64))

(declare-fun rax27 () (_ BitVec 64))

(declare-fun rdi40 () (_ BitVec 64))

(declare-fun result131 () t__ref3)

(declare-fun rsp68 () (_ BitVec 64))

(declare-fun rsp69 () (_ BitVec 64))

(declare-fun rax28 () (_ BitVec 64))

(declare-fun result132 () bool__ref)

(declare-fun zeroflag33 () Bool)

(declare-fun result133 () bool__ref)

(declare-fun signflag33 () Bool)

(declare-fun result134 () bool__ref)

(declare-fun carryflag33 () Bool)

(declare-fun result135 () bool__ref)

(declare-fun overflowflag33 () Bool)

(declare-fun zeroflag34 () Bool)

(declare-fun carryflag34 () Bool)

(declare-fun signflag34 () Bool)

(declare-fun overflowflag34 () Bool)

(declare-fun xmm034 () (_ BitVec 64))

(declare-fun rbx33 () (_ BitVec 64))

(declare-fun rsp70 () (_ BitVec 64))

(declare-fun rbp34 () (_ BitVec 64))

(declare-fun result136 () t__ref3)

(declare-fun xmm035 () (_ BitVec 64))

(declare-fun rdi41 () (_ BitVec 64))

(declare-fun rax29 () (_ BitVec 64))

(declare-fun rbx34 () (_ BitVec 64))

(declare-fun result137 () t__ref3)

(declare-fun rbp35 () (_ BitVec 64))

(declare-fun result138 () t__ref3)

(declare-fun rsp71 () (_ BitVec 64))

(declare-fun rsp72 () (_ BitVec 64))

(declare-fun result139 () bool__ref)

(declare-fun zeroflag35 () Bool)

(declare-fun result140 () bool__ref)

(declare-fun signflag35 () Bool)

(declare-fun result141 () bool__ref)

(declare-fun carryflag35 () Bool)

(declare-fun result142 () Bool)

(declare-fun result143 () Bool)

(declare-fun result144 () bool__ref)

(declare-fun overflowflag35 () Bool)

(declare-fun zeroflag36 () bool__ref)

(declare-fun carryflag36 () bool__ref)

(declare-fun signflag36 () bool__ref)

(declare-fun overflowflag36 () bool__ref)

(declare-fun xmm036 () t__ref3)

(declare-fun rax30 () t__ref3)

(declare-fun rbx35 () t__ref3)

(declare-fun rsp73 () t__ref3)

(declare-fun rbp36 () t__ref3)

(declare-fun rdi42 () t__ref3)

(declare-fun zeroflag37 () Bool)

(declare-fun carryflag37 () Bool)

(declare-fun signflag37 () Bool)

(declare-fun overflowflag37 () Bool)

(declare-fun xmm037 () (_ BitVec 64))

(declare-fun rax31 () (_ BitVec 64))

(declare-fun rbx36 () (_ BitVec 64))

(declare-fun rsp74 () (_ BitVec 64))

(declare-fun rbp37 () (_ BitVec 64))

(declare-fun rdi43 () (_ BitVec 64))

(declare-fun zeroflag38 () bool__ref)

(declare-fun carryflag38 () bool__ref)

(declare-fun signflag38 () bool__ref)

(declare-fun overflowflag38 () bool__ref)

(declare-fun xmm038 () t__ref3)

(declare-fun rax32 () t__ref3)

(declare-fun rbx37 () t__ref3)

(declare-fun rsp75 () t__ref3)

(declare-fun rbp38 () t__ref3)

(declare-fun rdi44 () t__ref3)

(declare-fun zeroflag39 () Bool)

(declare-fun carryflag39 () Bool)

(declare-fun signflag39 () Bool)

(declare-fun overflowflag39 () Bool)

(declare-fun xmm039 () (_ BitVec 64))

(declare-fun rax33 () (_ BitVec 64))

(declare-fun rbx38 () (_ BitVec 64))

(declare-fun rsp76 () (_ BitVec 64))

(declare-fun rbp39 () (_ BitVec 64))

(declare-fun rdi45 () (_ BitVec 64))

(declare-fun rdi46 () (_ BitVec 64))

(declare-fun result145 () t__ref3)

(declare-fun rsp77 () (_ BitVec 64))

(declare-fun rsp78 () (_ BitVec 64))

(declare-fun result146 () t__ref3)

(declare-fun xmm45 () (_ BitVec 64))

(declare-fun result147 () t__ref3)

(declare-fun r126 () (_ BitVec 64))

(declare-fun result148 () bool__ref)

(declare-fun zeroflag40 () Bool)

(declare-fun result149 () t__ref3)

(declare-fun xmm46 () (_ BitVec 64))

(declare-fun memory15 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag41 () bool__ref)

(declare-fun carryflag40 () bool__ref)

(declare-fun signflag40 () bool__ref)

(declare-fun overflowflag40 () bool__ref)

(declare-fun xmm040 () t__ref3)

(declare-fun xmm110 () t__ref3)

(declare-fun xmm210 () t__ref3)

(declare-fun xmm310 () t__ref3)

(declare-fun xmm47 () t__ref3)

(declare-fun rax34 () t__ref3)

(declare-fun rbx39 () t__ref3)

(declare-fun rsp79 () t__ref3)

(declare-fun rbp40 () t__ref3)

(declare-fun rsi11 () t__ref3)

(declare-fun rdi47 () t__ref3)

(declare-fun r127 () t__ref3)

(declare-fun memory16 () map__ref)

(declare-fun zeroflag42 () Bool)

(declare-fun carryflag41 () Bool)

(declare-fun signflag41 () Bool)

(declare-fun overflowflag41 () Bool)

(declare-fun xmm041 () (_ BitVec 64))

(declare-fun xmm111 () (_ BitVec 64))

(declare-fun xmm211 () (_ BitVec 64))

(declare-fun xmm311 () (_ BitVec 64))

(declare-fun xmm48 () (_ BitVec 64))

(declare-fun rax35 () (_ BitVec 64))

(declare-fun rbx40 () (_ BitVec 64))

(declare-fun rsp80 () (_ BitVec 64))

(declare-fun rbp41 () (_ BitVec 64))

(declare-fun rsi12 () (_ BitVec 64))

(declare-fun rdi48 () (_ BitVec 64))

(declare-fun r128 () (_ BitVec 64))

(declare-fun memory17 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag43 () bool__ref)

(declare-fun carryflag42 () bool__ref)

(declare-fun signflag42 () bool__ref)

(declare-fun overflowflag42 () bool__ref)

(declare-fun xmm042 () t__ref3)

(declare-fun xmm112 () t__ref3)

(declare-fun xmm212 () t__ref3)

(declare-fun xmm312 () t__ref3)

(declare-fun xmm49 () t__ref3)

(declare-fun rax36 () t__ref3)

(declare-fun rbx41 () t__ref3)

(declare-fun rsp81 () t__ref3)

(declare-fun rbp42 () t__ref3)

(declare-fun rsi13 () t__ref3)

(declare-fun rdi49 () t__ref3)

(declare-fun r129 () t__ref3)

(declare-fun memory18 () map__ref)

(declare-fun zeroflag44 () Bool)

(declare-fun carryflag43 () Bool)

(declare-fun signflag43 () Bool)

(declare-fun overflowflag43 () Bool)

(declare-fun xmm043 () (_ BitVec 64))

(declare-fun xmm113 () (_ BitVec 64))

(declare-fun xmm213 () (_ BitVec 64))

(declare-fun xmm313 () (_ BitVec 64))

(declare-fun xmm410 () (_ BitVec 64))

(declare-fun rax37 () (_ BitVec 64))

(declare-fun rbx42 () (_ BitVec 64))

(declare-fun rsp82 () (_ BitVec 64))

(declare-fun rbp43 () (_ BitVec 64))

(declare-fun rsi14 () (_ BitVec 64))

(declare-fun rdi50 () (_ BitVec 64))

(declare-fun r1210 () (_ BitVec 64))

(declare-fun memory19 () (Array (_ BitVec 64) unsigned8))

(declare-fun result150 () t__ref3)

(declare-fun xmm54 () (_ BitVec 64))

(declare-fun result151 () t__ref3)

(declare-fun r135 () (_ BitVec 64))

(declare-fun result152 () bool__ref)

(declare-fun zeroflag45 () Bool)

(declare-fun result153 () t__ref3)

(declare-fun xmm55 () (_ BitVec 64))

(declare-fun memory20 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag46 () bool__ref)

(declare-fun carryflag44 () bool__ref)

(declare-fun signflag44 () bool__ref)

(declare-fun overflowflag44 () bool__ref)

(declare-fun xmm044 () t__ref3)

(declare-fun xmm114 () t__ref3)

(declare-fun xmm214 () t__ref3)

(declare-fun xmm314 () t__ref3)

(declare-fun xmm411 () t__ref3)

(declare-fun xmm56 () t__ref3)

(declare-fun xmm77 () t__ref3)

(declare-fun rax38 () t__ref3)

(declare-fun rbx43 () t__ref3)

(declare-fun rsp83 () t__ref3)

(declare-fun rbp44 () t__ref3)

(declare-fun rsi15 () t__ref3)

(declare-fun rdi51 () t__ref3)

(declare-fun r1211 () t__ref3)

(declare-fun r136 () t__ref3)

(declare-fun memory21 () map__ref)

(declare-fun zeroflag47 () Bool)

(declare-fun carryflag45 () Bool)

(declare-fun signflag45 () Bool)

(declare-fun overflowflag45 () Bool)

(declare-fun xmm045 () (_ BitVec 64))

(declare-fun xmm115 () (_ BitVec 64))

(declare-fun xmm215 () (_ BitVec 64))

(declare-fun xmm315 () (_ BitVec 64))

(declare-fun xmm412 () (_ BitVec 64))

(declare-fun xmm57 () (_ BitVec 64))

(declare-fun xmm78 () (_ BitVec 64))

(declare-fun rax39 () (_ BitVec 64))

(declare-fun rbx44 () (_ BitVec 64))

(declare-fun rsp84 () (_ BitVec 64))

(declare-fun rbp45 () (_ BitVec 64))

(declare-fun rsi16 () (_ BitVec 64))

(declare-fun rdi52 () (_ BitVec 64))

(declare-fun r1212 () (_ BitVec 64))

(declare-fun r137 () (_ BitVec 64))

(declare-fun memory22 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag48 () bool__ref)

(declare-fun carryflag46 () bool__ref)

(declare-fun signflag46 () bool__ref)

(declare-fun overflowflag46 () bool__ref)

(declare-fun xmm046 () t__ref3)

(declare-fun xmm116 () t__ref3)

(declare-fun xmm216 () t__ref3)

(declare-fun xmm316 () t__ref3)

(declare-fun xmm413 () t__ref3)

(declare-fun xmm58 () t__ref3)

(declare-fun xmm79 () t__ref3)

(declare-fun rax40 () t__ref3)

(declare-fun rbx45 () t__ref3)

(declare-fun rsp85 () t__ref3)

(declare-fun rbp46 () t__ref3)

(declare-fun rsi17 () t__ref3)

(declare-fun rdi53 () t__ref3)

(declare-fun r1213 () t__ref3)

(declare-fun r138 () t__ref3)

(declare-fun memory23 () map__ref)

(declare-fun zeroflag49 () Bool)

(declare-fun carryflag47 () Bool)

(declare-fun signflag47 () Bool)

(declare-fun overflowflag47 () Bool)

(declare-fun xmm047 () (_ BitVec 64))

(declare-fun xmm117 () (_ BitVec 64))

(declare-fun xmm217 () (_ BitVec 64))

(declare-fun xmm317 () (_ BitVec 64))

(declare-fun xmm414 () (_ BitVec 64))

(declare-fun xmm59 () (_ BitVec 64))

(declare-fun xmm710 () (_ BitVec 64))

(declare-fun rax41 () (_ BitVec 64))

(declare-fun rbx46 () (_ BitVec 64))

(declare-fun rsp86 () (_ BitVec 64))

(declare-fun rbp47 () (_ BitVec 64))

(declare-fun rsi18 () (_ BitVec 64))

(declare-fun rdi54 () (_ BitVec 64))

(declare-fun r1214 () (_ BitVec 64))

(declare-fun r139 () (_ BitVec 64))

(declare-fun memory24 () (Array (_ BitVec 64) unsigned8))

(declare-fun result154 () t__ref3)

(declare-fun xmm64 () (_ BitVec 64))

(declare-fun result155 () t__ref3)

(declare-fun r144 () (_ BitVec 64))

(declare-fun result156 () bool__ref)

(declare-fun zeroflag50 () Bool)

(declare-fun result157 () t__ref3)

(declare-fun xmm65 () (_ BitVec 64))

(declare-fun memory25 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag51 () bool__ref)

(declare-fun carryflag48 () bool__ref)

(declare-fun signflag48 () bool__ref)

(declare-fun overflowflag48 () bool__ref)

(declare-fun xmm048 () t__ref3)

(declare-fun xmm118 () t__ref3)

(declare-fun xmm218 () t__ref3)

(declare-fun xmm318 () t__ref3)

(declare-fun xmm415 () t__ref3)

(declare-fun xmm510 () t__ref3)

(declare-fun xmm66 () t__ref3)

(declare-fun xmm711 () t__ref3)

(declare-fun rax42 () t__ref3)

(declare-fun rbx47 () t__ref3)

(declare-fun rsp87 () t__ref3)

(declare-fun rbp48 () t__ref3)

(declare-fun rsi19 () t__ref3)

(declare-fun rdi55 () t__ref3)

(declare-fun r1215 () t__ref3)

(declare-fun r1310 () t__ref3)

(declare-fun r145 () t__ref3)

(declare-fun memory26 () map__ref)

(declare-fun zeroflag52 () Bool)

(declare-fun carryflag49 () Bool)

(declare-fun signflag49 () Bool)

(declare-fun overflowflag49 () Bool)

(declare-fun xmm049 () (_ BitVec 64))

(declare-fun xmm119 () (_ BitVec 64))

(declare-fun xmm219 () (_ BitVec 64))

(declare-fun xmm319 () (_ BitVec 64))

(declare-fun xmm416 () (_ BitVec 64))

(declare-fun xmm511 () (_ BitVec 64))

(declare-fun xmm67 () (_ BitVec 64))

(declare-fun xmm712 () (_ BitVec 64))

(declare-fun rax43 () (_ BitVec 64))

(declare-fun rbx48 () (_ BitVec 64))

(declare-fun rsp88 () (_ BitVec 64))

(declare-fun rbp49 () (_ BitVec 64))

(declare-fun rsi20 () (_ BitVec 64))

(declare-fun rdi56 () (_ BitVec 64))

(declare-fun r1216 () (_ BitVec 64))

(declare-fun r1311 () (_ BitVec 64))

(declare-fun r146 () (_ BitVec 64))

(declare-fun memory27 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag53 () bool__ref)

(declare-fun carryflag50 () bool__ref)

(declare-fun signflag50 () bool__ref)

(declare-fun overflowflag50 () bool__ref)

(declare-fun xmm050 () t__ref3)

(declare-fun xmm120 () t__ref3)

(declare-fun xmm220 () t__ref3)

(declare-fun xmm320 () t__ref3)

(declare-fun xmm417 () t__ref3)

(declare-fun xmm512 () t__ref3)

(declare-fun xmm68 () t__ref3)

(declare-fun xmm713 () t__ref3)

(declare-fun rax44 () t__ref3)

(declare-fun rbx49 () t__ref3)

(declare-fun rsp89 () t__ref3)

(declare-fun rbp50 () t__ref3)

(declare-fun rsi21 () t__ref3)

(declare-fun rdi57 () t__ref3)

(declare-fun r1217 () t__ref3)

(declare-fun r1312 () t__ref3)

(declare-fun r147 () t__ref3)

(declare-fun memory28 () map__ref)

(declare-fun zeroflag54 () Bool)

(declare-fun carryflag51 () Bool)

(declare-fun signflag51 () Bool)

(declare-fun overflowflag51 () Bool)

(declare-fun xmm051 () (_ BitVec 64))

(declare-fun xmm121 () (_ BitVec 64))

(declare-fun xmm221 () (_ BitVec 64))

(declare-fun xmm321 () (_ BitVec 64))

(declare-fun xmm418 () (_ BitVec 64))

(declare-fun xmm513 () (_ BitVec 64))

(declare-fun xmm69 () (_ BitVec 64))

(declare-fun xmm714 () (_ BitVec 64))

(declare-fun rax45 () (_ BitVec 64))

(declare-fun rbx50 () (_ BitVec 64))

(declare-fun rsp90 () (_ BitVec 64))

(declare-fun rbp51 () (_ BitVec 64))

(declare-fun rsi22 () (_ BitVec 64))

(declare-fun rdi58 () (_ BitVec 64))

(declare-fun r1218 () (_ BitVec 64))

(declare-fun r1313 () (_ BitVec 64))

(declare-fun r148 () (_ BitVec 64))

(declare-fun memory29 () (Array (_ BitVec 64) unsigned8))

(declare-fun result158 () t__ref3)

(declare-fun xmm715 () (_ BitVec 64))

(declare-fun result159 () t__ref3)

(declare-fun r153 () (_ BitVec 64))

(declare-fun result160 () bool__ref)

(declare-fun zeroflag55 () Bool)

(declare-fun result161 () t__ref3)

(declare-fun xmm716 () (_ BitVec 64))

(declare-fun memory30 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag56 () bool__ref)

(declare-fun carryflag52 () bool__ref)

(declare-fun signflag52 () bool__ref)

(declare-fun overflowflag52 () bool__ref)

(declare-fun xmm052 () t__ref3)

(declare-fun xmm122 () t__ref3)

(declare-fun xmm222 () t__ref3)

(declare-fun xmm322 () t__ref3)

(declare-fun xmm419 () t__ref3)

(declare-fun xmm514 () t__ref3)

(declare-fun xmm610 () t__ref3)

(declare-fun xmm717 () t__ref3)

(declare-fun rax46 () t__ref3)

(declare-fun rbx51 () t__ref3)

(declare-fun rsp91 () t__ref3)

(declare-fun rbp52 () t__ref3)

(declare-fun rsi23 () t__ref3)

(declare-fun rdi59 () t__ref3)

(declare-fun r1219 () t__ref3)

(declare-fun r1314 () t__ref3)

(declare-fun r149 () t__ref3)

(declare-fun r154 () t__ref3)

(declare-fun memory31 () map__ref)

(declare-fun zeroflag57 () Bool)

(declare-fun carryflag53 () Bool)

(declare-fun signflag53 () Bool)

(declare-fun overflowflag53 () Bool)

(declare-fun xmm053 () (_ BitVec 64))

(declare-fun xmm123 () (_ BitVec 64))

(declare-fun xmm223 () (_ BitVec 64))

(declare-fun xmm323 () (_ BitVec 64))

(declare-fun xmm420 () (_ BitVec 64))

(declare-fun xmm515 () (_ BitVec 64))

(declare-fun xmm611 () (_ BitVec 64))

(declare-fun xmm718 () (_ BitVec 64))

(declare-fun rax47 () (_ BitVec 64))

(declare-fun rbx52 () (_ BitVec 64))

(declare-fun rsp92 () (_ BitVec 64))

(declare-fun rbp53 () (_ BitVec 64))

(declare-fun rsi24 () (_ BitVec 64))

(declare-fun rdi60 () (_ BitVec 64))

(declare-fun r1220 () (_ BitVec 64))

(declare-fun r1315 () (_ BitVec 64))

(declare-fun r1410 () (_ BitVec 64))

(declare-fun r155 () (_ BitVec 64))

(declare-fun memory32 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag58 () bool__ref)

(declare-fun carryflag54 () bool__ref)

(declare-fun signflag54 () bool__ref)

(declare-fun overflowflag54 () bool__ref)

(declare-fun xmm054 () t__ref3)

(declare-fun xmm124 () t__ref3)

(declare-fun xmm224 () t__ref3)

(declare-fun xmm324 () t__ref3)

(declare-fun xmm421 () t__ref3)

(declare-fun xmm516 () t__ref3)

(declare-fun xmm612 () t__ref3)

(declare-fun xmm719 () t__ref3)

(declare-fun rax48 () t__ref3)

(declare-fun rbx53 () t__ref3)

(declare-fun rsp93 () t__ref3)

(declare-fun rbp54 () t__ref3)

(declare-fun rsi25 () t__ref3)

(declare-fun rdi61 () t__ref3)

(declare-fun r1221 () t__ref3)

(declare-fun r1316 () t__ref3)

(declare-fun r1411 () t__ref3)

(declare-fun r156 () t__ref3)

(declare-fun memory33 () map__ref)

(declare-fun zeroflag59 () Bool)

(declare-fun carryflag55 () Bool)

(declare-fun signflag55 () Bool)

(declare-fun overflowflag55 () Bool)

(declare-fun xmm055 () (_ BitVec 64))

(declare-fun xmm125 () (_ BitVec 64))

(declare-fun xmm225 () (_ BitVec 64))

(declare-fun xmm325 () (_ BitVec 64))

(declare-fun xmm422 () (_ BitVec 64))

(declare-fun xmm517 () (_ BitVec 64))

(declare-fun xmm613 () (_ BitVec 64))

(declare-fun xmm720 () (_ BitVec 64))

(declare-fun rax49 () (_ BitVec 64))

(declare-fun rbx54 () (_ BitVec 64))

(declare-fun rsp94 () (_ BitVec 64))

(declare-fun rbp55 () (_ BitVec 64))

(declare-fun rsi26 () (_ BitVec 64))

(declare-fun rdi62 () (_ BitVec 64))

(declare-fun r1222 () (_ BitVec 64))

(declare-fun r1317 () (_ BitVec 64))

(declare-fun r1412 () (_ BitVec 64))

(declare-fun r157 () (_ BitVec 64))

(declare-fun memory34 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdi63 () (_ BitVec 64))

(declare-fun rbx55 () (_ BitVec 64))

(declare-fun rbx56 () (_ BitVec 64))

(declare-fun rsp95 () (_ BitVec 64))

(declare-fun rsi27 () (_ BitVec 64))

(declare-fun memory35 () (Array (_ BitVec 64) unsigned8))

(declare-fun result162 () t__ref3)

(declare-fun rsi28 () (_ BitVec 64))

(declare-fun rdi64 () (_ BitVec 64))

(declare-fun rbx57 () (_ BitVec 64))

(declare-fun result163 () t__ref3)

(declare-fun rsp96 () (_ BitVec 64))

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert
  (and
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (readmem8__function_guard o1 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert
  (and
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (readmem8__function_guard o3 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
  (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert
  (and
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (readmem8__function_guard o5 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
  (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert
  (and
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (readmem8__function_guard o7 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
  (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert
  (and
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (readmem8__function_guard o9 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
  (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert
  (and
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (readmem8__function_guard o11 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
  (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert
  (and
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (readmem8__function_guard o13 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
  (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert
  (and
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (readmem8__function_guard o15 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
  (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert (= o17 (t__content3 rbx)))

;; H
  (assert (= result9 saverbx))

;; H
  (assert (= (let ((subject saverbx)) saverbx1) o17))

;; H
  (assert (= o18 (t__content3 rbp)))

;; H
  (assert (= result10 saverbp))

;; H
  (assert (= (let ((subject saverbp)) saverbp1) o18))

;; H
  (assert (= o19 (t__content3 r12)))

;; H
  (assert (= result11 saver12))

;; H
  (assert (= (let ((subject saver12)) saver121) o19))

;; H
  (assert (= o20 (t__content3 r13)))

;; H
  (assert (= result12 saver13))

;; H
  (assert (= (let ((subject saver13)) saver131) o20))

;; H
  (assert (= o21 (t__content3 r14)))

;; H
  (assert (= result13 saver14))

;; H
  (assert (= (let ((subject saver14)) saver141) o21))

;; H
  (assert (= o22 (t__content3 r15)))

;; H
  (assert (= result14 saver15))

;; H
  (assert (= (let ((subject saver15)) saver151) o22))

;; H
  (assert (= (t__content3 rsp) ((_ int2bv 64) 12105675798371893247)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r15) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r15) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (t__content3 rsp) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep
                                                          (select (map__content
                                                                  memory) i))))))))

;; H
  (assert (= result15 rsp))

;; H
  (assert
  (= (let ((subject rsp)) rsp1) (bvsub (t__content3 rsp) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r14) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r14) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory1) i))))))))

;; H
  (assert (= result16 (let ((subject rsp)) (mk_t__ref3 rsp1))))

;; H
  (assert
  (= (let ((subject rsp)) rsp2) (bvsub (let ((subject rsp)) rsp1) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504))
  (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi1) ((_ int2bv 32) 4198504)) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r13) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r13) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory2) i))))))))

;; H
  (assert (= result17 (let ((subject rsp)) (mk_t__ref3 rsp2))))

;; H
  (assert
  (= (let ((subject rsp)) rsp3) (bvsub (let ((subject rsp)) rsp2) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 r12) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 r12) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory3) i))))))))

;; H
  (assert (= result18 (let ((subject rsp)) (mk_t__ref3 rsp3))))

;; H
  (assert
  (= (let ((subject rsp)) rsp4) (bvsub (let ((subject rsp)) rsp3) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbp) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory4) i))))))))

;; H
  (assert (= result19 (let ((subject rsp)) (mk_t__ref3 rsp4))))

;; H
  (assert
  (= (let ((subject rsp)) rsp5) (bvsub (let ((subject rsp)) rsp4) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 255)) ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand (t__content3 rbx) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (let ((subject 
                                                         rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory5) i))))))))

;; H
  (assert (= result20 (let ((subject rsp)) (mk_t__ref3 rsp5))))

;; H
  (assert
  (= (let ((subject rsp)) rsp6) (bvsub (let ((subject rsp)) rsp5) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx1) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx1) ((_ int2bv 32) 0)))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx1) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result21 (let ((subject rsp)) (mk_t__ref3 rsp6))))

;; H
  (assert
  (= (let ((subject rsp)) rsp7) (bvsub (let ((subject rsp)) rsp6) ((_ int2bv 64) 104))))

;; H
  (assert (= result22 (let ((subject rsp)) (mk_t__ref3 rsp7))))

;; H
  (assert
  (= (let ((subject rsp)) rsp8) (bvsub (let ((subject rsp)) rsp7) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp9) (bvadd (let ((subject rsp)) rsp8) ((_ int2bv 64) 8))))

;; H
  (assert (= result23 rsi))

;; H
  (assert
  (= (let ((subject rsi)) rsi1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert (= result24 (let ((subject rdi)) (mk_t__ref3 rdi1))))

;; H
  (assert
  (= (let ((subject rdi)) rdi2) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 44))))

;; H
  (assert (= result25 rbp))

;; H
  (assert
  (= (let ((subject rbp)) rbp1) (bvadd (let ((subject rsp)) rsp9) ((_ int2bv 64) 64))))

;; H
  (assert
  (and
  (and
  (= o23 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6)))
  (readmem64__function_guard o23 ((_ int2bv 64) 4198776)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o23 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198776)))))
  (= (bvand o23 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o23 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o23 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o23 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o23 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o23 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o23 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result26 (mk_t__ref3 xmm3)))

;; H
  (assert (= xmm31 o23))

;; H
  (assert
  (and
  (and
  (= o24 (readmem64 ((_ int2bv 64) 4198784) (let ((subject memory)) memory6)))
  (readmem64__function_guard o24 ((_ int2bv 64) 4198784)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o24 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198784)))))
  (= (bvand o24 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o24 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o24 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o24 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o24 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o24 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o24 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198784) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result27 (mk_t__ref3 xmm2)))

;; H
  (assert (= xmm21 o24))

;; H
  (assert
  (and
  (and
  (= o25 (readmem64 ((_ int2bv 64) 4198792) (let ((subject memory)) memory6)))
  (readmem64__function_guard o25 ((_ int2bv 64) 4198792)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o25 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198792)))))
  (= (bvand o25 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o25 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o25 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o25 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o25 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o25 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o25 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198792) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result28 (mk_t__ref3 xmm1)))

;; H
  (assert (= xmm11 o25))

;; H
  (assert
  (and
  (and
  (= o26 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (readmem64__function_guard o26 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o26 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o26 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o26 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o26 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o26 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o26 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o26 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o26 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result29 (mk_t__ref3 xmm0)))

;; H
  (assert (= xmm01 o26))

;; H
  (assert (= result30 (let ((subject rsp)) (mk_t__ref3 rsp9))))

;; H
  (assert
  (= (let ((subject rsp)) rsp10) (bvsub (let ((subject rsp)) rsp9) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp11) (bvadd (let ((subject rsp)) rsp10) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688))
  (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi3) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax ((_ int2bv 32) 0)) rax ((_ int2bv 32) 0)))

;; H
  (assert (= (writereg32post rax ((_ int2bv 32) 0)) true))

;; H
  (assert (= result31 (let ((subject rsp)) (mk_t__ref3 rsp11))))

;; H
  (assert
  (= (let ((subject rsp)) rsp12) (bvsub (let ((subject rsp)) rsp11) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp13) (bvadd (let ((subject rsp)) rsp12) ((_ int2bv 64) 8))))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsp)) rsp13))
  (let ((subject rsp)) rsp13)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi4) o30) (let ((subject rdi)) rdi4)
  o30))

;; H
  (assert
  (and
  (and (= o27 (esp (let ((subject rsp)) rsp13))) (esp__function_guard 
  o27 (let ((subject rsp)) rsp13)))
  (= o27 (readreg32 (let ((subject rsp)) rsp13)))))

;; H
  (assert (= o28 (bvadd o27 ((_ int2bv 32) 44))))

;; H
  (assert (= o29 ((_ zero_extend 32) o28)))

;; H
  (assert
  (and
  (and (= o30 (readmem32 o29 (let ((subject memory)) memory6)))
  (readmem32__function_guard o30 o29 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o30 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) 
                                                         o29))))
  (= (bvand o30 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd 
                                                                  o29 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o30 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o30 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o29 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post (let ((subject rdi)) rdi4) o30) true))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rdi)) rdi4))
  (let ((subject rdi)) rdi4)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rdi)) rdi4))
  (let ((subject rdi)) rdi4)))

;; H
  (assert
  (and
  (and (= o31 (edi (let ((subject rdi)) rdi4))) (edi__function_guard 
  o31 (let ((subject rdi)) rdi4)))
  (= o31 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and
  (and (= o32 (edi (let ((subject rdi)) rdi4))) (edi__function_guard 
  o32 (let ((subject rdi)) rdi4)))
  (= o32 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o33 (bvand o32 o31)))

;; H
  (assert (= o34 (ite (= o33 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result32 (mk_bool__ref zeroflag)))

;; H
  (assert (= zeroflag1 o34))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rdi)) rdi4))
  (let ((subject rdi)) rdi4)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rdi)) rdi4))
  (let ((subject rdi)) rdi4)))

;; H
  (assert
  (and
  (and (= o35 (edi (let ((subject rdi)) rdi4))) (edi__function_guard 
  o35 (let ((subject rdi)) rdi4)))
  (= o35 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert
  (and
  (and (= o36 (edi (let ((subject rdi)) rdi4))) (edi__function_guard 
  o36 (let ((subject rdi)) rdi4)))
  (= o36 (readreg32 (let ((subject rdi)) rdi4)))))

;; H
  (assert (= o37 (bvand o36 o35)))

;; H
  (assert (= o38 (ite (bvugt o37 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result33 (mk_bool__ref signflag)))

;; H
  (assert (= signflag1 o38))

;; H
  (assert (= result34 (mk_bool__ref carryflag)))

;; H
  (assert (= carryflag1 (of_int 0)))

;; H
  (assert (= result35 (mk_bool__ref overflowflag)))

;; H
  (assert (= overflowflag1 (of_int 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi5) ((_ int2bv 32) 4198699))
  (let ((subject rdi)) rdi5) ((_ int2bv 32) 4198699)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax1 ((_ int2bv 32) 1)) rax1 ((_ int2bv 32) 1)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx2))
  (let ((subject rbx)) rbx2)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx3) o41) (let ((subject rbx)) rbx3)
  o41))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx3))
  (let ((subject rbx)) rbx3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx3))
  (let ((subject rbx)) rbx3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx3))
  (let ((subject rbx)) rbx3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx3))
  (let ((subject rbx)) rbx3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx3))
  (let ((subject rbx)) rbx3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___511 (let ((subject rbx)) rbx1))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___512 (let ((subject rsp)) rsp13))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___510 (let ((subject rsp)) rsp13))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___509 overflowflag1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___508 signflag1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___507 rax)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___505 carryflag1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___506 xmm01)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___504 (let ((subject rbp)) rbp1))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= temp___503 (let ((subject rdi)) rdi4))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= temp___502 zeroflag1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (let ((subject rsp)) rsp14) temp___512)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and (not (= zeroflag2 true))
  (= (= signflag2 true) (= overflowflag2 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and
  (= o39 (readmem64 (let ((subject rbp)) rbp2)
         (let ((subject memory)) memory6)))
  (readmem64__function_guard o39 (let ((subject rbp)) rbp2)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o39 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) 
                                                         (let ((subject 
                                                         rbp)) rbp2)))))
  (= (bvand o39 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd 
                                                                  (let ((subject 
                                                                  rbp)) 
                                                                  rbp2) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o39 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o39 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o39 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o39 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o39 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o39 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result36 (mk_t__ref3 xmm02))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm03 o39)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (writereg32post (let ((subject rdi)) rdi5) ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (writereg32post rax1 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and (= o40 (ebx (let ((subject rbx)) rbx2))) (ebx__function_guard 
  o40 (let ((subject rbx)) rbx2)))
  (= o40 (readreg32 (let ((subject rbx)) rbx2))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= o41 (bvadd o40 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (writereg32post (let ((subject rbx)) rbx3) o41) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result37 (let ((subject rbp)) (mk_t__ref3 rbp2)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (let ((subject rbp)) rbp3) (bvadd (let ((subject rbp)) rbp2) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result38 (let ((subject rsp)) (mk_t__ref3 rsp14)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (let ((subject rsp)) rsp15) (bvsub (let ((subject rsp)) rsp14) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= (let ((subject rsp)) rsp16) (bvadd (let ((subject rsp)) rsp15) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and (= o42 (ebx (let ((subject rbx)) rbx3))) (ebx__function_guard 
  o42 (let ((subject rbx)) rbx3)))
  (= o42 (readreg32 (let ((subject rbx)) rbx3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and
  (= o43 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o43
  (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o43 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o43 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o43 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o43 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o44 (bvsub o43 
  o42))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= o45 (ite (= o44 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result39 (mk_bool__ref zeroflag2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag3 o45)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and (= o46 (ebx (let ((subject rbx)) rbx3))) (ebx__function_guard 
  o46 (let ((subject rbx)) rbx3)))
  (= o46 (readreg32 (let ((subject rbx)) rbx3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and
  (= o47 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o47
  (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o47 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o47 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o47 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o47 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= o48 (bvsub o47 
  o46))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= o49 (ite (bvugt o48 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result40 (mk_bool__ref signflag2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag3 o49)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and (= o50 (ebx (let ((subject rbx)) rbx3))) (ebx__function_guard 
  o50 (let ((subject rbx)) rbx3)))
  (= o50 (readreg32 (let ((subject rbx)) rbx3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (and
  (and
  (= o51 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o51
  (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o51 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o51 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o51 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o51 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= o52 (ite (bvult o51 o50) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result41 (mk_bool__ref carryflag2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag3 o52)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (= signflag3 true))
  (and
  (and
  (= o56 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o56
  (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o56 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o56 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o56 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o56 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (= signflag3 true))
  (= result42 (ite (bvugt o56 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (not (= signflag3 true))) (= result42 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= result42 true)
  (and
  (and (= o55 (ebx (let ((subject rbx)) rbx3))) (ebx__function_guard 
  o55 (let ((subject rbx)) rbx3)))
  (= o55 (readreg32 (let ((subject rbx)) rbx3)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= result42 true)
  (= o57 (ite (bvule o55 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (= result42 true)) (= o57 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= signflag3 true)
  (and
  (and (= o54 (ebx (let ((subject rbx)) rbx3))) (ebx__function_guard 
  o54 (let ((subject rbx)) rbx3)))
  (= o54 (readreg32 (let ((subject rbx)) rbx3)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= signflag3 true)
  (= result43 (ite (bvugt o54 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (= signflag3 true)) (= result43 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= result43 true)
  (and
  (and
  (= o53 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o53
  (bvsub (bvadd (let ((subject rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o53 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o53 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o53 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o53 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp16) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (= result43 true)
  (= o58 (ite (bvule o53 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (=> (not (= result43 true)) (= o58 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= o59 (ite (= o58 false) o57 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= result44 (mk_bool__ref overflowflag2))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= overflowflag3 o59)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (not
  (and (not (= zeroflag3 true))
  (= (to_int5 signflag3) (to_int5 overflowflag3))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= rdi6 (let ((subject rdi)) (mk_t__ref3 rdi5)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= rbp4 (let ((subject rbp)) (mk_t__ref3 rbp3)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= rsp17 (let ((subject rsp)) (mk_t__ref3 rsp16)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= rbx4 (let ((subject rbx)) (mk_t__ref3 rbx3)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= rax2 (mk_t__ref3 rax1))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= xmm04 (mk_t__ref3 xmm03))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= overflowflag4 (mk_bool__ref overflowflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= signflag4 (mk_bool__ref signflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= carryflag4 (mk_bool__ref carryflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= zeroflag4 (mk_bool__ref zeroflag3))))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi7 rdi5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp5 rbp3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp18 rsp16)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx5 rbx3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax3 rax1)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm05 xmm03)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= overflowflag5 overflowflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag5 signflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag5 carryflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag5 zeroflag3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi8 rdi6)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp6 rbp4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp19 rsp17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx6 rbx4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax4 rax2)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm06 xmm04)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= overflowflag6 overflowflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag6 signflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag6 carryflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag6 zeroflag4)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rdi9 rdi7)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbp7 rbp5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rsp20 rsp18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rbx7 rbx5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= rax5 rax3)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= xmm07 xmm05)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))
  (= overflowflag7 overflowflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= signflag7 signflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= carryflag7 carryflag5)))

;; H
  (assert
  (=>
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))) (= zeroflag7 zeroflag5)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= rdi8 (let ((subject rdi)) (mk_t__ref3 rdi4)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= rbp6 (let ((subject rbp)) (mk_t__ref3 rbp1)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= rsp19 (let ((subject rsp)) (mk_t__ref3 rsp13)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= rbx6 (let ((subject rbx)) (mk_t__ref3 rbx1)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= rax4 (mk_t__ref3 rax))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= xmm06 (mk_t__ref3 xmm01))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= overflowflag6 (mk_bool__ref overflowflag1))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= signflag6 (mk_bool__ref signflag1))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= carryflag6 (mk_bool__ref carryflag1))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= zeroflag6 (mk_bool__ref zeroflag1))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rdi9 rdi4)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbp7 rbp1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rsp20 rsp13)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rbx7 rbx1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= rax5 rax)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= xmm07 xmm01)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= overflowflag7 overflowflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= signflag7 signflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1))))
  (= carryflag7 carryflag1)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag1 true))
  (= (to_int5 signflag1) (to_int5 overflowflag1)))) (= zeroflag7 zeroflag1)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi10) ((_ int2bv 32) 10))
  (let ((subject rdi)) rdi10) ((_ int2bv 32) 10)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi10) ((_ int2bv 32) 10)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx8) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx8) ((_ int2bv 32) 0)))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx8) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result45 rbp6))

;; H
  (assert
  (= (let ((subject rbp)) rbp8) (bvadd (t__content3 rsp19) ((_ int2bv 64) 64))))

;; H
  (assert (= result46 rsp19))

;; H
  (assert
  (= (let ((subject rsp)) rsp21) (bvsub (t__content3 rsp19) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp22) (bvadd (let ((subject rsp)) rsp21) ((_ int2bv 64) 8))))

;; H
  (assert (= result47 (let ((subject rsi)) (mk_t__ref3 rsi1))))

;; H
  (assert
  (= (let ((subject rsi)) rsi2) (bvadd (let ((subject rsp)) rsp22) ((_ int2bv 64) 64))))

;; H
  (assert (= result48 (let ((subject rdi)) (mk_t__ref3 rdi10))))

;; H
  (assert
  (= (let ((subject rdi)) rdi11) (bvadd (let ((subject rsp)) rsp22) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (and
  (= o60 (readmem64 ((_ int2bv 64) 4198776) (let ((subject memory)) memory6)))
  (readmem64__function_guard o60 ((_ int2bv 64) 4198776)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o60 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198776)))))
  (= (bvand o60 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o60 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o60 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o60 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o60 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o60 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o60 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198776) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result49 (mk_t__ref3 xmm31)))

;; H
  (assert (= xmm32 o60))

;; H
  (assert
  (and
  (and
  (= o61 (readmem64 ((_ int2bv 64) 4198800) (let ((subject memory)) memory6)))
  (readmem64__function_guard o61 ((_ int2bv 64) 4198800)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o61 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198800)))))
  (= (bvand o61 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o61 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o61 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o61 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o61 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o61 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o61 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198800) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result50 (mk_t__ref3 xmm21)))

;; H
  (assert (= xmm22 o61))

;; H
  (assert
  (and
  (and
  (= o62 (readmem64 ((_ int2bv 64) 4198808) (let ((subject memory)) memory6)))
  (readmem64__function_guard o62 ((_ int2bv 64) 4198808)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o62 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198808)))))
  (= (bvand o62 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o62 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o62 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o62 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o62 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o62 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o62 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198808) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result51 (mk_t__ref3 xmm11)))

;; H
  (assert (= xmm12 o62))

;; H
  (assert
  (and
  (and
  (= o63 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory6)))
  (readmem64__function_guard o63 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o63 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o63 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o63 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o63 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o63 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o63 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o63 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o63 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result52 xmm06))

;; H
  (assert (= xmm08 o63))

;; H
  (assert (= result53 (let ((subject rsp)) (mk_t__ref3 rsp22))))

;; H
  (assert
  (= (let ((subject rsp)) rsp23) (bvsub (let ((subject rsp)) rsp22) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp24) (bvadd (let ((subject rsp)) rsp23) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax6 ((_ int2bv 32) 0)) rax6 ((_ int2bv 32) 0)))

;; H
  (assert (= (writereg32post rax6 ((_ int2bv 32) 0)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi12) ((_ int2bv 32) 4198688))
  (let ((subject rdi)) rdi12) ((_ int2bv 32) 4198688)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi12) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result54 (let ((subject rsp)) (mk_t__ref3 rsp24))))

;; H
  (assert
  (= (let ((subject rsp)) rsp25) (bvsub (let ((subject rsp)) rsp24) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp26) (bvadd (let ((subject rsp)) rsp25) ((_ int2bv 64) 8))))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsp)) rsp26))
  (let ((subject rsp)) rsp26)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rsi)) rsi3) o67) (let ((subject rsi)) rsi3)
  o67))

;; H
  (assert
  (and
  (and (= o64 (esp (let ((subject rsp)) rsp26))) (esp__function_guard 
  o64 (let ((subject rsp)) rsp26)))
  (= o64 (readreg32 (let ((subject rsp)) rsp26)))))

;; H
  (assert (= o65 (bvadd o64 ((_ int2bv 32) 44))))

;; H
  (assert (= o66 ((_ zero_extend 32) o65)))

;; H
  (assert
  (and
  (and (= o67 (readmem32 o66 (let ((subject memory)) memory6)))
  (readmem32__function_guard o67 o66 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o67 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) 
                                                         o66))))
  (= (bvand o67 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd 
                                                                  o66 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o67 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o66 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o67 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o66 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post (let ((subject rsi)) rsi3) o67) true))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsi)) rsi3))
  (let ((subject rsi)) rsi3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsi)) rsi3))
  (let ((subject rsi)) rsi3)))

;; H
  (assert
  (and
  (and (= o68 (esi (let ((subject rsi)) rsi3))) (esi__function_guard 
  o68 (let ((subject rsi)) rsi3)))
  (= o68 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert
  (and
  (and (= o69 (esi (let ((subject rsi)) rsi3))) (esi__function_guard 
  o69 (let ((subject rsi)) rsi3)))
  (= o69 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert (= o70 (bvand o69 o68)))

;; H
  (assert (= o71 (ite (= o70 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result55 zeroflag6))

;; H
  (assert (= zeroflag8 o71))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsi)) rsi3))
  (let ((subject rsi)) rsi3)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsi)) rsi3))
  (let ((subject rsi)) rsi3)))

;; H
  (assert
  (and
  (and (= o72 (esi (let ((subject rsi)) rsi3))) (esi__function_guard 
  o72 (let ((subject rsi)) rsi3)))
  (= o72 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert
  (and
  (and (= o73 (esi (let ((subject rsi)) rsi3))) (esi__function_guard 
  o73 (let ((subject rsi)) rsi3)))
  (= o73 (readreg32 (let ((subject rsi)) rsi3)))))

;; H
  (assert (= o74 (bvand o73 o72)))

;; H
  (assert (= o75 (ite (bvugt o74 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result56 signflag6))

;; H
  (assert (= signflag8 o75))

;; H
  (assert (= result57 carryflag6))

;; H
  (assert (= carryflag8 (of_int 0)))

;; H
  (assert (= result58 overflowflag6))

;; H
  (assert (= overflowflag8 (of_int 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi13) ((_ int2bv 32) 4198699))
  (let ((subject rdi)) rdi13) ((_ int2bv 32) 4198699)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax7 ((_ int2bv 32) 1)) rax7 ((_ int2bv 32) 1)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx9))
  (let ((subject rbx)) rbx9)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx10) o78)
  (let ((subject rbx)) rbx10) o78))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx10))
  (let ((subject rbx)) rbx10)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx10))
  (let ((subject rbx)) rbx10)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx10))
  (let ((subject rbx)) rbx10)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx10))
  (let ((subject rbx)) rbx10)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx10))
  (let ((subject rbx)) rbx10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___522 (let ((subject rbx)) rbx8))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___521 (let ((subject rsp)) rsp26))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___520 overflowflag8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___519 signflag8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___518 rax6)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___516 carryflag8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___517 xmm08)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___515 (let ((subject rbp)) rbp8))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___514 (let ((subject rdi)) rdi12))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= temp___513 zeroflag8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= temp___523 (let ((subject rsp)) rsp26))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (let ((subject rsp)) rsp27) temp___523)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and (not (= zeroflag9 true))
  (= (= signflag9 true) (= overflowflag9 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and
  (= o76 (readmem64 (let ((subject rbp)) rbp9)
         (let ((subject memory)) memory6)))
  (readmem64__function_guard o76 (let ((subject rbp)) rbp9)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o76 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) 
                                                         (let ((subject 
                                                         rbp)) rbp9)))))
  (= (bvand o76 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd 
                                                                  (let ((subject 
                                                                  rbp)) 
                                                                  rbp9) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o76 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o76 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o76 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o76 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o76 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o76 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result59 (mk_t__ref3 xmm09))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm010 o76)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (writereg32post (let ((subject rdi)) rdi13) ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (writereg32post rax7 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and (= o77 (ebx (let ((subject rbx)) rbx9))) (ebx__function_guard 
  o77 (let ((subject rbx)) rbx9)))
  (= o77 (readreg32 (let ((subject rbx)) rbx9))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= o78 (bvadd o77 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (writereg32post (let ((subject rbx)) rbx10) o78) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result60 (let ((subject rbp)) (mk_t__ref3 rbp9)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (let ((subject rbp)) rbp10) (bvadd (let ((subject rbp)) rbp9) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result61 (let ((subject rsp)) (mk_t__ref3 rsp27)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (let ((subject rsp)) rsp28) (bvsub (let ((subject rsp)) rsp27) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= (let ((subject rsp)) rsp29) (bvadd (let ((subject rsp)) rsp28) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and (= o79 (ebx (let ((subject rbx)) rbx10))) (ebx__function_guard 
  o79 (let ((subject rbx)) rbx10)))
  (= o79 (readreg32 (let ((subject rbx)) rbx10))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and
  (= o80 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o80
  (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o80 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o80 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o80 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o80 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o81 (bvsub o80 
  o79))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= o82 (ite (= o81 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result62 (mk_bool__ref zeroflag9))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag10 o82)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and (= o83 (ebx (let ((subject rbx)) rbx10))) (ebx__function_guard 
  o83 (let ((subject rbx)) rbx10)))
  (= o83 (readreg32 (let ((subject rbx)) rbx10))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and
  (= o84 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o84
  (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o84 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o84 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o84 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o84 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= o85 (bvsub o84 
  o83))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= o86 (ite (bvugt o85 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result63 (mk_bool__ref signflag9))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag10 o86)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and (= o87 (ebx (let ((subject rbx)) rbx10))) (ebx__function_guard 
  o87 (let ((subject rbx)) rbx10)))
  (= o87 (readreg32 (let ((subject rbx)) rbx10))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (and
  (and
  (= o88 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o88
  (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o88 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o88 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o88 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o88 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= o89 (ite (bvult o88 o87) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result64 (mk_bool__ref carryflag9))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= carryflag10 o89)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (= signflag10 true))
  (and
  (and
  (= o93 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o93
  (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o93 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o93 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o93 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o93 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (= signflag10 true))
  (= result65 (ite (bvugt o93 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (not (= signflag10 true))) (= result65 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= result65 true)
  (and
  (and (= o92 (ebx (let ((subject rbx)) rbx10))) (ebx__function_guard 
  o92 (let ((subject rbx)) rbx10)))
  (= o92 (readreg32 (let ((subject rbx)) rbx10)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= result65 true)
  (= o94 (ite (bvule o92 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (= result65 true)) (= o94 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= signflag10 true)
  (and
  (and (= o91 (ebx (let ((subject rbx)) rbx10))) (ebx__function_guard 
  o91 (let ((subject rbx)) rbx10)))
  (= o91 (readreg32 (let ((subject rbx)) rbx10)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= signflag10 true)
  (= result66 (ite (bvugt o91 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (= signflag10 true)) (= result66 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= result66 true)
  (and
  (and
  (= o90 (readmem32
         (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
         (let ((subject memory)) memory6)))
  (readmem32__function_guard o90
  (bvsub (bvadd (let ((subject rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o90 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) (bvsub (bvadd 
                                                         (let ((subject 
                                                         rsp)) rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o90 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd (bvsub (bvadd 
                                                                  (let ((subject 
                                                                  rsp))
                                                                  rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o90 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o90 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp29) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (= result66 true)
  (= o95 (ite (bvule o90 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (=> (not (= result66 true)) (= o95 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= o96 (ite (= o95 false) o94 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= result67 (mk_bool__ref overflowflag9))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= overflowflag10 
  o96)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (not
  (and (not (= zeroflag10 true))
  (= (to_int5 signflag10) (to_int5 overflowflag10))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= rdi14 (let ((subject rdi)) (mk_t__ref3 rdi13)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= rbp11 (let ((subject rbp)) (mk_t__ref3 rbp10)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= rsp30 (let ((subject rsp)) (mk_t__ref3 rsp29)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= rbx11 (let ((subject rbx)) (mk_t__ref3 rbx10)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= rax8 (mk_t__ref3 rax7))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= xmm011 (mk_t__ref3 xmm010))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= overflowflag11 (mk_bool__ref overflowflag10))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= signflag11 (mk_bool__ref signflag10))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= carryflag11 (mk_bool__ref carryflag10))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= zeroflag11 (mk_bool__ref zeroflag10))))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi15 rdi13)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp12 rbp10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp31 rsp29)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx12 rbx10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax9 rax7)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm012 xmm010)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= overflowflag12 overflowflag10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag12 signflag10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= carryflag12 carryflag10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag12 zeroflag10)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi16 rdi14)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp13 rbp11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp32 rsp30)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx13 rbx11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax10 rax8)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm013 xmm011)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= overflowflag13 overflowflag11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag13 signflag11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= carryflag13 carryflag11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag13 zeroflag11)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rdi17 rdi15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbp14 rbp12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rsp33 rsp31)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rbx14 rbx12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= rax11 rax9)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= xmm014 xmm012)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= overflowflag14 overflowflag12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= signflag14 signflag12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))
  (= carryflag14 carryflag12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))) (= zeroflag14 zeroflag12)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= rdi16 (let ((subject rdi)) (mk_t__ref3 rdi12)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= rbp13 (let ((subject rbp)) (mk_t__ref3 rbp8)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= rsp32 (let ((subject rsp)) (mk_t__ref3 rsp26)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= rbx13 (let ((subject rbx)) (mk_t__ref3 rbx8)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= rax10 (mk_t__ref3 rax6))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= xmm013 (mk_t__ref3 xmm08))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= overflowflag13 (mk_bool__ref overflowflag8))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= signflag13 (mk_bool__ref signflag8))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= carryflag13 (mk_bool__ref carryflag8))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= zeroflag13 (mk_bool__ref zeroflag8))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rdi17 rdi12)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbp14 rbp8)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rsp33 rsp26)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rbx14 rbx8)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= rax11 rax6)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= xmm014 xmm08)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= overflowflag14 overflowflag8)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= signflag14 signflag8)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8))))
  (= carryflag14 carryflag8)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag8 true))
  (= (to_int5 signflag8) (to_int5 overflowflag8)))) (= zeroflag14 zeroflag8)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi18) ((_ int2bv 32) 10))
  (let ((subject rdi)) rdi18) ((_ int2bv 32) 10)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi18) ((_ int2bv 32) 10)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx15) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx15) ((_ int2bv 32) 0)))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx15) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result68 rbp13))

;; H
  (assert
  (= (let ((subject rbp)) rbp15) (bvadd (t__content3 rsp32) ((_ int2bv 64) 64))))

;; H
  (assert (= result69 rsp32))

;; H
  (assert
  (= (let ((subject rsp)) rsp34) (bvsub (t__content3 rsp32) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp35) (bvadd (let ((subject rsp)) rsp34) ((_ int2bv 64) 8))))

;; H
  (assert (= result70 (let ((subject rsi)) (mk_t__ref3 rsi3))))

;; H
  (assert
  (= (let ((subject rsi)) rsi4) (bvadd (let ((subject rsp)) rsp35) ((_ int2bv 64) 64))))

;; H
  (assert (= result71 (let ((subject rdi)) (mk_t__ref3 rdi18))))

;; H
  (assert
  (= (let ((subject rdi)) rdi19) (bvadd (let ((subject rsp)) rsp35) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (and
  (= o97 (readmem64 ((_ int2bv 64) 4198816) (let ((subject memory)) memory6)))
  (readmem64__function_guard o97 ((_ int2bv 64) 4198816)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o97 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198816)))))
  (= (bvand o97 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o97 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o97 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o97 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o97 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o97 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o97 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198816) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result72 (mk_t__ref3 xmm32)))

;; H
  (assert (= xmm33 o97))

;; H
  (assert
  (and
  (and
  (= o98 (readmem64 ((_ int2bv 64) 4198824) (let ((subject memory)) memory6)))
  (readmem64__function_guard o98 ((_ int2bv 64) 4198824)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o98 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198824)))))
  (= (bvand o98 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o98 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o98 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o98 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o98 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o98 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o98 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198824) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result73 (mk_t__ref3 xmm22)))

;; H
  (assert (= xmm23 o98))

;; H
  (assert
  (and
  (and
  (= o99 (readmem64 ((_ int2bv 64) 4198832) (let ((subject memory)) memory6)))
  (readmem64__function_guard o99 ((_ int2bv 64) 4198832)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o99 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject 
                                                                 memory))
                                                                 memory6) ((_ int2bv 64) 4198832)))))
  (= (bvand o99 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select 
                                                                  (let ((subject 
                                                                  memory))
                                                                  memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o99 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o99 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o99 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o99 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o99 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o99 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198832) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result74 (mk_t__ref3 xmm12)))

;; H
  (assert (= xmm13 o99))

;; H
  (assert
  (and
  (and
  (= o100 (readmem64 ((_ int2bv 64) 4198768)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o100 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o100 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o100 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o100 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o100 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o100 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o100 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o100 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o100 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result75 xmm013))

;; H
  (assert (= xmm015 o100))

;; H
  (assert (= result76 (let ((subject rsp)) (mk_t__ref3 rsp35))))

;; H
  (assert
  (= (let ((subject rsp)) rsp36) (bvsub (let ((subject rsp)) rsp35) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp37) (bvadd (let ((subject rsp)) rsp36) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax12 ((_ int2bv 32) 0)) rax12 ((_ int2bv 32) 0)))

;; H
  (assert (= (writereg32post rax12 ((_ int2bv 32) 0)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi20) ((_ int2bv 32) 4198688))
  (let ((subject rdi)) rdi20) ((_ int2bv 32) 4198688)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi20) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result77 (let ((subject rsp)) (mk_t__ref3 rsp37))))

;; H
  (assert
  (= (let ((subject rsp)) rsp38) (bvsub (let ((subject rsp)) rsp37) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp39) (bvadd (let ((subject rsp)) rsp38) ((_ int2bv 64) 8))))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsp)) rsp39))
  (let ((subject rsp)) rsp39)))

;; H
  (assert (writereg32post__function_guard (writereg32post rcx o104) rcx
  o104))

;; H
  (assert
  (and
  (and (= o101 (esp (let ((subject rsp)) rsp39))) (esp__function_guard 
  o101 (let ((subject rsp)) rsp39)))
  (= o101 (readreg32 (let ((subject rsp)) rsp39)))))

;; H
  (assert (= o102 (bvadd o101 ((_ int2bv 32) 44))))

;; H
  (assert (= o103 ((_ zero_extend 32) o102)))

;; H
  (assert
  (and
  (and (= o104 (readmem32 o103 (let ((subject memory)) memory6)))
  (readmem32__function_guard o104 o103 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o104 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) 
                                                          o103))))
  (= (bvand o104 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd 
                                                                   o103 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o104 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o103 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o104 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o103 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post rcx o104) true))

;; H
  (assert (readreg32__function_guard (readreg32 rcx) rcx))

;; H
  (assert (readreg32__function_guard (readreg32 rcx) rcx))

;; H
  (assert
  (and (and (= o105 (ecx rcx)) (ecx__function_guard o105 rcx))
  (= o105 (readreg32 rcx))))

;; H
  (assert
  (and (and (= o106 (ecx rcx)) (ecx__function_guard o106 rcx))
  (= o106 (readreg32 rcx))))

;; H
  (assert (= o107 (bvand o106 o105)))

;; H
  (assert (= o108 (ite (= o107 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result78 zeroflag13))

;; H
  (assert (= zeroflag15 o108))

;; H
  (assert (readreg32__function_guard (readreg32 rcx) rcx))

;; H
  (assert (readreg32__function_guard (readreg32 rcx) rcx))

;; H
  (assert
  (and (and (= o109 (ecx rcx)) (ecx__function_guard o109 rcx))
  (= o109 (readreg32 rcx))))

;; H
  (assert
  (and (and (= o110 (ecx rcx)) (ecx__function_guard o110 rcx))
  (= o110 (readreg32 rcx))))

;; H
  (assert (= o111 (bvand o110 o109)))

;; H
  (assert (= o112 (ite (bvugt o111 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result79 signflag13))

;; H
  (assert (= signflag15 o112))

;; H
  (assert (= result80 carryflag13))

;; H
  (assert (= carryflag15 (of_int 0)))

;; H
  (assert (= result81 overflowflag13))

;; H
  (assert (= overflowflag15 (of_int 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi21) ((_ int2bv 32) 4198699))
  (let ((subject rdi)) rdi21) ((_ int2bv 32) 4198699)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax13 ((_ int2bv 32) 1)) rax13 ((_ int2bv 32) 1)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx16))
  (let ((subject rbx)) rbx16)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx17) o115)
  (let ((subject rbx)) rbx17) o115))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx17))
  (let ((subject rbx)) rbx17)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx17))
  (let ((subject rbx)) rbx17)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx17))
  (let ((subject rbx)) rbx17)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx17))
  (let ((subject rbx)) rbx17)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx17))
  (let ((subject rbx)) rbx17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___533 (let ((subject rbx)) rbx15))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___532 (let ((subject rsp)) rsp39))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___531 overflowflag15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___530 signflag15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= temp___529 rax12)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___527 carryflag15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= temp___528 xmm015)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___526 (let ((subject rbp)) rbp15))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___525 (let ((subject rdi)) rdi20))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___534 (let ((subject rsp)) rsp39))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= temp___524 zeroflag15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (let ((subject rsp)) rsp40) temp___534)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and (not (= zeroflag16 true))
  (= (= signflag16 true) (= overflowflag16 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and
  (= o113 (readmem64 (let ((subject rbp)) rbp16)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o113 (let ((subject rbp)) rbp16)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o113 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) 
                                                          (let ((subject 
                                                          rbp)) rbp16)))))
  (= (bvand o113 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd 
                                                                   (let ((subject 
                                                                   rbp))
                                                                   rbp16) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o113 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o113 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o113 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o113 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o113 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o113 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result82 (mk_t__ref3 xmm016))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= xmm017 o113)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (writereg32post (let ((subject rdi)) rdi21) ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (writereg32post rax13 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and (= o114 (ebx (let ((subject rbx)) rbx16))) (ebx__function_guard 
  o114 (let ((subject rbx)) rbx16)))
  (= o114 (readreg32 (let ((subject rbx)) rbx16))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o115 (bvadd o114 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (writereg32post (let ((subject rbx)) rbx17) o115) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result83 (let ((subject rbp)) (mk_t__ref3 rbp16)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (let ((subject rbp)) rbp17) (bvadd (let ((subject rbp)) rbp16) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result84 (let ((subject rsp)) (mk_t__ref3 rsp40)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (let ((subject rsp)) rsp41) (bvsub (let ((subject rsp)) rsp40) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= (let ((subject rsp)) rsp42) (bvadd (let ((subject rsp)) rsp41) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and (= o116 (ebx (let ((subject rbx)) rbx17))) (ebx__function_guard 
  o116 (let ((subject rbx)) rbx17)))
  (= o116 (readreg32 (let ((subject rbx)) rbx17))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and
  (= o117 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o117
  (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o117 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o117 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o117 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o117 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o118 (bvsub o117 o116))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o119 (ite (= o118 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result85 (mk_bool__ref zeroflag16))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= zeroflag17 o119)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and (= o120 (ebx (let ((subject rbx)) rbx17))) (ebx__function_guard 
  o120 (let ((subject rbx)) rbx17)))
  (= o120 (readreg32 (let ((subject rbx)) rbx17))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and
  (= o121 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o121
  (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o121 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o121 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o121 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o121 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o122 (bvsub o121 o120))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o123 (ite (bvugt o122 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result86 (mk_bool__ref signflag16))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= signflag17 o123)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and (= o124 (ebx (let ((subject rbx)) rbx17))) (ebx__function_guard 
  o124 (let ((subject rbx)) rbx17)))
  (= o124 (readreg32 (let ((subject rbx)) rbx17))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (and
  (and
  (= o125 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o125
  (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o125 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o125 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o125 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o125 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o126 (ite (bvult o125 o124) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result87 (mk_bool__ref carryflag16))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= carryflag17 o126)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (= signflag17 true))
  (and
  (and
  (= o130 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o130
  (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o130 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o130 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o130 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o130 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (= signflag17 true))
  (= result88 (ite (bvugt o130 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (not (= signflag17 true))) (= result88 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= result88 true)
  (and
  (and (= o129 (ebx (let ((subject rbx)) rbx17))) (ebx__function_guard 
  o129 (let ((subject rbx)) rbx17)))
  (= o129 (readreg32 (let ((subject rbx)) rbx17)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= result88 true)
  (= o131 (ite (bvule o129 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (= result88 true)) (= o131 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= signflag17 true)
  (and
  (and (= o128 (ebx (let ((subject rbx)) rbx17))) (ebx__function_guard 
  o128 (let ((subject rbx)) rbx17)))
  (= o128 (readreg32 (let ((subject rbx)) rbx17)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= signflag17 true)
  (= result89 (ite (bvugt o128 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (= signflag17 true)) (= result89 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= result89 true)
  (and
  (and
  (= o127 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o127
  (bvsub (bvadd (let ((subject rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o127 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o127 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o127 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o127 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp42) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (= result89 true)
  (= o132 (ite (bvule o127 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (=> (not (= result89 true)) (= o132 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= o133 (ite (= o132 false) o131 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= result90 (mk_bool__ref overflowflag16))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= overflowflag17 
  o133)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (not
  (and (not (= zeroflag17 true))
  (= (to_int5 signflag17) (to_int5 overflowflag17))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= rdi22 (let ((subject rdi)) (mk_t__ref3 rdi21)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= rbp18 (let ((subject rbp)) (mk_t__ref3 rbp17)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= rsp43 (let ((subject rsp)) (mk_t__ref3 rsp42)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= rbx18 (let ((subject rbx)) (mk_t__ref3 rbx17)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= rax14 (mk_t__ref3 rax13))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= xmm018 (mk_t__ref3 xmm017))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= overflowflag18 (mk_bool__ref overflowflag17))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= signflag18 (mk_bool__ref signflag17))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= carryflag18 (mk_bool__ref carryflag17))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= zeroflag18 (mk_bool__ref zeroflag17))))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rdi23 rdi21)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbp19 rbp17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rsp44 rsp42)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbx19 rbx17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rax15 rax13)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= xmm019 xmm017)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= overflowflag19 overflowflag17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= signflag19 signflag17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= carryflag19 carryflag17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= zeroflag19 zeroflag17)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rdi24 rdi22)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbp20 rbp18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rsp45 rsp43)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbx20 rbx18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rax16 rax14)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= xmm020 xmm018)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= overflowflag20 overflowflag18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= signflag20 signflag18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= carryflag20 carryflag18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= zeroflag20 zeroflag18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rdi25 rdi23)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbp21 rbp19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rsp46 rsp44)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rbx21 rbx19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= rax17 rax15)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))) (= xmm021 xmm019)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= overflowflag21 overflowflag19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= signflag21 signflag19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= carryflag21 carryflag19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))
  (= zeroflag21 zeroflag19)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= rdi24 (let ((subject rdi)) (mk_t__ref3 rdi20)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= rbp20 (let ((subject rbp)) (mk_t__ref3 rbp15)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= rsp45 (let ((subject rsp)) (mk_t__ref3 rsp39)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= rbx20 (let ((subject rbx)) (mk_t__ref3 rbx15)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= rax16 (mk_t__ref3 rax12))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= xmm020 (mk_t__ref3 xmm015))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= overflowflag20 (mk_bool__ref overflowflag15))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= signflag20 (mk_bool__ref signflag15))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= carryflag20 (mk_bool__ref carryflag15))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= zeroflag20 (mk_bool__ref zeroflag15))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= rdi25 rdi20)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= rbp21 rbp15)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= rsp46 rsp39)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= rbx21 rbx15)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= rax17 rax12)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15)))) (= xmm021 xmm015)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= overflowflag21 overflowflag15)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= signflag21 signflag15)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= carryflag21 carryflag15)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag15 true))
  (= (to_int5 signflag15) (to_int5 overflowflag15))))
  (= zeroflag21 zeroflag15)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi26) ((_ int2bv 32) 10))
  (let ((subject rdi)) rdi26) ((_ int2bv 32) 10)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi26) ((_ int2bv 32) 10)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx22) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx22) ((_ int2bv 32) 0)))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx22) ((_ int2bv 32) 0)) true))

;; H
  (assert (= result91 rbp20))

;; H
  (assert
  (= (let ((subject rbp)) rbp22) (bvadd (t__content3 rsp45) ((_ int2bv 64) 64))))

;; H
  (assert (= result92 rsp45))

;; H
  (assert
  (= (let ((subject rsp)) rsp47) (bvsub (t__content3 rsp45) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp48) (bvadd (let ((subject rsp)) rsp47) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (= o134 (readmem64 ((_ int2bv 64) 4198768)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o134 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o134 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o134 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o134 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o134 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o134 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o134 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o134 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o134 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result93 (mk_t__ref3 xmm23)))

;; H
  (assert (= xmm24 o134))

;; H
  (assert (= result94 (let ((subject rsi)) (mk_t__ref3 rsi4))))

;; H
  (assert
  (= (let ((subject rsi)) rsi5) (bvadd (let ((subject rsp)) rsp48) ((_ int2bv 64) 64))))

;; H
  (assert (= result95 (let ((subject rdi)) (mk_t__ref3 rdi26))))

;; H
  (assert
  (= (let ((subject rdi)) rdi27) (bvadd (let ((subject rsp)) rsp48) ((_ int2bv 64) 44))))

;; H
  (assert
  (and
  (and
  (= o135 (readmem64 ((_ int2bv 64) 4198840)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o135 ((_ int2bv 64) 4198840)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o135 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) ((_ int2bv 64) 4198840)))))
  (= (bvand o135 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o135 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o135 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o135 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o135 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o135 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o135 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198840) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result96 (mk_t__ref3 xmm33)))

;; H
  (assert (= xmm34 o135))

;; H
  (assert
  (and
  (and
  (= o136 (readmem64 ((_ int2bv 64) 4198848)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o136 ((_ int2bv 64) 4198848)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o136 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) ((_ int2bv 64) 4198848)))))
  (= (bvand o136 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o136 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o136 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o136 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o136 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o136 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o136 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198848) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result97 (mk_t__ref3 xmm13)))

;; H
  (assert (= xmm14 o136))

;; H
  (assert (= result98 xmm020))

;; H
  (assert (= xmm022 xmm24))

;; H
  (assert (= result99 (let ((subject rsp)) (mk_t__ref3 rsp48))))

;; H
  (assert
  (= (let ((subject rsp)) rsp49) (bvsub (let ((subject rsp)) rsp48) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp50) (bvadd (let ((subject rsp)) rsp49) ((_ int2bv 64) 8))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax18 ((_ int2bv 32) 0)) rax18 ((_ int2bv 32) 0)))

;; H
  (assert (= (writereg32post rax18 ((_ int2bv 32) 0)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi28) ((_ int2bv 32) 4198688))
  (let ((subject rdi)) rdi28) ((_ int2bv 32) 4198688)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi28) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result100 (let ((subject rsp)) (mk_t__ref3 rsp50))))

;; H
  (assert
  (= (let ((subject rsp)) rsp51) (bvsub (let ((subject rsp)) rsp50) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp52) (bvadd (let ((subject rsp)) rsp51) ((_ int2bv 64) 8))))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsp)) rsp52))
  (let ((subject rsp)) rsp52)))

;; H
  (assert (writereg32post__function_guard (writereg32post rdx o140) rdx
  o140))

;; H
  (assert
  (and
  (and (= o137 (esp (let ((subject rsp)) rsp52))) (esp__function_guard 
  o137 (let ((subject rsp)) rsp52)))
  (= o137 (readreg32 (let ((subject rsp)) rsp52)))))

;; H
  (assert (= o138 (bvadd o137 ((_ int2bv 32) 44))))

;; H
  (assert (= o139 ((_ zero_extend 32) o138)))

;; H
  (assert
  (and
  (and (= o140 (readmem32 o139 (let ((subject memory)) memory6)))
  (readmem32__function_guard o140 o139 (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o140 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) 
                                                          o139))))
  (= (bvand o140 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd 
                                                                   o139 ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o140 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o139 ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o140 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd o139 ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post rdx o140) true))

;; H
  (assert (readreg32__function_guard (readreg32 rdx) rdx))

;; H
  (assert (readreg32__function_guard (readreg32 rdx) rdx))

;; H
  (assert
  (and (and (= o141 (edx rdx)) (edx__function_guard o141 rdx))
  (= o141 (readreg32 rdx))))

;; H
  (assert
  (and (and (= o142 (edx rdx)) (edx__function_guard o142 rdx))
  (= o142 (readreg32 rdx))))

;; H
  (assert (= o143 (bvand o142 o141)))

;; H
  (assert (= o144 (ite (= o143 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result101 zeroflag20))

;; H
  (assert (= zeroflag22 o144))

;; H
  (assert (readreg32__function_guard (readreg32 rdx) rdx))

;; H
  (assert (readreg32__function_guard (readreg32 rdx) rdx))

;; H
  (assert
  (and (and (= o145 (edx rdx)) (edx__function_guard o145 rdx))
  (= o145 (readreg32 rdx))))

;; H
  (assert
  (and (and (= o146 (edx rdx)) (edx__function_guard o146 rdx))
  (= o146 (readreg32 rdx))))

;; H
  (assert (= o147 (bvand o146 o145)))

;; H
  (assert (= o148 (ite (bvugt o147 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result102 signflag20))

;; H
  (assert (= signflag22 o148))

;; H
  (assert (= result103 carryflag20))

;; H
  (assert (= carryflag22 (of_int 0)))

;; H
  (assert (= result104 overflowflag20))

;; H
  (assert (= overflowflag22 (of_int 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi29) ((_ int2bv 32) 4198699))
  (let ((subject rdi)) rdi29) ((_ int2bv 32) 4198699)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax19 ((_ int2bv 32) 1)) rax19 ((_ int2bv 32) 1)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx23))
  (let ((subject rbx)) rbx23)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx24) o151)
  (let ((subject rbx)) rbx24) o151))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx24))
  (let ((subject rbx)) rbx24)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx24))
  (let ((subject rbx)) rbx24)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx24))
  (let ((subject rbx)) rbx24)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx24))
  (let ((subject rbx)) rbx24)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx24))
  (let ((subject rbx)) rbx24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___544 (let ((subject rbx)) rbx22))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___543 (let ((subject rsp)) rsp52))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___542 overflowflag22)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___541 signflag22)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= temp___540 rax18)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___545 (let ((subject rsp)) rsp52))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___538 carryflag22)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= temp___539 xmm022)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___537 (let ((subject rbp)) rbp22))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___536 (let ((subject rdi)) rdi28))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= temp___535 zeroflag22)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (let ((subject rsp)) rsp53) temp___545)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and (not (= zeroflag23 true))
  (= (= signflag23 true) (= overflowflag23 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and
  (= o149 (readmem64 (let ((subject rbp)) rbp23)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o149 (let ((subject rbp)) rbp23)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o149 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) 
                                                          (let ((subject 
                                                          rbp)) rbp23)))))
  (= (bvand o149 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd 
                                                                   (let ((subject 
                                                                   rbp))
                                                                   rbp23) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o149 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o149 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o149 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o149 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o149 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o149 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result105 (mk_t__ref3 xmm023))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= xmm024 o149)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (writereg32post (let ((subject rdi)) rdi29) ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (writereg32post rax19 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and (= o150 (ebx (let ((subject rbx)) rbx23))) (ebx__function_guard 
  o150 (let ((subject rbx)) rbx23)))
  (= o150 (readreg32 (let ((subject rbx)) rbx23))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o151 (bvadd o150 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (writereg32post (let ((subject rbx)) rbx24) o151) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result106 (let ((subject rbp)) (mk_t__ref3 rbp23)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (let ((subject rbp)) rbp24) (bvadd (let ((subject rbp)) rbp23) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result107 (let ((subject rsp)) (mk_t__ref3 rsp53)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (let ((subject rsp)) rsp54) (bvsub (let ((subject rsp)) rsp53) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= (let ((subject rsp)) rsp55) (bvadd (let ((subject rsp)) rsp54) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and (= o152 (ebx (let ((subject rbx)) rbx24))) (ebx__function_guard 
  o152 (let ((subject rbx)) rbx24)))
  (= o152 (readreg32 (let ((subject rbx)) rbx24))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and
  (= o153 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o153
  (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o153 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o153 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o153 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o153 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o154 (bvsub o153 o152))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o155 (ite (= o154 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result108 (mk_bool__ref zeroflag23))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= zeroflag24 o155)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and (= o156 (ebx (let ((subject rbx)) rbx24))) (ebx__function_guard 
  o156 (let ((subject rbx)) rbx24)))
  (= o156 (readreg32 (let ((subject rbx)) rbx24))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and
  (= o157 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o157
  (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o157 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o157 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o157 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o157 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o158 (bvsub o157 o156))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o159 (ite (bvugt o158 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result109 (mk_bool__ref signflag23))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= signflag24 o159)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and (= o160 (ebx (let ((subject rbx)) rbx24))) (ebx__function_guard 
  o160 (let ((subject rbx)) rbx24)))
  (= o160 (readreg32 (let ((subject rbx)) rbx24))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (and
  (and
  (= o161 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o161
  (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o161 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o161 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o161 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o161 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o162 (ite (bvult o161 o160) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result110 (mk_bool__ref carryflag23))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= carryflag24 o162)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (= signflag24 true))
  (and
  (and
  (= o166 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o166
  (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o166 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o166 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o166 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o166 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (= signflag24 true))
  (= result111 (ite (bvugt o166 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (not (= signflag24 true))) (= result111 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= result111 true)
  (and
  (and (= o165 (ebx (let ((subject rbx)) rbx24))) (ebx__function_guard 
  o165 (let ((subject rbx)) rbx24)))
  (= o165 (readreg32 (let ((subject rbx)) rbx24)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= result111 true)
  (= o167 (ite (bvule o165 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (= result111 true)) (= o167 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= signflag24 true)
  (and
  (and (= o164 (ebx (let ((subject rbx)) rbx24))) (ebx__function_guard 
  o164 (let ((subject rbx)) rbx24)))
  (= o164 (readreg32 (let ((subject rbx)) rbx24)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= signflag24 true)
  (= result112 (ite (bvugt o164 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (= signflag24 true)) (= result112 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= result112 true)
  (and
  (and
  (= o163 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory6)))
  (readmem32__function_guard o163
  (bvsub (bvadd (let ((subject rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (= (bvand o163 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o163 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o163 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o163 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp55) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (= result112 true)
  (= o168 (ite (bvule o163 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (=> (not (= result112 true)) (= o168 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= o169 (ite (= o168 false) o167 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= result113 (mk_bool__ref overflowflag23))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= overflowflag24 
  o169)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (not
  (and (not (= zeroflag24 true))
  (= (to_int5 signflag24) (to_int5 overflowflag24))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= rdi30 (let ((subject rdi)) (mk_t__ref3 rdi29)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= rbp25 (let ((subject rbp)) (mk_t__ref3 rbp24)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= rsp56 (let ((subject rsp)) (mk_t__ref3 rsp55)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= rbx25 (let ((subject rbx)) (mk_t__ref3 rbx24)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= rax20 (mk_t__ref3 rax19))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= xmm025 (mk_t__ref3 xmm024))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= overflowflag25 (mk_bool__ref overflowflag24))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= signflag25 (mk_bool__ref signflag24))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= carryflag25 (mk_bool__ref carryflag24))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= zeroflag25 (mk_bool__ref zeroflag24))))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rdi31 rdi29)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbp26 rbp24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rsp57 rsp55)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbx26 rbx24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rax21 rax19)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= xmm026 xmm024)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= overflowflag26 overflowflag24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= signflag26 signflag24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= carryflag26 carryflag24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= zeroflag26 zeroflag24)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rdi32 rdi30)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbp27 rbp25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rsp58 rsp56)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbx27 rbx25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rax22 rax20)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= xmm027 xmm025)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= overflowflag27 overflowflag25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= signflag27 signflag25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= carryflag27 carryflag25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= zeroflag27 zeroflag25)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rdi33 rdi31)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbp28 rbp26)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rsp59 rsp57)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rbx28 rbx26)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= rax23 rax21)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))) (= xmm028 xmm026)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= overflowflag28 overflowflag26)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= signflag28 signflag26)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= carryflag28 carryflag26)))

;; H
  (assert
  (=>
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))
  (= zeroflag28 zeroflag26)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= rdi32 (let ((subject rdi)) (mk_t__ref3 rdi28)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= rbp27 (let ((subject rbp)) (mk_t__ref3 rbp22)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= rsp58 (let ((subject rsp)) (mk_t__ref3 rsp52)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= rbx27 (let ((subject rbx)) (mk_t__ref3 rbx22)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= rax22 (mk_t__ref3 rax18))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= xmm027 (mk_t__ref3 xmm022))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= overflowflag27 (mk_bool__ref overflowflag22))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= signflag27 (mk_bool__ref signflag22))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= carryflag27 (mk_bool__ref carryflag22))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= zeroflag27 (mk_bool__ref zeroflag22))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= rdi33 rdi28)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= rbp28 rbp22)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= rsp59 rsp52)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= rbx28 rbx22)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= rax23 rax18)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22)))) (= xmm028 xmm022)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= overflowflag28 overflowflag22)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= signflag28 signflag22)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= carryflag28 carryflag22)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag22 true))
  (= (to_int5 signflag22) (to_int5 overflowflag22))))
  (= zeroflag28 zeroflag22)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi34) ((_ int2bv 32) 10))
  (let ((subject rdi)) rdi34) ((_ int2bv 32) 10)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi34) ((_ int2bv 32) 10)) true))

;; H
  (assert (= result114 r15))

;; H
  (assert (= (let ((subject r15)) r151) ((_ int2bv 64) 9)))

;; H
  (assert (= result115 rsp58))

;; H
  (assert
  (= (let ((subject rsp)) rsp60) (bvsub (t__content3 rsp58) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp61) (bvadd (let ((subject rsp)) rsp60) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (= o170 (readmem64 ((_ int2bv 64) 4198768)
          (let ((subject memory)) memory6)))
  (readmem64__function_guard o170 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory6)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o170 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) ((_ int2bv 64) 4198768)))))
  (= (bvand o170 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o170 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o170 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o170 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o170 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o170 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o170 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result116 (mk_t__ref3 xmm6)))

;; H
  (assert (= xmm61 o170))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rsp)) rsp61))
  (let ((subject rsp)) rsp61)))

;; H
  (assert
  (and
  (and (= o171 (esp (let ((subject rsp)) rsp61))) (esp__function_guard 
  o171 (let ((subject rsp)) rsp61)))
  (= o171 (readreg32 (let ((subject rsp)) rsp61)))))

;; H
  (assert (= o172 (bvadd o171 ((_ int2bv 32) 24))))

;; H
  (assert (= o173 ((_ zero_extend 32) o172)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm61 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory7) 
                                                           o173))))
  (= (bvand xmm61 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory7) (bvadd 
                                                                    o173 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm61 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm61 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm61 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm61 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm61 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm61 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd o173 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o173)) (not (= i (bvadd o173 ((_ int2bv 64) 1)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 2)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 3)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 4)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 5)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 6)))))
  (not (= i (bvadd o173 ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory7) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory6) i))))))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx32) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx32) ((_ int2bv 32) 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax27 ((_ int2bv 32) 0)) rax27 ((_ int2bv 32) 0)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi40) ((_ int2bv 32) 4198688))
  (let ((subject rdi)) rdi40) ((_ int2bv 32) 4198688)))

;; H
  (assert (writereg32post__function_guard (writereg32post rax28 o181) 
  rax28 o181))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi41) ((_ int2bv 32) 4198699))
  (let ((subject rdi)) rdi41) ((_ int2bv 32) 4198699)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post rax29 ((_ int2bv 32) 1)) rax29 ((_ int2bv 32) 1)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx33))
  (let ((subject rbx)) rbx33)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx34) o188)
  (let ((subject rbx)) rbx34) o188))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx34))
  (let ((subject rbx)) rbx34)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx34))
  (let ((subject rbx)) rbx34)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx34))
  (let ((subject rbx)) rbx34)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx34))
  (let ((subject rbx)) rbx34)))

;; H
  (assert (readreg32__function_guard (readreg32 (let ((subject rbx)) rbx34))
  (let ((subject rbx)) rbx34)))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi46) ((_ int2bv 32) 10))
  (let ((subject rdi)) rdi46) ((_ int2bv 32) 10)))

;; H
  (assert (= temp___644 (t__content3 rbx27)))

;; H
  (assert (= temp___643 xmm34))

;; H
  (assert (= temp___645 (let ((subject rsp)) rsp61)))

;; H
  (assert (= temp___642 (let ((subject rsp)) rsp61)))

;; H
  (assert (= temp___640 (let ((subject rsi)) rsi5)))

;; H
  (assert (= temp___641 (let ((subject memory)) memory7)))

;; H
  (assert (= temp___638 (bool__content overflowflag27)))

;; H
  (assert (= temp___639 xmm24))

;; H
  (assert (= temp___636 (t__content3 r13)))

;; H
  (assert (= temp___637 xmm7))

;; H
  (assert (= temp___634 (bool__content signflag27)))

;; H
  (assert (= temp___635 xmm14))

;; H
  (assert (= temp___633 xmm61))

;; H
  (assert (= temp___632 (t__content3 rax22)))

;; H
  (assert (= temp___631 (let ((subject r15)) r151)))

;; H
  (assert (= temp___629 (bool__content carryflag27)))

;; H
  (assert (= temp___630 (t__content3 xmm027)))

;; H
  (assert (= temp___628 (t__content3 rbp27)))

;; H
  (assert (= temp___625 xmm5))

;; H
  (assert (= temp___626 (let ((subject rdi)) rdi34)))

;; H
  (assert (= temp___627 (t__content3 r12)))

;; H
  (assert (= temp___624 (bool__content zeroflag27)))

;; H
  (assert (= temp___623 xmm4))

;; H
  (assert (= temp___646 (let ((subject memory)) memory7)))

;; H
  (assert (= temp___622 (t__content3 r14)))

;; H
  (assert (= (let ((subject rsp)) rsp62) temp___645))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp62)))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 7)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 8)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 9)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 10)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 11)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 12)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 13)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 14)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 15)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 16)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 17)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 18)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 19)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 20)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 21)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 22)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 23)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 24)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 25)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 26)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 27)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 28)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 29)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 30)))))
  (not (= i (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 31)))))
  (= (to_rep (select (let ((subject memory)) memory8) i)) (to_rep
                                                          (select temp___646 i)))))))

;; H
  (assert
  (and
  (and
  (= o174 (readmem64 ((_ int2bv 64) 4198760)
          (let ((subject memory)) memory8)))
  (readmem64__function_guard o174 ((_ int2bv 64) 4198760)
  (let ((subject memory)) memory8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o174 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory8) ((_ int2bv 64) 4198760)))))
  (= (bvand o174 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o174 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o174 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o174 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o174 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o174 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o174 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd ((_ int2bv 64) 4198760) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result117 (mk_t__ref3 xmm71)))

;; H
  (assert (= xmm72 o174))

;; H
  (assert (= result118 (let ((subject r14)) (mk_t__ref3 r141))))

;; H
  (assert (= (let ((subject r14)) r142) ((_ int2bv 64) 10)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm72 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory9) (bvsub (bvadd 
                                                           (let ((subject 
                                                           rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand xmm72 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory9) (bvadd (bvsub (bvadd 
                                                                    (let ((subject 
                                                                    rsp))
                                                                    rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm72 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm72 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm72 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm72 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm72 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm72 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub (bvadd (let ((subject 
                                                                rsp)) 
                                                                rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp62) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory9) i)) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory8) i))))))))

;; H
  (assert (= temp___619 (let ((subject rbx)) rbx29)))

;; H
  (assert (= temp___621 (let ((subject memory)) memory9)))

;; H
  (assert (= temp___620 (let ((subject rsp)) rsp62)))

;; H
  (assert (= temp___618 xmm35))

;; H
  (assert (= temp___617 (let ((subject rsp)) rsp62)))

;; H
  (assert (= temp___615 (let ((subject rsi)) rsi6)))

;; H
  (assert (= temp___616 (let ((subject memory)) memory9)))

;; H
  (assert (= temp___613 overflowflag29))

;; H
  (assert (= temp___614 xmm25))

;; H
  (assert (= temp___611 (let ((subject r13)) r131)))

;; H
  (assert (= temp___612 xmm72))

;; H
  (assert (= temp___609 signflag29))

;; H
  (assert (= temp___610 xmm15))

;; H
  (assert (= temp___608 xmm62))

;; H
  (assert (= temp___607 rax24))

;; H
  (assert (= temp___605 carryflag29))

;; H
  (assert (= temp___606 xmm029))

;; H
  (assert (= temp___604 (let ((subject rbp)) rbp29)))

;; H
  (assert (= temp___601 xmm51))

;; H
  (assert (= temp___602 (let ((subject rdi)) rdi35)))

;; H
  (assert (= temp___603 (let ((subject r12)) r121)))

;; H
  (assert (= temp___600 zeroflag29))

;; H
  (assert (= temp___599 xmm41))

;; H
  (assert (= temp___598 (let ((subject r14)) r142)))

;; H
  (assert (= (let ((subject rsp)) rsp63) temp___620))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp63)))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 7)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 8)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 9)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 10)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 11)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 12)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 13)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 14)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 15)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 16)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 17)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 18)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 19)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 20)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 21)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 22)))))
  (not (= i (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 23)))))
  (= (to_rep (select (let ((subject memory)) memory10) i)) (to_rep
                                                           (select temp___621 i)))))))

;; H
  (assert
  (and
  (and
  (= o175 (readmem64 ((_ int2bv 64) 4198752)
          (let ((subject memory)) memory10)))
  (readmem64__function_guard o175 ((_ int2bv 64) 4198752)
  (let ((subject memory)) memory10)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o175 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory10) ((_ int2bv 64) 4198752)))))
  (= (bvand o175 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o175 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o175 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o175 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o175 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o175 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o175 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result119 (mk_t__ref3 xmm73)))

;; H
  (assert (= xmm74 o175))

;; H
  (assert (= result120 (let ((subject r13)) (mk_t__ref3 r132))))

;; H
  (assert (= (let ((subject r13)) r133) ((_ int2bv 64) 20)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm74 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory11) (bvsub (bvadd 
                                                           (let ((subject 
                                                           rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))))
  (= (bvand xmm74 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory11) (bvadd (bvsub (bvadd 
                                                                    (let ((subject 
                                                                    rsp))
                                                                    rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm74 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm74 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm74 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm74 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm74 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm74 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory11) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp63) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory11) i)) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory10) i))))))))

;; H
  (assert (= temp___595 (let ((subject rbx)) rbx30)))

;; H
  (assert (= temp___594 xmm36))

;; H
  (assert (= temp___596 (let ((subject rsp)) rsp63)))

;; H
  (assert (= temp___593 (let ((subject rsp)) rsp63)))

;; H
  (assert (= temp___591 (let ((subject rsi)) rsi7)))

;; H
  (assert (= temp___592 (let ((subject memory)) memory11)))

;; H
  (assert (= temp___589 overflowflag30))

;; H
  (assert (= temp___590 xmm26))

;; H
  (assert (= temp___597 (let ((subject memory)) memory11)))

;; H
  (assert (= temp___587 (let ((subject r13)) r133)))

;; H
  (assert (= temp___588 xmm74))

;; H
  (assert (= temp___585 signflag30))

;; H
  (assert (= temp___586 xmm16))

;; H
  (assert (= temp___584 rax25))

;; H
  (assert (= temp___582 carryflag30))

;; H
  (assert (= temp___583 xmm030))

;; H
  (assert (= temp___581 (let ((subject rbp)) rbp30)))

;; H
  (assert (= temp___578 xmm52))

;; H
  (assert (= temp___579 (let ((subject rdi)) rdi36)))

;; H
  (assert (= temp___580 (let ((subject r12)) r122)))

;; H
  (assert (= temp___577 zeroflag30))

;; H
  (assert (= temp___576 xmm42))

;; H
  (assert (= (let ((subject rsp)) rsp64) temp___596))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp64)))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 7)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 8)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 9)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 10)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 11)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 12)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 13)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 14)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 15)))))
  (= (to_rep (select (let ((subject memory)) memory12) i)) (to_rep
                                                           (select temp___597 i)))))))

;; H
  (assert
  (and
  (and
  (= o176 (readmem64 ((_ int2bv 64) 4198744)
          (let ((subject memory)) memory12)))
  (readmem64__function_guard o176 ((_ int2bv 64) 4198744)
  (let ((subject memory)) memory12)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o176 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory12) ((_ int2bv 64) 4198744)))))
  (= (bvand o176 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o176 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o176 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o176 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o176 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o176 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o176 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory12) (bvadd ((_ int2bv 64) 4198744) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result121 (mk_t__ref3 xmm75)))

;; H
  (assert (= xmm76 o176))

;; H
  (assert (= result122 (let ((subject r12)) (mk_t__ref3 r123))))

;; H
  (assert (= (let ((subject r12)) r124) ((_ int2bv 64) 10)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm76 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory13) 
                                                           (let ((subject 
                                                           rsp)) rsp64)))))
  (= (bvand xmm76 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory13) (bvadd 
                                                                    (let ((subject 
                                                                    rsp))
                                                                    rsp64) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm76 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm76 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm76 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm76 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm76 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm76 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory13) (bvadd (let ((subject rsp))
                                                   rsp64) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp64)))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp64) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory13) i)) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory12) i))))))))

;; H
  (assert (= temp___573 (let ((subject rbx)) rbx31)))

;; H
  (assert (= temp___572 xmm37))

;; H
  (assert (= temp___571 (let ((subject rsp)) rsp64)))

;; H
  (assert (= temp___569 (let ((subject memory)) memory13)))

;; H
  (assert (= temp___570 (let ((subject rsi)) rsi8)))

;; H
  (assert (= temp___567 overflowflag31))

;; H
  (assert (= temp___568 xmm27))

;; H
  (assert (= temp___565 signflag31))

;; H
  (assert (= temp___566 xmm17))

;; H
  (assert (= temp___574 (let ((subject rsp)) rsp64)))

;; H
  (assert (= temp___564 rax26))

;; H
  (assert (= temp___562 carryflag31))

;; H
  (assert (= temp___563 xmm031))

;; H
  (assert (= temp___561 (let ((subject rbp)) rbp31)))

;; H
  (assert (= temp___559 (let ((subject r12)) r124)))

;; H
  (assert (= temp___560 (let ((subject rdi)) rdi37)))

;; H
  (assert (= temp___558 zeroflag31))

;; H
  (assert (= temp___557 xmm43))

;; H
  (assert (= temp___575 (let ((subject memory)) memory13)))

;; H
  (assert (= (let ((subject rsp)) rsp65) temp___574))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp65)))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory14) i)) (to_rep
                                                           (select temp___575 i)))))))

;; H
  (assert (= result123 (let ((subject rsi)) (mk_t__ref3 rsi9))))

;; H
  (assert
  (= (let ((subject rsi)) rsi10) (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 88))))

;; H
  (assert (= result124 (let ((subject rdi)) (mk_t__ref3 rdi38))))

;; H
  (assert
  (= (let ((subject rdi)) rdi39) (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx32) ((_ int2bv 32) 0)) true))

;; H
  (assert
  (and
  (and
  (= o177 (readmem64 (let ((subject rsp)) rsp65)
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o177 (let ((subject rsp)) rsp65)
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o177 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) 
                                                          (let ((subject 
                                                          rsp)) rsp65)))))
  (= (bvand o177 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp65) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o177 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o177 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o177 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o177 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o177 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o177 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp65) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result125 (mk_t__ref3 xmm38)))

;; H
  (assert (= xmm39 o177))

;; H
  (assert (= result126 (let ((subject rbp)) (mk_t__ref3 rbp32))))

;; H
  (assert
  (= (let ((subject rbp)) rbp33) (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 88))))

;; H
  (assert
  (and
  (and
  (= o178 (readmem64
          (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o178
  (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o178 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))))
  (= (bvand o178 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o178 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o178 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o178 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o178 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o178 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o178 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result127 (mk_t__ref3 xmm28)))

;; H
  (assert (= xmm29 o178))

;; H
  (assert
  (and
  (and
  (= o179 (readmem64
          (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o179
  (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o179 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand o179 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o179 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o179 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o179 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o179 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o179 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o179 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result128 (mk_t__ref3 xmm18)))

;; H
  (assert (= xmm19 o179))

;; H
  (assert
  (and
  (and
  (= o180 (readmem64
          (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o180
  (bvsub (bvadd (let ((subject rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o180 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))))))
  (= (bvand o180 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o180 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o180 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o180 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o180 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o180 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o180 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp65) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result129 (mk_t__ref3 xmm032)))

;; H
  (assert (= xmm033 o180))

;; H
  (assert (= result130 (let ((subject rsp)) (mk_t__ref3 rsp65))))

;; H
  (assert
  (= (let ((subject rsp)) rsp66) (bvsub (let ((subject rsp)) rsp65) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp67) (bvadd (let ((subject rsp)) rsp66) ((_ int2bv 64) 8))))

;; H
  (assert (= (writereg32post rax27 ((_ int2bv 32) 0)) true))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi40) ((_ int2bv 32) 4198688)) true))

;; H
  (assert (= result131 (let ((subject rsp)) (mk_t__ref3 rsp67))))

;; H
  (assert
  (= (let ((subject rsp)) rsp68) (bvsub (let ((subject rsp)) rsp67) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp69) (bvadd (let ((subject rsp)) rsp68) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (= o181 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o181
  (bvsub (bvadd (let ((subject rsp)) rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o181 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o181 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o181 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o181 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp69) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= (writereg32post rax28 o181) true))

;; H
  (assert
  (and (and (= o182 (eax rax28)) (eax__function_guard o182 rax28))
  (= o182 ((_ extract 31 0) (bvand rax28 ((_ int2bv 64) 4294967295))))))

;; H
  (assert (= o183 (ite (= o182 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result132 (mk_bool__ref zeroflag32)))

;; H
  (assert (= zeroflag33 o183))

;; H
  (assert
  (and (and (= o184 (eax rax28)) (eax__function_guard o184 rax28))
  (= o184 ((_ extract 31 0) (bvand rax28 ((_ int2bv 64) 4294967295))))))

;; H
  (assert (= o185 (ite (bvugt o184 ((_ int2bv 32) 2147483647)) true false)))

;; H
  (assert (= result133 (mk_bool__ref signflag32)))

;; H
  (assert (= signflag33 o185))

;; H
  (assert (= result134 (mk_bool__ref carryflag32)))

;; H
  (assert (= carryflag33 (of_int 0)))

;; H
  (assert (= result135 (mk_bool__ref overflowflag32)))

;; H
  (assert (= overflowflag33 (of_int 0)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___555 (let ((subject rbx)) rbx32))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___556 (let ((subject rsp)) rsp69))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___554 (let ((subject rsp)) rsp69))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___553 overflowflag33)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___552 signflag33)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= temp___551 rax28)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___549 carryflag33)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= temp___550 xmm033)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___548 (let ((subject rbp)) rbp33))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___547 (let ((subject rdi)) rdi40))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= temp___546 zeroflag33)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (let ((subject rsp)) rsp70) temp___556)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and (not (= zeroflag34 true))
  (= (= signflag34 true) (= overflowflag34 true)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and
  (= o186 (readmem64 (let ((subject rbp)) rbp34)
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o186 (let ((subject rbp)) rbp34)
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o186 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) 
                                                          (let ((subject 
                                                          rbp)) rbp34)))))
  (= (bvand o186 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd 
                                                                   (let ((subject 
                                                                   rbp))
                                                                   rbp34) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o186 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o186 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o186 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o186 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o186 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o186 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rbp))
                                                   rbp34) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result136 (mk_t__ref3 xmm034))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= xmm035 o186)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (writereg32post (let ((subject rdi)) rdi41) ((_ int2bv 32) 4198699)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (writereg32post rax29 ((_ int2bv 32) 1)) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and (= o187 (ebx (let ((subject rbx)) rbx33))) (ebx__function_guard 
  o187 (let ((subject rbx)) rbx33)))
  (= o187 (readreg32 (let ((subject rbx)) rbx33))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o188 (bvadd o187 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (writereg32post (let ((subject rbx)) rbx34) o188) true)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result137 (let ((subject rbp)) (mk_t__ref3 rbp34)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (let ((subject rbp)) rbp35) (bvadd (let ((subject rbp)) rbp34) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result138 (let ((subject rsp)) (mk_t__ref3 rsp70)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (let ((subject rsp)) rsp71) (bvsub (let ((subject rsp)) rsp70) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= (let ((subject rsp)) rsp72) (bvadd (let ((subject rsp)) rsp71) ((_ int2bv 64) 8)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and (= o189 (ebx (let ((subject rbx)) rbx34))) (ebx__function_guard 
  o189 (let ((subject rbx)) rbx34)))
  (= o189 (readreg32 (let ((subject rbx)) rbx34))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and
  (= o190 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o190
  (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o190 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o190 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o190 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o190 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o191 (bvsub o190 o189))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o192 (ite (= o191 ((_ int2bv 32) 0)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result139 (mk_bool__ref zeroflag34))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= zeroflag35 o192)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and (= o193 (ebx (let ((subject rbx)) rbx34))) (ebx__function_guard 
  o193 (let ((subject rbx)) rbx34)))
  (= o193 (readreg32 (let ((subject rbx)) rbx34))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and
  (= o194 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o194
  (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o194 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o194 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o194 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o194 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o195 (bvsub o194 o193))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o196 (ite (bvugt o195 ((_ int2bv 32) 2147483647)) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result140 (mk_bool__ref signflag34))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= signflag35 o196)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and (= o197 (ebx (let ((subject rbx)) rbx34))) (ebx__function_guard 
  o197 (let ((subject rbx)) rbx34)))
  (= o197 (readreg32 (let ((subject rbx)) rbx34))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (and
  (and
  (= o198 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o198
  (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o198 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o198 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o198 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o198 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o199 (ite (bvult o198 o197) true false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result141 (mk_bool__ref carryflag34))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= carryflag35 o199)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (= signflag35 true))
  (and
  (and
  (= o203 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o203
  (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o203 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o203 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o203 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o203 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (= signflag35 true))
  (= result142 (ite (bvugt o203 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (not (= signflag35 true))) (= result142 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= result142 true)
  (and
  (and (= o202 (ebx (let ((subject rbx)) rbx34))) (ebx__function_guard 
  o202 (let ((subject rbx)) rbx34)))
  (= o202 (readreg32 (let ((subject rbx)) rbx34)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= result142 true)
  (= o204 (ite (bvule o202 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (= result142 true)) (= o204 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= signflag35 true)
  (and
  (and (= o201 (ebx (let ((subject rbx)) rbx34))) (ebx__function_guard 
  o201 (let ((subject rbx)) rbx34)))
  (= o201 (readreg32 (let ((subject rbx)) rbx34)))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= signflag35 true)
  (= result143 (ite (bvugt o201 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (= signflag35 true)) (= result143 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= result143 true)
  (and
  (and
  (= o200 (readmem32
          (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
          (let ((subject memory)) memory14)))
  (readmem32__function_guard o200
  (bvsub (bvadd (let ((subject rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (= (bvand o200 ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) (bvsub (bvadd 
                                                          (let ((subject 
                                                          rsp)) rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108))))))
  (= (bvand o200 ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd (bvsub (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
  (= (bvand o200 ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
  (= (bvand o200 ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (bvsub (bvadd (let ((subject 
                                                                 rsp)) 
                                                                 rsp72) ((_ int2bv 64) 152)) ((_ int2bv 64) 108)) ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (= result143 true)
  (= o205 (ite (bvule o200 ((_ int2bv 32) 2147483647)) true false)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (=> (not (= result143 true)) (= o205 false))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= o206 (ite (= o205 false) o204 true))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= result144 (mk_bool__ref overflowflag34))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= overflowflag35 
  o206)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (not
  (and (not (= zeroflag35 true))
  (= (to_int5 signflag35) (to_int5 overflowflag35))))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= rdi42 (let ((subject rdi)) (mk_t__ref3 rdi41)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= rbp36 (let ((subject rbp)) (mk_t__ref3 rbp35)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= rsp73 (let ((subject rsp)) (mk_t__ref3 rsp72)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= rbx35 (let ((subject rbx)) (mk_t__ref3 rbx34)))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= rax30 (mk_t__ref3 rax29))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= xmm036 (mk_t__ref3 xmm035))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= overflowflag36 (mk_bool__ref overflowflag35))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= signflag36 (mk_bool__ref signflag35))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= carryflag36 (mk_bool__ref carryflag35))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= zeroflag36 (mk_bool__ref zeroflag35))))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rdi43 rdi41)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbp37 rbp35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rsp74 rsp72)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbx36 rbx34)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rax31 rax29)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= xmm037 xmm035)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= overflowflag37 overflowflag35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= signflag37 signflag35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= carryflag37 carryflag35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= zeroflag37 zeroflag35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rdi44 rdi42)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbp38 rbp36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rsp75 rsp73)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbx37 rbx35)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rax32 rax30)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= xmm038 xmm036)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= overflowflag38 overflowflag36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= signflag38 signflag36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= carryflag38 carryflag36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= zeroflag38 zeroflag36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rdi45 rdi43)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbp39 rbp37)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rsp76 rsp74)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rbx38 rbx36)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= rax33 rax31)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))) (= xmm039 xmm037)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= overflowflag39 overflowflag37)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= signflag39 signflag37)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= carryflag39 carryflag37)))

;; H
  (assert
  (=>
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))
  (= zeroflag39 zeroflag37)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= rdi44 (let ((subject rdi)) (mk_t__ref3 rdi40)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= rbp38 (let ((subject rbp)) (mk_t__ref3 rbp33)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= rsp75 (let ((subject rsp)) (mk_t__ref3 rsp69)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= rbx37 (let ((subject rbx)) (mk_t__ref3 rbx32)))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= rax32 (mk_t__ref3 rax28))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= xmm038 (mk_t__ref3 xmm033))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= overflowflag38 (mk_bool__ref overflowflag33))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= signflag38 (mk_bool__ref signflag33))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= carryflag38 (mk_bool__ref carryflag33))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= zeroflag38 (mk_bool__ref zeroflag33))))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= rdi45 rdi40)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= rbp39 rbp33)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= rsp76 rsp69)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= rbx38 rbx32)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= rax33 rax28)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33)))) (= xmm039 xmm033)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= overflowflag39 overflowflag33)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= signflag39 signflag33)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= carryflag39 carryflag33)))

;; H
  (assert
  (=>
  (not
  (and (not (= zeroflag33 true))
  (= (to_int5 signflag33) (to_int5 overflowflag33))))
  (= zeroflag39 zeroflag33)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi46) ((_ int2bv 32) 10)) true))

;; H
  (assert (= result145 rsp75))

;; H
  (assert
  (= (let ((subject rsp)) rsp77) (bvsub (t__content3 rsp75) ((_ int2bv 64) 8))))

;; H
  (assert
  (= (let ((subject rsp)) rsp78) (bvadd (let ((subject rsp)) rsp77) ((_ int2bv 64) 8))))

;; H
  (assert
  (and
  (and
  (= o207 (readmem64 (let ((subject rsp)) rsp78)
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o207 (let ((subject rsp)) rsp78)
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o207 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) 
                                                          (let ((subject 
                                                          rsp)) rsp78)))))
  (= (bvand o207 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd 
                                                                   (let ((subject 
                                                                   rsp))
                                                                   rsp78) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o207 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o207 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o207 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o207 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o207 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o207 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result146 (mk_t__ref3 xmm44)))

;; H
  (assert (= xmm45 o207))

;; H
  (assert (= result147 (let ((subject r12)) (mk_t__ref3 r125))))

;; H
  (assert
  (= (let ((subject r12)) r126) (bvsub (let ((subject r12)) r125) ((_ int2bv 64) 1))))

;; H
  (assert (= result148 zeroflag38))

;; H
  (assert
  (= zeroflag40 (ite (= (let ((subject r12)) r126) ((_ int2bv 64) 0)) true
                false)))

;; H
  (assert
  (and
  (and
  (= o208 (readmem64 ((_ int2bv 64) 4198768)
          (let ((subject memory)) memory14)))
  (readmem64__function_guard o208 ((_ int2bv 64) 4198768)
  (let ((subject memory)) memory14)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o208 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject 
                                                                  memory))
                                                                  memory14) ((_ int2bv 64) 4198768)))))
  (= (bvand o208 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (let ((subject 
                                                                   memory))
                                                                   memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o208 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o208 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o208 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o208 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o208 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o208 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory14) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o209 (bvsub xmm45 o208)))

;; H
  (assert (= result149 (mk_t__ref3 xmm45)))

;; H
  (assert (= xmm46 o209))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm46 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory15) 
                                                           (let ((subject 
                                                           rsp)) rsp78)))))
  (= (bvand xmm46 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory15) (bvadd 
                                                                    (let ((subject 
                                                                    rsp))
                                                                    rsp78) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm46 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm46 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm46 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm46 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm46 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm46 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory15) (bvadd (let ((subject rsp))
                                                   rsp78) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (let ((subject rsp)) rsp78)))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (let ((subject rsp)) rsp78) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory15) i)) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory14) i))))))))

;; H
  (assert (= zeroflag40 true))

;; H
  (assert (= memory16 (let ((subject memory)) (mk_map__ref memory15))))

;; H
  (assert (= r127 (let ((subject r12)) (mk_t__ref3 r126))))

;; H
  (assert (= rdi47 (let ((subject rdi)) (mk_t__ref3 rdi46))))

;; H
  (assert (= rsi11 (let ((subject rsi)) (mk_t__ref3 rsi10))))

;; H
  (assert (= rbp40 rbp38))

;; H
  (assert (= rsp79 (let ((subject rsp)) (mk_t__ref3 rsp78))))

;; H
  (assert (= rbx39 rbx37))

;; H
  (assert (= rax34 rax32))

;; H
  (assert (= xmm47 (mk_t__ref3 xmm46)))

;; H
  (assert (= xmm310 (mk_t__ref3 xmm39)))

;; H
  (assert (= xmm210 (mk_t__ref3 xmm29)))

;; H
  (assert (= xmm110 (mk_t__ref3 xmm19)))

;; H
  (assert (= xmm040 xmm038))

;; H
  (assert (= overflowflag40 overflowflag38))

;; H
  (assert (= signflag40 signflag38))

;; H
  (assert (= carryflag40 carryflag38))

;; H
  (assert (= zeroflag41 (mk_bool__ref zeroflag40)))

;; H
  (assert (= memory17 memory15))

;; H
  (assert (= r128 r126))

;; H
  (assert (= rdi48 rdi46))

;; H
  (assert (= rsi12 rsi10))

;; H
  (assert (= rbp41 rbp39))

;; H
  (assert (= rsp80 rsp78))

;; H
  (assert (= rbx40 rbx38))

;; H
  (assert (= rax35 rax33))

;; H
  (assert (= xmm48 xmm46))

;; H
  (assert (= xmm311 xmm39))

;; H
  (assert (= xmm211 xmm29))

;; H
  (assert (= xmm111 xmm19))

;; H
  (assert (= xmm041 xmm039))

;; H
  (assert (= overflowflag41 overflowflag39))

;; H
  (assert (= signflag41 signflag39))

;; H
  (assert (= carryflag41 carryflag39))

;; H
  (assert (= zeroflag42 zeroflag40))

;; H
  (assert (= memory18 memory16))

;; H
  (assert (= r129 r127))

;; H
  (assert (= rdi49 rdi47))

;; H
  (assert (= rsi13 rsi11))

;; H
  (assert (= rbp42 rbp40))

;; H
  (assert (= rsp81 rsp79))

;; H
  (assert (= rbx41 rbx39))

;; H
  (assert (= rax36 rax34))

;; H
  (assert (= xmm49 xmm47))

;; H
  (assert (= xmm312 xmm310))

;; H
  (assert (= xmm212 xmm210))

;; H
  (assert (= xmm112 xmm110))

;; H
  (assert (= xmm042 xmm040))

;; H
  (assert (= overflowflag42 overflowflag40))

;; H
  (assert (= signflag42 signflag40))

;; H
  (assert (= carryflag42 carryflag40))

;; H
  (assert (= zeroflag43 zeroflag41))

;; H
  (assert (= memory19 memory17))

;; H
  (assert (= r1210 r128))

;; H
  (assert (= rdi50 rdi48))

;; H
  (assert (= rsi14 rsi12))

;; H
  (assert (= rbp43 rbp41))

;; H
  (assert (= rsp82 rsp80))

;; H
  (assert (= rbx42 rbx40))

;; H
  (assert (= rax37 rax35))

;; H
  (assert (= xmm410 xmm48))

;; H
  (assert (= xmm313 xmm311))

;; H
  (assert (= xmm213 xmm211))

;; H
  (assert (= xmm113 xmm111))

;; H
  (assert (= xmm043 xmm041))

;; H
  (assert (= overflowflag43 overflowflag41))

;; H
  (assert (= signflag43 signflag41))

;; H
  (assert (= carryflag43 carryflag41))

;; H
  (assert (= zeroflag44 zeroflag42))

;; H
  (assert
  (and
  (and (= o210 (readmem64 ((_ int2bv 64) 4198856) (map__content memory18)))
  (readmem64__function_guard o210 ((_ int2bv 64) 4198856)
  (map__content memory18)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o210 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory18) ((_ int2bv 64) 4198856)))))
  (= (bvand o210 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o210 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o210 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o210 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o210 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o210 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o210 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd ((_ int2bv 64) 4198856) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result150 (mk_t__ref3 xmm53)))

;; H
  (assert (= xmm54 o210))

;; H
  (assert (= result151 (let ((subject r13)) (mk_t__ref3 r134))))

;; H
  (assert
  (= (let ((subject r13)) r135) (bvsub (let ((subject r13)) r134) ((_ int2bv 64) 1))))

;; H
  (assert (= result152 zeroflag43))

;; H
  (assert
  (= zeroflag45 (ite (= (let ((subject r13)) r135) ((_ int2bv 64) 0)) true
                false)))

;; H
  (assert
  (and
  (and
  (= o211 (readmem64
          (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))
          (map__content memory18)))
  (readmem64__function_guard o211
  (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))
  (map__content memory18)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o211 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory18) (bvsub (bvadd 
                                                          (t__content3 
                                                          rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))))
  (= (bvand o211 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory18) (bvadd (bvsub (bvadd 
                                                                   (t__content3
                                                                   rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o211 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o211 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o211 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o211 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o211 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o211 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory18) (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o212 (bvadd xmm54 o211)))

;; H
  (assert (= result153 (mk_t__ref3 xmm54)))

;; H
  (assert (= xmm55 o212))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm55 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory20) (bvsub (bvadd 
                                                           (t__content3
                                                           rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))))
  (= (bvand xmm55 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory20) (bvadd (bvsub (bvadd 
                                                                    (t__content3
                                                                    rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm55 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm55 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm55 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm55 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm55 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm55 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory20) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp81) ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory20) i)) (to_rep
                                                           (select (map__content
                                                                   memory18) i))))))))

;; H
  (assert (= zeroflag45 true))

;; H
  (assert (= memory21 (let ((subject memory)) (mk_map__ref memory20))))

;; H
  (assert (= r136 (let ((subject r13)) (mk_t__ref3 r135))))

;; H
  (assert (= r1211 r129))

;; H
  (assert (= rdi51 rdi49))

;; H
  (assert (= rsi15 rsi13))

;; H
  (assert (= rbp44 rbp42))

;; H
  (assert (= rsp83 rsp81))

;; H
  (assert (= rbx43 rbx41))

;; H
  (assert (= rax38 rax36))

;; H
  (assert (= xmm77 (mk_t__ref3 xmm76)))

;; H
  (assert (= xmm56 (mk_t__ref3 xmm55)))

;; H
  (assert (= xmm411 xmm49))

;; H
  (assert (= xmm314 xmm312))

;; H
  (assert (= xmm214 xmm212))

;; H
  (assert (= xmm114 xmm112))

;; H
  (assert (= xmm044 xmm042))

;; H
  (assert (= overflowflag44 overflowflag42))

;; H
  (assert (= signflag44 signflag42))

;; H
  (assert (= carryflag44 carryflag42))

;; H
  (assert (= zeroflag46 (mk_bool__ref zeroflag45)))

;; H
  (assert (= memory22 memory20))

;; H
  (assert (= r137 r135))

;; H
  (assert (= r1212 r1210))

;; H
  (assert (= rdi52 rdi50))

;; H
  (assert (= rsi16 rsi14))

;; H
  (assert (= rbp45 rbp43))

;; H
  (assert (= rsp84 rsp82))

;; H
  (assert (= rbx44 rbx42))

;; H
  (assert (= rax39 rax37))

;; H
  (assert (= xmm78 xmm76))

;; H
  (assert (= xmm57 xmm55))

;; H
  (assert (= xmm412 xmm410))

;; H
  (assert (= xmm315 xmm313))

;; H
  (assert (= xmm215 xmm213))

;; H
  (assert (= xmm115 xmm113))

;; H
  (assert (= xmm045 xmm043))

;; H
  (assert (= overflowflag45 overflowflag43))

;; H
  (assert (= signflag45 signflag43))

;; H
  (assert (= carryflag45 carryflag43))

;; H
  (assert (= zeroflag47 zeroflag45))

;; H
  (assert (= memory23 memory21))

;; H
  (assert (= r138 r136))

;; H
  (assert (= r1213 r1211))

;; H
  (assert (= rdi53 rdi51))

;; H
  (assert (= rsi17 rsi15))

;; H
  (assert (= rbp46 rbp44))

;; H
  (assert (= rsp85 rsp83))

;; H
  (assert (= rbx45 rbx43))

;; H
  (assert (= rax40 rax38))

;; H
  (assert (= xmm79 xmm77))

;; H
  (assert (= xmm58 xmm56))

;; H
  (assert (= xmm413 xmm411))

;; H
  (assert (= xmm316 xmm314))

;; H
  (assert (= xmm216 xmm214))

;; H
  (assert (= xmm116 xmm114))

;; H
  (assert (= xmm046 xmm044))

;; H
  (assert (= overflowflag46 overflowflag44))

;; H
  (assert (= signflag46 signflag44))

;; H
  (assert (= carryflag46 carryflag44))

;; H
  (assert (= zeroflag48 zeroflag46))

;; H
  (assert (= memory24 memory22))

;; H
  (assert (= r139 r137))

;; H
  (assert (= r1214 r1212))

;; H
  (assert (= rdi54 rdi52))

;; H
  (assert (= rsi18 rsi16))

;; H
  (assert (= rbp47 rbp45))

;; H
  (assert (= rsp86 rsp84))

;; H
  (assert (= rbx46 rbx44))

;; H
  (assert (= rax41 rax39))

;; H
  (assert (= xmm710 xmm78))

;; H
  (assert (= xmm59 xmm57))

;; H
  (assert (= xmm414 xmm412))

;; H
  (assert (= xmm317 xmm315))

;; H
  (assert (= xmm217 xmm215))

;; H
  (assert (= xmm117 xmm115))

;; H
  (assert (= xmm047 xmm045))

;; H
  (assert (= overflowflag47 overflowflag45))

;; H
  (assert (= signflag47 signflag45))

;; H
  (assert (= carryflag47 carryflag45))

;; H
  (assert (= zeroflag49 zeroflag47))

;; H
  (assert
  (and
  (and
  (= o213 (readmem64
          (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))
          (map__content memory23)))
  (readmem64__function_guard o213
  (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))
  (map__content memory23)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o213 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory23) (bvsub (bvadd 
                                                          (t__content3 
                                                          rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand o213 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory23) (bvadd (bvsub (bvadd 
                                                                   (t__content3
                                                                   rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o213 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o213 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o213 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o213 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o213 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o213 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result154 (mk_t__ref3 xmm63)))

;; H
  (assert (= xmm64 o213))

;; H
  (assert (= result155 (let ((subject r14)) (mk_t__ref3 r143))))

;; H
  (assert
  (= (let ((subject r14)) r144) (bvsub (let ((subject r14)) r143) ((_ int2bv 64) 1))))

;; H
  (assert (= result156 zeroflag48))

;; H
  (assert
  (= zeroflag50 (ite (= (let ((subject r14)) r144) ((_ int2bv 64) 0)) true
                false)))

;; H
  (assert
  (and
  (and (= o214 (readmem64 ((_ int2bv 64) 4198768) (map__content memory23)))
  (readmem64__function_guard o214 ((_ int2bv 64) 4198768)
  (map__content memory23)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o214 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory23) ((_ int2bv 64) 4198768)))))
  (= (bvand o214 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o214 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o214 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o214 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o214 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o214 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o214 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory23) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o215 (bvsub xmm64 o214)))

;; H
  (assert (= result157 (mk_t__ref3 xmm64)))

;; H
  (assert (= xmm65 o215))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm65 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject 
                                                                   memory))
                                                                   memory25) (bvsub (bvadd 
                                                           (t__content3
                                                           rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand xmm65 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select 
                                                                    (let ((subject 
                                                                    memory))
                                                                    memory25) (bvadd (bvsub (bvadd 
                                                                    (t__content3
                                                                    rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm65 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm65 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm65 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm65 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm65 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm65 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory25) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp85) ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory25) i)) (to_rep
                                                           (select (map__content
                                                                   memory23) i))))))))

;; H
  (assert (= zeroflag50 true))

;; H
  (assert (= memory26 (let ((subject memory)) (mk_map__ref memory25))))

;; H
  (assert (= r145 (let ((subject r14)) (mk_t__ref3 r144))))

;; H
  (assert (= r1310 r138))

;; H
  (assert (= r1215 r1213))

;; H
  (assert (= rdi55 rdi53))

;; H
  (assert (= rsi19 rsi17))

;; H
  (assert (= rbp48 rbp46))

;; H
  (assert (= rsp87 rsp85))

;; H
  (assert (= rbx47 rbx45))

;; H
  (assert (= rax42 rax40))

;; H
  (assert (= xmm711 xmm79))

;; H
  (assert (= xmm66 (mk_t__ref3 xmm65)))

;; H
  (assert (= xmm510 xmm58))

;; H
  (assert (= xmm415 xmm413))

;; H
  (assert (= xmm318 xmm316))

;; H
  (assert (= xmm218 xmm216))

;; H
  (assert (= xmm118 xmm116))

;; H
  (assert (= xmm048 xmm046))

;; H
  (assert (= overflowflag48 overflowflag46))

;; H
  (assert (= signflag48 signflag46))

;; H
  (assert (= carryflag48 carryflag46))

;; H
  (assert (= zeroflag51 (mk_bool__ref zeroflag50)))

;; H
  (assert (= memory27 memory25))

;; H
  (assert (= r146 r144))

;; H
  (assert (= r1311 r139))

;; H
  (assert (= r1216 r1214))

;; H
  (assert (= rdi56 rdi54))

;; H
  (assert (= rsi20 rsi18))

;; H
  (assert (= rbp49 rbp47))

;; H
  (assert (= rsp88 rsp86))

;; H
  (assert (= rbx48 rbx46))

;; H
  (assert (= rax43 rax41))

;; H
  (assert (= xmm712 xmm710))

;; H
  (assert (= xmm67 xmm65))

;; H
  (assert (= xmm511 xmm59))

;; H
  (assert (= xmm416 xmm414))

;; H
  (assert (= xmm319 xmm317))

;; H
  (assert (= xmm219 xmm217))

;; H
  (assert (= xmm119 xmm117))

;; H
  (assert (= xmm049 xmm047))

;; H
  (assert (= overflowflag49 overflowflag47))

;; H
  (assert (= signflag49 signflag47))

;; H
  (assert (= carryflag49 carryflag47))

;; H
  (assert (= zeroflag52 zeroflag50))

;; H
  (assert (= memory28 memory26))

;; H
  (assert (= r147 r145))

;; H
  (assert (= r1312 r1310))

;; H
  (assert (= r1217 r1215))

;; H
  (assert (= rdi57 rdi55))

;; H
  (assert (= rsi21 rsi19))

;; H
  (assert (= rbp50 rbp48))

;; H
  (assert (= rsp89 rsp87))

;; H
  (assert (= rbx49 rbx47))

;; H
  (assert (= rax44 rax42))

;; H
  (assert (= xmm713 xmm711))

;; H
  (assert (= xmm68 xmm66))

;; H
  (assert (= xmm512 xmm510))

;; H
  (assert (= xmm417 xmm415))

;; H
  (assert (= xmm320 xmm318))

;; H
  (assert (= xmm220 xmm218))

;; H
  (assert (= xmm120 xmm118))

;; H
  (assert (= xmm050 xmm048))

;; H
  (assert (= overflowflag50 overflowflag48))

;; H
  (assert (= signflag50 signflag48))

;; H
  (assert (= carryflag50 carryflag48))

;; H
  (assert (= zeroflag53 zeroflag51))

;; H
  (assert (= memory29 memory27))

;; H
  (assert (= r148 r146))

;; H
  (assert (= r1313 r1311))

;; H
  (assert (= r1218 r1216))

;; H
  (assert (= rdi58 rdi56))

;; H
  (assert (= rsi22 rsi20))

;; H
  (assert (= rbp51 rbp49))

;; H
  (assert (= rsp90 rsp88))

;; H
  (assert (= rbx50 rbx48))

;; H
  (assert (= rax45 rax43))

;; H
  (assert (= xmm714 xmm712))

;; H
  (assert (= xmm69 xmm67))

;; H
  (assert (= xmm513 xmm511))

;; H
  (assert (= xmm418 xmm416))

;; H
  (assert (= xmm321 xmm319))

;; H
  (assert (= xmm221 xmm219))

;; H
  (assert (= xmm121 xmm119))

;; H
  (assert (= xmm051 xmm049))

;; H
  (assert (= overflowflag51 overflowflag49))

;; H
  (assert (= signflag51 signflag49))

;; H
  (assert (= carryflag51 carryflag49))

;; H
  (assert (= zeroflag54 zeroflag52))

;; H
  (assert
  (and
  (and (= o216 (readmem64 ((_ int2bv 64) 4198768) (map__content memory28)))
  (readmem64__function_guard o216 ((_ int2bv 64) 4198768)
  (map__content memory28)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o216 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory28) ((_ int2bv 64) 4198768)))))
  (= (bvand o216 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o216 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o216 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o216 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o216 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o216 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o216 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result158 xmm713))

;; H
  (assert (= xmm715 o216))

;; H
  (assert (= result159 (let ((subject r15)) (mk_t__ref3 r152))))

;; H
  (assert
  (= (let ((subject r15)) r153) (bvsub (let ((subject r15)) r152) ((_ int2bv 64) 1))))

;; H
  (assert (= result160 zeroflag53))

;; H
  (assert
  (= zeroflag55 (ite (= (let ((subject r15)) r153) ((_ int2bv 64) 0)) true
                false)))

;; H
  (assert
  (and
  (and
  (= o217 (readmem64
          (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))
          (map__content memory28)))
  (readmem64__function_guard o217
  (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))
  (map__content memory28)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o217 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (map__content
                                                                  memory28) (bvsub (bvadd 
                                                          (t__content3 
                                                          rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))))))
  (= (bvand o217 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select 
                                                                   (map__content
                                                                   memory28) (bvadd (bvsub (bvadd 
                                                                   (t__content3
                                                                   rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o217 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o217 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o217 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o217 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o217 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o217 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (map__content memory28) (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o218 (bvadd xmm715 o217)))

;; H
  (assert (= result161 (mk_t__ref3 xmm715)))

;; H
  (assert (= xmm716 o218))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm716 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                            (select (let ((subject 
                                                                    memory))
                                                                    memory30) (bvsub (bvadd 
                                                            (t__content3
                                                            rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))))))
  (= (bvand xmm716 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm716 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm716 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm716 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm716 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm716 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm716 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56) 
  (to_rep
  (select (let ((subject memory)) memory30) (bvadd (bvsub (bvadd (t__content3
                                                                 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (t__content3 rsp89) ((_ int2bv 64) 152)) ((_ int2bv 64) 128)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory30) i)) (to_rep
                                                           (select (map__content
                                                                   memory28) i))))))))

;; H
  (assert (= zeroflag55 true))

;; H
  (assert (= memory31 (let ((subject memory)) (mk_map__ref memory30))))

;; H
  (assert (= r154 (let ((subject r15)) (mk_t__ref3 r153))))

;; H
  (assert (= r149 r147))

;; H
  (assert (= r1314 r1312))

;; H
  (assert (= r1219 r1217))

;; H
  (assert (= rdi59 rdi57))

;; H
  (assert (= rsi23 rsi21))

;; H
  (assert (= rbp52 rbp50))

;; H
  (assert (= rsp91 rsp89))

;; H
  (assert (= rbx51 rbx49))

;; H
  (assert (= rax46 rax44))

;; H
  (assert (= xmm717 (mk_t__ref3 xmm716)))

;; H
  (assert (= xmm610 xmm68))

;; H
  (assert (= xmm514 xmm512))

;; H
  (assert (= xmm419 xmm417))

;; H
  (assert (= xmm322 xmm320))

;; H
  (assert (= xmm222 xmm220))

;; H
  (assert (= xmm122 xmm120))

;; H
  (assert (= xmm052 xmm050))

;; H
  (assert (= overflowflag52 overflowflag50))

;; H
  (assert (= signflag52 signflag50))

;; H
  (assert (= carryflag52 carryflag50))

;; H
  (assert (= zeroflag56 (mk_bool__ref zeroflag55)))

;; H
  (assert (= memory32 memory30))

;; H
  (assert (= r155 r153))

;; H
  (assert (= r1410 r148))

;; H
  (assert (= r1315 r1313))

;; H
  (assert (= r1220 r1218))

;; H
  (assert (= rdi60 rdi58))

;; H
  (assert (= rsi24 rsi22))

;; H
  (assert (= rbp53 rbp51))

;; H
  (assert (= rsp92 rsp90))

;; H
  (assert (= rbx52 rbx50))

;; H
  (assert (= rax47 rax45))

;; H
  (assert (= xmm718 xmm716))

;; H
  (assert (= xmm611 xmm69))

;; H
  (assert (= xmm515 xmm513))

;; H
  (assert (= xmm420 xmm418))

;; H
  (assert (= xmm323 xmm321))

;; H
  (assert (= xmm223 xmm221))

;; H
  (assert (= xmm123 xmm121))

;; H
  (assert (= xmm053 xmm051))

;; H
  (assert (= overflowflag53 overflowflag51))

;; H
  (assert (= signflag53 signflag51))

;; H
  (assert (= carryflag53 carryflag51))

;; H
  (assert (= zeroflag57 zeroflag55))

;; H
  (assert (= memory33 memory31))

;; H
  (assert (= r156 r154))

;; H
  (assert (= r1411 r149))

;; H
  (assert (= r1316 r1314))

;; H
  (assert (= r1221 r1219))

;; H
  (assert (= rdi61 rdi59))

;; H
  (assert (= rsi25 rsi23))

;; H
  (assert (= rbp54 rbp52))

;; H
  (assert (= rsp93 rsp91))

;; H
  (assert (= rbx53 rbx51))

;; H
  (assert (= rax48 rax46))

;; H
  (assert (= xmm719 xmm717))

;; H
  (assert (= xmm612 xmm610))

;; H
  (assert (= xmm516 xmm514))

;; H
  (assert (= xmm421 xmm419))

;; H
  (assert (= xmm324 xmm322))

;; H
  (assert (= xmm224 xmm222))

;; H
  (assert (= xmm124 xmm122))

;; H
  (assert (= xmm054 xmm052))

;; H
  (assert (= overflowflag54 overflowflag52))

;; H
  (assert (= signflag54 signflag52))

;; H
  (assert (= carryflag54 carryflag52))

;; H
  (assert (= zeroflag58 zeroflag56))

;; H
  (assert (= memory34 memory32))

;; H
  (assert (= r157 r155))

;; H
  (assert (= r1412 r1410))

;; H
  (assert (= r1317 r1315))

;; H
  (assert (= r1222 r1220))

;; H
  (assert (= rdi62 rdi60))

;; H
  (assert (= rsi26 rsi24))

;; H
  (assert (= rbp55 rbp53))

;; H
  (assert (= rsp94 rsp92))

;; H
  (assert (= rbx54 rbx52))

;; H
  (assert (= rax49 rax47))

;; H
  (assert (= xmm720 xmm718))

;; H
  (assert (= xmm613 xmm611))

;; H
  (assert (= xmm517 xmm515))

;; H
  (assert (= xmm422 xmm420))

;; H
  (assert (= xmm325 xmm323))

;; H
  (assert (= xmm225 xmm223))

;; H
  (assert (= xmm125 xmm123))

;; H
  (assert (= xmm055 xmm053))

;; H
  (assert (= overflowflag55 overflowflag53))

;; H
  (assert (= signflag55 signflag53))

;; H
  (assert (= carryflag55 carryflag53))

;; H
  (assert (= zeroflag59 zeroflag57))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi63) ((_ int2bv 32) 4198544))
  (let ((subject rdi)) rdi63) ((_ int2bv 32) 4198544)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi63) ((_ int2bv 32) 4198544)) true))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rbx)) rbx55) ((_ int2bv 32) 0))
  (let ((subject rbx)) rbx55) ((_ int2bv 32) 0)))

;; H
  (assert
  (= (writereg32post (let ((subject rbx)) rbx55) ((_ int2bv 32) 0)) true))

;; H
  (assert
  (and
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not
  (= i (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 152)) ((_ int2bv 64) 104)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory35) i)) (to_rep
                                                           (select (map__content
                                                                   memory33) i))))))
  (= (let ((subject rsp)) rsp95) (t__content3 rsp93))))

;; H
  (assert (= result162 (let ((subject rsi)) (mk_t__ref3 rsi27))))

;; H
  (assert
  (= (let ((subject rsi)) rsi28) (bvadd (let ((subject rsp)) rsp95) ((_ int2bv 64) 48))))

;; H
  (assert (writereg32post__function_guard
  (writereg32post (let ((subject rdi)) rdi64) ((_ int2bv 32) 1072497001))
  (let ((subject rdi)) rdi64) ((_ int2bv 32) 1072497001)))

;; H
  (assert
  (= (writereg32post (let ((subject rdi)) rdi64) ((_ int2bv 32) 1072497001)) true))

;; H
  (assert (writereg16post__function_guard
  (writereg16post (let ((subject rbx)) rbx56) (let ((subject rbx)) rbx57)
  ((_ int2bv 16) 361)) (let ((subject rbx)) rbx56)
  (let ((subject rbx)) rbx57) ((_ int2bv 16) 361)))

;; H
  (assert
  (= (writereg16post (let ((subject rbx)) rbx56) (let ((subject rbx)) rbx57)
     ((_ int2bv 16) 361)) true))

;; H
  (assert (= result163 (let ((subject rsp)) (mk_t__ref3 rsp95))))

;; H
  (assert
  (= (let ((subject rsp)) rsp96) (bvsub (let ((subject rsp)) rsp95) ((_ int2bv 64) 8))))

;; H
  (assert (inrange64__function_guard
  (inrange64 (let ((subject rsi)) rsi28)
  (bvsub (let ((subject rsp)) rsp96) ((_ int2bv 64) 7)) ((_ int2bv 64) 15))
  (let ((subject rsi)) rsi28)
  (bvsub (let ((subject rsp)) rsp96) ((_ int2bv 64) 7)) ((_ int2bv 64) 15)))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not
  (not
  (= (inrange64 (let ((subject rsi)) rsi28)
     (bvsub (let ((subject rsp)) rsp96) ((_ int2bv 64) 7))
     ((_ int2bv 64) 15)) true))))
(check-sat)
