;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort element 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (element element) Bool)

(declare-fun dummy2 () element)

(declare-datatypes ()
((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 100)) (in_range3
                                      temp___expr_136)))

(declare-sort telementarrayC 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (telementarrayC telementarrayC) Bool)

(declare-fun dummy3 () telementarrayC)

(declare-datatypes ()
((telementarrayC__ref
 (mk_telementarrayC__ref (telementarrayC__content telementarrayC)))))
(define-fun telementarrayC__ref___projection ((a telementarrayC__ref)) telementarrayC 
  (telementarrayC__content a))

(declare-fun to_rep (telementarrayC) Int)

(declare-fun of_rep (Int) telementarrayC)

;; inversion_axiom
  (assert
  (forall ((x telementarrayC))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x telementarrayC)) (! (in_range4
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int telementarrayC))))))
(declare-fun slide ((Array Int telementarrayC) Int
  Int) (Array Int telementarrayC))

;; slide_eq
  (assert
  (forall ((a (Array Int telementarrayC)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int telementarrayC)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int telementarrayC) Int Int
  (Array Int telementarrayC) Int Int) (Array Int telementarrayC))

;; concat_def
  (assert
  (forall ((a (Array Int telementarrayC)) (b (Array Int telementarrayC)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (telementarrayC Int) (Array Int telementarrayC))

;; singleton_def
  (assert
  (forall ((v telementarrayC))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int telementarrayC)) (a__first Int)
  (a__last Int) (b (Array Int telementarrayC)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int telementarrayC)) (b (Array Int telementarrayC)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int telementarrayC) Int Int
  (Array Int telementarrayC) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int telementarrayC)) (b (Array Int telementarrayC)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int telementarrayC)) (b (Array Int telementarrayC)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int telementarrayC)) (b (Array Int telementarrayC)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun a () (Array Int telementarrayC))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort t1b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (t1b t1b) Bool)

(declare-fun dummy4 () t1b)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a1 t1b__ref)) t1b (t1b__content a1))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun sum () Int)

(declare-fun max () Int)

(declare-fun i () Int)

(declare-fun temp___151 () Int)

(declare-fun temp___150 () Int)

(declare-fun temp___149 () Int)

(declare-fun o () Int)

(declare-fun result () Int)

(declare-fun sum1 () Int)

(declare-fun result1 () Int)

(declare-fun max1 () Int)

(declare-fun result2 () Int)

(declare-fun i1 () Int)

(declare-fun sum2 () Int)

(declare-fun max2 () Int)

(declare-fun i2 () Int)

(declare-fun result3 () Int)

(declare-fun sum3 () Int)

(declare-fun result4 () Int)

(declare-fun max3 () Int)

(declare-fun sum4 () Int)

(declare-fun max4 () Int)

(declare-fun i3 () Int)

(declare-fun sum5 () Int)

(declare-fun max5 () Int)

(declare-fun i4 () Int)

(declare-fun sum6 () Int)

(declare-fun max6 () Int)

(declare-fun i5 () Int)

(declare-fun sum7 () Int)

(declare-fun max7 () Int)

(declare-fun i6 () Int)

(declare-fun sum8 () Int)

(declare-fun max8 () Int)

(declare-fun i7 () Int)

(declare-fun sum9 () Int)

(declare-fun max9 () Int)

(declare-fun i8 () Int)

(define-fun max10 () int__ref (mk_int__ref max6))

(define-fun sum10 () int__ref (mk_int__ref sum6))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 sum)))

;; H
  (assert (=> (<= 0 100) (in_range3 max)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref sum)))

;; H
  (assert (= sum1 0))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref max)))

;; H
  (assert (= max1 0))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___151 i1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___150 max1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___149 sum1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (<= sum2 (* (- i2 1) max2))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range2 sum2))
  (=> (<= 0 100) (in_range3 max2))) (=> (<= 1 100) (in_range5 i2)))
  (and (<= 1 i2) (<= i2 100)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (and (= o (+ sum2 (to_rep (select a i2)))) (in_range1
  (+ sum2 (to_rep (select a i2)))))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum2 result3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum3 o)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (=> (< max2 (to_rep (select a i2))) (= max2 result4))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (=> (< max2 (to_rep (select a i2))) (= max3 (to_rep (select a i2))))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (=> (not (< max2 (to_rep (select a i2)))) (= max3 max2))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (<= sum3 (* i2 max3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 100)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= max3 max4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum3 sum4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i4 i2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= max5 max3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum5 sum3)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= max10 (mk_int__ref max4))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum10 (mk_int__ref sum4))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i6 i4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= max7 max5)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= sum7 sum5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= max1 max6)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= sum1 sum6)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= max7 max1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= sum7 sum1)))

;; H
  (assert (= i7 i5))

;; H
  (assert (= (mk_int__ref max8) max10))

;; H
  (assert (= (mk_int__ref sum8) sum10))

;; H
  (assert (= i8 i6))

;; H
  (assert (= max9 max7))

;; H
  (assert (= sum9 sum7))

(assert
;; WP_parameter_def
 ;; File "maxandsum.ads", line 5, characters 0-0
  (not (<= sum8 (* 100 max8))))
(check-sat)
