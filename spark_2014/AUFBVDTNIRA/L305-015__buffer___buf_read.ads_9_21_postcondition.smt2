;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort character 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-fun dummy () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range temp___expr_63)))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun valid (Int) Bool)

(declare-fun valid__function_guard (Bool Int) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun valid_state ((Array Int character) Int Int) Bool)

(declare-fun valid_state__function_guard (Bool (Array Int character) Int
  Int) Bool)

;; valid_state__def_axiom
  (assert
  (forall ((buf_read__buffer (Array Int character)))
  (forall ((buf_read__pointer Int) (buf_read__max_read Int))
  (! (=
     (= (valid_state buf_read__buffer buf_read__pointer buf_read__max_read) true)
     (and (<= buf_read__pointer buf_read__max_read)
     (forall ((index Int))
     (=> (and (<= 1 index) (<= index buf_read__max_read))
     (= (valid (to_rep (select buf_read__buffer index))) true))))) :pattern (
  (valid_state buf_read__buffer buf_read__pointer buf_read__max_read)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort tindex_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (tindex_typeB tindex_typeB) Bool)

(declare-fun dummy1 () tindex_typeB)

(declare-datatypes ()
((tindex_typeB__ref
 (mk_tindex_typeB__ref (tindex_typeB__content tindex_typeB)))))
(define-fun tindex_typeB__ref___projection ((a tindex_typeB__ref)) tindex_typeB 
  (tindex_typeB__content a))

(declare-fun to_rep1 (tindex_typeB) Int)

(declare-fun of_rep1 (Int) tindex_typeB)

;; inversion_axiom
  (assert
  (forall ((x tindex_typeB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tindex_typeB)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort real_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (real_index_type real_index_type) Bool)

(declare-fun dummy2 () real_index_type)

(declare-datatypes ()
((real_index_type__ref
 (mk_real_index_type__ref (real_index_type__content real_index_type)))))
(define-fun real_index_type__ref___projection ((a real_index_type__ref)) real_index_type 
  (real_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 1 1000)) (in_range2
                                      temp___expr_144)))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (index_type index_type) Bool)

(declare-fun dummy3 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort t 0)

(declare-fun first (t) tindex_typeB)

(declare-fun last (t) tindex_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((buffer_type__ref (mk_buffer_type__ref (buffer_type__content us_t)))))
(define-fun buffer_type__ref___projection ((a buffer_type__ref)) us_t 
  (buffer_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_138 Int)
  (temp___is_init_135 Bool) (temp___skip_constant_136 Bool)
  (temp___do_toplevel_137 Bool)) Bool (=>
                                      (or (= temp___is_init_135 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_138)))

(define-fun dynamic_invariant3 ((temp___expr_150 us_t)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (not (= temp___skip_constant_148 true))
                                      (dynamic_property (- 2147483648)
                                      2147483647 (first1 temp___expr_150)
                                      (last1 temp___expr_150))))

(declare-fun c () Int)

(declare-fun buffer () (Array Int character))

(declare-fun pointer () Int)

(declare-fun max_read () Int)

(declare-fun o () tindex_typeB)

(declare-fun o1 () tindex_typeB)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun buffer1 () (Array Int character))

(declare-fun max_read1 () Int)

(declare-fun result () Int)

(declare-fun c1 () Int)

(declare-fun buf_read__read__count () Int)

(declare-fun buf_read__read__b () (Array Int character))

(declare-fun result1 () (Array Int character))

(declare-fun buffer2 () (Array Int character))

(declare-fun result2 () Int)

(declare-fun max_read2 () Int)

(declare-fun result3 () Int)

(declare-fun pointer1 () Int)

(declare-fun result4 () Int)

(declare-fun pointer2 () Int)

(declare-fun c2 () Int)

(declare-fun buffer3 () (Array Int character))

(declare-fun pointer3 () Int)

(declare-fun max_read3 () Int)

(declare-fun c3 () Int)

(declare-fun buffer4 () (Array Int character))

(declare-fun pointer4 () Int)

(declare-fun max_read4 () Int)

;; H
  (assert (in_range2 pointer))

;; H
  (assert (in_range2 max_read))

;; H
  (assert (=> (<= 0 255) (in_range c)))

;; H
  (assert (= (valid_state buffer pointer max_read) true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref c)))

;; H
  (assert (= c1 (to_rep (select buffer pointer))))

;; H
  (assert (=> (= pointer max_read) (= (to_rep1 o1) 1000)))

;; H
  (assert (=> (= pointer max_read) (= (to_rep1 o) 1)))

;; H
  (assert
  (=> (= pointer max_read)
  (and
  (and
  (and (<= (to_rep1 o) buf_read__read__count)
  (<= buf_read__read__count (to_rep1 o1)))
  (forall ((index Int))
  (=>
  (and (<= (to_rep1 o) index)
  (<= index (- (+ (to_rep1 o) buf_read__read__count) 1)))
  (= (valid (to_rep (select buf_read__read__b index))) true)))) (in_range3
  buf_read__read__count))))

;; H
  (assert
  (=> (= pointer max_read) (= (mk_map__ref result1) (mk_map__ref buffer))))

;; H
  (assert
  (=> (= pointer max_read)
  (= buffer2 (slide buf_read__read__b (to_rep1 (first (mk 1 1000))) 1))))

;; H
  (assert
  (=> (= pointer max_read)
  (and (= o2 buf_read__read__count) (in_range2 buf_read__read__count))))

;; H
  (assert (=> (= pointer max_read) (= result2 max_read)))

;; H
  (assert (=> (= pointer max_read) (= max_read2 o2)))

;; H
  (assert (=> (= pointer max_read) (= result3 pointer)))

;; H
  (assert (=> (= pointer max_read) (= pointer1 1)))

;; H
  (assert
  (=> (not (= pointer max_read))
  (and (= o3 (+ pointer 1)) (in_range2 (+ pointer 1)))))

;; H
  (assert (=> (not (= pointer max_read)) (= result4 pointer)))

;; H
  (assert (=> (not (= pointer max_read)) (= pointer2 o3)))

;; H
  (assert (=> (not (= pointer max_read)) (= max_read2 max_read)))

;; H
  (assert (=> (not (= pointer max_read)) (= pointer1 pointer2)))

;; H
  (assert (=> (not (= pointer max_read)) (= buffer2 buffer)))

;; H
  (assert (=> (not (= pointer max_read)) (= max_read2 max_read1)))

;; H
  (assert (=> (not (= pointer max_read)) (= pointer1 pointer2)))

;; H
  (assert (=> (not (= pointer max_read)) (= buffer2 buffer1)))

;; H
  (assert (= max_read2 max_read3))

;; H
  (assert (= pointer1 pointer3))

;; H
  (assert (= buffer2 buffer3))

;; H
  (assert (= c1 c2))

;; H
  (assert (= max_read4 max_read2))

;; H
  (assert (= pointer4 pointer1))

;; H
  (assert (= buffer4 buffer2))

;; H
  (assert (= c3 c1))

(assert
;; WP_parameter_def
 ;; File "buf_read.adb", line 23, characters 0-0
  (not (= (valid c2) true)))
(check-sat)
