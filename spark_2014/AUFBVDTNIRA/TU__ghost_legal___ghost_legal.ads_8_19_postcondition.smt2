;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun is_even (Int) Bool)

(declare-fun is_even__function_guard (Bool Int) Bool)

;; is_even__post_axiom
  (assert true)

;; is_even__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (is_even__function_guard (is_even x) x)
     (= (= (is_even x) true) (= (mod2 x 2) 0))) :pattern ((is_even x)) )))

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun temp () Int)

(declare-fun ghost_legal__is_prime__result () Bool)

(declare-fun temp___135 () Int)

(declare-fun o () Int)

(declare-fun temp1 () Int)

(declare-fun ghost_legal__is_prime__result1 () Bool)

(declare-fun result () Bool)

(declare-fun ghost_legal__is_prime__result2 () Bool)

(declare-fun result1 () Int)

(declare-fun temp2 () Int)

(declare-fun temp3 () Int)

(declare-fun ghost_legal__is_prime__result3 () Bool)

(declare-fun result2 () Bool)

(declare-fun ghost_legal__is_prime__result4 () Bool)

(declare-fun result3 () Int)

(declare-fun temp4 () Int)

(declare-fun temp5 () Int)

(declare-fun ghost_legal__is_prime__result5 () Bool)

(declare-fun temp6 () Int)

(declare-fun ghost_legal__is_prime__result6 () Bool)

(declare-fun temp7 () Int)

(declare-fun ghost_legal__is_prime__result7 () Bool)

(declare-fun temp8 () Int)

(declare-fun ghost_legal__is_prime__result8 () Bool)

(declare-fun result4 () Bool)

(declare-fun ghost_legal__is_prime__result9 () Bool)

(declare-fun ghost_legal__is_prime__result10 () Bool)

(declare-fun ghost_legal__is_prime__result11 () Bool)

(declare-fun temp9 () Int)

(declare-fun ghost_legal__is_prime__result12 () Bool)

(declare-fun temp10 () Int)

(declare-fun ghost_legal__is_prime__result13 () Bool)

(declare-fun temp11 () Int)

(declare-fun ghost_legal__is_prime__result14 () Bool)

(declare-fun temp12 () Int)

(declare-fun ghost_legal__is_prime__result15 () Bool)

(declare-fun temp13 () Int)

(declare-fun ghost_legal__is_prime__result16 () Bool)

(declare-fun temp14 () Int)

(declare-fun ghost_legal__is_prime__result17 () Bool)

(define-fun ghost_legal__is_prime__result18 () bool__ref (mk_bool__ref
                                                         ghost_legal__is_prime__result14))

(define-fun temp15 () int__ref (mk_int__ref temp11))

(define-fun ghost_legal__is_prime__result19 () bool__ref (mk_bool__ref
                                                         ghost_legal__is_prime__result12))

(define-fun temp16 () int__ref (mk_int__ref temp9))

(define-fun temp17 () int__ref (mk_int__ref temp7))

(define-fun temp18 () int__ref (mk_int__ref temp))

(declare-fun result5 () Bool)

;; H
  (assert (is_even__function_guard (is_even x) x))

;; H
  (assert (is_even__function_guard (is_even x) x))

;; H
  (assert (in_range2 x))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 temp)))

;; H
  (assert
  (or
  (and
  (and
  (and (= ghost_legal__is_prime__result2 ghost_legal__is_prime__result14)
  (= temp15 temp18))
  (and (= ghost_legal__is_prime__result15 ghost_legal__is_prime__result2)
  (= temp12 temp1)))
  (and (= (mod2 x 2) 0)
  (and (= (is_even x) true)
  (and (= result ghost_legal__is_prime__result)
  (= ghost_legal__is_prime__result2 (of_int 0))))))
  (and
  (and (not (= (mod2 x 2) 0))
  (and (= ghost_legal__is_prime__result2 ghost_legal__is_prime__result)
  (= ghost_legal__is_prime__result2 ghost_legal__is_prime__result1)))
  (and
  (and
  (and (= ghost_legal__is_prime__result18 ghost_legal__is_prime__result19)
  (= temp15 temp16))
  (and (= ghost_legal__is_prime__result15 ghost_legal__is_prime__result13)
  (= temp12 temp10)))
  (and (and (= (mk_int__ref result1) temp18) (= temp2 2))
  (or
  (and
  (and
  (and (= ghost_legal__is_prime__result4 ghost_legal__is_prime__result12)
  (= temp3 temp9))
  (and (= ghost_legal__is_prime__result13 ghost_legal__is_prime__result4)
  (= temp10 temp3)))
  (and (< temp2 x)
  (and (= temp___135 temp2)
  (and (<= 2 temp3)
  (and (and (=> (<= 0 2147483647) (in_range2 temp3)) (< temp3 x))
  (and (= (mod2 x temp3) 0)
  (and (= result2 ghost_legal__is_prime__result3)
  (= ghost_legal__is_prime__result4 (of_int 0)))))))))
  (and
  (ite (< temp2 x)
  (and
  (and
  (and (= temp___135 temp2)
  (and (<= 2 temp3)
  (and (and (=> (<= 0 2147483647) (in_range2 temp3)) (< temp3 x))
  (and
  (and (not (= (mod2 x temp3) 0))
  (= ghost_legal__is_prime__result4 ghost_legal__is_prime__result3))
  (and
  (and (and (= o (+ temp3 1)) (in_range1 (+ temp3 1)))
  (and (= temp3 result3) (= temp4 o))) (not (< temp4 x)))))))
  (and
  (and (= ghost_legal__is_prime__result4 ghost_legal__is_prime__result5)
  (= temp4 temp5))
  (and (= ghost_legal__is_prime__result6 ghost_legal__is_prime__result4)
  (= temp6 temp4))))
  (and
  (and
  (= (mk_bool__ref ghost_legal__is_prime__result7) (mk_bool__ref
                                                   ghost_legal__is_prime__result5))
  (= temp17 (mk_int__ref temp5)))
  (and (= ghost_legal__is_prime__result8 ghost_legal__is_prime__result6)
  (= temp8 temp6))))
  (and
  (and (= ghost_legal__is_prime__result2 ghost_legal__is_prime__result7)
  (= temp2 temp7))
  (and (= ghost_legal__is_prime__result8 ghost_legal__is_prime__result2)
  (= temp8 temp2))))
  (and
  (and
  (and
  (= ghost_legal__is_prime__result19 (mk_bool__ref
                                     ghost_legal__is_prime__result10))
  (= temp16 temp17))
  (and (= ghost_legal__is_prime__result13 ghost_legal__is_prime__result11)
  (= temp10 temp8)))
  (and
  (and (= ghost_legal__is_prime__result9 ghost_legal__is_prime__result10)
  (= ghost_legal__is_prime__result11 ghost_legal__is_prime__result9))
  (and (= result4 ghost_legal__is_prime__result7)
  (= ghost_legal__is_prime__result9 (of_int 1))))))))))))

;; H
  (assert
  (= (mk_bool__ref ghost_legal__is_prime__result16) ghost_legal__is_prime__result18))

;; H
  (assert (= temp13 temp11))

;; H
  (assert
  (= ghost_legal__is_prime__result17 ghost_legal__is_prime__result15))

;; H
  (assert (= temp14 temp12))

;; H
  (assert (= result5 ghost_legal__is_prime__result16))

;; H
  (assert (is_even__function_guard (is_even x) x))

;; H
  (assert (= (is_even x) true))

(assert
;; WP_parameter_def
 ;; File "ghost_legal.ads", line 7, characters 0-0
  (not (not (= ghost_legal__is_prime__result16 true))))
(check-sat)
