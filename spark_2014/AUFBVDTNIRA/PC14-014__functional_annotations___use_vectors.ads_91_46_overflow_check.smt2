;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy1 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun first () Int)

(declare-fun last () Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-fun dummy2 () integer)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content integer)))))
(define-fun index_type__ref___projection ((a index_type__ref)) integer 
  (index_type__content a))

(declare-fun fst () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun lst () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_197 Int)
  (temp___is_init_194 Bool) (temp___skip_constant_195 Bool)
  (temp___do_toplevel_196 Bool)) Bool (=>
                                      (or (= temp___is_init_194 true)
                                      (<= first last)) (dynamic_property
                                      first last temp___expr_197)))

;; first__def_axiom
  (assert (= first fst))

;; last__def_axiom
  (assert (= last lst))

(declare-fun first1 () Int)

(declare-fun last1 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-fun dummy3 () integer)

(declare-datatypes ()
((index_type__ref1 (mk_index_type__ref1 (index_type__content1 integer)))))
(define-fun index_type__ref_2__projection ((a index_type__ref1)) integer 
  (index_type__content1 a))

(declare-fun first2 () Int)

(declare-fun last2 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content integer)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) integer 
  (extended_index__content a))

(declare-fun to_rep1 (tcount_typeB) Int)

(declare-fun of_rep1 (Int) tcount_typeB)

;; inversion_axiom
  (assert
  (forall ((x tcount_typeB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tcount_typeB)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun last3 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy5 () tcount_typeB)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content tcount_typeB)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) tcount_typeB 
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__use_vectors__my_vectors__vector__capacity tcount_typeB)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) tcount_typeB 
  (rec__use_vectors__my_vectors__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__use_vectors__my_vectors__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type 
  (rec__use_vectors__my_vectors__vector a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun use_vectors__my_vectors__vector__capacity__first__bit () Int)

(declare-fun use_vectors__my_vectors__vector__capacity__last__bit () Int)

(declare-fun use_vectors__my_vectors__vector__capacity__position () Int)

;; use_vectors__my_vectors__vector__capacity__first__bit_axiom
  (assert (<= 0 use_vectors__my_vectors__vector__capacity__first__bit))

;; use_vectors__my_vectors__vector__capacity__last__bit_axiom
  (assert
  (< use_vectors__my_vectors__vector__capacity__first__bit use_vectors__my_vectors__vector__capacity__last__bit))

;; use_vectors__my_vectors__vector__capacity__position_axiom
  (assert (<= 0 use_vectors__my_vectors__vector__capacity__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_233 us_rep)
  (temp___is_init_230 Bool) (temp___skip_constant_231 Bool)
  (temp___do_toplevel_232 Bool)) Bool (dynamic_property3 0 last3
  (to_rep1
  (rec__use_vectors__my_vectors__vector__capacity
  (us_split_discrs1 temp___expr_233)))))

(define-fun capacity ((container us_rep)) Int (ite (= (of_int 0) true)
                                              (to_rep1
                                              (rec__use_vectors__my_vectors__vector__capacity
                                              (us_split_discrs1 container)))
                                              last3))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun last_count () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_227 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)) Bool (=>
                                      (or (= temp___is_init_224 true)
                                      (<= 0 last3)) (dynamic_property3 0
                                      last3 temp___expr_227)))

;; last__def_axiom
  (assert (= last3 last_count))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (dynamic_invariant1 container true true true)
     (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant2 result true
     false true)))) :pattern ((length container)) )))

(declare-fun first3 () Int)

(declare-fun last4 () Int)

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 integer)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref1)) integer 
  (extended_index__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq7 (us_rep1 us_rep1) Bool)

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dummy8 () us_rep1)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun first4 () Int)

(declare-fun last5 () Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (integer integer) Bool)

(declare-fun dummy9 () integer)

(declare-datatypes ()
((index_type__ref2 (mk_index_type__ref2 (index_type__content2 integer)))))
(define-fun index_type__ref_3__projection ((a index_type__ref2)) integer 
  (index_type__content2 a))

(declare-sort element_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (element_type element_type) Bool)

(declare-fun dummy10 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_248 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)) Bool (=>
                                      (or (= temp___is_init_245 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_248)))

(define-fun dynamic_invariant4 ((temp___expr_254 Int)
  (temp___is_init_251 Bool) (temp___skip_constant_252 Bool)
  (temp___do_toplevel_253 Bool)) Bool (=>
                                      (or (= temp___is_init_251 true)
                                      (<= first3 last4)) (dynamic_property4
                                      first3 last4 temp___expr_254)))

;; first__def_axiom
  (assert (= first3 (- first4 1)))

;; last__def_axiom
  (assert (= last4 last5))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last6 ((container us_rep1)) Int (+ (- first4 1) (length1
                                                            container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(define-fun oeq ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and
                                                                (<= first4 n)
                                                                (<= n 
                                                                (last6 left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq8 a b) (oeq a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption ((temp___expr_261 us_rep1)
  (temp___skip_top_level_262 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_262 true))
                                         (= (length1 temp___expr_261) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant4 position true true true)
     (and (<= first4 position) (<= position (last6 container))))
     (dynamic_invariant3 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (dynamic_invariant1 container true true true)
     (= (length1 (model__ container)) (length container))) :pattern (
  (model__ container)) )))

(define-fun last_index ((container us_rep)) Int (last6 (model__ container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant5 ((temp___expr_221 Int)
  (temp___is_init_218 Bool) (temp___skip_constant_219 Bool)
  (temp___do_toplevel_220 Bool)) Bool (=>
                                      (or (= temp___is_init_218 true)
                                      (<= first2 last2)) (dynamic_property2
                                      first2 last2 temp___expr_221)))

;; first__def_axiom
  (assert (= first2 (- first1 1)))

;; last__def_axiom
  (assert (= last2 (+ (ite (< 2147483646 last1) 2147483646 last1) 1)))

(define-fun element ((container us_rep)
  (index Int)) Int (get (model__ container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (element_type1 element_type1) Bool)

(declare-fun dummy11 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_215 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)) Bool (=>
                                      (or (= temp___is_init_212 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_215)))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(define-fun range_equal ((left us_rep1) (right us_rep1) (fst1 Int)
  (lst1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst1 i) (<= i lst1))
                        (= (get left i) (get right i))))
                   true false))

(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)

(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst1 Int)
  (lst1 Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst1 i) (<= i lst1))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst1 offset) i)
                                           (<= i (+ lst1 offset)))
                                           (= (get left (- i offset)) 
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int
  Int) Bool)

(declare-fun v__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun id (Int Int Int) Int)

(declare-fun id__function_guard (Int Int Int Int) Bool)

;; id__post_axiom
  (assert
  (forall ((x Int) (f Int) (l Int))
  (! (=>
     (and
     (and (dynamic_invariant7 x true true true) (dynamic_invariant7 f true
     true true)) (dynamic_invariant7 l true true true))
     (let ((result (id x f l)))
     (=> (id__function_guard result x f l)
     (and (=> (and (<= f x) (<= x l)) (and (<= f result) (<= result l)))
     (dynamic_invariant7 result true false true))))) :pattern ((id x f l)) )))

;; fst__def_axiom
  (assert
  (and (id__function_guard (id 1 (- 2147483647) 2147483647) 1 (- 2147483647)
  2147483647) (= fst (id 1 (- 2147483647) 2147483647))))

;; lst__def_axiom
  (assert
  (and (id__function_guard (id 2147483647 fst 2147483647) 2147483647 
  fst 2147483647) (= lst (id 2147483647 fst 2147483647))))

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (count_type count_type) Bool)

(declare-fun dummy12 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_143)))

;; last_count__def_axiom
  (assert
  (= last_count (ite (< last1 first1) 0
                (ite (or (< last1 (- 1)) (< (- last1 2147483647) first1))
                (+ (- last1 first1) 1) 2147483647))))

(define-fun dynamic_invariant9 ((temp___expr_209 Int)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)) Bool (=>
                                      (or (= temp___is_init_206 true)
                                      (<= first1 last1)) (dynamic_property1
                                      first1 last1 temp___expr_209)))

;; first__def_axiom
  (assert (= first1 fst))

;; last__def_axiom
  (assert (= last1 lst))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ (- first4 1) result) last5) (dynamic_invariant8 result true
     false true))) :pattern ((length1 container)) )))

(define-fun dynamic_invariant10 ((temp___expr_242 Int)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)) Bool (=>
                                      (or (= temp___is_init_239 true)
                                      (<= first4 last5)) (dynamic_property5
                                      first4 last5 temp___expr_242)))

;; first__def_axiom
  (assert (= first4 fst))

;; last__def_axiom
  (assert (= last5 lst))

(declare-fun v__split_fields () us_main_type)

(declare-fun us () Int)

(declare-fun o () Int)

(declare-fun us1 () Int)

(declare-fun o1 () Int)

(declare-fun us2 () Int)

(declare-fun o2 () Int)

(declare-fun us3 () Int)

(declare-fun o3 () Int)

(declare-fun us4 () Int)

(declare-fun o4 () Int)

(declare-fun us5 () Int)

(declare-fun o5 () Int)

(declare-fun us6 () Int)

(declare-fun o6 () Int)

(declare-fun j () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Bool)

(declare-fun o10 () Bool)

(declare-fun j1 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Bool)

(declare-fun o14 () Bool)

(declare-fun o15 () Bool)

(declare-fun v__split_fields1 () us_main_type)

(declare-fun v__split_fields2 () us_main_type)

(declare-fun v__split_fields3 () us_main_type)

(declare-fun v__split_fields4 () us_main_type)

(declare-fun v__split_fields5 () us_main_type)

(declare-fun v__split_fields6 () us_main_type)

(declare-fun v__split_fields7 () us_main_type)

(declare-fun v__split_fields8 () us_main_type)

(declare-fun v__split_fields9 () us_main_type)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(define-fun v__split_fields10 () us_split_fields (mk___split_fields
                                                 v__split_fields7))

(define-fun v__split_fields11 () us_split_fields (mk___split_fields
                                                 v__split_fields6))

(define-fun v__split_fields12 () us_split_fields (mk___split_fields
                                                 v__split_fields5))

(define-fun v__split_fields13 () us_split_fields (mk___split_fields
                                                 v__split_fields4))

(define-fun v__split_fields14 () us_split_fields (mk___split_fields
                                                 v__split_fields3))

(define-fun v__split_fields15 () us_split_fields (mk___split_fields
                                                 v__split_fields2))

(define-fun v__split_fields16 () us_split_fields (mk___split_fields
                                                 v__split_fields1))

;; H
  (assert (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs))))

;; H
  (assert (dynamic_property first last i))

;; H
  (assert
  (and
  (<= i (last6
        (model__
        (mk___rep v__split_discrs (mk___split_fields v__split_fields)))))
  (<= (length (mk___rep v__split_discrs (mk___split_fields v__split_fields))) (- 
  (capacity (mk___rep v__split_discrs (mk___split_fields v__split_fields))) 7))))

;; H
  (assert (and (= us i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields16)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              (mk___split_fields
                                                              v__split_fields))) 1))
  (= (range_equal
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields)))
     (model__ (mk___rep v__split_discrs v__split_fields16)) first1 (- 
     o 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields16)) o) 0))
  (= (range_shifted
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields)))
     (model__ (mk___rep v__split_discrs v__split_fields16)) o
     (last6
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields))))
     1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us1 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o1 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields15)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields16)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields16))
     (model__ (mk___rep v__split_discrs v__split_fields15)) first1 (- 
     o1 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields15)) o1) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields16))
     (model__ (mk___rep v__split_discrs v__split_fields15)) o1
     (last6 (model__ (mk___rep v__split_discrs v__split_fields16))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us2 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o2 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields14)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields15)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields15))
     (model__ (mk___rep v__split_discrs v__split_fields14)) first1 (- 
     o2 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields14)) o2) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields15))
     (model__ (mk___rep v__split_discrs v__split_fields14)) o2
     (last6 (model__ (mk___rep v__split_discrs v__split_fields15))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us3 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o3 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields13)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields14)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields14))
     (model__ (mk___rep v__split_discrs v__split_fields13)) first1 (- 
     o3 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields13)) o3) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields14))
     (model__ (mk___rep v__split_discrs v__split_fields13)) o3
     (last6 (model__ (mk___rep v__split_discrs v__split_fields14))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us4 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o4 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields12)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields13)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields13))
     (model__ (mk___rep v__split_discrs v__split_fields12)) first1 (- 
     o4 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields12)) o4) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields13))
     (model__ (mk___rep v__split_discrs v__split_fields12)) o4
     (last6 (model__ (mk___rep v__split_discrs v__split_fields13))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us5 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o5 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields11)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields12)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields12))
     (model__ (mk___rep v__split_discrs v__split_fields11)) first1 (- 
     o5 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields11)) o5) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields12))
     (model__ (mk___rep v__split_discrs v__split_fields11)) o5
     (last6 (model__ (mk___rep v__split_discrs v__split_fields12))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us6 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o6 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields10)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields11)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields11))
     (model__ (mk___rep v__split_discrs v__split_fields10)) first1 (- 
     o6 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields10)) o6) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields11))
     (model__ (mk___rep v__split_discrs v__split_fields10)) o6
     (last6 (model__ (mk___rep v__split_discrs v__split_fields11))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (= v__split_fields8 v__split_fields7))

;; H
  (assert (= (mk___split_fields v__split_fields9) v__split_fields10))

;; H
  (assert
  (and
  (= o12 (last6
         (model__
         (mk___rep v__split_discrs (mk___split_fields v__split_fields8)))))
  (and (dynamic_property2 first2 last2 o12)
  (= o12 (last6
         (model__
         (mk___rep v__split_discrs (mk___split_fields v__split_fields8))))))))

;; H
  (assert (= o13 (ite (<= j1 o12) true false)))

;; H
  (assert (and (= o11 (+ i 7)) (in_range1 (+ i 7))))

;; H
  (assert (= o14 (ite (<= o11 j1) true false)))

;; H
  (assert (= result (ite (= o14 true) o13 false)))

;; H
  (assert
  (= (= o15 true)
  (forall ((j2 Int))
  (=>
  (and (<= (+ i 7) j2)
  (<= j2 (last6
         (model__
         (mk___rep v__split_discrs (mk___split_fields v__split_fields8))))))
  (= (get
     (model__
     (mk___rep v__split_discrs (mk___split_fields v__split_fields8))) j2) 
  (get
  (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields)))
  (- j2 7)))))))

;; H
  (assert (and (= o7 (+ i 7)) (in_range1 (+ i 7))))

;; H
  (assert (= o8 (- o7 1)))

;; H
  (assert (= o9 (ite (<= j o8) true false)))

;; H
  (assert (= result1 (ite (<= i j) o9 false)))

;; H
  (assert
  (= (= o10 true)
  (forall ((j2 Int))
  (=> (and (<= i j2) (<= j2 (- (+ i 7) 1)))
  (= (get
     (model__
     (mk___rep v__split_discrs (mk___split_fields v__split_fields8))) j2) 0)))))

(assert
;; WP_parameter_def
 ;; File "a-cofuve.ads", line 75, characters 0-0
  (not (in_range1 (- i 1))))
(check-sat)
