;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (index index) Bool)

(declare-fun dummy4 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun all_elements_in ((Array Int integer) Int) Bool)

(declare-fun all_elements_in__function_guard (Bool (Array Int integer)
  Int) Bool)

(declare-fun intermediate_form ((Array Int integer)
  (Array Int integer)) Bool)

(declare-fun intermediate_form__function_guard (Bool (Array Int integer)
  (Array Int integer)) Bool)

(declare-sort t9b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (t9b t9b) Bool)

(declare-fun dummy5 () t9b)

(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content t9b)))))
(define-fun t9b__ref___projection ((a t9b__ref)) t9b (t9b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun main__a__aggregate_def (Int Int Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___553 Int) (temp___554 Int) (temp___555 Int)
  (temp___556 Int) (temp___557 Int) (temp___558 Int) (temp___559 Int)
  (temp___560 Int))
  (let ((temp___552 (main__a__aggregate_def temp___553 temp___554 temp___555
                    temp___556 temp___557 temp___558 temp___559 temp___560)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___552 0) (of_rep1 temp___553))
  (= (select temp___552 1) (of_rep1 temp___554)))
  (= (select temp___552 2) (of_rep1 temp___555)))
  (= (select temp___552 3) (of_rep1 temp___556)))
  (= (select temp___552 4) (of_rep1 temp___557)))
  (= (select temp___552 5) (of_rep1 temp___558)))
  (= (select temp___552 6) (of_rep1 temp___559)))
  (= (select temp___552 7) (of_rep1 temp___560))))))

(declare-fun temp___String_Literal_562 (tuple0) (Array Int character))

;; temp___String_Literal_562__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_562 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_562 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_562 us_void_param) 3)) 61))
     (= (to_rep (select (temp___String_Literal_562 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_562 us_void_param) 5)) 40)) :pattern (
  (temp___String_Literal_562 us_void_param)) )))

(declare-fun temp___String_Literal_565 (tuple0) (Array Int character))

;; temp___String_Literal_565__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_565 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_565 us_void_param) 2)) 41)) :pattern (
  (temp___String_Literal_565 us_void_param)) )))

(declare-fun temp___String_Literal_566 (tuple0) (Array Int character))

;; temp___String_Literal_566__def_axiom
  (assert true)

(declare-fun temp___String_Literal_567 (tuple0) (Array Int character))

;; temp___String_Literal_567__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_567 us_void_param) 1)) 76)
     (= (to_rep (select (temp___String_Literal_567 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_567 us_void_param) 3)) 61)) :pattern (
  (temp___String_Literal_567 us_void_param)) )))

(declare-fun temp___String_Literal_570 (tuple0) (Array Int character))

;; temp___String_Literal_570__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_570 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_570 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_570 us_void_param) 3)) 61))
     (= (to_rep (select (temp___String_Literal_570 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_570 us_void_param) 5)) 40)) :pattern (
  (temp___String_Literal_570 us_void_param)) )))

(declare-fun temp___String_Literal_573 (tuple0) (Array Int character))

;; temp___String_Literal_573__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_573 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_573 us_void_param) 2)) 41)) :pattern (
  (temp___String_Literal_573 us_void_param)) )))

(declare-fun temp___String_Literal_574 (tuple0) (Array Int character))

;; temp___String_Literal_574__def_axiom
  (assert true)

(declare-fun temp___String_Literal_575 (tuple0) (Array Int character))

;; temp___String_Literal_575__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_575 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_575 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_575 us_void_param) 3)) 61))
     (= (to_rep (select (temp___String_Literal_575 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_575 us_void_param) 5)) 40)) :pattern (
  (temp___String_Literal_575 us_void_param)) )))

(declare-fun temp___String_Literal_578 (tuple0) (Array Int character))

;; temp___String_Literal_578__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_578 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_578 us_void_param) 2)) 41)) :pattern (
  (temp___String_Literal_578 us_void_param)) )))

(declare-fun temp___String_Literal_579 (tuple0) (Array Int character))

;; temp___String_Literal_579__def_axiom
  (assert true)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant4 ((temp___expr_155 Int)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (or (= temp___is_init_152 true)
                                      (<= 0 7)) (in_range4 temp___expr_155)))

;; all_elements_in__post_axiom
  (assert true)

;; all_elements_in__def_axiom
  (assert
  (forall ((a (Array Int integer)))
  (forall ((max Int))
  (! (=> (all_elements_in__function_guard (all_elements_in a max) a max)
     (= (= (all_elements_in a max) true)
     (forall ((k Int))
     (=> (and (<= 0 k) (<= k 7))
     (and (<= (- max) (to_rep1 (select a k)))
     (<= (to_rep1 (select a k)) max)))))) :pattern ((all_elements_in a max)) ))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

;; intermediate_form__post_axiom
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (! (and (all_elements_in__function_guard (all_elements_in a 8000000) a
     8000000) (all_elements_in__function_guard (all_elements_in b 1000000) b
     1000000)) :pattern ((intermediate_form a b)) )))

;; intermediate_form__def_axiom
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (! (=> (intermediate_form__function_guard (intermediate_form a b) a b)
     (= (= (intermediate_form a b) true)
     (forall ((k Int))
     (=> (and (<= 0 k) (<= k 7))
     (ite (= (mod2 (+ k 1) 8) 0)
     (= (to_rep1 (select a k)) (+ (+ (+ (+ (+ (+ (+ (to_rep1 (select b 0)) 
     (to_rep1 (select b 1))) (to_rep1 (select b 2))) (to_rep1 (select b 3))) 
     (to_rep1 (select b 4))) (to_rep1 (select b 5))) (to_rep1 (select b 6))) 
     (to_rep1 (select b 7))))
     (ite (= (mod2 (+ k 1) 4) 0)
     (= (to_rep1 (select a k)) (+ (+ (+ (to_rep1 (select b k)) (to_rep1
                                                               (select b (- k 1)))) 
     (to_rep1 (select b (- k 2)))) (to_rep1 (select b (- k 3)))))
     (ite (= (mod2 (+ k 1) 2) 0)
     (= (to_rep1 (select a k)) (+ (to_rep1 (select b k)) (to_rep1
                                                         (select b (- k 1)))))
     (= (to_rep1 (select a k)) (to_rep1 (select b k)))))))))) :pattern (
  (intermediate_form a b)) )))

(declare-fun a () (Array Int integer))

(declare-fun space () Int)

(declare-fun copy () (Array Int integer))

(declare-fun j () Int)

(declare-fun j1 () Int)

(declare-fun o () (Array Int integer))

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () (Array Int character))

(declare-fun o8 () t)

(declare-fun result () (Array Int integer))

(declare-fun a1 () (Array Int integer))

(declare-fun result1 () (Array Int integer))

(declare-fun copy1 () (Array Int integer))

(declare-fun result2 () Int)

(declare-fun j2 () Int)

(declare-fun j3 () Int)

(declare-fun j4 () Int)

(declare-fun j5 () Int)

(declare-fun j6 () Int)

(declare-fun j7 () Int)

(declare-fun a2 () (Array Int integer))

(declare-fun space1 () Int)

(declare-fun result3 () Int)

(declare-fun j8 () Int)

(declare-fun j9 () Int)

(declare-fun j10 () Int)

(declare-fun j11 () Int)

(declare-fun j12 () Int)

(declare-fun j13 () Int)

;; H
  (assert (= o (main__a__aggregate_def 3 1 7 0 4 1 6 3)))

;; H
  (assert (= result a))

;; H
  (assert (= a1 o))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 space)))

;; H
  (assert (= result1 copy))

;; H
  (assert (= copy1 a1))

;; H
  (assert (= result2 j))

;; H
  (assert (= j2 0))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 7)) (and (<= 0 j3) (<= j3 7))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 7)) (= j3 7)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 7)) (= j3 j4)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 7)) (= j5 j3)))

;; H
  (assert
  (=> (and (<= 0 j2) (<= j2 7)) (= (mk_int__ref j6) (mk_int__ref j4))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 7)) (= j7 j5)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 7))) (= j2 j6)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 7))) (= j7 j2)))

;; H
  (assert (all_elements_in__function_guard (all_elements_in a2 8000000) 
  a2 8000000))

;; H
  (assert (intermediate_form__function_guard (intermediate_form a2 a1) 
  a2 a1))

;; H
  (assert
  (and
  (and (= (all_elements_in a2 8000000) true)
  (and (= space1 8) (= (intermediate_form a2 a1) true))) (in_range2 space1)))

;; H
  (assert
  (=>
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1))))) 
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1))))))
  (= o1 (+ (- (to_rep1
              (last (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1))))) 
  (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1)))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1))))) 
  (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1)))))))
  (= o1 0)))

;; H
  (assert (=> (<= 1 3) (= o2 (+ (- 3 1) 1))))

;; H
  (assert (=> (not (<= 1 3)) (= o2 0)))

;; H
  (assert (= o3 (+ o2 o1)))

;; H
  (assert (= o4 (+ 1 o3)))

;; H
  (assert (= o5 (- o4 1)))

;; H
  (assert (and (= o6 o5) (in_range2 o5)))

;; H
  (assert
  (= o7 (concat1 (temp___String_Literal_567 Tuple0) 1 3
        (elts (to_string (attr__ATTRIBUTE_IMAGE4 space1)))
        (to_rep1 (first (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1)))))
        (to_rep1 (last (rt (to_string (attr__ATTRIBUTE_IMAGE4 space1))))))))

;; H
  (assert (= o8 (mk 1 o6)))

;; H
  (assert (= result3 j1))

;; H
  (assert (= j8 0))

;; H
  (assert (=> (and (<= 0 j8) (<= j8 7)) (and (<= 0 j9) (<= j9 7))))

;; H
  (assert (=> (and (<= 0 j8) (<= j8 7)) (= j9 7)))

;; H
  (assert (=> (and (<= 0 j8) (<= j8 7)) (= j9 j10)))

;; H
  (assert (=> (and (<= 0 j8) (<= j8 7)) (= j11 j9)))

;; H
  (assert
  (=> (and (<= 0 j8) (<= j8 7)) (= (mk_int__ref j12) (mk_int__ref j10))))

;; H
  (assert (=> (and (<= 0 j8) (<= j8 7)) (= j13 j11)))

;; H
  (assert (=> (not (and (<= 0 j8) (<= j8 7))) (= j8 j12)))

;; H
  (assert (=> (not (and (<= 0 j8) (<= j8 7))) (= j13 j8)))

;; H
  (assert (all_elements_in__function_guard (all_elements_in copy1 1000000)
  copy1 1000000))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 4, characters 0-0
  (not (= (all_elements_in copy1 1000000) true)))
(check-sat)
