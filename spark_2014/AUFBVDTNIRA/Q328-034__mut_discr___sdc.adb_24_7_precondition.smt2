;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort tlastS 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 200)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tlastS tlastS) Bool)

(declare-fun dummy4 () tlastS)

(declare-datatypes ()
((tlastS__ref (mk_tlastS__ref (tlastS__content tlastS)))))
(define-fun tlastS__ref___projection ((a tlastS__ref)) tlastS (tlastS__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_177 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (<= 0 200)) (in_range4
                                      temp___expr_177)))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__types__value__e integer)))))
(define-fun us_split_fields_E__projection ((a us_split_fields)) integer 
  (rec__types__value__e a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq6 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__types__value__e (us_split_fields1 a))) 
                   (to_rep1 (rec__types__value__e (us_split_fields1 b))))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun types__value__e__first__bit () Int)

(declare-fun types__value__e__last__bit () Int)

(declare-fun types__value__e__position () Int)

;; types__value__e__first__bit_axiom
  (assert (<= 0 types__value__e__first__bit))

;; types__value__e__last__bit_axiom
  (assert (< types__value__e__first__bit types__value__e__last__bit))

;; types__value__e__position_axiom
  (assert (<= 0 types__value__e__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((value__ref (mk_value__ref (value__content us_rep)))))
(define-fun value__ref___projection ((a value__ref)) us_rep (value__content
                                                            a))

(declare-sort instruction 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (instruction instruction) Bool)

(declare-fun dummy6 () instruction)

(declare-datatypes ()
((instruction__ref (mk_instruction__ref (instruction__content instruction)))))
(define-fun instruction__ref___projection ((a instruction__ref)) instruction 
  (instruction__content a))

(declare-fun to_rep2 (instruction) Int)

(declare-fun of_rep2 (Int) instruction)

;; inversion_axiom
  (assert
  (forall ((x instruction))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x instruction)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort operation 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (operation operation) Bool)

(declare-fun dummy7 () operation)

(declare-datatypes ()
((operation__ref (mk_operation__ref (operation__content operation)))))
(define-fun operation__ref___projection ((a operation__ref)) operation 
  (operation__content a))

(declare-fun to_rep3 (operation) Int)

(declare-fun of_rep3 (Int) operation)

;; inversion_axiom
  (assert
  (forall ((x operation))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x operation)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort token_kind 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (token_kind token_kind) Bool)

(declare-fun dummy8 () token_kind)

(declare-datatypes ()
((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind 
  (token_kind__content a))

(declare-fun to_rep4 (token_kind) Int)

(declare-fun of_rep4 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__tokens__token__kind token_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) token_kind 
  (rec__tokens__token__kind a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__tokens__token__val us_rep)(rec__tokens__token__op operation)(rec__tokens__token__instr instruction)))))
(define-fun us_split_fields_Val__projection ((a us_split_fields2)) us_rep 
  (rec__tokens__token__val a))

(define-fun us_split_fields_Op__projection ((a us_split_fields2)) operation 
  (rec__tokens__token__op a))

(define-fun us_split_fields_Instr__projection ((a us_split_fields2)) instruction 
  (rec__tokens__token__instr a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained Bool)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun tokens__token__val__pred ((a us_rep1)) Bool (= (to_rep4
                                                           (rec__tokens__token__kind
                                                           (us_split_discrs1
                                                           a))) 0))

(define-fun tokens__token__op__pred ((a us_rep1)) Bool (= (to_rep4
                                                          (rec__tokens__token__kind
                                                          (us_split_discrs1
                                                          a))) 1))

(define-fun tokens__token__instr__pred ((a us_rep1)) Bool (= (to_rep4
                                                             (rec__tokens__token__kind
                                                             (us_split_discrs1
                                                             a))) 2))

(define-fun bool_eq10 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep4
                            (rec__tokens__token__kind (us_split_discrs1 a))) 
                         (to_rep4
                         (rec__tokens__token__kind (us_split_discrs1 b))))
                         (=> (tokens__token__val__pred a)
                         (= (bool_eq6
                            (rec__tokens__token__val (us_split_fields3 a))
                            (rec__tokens__token__val (us_split_fields3 b))) true)))
                         (=> (tokens__token__op__pred a)
                         (= (to_rep3
                            (rec__tokens__token__op (us_split_fields3 a))) 
                         (to_rep3
                         (rec__tokens__token__op (us_split_fields3 b))))))
                         (=> (tokens__token__instr__pred a)
                         (= (to_rep2
                            (rec__tokens__token__instr (us_split_fields3 a))) 
                         (to_rep2
                         (rec__tokens__token__instr (us_split_fields3 b))))))
                    true false))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun tokens__token__kind__first__bit () Int)

(declare-fun tokens__token__kind__last__bit () Int)

(declare-fun tokens__token__kind__position () Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit))

;; tokens__token__kind__last__bit_axiom
  (assert (< tokens__token__kind__first__bit tokens__token__kind__last__bit))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position))

(declare-fun tokens__token__val__first__bit () Int)

(declare-fun tokens__token__val__last__bit () Int)

(declare-fun tokens__token__val__position () Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit tokens__token__val__last__bit))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position))

(declare-fun tokens__token__op__first__bit () Int)

(declare-fun tokens__token__op__last__bit () Int)

(declare-fun tokens__token__op__position () Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit tokens__token__op__last__bit))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position))

(declare-fun tokens__token__instr__first__bit () Int)

(declare-fun tokens__token__instr__last__bit () Int)

(declare-fun tokens__token__instr__position () Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit tokens__token__instr__last__bit))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position))

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((token__ref (mk_token__ref (token__content us_rep1)))))
(define-fun token__ref___projection ((a token__ref)) us_rep1 (token__content
                                                             a))

(define-fun default_initial_assumption ((temp___expr_212 us_rep1)
  (temp___skip_top_level_213 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_212) false)
                                         (= (to_rep4
                                            (rec__tokens__token__kind
                                            (us_split_discrs1
                                            temp___expr_212))) 0)))

(declare-fun size (Int) Int)

(declare-fun size__function_guard (Int Int) Bool)

(declare-fun full (Int) Bool)

(declare-fun full__function_guard (Bool Int) Bool)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq11 (us_rep2 us_rep2) Bool)

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun dummy10 () us_rep2)

(declare-datatypes ()
((file_type__ref (mk_file_type__ref (file_type__content us_rep2)))))
(define-fun file_type__ref___projection ((a file_type__ref)) us_rep2 
  (file_type__content a))

(declare-sort natural 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (natural natural) Bool)

(declare-fun dummy11 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_33)))

(declare-fun argument_count (tuple0) Int)

(declare-fun argument_count__function_guard (Int tuple0) Bool)

;; argument_count__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant1
  (argument_count us_void_param) true false
  true) :pattern ((argument_count us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun argument (Int) us_t)

(declare-fun argument__function_guard (us_t Int) Bool)

;; argument__post_axiom
  (assert
  (forall ((number Int))
  (! (=>
     (and (dynamic_invariant2 number true true true)
     (<= number (argument_count Tuple0))) (dynamic_invariant3
     (argument number) true false true)) :pattern ((argument number)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun t__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun temp___String_Literal_604 (tuple0) (Array Int character))

;; temp___String_Literal_604__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 3)) 108))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 4)) 99))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 6)) 109))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 12)) 115))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 13)) 100))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 14)) 99))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 15)) 46))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 17)) 71))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 18)) 111))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 20)) 97))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 21)) 104))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 22)) 101))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 24)) 100))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 26)) 116))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 27)) 121))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 28)) 112))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 29)) 101))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 31)) 121))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 32)) 111))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 33)) 117))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 34)) 114))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 36)) 99))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 37)) 111))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 38)) 109))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 39)) 109))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 40)) 97))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 41)) 110))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 42)) 100))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 43)) 115))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 45)) 46))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 46)) 46))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 47)) 46)) :pattern (
  (temp___String_Literal_604 us_void_param)) )))

(declare-fun temp___String_Literal_605 (tuple0) (Array Int character))

;; temp___String_Literal_605__def_axiom
  (assert true)

(declare-fun temp___String_Literal_606 (tuple0) (Array Int character))

;; temp___String_Literal_606__def_axiom
  (assert true)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

;; size__post_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (dynamic_invariant stack__last true true true)
     (let ((result (size stack__last)))
     (=> (size__function_guard result stack__last) (dynamic_invariant4 result
     true false true)))) :pattern ((size stack__last)) )))

;; size__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (=>
     (and (dynamic_invariant stack__last true true true)
     (size__function_guard (size stack__last) stack__last))
     (= (size stack__last) stack__last)) :pattern ((size stack__last)) )))

;; full__post_axiom
  (assert true)

;; full__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (full__function_guard (full stack__last) stack__last)
     (= (= (full stack__last) true) (<= 200 stack__last))) :pattern (
  (full stack__last)) )))

(define-fun dynamic_invariant6 ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 0 2)) (in_range7 temp___expr_204)))

(define-fun dynamic_invariant7 ((temp___expr_183 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool (=>
                                      (or (= temp___is_init_180 true)
                                      (<= 0 2)) (in_range5 temp___expr_183)))

(define-fun dynamic_invariant8 ((temp___expr_195 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)) Bool (=>
                                      (or (= temp___is_init_192 true)
                                      (<= 0 3)) (in_range6 temp___expr_195)))

(declare-fun last2 () Int)

(declare-fun file () us_rep2)

(declare-fun t__split_discrs () token_kind)

(declare-fun o () Int)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () t)

(declare-fun file1 () us_rep2)

(declare-fun result () Bool)

(declare-fun file2 () us_rep2)

(declare-fun last3 () Int)

(declare-fun t__split_discrs1 () token_kind)

(define-fun o3 () us_t (mk___t o1 o2))

;; H
  (assert (in_range4 last2))

;; H
  (assert
  (and (= t__attr__constrained false) (= (to_rep4 t__split_discrs) 0)))

;; H
  (assert (and (= o (argument_count Tuple0)) (in_range8 o)))

;; H
  (assert (= result (ite (= o 1) true false)))

;; H
  (assert
  (=> (= result true)
  (and (= o3 (argument 1)) (dynamic_invariant3 o3 true false true))))

;; H
  (assert (=> (not (= result true)) (= file2 file)))

;; H
  (assert (=> (not (= result true)) (= file2 file1)))

;; H
  (assert (in_range4 last3))

;; H
  (assert (= (to_rep4 t__split_discrs1) 0))

;; H
  (assert (full__function_guard (full last3) last3))

(assert
;; WP_parameter_def
 ;; File "stack.ads", line 57, characters 0-0
  (not (not (= (full last3) true))))
(check-sat)
