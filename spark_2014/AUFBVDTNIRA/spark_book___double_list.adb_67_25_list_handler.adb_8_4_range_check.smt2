;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort element_type 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (element_type element_type) Bool)

(declare-fun dummy () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(declare-fun to_rep (element_type) Int)

(declare-fun of_rep (Int) element_type)

;; inversion_axiom
  (assert
  (forall ((x element_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x element_type)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-fun dummy1 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-fun to_rep1 (index_type) Int)

(declare-fun of_rep1 (Int) index_type)

;; inversion_axiom
  (assert
  (forall ((x index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x index_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__list_handler__integer_list__list_node__value element_type)(rec__list_handler__integer_list__list_node__next index_type)(rec__list_handler__integer_list__list_node__previous index_type)))))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) element_type 
  (rec__list_handler__integer_list__list_node__value a))

(define-fun us_split_fields_Next__projection ((a us_split_fields)) index_type 
  (rec__list_handler__integer_list__list_node__next a))

(define-fun us_split_fields_Previous__projection ((a us_split_fields)) index_type 
  (rec__list_handler__integer_list__list_node__previous a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__list_handler__integer_list__list_node__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_handler__integer_list__list_node__value
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__list_handler__integer_list__list_node__next
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__list_handler__integer_list__list_node__next
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__list_handler__integer_list__list_node__previous
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__list_handler__integer_list__list_node__previous
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun list_handler__integer_list__list_node__value__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__value__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__value__position () Int)

;; list_handler__integer_list__list_node__value__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__first__bit))

;; list_handler__integer_list__list_node__value__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__value__first__bit list_handler__integer_list__list_node__value__last__bit))

;; list_handler__integer_list__list_node__value__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__position))

(declare-fun list_handler__integer_list__list_node__next__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__next__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__next__position () Int)

;; list_handler__integer_list__list_node__next__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__first__bit))

;; list_handler__integer_list__list_node__next__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__next__first__bit list_handler__integer_list__list_node__next__last__bit))

;; list_handler__integer_list__list_node__next__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__position))

(declare-fun list_handler__integer_list__list_node__previous__first__bit () Int)

(declare-fun list_handler__integer_list__list_node__previous__last__bit () Int)

(declare-fun list_handler__integer_list__list_node__previous__position () Int)

;; list_handler__integer_list__list_node__previous__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__first__bit))

;; list_handler__integer_list__list_node__previous__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__previous__first__bit list_handler__integer_list__list_node__previous__last__bit))

;; list_handler__integer_list__list_node__previous__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((list_node__ref (mk_list_node__ref (list_node__content us_rep)))))
(define-fun list_node__ref___projection ((a list_node__ref)) us_rep (list_node__content
                                                                    a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq2 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq2 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int index_type))))))
(declare-fun slide1 ((Array Int index_type) Int Int) (Array Int index_type))

;; slide_eq
  (assert
  (forall ((a (Array Int index_type)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int index_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int index_type) Int Int (Array Int index_type)
  Int Int) (Array Int index_type))

;; concat_def
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (index_type Int) (Array Int index_type))

;; singleton_def
  (assert
  (forall ((v index_type))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int index_type)) (a__first Int) (a__last Int)
  (b (Array Int index_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int index_type) Int Int (Array Int index_type)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range temp___expr_141)))

(declare-sort status_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (status_type status_type) Bool)

(declare-fun dummy3 () status_type)

(declare-datatypes ()
((status_type__ref (mk_status_type__ref (status_type__content status_type)))))
(define-fun status_type__ref___projection ((a status_type__ref)) status_type 
  (status_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 3)) (in_range2 temp___expr_147)))

(declare-sort iterator 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (iterator iterator) Bool)

(declare-fun dummy4 () iterator)

(declare-datatypes ()
((iterator__ref (mk_iterator__ref (iterator__content iterator)))))
(define-fun iterator__ref___projection ((a iterator__ref)) iterator (iterator__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= 0 128)) (in_range3
                                      temp___expr_153)))

(declare-fun it () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun item () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 0 128)) (in_range1
                                      temp___expr_164)))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun status () Int)

(declare-fun memory () (Array Int us_rep))

(declare-fun count () Int)

(declare-fun free_list () (Array Int index_type))

(declare-fun free () Int)

(declare-fun new_pointer () Int)

(declare-fun o () index_type)

(declare-fun o1 () element_type)

(declare-fun o2 () element_type)

(declare-fun o3 () index_type)

(declare-fun o4 () index_type)

(declare-fun o5 () element_type)

(declare-fun o6 () index_type)

(declare-fun o7 () index_type)

(declare-fun o8 () (Array Int us_rep))

(declare-fun o9 () index_type)

(declare-fun o10 () element_type)

(declare-fun o11 () index_type)

(declare-fun o12 () index_type)

(declare-fun o13 () element_type)

(declare-fun o14 () index_type)

(declare-fun o15 () index_type)

(declare-fun o16 () (Array Int us_rep))

(declare-fun o17 () index_type)

(declare-fun o18 () element_type)

(declare-fun o19 () index_type)

(declare-fun o20 () index_type)

(declare-fun o21 () element_type)

(declare-fun o22 () index_type)

(declare-fun o23 () index_type)

(declare-fun o24 () (Array Int us_rep))

(declare-fun result () Int)

(declare-fun status1 () Int)

(declare-fun result1 () Int)

(declare-fun new_pointer1 () Int)

(declare-fun result2 () Int)

(declare-fun free1 () Int)

(declare-fun result3 () (Array Int us_rep))

(declare-fun memory1 () (Array Int us_rep))

(declare-fun result4 () (Array Int us_rep))

(declare-fun memory2 () (Array Int us_rep))

(declare-fun result5 () (Array Int us_rep))

(declare-fun memory3 () (Array Int us_rep))

;; H
  (assert (in_range3 it))

;; H
  (assert (in_range item))

;; H
  (assert (=> (<= 0 3) (in_range2 status)))

;; H
  (assert (in_range1 count))

;; H
  (assert (in_range1 free))

;; H
  (assert (=> (<= 0 128) (in_range1 new_pointer)))

;; H
  (assert (not (= count 128)))

;; H
  (assert (= result status))

;; H
  (assert (= status1 0))

;; H
  (assert (= result1 new_pointer))

;; H
  (assert (= new_pointer1 free))

;; H
  (assert (= result2 free))

;; H
  (assert (= free1 (to_rep1 (select free_list free))))

;; H
  (assert (= (to_rep1 o) it))

;; H
  (assert (= (to_rep o1) item))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert
  (= (rec__list_handler__integer_list__list_node__previous
     (us_split_fields1 (select memory it))) o4))

;; H
  (assert (= o5 o2))

;; H
  (assert (= o6 o3))

;; H
  (assert (= o7 o4))

;; H
  (assert
  (= o8 (store memory new_pointer1 (mk___rep (mk___split_fields o5 o6 o7)))))

;; H
  (assert (= result3 memory))

;; H
  (assert (= memory1 o8))

;; H
  (assert (= (to_rep1 o9) new_pointer1))

;; H
  (assert
  (= (rec__list_handler__integer_list__list_node__value
     (us_split_fields1
     (select memory1 (to_rep1
                     (rec__list_handler__integer_list__list_node__previous
                     (us_split_fields1 (select memory1 it))))))) o10))

;; H
  (assert (= o9 o11))

;; H
  (assert
  (= (rec__list_handler__integer_list__list_node__previous
     (us_split_fields1
     (select memory1 (to_rep1
                     (rec__list_handler__integer_list__list_node__previous
                     (us_split_fields1 (select memory1 it))))))) o12))

;; H
  (assert (= o13 o10))

;; H
  (assert (= o14 o11))

;; H
  (assert (= o15 o12))

;; H
  (assert
  (= o16 (store memory1 (to_rep1
                        (rec__list_handler__integer_list__list_node__previous
                        (us_split_fields1 (select memory1 it)))) (mk___rep
                                                                 (mk___split_fields
                                                                 o13 
                                                                 o14 
                                                                 o15)))))

;; H
  (assert (= result4 memory1))

;; H
  (assert (= memory2 o16))

;; H
  (assert (= (to_rep1 o17) new_pointer1))

;; H
  (assert
  (= (rec__list_handler__integer_list__list_node__value
     (us_split_fields1 (select memory2 it))) o18))

;; H
  (assert
  (= (rec__list_handler__integer_list__list_node__next
     (us_split_fields1 (select memory2 it))) o19))

;; H
  (assert (= o17 o20))

;; H
  (assert (= o21 o18))

;; H
  (assert (= o22 o19))

;; H
  (assert (= o23 o20))

;; H
  (assert
  (= o24 (store memory2 it (mk___rep (mk___split_fields o21 o22 o23)))))

;; H
  (assert (= result5 memory2))

;; H
  (assert (= memory3 o24))

(assert
;; WP_parameter_def
 ;; File "double_list.ads", line 33, characters 0-0
  (not (in_range1 (+ count 1))))
(check-sat)
