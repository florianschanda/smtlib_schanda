;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort it3 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (it3 it3) Bool)

(declare-fun dummy () it3)

(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))

(define-fun dynamic_invariant ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 1 16)) (in_range1 temp___expr_164)))

(declare-sort et1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (et1 et1) Bool)

(declare-fun dummy1 () et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range2 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort et2 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 25)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (et2 et2) Bool)

(declare-fun dummy2 () et2)

(declare-datatypes () ((et2__ref (mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))

(declare-fun to_rep1 (et2) Int)

(declare-fun of_rep1 (Int) et2)

;; inversion_axiom
  (assert
  (forall ((x et2)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x et2)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort et3 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 10 x) (<= x 90)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (et3 et3) Bool)

(declare-fun dummy3 () et3)

(declare-datatypes () ((et3__ref (mk_et3__ref (et3__content et3)))))
(define-fun et3__ref___projection ((a et3__ref)) et3 (et3__content a))

(declare-fun to_rep2 (et3) Int)

(declare-fun of_rep2 (Int) et3)

;; inversion_axiom
  (assert
  (forall ((x et3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x et3)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort et4 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 50 x) (<= x 59)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (et4 et4) Bool)

(declare-fun dummy4 () et4)

(declare-datatypes () ((et4__ref (mk_et4__ref (et4__content et4)))))
(define-fun et4__ref___projection ((a et4__ref)) et4 (et4__content a))

(declare-fun to_rep3 (et4) Int)

(declare-fun of_rep3 (Int) et4)

;; inversion_axiom
  (assert
  (forall ((x et4)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x et4)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort enum1ta 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (enum1ta enum1ta) Bool)

(declare-fun dummy5 () enum1ta)

(declare-datatypes ()
((enum1ta__ref (mk_enum1ta__ref (enum1ta__content enum1ta)))))
(define-fun enum1ta__ref___projection ((a enum1ta__ref)) enum1ta (enum1ta__content
                                                                 a))

(declare-fun to_rep4 (enum1ta) Int)

(declare-fun of_rep4 (Int) enum1ta)

;; inversion_axiom
  (assert
  (forall ((x enum1ta))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x enum1ta)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__ar__rec1t__f1 et1)(rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1 
  (rec__ar__rec1t__f1 a))

(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2 
  (rec__ar__rec1t__g1 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq6 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__ar__rec1t__f1 (us_split_fields1 a))) 
                        (to_rep (rec__ar__rec1t__f1 (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ar__rec1t__g1 (us_split_fields1 a))) 
                        (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun ar__rec1t__f1__first__bit () Int)

(declare-fun ar__rec1t__f1__last__bit () Int)

(declare-fun ar__rec1t__f1__position () Int)

;; ar__rec1t__f1__first__bit_axiom
  (assert (<= 0 ar__rec1t__f1__first__bit))

;; ar__rec1t__f1__last__bit_axiom
  (assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))

;; ar__rec1t__f1__position_axiom
  (assert (<= 0 ar__rec1t__f1__position))

(declare-fun ar__rec1t__g1__first__bit () Int)

(declare-fun ar__rec1t__g1__last__bit () Int)

(declare-fun ar__rec1t__g1__position () Int)

;; ar__rec1t__g1__first__bit_axiom
  (assert (<= 0 ar__rec1t__g1__first__bit))

;; ar__rec1t__g1__last__bit_axiom
  (assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))

;; ar__rec1t__g1__position_axiom
  (assert (<= 0 ar__rec1t__g1__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes () ((rec1t__ref (mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content
                                                            a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__ar__rec2t__f2 et3)(rec__ar__rec2t__g2 us_rep)(rec__ar__rec2t__h2 enum1ta)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) et3 
  (rec__ar__rec2t__f2 a))

(define-fun us_split_fields_G2__projection ((a us_split_fields2)) us_rep 
  (rec__ar__rec2t__g2 a))

(define-fun us_split_fields_H2__projection ((a us_split_fields2)) enum1ta 
  (rec__ar__rec2t__h2 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__ar__rec2t__f2 (us_split_fields3 a))) 
                         (to_rep2 (rec__ar__rec2t__f2 (us_split_fields3 b))))
                         (= (bool_eq6
                            (rec__ar__rec2t__g2 (us_split_fields3 a))
                            (rec__ar__rec2t__g2 (us_split_fields3 b))) true))
                         (= (to_rep4
                            (rec__ar__rec2t__h2 (us_split_fields3 a))) 
                         (to_rep4 (rec__ar__rec2t__h2 (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun ar__rec2t__f2__first__bit () Int)

(declare-fun ar__rec2t__f2__last__bit () Int)

(declare-fun ar__rec2t__f2__position () Int)

;; ar__rec2t__f2__first__bit_axiom
  (assert (<= 0 ar__rec2t__f2__first__bit))

;; ar__rec2t__f2__last__bit_axiom
  (assert (< ar__rec2t__f2__first__bit ar__rec2t__f2__last__bit))

;; ar__rec2t__f2__position_axiom
  (assert (<= 0 ar__rec2t__f2__position))

(declare-fun ar__rec2t__g2__first__bit () Int)

(declare-fun ar__rec2t__g2__last__bit () Int)

(declare-fun ar__rec2t__g2__position () Int)

;; ar__rec2t__g2__first__bit_axiom
  (assert (<= 0 ar__rec2t__g2__first__bit))

;; ar__rec2t__g2__last__bit_axiom
  (assert (< ar__rec2t__g2__first__bit ar__rec2t__g2__last__bit))

;; ar__rec2t__g2__position_axiom
  (assert (<= 0 ar__rec2t__g2__position))

(declare-fun ar__rec2t__h2__first__bit () Int)

(declare-fun ar__rec2t__h2__last__bit () Int)

(declare-fun ar__rec2t__h2__position () Int)

;; ar__rec2t__h2__first__bit_axiom
  (assert (<= 0 ar__rec2t__h2__first__bit))

;; ar__rec2t__h2__last__bit_axiom
  (assert (< ar__rec2t__h2__first__bit ar__rec2t__h2__last__bit))

;; ar__rec2t__h2__position_axiom
  (assert (<= 0 ar__rec2t__h2__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((rec2t__ref (mk_rec2t__ref (rec2t__content us_rep1)))))
(define-fun rec2t__ref___projection ((a rec2t__ref)) us_rep1 (rec2t__content
                                                             a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__ar__rec3t__f3 us_rep1)(rec__ar__rec3t__g3 et4)))))
(define-fun us_split_fields_F3__projection ((a us_split_fields4)) us_rep1 
  (rec__ar__rec3t__f3 a))

(define-fun us_split_fields_G3__projection ((a us_split_fields4)) et4 
  (rec__ar__rec3t__g3 a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq8 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq7
                            (rec__ar__rec3t__f3 (us_split_fields5 a))
                            (rec__ar__rec3t__f3 (us_split_fields5 b))) true)
                         (= (to_rep3
                            (rec__ar__rec3t__g3 (us_split_fields5 a))) 
                         (to_rep3 (rec__ar__rec3t__g3 (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun ar__rec3t__f3__first__bit () Int)

(declare-fun ar__rec3t__f3__last__bit () Int)

(declare-fun ar__rec3t__f3__position () Int)

;; ar__rec3t__f3__first__bit_axiom
  (assert (<= 0 ar__rec3t__f3__first__bit))

;; ar__rec3t__f3__last__bit_axiom
  (assert (< ar__rec3t__f3__first__bit ar__rec3t__f3__last__bit))

;; ar__rec3t__f3__position_axiom
  (assert (<= 0 ar__rec3t__f3__position))

(declare-fun ar__rec3t__g3__first__bit () Int)

(declare-fun ar__rec3t__g3__last__bit () Int)

(declare-fun ar__rec3t__g3__position () Int)

;; ar__rec3t__g3__first__bit_axiom
  (assert (<= 0 ar__rec3t__g3__first__bit))

;; ar__rec3t__g3__last__bit_axiom
  (assert (< ar__rec3t__g3__first__bit ar__rec3t__g3__last__bit))

;; ar__rec3t__g3__position_axiom
  (assert (<= 0 ar__rec3t__g3__position))

(declare-fun dummy8 () us_rep2)

(declare-datatypes ()
((rec3t__ref (mk_rec3t__ref (rec3t__content us_rep2)))))
(define-fun rec3t__ref___projection ((a rec3t__ref)) us_rep2 (rec3t__content
                                                             a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep2))))))
(declare-fun slide ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq9 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_138 Int))
                           (=>
                           (and (<= a__first temp___idx_138)
                           (<= temp___idx_138 a__last))
                           (= (bool_eq8 (select a temp___idx_138)
                              (select b (+ (- b__first a__first) temp___idx_138))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq9 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_138 Int))
  (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last))
  (= (bool_eq8 (select a temp___idx_138)
     (select b (+ (- b__first a__first) temp___idx_138))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun f () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_182 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool (=>
                                      (or (= temp___is_init_179 true)
                                      (<= 1 25)) (in_range3 temp___expr_182)))

(define-fun dynamic_invariant3 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 10 90)) (in_range4
                                      temp___expr_188)))

(define-fun dynamic_invariant4 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 50 59)) (in_range5
                                      temp___expr_194)))

(define-fun dynamic_invariant5 ((temp___expr_212 Int)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)) Bool (=>
                                      (or (= temp___is_init_209 true)
                                      (<= 1 4)) (in_range6 temp___expr_212)))

(declare-fun a () (Array Int us_rep2))

(declare-fun o () et1)

(declare-fun o1 () et1)

(declare-fun o2 () et2)

(declare-fun o3 () et1)

(declare-fun o4 () et2)

(declare-fun o5 () et3)

(declare-fun o6 () et1)

(declare-fun o7 () et2)

(declare-fun o8 () enum1ta)

(declare-fun o9 () et3)

(declare-fun o10 () et1)

(declare-fun o11 () et2)

(declare-fun o12 () enum1ta)

(declare-fun o13 () et3)

(declare-fun o14 () et1)

(declare-fun o15 () et2)

(declare-fun o16 () enum1ta)

(declare-fun o17 () et4)

(declare-fun o18 () et3)

(declare-fun o19 () et1)

(declare-fun o20 () et2)

(declare-fun o21 () enum1ta)

(declare-fun o22 () et4)

(declare-fun o23 () (Array Int us_rep2))

(declare-fun result () map__ref)

(declare-fun a1 () (Array Int us_rep2))

(declare-fun a2 () map__ref)

(declare-fun a3 () (Array Int us_rep2))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range2 f))

;; H
  (assert (= (to_rep o) f))

;; H
  (assert (= o o1))

;; H
  (assert
  (= (rec__ar__rec1t__g1
     (us_split_fields1
     (rec__ar__rec2t__g2
     (us_split_fields3 (rec__ar__rec3t__f3 (us_split_fields5 (select a i))))))) 
  o2))

;; H
  (assert (= o3 o1))

;; H
  (assert (= o4 o2))

;; H
  (assert
  (= (rec__ar__rec2t__f2
     (us_split_fields3 (rec__ar__rec3t__f3 (us_split_fields5 (select a i))))) 
  o5))

;; H
  (assert (= o6 o3))

;; H
  (assert (= o7 o4))

;; H
  (assert
  (= (rec__ar__rec2t__h2
     (us_split_fields3 (rec__ar__rec3t__f3 (us_split_fields5 (select a i))))) 
  o8))

;; H
  (assert (= o9 o5))

;; H
  (assert (= o10 o6))

;; H
  (assert (= o11 o7))

;; H
  (assert (= o12 o8))

;; H
  (assert (= o13 o9))

;; H
  (assert (= o14 o10))

;; H
  (assert (= o15 o11))

;; H
  (assert (= o16 o12))

;; H
  (assert (= (rec__ar__rec3t__g3 (us_split_fields5 (select a i))) o17))

;; H
  (assert (= o18 o13))

;; H
  (assert (= o19 o14))

;; H
  (assert (= o20 o15))

;; H
  (assert (= o21 o16))

;; H
  (assert (= o22 o17))

;; H
  (assert
  (= o23 (store a i (mk___rep2
                    (mk___split_fields2
                    (mk___rep1
                    (mk___split_fields1 o18
                    (mk___rep (mk___split_fields o19 o20)) o21)) o22)))))

;; H
  (assert (= result (mk_map__ref a)))

;; H
  (assert (= a1 o23))

;; H
  (assert (= a2 (mk_map__ref a1)))

;; H
  (assert (= a3 a1))

(declare-fun n () Int)

;; H
  (assert (<= 1 n))

;; H
  (assert (<= n 16))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 75, characters 0-0
  (not (in_range4
  (to_rep2
  (rec__ar__rec2t__f2
  (us_split_fields3
  (rec__ar__rec3t__f3 (us_split_fields5 (select (map__content a2) n)))))))))
(check-sat)
