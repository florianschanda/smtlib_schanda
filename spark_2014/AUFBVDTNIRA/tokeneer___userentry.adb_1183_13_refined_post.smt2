;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort yearst 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (yearst yearst) Bool)

(declare-fun dummy () yearst)

(declare-datatypes ()
((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep (yearst) Int)

(declare-fun of_rep (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort monthst 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (monthst monthst) Bool)

(declare-fun dummy1 () monthst)

(declare-datatypes ()
((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep1 (monthst) Int)

(declare-fun of_rep1 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort dayst 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (dayst dayst) Bool)

(declare-fun dummy2 () dayst)

(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep2 (dayst) Int)

(declare-fun of_rep2 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort millisecst 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (millisecst millisecst) Bool)

(declare-fun dummy3 () millisecst)

(declare-datatypes ()
((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst 
  (millisecst__content a))

(declare-fun to_rep3 (millisecst) Int)

(declare-fun of_rep3 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields)) yearst 
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields)) monthst 
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields)) dayst 
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields)) millisecst 
  (rec__clock__timet__millisec a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep
                           (rec__clock__timet__year (us_split_fields1 a))) 
                        (to_rep
                        (rec__clock__timet__year (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__clock__timet__month (us_split_fields1 a))) 
                        (to_rep1
                        (rec__clock__timet__month (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__clock__timet__day (us_split_fields1 a))) 
                        (to_rep2
                        (rec__clock__timet__day (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__clock__timet__millisec (us_split_fields1 a))) 
                        (to_rep3
                        (rec__clock__timet__millisec (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun clock__timet__year__first__bit () Int)

(declare-fun clock__timet__year__last__bit () Int)

(declare-fun clock__timet__year__position () Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-fun clock__timet__month__first__bit () Int)

(declare-fun clock__timet__month__last__bit () Int)

(declare-fun clock__timet__month__position () Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-fun clock__timet__day__first__bit () Int)

(declare-fun clock__timet__day__last__bit () Int)

(declare-fun clock__timet__day__position () Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-fun clock__timet__millisec__first__bit () Int)

(declare-fun clock__timet__millisec__last__bit () Int)

(declare-fun clock__timet__millisec__position () Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((timet__ref (mk_timet__ref (timet__content us_rep)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep (timet__content
                                                            a))

(declare-fun thecurrenttime (us_private) us_rep)

(declare-fun thecurrenttime__function_guard (us_rep us_private) Bool)

;; thecurrenttime__post_axiom
  (assert true)

(declare-fun greaterthanorequal (us_rep us_rep) Bool)

(declare-fun greaterthanorequal__function_guard (Bool us_rep us_rep) Bool)

;; greaterthanorequal__post_axiom
  (assert true)

(declare-fun islocked (us_private) Bool)

(declare-fun islocked__function_guard (Bool us_private) Bool)

;; islocked__post_axiom
  (assert true)

(declare-fun alarm_timeout (us_private) us_rep)

(declare-fun alarm_timeout__function_guard (us_rep us_private) Bool)

;; alarm_timeout__post_axiom
  (assert true)

(declare-fun thecurrentdoor (us_private) Int)

(declare-fun thecurrentdoor__function_guard (Int us_private) Bool)

(declare-sort t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (t t) Bool)

(declare-fun dummy5 () t)

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref_3__projection ((a t__ref)) t (t__content a))

(define-fun dynamic_invariant ((temp___expr_859 Int)
  (temp___is_init_856 Bool) (temp___skip_constant_857 Bool)
  (temp___do_toplevel_858 Bool)) Bool (=>
                                      (or (= temp___is_init_856 true)
                                      (<= 0 1)) (in_range5 temp___expr_859)))

;; thecurrentdoor__post_axiom
  (assert
  (forall ((door__state us_private))
  (! (let ((result (thecurrentdoor door__state)))
     (=> (thecurrentdoor__function_guard result door__state)
     (dynamic_invariant result true false true))) :pattern ((thecurrentdoor
                                                            door__state)) )))

(declare-fun thedooralarm (us_private) Int)

(declare-fun thedooralarm__function_guard (Int us_private) Bool)

(declare-sort statust 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (statust statust) Bool)

(declare-fun dummy6 () statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_316 Int)
  (temp___is_init_313 Bool) (temp___skip_constant_314 Bool)
  (temp___do_toplevel_315 Bool)) Bool (=>
                                      (or (= temp___is_init_313 true)
                                      (<= 0 1)) (in_range6 temp___expr_316)))

;; thedooralarm__post_axiom
  (assert
  (forall ((door__state us_private))
  (! (let ((result (thedooralarm door__state)))
     (=> (thedooralarm__function_guard result door__state)
     (dynamic_invariant1 result true false true))) :pattern ((thedooralarm
                                                             door__state)) )))

(declare-fun privatekeypresent (us_private) Bool)

(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)

;; privatekeypresent__post_axiom
  (assert true)

(declare-sort statscount 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (statscount statscount) Bool)

(declare-fun dummy7 () statscount)

(declare-datatypes ()
((statscount__ref (mk_statscount__ref (statscount__content statscount)))))
(define-fun statscount__ref___projection ((a statscount__ref)) statscount 
  (statscount__content a))

(declare-fun to_rep4 (statscount) Int)

(declare-fun of_rep4 (Int) statscount)

;; inversion_axiom
  (assert
  (forall ((x statscount))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x statscount)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__stats__t__successentry statscount)(rec__stats__t__failentry statscount)(rec__stats__t__successbio statscount)(rec__stats__t__failbio statscount)))))
(define-fun us_split_fields_SuccessEntry__projection ((a us_split_fields2)) statscount 
  (rec__stats__t__successentry a))

(define-fun us_split_fields_FailEntry__projection ((a us_split_fields2)) statscount 
  (rec__stats__t__failentry a))

(define-fun us_split_fields_SuccessBio__projection ((a us_split_fields2)) statscount 
  (rec__stats__t__successbio a))

(define-fun us_split_fields_FailBio__projection ((a us_split_fields2)) statscount 
  (rec__stats__t__failbio a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_13__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_14__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                 a))

(define-fun bool_eq8 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep4
                            (rec__stats__t__successentry
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__stats__t__successentry
                                                   (us_split_fields3 b))))
                         (= (to_rep4
                            (rec__stats__t__failentry (us_split_fields3 a))) 
                         (to_rep4
                         (rec__stats__t__failentry (us_split_fields3 b)))))
                         (= (to_rep4
                            (rec__stats__t__successbio (us_split_fields3 a))) 
                         (to_rep4
                         (rec__stats__t__successbio (us_split_fields3 b)))))
                         (= (to_rep4
                            (rec__stats__t__failbio (us_split_fields3 a))) 
                         (to_rep4
                         (rec__stats__t__failbio (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun stats__t__successentry__first__bit () Int)

(declare-fun stats__t__successentry__last__bit () Int)

(declare-fun stats__t__successentry__position () Int)

;; stats__t__successentry__first__bit_axiom
  (assert (<= 0 stats__t__successentry__first__bit))

;; stats__t__successentry__last__bit_axiom
  (assert
  (< stats__t__successentry__first__bit stats__t__successentry__last__bit))

;; stats__t__successentry__position_axiom
  (assert (<= 0 stats__t__successentry__position))

(declare-fun stats__t__failentry__first__bit () Int)

(declare-fun stats__t__failentry__last__bit () Int)

(declare-fun stats__t__failentry__position () Int)

;; stats__t__failentry__first__bit_axiom
  (assert (<= 0 stats__t__failentry__first__bit))

;; stats__t__failentry__last__bit_axiom
  (assert (< stats__t__failentry__first__bit stats__t__failentry__last__bit))

;; stats__t__failentry__position_axiom
  (assert (<= 0 stats__t__failentry__position))

(declare-fun stats__t__successbio__first__bit () Int)

(declare-fun stats__t__successbio__last__bit () Int)

(declare-fun stats__t__successbio__position () Int)

;; stats__t__successbio__first__bit_axiom
  (assert (<= 0 stats__t__successbio__first__bit))

;; stats__t__successbio__last__bit_axiom
  (assert
  (< stats__t__successbio__first__bit stats__t__successbio__last__bit))

;; stats__t__successbio__position_axiom
  (assert (<= 0 stats__t__successbio__position))

(declare-fun stats__t__failbio__first__bit () Int)

(declare-fun stats__t__failbio__last__bit () Int)

(declare-fun stats__t__failbio__position () Int)

;; stats__t__failbio__first__bit_axiom
  (assert (<= 0 stats__t__failbio__first__bit))

;; stats__t__failbio__last__bit_axiom
  (assert (< stats__t__failbio__first__bit stats__t__failbio__last__bit))

;; stats__t__failbio__position_axiom
  (assert (<= 0 stats__t__failbio__position))

(declare-fun dummy8 () us_rep1)

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 us_rep1)))))
(define-fun t__ref_4__projection ((a t__ref1)) us_rep1 (t__content1 a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun currentactivitypossible (us_private Int) Bool)

(declare-fun currentactivitypossible__function_guard (Bool us_private
  Int) Bool)

(declare-fun inprogress (Int) Bool)

(declare-fun inprogress__function_guard (Bool Int) Bool)

(declare-sort statust1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (statust1 statust1) Bool)

(declare-fun dummy9 () statust1)

(declare-datatypes ()
((statust__ref1 (mk_statust__ref1 (statust__content1 statust1)))))
(define-fun statust__ref_2__projection ((a statust__ref1)) statust1 (statust__content1
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_1767 Int)
  (temp___is_init_1764 Bool) (temp___skip_constant_1765 Bool)
  (temp___do_toplevel_1766 Bool)) Bool (=>
                                       (or (= temp___is_init_1764 true)
                                       (<= 0 7)) (in_range8
                                       temp___expr_1767)))

(declare-fun userhasdeparted (us_private Int) Bool)

(declare-fun userhasdeparted__function_guard (Bool us_private Int) Bool)

;; currentactivitypossible__post_axiom
  (assert true)

;; currentactivitypossible__def_axiom
  (assert
  (forall ((usertoken__state us_private))
  (forall ((userentry__status Int))
  (! (=> (currentactivitypossible__function_guard
     (currentactivitypossible usertoken__state userentry__status)
     usertoken__state userentry__status)
     (and (inprogress__function_guard (inprogress userentry__status)
     userentry__status)
     (and (userhasdeparted__function_guard
     (userhasdeparted usertoken__state userentry__status) usertoken__state
     userentry__status)
     (= (= (currentactivitypossible usertoken__state userentry__status) true)
     (or (= (inprogress userentry__status) true)
     (= (userhasdeparted usertoken__state userentry__status) true)))))) :pattern (
  (currentactivitypossible usertoken__state userentry__status)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort activestatust 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (activestatust activestatust) Bool)

(declare-fun dummy10 () activestatust)

(declare-datatypes ()
((activestatust__ref
 (mk_activestatust__ref (activestatust__content activestatust)))))
(define-fun activestatust__ref___projection ((a activestatust__ref)) activestatust 
  (activestatust__content a))

(define-fun dynamic_invariant3 ((temp___expr_1790 Int)
  (temp___is_init_1787 Bool) (temp___skip_constant_1788 Bool)
  (temp___do_toplevel_1789 Bool)) Bool (=>
                                       (or (= temp___is_init_1787 true)
                                       (<= 1 7)) (in_range9
                                       temp___expr_1790)))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun ispresent (us_private) Bool)

(declare-fun ispresent__function_guard (Bool us_private) Bool)

;; userhasdeparted__post_axiom
  (assert true)

;; userhasdeparted__def_axiom
  (assert
  (forall ((usertoken__state us_private))
  (forall ((userentry__status Int))
  (! (=> (userhasdeparted__function_guard
     (userhasdeparted usertoken__state userentry__status) usertoken__state
     userentry__status)
     (and (ispresent__function_guard (ispresent usertoken__state)
     usertoken__state)
     (= (= (userhasdeparted usertoken__state userentry__status) true)
     (and (< 0 userentry__status)
     (not (= (ispresent usertoken__state) true)))))) :pattern ((userhasdeparted
                                                               usertoken__state
                                                               userentry__status)) ))))

;; inprogress__post_axiom
  (assert true)

;; inprogress__def_axiom
  (assert
  (forall ((userentry__status Int))
  (! (=> (inprogress__function_guard (inprogress userentry__status)
     userentry__status)
     (= (= (inprogress userentry__status) true)
     (and (< 0 userentry__status) (< userentry__status 7)))) :pattern (
  (inprogress userentry__status)) )))

(define-fun dynamic_invariant4 ((temp___expr_376 Int)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)) Bool (=>
                                      (or (= temp___is_init_373 true)
                                      (<= 1901 2099)) (in_range1
                                      temp___expr_376)))

(define-fun dynamic_invariant5 ((temp___expr_382 Int)
  (temp___is_init_379 Bool) (temp___skip_constant_380 Bool)
  (temp___do_toplevel_381 Bool)) Bool (=>
                                      (or (= temp___is_init_379 true)
                                      (<= 1 12)) (in_range2 temp___expr_382)))

(define-fun dynamic_invariant6 ((temp___expr_388 Int)
  (temp___is_init_385 Bool) (temp___skip_constant_386 Bool)
  (temp___do_toplevel_387 Bool)) Bool (=>
                                      (or (= temp___is_init_385 true)
                                      (<= 1 31)) (in_range3 temp___expr_388)))

(define-fun dynamic_invariant7 ((temp___expr_412 Int)
  (temp___is_init_409 Bool) (temp___skip_constant_410 Bool)
  (temp___do_toplevel_411 Bool)) Bool (=>
                                      (or (= temp___is_init_409 true)
                                      (<= 0 86399999)) (in_range4
                                      temp___expr_412)))

(define-fun dynamic_invariant8 ((temp___expr_1085 Int)
  (temp___is_init_1082 Bool) (temp___skip_constant_1083 Bool)
  (temp___do_toplevel_1084 Bool)) Bool (=>
                                       (or (= temp___is_init_1082 true)
                                       (<= 0 2147483647)) (in_range7
                                       temp___expr_1085)))

;; ispresent__post_axiom
  (assert true)

(declare-fun currenttime () us_private)

(declare-fun state () us_private)

(declare-fun state1 () us_private)

(declare-fun filestate () us_private)

(declare-fun state2 () us_private)

(declare-fun state3 () us_private)

(declare-fun state4 () us_private)

(declare-fun status () us_private)

(declare-fun output () us_private)

(declare-fun status1 () Int)

(declare-fun fingertimeout__split_fields () yearst)

(declare-fun fingertimeout__split_fields1 () monthst)

(declare-fun fingertimeout__split_fields2 () dayst)

(declare-fun fingertimeout__split_fields3 () millisecst)

(declare-fun tokenremovaltimeout__split_fields () yearst)

(declare-fun tokenremovaltimeout__split_fields1 () monthst)

(declare-fun tokenremovaltimeout__split_fields2 () dayst)

(declare-fun tokenremovaltimeout__split_fields3 () millisecst)

(declare-fun localstatus () Int)

(declare-fun o () Int)

(declare-fun state5 () us_private)

(declare-fun state6 () us_private)

(declare-fun filestate1 () us_private)

(declare-fun state7 () us_private)

(declare-fun status2 () us_private)

(declare-fun output1 () us_private)

(declare-fun fingertimeout__split_fields4 () yearst)

(declare-fun fingertimeout__split_fields5 () monthst)

(declare-fun fingertimeout__split_fields6 () dayst)

(declare-fun fingertimeout__split_fields7 () millisecst)

(declare-fun tokenremovaltimeout__split_fields4 () us_split_fields)

(declare-fun result () int__ref)

(declare-fun localstatus1 () Int)

(declare-fun filestate2 () us_private)

(declare-fun state8 () us_private)

(declare-fun state9 () us_private)

(declare-fun state10 () us_private)

(declare-fun status3 () us_private)

(declare-fun thestats__split_fields () us_split_fields2)

(declare-fun status4 () Int)

(declare-fun fingertimeout__split_fields8 () us_split_fields)

(declare-fun filestate3 () us_private)

(declare-fun state11 () us_private)

(declare-fun state12 () us_private)

(declare-fun state13 () us_private)

(declare-fun thestats__split_fields1 () us_split_fields2)

(declare-fun status5 () Int)

(declare-fun filestate4 () us_private)

(declare-fun state14 () us_private)

(declare-fun state15 () us_private)

(declare-fun state16 () us_private)

(declare-fun thestats__split_fields2 () us_split_fields2)

(declare-fun status6 () Int)

(declare-fun filestate5 () us_private)

(declare-fun state17 () us_private)

(declare-fun filestate6 () us_private)

(declare-fun state18 () us_private)

(declare-fun state19 () us_private)

(declare-fun state20 () us_private)

(declare-fun status7 () us_private)

(declare-fun output2 () us_private)

(declare-fun thestats__split_fields3 () us_split_fields2)

(declare-fun status8 () Int)

(declare-fun filestate7 () us_private)

(declare-fun state21 () us_private)

(declare-fun state22 () us_private)

(declare-fun state23 () us_private)

(declare-fun thestats__split_fields4 () us_split_fields2)

(declare-fun status9 () Int)

(declare-fun tokenremovaltimeout__split_fields5 () us_split_fields)

(declare-fun filestate8 () us_private)

(declare-fun state24 () us_private)

(declare-fun state25 () us_private)

(declare-fun state26 () us_private)

(declare-fun state27 () us_private)

(declare-fun state28 () us_private)

(declare-fun thestats__split_fields5 () us_split_fields2)

(declare-fun status10 () Int)

(declare-fun filestate9 () us_private)

(declare-fun state29 () us_private)

(declare-fun state30 () us_private)

(declare-fun state31 () us_private)

(declare-fun thestats__split_fields6 () us_split_fields2)

(declare-fun status11 () Int)

(declare-fun filestate10 () us_private__ref)

(declare-fun state32 () us_private__ref)

(declare-fun state33 () us_private__ref)

(declare-fun state34 () us_private__ref)

(declare-fun filestate11 () us_private__ref)

(declare-fun state35 () us_private__ref)

(declare-fun state36 () us_private__ref)

(declare-fun state37 () us_private__ref)

(declare-fun status12 () us_private__ref)

(declare-fun output3 () us_private__ref)

(declare-fun thestats__split_fields7 () us_split_fields__ref1)

(declare-fun status13 () int__ref)

(declare-fun fingertimeout__split_fields9 () us_split_fields__ref)

(declare-fun tokenremovaltimeout__split_fields6 () us_split_fields__ref)

(declare-fun localstatus2 () int__ref)

(declare-fun filestate12 () us_private)

(declare-fun state38 () us_private)

(declare-fun state39 () us_private)

(declare-fun state40 () us_private)

(declare-fun filestate13 () us_private)

(declare-fun state41 () us_private)

(declare-fun state42 () us_private)

(declare-fun state43 () us_private)

(declare-fun status14 () us_private)

(declare-fun output4 () us_private)

(declare-fun thestats__split_fields8 () us_split_fields2)

(declare-fun status15 () Int)

(declare-fun fingertimeout__split_fields10 () us_split_fields)

(declare-fun tokenremovaltimeout__split_fields7 () us_split_fields)

(declare-fun localstatus3 () Int)

;; H
  (assert (in_range8 status1))

;; H
  (assert (currentactivitypossible__function_guard
  (currentactivitypossible state4 status1) state4 status1))

;; H
  (assert (privatekeypresent__function_guard (privatekeypresent state3)
  state3))

;; H
  (assert (islocked__function_guard (islocked state) state))

;; H
  (assert (thecurrentdoor__function_guard (thecurrentdoor state1) state1))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state1) state1))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state1) state1))

;; H
  (assert (greaterthanorequal__function_guard
  (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state1))
  (thecurrenttime currenttime) (alarm_timeout state1)))

;; H
  (assert (thedooralarm__function_guard (thedooralarm state1) state1))

;; H
  (assert
  (and
  (and (= (currentactivitypossible state4 status1) true)
  (= (privatekeypresent state3) true))
  (=
  (and (and (= (islocked state) true) (= (thecurrentdoor state1) 0))
  (= (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state1)) true))
  (= (thedooralarm state1) 0))))

;; H
  (assert (islocked__function_guard (islocked state25) state25))

;; H
  (assert (thecurrentdoor__function_guard (thecurrentdoor state26) state26))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state26) state26))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard (alarm_timeout state26) state26))

;; H
  (assert (greaterthanorequal__function_guard
  (greaterthanorequal (thecurrenttime currenttime) (alarm_timeout state26))
  (thecurrenttime currenttime) (alarm_timeout state26)))

;; H
  (assert (thedooralarm__function_guard (thedooralarm state26) state26))

;; H
  (assert (=> (<= 1 7) (in_range9 localstatus)))

;; H
  (assert (and (= o status1) (in_range9 status1)))

;; H
  (assert (= result (mk_int__ref localstatus)))

;; H
  (assert (= localstatus1 o))

;; H
  (assert (=> (= localstatus1 1) (in_range8 status4)))

;; H
  (assert
  (=> (= localstatus1 1)
  (= tokenremovaltimeout__split_fields5 (mk___split_fields
                                        tokenremovaltimeout__split_fields
                                        tokenremovaltimeout__split_fields1
                                        tokenremovaltimeout__split_fields2
                                        tokenremovaltimeout__split_fields3))))

;; H
  (assert (=> (= localstatus1 1) (= output2 output)))

;; H
  (assert (=> (= localstatus1 1) (= state18 state2)))

;; H
  (assert (=> (= localstatus1 1) (= filestate6 filestate)))

;; H
  (assert (=> (= localstatus1 1) (= state26 state1)))

;; H
  (assert (=> (= localstatus1 1) (= state25 state)))

;; H
  (assert
  (=> (= localstatus1 1)
  (= tokenremovaltimeout__split_fields5 tokenremovaltimeout__split_fields4)))

;; H
  (assert (=> (= localstatus1 1) (= output2 output1)))

;; H
  (assert (=> (= localstatus1 1) (= state18 state7)))

;; H
  (assert (=> (= localstatus1 1) (= filestate6 filestate1)))

;; H
  (assert (=> (= localstatus1 1) (= state26 state6)))

;; H
  (assert (=> (= localstatus1 1) (= state25 state5)))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (in_range8 status5))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (= localstatus1 2)
  (= tokenremovaltimeout__split_fields5 (mk___split_fields
                                        tokenremovaltimeout__split_fields
                                        tokenremovaltimeout__split_fields1
                                        tokenremovaltimeout__split_fields2
                                        tokenremovaltimeout__split_fields3)))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= output2 output))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= status7 status))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state18 state2))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (= localstatus1 2) (= filestate6 filestate))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state26 state1))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state25 state))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (= localstatus1 2)
  (= tokenremovaltimeout__split_fields5 tokenremovaltimeout__split_fields4))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= output2 output1))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= status7 status2))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state18 state7))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (= localstatus1 2) (= filestate6 filestate1))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state26 state6))))

;; H
  (assert
  (=> (not (= localstatus1 1)) (=> (= localstatus1 2) (= state25 state5))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (in_range8 status6)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (= localstatus1 3)
  (= tokenremovaltimeout__split_fields5 (mk___split_fields
                                        tokenremovaltimeout__split_fields
                                        tokenremovaltimeout__split_fields1
                                        tokenremovaltimeout__split_fields2
                                        tokenremovaltimeout__split_fields3))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= output2 output)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= status7 status)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state18 state2)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (= localstatus1 3) (= filestate6 filestate)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state26 state1)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state25 state)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (= localstatus1 3)
  (= tokenremovaltimeout__split_fields5 tokenremovaltimeout__split_fields4)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= output2 output1)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= status7 status2)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state18 state7)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (= localstatus1 3) (= filestate6 filestate1)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state26 state6)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (=> (= localstatus1 3) (= state25 state5)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (=> (= localstatus1 4) (in_range8 status8))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (= localstatus1 4)
  (= tokenremovaltimeout__split_fields5 (mk___split_fields
                                        tokenremovaltimeout__split_fields
                                        tokenremovaltimeout__split_fields1
                                        tokenremovaltimeout__split_fields2
                                        tokenremovaltimeout__split_fields3)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (=> (= localstatus1 4) (= state26 state1))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (=> (= localstatus1 4) (= state25 state))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (= localstatus1 4)
  (= tokenremovaltimeout__split_fields5 tokenremovaltimeout__split_fields4))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (=> (= localstatus1 4) (= state26 state6))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (=> (= localstatus1 4) (= state25 state5))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (=> (= localstatus1 5) (in_range8 status9)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (=> (= localstatus1 5) (= state26 state1)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (=> (= localstatus1 5) (= state25 state)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (=> (= localstatus1 5) (= state26 state6)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (=> (= localstatus1 5) (= state25 state5)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (= localstatus1 6)
  (and
  (=
  (and (and (= (islocked state25) true) (= (thecurrentdoor state26) 0))
  (= (greaterthanorequal (thecurrenttime currenttime)
     (alarm_timeout state26)) true))
  (= (thedooralarm state26) 0)) (in_range8 status10)))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (in_range8 status11))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= status10 status11))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6))
  (= thestats__split_fields5 thestats__split_fields6))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state28 state31))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state27 state30))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state26 state1))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state25 state))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state24 state29))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= filestate8 filestate9))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= status10 status11))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6))
  (= thestats__split_fields5 thestats__split_fields6))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state28 state31))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state27 state30))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state26 state6))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state25 state5))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= state24 state29))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (=> (not (= localstatus1 6)) (= filestate8 filestate9))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (= tokenremovaltimeout__split_fields5 (mk___split_fields
                                        tokenremovaltimeout__split_fields
                                        tokenremovaltimeout__split_fields1
                                        tokenremovaltimeout__split_fields2
                                        tokenremovaltimeout__split_fields3))))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= status9 status10)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (= thestats__split_fields4 thestats__split_fields5)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state23 state28)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state22 state27)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state21 state24)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= filestate7 filestate8)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (= tokenremovaltimeout__split_fields5 tokenremovaltimeout__split_fields4)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= status9 status10)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5))
  (= thestats__split_fields4 thestats__split_fields5)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state23 state28)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state22 state27)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= state21 state24)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (=> (not (= localstatus1 5)) (= filestate7 filestate8)))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= status8 status9))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (= thestats__split_fields3 thestats__split_fields4))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= output2 output))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= status7 status))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state20 state23))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state19 state22))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state18 state2))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= filestate6 filestate))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state17 state21))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= filestate5 filestate7))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= status8 status9))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4))
  (= thestats__split_fields3 thestats__split_fields4))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= output2 output1))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= status7 status2))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state20 state23))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state19 state22))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state18 state7))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= filestate6 filestate1))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= state17 state21))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (=> (not (= localstatus1 4)) (= filestate5 filestate7))))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (= status6 status8)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3))
  (= thestats__split_fields2 thestats__split_fields3)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (= state16 state20)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (= state15 state19)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (= state14 state17)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (=> (not (= localstatus1 3)) (= filestate4 filestate5)))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (= status5 status6))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2))
  (= thestats__split_fields1 thestats__split_fields2))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (= state13 state16))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (= state12 state15))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (= state11 state14))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (=> (not (= localstatus1 2)) (= filestate3 filestate4))))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (= fingertimeout__split_fields8 (mk___split_fields
                                  fingertimeout__split_fields
                                  fingertimeout__split_fields1
                                  fingertimeout__split_fields2
                                  fingertimeout__split_fields3))))

;; H
  (assert (=> (not (= localstatus1 1)) (= status4 status5)))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (= thestats__split_fields thestats__split_fields1)))

;; H
  (assert (=> (not (= localstatus1 1)) (= status3 status7)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state10 state13)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state9 state12)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state8 state11)))

;; H
  (assert (=> (not (= localstatus1 1)) (= filestate2 filestate3)))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (= fingertimeout__split_fields8 (mk___split_fields
                                  fingertimeout__split_fields4
                                  fingertimeout__split_fields5
                                  fingertimeout__split_fields6
                                  fingertimeout__split_fields7))))

;; H
  (assert (=> (not (= localstatus1 1)) (= status4 status5)))

;; H
  (assert
  (=> (not (= localstatus1 1))
  (= thestats__split_fields thestats__split_fields1)))

;; H
  (assert (=> (not (= localstatus1 1)) (= status3 status7)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state10 state13)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state9 state12)))

;; H
  (assert (=> (not (= localstatus1 1)) (= state8 state11)))

;; H
  (assert (=> (not (= localstatus1 1)) (= filestate2 filestate3)))

;; H
  (assert (= localstatus2 (mk_int__ref localstatus1)))

;; H
  (assert
  (= tokenremovaltimeout__split_fields6 (mk___split_fields__ref
                                        tokenremovaltimeout__split_fields5)))

;; H
  (assert
  (= fingertimeout__split_fields9 (mk___split_fields__ref
                                  fingertimeout__split_fields8)))

;; H
  (assert (= status13 (mk_int__ref status4)))

;; H
  (assert
  (= thestats__split_fields7 (mk___split_fields__ref1 thestats__split_fields)))

;; H
  (assert (= output3 (mk___private__ref output2)))

;; H
  (assert (= status12 (mk___private__ref status3)))

;; H
  (assert (= state37 (mk___private__ref state10)))

;; H
  (assert (= state36 (mk___private__ref state9)))

;; H
  (assert (= state35 (mk___private__ref state18)))

;; H
  (assert (= filestate11 (mk___private__ref filestate6)))

;; H
  (assert (= state34 (mk___private__ref state26)))

;; H
  (assert (= state33 (mk___private__ref state25)))

;; H
  (assert (= state32 (mk___private__ref state8)))

;; H
  (assert (= filestate10 (mk___private__ref filestate2)))

;; H
  (assert (= localstatus3 localstatus1))

;; H
  (assert
  (= tokenremovaltimeout__split_fields7 tokenremovaltimeout__split_fields5))

;; H
  (assert (= fingertimeout__split_fields10 fingertimeout__split_fields8))

;; H
  (assert (= status15 status4))

;; H
  (assert (= thestats__split_fields8 thestats__split_fields))

;; H
  (assert (= output4 output2))

;; H
  (assert (= status14 status3))

;; H
  (assert (= state43 state10))

;; H
  (assert (= state42 state9))

;; H
  (assert (= state41 state18))

;; H
  (assert (= filestate13 filestate6))

;; H
  (assert (= state40 state26))

;; H
  (assert (= state39 state25))

;; H
  (assert (= state38 state8))

;; H
  (assert (= filestate12 filestate2))

;; H
  (assert (islocked__function_guard (islocked (us_private__content state33))
  (us_private__content state33)))

;; H
  (assert (thecurrentdoor__function_guard
  (thecurrentdoor (us_private__content state34))
  (us_private__content state34)))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard
  (alarm_timeout (us_private__content state34))
  (us_private__content state34)))

;; H
  (assert (thecurrenttime__function_guard (thecurrenttime currenttime)
  currenttime))

;; H
  (assert (alarm_timeout__function_guard
  (alarm_timeout (us_private__content state34))
  (us_private__content state34)))

;; H
  (assert (greaterthanorequal__function_guard
  (greaterthanorequal (thecurrenttime currenttime)
  (alarm_timeout (us_private__content state34))) (thecurrenttime currenttime)
  (alarm_timeout (us_private__content state34))))

;; H
  (assert (= (islocked (us_private__content state33)) true))

;; H
  (assert (= (thecurrentdoor (us_private__content state34)) 0))

;; H
  (assert
  (= (greaterthanorequal (thecurrenttime currenttime)
     (alarm_timeout (us_private__content state34))) true))

;; H
  (assert (thedooralarm__function_guard
  (thedooralarm (us_private__content state34))
  (us_private__content state34)))

(assert
;; WP_parameter_def
 ;; File "userentry.adb", line 1000, characters 0-0
  (not (= (thedooralarm (us_private__content state34)) 0)))
(check-sat)
