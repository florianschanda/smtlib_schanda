;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort my_index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (my_index my_index) Bool)

(declare-fun dummy1 () my_index)

(declare-datatypes ()
((my_index__ref (mk_my_index__ref (my_index__content my_index)))))
(define-fun my_index__ref___projection ((a my_index__ref)) my_index (my_index__content
                                                                    a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__my_container__cursor__index natural)))))
(define-fun us_split_fields_Index__projection ((a us_split_fields)) natural 
  (rec__my_container__cursor__index a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__my_container__cursor__index
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_container__cursor__index
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_container__cursor__index__first__bit () Int)

(declare-fun my_container__cursor__index__last__bit () Int)

(declare-fun my_container__cursor__index__position () Int)

;; my_container__cursor__index__first__bit_axiom
  (assert (<= 0 my_container__cursor__index__first__bit))

;; my_container__cursor__index__last__bit_axiom
  (assert
  (< my_container__cursor__index__first__bit my_container__cursor__index__last__bit))

;; my_container__cursor__index__position_axiom
  (assert (<= 0 my_container__cursor__index__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep (cursor__content
                                                              a))

(declare-fun valid (Int) Bool)

(declare-fun valid__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; valid__post_axiom
  (assert true)

;; valid__def_axiom
  (assert
  (forall ((e Int))
  (! (=> (valid__function_guard (valid e) e) (= (= (valid e) true) (< 0 e))) :pattern (
  (valid e)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun has_element ((Array Int natural) us_rep) Bool)

(declare-fun has_element__function_guard (Bool (Array Int natural)
  us_rep) Bool)

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((c (Array Int natural)))
  (forall ((p us_rep))
  (! (=> (has_element__function_guard (has_element c p) c p)
     (= (= (has_element c p) true)
     (and
     (<= 1 (to_rep (rec__my_container__cursor__index (us_split_fields1 p))))
     (<= (to_rep (rec__my_container__cursor__index (us_split_fields1 p))) 100)))) :pattern (
  (has_element c p)) ))))

(declare-fun element ((Array Int natural) us_rep) Int)

(declare-fun element__function_guard (Int (Array Int natural) us_rep) Bool)

;; element__post_axiom
  (assert
  (forall ((c (Array Int natural)))
  (forall ((p us_rep))
  (! (and (has_element__function_guard (has_element c p) c p)
     (=> (= (has_element c p) true)
     (let ((result (element c p)))
     (=> (element__function_guard result c p) (dynamic_invariant result true
     false true))))) :pattern ((element c p)) ))))

;; element__def_axiom
  (assert
  (forall ((c (Array Int natural)))
  (forall ((p us_rep))
  (! (=> (element__function_guard (element c p) c p)
     (= (element c p) (to_rep
                      (select c (to_rep
                                (rec__my_container__cursor__index
                                (us_split_fields1 p))))))) :pattern (
  (element c p)) ))))

(declare-sort t2b 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (t2b t2b) Bool)

(declare-fun dummy3 () t2b)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_136)))

(declare-fun c () (Array Int natural))

(declare-fun i () Int)

(declare-fun o () natural)

(declare-fun o1 () (Array Int natural))

(declare-fun o2 () natural)

(declare-fun o3 () (Array Int natural))

(declare-fun c1 () (Array Int natural))

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () (Array Int natural))

(declare-fun c2 () (Array Int natural))

(declare-fun c3 () (Array Int natural))

(declare-fun i2 () Int)

(declare-fun result2 () Int)

(declare-fun i3 () Int)

(declare-fun result3 () (Array Int natural))

(declare-fun c4 () (Array Int natural))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 100))

;; H
  (assert (=> (= (to_rep (select c i1)) 0) (= (to_rep o) 1)))

;; H
  (assert (=> (= (to_rep (select c i1)) 0) (= o1 (store c i1 o))))

;; H
  (assert
  (=> (= (to_rep (select c i1)) 0) (= (mk_map__ref result1) (mk_map__ref c))))

;; H
  (assert (=> (= (to_rep (select c i1)) 0) (= c2 o1)))

;; H
  (assert (=> (not (= (to_rep (select c i1)) 0)) (= c2 c)))

;; H
  (assert (=> (not (= (to_rep (select c i1)) 0)) (= c2 c1)))

;; H
  (assert
  (forall ((j Int)) (valid__function_guard (valid (to_rep (select c3 j)))
  (to_rep (select c3 j)))))

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j i2)) (= (valid (to_rep (select c3 j))) true))))

;; H
  (assert
  (and
  (and
  (forall ((temp___182 Int))
  (=> (and (<= 1 temp___182) (<= temp___182 100))
  (=> (< i2 temp___182) (= (select c3 temp___182) (select c temp___182)))))
  (=> (<= 1 100) (in_range3 i2))) (and (<= 1 i2) (<= i2 100))))

;; H
  (assert (not (= i2 100)))

;; H
  (assert (= result2 i2))

;; H
  (assert (= i3 (+ i2 1)))

;; H
  (assert (=> (= (to_rep (select c3 i3)) 0) (= (to_rep o2) 1)))

;; H
  (assert (=> (= (to_rep (select c3 i3)) 0) (= o3 (store c3 i3 o2))))

;; H
  (assert (=> (= (to_rep (select c3 i3)) 0) (= result3 c3)))

;; H
  (assert (=> (= (to_rep (select c3 i3)) 0) (= c4 o3)))

;; H
  (assert (=> (not (= (to_rep (select c3 i3)) 0)) (= c4 c3)))

(declare-fun j () Int)

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j i3))

;; H
  (assert (valid__function_guard (valid (to_rep (select c4 j)))
  (to_rep (select c4 j))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (valid (to_rep (select c4 j))) true)))
(check-sat)
