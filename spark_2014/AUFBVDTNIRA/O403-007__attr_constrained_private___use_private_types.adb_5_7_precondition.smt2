;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__private_types__simple__d natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural 
  (rec__private_types__simple__d a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__private_types__simple us_main_type)))))
(define-fun us_split_fields_Simple__projection ((a us_split_fields)) us_main_type 
  (rec__private_types__simple a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__private_types__simple__d
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__private_types__simple__d
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__private_types__simple (us_split_fields1 a))
                           (rec__private_types__simple (us_split_fields1 b))) true))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun private_types__simple__d__first__bit () Int)

(declare-fun private_types__simple__d__last__bit () Int)

(declare-fun private_types__simple__d__position () Int)

;; private_types__simple__d__first__bit_axiom
  (assert (<= 0 private_types__simple__d__first__bit))

;; private_types__simple__d__last__bit_axiom
  (assert
  (< private_types__simple__d__first__bit private_types__simple__d__last__bit))

;; private_types__simple__d__position_axiom
  (assert (<= 0 private_types__simple__d__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((simple__ref (mk_simple__ref (simple__content us_rep)))))
(define-fun simple__ref___projection ((a simple__ref)) us_rep (simple__content
                                                              a))

(define-fun default_initial_assumption ((temp___expr_137 us_rep)
  (temp___skip_top_level_138 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_137) false)
                                         (= (to_rep
                                            (rec__private_types__simple__d
                                            (us_split_discrs1
                                            temp___expr_137))) 0)))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun private_types__simple__d__first__bit1 () Int)

(declare-fun private_types__simple__d__last__bit1 () Int)

(declare-fun private_types__simple__d__position1 () Int)

;; private_types__simple__d__first__bit_axiom
  (assert (<= 0 private_types__simple__d__first__bit1))

;; private_types__simple__d__last__bit_axiom
  (assert
  (< private_types__simple__d__first__bit1 private_types__simple__d__last__bit1))

;; private_types__simple__d__position_axiom
  (assert (<= 0 private_types__simple__d__position1))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((p_simple__ref (mk_p_simple__ref (p_simple__content us_rep)))))
(define-fun p_simple__ref___projection ((a p_simple__ref)) us_rep (p_simple__content
                                                                  a))

(define-fun default_initial_assumption1 ((temp___expr_155 us_rep)
  (temp___skip_top_level_156 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_155) false)
                                         (= (to_rep
                                            (rec__private_types__simple__d
                                            (us_split_discrs1
                                            temp___expr_155))) 0)))

(declare-fun s__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun d_zero (us_rep) Bool)

(declare-fun d_zero__function_guard (Bool us_rep) Bool)

;; d_zero__post_axiom
  (assert true)

;; d_zero__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (d_zero__function_guard (d_zero s) s)
     (= (= (d_zero s) true)
     (= (to_rep (rec__private_types__simple__d (us_split_discrs1 s))) 0))) :pattern (
  (d_zero s)) )))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-fun s__split_discrs () natural)

(assert
;; WP_parameter_def
 ;; File "use_private_types.ads", line 36, characters 0-0
  (not
  (or (= (to_rep s__split_discrs) 0) (not (= s__attr__constrained true)))))
(check-sat)
