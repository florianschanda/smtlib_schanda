;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__base__t__c integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) integer 
  (rec__base__t__c a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__base__t__c (us_split_fields1 a))) 
                   (to_rep (rec__base__t__c (us_split_fields1 b)))) true
                   false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun base__t__c__first__bit () Int)

(declare-fun base__t__c__last__bit () Int)

(declare-fun base__t__c__position () Int)

;; base__t__c__first__bit_axiom
  (assert (<= 0 base__t__c__first__bit))

;; base__t__c__last__bit_axiom
  (assert (< base__t__c__first__bit base__t__c__last__bit))

;; base__t__c__position_axiom
  (assert (<= 0 base__t__c__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun sum (us_rep) Int)

(declare-fun sum__function_guard (Int us_rep) Bool)

(declare-fun sum1 (Int us_rep) Int)

(declare-fun sum__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun default_initial_assumption ((temp___expr_138 us_rep)
  (temp___skip_top_level_139 Bool)) Bool (= (attr__tag temp___expr_138) 
  us_tag))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__ext__u__d integer)(rec__base__t__c1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_D__projection ((a us_split_fields2)) integer 
  (rec__ext__u__d a))

(define-fun us_split_fields_C2__projection ((a us_split_fields2)) integer 
  (rec__base__t__c1 a))

(define-fun us_split_fields_2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer us_private) us_private)

(declare-fun extract__d (us_private) integer)

;; extract__d__conv
  (assert
  (forall ((d integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__d (hide_ext__ d rec__ext__2)) d))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep
                                         (mk___split_fields
                                         (rec__base__t__c1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__ext__u__d
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1
                                         (mk___split_fields1
                                         (extract__d
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__base__t__c
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep (rec__ext__u__d (us_split_fields3 a))) 
                         (to_rep (rec__ext__u__d (us_split_fields3 b))))
                         (= (to_rep (rec__base__t__c1 (us_split_fields3 a))) 
                         (to_rep (rec__base__t__c1 (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun ext__u__d__first__bit () Int)

(declare-fun ext__u__d__last__bit () Int)

(declare-fun ext__u__d__position () Int)

;; ext__u__d__first__bit_axiom
  (assert (<= 0 ext__u__d__first__bit))

;; ext__u__d__last__bit_axiom
  (assert (< ext__u__d__first__bit ext__u__d__last__bit))

;; ext__u__d__position_axiom
  (assert (<= 0 ext__u__d__position))

(declare-fun base__t__c__first__bit1 () Int)

(declare-fun base__t__c__last__bit1 () Int)

(declare-fun base__t__c__position1 () Int)

;; base__t__c__first__bit_axiom
  (assert (<= 0 base__t__c__first__bit1))

;; base__t__c__last__bit_axiom
  (assert (< base__t__c__first__bit1 base__t__c__last__bit1))

;; base__t__c__position_axiom
  (assert (<= 0 base__t__c__position1))

(declare-fun dummy2 () us_rep1)

(declare-datatypes () ((u__ref (mk_u__ref (u__content us_rep1)))))
(define-fun u__ref___projection ((a u__ref)) us_rep1 (u__content a))

(declare-fun sum__2 (us_rep1) Int)

(declare-fun sum__2__function_guard (Int us_rep1) Bool)

(declare-fun sum__21 (Int us_rep1) Int)

(declare-fun sum__2__function_guard1 (Int Int us_rep1) Bool)

;; sum__post_axiom
  (assert
  (forall ((x us_rep))
  (! (let ((result (sum x)))
     (=> (sum__function_guard result x) (dynamic_invariant result true false
     true))) :pattern ((sum x)) )))

;; sum__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((x us_rep))
  (! (let ((result (sum1 attr__tag2 x)))
     (=> (sum__function_guard1 result attr__tag2 x) (dynamic_invariant result
     true false true))) :pattern ((sum1 attr__tag2 x)) ))))

;; ext__u__compat_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (sum__function_guard1 (sum1 us_tag1 x) us_tag1 x)
     (and (sum__2__function_guard (sum__2 (of_base x)) (of_base x))
     (= (sum__2 (of_base x)) (sum1 us_tag1 x)))) :pattern ((sum1 us_tag1 x)) )))

;; base__t__compat_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (sum__function_guard1 (sum1 us_tag x) us_tag x)
     (and (sum__function_guard (sum x) x) (= (sum x) (sum1 us_tag x)))) :pattern (
  (sum1 us_tag x)) )))

;; sum__def_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (sum__function_guard (sum x) x)
     (= (sum x) (to_rep (rec__base__t__c (us_split_fields1 x))))) :pattern (
  (sum x)) )))

(define-fun default_initial_assumption1 ((temp___expr_155 us_rep1)
  (temp___skip_top_level_156 Bool)) Bool (= (attr__tag1 temp___expr_155) 
  us_tag1))

(declare-fun create (Int) us_rep)

(declare-fun create__function_guard (us_rep Int) Bool)

(declare-fun create1 (Int Int) us_rep)

(declare-fun create__function_guard1 (us_rep Int Int) Bool)

(declare-fun create__2 (Int) us_rep1)

(declare-fun create__2__function_guard (us_rep1 Int) Bool)

(declare-fun create__21 (Int Int) us_rep1)

(declare-fun create__2__function_guard1 (us_rep1 Int Int) Bool)

;; create__2__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant c true true true)
     (let ((result (create__2 c)))
     (=> (create__2__function_guard result c)
     (= (attr__tag1 result) us_tag1)))) :pattern ((create__2 c)) )))

;; create__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int) (c Int))
  (! (=> (dynamic_invariant c true true true)
     (let ((result (create__21 attr__tag2 c)))
     (=> (create__2__function_guard1 result attr__tag2 c)
     (= (attr__tag1 result) attr__tag2)))) :pattern ((create__21 attr__tag2
                                                     c)) )))

;; ext__u__compat_axiom
  (assert
  (forall ((c Int))
  (! (=> (create__2__function_guard1 (create__21 us_tag1 c) us_tag1 c)
     (and (create__2__function_guard (create__2 c) c)
     (= (create__2 c) (create__21 us_tag1 c)))) :pattern ((create__21 
                                                          us_tag1 c)) )))

;; create__2__def_axiom
  (assert
  (forall ((c Int))
  (! (=>
     (and (dynamic_invariant c true true true) (create__2__function_guard
     (create__2 c) c))
     (and (create__function_guard (create c) c)
     (= (create__2 c) (let ((temp___170 (create c)))
                      (mk___rep1
                      (mk___split_fields1 (of_rep 0)
                      (rec__base__t__c (us_split_fields1 temp___170))
                      us_null_ext__) us_tag1))))) :pattern ((create__2 c)) )))

(declare-fun a () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

;; a__def_axiom
  (assert
  (and (create__2__function_guard (create__2 1) 1) (= a (create__2 1))))

;; b__def_axiom
  (assert
  (and (create__2__function_guard (create__2 2) 2) (= b (create__2 2))))

;; sum__2__post_axiom
  (assert
  (forall ((x us_rep1))
  (! (let ((result (sum__2 x)))
     (=> (sum__2__function_guard result x) (dynamic_invariant result true
     false true))) :pattern ((sum__2 x)) )))

;; sum__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((x us_rep1))
  (! (let ((result (sum__21 attr__tag2 x)))
     (=> (sum__2__function_guard1 result attr__tag2 x) (dynamic_invariant
     result true false true))) :pattern ((sum__21 attr__tag2 x)) ))))

;; ext__u__compat_axiom
  (assert
  (forall ((x us_rep1))
  (! (=> (sum__2__function_guard1 (sum__21 us_tag1 x) us_tag1 x)
     (and (sum__2__function_guard (sum__2 x) x)
     (= (sum__2 x) (sum__21 us_tag1 x)))) :pattern ((sum__21 us_tag1 x)) )))

;; sum__2__def_axiom
  (assert
  (forall ((x us_rep1))
  (! (=> (sum__2__function_guard (sum__2 x) x)
     (and (sum__function_guard (sum (to_base x)) (to_base x))
     (= (sum__2 x) (+ (sum (to_base x)) (to_rep
                                        (rec__ext__u__d (us_split_fields3 x))))))) :pattern (
  (sum__2 x)) )))

;; create__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant c true true true)
     (let ((result (create c)))
     (and (sum__function_guard (sum result) result)
     (=> (create__function_guard result c)
     (and (= (sum result) c) (= (attr__tag result) us_tag)))))) :pattern (
  (create c)) )))

;; create__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int) (c Int))
  (! (=> (dynamic_invariant c true true true)
     (let ((result (create1 attr__tag2 c)))
     (=> (create__function_guard1 result attr__tag2 c)
     (= (attr__tag result) attr__tag2)))) :pattern ((create1 attr__tag2 c)) )))

;; ext__u__compat_axiom
  (assert
  (forall ((c Int))
  (! (=> (create__function_guard1 (create1 us_tag1 c) us_tag1 c)
     (and (create__2__function_guard (create__2 c) c)
     (= (to_base (create__2 c)) (create1 us_tag1 c)))) :pattern ((create1
                                                                 us_tag1 c)) )))

;; base__t__compat_axiom
  (assert
  (forall ((c Int))
  (! (=> (create__function_guard1 (create1 us_tag c) us_tag c)
     (and (create__function_guard (create c) c)
     (= (create c) (create1 us_tag c)))) :pattern ((create1 us_tag c)) )))

;; create__def_axiom
  (assert
  (forall ((c Int))
  (! (=>
     (and (dynamic_invariant c true true true) (create__function_guard
     (create c) c))
     (= (create c) (mk___rep (mk___split_fields (of_rep c) us_null_ext__)
                   us_tag))) :pattern ((create c)) )))

(declare-fun ext__test__a__assume () integer)

(declare-fun ext__test__a__assume1 () integer)

(declare-fun ext__test__a__assume2 () us_private)

(declare-fun ext__test__a__assume3 () Int)

(declare-fun ext__test__b__assume () integer)

(declare-fun ext__test__b__assume1 () integer)

(declare-fun ext__test__b__assume2 () us_private)

(declare-fun ext__test__b__assume3 () Int)

(define-fun ext__test__b__assume4 () us_rep1 (mk___rep1
                                             (mk___split_fields1
                                             ext__test__b__assume
                                             ext__test__b__assume1
                                             ext__test__b__assume2)
                                             ext__test__b__assume3))

(define-fun ext__test__a__assume4 () us_rep1 (mk___rep1
                                             (mk___split_fields1
                                             ext__test__a__assume
                                             ext__test__a__assume1
                                             ext__test__a__assume2)
                                             ext__test__a__assume3))

;; H
  (assert (create__function_guard (create 1) 1))

;; H
  (assert
  (and
  (and (= ext__test__a__assume4 (create__2 1)) (create__2__function_guard
  ext__test__a__assume4 1))
  (and
  (and (= (of_rep 0) ext__test__a__assume)
  (and
  (= (rec__base__t__c (us_split_fields1 (create 1))) ext__test__a__assume1)
  (= us_null_ext__ ext__test__a__assume2)))
  (= us_tag1 ext__test__a__assume3))))

;; H
  (assert
  (= (mk___rep1
     (mk___split_fields1 ext__test__a__assume ext__test__a__assume1
     ext__test__a__assume2) us_tag1) a))

;; H
  (assert (create__function_guard (create 2) 2))

;; H
  (assert
  (and
  (and (= ext__test__b__assume4 (create__2 2)) (create__2__function_guard
  ext__test__b__assume4 2))
  (and
  (and (= (of_rep 0) ext__test__b__assume)
  (and
  (= (rec__base__t__c (us_split_fields1 (create 2))) ext__test__b__assume1)
  (= us_null_ext__ ext__test__b__assume2)))
  (= us_tag1 ext__test__b__assume3))))

;; H
  (assert
  (= (mk___rep1
     (mk___split_fields1 ext__test__b__assume ext__test__b__assume1
     ext__test__b__assume2) us_tag1) b))

;; H
  (assert (sum__function_guard
  (sum
  (mk___rep
  (mk___split_fields (rec__base__t__c1 (us_split_fields3 a))
  (hide_ext__ (rec__ext__u__d (us_split_fields3 a))
  (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a)))
  (mk___rep
  (mk___split_fields (rec__base__t__c1 (us_split_fields3 a))
  (hide_ext__ (rec__ext__u__d (us_split_fields3 a))
  (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a))))

;; H
  (assert (sum__function_guard
  (sum
  (mk___rep
  (mk___split_fields (rec__base__t__c1 (us_split_fields3 b))
  (hide_ext__ (rec__ext__u__d (us_split_fields3 b))
  (rec__ext__1 (us_split_fields3 b)))) (attr__tag1 b)))
  (mk___rep
  (mk___split_fields (rec__base__t__c1 (us_split_fields3 b))
  (hide_ext__ (rec__ext__u__d (us_split_fields3 b))
  (rec__ext__1 (us_split_fields3 b)))) (attr__tag1 b))))

(assert
;; WP_parameter_def
 ;; File "ext.ads", line 15, characters 0-0
  (not
  (= (sum
     (mk___rep
     (mk___split_fields (rec__base__t__c1 (us_split_fields3 a))
     (hide_ext__ (rec__ext__u__d (us_split_fields3 a))
     (rec__ext__1 (us_split_fields3 a)))) (attr__tag1 a))) (sum
                                                           (mk___rep
                                                           (mk___split_fields
                                                           (rec__base__t__c1
                                                           (us_split_fields3
                                                           b))
                                                           (hide_ext__
                                                           (rec__ext__u__d
                                                           (us_split_fields3
                                                           b))
                                                           (rec__ext__1
                                                           (us_split_fields3
                                                           b))))
                                                           (attr__tag1 b))))))
(check-sat)
