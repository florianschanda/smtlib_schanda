;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy1 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-fun dummy2 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 100)) (in_range3
                                      temp___expr_152)))

(declare-sort extended_index_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (extended_index_type extended_index_type) Bool)

(declare-fun dummy3 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 100)) (in_range4
                                      temp___expr_158)))

(declare-fun to_rep1 (extended_index_type) Int)

(declare-fun of_rep1 (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort direction 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (direction direction) Bool)

(declare-fun dummy4 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant2 ((temp___expr_170 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (<= 0 1)) (in_range5 temp___expr_170)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq5 (us_rep us_rep) Bool)

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (count_type count_type) Bool)

(declare-fun dummy6 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_146 Int)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_146)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_202 true))
                                         (= (length temp___expr_201) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-fun dummy7 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 0 1)) (in_range7 temp___expr_188)))

(declare-sort extended_index 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-fun dummy8 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant5 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_194)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant5 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant4 (get container position) true false true)) :pattern (
  (get container position)) ))))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq9 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq5
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq10 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq9 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq9 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun oeq1 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-fun oeq__function_guard1 (Bool (Array Int us_rep1)
  (Array Int us_rep1)) Bool)

(define-fun dynamic_invariant6 ((temp___expr_218 (Array Int us_rep1))
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (forall ((temp___219 Int))
                                      (=>
                                      (and (<= 1 temp___219)
                                      (<= temp___219 100))
                                      (=> (= temp___is_init_215 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_218 temp___219)))) 100)))))

(define-fun default_initial_assumption1 ((temp___expr_221 (Array Int us_rep1))
  (temp___skip_top_level_222 Bool)) Bool (forall ((temp___223 Int))
                                         (=>
                                         (and (<= 1 temp___223)
                                         (<= temp___223 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_221 temp___223))) 
                                         (of_int 0))))))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1)))
  (! (=> (oeq__function_guard1 (oeq1 m1 m2) m1 m2)
     (= (= (oeq1 m1 m2) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true)
     (=
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true)
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true))))))) :pattern (
  (oeq1 m1 m2)) )))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq11 (us_rep2 us_rep2) Bool)

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy10 () us_rep2)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))

(declare-fun oeq2 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption2 ((temp___expr_247 us_rep2)
  (temp___skip_top_level_248 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_248 true))
                                         (= (is_empty temp___expr_247) true)))

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq2 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq2 left right)) )))

(declare-datatypes ()
((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 
  (value_set__content a))

(declare-sort position_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (position_type position_type) Bool)

(declare-fun dummy11 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep2 (position_type) Int)

(declare-fun of_rep2 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range9
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq13 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep1
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy12 () us_rep3)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq13 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq13 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy13 () (Array Int us_rep3))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int us_rep3)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep3)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq13 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq15 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep1
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq14
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq14 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy14 () us_rep4)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content
                                                               a))

(declare-fun size (us_rep4) Int)

(declare-fun size__function_guard (Int us_rep4) Bool)

(declare-fun tree_structure (us_rep4) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)

;; temp___result_283_def
  (assert
  (forall ((temp___282 us_rep4)) (tree_structure__function_guard
  (tree_structure temp___282) temp___282)))

(define-fun dynamic_invariant7 ((temp___expr_281 us_rep4)
  (temp___is_init_278 Bool) (temp___skip_constant_279 Bool)
  (temp___do_toplevel_280 Bool)) Bool (= (tree_structure temp___expr_281) true))

;; temp___result_291_def
  (assert
  (forall ((temp___290 us_rep4)) (size__function_guard (size temp___290)
  temp___290)))

(define-fun default_initial_assumption3 ((temp___expr_285 us_rep4)
  (temp___skip_top_level_286 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_285))) 0)
                                         (forall ((temp___288 Int))
                                         (=>
                                         (and (<= 1 temp___288)
                                         (<= temp___288 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_285)) temp___288)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_286 true))
                                         (= (size temp___expr_285) 0))))

;; temp___result_294_def
  (assert
  (forall ((temp___293 us_rep4)) (tree_structure__function_guard
  (tree_structure temp___293) temp___293)))

(define-fun type_invariant ((temp___292 us_rep4)) Bool (= (tree_structure
                                                          temp___292) true))

(declare-fun valid_root (us_rep4 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)

(declare-fun parent (us_rep4 Int) Int)

(declare-fun parent__function_guard (Int us_rep4 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant7 f true true true) (dynamic_invariant i true
     true true))
     (let ((result (parent f i)))
     (and (valid_root__function_guard (valid_root f i) f i)
     (and (size__function_guard (size f) f)
     (=> (parent__function_guard result f i)
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false
     true))))))) :pattern ((parent f i)) ))))

(declare-fun position (us_rep4 Int) Int)

(declare-fun position__function_guard (Int us_rep4 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (and (parent__function_guard (parent f i) f i)
     (=>
     (and
     (and (dynamic_invariant7 f true true true) (dynamic_invariant i true
     true true)) (not (= (parent f i) 0)))
     (let ((result (position f i)))
     (=> (position__function_guard result f i) (dynamic_invariant2 result
     true false true))))) :pattern ((position f i)) ))))

(declare-fun model__ (us_rep4 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep4 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root Int))
  (! (and (valid_root__function_guard (valid_root f root) f root)
     (=>
     (and
     (and (dynamic_invariant7 f true true true) (dynamic_invariant root true
     true true)) (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and (forall ((i Int)) (parent__function_guard (parent f i) f i))
     (and (forall ((i Int)) (position__function_guard (position f i) f i))
     (and
     (forall ((i Int)) (is_add__function_guard
     (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i))))
     (rec__tree_model__path_type__a
     (us_split_fields1 (select result (parent f i)))) (position f i)
     (rec__tree_model__path_type__a (us_split_fields1 (select result i)))))
     (=> (model____function_guard result f root)
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant6 result true false true))))))))))))) :pattern (
  (model__ f root)) ))))

(declare-fun peek (us_rep4 Int Int) Int)

(declare-fun peek__function_guard (Int us_rep4 Int Int) Bool)

(define-fun ole1 ((left us_rep)
  (right us_rep)) Bool (and (<= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun ole__function_guard1 (Bool us_rep us_rep) Bool)

(declare-fun is_concat (us_rep us_rep us_rep) Bool)

(declare-fun is_concat__function_guard (Bool us_rep us_rep us_rep) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq16 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep (select a temp___idx_134)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq16 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep (select a temp___idx_134)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq16 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq16 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq16 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy15 () (Array Int natural))

(declare-fun value__size6 () Int)

(declare-fun object__size6 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))

(declare-fun user_eq15 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep4)(rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type 
  (rec__search_trees__search_tree__root a))

(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 
  (rec__search_trees__search_tree__struct a))

(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) 
  (rec__search_trees__search_tree__values a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq17 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__search_trees__search_tree__root
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__search_trees__search_tree__root
                                                   (us_split_fields7 b))))
                         (= (bool_eq15
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 a))
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 b))) true))
                         (= (bool_eq16
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 a)) 1 100
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 b)) 1 100) true))
                    true false))

(declare-fun user_eq16 (us_rep5 us_rep5) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-fun search_trees__search_tree__root__first__bit () Int)

(declare-fun search_trees__search_tree__root__last__bit () Int)

(declare-fun search_trees__search_tree__root__position () Int)

;; search_trees__search_tree__root__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__root__first__bit))

;; search_trees__search_tree__root__last__bit_axiom
  (assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; search_trees__search_tree__root__position_axiom
  (assert (<= 0 search_trees__search_tree__root__position))

(declare-fun search_trees__search_tree__struct__first__bit () Int)

(declare-fun search_trees__search_tree__struct__last__bit () Int)

(declare-fun search_trees__search_tree__struct__position () Int)

;; search_trees__search_tree__struct__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__struct__first__bit))

;; search_trees__search_tree__struct__last__bit_axiom
  (assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; search_trees__search_tree__struct__position_axiom
  (assert (<= 0 search_trees__search_tree__struct__position))

(declare-fun search_trees__search_tree__values__first__bit () Int)

(declare-fun search_trees__search_tree__values__last__bit () Int)

(declare-fun search_trees__search_tree__values__position () Int)

;; search_trees__search_tree__values__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__values__first__bit))

;; search_trees__search_tree__values__last__bit_axiom
  (assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; search_trees__search_tree__values__position_axiom
  (assert (<= 0 search_trees__search_tree__values__position))

(declare-fun dummy16 () us_rep5)

(declare-datatypes ()
((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 
  (search_tree__content a))

(declare-fun size1 (us_rep5) Int)

(declare-fun size__function_guard1 (Int us_rep5) Bool)

(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)

(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int
  (Array Int natural)) Bool)

(declare-fun temp___575 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___577 Int))
  (forall ((temp___578 Int))
  (= (select (temp___575 temp___577) temp___578) (of_rep temp___577)))))

;; temp___result_564_def
  (assert
  (forall ((temp___563 us_rep4)) (tree_structure__function_guard
  (tree_structure temp___563) temp___563)))

(define-fun dynamic_invariant8 ((temp___expr_562 us_rep5)
  (temp___is_init_559 Bool) (temp___skip_constant_560 Bool)
  (temp___do_toplevel_561 Bool)) Bool (= (tree_structure
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___expr_562))) true))

;; temp___result_574_def
  (assert
  (forall ((temp___573 us_rep4)) (size__function_guard (size temp___573)
  temp___573)))

;; temp___result_580_def
  (assert
  (forall ((temp___579 us_rep5)) (size__function_guard1 (size1 temp___579)
  temp___579)))

(define-fun default_initial_assumption4 ((temp___expr_567 us_rep5)
  (temp___skip_top_level_568 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__search_trees__search_tree__root
                                            (us_split_fields7
                                            temp___expr_567))) 0)
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_567))))) 0)
                                         (forall ((temp___571 Int))
                                         (=>
                                         (and (<= 1 temp___571)
                                         (<= temp___571 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_567)))) temp___571)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_567)))) temp___571)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_567)))) temp___571)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_567)))) temp___571)))) 2)))))
                                         (= (size
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_567))) 0)))
                                         (= (rec__search_trees__search_tree__values
                                            (us_split_fields7
                                            temp___expr_567)) (temp___575 0)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_568 true))
                                         (= (size1 temp___expr_567) 0))))

;; temp___result_585_def
  (assert
  (forall ((temp___582 us_rep5)) (size__function_guard
  (size
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582)))
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582)))))

;; temp___result_583_def
  (assert
  (forall ((temp___582 us_rep5)) (valid_root__function_guard
  (valid_root
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582))
  (to_rep1
  (rec__search_trees__search_tree__root (us_split_fields7 temp___582))))
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582))
  (to_rep1
  (rec__search_trees__search_tree__root (us_split_fields7 temp___582))))))

;; temp___result_584_def
  (assert
  (forall ((temp___582 us_rep5)) (ordered_leafs__function_guard
  (ordered_leafs
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582))
  (to_rep1
  (rec__search_trees__search_tree__root (us_split_fields7 temp___582)))
  (rec__search_trees__search_tree__values (us_split_fields7 temp___582)))
  (rec__search_trees__search_tree__struct (us_split_fields7 temp___582))
  (to_rep1
  (rec__search_trees__search_tree__root (us_split_fields7 temp___582)))
  (rec__search_trees__search_tree__values (us_split_fields7 temp___582)))))

(define-fun type_invariant1 ((temp___581 us_rep5)) Bool (ite (= (size
                                                                (rec__search_trees__search_tree__struct
                                                                (us_split_fields7
                                                                temp___581))) 0)
                                                        (= (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___581))) 0)
                                                        (and
                                                        (and
                                                        (not
                                                        (= (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___581))) 0))
                                                        (= (valid_root
                                                           (rec__search_trees__search_tree__struct
                                                           (us_split_fields7
                                                           temp___581))
                                                           (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___581)))) true))
                                                        (= (ordered_leafs
                                                           (rec__search_trees__search_tree__struct
                                                           (us_split_fields7
                                                           temp___581))
                                                           (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___581)))
                                                           (rec__search_trees__search_tree__values
                                                           (us_split_fields7
                                                           temp___581))) true))))

;; size__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t))
     (let ((result (size1 t)))
     (=> (size__function_guard1 result t) (dynamic_invariant1 result true
     false true)))) :pattern ((size1 t)) )))

;; size__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=>
     (and (dynamic_invariant8 t true true true) (size__function_guard1
     (size1 t) t))
     (and (size__function_guard
     (size (rec__search_trees__search_tree__struct (us_split_fields7 t)))
     (rec__search_trees__search_tree__struct (us_split_fields7 t)))
     (= (size1 t) (size
                  (rec__search_trees__search_tree__struct
                  (us_split_fields7 t)))))) :pattern ((size1 t)) )))

(declare-fun root (us_rep5) Int)

(declare-fun root__function_guard (Int us_rep5) Bool)

;; root__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (and (size__function_guard1 (size1 t) t)
     (=>
     (and (and (dynamic_invariant8 t true true true) (type_invariant1 t))
     (not (= (size1 t) 0)))
     (let ((result (root t)))
     (=> (root__function_guard result t) (dynamic_invariant result true false
     true))))) :pattern ((root t)) )))

;; root__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=>
     (and (dynamic_invariant8 t true true true) (root__function_guard
     (root t) t))
     (= (root t) (to_rep1
                 (rec__search_trees__search_tree__root (us_split_fields7 t))))) :pattern (
  (root t)) )))

(declare-fun parent1 (us_rep5 Int) Int)

(declare-fun parent__function_guard1 (Int us_rep5 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (type_invariant1 t))
     (let ((result (parent1 t i)))
     (and (size__function_guard1 (size1 t) t)
     (=> (parent__function_guard1 result t i)
     (and (=> (= (size1 t) 0) (= result 0)) (dynamic_invariant1 result true
     false true)))))) :pattern ((parent1 t i)) ))))

;; parent__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (parent__function_guard1 (parent1 t i) t i))
     (and (parent__function_guard
     (parent (rec__search_trees__search_tree__struct (us_split_fields7 t)) i)
     (rec__search_trees__search_tree__struct (us_split_fields7 t)) i)
     (= (parent1 t i) (parent
                      (rec__search_trees__search_tree__struct
                      (us_split_fields7 t)) i)))) :pattern ((parent1 t i)) ))))

(declare-fun position1 (us_rep5 Int) Int)

(declare-fun position__function_guard1 (Int us_rep5 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (and (parent__function_guard1 (parent1 t i) t i)
     (=>
     (and
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (type_invariant1 t)) (not (= (parent1 t i) 0)))
     (let ((result (position1 t i)))
     (=> (position__function_guard1 result t i) (dynamic_invariant2 result
     true false true))))) :pattern ((position1 t i)) ))))

;; position__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (position__function_guard1 (position1 t i) t i))
     (and (position__function_guard
     (position (rec__search_trees__search_tree__struct (us_split_fields7 t))
     i) (rec__search_trees__search_tree__struct (us_split_fields7 t)) i)
     (= (position1 t i) (position
                        (rec__search_trees__search_tree__struct
                        (us_split_fields7 t)) i)))) :pattern ((position1 t i)) ))))

(declare-fun model__1 (us_rep5) (Array Int us_rep1))

(declare-fun model____function_guard1 ((Array Int us_rep1) us_rep5) Bool)

;; model____post_axiom
  (assert
  (forall ((t us_rep5))
  (! (and (size__function_guard1 (size1 t) t)
     (=>
     (and (and (dynamic_invariant8 t true true true) (type_invariant1 t))
     (not (= (size1 t) 0)))
     (let ((result (model__1 t)))
     (=> (model____function_guard1 result t) (dynamic_invariant6 result true
     false true))))) :pattern ((model__1 t)) )))

;; model____def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=>
     (and (dynamic_invariant8 t true true true) (model____function_guard1
     (model__1 t) t))
     (and (model____function_guard
     (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (= (model__1 t) (model__
                     (rec__search_trees__search_tree__struct
                     (us_split_fields7 t))
                     (to_rep1
                     (rec__search_trees__search_tree__root
                     (us_split_fields7 t))))))) :pattern ((model__1 t)) )))

(declare-fun peek1 (us_rep5 Int Int) Int)

(declare-fun peek__function_guard1 (Int us_rep5 Int Int) Bool)

;; peek__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (and (size__function_guard1 (size1 t) t)
     (and (model____function_guard1 (model__1 t) t)
     (=>
     (and
     (and
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (dynamic_invariant2 d true true true)) (type_invariant1 t))
     (and (not (= (size1 t) 0))
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___631 (model__1 t))) (select temp___631 i)))) true)))
     (let ((result (peek1 t i d)))
     (=> (peek__function_guard1 result t i d) (dynamic_invariant1 result true
     false true)))))) :pattern ((peek1 t i d)) ))))

;; peek__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant8 t true true true) (dynamic_invariant i true
     true true)) (dynamic_invariant2 d true true true))
     (peek__function_guard1 (peek1 t i d) t i d))
     (and (peek__function_guard
     (peek (rec__search_trees__search_tree__struct (us_split_fields7 t)) i d)
     (rec__search_trees__search_tree__struct (us_split_fields7 t)) i d)
     (= (peek1 t i d) (peek
                      (rec__search_trees__search_tree__struct
                      (us_split_fields7 t)) i d)))) :pattern ((peek1 t i d)) ))))

(declare-fun values (us_rep5) us_rep2)

(declare-fun values__function_guard (us_rep2 us_rep5) Bool)

(declare-fun values1 (us_rep5) us_rep2)

(declare-fun values__function_guard1 (us_rep2 us_rep5) Bool)

(declare-fun contains (us_rep2 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)

(define-fun default_initial_assumption5 ((temp___expr_260 us_rep2)
  (temp___skip_top_level_261 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_261 true))
                                         (= (is_empty temp___expr_260) true)))

;; values__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t))
     (let ((result (values t)))
     (and (size__function_guard1 (size1 t) t)
     (=> (values__function_guard result t)
     (=> (= (size1 t) 0) (= (is_empty result) true)))))) :pattern ((values t)) )))

;; values__post_refine_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant8 t true true true) (type_invariant1 t))
     (let ((result (values1 t)))
     (and (size__function_guard
     (size (rec__search_trees__search_tree__struct (us_split_fields7 t)))
     (rec__search_trees__search_tree__struct (us_split_fields7 t)))
     (and (model____function_guard
     (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (and (model____function_guard
     (model__ (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (rec__search_trees__search_tree__struct (us_split_fields7 t))
     (to_rep1 (rec__search_trees__search_tree__root (us_split_fields7 t))))
     (=> (values__function_guard1 result t)
     (ite (= (size
             (rec__search_trees__search_tree__struct (us_split_fields7 t))) 0)
     (= (is_empty result) true)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___649 (model__
                          (rec__search_trees__search_tree__struct
                          (us_split_fields7 t))
                          (to_rep1
                          (rec__search_trees__search_tree__root
                          (us_split_fields7 t))))))
        (select temp___649 i)))) true)
     (= (contains result
        (to_rep
        (let ((temp___647 (rec__search_trees__search_tree__values
                          (us_split_fields7 t))))
        (select temp___647 i)))) true))))
     (forall ((v Int))
     (=> (and (<= 0 v) (<= v 2147483647))
     (=> (= (contains result v) true)
     (exists ((i Int))
     (and (and (<= 1 i) (<= i 100))
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___651 (model__
                          (rec__search_trees__search_tree__struct
                          (us_split_fields7 t))
                          (to_rep1
                          (rec__search_trees__search_tree__root
                          (us_split_fields7 t))))))
        (select temp___651 i)))) true)
     (= (to_rep
        (let ((temp___652 (rec__search_trees__search_tree__values
                          (us_split_fields7 t))))
        (select temp___652 i))) v))))))))))))))) :pattern ((values1 t)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

;; ordered_leafs__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root1 Int)) (valid_root__function_guard (valid_root f root1) f
  root1))))

;; ordered_leafs__def_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root1 Int))
  (forall ((values2 (Array Int natural)))
  (! (=> (ordered_leafs__function_guard (ordered_leafs f root1 values2) f
     root1 values2)
     (and (model____function_guard (model__ f root1) f root1)
     (and (model____function_guard (model__ f root1) f root1)
     (and (model____function_guard (model__ f root1) f root1)
     (and (model____function_guard (model__ f root1) f root1)
     (and (model____function_guard (model__ f root1) f root1)
     (and (model____function_guard (model__ f root1) f root1)
     (= (= (ordered_leafs f root1 values2) true)
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 100))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___909 (model__ f root1))) (select temp___909 i1)))) true)
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___911 (model__ f root1))) (select temp___911 j)))) true))
     (= (olt
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___913 (model__ f root1))) (select temp___913 i1))))
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___915 (model__ f root1))) (select temp___915 j))))) true))
     (ite (= (get
             (rec__tree_model__path_type__a
             (us_split_fields1
             (let ((temp___905 (model__ f root1))) (select temp___905 j))))
             (+ (length
                (rec__tree_model__path_type__a
                (us_split_fields1
                (let ((temp___907 (model__ f root1))) (select temp___907 i1))))) 1)) 0)
     (< (to_rep (select values2 j)) (to_rep (select values2 i1)))
     (< (to_rep (select values2 i1)) (to_rep (select values2 j))))))))))))))))) :pattern (
  (ordered_leafs f root1 values2)) )))))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun is_root () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(define-fun dynamic_invariant9 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant10 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 0 2)) (in_range9 temp___expr_164)))

(define-fun dynamic_invariant11 ((temp___expr_207 us_rep1)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=> (= temp___do_toplevel_206 true)
                                      (=> (= temp___is_init_204 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_207))) 100))))

(define-fun default_initial_assumption6 ((temp___expr_209 us_rep1)
  (temp___skip_top_level_210 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_209))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_209)) (of_int 0))))

(define-fun dynamic_predicate ((temp___213 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___213))) 100))

;; is_concat__post_axiom
  (assert true)

;; is_concat__def_axiom
  (assert
  (forall ((q us_rep) (v us_rep) (p us_rep))
  (! (=> (is_concat__function_guard (is_concat q v p) q v p)
     (= (= (is_concat q v p) true)
     (and
     (and
     (and (= (- (length p) (length v)) (length q))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 (length q))) (= (get p i1) (get q i1)))))
     (forall ((i1 Int))
     (=> (and (<= 1 i1) (<= i1 (length v)))
     (= (get p (+ i1 (length q))) (get v i1)))))
     (forall ((i1 Int))
     (=> (and (<= (+ (length q) 1) i1) (<= i1 (length p)))
     (= (get v (- i1 (length q))) (get p i1))))))) :pattern ((is_concat q v
                                                             p)) )))

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (=> (is_add__function_guard (is_add s1 d s2) s1 d s2)
     (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d)))) :pattern ((is_add s1 d s2)) ))))

;; size__post_axiom
  (assert
  (forall ((f us_rep4))
  (! (=> (dynamic_invariant7 f true true true)
     (let ((result (size f)))
     (=> (size__function_guard result f) (dynamic_invariant1 result true
     false true)))) :pattern ((size f)) )))

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i1 Int))
  (! (=>
     (and (dynamic_invariant7 f true true true) (dynamic_invariant i1 true
     true true))
     (let ((result (valid_root f i1)))
     (and (size__function_guard (size f) f)
     (=> (valid_root__function_guard result f i1)
     (=> (< (size f) i1) (not (= result true))))))) :pattern ((valid_root f
                                                              i1)) ))))

;; peek__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i1 Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant7 f true true true) (dynamic_invariant i1 true
     true true)) (dynamic_invariant2 d true true true))
     (let ((result (peek f i1 d)))
     (and (position__function_guard (position f result) f result)
     (and (parent__function_guard (parent f result) f result)
     (and (forall ((j Int)) (parent__function_guard (parent f j) f j))
     (and (forall ((j Int)) (position__function_guard (position f j) f j))
     (and (forall ((j Int)) (parent__function_guard (parent f j) f j))
     (and (forall ((j Int)) (position__function_guard (position f j) f j))
     (=> (peek__function_guard result f i1 d)
     (and
     (and
     (ite (not (= result 0))
     (and (= (position f result) d) (= (parent f result) i1))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (= (parent f j) i1) (not (= (position f j) d))))))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (and (= (parent f j) i1) (= (position f j) d)) (= result j)))))
     (dynamic_invariant1 result true false true))))))))))) :pattern (
  (peek f i1 d)) ))))

(define-fun default_initial_assumption7 ((temp___expr_267 us_rep3)
  (temp___skip_top_level_268 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_267))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_267))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_267))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_267))) 2)))

(define-fun default_initial_assumption8 ((temp___expr_274 (Array Int us_rep3))
  (temp___skip_top_level_275 Bool)) Bool (forall ((temp___276 Int))
                                         (=>
                                         (and (<= 1 temp___276)
                                         (<= temp___276 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_274 temp___276)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

(declare-sort element_type1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq18 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq17 (element_type1 element_type1) Bool)

(declare-fun dummy17 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant12 ((temp___expr_240 Int)
  (temp___is_init_237 Bool) (temp___skip_constant_238 Bool)
  (temp___do_toplevel_239 Bool)) Bool (=>
                                      (or (= temp___is_init_237 true)
                                      (<= 0 2147483647)) (in_range10
                                      temp___expr_240)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant12 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range10 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant3 (length1 container)
  true false true) :pattern ((length1 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range10 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range10 item) (= (contains container item) true)))))
     (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty
                                                               container)) )))

(declare-fun t__split_fields () extended_index_type)

(declare-fun t__split_fields1 () extended_index_type)

(declare-fun t__split_fields2 () (Array Int us_rep3))

(declare-fun t__split_fields3 () (Array Int natural))

(declare-fun x () Int)

(declare-fun y () Int)

(declare-fun xr () Int)

(declare-fun j () Int)

(declare-fun d () Int)

(declare-fun t_old__split_fields () extended_index_type)

(declare-fun t_old__split_fields1 () extended_index_type)

(declare-fun t_old__split_fields2 () (Array Int us_rep3))

(declare-fun t_old__split_fields3 () (Array Int natural))

(declare-fun f_old__split_fields () extended_index_type)

(declare-fun f_old__split_fields1 () (Array Int us_rep3))

(declare-fun f_1__split_fields () extended_index_type)

(declare-fun f_1__split_fields1 () (Array Int us_rep3))

(declare-fun f_2__split_fields () extended_index_type)

(declare-fun f_2__split_fields1 () (Array Int us_rep3))

(declare-fun f_3__split_fields () extended_index_type)

(declare-fun f_3__split_fields1 () (Array Int us_rep3))

(declare-fun f_4__split_fields () us_split_fields__ref2)

(declare-fun f_5__split_fields () us_split_fields__ref2)

(declare-fun o () Int)

(declare-fun search_trees__right_rotate__is_root__assume () Bool)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun t__split_fields4 () us_split_fields6)

(declare-fun result () int__ref)

(declare-fun j1 () Int)

(declare-fun result1 () int__ref)

(declare-fun d1 () Int)

(declare-fun result2 () us_split_fields__ref3)

(declare-fun t_old__split_fields4 () us_split_fields6)

(declare-fun result3 () us_split_fields__ref2)

(declare-fun f_old__split_fields2 () us_split_fields4)

(declare-fun result4 () us_split_fields__ref2)

(declare-fun f_1__split_fields2 () us_split_fields4)

(declare-fun result5 () us_split_fields__ref2)

(declare-fun f_2__split_fields2 () us_split_fields4)

(declare-fun result6 () us_split_fields__ref2)

(declare-fun f_3__split_fields2 () us_split_fields4)

(declare-fun result7 () us_split_fields__ref2)

(declare-fun f_4__split_fields1 () us_split_fields4)

(declare-fun result8 () us_split_fields__ref2)

(declare-fun f_5__split_fields1 () us_split_fields4)

(declare-fun result9 () int__ref)

(declare-fun y1 () Int)

(declare-fun result10 () int__ref)

(declare-fun j2 () Int)

(declare-fun result11 () int__ref)

(declare-fun d2 () Int)

(declare-fun binary_trees__extract__v () Int)

(declare-fun binary_trees__extract__f__fields () us_split_fields4)

(declare-fun result12 () us_split_fields__ref3)

(declare-fun t__split_fields5 () us_split_fields6)

(declare-fun result13 () int__ref)

(declare-fun y2 () Int)

(declare-fun result14 () us_split_fields__ref2)

(declare-fun f_1__split_fields3 () us_split_fields4)

(declare-fun binary_trees__extract__v1 () Int)

(declare-fun binary_trees__extract__f__fields1 () us_split_fields4)

(declare-fun result15 () us_split_fields__ref3)

(declare-fun t__split_fields6 () us_split_fields6)

(declare-fun result16 () int__ref)

(declare-fun x1 () Int)

(declare-fun result17 () us_split_fields__ref2)

(declare-fun f_2__split_fields3 () us_split_fields4)

(declare-fun xr1 () Int)

(declare-fun binary_trees__extract__f__fields2 () us_split_fields4)

(declare-fun result18 () us_split_fields__ref3)

(declare-fun t__split_fields7 () us_split_fields6)

(define-fun y3 () int__ref (mk_int__ref y))

;; H
  (assert (dynamic_invariant8
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) true false true))

;; H
  (assert (in_range3 i))

;; H
  (assert (type_invariant1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3))))

;; H
  (assert (size__function_guard1
  (size1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)))
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3))))

;; H
  (assert (model____function_guard1
  (model__1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)))
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3))))

;; H
  (assert (peek__function_guard1
  (peek1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) i 0)
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) i 0))

;; H
  (assert
  (and
  (< 0 (size1
       (mk___rep3
       (mk___split_fields3 t__split_fields
       (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
       t__split_fields3))))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) i))) true)
  (not
  (= (peek1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) i 0) 0)))))

;; H
  (assert (=> (<= 1 100) (in_range3 x)))

;; H
  (assert (=> (<= 1 100) (in_range3 y)))

;; H
  (assert (=> (<= 0 100) (in_range4 xr)))

;; H
  (assert (type_invariant1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3))))

;; H
  (assert
  (and
  (and
  (= o (root
       (mk___rep3
       (mk___split_fields3 t__split_fields
       (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
       t__split_fields3))))
  (root__function_guard o
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)))) (and (in_range3 o) (= o (to_rep1 t__split_fields)))))

;; H
  (assert
  (= search_trees__right_rotate__is_root__assume (ite (= i o) true false)))

;; H
  (assert (= search_trees__right_rotate__is_root__assume is_root))

;; H
  (assert (= result (mk_int__ref j)))

;; H
  (assert (= j1 1))

;; H
  (assert (in_range3 j1))

;; H
  (assert (= result1 (mk_int__ref d)))

;; H
  (assert (= d1 0))

;; H
  (assert (in_range5 d1))

;; H
  (assert
  (= result2 (mk___split_fields__ref3
             (mk___split_fields3 t_old__split_fields
             (mk___rep2
             (mk___split_fields2 t_old__split_fields1 t_old__split_fields2))
             t_old__split_fields3))))

;; H
  (assert
  (= t_old__split_fields4 (mk___split_fields3 t__split_fields
                          (mk___rep2
                          (mk___split_fields2 t__split_fields1
                          t__split_fields2)) t__split_fields3)))

;; H
  (assert (dynamic_invariant8 (mk___rep3 t_old__split_fields4) true false
  true))

;; H
  (assert
  (= result3 (mk___split_fields__ref2
             (mk___split_fields2 f_old__split_fields f_old__split_fields1))))

;; H
  (assert
  (= f_old__split_fields2 (mk___split_fields2 t__split_fields1
                          t__split_fields2)))

;; H
  (assert (dynamic_invariant7 (mk___rep2 f_old__split_fields2) true false
  true))

;; H
  (assert
  (= result4 (mk___split_fields__ref2
             (mk___split_fields2 f_1__split_fields f_1__split_fields1))))

;; H
  (assert
  (= f_1__split_fields2 (mk___split_fields2 t__split_fields1
                        t__split_fields2)))

;; H
  (assert (dynamic_invariant7 (mk___rep2 f_1__split_fields2) true false
  true))

;; H
  (assert
  (= result5 (mk___split_fields__ref2
             (mk___split_fields2 f_2__split_fields f_2__split_fields1))))

;; H
  (assert
  (= f_2__split_fields2 (mk___split_fields2 t__split_fields1
                        t__split_fields2)))

;; H
  (assert (dynamic_invariant7 (mk___rep2 f_2__split_fields2) true false
  true))

;; H
  (assert
  (= result6 (mk___split_fields__ref2
             (mk___split_fields2 f_3__split_fields f_3__split_fields1))))

;; H
  (assert
  (= f_3__split_fields2 (mk___split_fields2 t__split_fields1
                        t__split_fields2)))

;; H
  (assert (dynamic_invariant7 (mk___rep2 f_3__split_fields2) true false
  true))

;; H
  (assert (= result7 f_4__split_fields))

;; H
  (assert
  (= (let ((subject f_4__split_fields)) f_4__split_fields1) (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2)))

;; H
  (assert (dynamic_invariant7
  (mk___rep2 (let ((subject f_4__split_fields)) f_4__split_fields1)) true
  false true))

;; H
  (assert (= result8 f_5__split_fields))

;; H
  (assert
  (= (let ((subject f_5__split_fields)) f_5__split_fields1) (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2)))

;; H
  (assert (dynamic_invariant7
  (mk___rep2 (let ((subject f_5__split_fields)) f_5__split_fields1)) true
  false true))

;; H
  (assert (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  i) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  i))

;; H
  (assert (size__function_guard
  (size (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)))
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))))

;; H
  (assert (size__function_guard
  (size (mk___rep2 binary_trees__extract__f__fields))
  (mk___rep2 binary_trees__extract__f__fields)))

;; H
  (assert (size__function_guard
  (size (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)))
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields) o5)
  (mk___rep2 binary_trees__extract__f__fields) o5))

;; H
  (assert (peek__function_guard
  (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  j2 d2) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  j2 d2))

;; H
  (assert (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields) j2 d2)
  (mk___rep2 binary_trees__extract__f__fields) j2 d2))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields) j3)
  (mk___rep2 binary_trees__extract__f__fields) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  j3) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields) j3)
  (mk___rep2 binary_trees__extract__f__fields) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position (mk___rep2 binary_trees__extract__f__fields) j3)
  (mk___rep2 binary_trees__extract__f__fields) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j3)
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j3)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields) j3 e)
  (mk___rep2 binary_trees__extract__f__fields) j3 e)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j3
  e) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) j3
  e)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields) t)
  (mk___rep2 binary_trees__extract__f__fields) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) t)
  (mk___rep2 binary_trees__extract__f__fields) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) t)
  (mk___rep2 binary_trees__extract__f__fields) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)))

;; H
  (assert
  (forall ((t Int)) (oeq__function_guard1
  (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields) t)
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t)) (model__ (mk___rep2 binary_trees__extract__f__fields) t)
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) o5)
  (mk___rep2 binary_trees__extract__f__fields) o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) o5)
  (mk___rep2 binary_trees__extract__f__fields) o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) o5)
  (mk___rep2 binary_trees__extract__f__fields) o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields) o5)
  (mk___rep2 binary_trees__extract__f__fields) o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v) (mk___rep2 binary_trees__extract__f__fields)
  binary_trees__extract__v))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  o5) (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  o5))

;; H
  (assert
  (forall ((i1 Int)) (is_concat__function_guard
  (is_concat
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
          o5) binary_trees__extract__v)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields)
          binary_trees__extract__v) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
          o5) i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
          o5) binary_trees__extract__v)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields)
          binary_trees__extract__v) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
          o5) i1))))))

;; H
  (assert
  (=> (= is_root true)
  (and (= o1 (to_rep1 t__split_fields)) (in_range3
  (to_rep1 t__split_fields)))))

;; H
  (assert (=> (= is_root true) (= result9 y3)))

;; H
  (assert (=> (= is_root true) (= y1 o1)))

;; H
  (assert (=> (= is_root true) (= d2 d1)))

;; H
  (assert (=> (= is_root true) (= j2 j1)))

;; H
  (assert
  (=> (= is_root true)
  (= t__split_fields5 (mk___split_fields3 t__split_fields
                      (mk___rep2
                      (mk___split_fields2 t__split_fields1 t__split_fields2))
                      t__split_fields3))))

;; H
  (assert (=> (= is_root true) (= d2 d1)))

;; H
  (assert (=> (= is_root true) (= j2 j1)))

;; H
  (assert (=> (= is_root true) (= t__split_fields5 t__split_fields4)))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (and
  (= o2 (parent
        (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
        i))
  (parent__function_guard o2
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  i))
  (and (in_range4 o2)
  (and
  (=>
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
     i) true)
  (= o2 0))
  (=>
  (= (size
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))) 0)
  (= o2 0)))))))

;; H
  (assert (=> (not (= is_root true)) (and (= o3 o2) (in_range3 o2))))

;; H
  (assert (=> (not (= is_root true)) (= result10 (mk_int__ref j1))))

;; H
  (assert (=> (not (= is_root true)) (= j2 o3)))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (and
  (= o4 (position
        (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
        i))
  (position__function_guard o4
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) 
  i)) (in_range5 o4))))

;; H
  (assert (=> (not (= is_root true)) (= result11 (mk_int__ref d1))))

;; H
  (assert (=> (not (= is_root true)) (= d2 o4)))

;; H
  (assert
  (=> (not (= is_root true))
  (and (= o5 (to_rep1 t__split_fields)) (in_range3
  (to_rep1 t__split_fields)))))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (and
  (= (size (mk___rep2 binary_trees__extract__f__fields)) (size
                                                         (mk___rep2
                                                         (mk___split_fields2
                                                         t__split_fields1
                                                         t__split_fields2))))
  (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields) o5) true)
  (and
  (= binary_trees__extract__v (peek
                              (mk___rep2
                              (mk___split_fields2 t__split_fields1
                              t__split_fields2)) j2 d2))
  (and (= (peek (mk___rep2 binary_trees__extract__f__fields) j2 d2) 0)
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (not (= j3 binary_trees__extract__v))
  (= (parent (mk___rep2 binary_trees__extract__f__fields) j3) (parent
                                                              (mk___rep2
                                                              (mk___split_fields2
                                                              t__split_fields1
                                                              t__split_fields2))
                                                              j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (and (not (= j3 binary_trees__extract__v))
  (not (= (parent (mk___rep2 binary_trees__extract__f__fields) j3) 0)))
  (= (position (mk___rep2 binary_trees__extract__f__fields) j3) (position
                                                                (mk___rep2
                                                                (mk___split_fields2
                                                                t__split_fields1
                                                                t__split_fields2))
                                                                j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 1))
  (=> (or (not (= j3 j2)) (not (= e d2)))
  (= (peek (mk___rep2 binary_trees__extract__f__fields) j3 e) (peek
                                                              (mk___rep2
                                                              (mk___split_fields2
                                                              t__split_fields1
                                                              t__split_fields2))
                                                              j3 e)))))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t) true)
  (not (= j2 t))) (not (= binary_trees__extract__v t)))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields) t) true))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t) true)
  (not (= o5 t))) (not (= binary_trees__extract__v t)))
  (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields) t)
     (model__
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) t)) true))))
  (and
  (=> (not (= binary_trees__extract__v 0))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields)
     binary_trees__extract__v) true))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) i1))) true)
  (ite (and (not (= binary_trees__extract__v 0))
       (= (ole1
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (mk___split_fields2 t__split_fields1 t__split_fields2)) 
                  o5) binary_trees__extract__v)))
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (mk___split_fields2 t__split_fields1 t__split_fields2)) 
                  o5) i1)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields)
             binary_trees__extract__v) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields) o5) i1))) true)))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields) o5) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= binary_trees__extract__v 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields)
             binary_trees__extract__v) i1))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields) o5) i1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields) o5) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) i1)))) true))))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= binary_trees__extract__v 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields)
             binary_trees__extract__v) i1))) true))
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) binary_trees__extract__v)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields)
             binary_trees__extract__v) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2)) 
             o5) i1)))) true))))))))))))))))))
  (and (dynamic_invariant7 (mk___rep2 binary_trees__extract__f__fields) true
  true true) (in_range4 binary_trees__extract__v)))))

;; H
  (assert
  (=> (not (= is_root true))
  (= result12 (mk___split_fields__ref3
              (mk___split_fields3 t__split_fields
              (mk___rep2
              (mk___split_fields2 t__split_fields1 t__split_fields2))
              t__split_fields3)))))

;; H
  (assert
  (=> (not (= is_root true))
  (= t__split_fields5 (mk___split_fields3 t__split_fields
                      (mk___rep2 binary_trees__extract__f__fields)
                      t__split_fields3))))

;; H
  (assert
  (=> (not (= is_root true))
  (and (= o6 binary_trees__extract__v) (in_range3 binary_trees__extract__v))))

;; H
  (assert (=> (not (= is_root true)) (= result13 y3)))

;; H
  (assert (=> (not (= is_root true)) (= y2 o6)))

;; H
  (assert (=> (not (= is_root true)) (= y1 y2)))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5) 
  o7 (rec__search_trees__search_tree__values t__split_fields5))
  (rec__search_trees__search_tree__struct t__split_fields5) o7
  (rec__search_trees__search_tree__values t__split_fields5)))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5) 
  y1 (rec__search_trees__search_tree__values t__split_fields5))
  (rec__search_trees__search_tree__struct t__split_fields5) y1
  (rec__search_trees__search_tree__values t__split_fields5)))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields5) o7)
  (rec__search_trees__search_tree__struct t__split_fields5) o7))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields5) o7)
  (rec__search_trees__search_tree__struct t__split_fields5) o7))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) o7)
  (mk___rep2 f_old__split_fields2) o7))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_old__split_fields2) o7)
  (mk___rep2 f_old__split_fields2) o7))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields5) o7)
  (rec__search_trees__search_tree__struct t__split_fields5) o7))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields5) y1)
  (rec__search_trees__search_tree__struct t__split_fields5) y1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields5) y1)
  (rec__search_trees__search_tree__struct t__split_fields5) y1))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (= o7 (to_rep1 (rec__search_trees__search_tree__root t__split_fields5)))
  (in_range3
  (to_rep1 (rec__search_trees__search_tree__root t__split_fields5))))))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5)
     o7 (rec__search_trees__search_tree__values t__split_fields5)) true)
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields5)
     y1 (rec__search_trees__search_tree__values t__split_fields5)) true)
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields5) 
             o7) i1))) true)
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields5) 
             o7) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_old__split_fields2) o7) y1)))) true))
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__ (mk___rep2 f_old__split_fields2) o7) y1)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1
             (select (model__
                     (rec__search_trees__search_tree__struct
                     t__split_fields5) o7) i1)))) 1)) 0)
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields5) 
             y1) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields5) j3)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields5) i1))))))
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields5) 
             y1) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields5) i1)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields5) j3))))))))))))))

;; H
  (assert (= result14 (mk___split_fields__ref2 f_1__split_fields2)))

;; H
  (assert
  (= f_1__split_fields3 (us_split_fields5
                        (rec__search_trees__search_tree__struct
                        t__split_fields5))))

;; H
  (assert (size__function_guard
  (size (mk___rep2 binary_trees__extract__f__fields1))
  (mk___rep2 binary_trees__extract__f__fields1)))

;; H
  (assert (size__function_guard
  (size
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))))
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5)))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields1) y1)
  (mk___rep2 binary_trees__extract__f__fields1) y1))

;; H
  (assert (peek__function_guard
  (peek
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1 0)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1 0))

;; H
  (assert (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields1) y1 0)
  (mk___rep2 binary_trees__extract__f__fields1) y1 0))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields1) j3)
  (mk___rep2 binary_trees__extract__f__fields1) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields1) j3)
  (mk___rep2 binary_trees__extract__f__fields1) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position (mk___rep2 binary_trees__extract__f__fields1) j3)
  (mk___rep2 binary_trees__extract__f__fields1) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields1) j3 e)
  (mk___rep2 binary_trees__extract__f__fields1) j3 e)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3 e)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) j3 e)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields1) t)
  (mk___rep2 binary_trees__extract__f__fields1) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) t)
  (mk___rep2 binary_trees__extract__f__fields1) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) t)
  (mk___rep2 binary_trees__extract__f__fields1) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t)))

;; H
  (assert
  (forall ((t Int)) (oeq__function_guard1
  (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields1) t)
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t))
  (model__ (mk___rep2 binary_trees__extract__f__fields1) t)
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) t))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) y1)
  (mk___rep2 binary_trees__extract__f__fields1) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) y1)
  (mk___rep2 binary_trees__extract__f__fields1) y1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) y1)
  (mk___rep2 binary_trees__extract__f__fields1) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1) y1)
  (mk___rep2 binary_trees__extract__f__fields1) y1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1) (mk___rep2 binary_trees__extract__f__fields1)
  binary_trees__extract__v1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields5))) y1))

;; H
  (assert
  (forall ((i1 Int)) (is_concat__function_guard
  (is_concat
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields5))) 
          y1) binary_trees__extract__v1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
          binary_trees__extract__v1) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields5))) 
          y1) i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields5))) 
          y1) binary_trees__extract__v1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
          binary_trees__extract__v1) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields5))) 
          y1) i1))))))

;; H
  (assert
  (and
  (and
  (= (size (mk___rep2 binary_trees__extract__f__fields1)) (size
                                                          (mk___rep2
                                                          (us_split_fields5
                                                          (rec__search_trees__search_tree__struct
                                                          t__split_fields5)))))
  (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields1) y1) true)
  (and
  (= binary_trees__extract__v1 (peek
                               (mk___rep2
                               (us_split_fields5
                               (rec__search_trees__search_tree__struct
                               t__split_fields5))) y1 0))
  (and (= (peek (mk___rep2 binary_trees__extract__f__fields1) y1 0) 0)
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (not (= j3 binary_trees__extract__v1))
  (= (parent (mk___rep2 binary_trees__extract__f__fields1) j3) (parent
                                                               (mk___rep2
                                                               (us_split_fields5
                                                               (rec__search_trees__search_tree__struct
                                                               t__split_fields5)))
                                                               j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (and (not (= j3 binary_trees__extract__v1))
  (not (= (parent (mk___rep2 binary_trees__extract__f__fields1) j3) 0)))
  (= (position (mk___rep2 binary_trees__extract__f__fields1) j3) (position
                                                                 (mk___rep2
                                                                 (us_split_fields5
                                                                 (rec__search_trees__search_tree__struct
                                                                 t__split_fields5)))
                                                                 j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 1))
  (=> (or (not (= j3 y1)) (not (= e 0)))
  (= (peek (mk___rep2 binary_trees__extract__f__fields1) j3 e) (peek
                                                               (mk___rep2
                                                               (us_split_fields5
                                                               (rec__search_trees__search_tree__struct
                                                               t__split_fields5)))
                                                               j3 e)))))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields5))) t) true)
  (not (= y1 t))) (not (= binary_trees__extract__v1 t)))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields1) t) true))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields5))) t) true)
  (not (= y1 t))) (not (= binary_trees__extract__v1 t)))
  (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields1) t)
     (model__
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields5))) t)) true))))
  (and
  (=> (not (= binary_trees__extract__v1 0))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields1)
     binary_trees__extract__v1) true))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) i1))) true)
  (ite (and (not (= binary_trees__extract__v1 0))
       (= (ole1
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (us_split_fields5
                  (rec__search_trees__search_tree__struct t__split_fields5)))
                  y1) binary_trees__extract__v1)))
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (us_split_fields5
                  (rec__search_trees__search_tree__struct t__split_fields5)))
                  y1) i1)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
             binary_trees__extract__v1) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i1))) true)))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= binary_trees__extract__v1 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
             binary_trees__extract__v1) i1))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1) y1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) i1)))) true))))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= binary_trees__extract__v1 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
             binary_trees__extract__v1) i1))) true))
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) binary_trees__extract__v1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields1)
             binary_trees__extract__v1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields5))) 
             y1) i1)))) true))))))))))))))))))
  (and (dynamic_invariant7 (mk___rep2 binary_trees__extract__f__fields1) true
  true true) (in_range4 binary_trees__extract__v1))))

;; H
  (assert (= result15 (mk___split_fields__ref3 t__split_fields5)))

;; H
  (assert
  (= t__split_fields6 (mk___split_fields3
                      (rec__search_trees__search_tree__root t__split_fields5)
                      (mk___rep2 binary_trees__extract__f__fields1)
                      (rec__search_trees__search_tree__values
                      t__split_fields5))))

;; H
  (assert
  (and (= o8 binary_trees__extract__v1) (in_range3
  binary_trees__extract__v1)))

;; H
  (assert (= result16 (mk_int__ref x)))

;; H
  (assert (= x1 o8))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) 
  y1 (rec__search_trees__search_tree__values t__split_fields6))
  (rec__search_trees__search_tree__struct t__split_fields6) y1
  (rec__search_trees__search_tree__values t__split_fields6)))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) 
  x1 (rec__search_trees__search_tree__values t__split_fields6))
  (rec__search_trees__search_tree__struct t__split_fields6) x1
  (rec__search_trees__search_tree__values t__split_fields6)))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1)
  (rec__search_trees__search_tree__struct t__split_fields6) y1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1)
  (rec__search_trees__search_tree__struct t__split_fields6) y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_1__split_fields3) y1) (mk___rep2 f_1__split_fields3)
  y1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_1__split_fields3) y1) (mk___rep2 f_1__split_fields3)
  y1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields6) y1)
  (rec__search_trees__search_tree__struct t__split_fields6) y1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields6) x1)
  (rec__search_trees__search_tree__struct t__split_fields6) x1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields6) x1)
  (rec__search_trees__search_tree__struct t__split_fields6) x1))

;; H
  (assert
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6)
     y1 (rec__search_trees__search_tree__values t__split_fields6)) true)
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6)
     x1 (rec__search_trees__search_tree__values t__split_fields6)) true)
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields6) 
             y1) i1))) true)
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields6) 
             y1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_1__split_fields3) y1) x1)))) true))
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__ (mk___rep2 f_1__split_fields3) y1) x1)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1
             (select (model__
                     (rec__search_trees__search_tree__struct
                     t__split_fields6) y1) i1)))) 1)) 0)
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields6) 
             x1) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields6) j3)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields6) i1))))))
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields6) 
             x1) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields6) i1)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields6) j3)))))))))))))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_1__split_fields3) y1) (mk___rep2 f_1__split_fields3)
  y1))

;; H
  (assert
  (= (get
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_1__split_fields3) y1) x1))) 1) 0))

;; H
  (assert
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields6) 
     x1)) (to_rep
          (select (rec__search_trees__search_tree__values t__split_fields6) 
          y1))))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6) 
  o9 (rec__search_trees__search_tree__values t__split_fields6))
  (rec__search_trees__search_tree__struct t__split_fields6) o9
  (rec__search_trees__search_tree__values t__split_fields6)))

;; H
  (assert
  (=> (not (= is_root true))
  (and
  (= o9 (to_rep1 (rec__search_trees__search_tree__root t__split_fields6)))
  (in_range3
  (to_rep1 (rec__search_trees__search_tree__root t__split_fields6))))))

;; H
  (assert
  (=> (not (= is_root true))
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields6)
     o9 (rec__search_trees__search_tree__values t__split_fields6)) true)))

;; H
  (assert (= result17 (mk___split_fields__ref2 f_2__split_fields2)))

;; H
  (assert
  (= f_2__split_fields3 (us_split_fields5
                        (rec__search_trees__search_tree__struct
                        t__split_fields6))))

;; H
  (assert (size__function_guard
  (size (mk___rep2 binary_trees__extract__f__fields2))
  (mk___rep2 binary_trees__extract__f__fields2)))

;; H
  (assert (size__function_guard
  (size
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))))
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6)))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields2) x1)
  (mk___rep2 binary_trees__extract__f__fields2) x1))

;; H
  (assert (peek__function_guard
  (peek
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1 1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1 1))

;; H
  (assert (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields2) x1 1)
  (mk___rep2 binary_trees__extract__f__fields2) x1 1))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields2) j3)
  (mk___rep2 binary_trees__extract__f__fields2) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3)))

;; H
  (assert
  (forall ((j3 Int)) (parent__function_guard
  (parent (mk___rep2 binary_trees__extract__f__fields2) j3)
  (mk___rep2 binary_trees__extract__f__fields2) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position (mk___rep2 binary_trees__extract__f__fields2) j3)
  (mk___rep2 binary_trees__extract__f__fields2) j3)))

;; H
  (assert
  (forall ((j3 Int)) (position__function_guard
  (position
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek (mk___rep2 binary_trees__extract__f__fields2) j3 e)
  (mk___rep2 binary_trees__extract__f__fields2) j3 e)))

;; H
  (assert
  (forall ((j3 Int) (e Int)) (peek__function_guard
  (peek
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3 e)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) j3 e)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields2) t)
  (mk___rep2 binary_trees__extract__f__fields2) t)))

;; H
  (assert
  (forall ((t Int)) (valid_root__function_guard
  (valid_root
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) t)
  (mk___rep2 binary_trees__extract__f__fields2) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) t)
  (mk___rep2 binary_trees__extract__f__fields2) t)))

;; H
  (assert
  (forall ((t Int)) (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t)))

;; H
  (assert
  (forall ((t Int)) (oeq__function_guard1
  (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields2) t)
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t))
  (model__ (mk___rep2 binary_trees__extract__f__fields2) t)
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) t))))

;; H
  (assert (valid_root__function_guard
  (valid_root (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) x1)
  (mk___rep2 binary_trees__extract__f__fields2) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) x1)
  (mk___rep2 binary_trees__extract__f__fields2) x1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) x1)
  (mk___rep2 binary_trees__extract__f__fields2) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) x1)
  (mk___rep2 binary_trees__extract__f__fields2) x1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1)
  (mk___rep2 binary_trees__extract__f__fields2) xr1))

;; H
  (assert (model____function_guard
  (model__
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1)
  (mk___rep2
  (us_split_fields5
  (rec__search_trees__search_tree__struct t__split_fields6))) x1))

;; H
  (assert
  (forall ((i1 Int)) (is_concat__function_guard
  (is_concat
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields6))) 
          x1) xr1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields6))) 
          x1) i1))))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields6))) 
          x1) xr1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1)))
  (rec__tree_model__path_type__a
  (us_split_fields1
  (select (model__
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields6))) 
          x1) i1))))))

;; H
  (assert
  (and
  (and
  (= (size (mk___rep2 binary_trees__extract__f__fields2)) (size
                                                          (mk___rep2
                                                          (us_split_fields5
                                                          (rec__search_trees__search_tree__struct
                                                          t__split_fields6)))))
  (and (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) x1) true)
  (and
  (= xr1 (peek
         (mk___rep2
         (us_split_fields5
         (rec__search_trees__search_tree__struct t__split_fields6))) 
         x1 1))
  (and (= (peek (mk___rep2 binary_trees__extract__f__fields2) x1 1) 0)
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=> (not (= j3 xr1))
  (= (parent (mk___rep2 binary_trees__extract__f__fields2) j3) (parent
                                                               (mk___rep2
                                                               (us_split_fields5
                                                               (rec__search_trees__search_tree__struct
                                                               t__split_fields6)))
                                                               j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (and (not (= j3 xr1))
  (not (= (parent (mk___rep2 binary_trees__extract__f__fields2) j3) 0)))
  (= (position (mk___rep2 binary_trees__extract__f__fields2) j3) (position
                                                                 (mk___rep2
                                                                 (us_split_fields5
                                                                 (rec__search_trees__search_tree__struct
                                                                 t__split_fields6)))
                                                                 j3)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 1))
  (=> (or (not (= j3 x1)) (not (= e 1)))
  (= (peek (mk___rep2 binary_trees__extract__f__fields2) j3 e) (peek
                                                               (mk___rep2
                                                               (us_split_fields5
                                                               (rec__search_trees__search_tree__struct
                                                               t__split_fields6)))
                                                               j3 e)))))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields6))) t) true)
  (not (= x1 t))) (not (= xr1 t)))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) t) true))))
  (and
  (forall ((t Int))
  (=> (and (<= 1 t) (<= t 100))
  (=>
  (and
  (and
  (= (valid_root
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields6))) t) true)
  (not (= x1 t))) (not (= xr1 t)))
  (= (oeq1 (model__ (mk___rep2 binary_trees__extract__f__fields2) t)
     (model__
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields6))) t)) true))))
  (and
  (=> (not (= xr1 0))
  (= (valid_root (mk___rep2 binary_trees__extract__f__fields2) xr1) true))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) i1))) true)
  (ite (and (not (= xr1 0))
       (= (ole1
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (us_split_fields5
                  (rec__search_trees__search_tree__struct t__split_fields6)))
                  x1) xr1)))
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (mk___rep2
                  (us_split_fields5
                  (rec__search_trees__search_tree__struct t__split_fields6)))
                  x1) i1)))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i1))) true)))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i1))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= xr1 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1))) true))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) i1))) true))))
  (and
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i1))) true)
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) x1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) i1)))) true))))
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and (not (= xr1 0))
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1))) true))
  (= (is_concat
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) xr1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__extract__f__fields2) xr1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields6))) 
             x1) i1)))) true))))))))))))))))))
  (and (dynamic_invariant7 (mk___rep2 binary_trees__extract__f__fields2) true
  true true) (in_range4 xr1))))

;; H
  (assert (= result18 (mk___split_fields__ref3 t__split_fields6)))

;; H
  (assert
  (= t__split_fields7 (mk___split_fields3
                      (rec__search_trees__search_tree__root t__split_fields6)
                      (mk___rep2 binary_trees__extract__f__fields2)
                      (rec__search_trees__search_tree__values
                      t__split_fields6))))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) 
  x1 (rec__search_trees__search_tree__values t__split_fields7))
  (rec__search_trees__search_tree__struct t__split_fields7) x1
  (rec__search_trees__search_tree__values t__split_fields7)))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7)
  o10 (rec__search_trees__search_tree__values t__split_fields7))
  (rec__search_trees__search_tree__struct t__split_fields7) o10
  (rec__search_trees__search_tree__values t__split_fields7)))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1)
  (rec__search_trees__search_tree__struct t__split_fields7) x1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1)
  (rec__search_trees__search_tree__struct t__split_fields7) x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_2__split_fields3) x1) (mk___rep2 f_2__split_fields3)
  x1))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_2__split_fields3) x1) (mk___rep2 f_2__split_fields3)
  x1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields7) x1)
  (rec__search_trees__search_tree__struct t__split_fields7) x1))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields7) o10)
  (rec__search_trees__search_tree__struct t__split_fields7) o10))

;; H
  (assert (model____function_guard
  (model__ (rec__search_trees__search_tree__struct t__split_fields7) o10)
  (rec__search_trees__search_tree__struct t__split_fields7) o10))

;; H
  (assert (model____function_guard
  (model__ (mk___rep2 f_2__split_fields3) x1) (mk___rep2 f_2__split_fields3)
  x1))

;; H
  (assert (ordered_leafs__function_guard
  (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7) 
  x1 (rec__search_trees__search_tree__values t__split_fields7))
  (rec__search_trees__search_tree__struct t__split_fields7) x1
  (rec__search_trees__search_tree__values t__split_fields7)))

;; H
  (assert (=> (not (= xr1 0)) (and (= o10 xr1) (in_range3 xr1))))

;; H
  (assert
  (=> (not (= xr1 0))
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7)
     x1 (rec__search_trees__search_tree__values t__split_fields7)) true)
  (and
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7)
     o10 (rec__search_trees__search_tree__values t__split_fields7)) true)
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7) 
             x1) i1))) true)
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7) 
             x1) i1)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_2__split_fields3) x1) o10)))) true))
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__ (mk___rep2 f_2__split_fields3) x1) o10)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1
             (select (model__
                     (rec__search_trees__search_tree__struct
                     t__split_fields7) x1) i1)))) 1)) 0)
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7) 
             o10) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) j3)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields7) i1))))))
  (forall ((j3 Int))
  (=> (and (<= 1 j3) (<= j3 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7) 
             o10) j3))) true)
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) i1)) 
  (to_rep
  (select (rec__search_trees__search_tree__values t__split_fields7) j3))))))))))))))

;; H
  (assert
  (=> (not (= xr1 0))
  (= (get
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 f_2__split_fields3) x1) xr1))) 1) 1)))

;; H
  (assert
  (=> (not (not (= xr1 0)))
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields7)
     x1 (rec__search_trees__search_tree__values t__split_fields7)) true)))

;; H
  (assert (valid_root__function_guard
  (valid_root (rec__search_trees__search_tree__struct t__split_fields7) y1)
  (rec__search_trees__search_tree__struct t__split_fields7) y1))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (valid_root (rec__search_trees__search_tree__struct t__split_fields7)
     y1) true)))
(check-sat)
