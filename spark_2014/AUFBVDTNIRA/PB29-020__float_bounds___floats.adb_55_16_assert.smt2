;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes () ((mode (RNE2) (RNA2) (RTP2) (RTN2) (RTZ2))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE2) (= m RNA2)))

(declare-fun zeroF () t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-fun max_int () Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN2 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP2 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN2 (- x)) (- (round RTP2 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP2 (- x)) (- (round RTN2 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN2 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP2 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RTZ2 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RNA2 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN2 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ2 x) (roundToIntegral RTP2 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ2 x) (roundToIntegral RTN2 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP2 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP2 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP2 x)) (to_real (- 1 (to_int (- 1.0 
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP2 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN2 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN2 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN2 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN2 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE2 x (roundToIntegral RTN2 x))
  (sub RNE2 (roundToIntegral RTP2 x) x))
  (= (roundToIntegral RNA2 x) (roundToIntegral RTN2 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE2 (roundToIntegral RTP2 x) x)
  (sub RNE2 x (roundToIntegral RTN2 x)))
  (= (roundToIntegral RNA2 x) (roundToIntegral RTP2 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE2 x (roundToIntegral RTN2 x))
  (sub RNE2 (roundToIntegral RTP2 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA2 x) (roundToIntegral RTN2 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE2 (roundToIntegral RTP2 x) x)
  (sub RNE2 x (roundToIntegral RTN2 x)))
  (=> (is_positive x) (= (roundToIntegral RNA2 x) (roundToIntegral RTP2 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE2 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0)) 
     (round RNE2 x))
     (<= (round RNE2 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE2 x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem (t t) t)

(declare-fun fliteral () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA2 1)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(declare-sort t1 0)

(declare-fun tqtreal1 (t1) Real)

(declare-fun tqtisFinite1 (t1) Bool)

;; t'axiom
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (and
  (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) 
  (tqtreal1 x))
  (<= (tqtreal1 x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))))

(declare-fun zeroF1 () t1)

(declare-fun abs2 (t1) t1)

(declare-fun neg1 (t1) t1)

(declare-fun add1 (mode t1 t1) t1)

(declare-fun sub1 (mode t1 t1) t1)

(declare-fun mul1 (mode t1 t1) t1)

(declare-fun div2 (mode t1 t1) t1)

(declare-fun fma1 (mode t1 t1 t1) t1)

(declare-fun sqrt2 (mode t1) t1)

(declare-fun roundToIntegral1 (mode t1) t1)

(declare-fun min1 (t1 t1) t1)

(declare-fun max1 (t1 t1) t1)

(declare-fun le1 (t1 t1) Bool)

(declare-fun lt1 (t1 t1) Bool)

(declare-fun eq1 (t1 t1) Bool)

(declare-fun is_normal1 (t1) Bool)

(declare-fun is_subnormal1 (t1) Bool)

(declare-fun is_zero1 (t1) Bool)

(declare-fun is_infinite1 (t1) Bool)

(declare-fun is_nan1 (t1) Bool)

(declare-fun is_positive1 (t1) Bool)

(declare-fun is_negative1 (t1) Bool)

(define-fun is_plus_infinity1 ((x t1)) Bool (and (is_infinite1 x)
                                            (is_positive1 x)))

(define-fun is_minus_infinity1 ((x t1)) Bool (and (is_infinite1 x)
                                             (is_negative1 x)))

(define-fun is_plus_zero1 ((x t1)) Bool (and (is_zero1 x) (is_positive1 x)))

(define-fun is_minus_zero1 ((x t1)) Bool (and (is_zero1 x) (is_negative1 x)))

(define-fun is_not_nan1 ((x t1)) Bool (or (tqtisFinite1 x) (is_infinite1 x)))

;; is_not_nan
  (assert (forall ((x t1)) (= (is_not_nan1 x) (not (is_nan1 x)))))

;; is_not_finite
  (assert
  (forall ((x t1))
  (= (not (tqtisFinite1 x)) (or (is_infinite1 x) (is_nan1 x)))))

;; zeroF_is_positive
  (assert (is_positive1 zeroF1))

;; zeroF_is_zero
  (assert (is_zero1 zeroF1))

;; zero_to_real
  (assert
  (forall ((x t1))
  (! (= (is_zero1 x) (and (tqtisFinite1 x) (= (tqtreal1 x) 0.0))) :pattern ((is_zero1
  x)) )))

(declare-fun of_int1 (mode Int) t1)

(declare-fun to_int2 (mode t1) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF1 (of_int1 m 0))))

(declare-fun round1 (mode Real) Real)

(declare-fun max_int1 () Int)

;; max_real_int
  (assert
  (= (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0) (to_real 
  max_int1)))

(define-fun in_range1 ((x Real)) Bool (and
                                      (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                      (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range1 ((i Int)) Bool (and (<= (- max_int1) i)
                                         (<= i max_int1)))

;; is_finite
  (assert (forall ((x t1)) (=> (tqtisFinite1 x) (in_range1 (tqtreal1 x)))))

(define-fun no_overflow1 ((m mode) (x Real)) Bool (in_range1 (round1 m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range1 x) (no_overflow1 m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round1 m x) (round1 m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round1 m1 (round1 m2 x)) (round1 m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (= (round1 m (tqtreal1 x)) (tqtreal1 x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round1 RTN2 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round1 RTP2 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round1 RTN2 (- x)) (- (round1 RTP2 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round1 RTP2 (- x)) (- (round1 RTN2 x)))))

(define-fun in_safe_int_range1 ((i Int)) Bool (and
                                              (<= (- 9007199254740992) i)
                                              (<= i 9007199254740992)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range1 i) (= (round1 m (to_real i)) (to_real i)))))

(define-fun same_sign1 ((x t1)
  (y t1)) Bool (or (and (is_positive1 x) (is_positive1 y))
               (and (is_negative1 x) (is_negative1 y))))

(define-fun diff_sign1 ((x t1)
  (y t1)) Bool (or (and (is_positive1 x) (is_negative1 y))
               (and (is_negative1 x) (is_positive1 y))))

;; feq_eq
  (assert
  (forall ((x t1) (y t1))
  (=> (tqtisFinite1 x)
  (=> (tqtisFinite1 y) (=> (not (is_zero1 x)) (=> (eq1 x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t1) (y t1))
  (=> (tqtisFinite1 x) (=> (tqtisFinite1 y) (=> (= x y) (eq1 x y))))))

;; eq_refl
  (assert (forall ((x t1)) (=> (tqtisFinite1 x) (eq1 x x))))

;; eq_sym
  (assert (forall ((x t1) (y t1)) (=> (eq1 x y) (eq1 y x))))

;; eq_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (eq1 x y) (=> (eq1 y z) (eq1 x z)))))

;; eq_zero
  (assert (eq1 zeroF1 (neg1 zeroF1)))

;; eq_to_real_finite
  (assert
  (forall ((x t1) (y t1))
  (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
  (= (eq1 x y) (= (tqtreal1 x) (tqtreal1 y))))))

;; lt_finite
  (assert
  (forall ((x t1) (y t1))
  (! (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (= (lt1 x y) (< (tqtreal1 x) (tqtreal1 y)))) :pattern ((lt1
  x y)) )))

;; le_finite
  (assert
  (forall ((x t1) (y t1))
  (! (=> (and (tqtisFinite1 x) (tqtisFinite1 y))
     (= (le1 x y) (<= (tqtreal1 x) (tqtreal1 y)))) :pattern ((le1
  x y)) )))

;; le_lt_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (and (le1 x y) (lt1 y z)) (lt1 x z))))

;; lt_le_trans
  (assert
  (forall ((x t1) (y t1) (z t1)) (=> (and (lt1 x y) (le1 y z)) (lt1 x z))))

;; le_ge_asym
  (assert (forall ((x t1) (y t1)) (=> (and (le1 x y) (le1 y x)) (eq1 x y))))

;; not_lt_ge
  (assert
  (forall ((x t1) (y t1))
  (=> (and (not (lt1 x y)) (and (is_not_nan1 x) (is_not_nan1 y))) (le1 y x))))

;; not_gt_le
  (assert
  (forall ((x t1) (y t1))
  (=> (and (not (lt1 y x)) (and (is_not_nan1 x) (is_not_nan1 y))) (le1 x y))))

;; lt_lt_finite
  (assert
  (forall ((x t1) (y t1) (z t1))
  (=> (lt1 x y) (=> (lt1 y z) (tqtisFinite1 y)))))

;; positive_to_real
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (is_positive1 x) (<= 0.0 (tqtreal1 x)))) :pattern ((is_positive1
  x)) :pattern ((<= 0.0 (tqtreal1 x))) )))

;; to_real_positive
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (< 0.0 (tqtreal1 x)) (is_positive1 x))) :pattern ((is_positive1
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (is_negative1 x) (<= (tqtreal1 x) 0.0))) :pattern ((is_negative1
  x)) :pattern ((<= (tqtreal1 x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (=> (< (tqtreal1 x) 0.0) (is_negative1 x))) :pattern ((is_negative1
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t1)) (not (and (is_positive1 x) (is_negative1 x)))))

;; negative_or_positive
  (assert
  (forall ((x t1))
  (=> (is_not_nan1 x) (or (is_positive1 x) (is_negative1 x)))))

;; diff_sign_trans
  (assert
  (forall ((x t1) (y t1) (z t1))
  (=> (and (diff_sign1 x y) (diff_sign1 y z)) (same_sign1 x z))))

;; diff_sign_product
  (assert
  (forall ((x t1) (y t1))
  (=>
  (and (tqtisFinite1 x)
  (and (tqtisFinite1 y) (< (* (tqtreal1 x) (tqtreal1 y)) 0.0))) (diff_sign1 x
  y))))

;; same_sign_product
  (assert
  (forall ((x t1) (y t1))
  (=> (and (tqtisFinite1 x) (and (tqtisFinite1 y) (same_sign1 x y)))
  (<= 0.0 (* (tqtreal1 x) (tqtreal1 y))))))

(define-fun product_sign1 ((z t1) (x t1)
  (y t1)) Bool (and (=> (same_sign1 x y) (is_positive1 z))
               (=> (diff_sign1 x y) (is_negative1 z))))

(define-fun overflow_value1 ((m mode)
  (x t1)) Bool (ite (is-RTN2 m) (ite (is_positive1 x)
                                (and (tqtisFinite1 x)
                                (= (tqtreal1 x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))
                                (is_infinite1 x)) (ite (is-RTP2 m) (ite (is_positive1
                                                                   x)
                                                                   (is_infinite1
                                                                   x)
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (= 
                                                                   (tqtreal1
                                                                   x) (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))) 
                                                  (ite (is-RTZ2 m) (ite (is_positive1
                                                                   x)
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (= 
                                                                   (tqtreal1
                                                                   x) (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)))
                                                                   (and
                                                                   (tqtisFinite1
                                                                   x)
                                                                   (= 
                                                                   (tqtreal1
                                                                   x) (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))) 
                                                  (ite (is-RNA2 m) (is_infinite1
                                                  x) (is_infinite1 x))))))

(define-fun sign_zero_result1 ((m mode)
  (x t1)) Bool (=> (is_zero1 x)
               (ite (is-RTN2 m) (is_negative1 x) (is_positive1 x))))

;; add_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (+ (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (add1 m x y))
     (= (tqtreal1 (add1 m x y)) (round1 m (+ (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (add1 m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (add1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (add1 m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (add1 m x y))
     (and (no_overflow1 m (+ (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (add1 m x y)) (round1 m (+ (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (add1 m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (- (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (sub1 m x y))
     (= (tqtreal1 (sub1 m x y)) (round1 m (- (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (sub1 m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (sub1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (sub1 m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (sub1 m x y))
     (and (no_overflow1 m (- (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (sub1 m x y)) (round1 m (- (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (sub1 m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (no_overflow1 m (* (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (mul1 m x y))
     (= (tqtreal1 (mul1 m x y)) (round1 m (* (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (mul1 m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (mul1 m x y)) (and (tqtisFinite1 x) (tqtisFinite1 y))) :pattern (
  (mul1 m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (mul1 m x y))
     (and (no_overflow1 m (* (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (mul1 m x y)) (round1 m (* (tqtreal1 x) (tqtreal1 y))))))) :pattern (
  (mul1 m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 x)
     (=> (tqtisFinite1 y)
     (=> (not (is_zero1 y))
     (=> (no_overflow1 m (/ (tqtreal1 x) (tqtreal1 y)))
     (and (tqtisFinite1 (div2 m x y))
     (= (tqtreal1 (div2 m x y)) (round1 m (/ (tqtreal1 x) (tqtreal1 y))))))))) :pattern (
  (div2 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (tqtisFinite1 (div2 m x y))
     (or (and (tqtisFinite1 x) (and (tqtisFinite1 y) (not (is_zero1 y))))
     (and (tqtisFinite1 x)
     (and (is_infinite1 y) (= (tqtreal1 (div2 m x y)) 0.0))))) :pattern (
  (div2 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (div2 m x y))
     (=> (tqtisFinite1 y)
     (and (no_overflow1 m (/ (tqtreal1 x) (tqtreal1 y)))
     (= (tqtreal1 (div2 m x y)) (round1 m (/ (tqtreal1 x) (tqtreal1 y)))))))) :pattern (
  (div2 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x)
     (and (tqtisFinite1 (neg1 x)) (= (tqtreal1 (neg1 x)) (- (tqtreal1 x))))) :pattern (
  (neg1 x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 (neg1 x))
     (and (tqtisFinite1 x) (= (tqtreal1 (neg1 x)) (- (tqtreal1 x))))) :pattern (
  (neg1 x)) )))

;; abs_finite
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x)
     (and (tqtisFinite1 (abs2 x))
     (and
     (= (tqtreal1 (abs2 x)) (ite (>= (tqtreal1 x) 0.0) (tqtreal1 x) (- 
     (tqtreal1 x)))) (is_positive1 (abs2 x))))) :pattern ((abs2 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 (abs2 x))
     (and (tqtisFinite1 x)
     (= (tqtreal1 (abs2 x)) (ite (>= (tqtreal1 x) 0.0) (tqtreal1 x) (- 
     (tqtreal1 x)))))) :pattern ((abs2 x)) )))

;; abs_universal
  (assert
  (forall ((x t1)) (! (not (is_negative1 (abs2 x))) :pattern ((abs2 x)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (=> (tqtisFinite1 (fma1 m x y z))
     (and (tqtisFinite1 x) (and (tqtisFinite1 y) (tqtisFinite1 z)))) :pattern (
  (fma1 m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t1) (y t1) (z t1))
  (! (=> (to_nearest m)
     (=> (tqtisFinite1 (fma1 m x y z))
     (and (no_overflow1 m (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1 z)))
     (= (tqtreal1 (fma1 m x y z)) (round1 m
                                  (+ (* (tqtreal1 x) (tqtreal1 y)) (tqtreal1
                                                                   z))))))) :pattern (
  (fma1 m x y z)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t1))
  (! (=> (tqtisFinite1 (sqrt2 m x))
     (and (tqtisFinite1 x)
     (and (<= 0.0 (tqtreal1 x))
     (= (tqtreal1 (sqrt2 m x)) (round1 m (sqrt1 (tqtreal1 x))))))) :pattern (
  (sqrt2 m x)) )))

(define-fun same_sign_real1 ((x t1)
  (r Real)) Bool (or (and (is_positive1 x) (< 0.0 r))
                 (and (is_negative1 x) (< r 0.0))))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (+ i j)) (eq1 (of_int1 m (+ i j))
  (add1 n (of_int1 m i) (of_int1 m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (- i j)) (eq1 (of_int1 m (- i j))
  (sub1 n (of_int1 m i) (of_int1 m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range1 i)
  (=> (in_safe_int_range1 j)
  (=> (in_safe_int_range1 (* i j)) (eq1 (of_int1 m (* i j))
  (mul1 n (of_int1 m i) (of_int1 m j))))))))

;; Min_r
  (assert (forall ((x t1) (y t1)) (=> (le1 y x) (eq1 (min1 x y) y))))

;; Min_l
  (assert (forall ((x t1) (y t1)) (=> (le1 x y) (eq1 (min1 x y) x))))

;; Max_r
  (assert (forall ((x t1) (y t1)) (=> (le1 y x) (eq1 (max1 x y) x))))

;; Max_l
  (assert (forall ((x t1) (y t1)) (=> (le1 x y) (eq1 (max1 x y) y))))

(declare-fun is_int2 (t1) Bool)

;; zeroF_is_int
  (assert (is_int2 zeroF1))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range1 x) (is_int2 (of_int1 m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t1))
  (=> (tqtisFinite1 i)
  (=>
  (or (le1 i (neg1 (of_int1 m 9007199254740992))) (le1
  (of_int1 m 9007199254740992) i)) (is_int2 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (is_int2 (roundToIntegral1 m x)))))

;; eq_is_int
  (assert
  (forall ((x t1) (y t1)) (=> (eq1 x y) (=> (is_int2 x) (is_int2 y)))))

;; add_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (add1 m x y)) (is_int2 (add1 m x y)))))))

;; sub_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (sub1 m x y)) (is_int2 (sub1 m x y)))))))

;; mul_int
  (assert
  (forall ((x t1) (y t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y) (=> (tqtisFinite1 (mul1 m x y)) (is_int2 (mul1 m x y)))))))

;; fma_int
  (assert
  (forall ((x t1) (y t1) (z t1) (m mode))
  (=> (is_int2 x)
  (=> (is_int2 y)
  (=> (is_int2 z)
  (=> (tqtisFinite1 (fma1 m x y z)) (is_int2 (fma1 m x y z))))))))

;; neg_int
  (assert (forall ((x t1)) (=> (is_int2 x) (is_int2 (neg1 x)))))

;; abs_int
  (assert (forall ((x t1)) (=> (is_int2 x) (is_int2 (abs2 x)))))

;; is_int_of_int
  (assert
  (forall ((x t1) (m mode) (mqt mode))
  (=> (is_int2 x) (eq1 x (of_int1 mqt (to_int2 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t1)) (=> (is_int2 x) (in_int_range1 (to_int2 m x)))))

;; is_int_is_finite
  (assert (forall ((x t1)) (=> (is_int2 x) (tqtisFinite1 x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t1))
  (=> (is_int2 x) (= (tqtreal1 x) (to_real (to_int2 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t1)) (=> (is_int2 i) (eq1 (roundToIntegral1 m i) i))))

;; truncate_neg
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (=> (is_negative1 x)
  (= (roundToIntegral1 RTZ2 x) (roundToIntegral1 RTP2 x))))))

;; truncate_pos
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (=> (is_positive1 x)
  (= (roundToIntegral1 RTZ2 x) (roundToIntegral1 RTN2 x))))))

;; ceil_le
  (assert
  (forall ((x t1)) (=> (tqtisFinite1 x) (le1 x (roundToIntegral1 RTP2 x)))))

;; ceil_lest
  (assert
  (forall ((x t1) (y t1))
  (=> (and (le1 x y) (is_int2 y)) (le1 (roundToIntegral1 RTP2 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (= (tqtreal1 (roundToIntegral1 RTP2 x)) (to_real (- 1 (to_int (- 1.0 
  (tqtreal1 x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x)
  (= (to_int2 m (roundToIntegral1 RTP2 x)) (- 1 (to_int (- 1.0 (tqtreal1 x))))))))

;; floor_le
  (assert
  (forall ((x t1)) (=> (tqtisFinite1 x) (le1 (roundToIntegral1 RTN2 x) x))))

;; floor_lest
  (assert
  (forall ((x t1) (y t1))
  (=> (and (le1 y x) (is_int2 y)) (le1 y (roundToIntegral1 RTN2 x)))))

;; floor_to_real
  (assert
  (forall ((x t1))
  (=> (tqtisFinite1 x)
  (= (tqtreal1 (roundToIntegral1 RTN2 x)) (to_real (to_int (tqtreal1 x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x)
  (= (to_int2 m (roundToIntegral1 RTN2 x)) (to_int (tqtreal1 x))))))

;; RNA_down
  (assert
  (forall ((x t1))
  (=> (lt1 (sub1 RNE2 x (roundToIntegral1 RTN2 x))
  (sub1 RNE2 (roundToIntegral1 RTP2 x) x))
  (= (roundToIntegral1 RNA2 x) (roundToIntegral1 RTN2 x)))))

;; RNA_up
  (assert
  (forall ((x t1))
  (=> (lt1 (sub1 RNE2 (roundToIntegral1 RTP2 x) x)
  (sub1 RNE2 x (roundToIntegral1 RTN2 x)))
  (= (roundToIntegral1 RNA2 x) (roundToIntegral1 RTP2 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t1))
  (=> (eq1 (sub1 RNE2 x (roundToIntegral1 RTN2 x))
  (sub1 RNE2 (roundToIntegral1 RTP2 x) x))
  (=> (is_negative1 x)
  (= (roundToIntegral1 RNA2 x) (roundToIntegral1 RTN2 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t1))
  (=> (eq1 (sub1 RNE2 (roundToIntegral1 RTP2 x) x)
  (sub1 RNE2 x (roundToIntegral1 RTN2 x)))
  (=> (is_positive1 x)
  (= (roundToIntegral1 RNA2 x) (roundToIntegral1 RTP2 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t1))
  (= (to_int2 m x) (to_int2 m (roundToIntegral1 m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t1) (y t1))
  (=> (tqtisFinite1 x)
  (=> (tqtisFinite1 y) (=> (le1 x y) (<= (to_int2 m x) (to_int2 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range1 i) (= (to_int2 m (of_int1 m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t1) (y t1))
  (=> (tqtisFinite1 x) (=> (eq1 x y) (= (to_int2 m x) (to_int2 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t1))
  (=> (is_int2 x) (= (to_int2 m (neg1 x)) (- (to_int2 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x) (tqtisFinite1 (roundToIntegral1 m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow1 RNE2 x)
     (and
     (<= (- (- x (* (/ 1.0 9007199254740992.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568.0)) 
     (round1 RNE2 x))
     (<= (round1 RNE2 x) (+ (+ x (* (/ 1.0 9007199254740992.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568.0))))) :pattern (
  (round1 RNE2 x)) )))

(define-fun neq1 ((x t1) (y t1)) Bool (not (eq1 x y)))

(define-fun bool_lt1 ((x t1) (y t1)) Bool (ite (lt1 x y) true false))

(define-fun bool_le1 ((x t1) (y t1)) Bool (ite (le1 x y) true false))

(define-fun bool_gt1 ((x t1) (y t1)) Bool (ite (lt1 y x) true false))

(define-fun bool_ge1 ((x t1) (y t1)) Bool (ite (le1 y x) true false))

(define-fun bool_eq1 ((x t1) (y t1)) Bool (ite (eq1 x y) true false))

(define-fun bool_neq1 ((x t1) (y t1)) Bool (ite (not (eq1 x y)) true false))

(declare-fun rem1 (t1 t1) t1)

(declare-fun fliteral1 () t1)

;; fliteral_axiom
  (assert (and (tqtisFinite1 fliteral1) (= (tqtreal1 fliteral1) 1.0)))

;; one_is_int
  (assert (is_int2 fliteral1))

;; one_of_int
  (assert (= fliteral1 (of_int1 RNA2 1)))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 t1)))))
(declare-fun to_float64 (mode t) t1)

(declare-fun to_float32 (mode t1) t)

;; round_double_single
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round1 m1 (round m2 x)) (round m2 x))))

;; to_float64_exact
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (and (tqtisFinite1 (to_float64 m x))
  (= (tqtreal1 (to_float64 m x)) (tqtreal x))))))

;; to_float32_conv
  (assert
  (forall ((m mode) (x t1))
  (=> (tqtisFinite1 x)
  (=> (no_overflow m (tqtreal1 x))
  (and (tqtisFinite (to_float32 m x))
  (= (tqtreal (to_float32 m x)) (round m (tqtreal1 x))))))))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int2 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq2 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) t)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) t)

(declare-fun of_rep (t) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (tqtisFinite (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                              (of_rep x))) )))

(declare-sort long_float 0)

(define-fun bool_eq3 ((x t1) (y t1)) Bool (ite (eq1 x y) true false))

(declare-fun user_eq1 (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t1) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t1)

(declare-fun dummy1 () long_float)

(declare-datatypes ()
((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float 
  (long_float__content a))

(declare-fun to_rep1 (long_float) t1)

(declare-fun of_rep1 (t1) long_float)

;; inversion_axiom
  (assert
  (forall ((x long_float))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x long_float)) (! (tqtisFinite1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x t1))
  (! (=> (tqtisFinite1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))

;; slide_eq
  (assert
  (forall ((a (Array Int float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int float) Int Int (Array Int float) Int
  Int) (Array Int float))

;; concat_def
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (float Int) (Array Int float))

;; singleton_def
  (assert
  (forall ((v float))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int float)) (a__first Int) (a__last Int)
  (b (Array Int float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-sort tt_tab_4_l_floatD1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tt_tab_4_l_floatD1 tt_tab_4_l_floatD1) Bool)

(declare-fun dummy2 () tt_tab_4_l_floatD1)

(declare-datatypes ()
((tt_tab_4_l_floatD1__ref
 (mk_tt_tab_4_l_floatD1__ref
 (tt_tab_4_l_floatD1__content tt_tab_4_l_floatD1)))))
(define-fun tt_tab_4_l_floatD1__ref___projection ((a tt_tab_4_l_floatD1__ref)) tt_tab_4_l_floatD1 
  (tt_tab_4_l_floatD1__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int long_float))))))
(declare-fun slide1 ((Array Int long_float) Int Int) (Array Int long_float))

;; slide_eq
  (assert
  (forall ((a (Array Int long_float)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int long_float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int long_float) Int Int (Array Int long_float)
  Int Int) (Array Int long_float))

;; concat_def
  (assert
  (forall ((a (Array Int long_float)) (b (Array Int long_float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (long_float Int) (Array Int long_float))

;; singleton_def
  (assert
  (forall ((v long_float))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int long_float)) (a__first Int) (a__last Int)
  (b (Array Int long_float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int long_float)) (b (Array Int long_float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun a () (Array Int float))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t1b 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (t1b t1b) Bool)

(declare-fun dummy3 () t1b)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a1 t1b__ref)) t1b (t1b__content a1))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort t3b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (t3b t3b) Bool)

(declare-fun dummy4 () t3b)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a1 t3b__ref)) t3b (t3b__content a1))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-sort t5b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (t5b t5b) Bool)

(declare-fun dummy5 () t5b)

(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a1 t5b__ref)) t5b (t5b__content a1))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun floats__test__b__aggregate_def (t1 t1 t1
  t1) (Array Int long_float))

;; def_axiom
  (assert
  (forall ((temp___156 t1) (temp___157 t1) (temp___158 t1) (temp___159 t1))
  (let ((temp___155 (floats__test__b__aggregate_def temp___156 temp___157
                    temp___158 temp___159)))
  (and
  (and
  (and (= (select temp___155 1) (of_rep1 temp___156))
  (= (select temp___155 2) (of_rep1 temp___157)))
  (= (select temp___155 3) (of_rep1 temp___158)))
  (= (select temp___155 4) (of_rep1 temp___159))))))

(declare-fun floats__test__c__aggregate_def (t1 t1 t1
  t1) (Array Int long_float))

;; def_axiom
  (assert
  (forall ((temp___162 t1) (temp___163 t1) (temp___164 t1) (temp___165 t1))
  (let ((temp___161 (floats__test__c__aggregate_def temp___162 temp___163
                    temp___164 temp___165)))
  (and
  (and
  (and (= (select temp___161 1) (of_rep1 temp___162))
  (= (select temp___161 2) (of_rep1 temp___163)))
  (= (select temp___161 3) (of_rep1 temp___164)))
  (= (select temp___161 4) (of_rep1 temp___165))))))

(declare-fun floats__test__d__aggregate_def (t1 t1 t1
  t1) (Array Int long_float))

;; def_axiom
  (assert
  (forall ((temp___168 t1) (temp___169 t1) (temp___170 t1) (temp___171 t1))
  (let ((temp___167 (floats__test__d__aggregate_def temp___168 temp___169
                    temp___170 temp___171)))
  (and
  (and
  (and (= (select temp___167 1) (of_rep1 temp___168))
  (= (select temp___167 2) (of_rep1 temp___169)))
  (= (select temp___167 3) (of_rep1 temp___170)))
  (= (select temp___167 4) (of_rep1 temp___171))))))

(declare-fun fliteral2 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral2)
  (= (tqtreal fliteral2) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral2) fliteral2)) (tqtisFinite
                                     temp___expr_51)))

(declare-fun fliteral3 () t1)

;; fliteral_axiom
  (assert
  (and (tqtisFinite1 fliteral3)
  (= (tqtreal1 fliteral3) 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)))

(define-fun dynamic_invariant1 ((temp___expr_57 t1) (temp___is_init_54 Bool)
  (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true) (le1
                                     (neg1 fliteral3) fliteral3))
                                     (tqtisFinite1 temp___expr_57)))

(declare-fun fliteral4 () t1)

;; fliteral_axiom
  (assert
  (and (tqtisFinite1 fliteral4) (= (tqtreal1 fliteral4) (/ 0.0 10.0))))

(declare-fun fliteral5 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral5)
  (= (tqtreal fliteral5) (/ 500000000000000000000000.0 1000000000000000000000000.0))))

(declare-fun fliteral6 () t1)

;; fliteral_axiom
  (assert (and (tqtisFinite1 fliteral6) (= (tqtreal1 fliteral6) 2.0)))

(declare-fun e () (Array Int long_float))

(declare-fun b () (Array Int long_float))

(declare-fun c () (Array Int long_float))

(declare-fun d () (Array Int long_float))

(declare-fun o () (Array Int long_float))

(declare-fun o1 () (Array Int long_float))

(declare-fun o2 () (Array Int long_float))

(declare-fun o3 () long_float)

(declare-fun o4 () (Array Int long_float))

(declare-fun o5 () long_float)

(declare-fun o6 () (Array Int long_float))

(declare-fun o7 () long_float)

(declare-fun o8 () (Array Int long_float))

(declare-fun o9 () long_float)

(declare-fun o10 () (Array Int long_float))

(declare-fun o11 () long_float)

(declare-fun o12 () (Array Int long_float))

(declare-fun o13 () long_float)

(declare-fun o14 () (Array Int long_float))

(declare-fun o15 () long_float)

(declare-fun o16 () (Array Int long_float))

(declare-fun o17 () long_float)

(declare-fun o18 () (Array Int long_float))

(declare-fun o19 () long_float)

(declare-fun o20 () (Array Int long_float))

(declare-fun o21 () long_float)

(declare-fun o22 () (Array Int long_float))

(declare-fun o23 () long_float)

(declare-fun o24 () (Array Int long_float))

(declare-fun o25 () long_float)

(declare-fun o26 () (Array Int long_float))

(declare-fun o27 () t1)

(declare-fun o28 () long_float)

(declare-fun o29 () (Array Int long_float))

(declare-fun o30 () t1)

(declare-fun o31 () long_float)

(declare-fun o32 () (Array Int long_float))

(declare-fun o33 () t1)

(declare-fun o34 () long_float)

(declare-fun o35 () (Array Int long_float))

(declare-fun o36 () t1)

(declare-fun o37 () long_float)

(declare-fun o38 () (Array Int long_float))

(declare-fun result () (Array Int long_float))

(declare-fun b1 () (Array Int long_float))

(declare-fun result1 () (Array Int long_float))

(declare-fun c1 () (Array Int long_float))

(declare-fun result2 () (Array Int long_float))

(declare-fun d1 () (Array Int long_float))

(declare-fun result3 () (Array Int long_float))

(declare-fun e1 () (Array Int long_float))

(declare-fun result4 () (Array Int long_float))

(declare-fun e2 () (Array Int long_float))

(declare-fun result5 () (Array Int long_float))

(declare-fun e3 () (Array Int long_float))

(declare-fun result6 () (Array Int long_float))

(declare-fun e4 () (Array Int long_float))

(declare-fun result7 () (Array Int long_float))

(declare-fun c2 () (Array Int long_float))

(declare-fun result8 () (Array Int long_float))

(declare-fun c3 () (Array Int long_float))

(declare-fun result9 () (Array Int long_float))

(declare-fun c4 () (Array Int long_float))

(declare-fun result10 () (Array Int long_float))

(declare-fun c5 () (Array Int long_float))

(declare-fun result11 () (Array Int long_float))

(declare-fun b2 () (Array Int long_float))

(declare-fun result12 () (Array Int long_float))

(declare-fun b3 () (Array Int long_float))

(declare-fun result13 () (Array Int long_float))

(declare-fun b4 () (Array Int long_float))

(declare-fun result14 () (Array Int long_float))

(declare-fun b5 () (Array Int long_float))

(declare-fun result15 () (Array Int long_float))

(declare-fun d2 () (Array Int long_float))

(declare-fun result16 () (Array Int long_float))

(declare-fun d3 () (Array Int long_float))

(declare-fun result17 () map__ref1)

(declare-fun d4 () (Array Int long_float))

(declare-fun result18 () map__ref1)

(declare-fun d5 () (Array Int long_float))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 3))
  (and (le (neg fliteral) (to_rep (select a i))) (le (to_rep (select a i))
  fliteral)))))

;; H
  (assert
  (= o (floats__test__b__aggregate_def fliteral4 fliteral4 fliteral4
       fliteral4)))

;; H
  (assert (= result b))

;; H
  (assert (= b1 o))

;; H
  (assert
  (= o1 (floats__test__c__aggregate_def fliteral4 fliteral4 fliteral4
        fliteral4)))

;; H
  (assert (= result1 c))

;; H
  (assert (= c1 o1))

;; H
  (assert
  (= o2 (floats__test__d__aggregate_def fliteral4 fliteral4 fliteral4
        fliteral4)))

;; H
  (assert (= result2 d))

;; H
  (assert (= d1 o2))

;; H
  (assert
  (and (le (neg fliteral) (to_rep (select a 1))) (le (to_rep (select a 1))
  fliteral)))

;; H
  (assert
  (and (le (neg fliteral) (to_rep (select a 2))) (le (to_rep (select a 2))
  fliteral)))

;; H
  (assert
  (and (le (neg fliteral) (to_rep (select a 3))) (le (to_rep (select a 3))
  fliteral)))

;; H
  (assert (= (to_rep1 o3) fliteral1))

;; H
  (assert (= o4 (store e 1 o3)))

;; H
  (assert (= result3 e))

;; H
  (assert (= e1 o4))

;; H
  (assert
  (= (to_rep1 o5) (to_float64 RNE2
                  (mul RNE2 (to_rep (select a 1)) fliteral5))))

;; H
  (assert (= o6 (store e1 2 o5)))

;; H
  (assert (= result4 e1))

;; H
  (assert (= e2 o6))

;; H
  (assert
  (= (to_rep1 o7) (to_float64 RNE2
                  (mul RNE2 (to_rep (select a 2)) fliteral5))))

;; H
  (assert (= o8 (store e2 3 o7)))

;; H
  (assert (= result5 e2))

;; H
  (assert (= e3 o8))

;; H
  (assert
  (= (to_rep1 o9) (to_float64 RNE2
                  (mul RNE2 (to_rep (select a 3)) fliteral5))))

;; H
  (assert (= o10 (store e3 4 o9)))

;; H
  (assert (= result6 e3))

;; H
  (assert (= e4 o10))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select e4 1))) (le1
  (to_rep1 (select e4 1)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select e4 2))) (le1
  (to_rep1 (select e4 2)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select e4 3))) (le1
  (to_rep1 (select e4 3)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select e4 4))) (le1
  (to_rep1 (select e4 4)) fliteral1)))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 4))
  (and (le1 (neg1 fliteral1) (to_rep1 (select e4 i))) (le1
  (to_rep1 (select e4 i)) fliteral1)))))

;; H
  (assert (= (to_rep1 o11) fliteral1))

;; H
  (assert (= o12 (store c1 1 o11)))

;; H
  (assert (= result7 c1))

;; H
  (assert (= c2 o12))

;; H
  (assert
  (= (to_rep1 o13) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 1)) fliteral5))))

;; H
  (assert (= o14 (store c2 2 o13)))

;; H
  (assert (= result8 c2))

;; H
  (assert (= c3 o14))

;; H
  (assert
  (= (to_rep1 o15) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 2)) fliteral5))))

;; H
  (assert (= o16 (store c3 3 o15)))

;; H
  (assert (= result9 c3))

;; H
  (assert (= c4 o16))

;; H
  (assert
  (= (to_rep1 o17) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 3)) fliteral5))))

;; H
  (assert (= o18 (store c4 4 o17)))

;; H
  (assert (= result10 c4))

;; H
  (assert (= c5 o18))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select c5 1))) (le1
  (to_rep1 (select c5 1)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select c5 2))) (le1
  (to_rep1 (select c5 2)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select c5 3))) (le1
  (to_rep1 (select c5 3)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select c5 4))) (le1
  (to_rep1 (select c5 4)) fliteral1)))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 4))
  (and (le1 (neg1 fliteral1) (to_rep1 (select c5 i))) (le1
  (to_rep1 (select c5 i)) fliteral1)))))

;; H
  (assert (= (to_rep1 o19) fliteral1))

;; H
  (assert (= o20 (store b1 1 o19)))

;; H
  (assert (= result11 b1))

;; H
  (assert (= b2 o20))

;; H
  (assert
  (= (to_rep1 o21) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 1)) fliteral5))))

;; H
  (assert (= o22 (store b2 2 o21)))

;; H
  (assert (= result12 b2))

;; H
  (assert (= b3 o22))

;; H
  (assert
  (= (to_rep1 o23) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 2)) fliteral5))))

;; H
  (assert (= o24 (store b3 3 o23)))

;; H
  (assert (= result13 b3))

;; H
  (assert (= b4 o24))

;; H
  (assert
  (= (to_rep1 o25) (to_float64 RNE2
                   (mul RNE2 (to_rep (select a 3)) fliteral5))))

;; H
  (assert (= o26 (store b4 4 o25)))

;; H
  (assert (= result14 b4))

;; H
  (assert (= b5 o26))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select b5 1))) (le1
  (to_rep1 (select b5 1)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select b5 2))) (le1
  (to_rep1 (select b5 2)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select b5 3))) (le1
  (to_rep1 (select b5 3)) fliteral1)))

;; H
  (assert
  (and (le1 (neg1 fliteral1) (to_rep1 (select b5 4))) (le1
  (to_rep1 (select b5 4)) fliteral1)))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 4))
  (and (le1 (neg1 fliteral1) (to_rep1 (select b5 i))) (le1
  (to_rep1 (select b5 i)) fliteral1)))))

;; H
  (assert
  (and (= o27 (add1 RNE2 (to_rep1 (select c5 1)) (to_rep1 (select b5 1))))
  (tqtisFinite1 (add1 RNE2 (to_rep1 (select c5 1)) (to_rep1 (select b5 1))))))

;; H
  (assert (= (to_rep1 o28) o27))

;; H
  (assert (= o29 (store d1 1 o28)))

;; H
  (assert (= result15 d1))

;; H
  (assert (= d2 o29))

;; H
  (assert
  (and (= o30 (add1 RNE2 (to_rep1 (select c5 2)) (to_rep1 (select b5 2))))
  (tqtisFinite1 (add1 RNE2 (to_rep1 (select c5 2)) (to_rep1 (select b5 2))))))

;; H
  (assert (= (to_rep1 o31) o30))

;; H
  (assert (= o32 (store d2 2 o31)))

;; H
  (assert (= result16 d2))

;; H
  (assert (= d3 o32))

;; H
  (assert
  (and (= o33 (add1 RNE2 (to_rep1 (select c5 3)) (to_rep1 (select b5 3))))
  (tqtisFinite1 (add1 RNE2 (to_rep1 (select c5 3)) (to_rep1 (select b5 3))))))

;; H
  (assert (= (to_rep1 o34) o33))

;; H
  (assert (= o35 (store d3 3 o34)))

;; H
  (assert (= result17 (mk_map__ref1 d3)))

;; H
  (assert (= d4 o35))

;; H
  (assert
  (and (= o36 (add1 RNE2 (to_rep1 (select c5 4)) (to_rep1 (select b5 4))))
  (tqtisFinite1 (add1 RNE2 (to_rep1 (select c5 4)) (to_rep1 (select b5 4))))))

;; H
  (assert (= (to_rep1 o37) o36))

;; H
  (assert (= o38 (store d4 4 o37)))

;; H
  (assert (= result18 (mk_map__ref1 d4)))

;; H
  (assert (= d5 o38))

;; H
  (assert
  (and (le1 (neg1 fliteral6) (to_rep1 (select d5 1))) (le1
  (to_rep1 (select d5 1)) fliteral6)))

;; H
  (assert
  (and (le1 (neg1 fliteral6) (to_rep1 (select d5 2))) (le1
  (to_rep1 (select d5 2)) fliteral6)))

(assert
;; WP_parameter_def
 ;; File "floats.ads", line 6, characters 0-0
  (not (le1 (neg1 fliteral6) (to_rep1 (select d5 3)))))
(check-sat)
