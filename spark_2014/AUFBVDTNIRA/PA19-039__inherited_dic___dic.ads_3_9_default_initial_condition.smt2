;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__dic__parent__b Bool)(rec__ext__ us_private)))))
(define-fun us_split_fields_B__projection ((a us_split_fields)) Bool 
  (rec__dic__parent__b a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (rec__dic__parent__b (us_split_fields1 a)) 
                   (rec__dic__parent__b (us_split_fields1 b))) true false))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dic__parent__b__first__bit () Int)

(declare-fun dic__parent__b__last__bit () Int)

(declare-fun dic__parent__b__position () Int)

;; dic__parent__b__first__bit_axiom
  (assert (<= 0 dic__parent__b__first__bit))

;; dic__parent__b__last__bit_axiom
  (assert (< dic__parent__b__first__bit dic__parent__b__last__bit))

;; dic__parent__b__position_axiom
  (assert (<= 0 dic__parent__b__position))

(declare-fun dummy () us_rep)

(declare-datatypes ()
((parent__ref (mk_parent__ref (parent__content us_rep)))))
(define-fun parent__ref___projection ((a parent__ref)) us_rep (parent__content
                                                              a))

(declare-fun is_ok (us_rep) Bool)

(declare-fun is_ok__function_guard (Bool us_rep) Bool)

(declare-fun is_ok1 (Int us_rep) Bool)

(declare-fun is_ok__function_guard1 (Bool Int us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (and
                                         (and
                                         (= (attr__tag temp___expr_136) 
                                         us_tag)
                                         (= (rec__dic__parent__b
                                            (us_split_fields1
                                            temp___expr_136)) (of_int 1)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_137 true))
                                         (= (is_ok temp___expr_136) true))))

(declare-fun us_tag1 () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun dic__parent__b__first__bit1 () Int)

(declare-fun dic__parent__b__last__bit1 () Int)

(declare-fun dic__parent__b__position1 () Int)

;; dic__parent__b__first__bit_axiom
  (assert (<= 0 dic__parent__b__first__bit1))

;; dic__parent__b__last__bit_axiom
  (assert (< dic__parent__b__first__bit1 dic__parent__b__last__bit1))

;; dic__parent__b__position_axiom
  (assert (<= 0 dic__parent__b__position1))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((child__ref (mk_child__ref (child__content us_rep)))))
(define-fun child__ref___projection ((a child__ref)) us_rep (child__content
                                                            a))

(declare-fun is_ok__2 (us_rep) Bool)

(declare-fun is_ok__2__function_guard (Bool us_rep) Bool)

(declare-fun is_ok__21 (Int us_rep) Bool)

(declare-fun is_ok__2__function_guard1 (Bool Int us_rep) Bool)

;; is_ok__post_axiom
  (assert true)

;; is_ok__post__dispatch_axiom
  (assert true)

;; dic__parent__compat_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (to_int1 (is_ok obj)) (to_int1 (is_ok1 us_tag obj))) :pattern (
  (is_ok1 us_tag obj)) )))

;; dic__child__compat_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (to_int1 (is_ok__2 obj)) (to_int1 (is_ok1 us_tag1 obj))) :pattern (
  (is_ok1 us_tag1 obj)) )))

;; is_ok__def_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (= (is_ok obj) true)
     (= (rec__dic__parent__b (us_split_fields1 obj)) true)) :pattern (
  (is_ok obj)) )))

(define-fun default_initial_assumption1 ((temp___expr_143 us_rep)
  (temp___skip_top_level_144 Bool)) Bool (and
                                         (and
                                         (= (attr__tag temp___expr_143) 
                                         us_tag1)
                                         (= (rec__dic__parent__b
                                            (us_split_fields1
                                            temp___expr_143)) (of_int 1)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_144 true))
                                         (= (is_ok__2 temp___expr_143) true))))

;; is_ok__2__post_axiom
  (assert true)

;; is_ok__2__post__dispatch_axiom
  (assert true)

;; dic__child__compat_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (to_int1 (is_ok__2 obj)) (to_int1 (is_ok__21 us_tag1 obj))) :pattern (
  (is_ok__21 us_tag1 obj)) )))

;; is_ok__2__def_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (= (is_ok__2 obj) true)
     (not (= (rec__dic__parent__b (us_split_fields1 obj)) true))) :pattern (
  (is_ok__2 obj)) )))

(declare-fun temp___159 () Bool)

(declare-fun temp___1591 () us_private)

(declare-fun temp___1592 () Int)

;; H
  (assert (and (= temp___1592 us_tag) (= temp___159 (of_int 1))))

(assert
;; WP_parameter_def
 ;; File "dic.ads", line 27, characters 0-0
  (not
  (= (is_ok
     (mk___rep (mk___split_fields temp___159 temp___1591) temp___1592)) true)))
(check-sat)
