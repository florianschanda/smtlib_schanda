;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes () ((mode (RNE2) (RNA2) (RTP2) (RTN2) (RTZ2))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE2) (= m RNA2)))

(declare-fun zeroF () t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-fun max_int () Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN2 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP2 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN2 (- x)) (- (round RTP2 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP2 (- x)) (- (round RTN2 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN2 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP2 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RTZ2 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0))))) 
                                                (ite (is-RNA2 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN2 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ2 x) (roundToIntegral RTP2 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ2 x) (roundToIntegral RTN2 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP2 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP2 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP2 x)) (to_real (- 1 (to_int (- 1.0 
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP2 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN2 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN2 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN2 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN2 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE2 x (roundToIntegral RTN2 x))
  (sub RNE2 (roundToIntegral RTP2 x) x))
  (= (roundToIntegral RNA2 x) (roundToIntegral RTN2 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE2 (roundToIntegral RTP2 x) x)
  (sub RNE2 x (roundToIntegral RTN2 x)))
  (= (roundToIntegral RNA2 x) (roundToIntegral RTP2 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE2 x (roundToIntegral RTN2 x))
  (sub RNE2 (roundToIntegral RTP2 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA2 x) (roundToIntegral RTN2 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE2 (roundToIntegral RTP2 x) x)
  (sub RNE2 x (roundToIntegral RTN2 x)))
  (=> (is_positive x) (= (roundToIntegral RNA2 x) (roundToIntegral RTP2 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE2 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0)) 
     (round RNE2 x))
     (<= (round RNE2 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE2 x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem (t t) t)

(declare-fun fliteral () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA2 1)))

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq1 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) t)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) t)

(declare-fun of_rep (t) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (tqtisFinite (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                              (of_rep x))) )))

(declare-sort num_delimiters_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (num_delimiters_range num_delimiters_range) Bool)

(declare-fun dummy1 () num_delimiters_range)

(declare-datatypes ()
((num_delimiters_range__ref
 (mk_num_delimiters_range__ref
 (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range 
  (num_delimiters_range__content a))

(declare-fun to_rep1 (num_delimiters_range) Int)

(declare-fun of_rep1 (Int) num_delimiters_range)

;; inversion_axiom
  (assert
  (forall ((x num_delimiters_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x num_delimiters_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort function_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (function_range function_range) Bool)

(declare-fun dummy2 () function_range)

(declare-datatypes ()
((function_range__ref
 (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range 
  (function_range__content a))

(declare-fun to_rep2 (function_range) Int)

(declare-fun of_rep2 (Int) function_range)

;; inversion_axiom
  (assert
  (forall ((x function_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x function_range)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__step_function__delimiter_entry__delimiter function_range)(rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields)) function_range 
  (rec__step_function__delimiter_entry__delimiter a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__step_function__delimiter_entry__delimiter
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__step_function__delimiter_entry__delimiter
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__step_function__delimiter_entry__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__step_function__delimiter_entry__value
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun step_function__delimiter_entry__delimiter__first__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__last__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__position () Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-fun step_function__delimiter_entry__value__first__bit () Int)

(declare-fun step_function__delimiter_entry__value__last__bit () Int)

(declare-fun step_function__delimiter_entry__value__position () Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((delimiter_entry__ref
 (mk_delimiter_entry__ref (delimiter_entry__content us_rep)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep 
  (delimiter_entry__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq4 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq4 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun dummy4 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range)(rec__step_function__step_function_t__step (Array Int us_rep))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields2)) num_delimiters_range 
  (rec__step_function__step_function_t__number_of_delimiters a))

(define-fun us_split_fields_Step__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__step_function__step_function_t__step a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__step_function__step_function_t__number_of_delimiters
                                                   (us_split_fields3 b))))
                         (= (bool_eq5
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 a)) 0 10
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 b)) 0 10) true))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun step_function__step_function_t__number_of_delimiters__first__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__last__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__position () Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit 
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-fun step_function__step_function_t__step__first__bit () Int)

(declare-fun step_function__step_function_t__step__last__bit () Int)

(declare-fun step_function__step_function_t__step__position () Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((step_function_t__ref
 (mk_step_function_t__ref (step_function_t__content us_rep1)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep1 
  (step_function_t__content a))

(declare-fun min1 (t t) t)

(declare-fun min__function_guard (t t t) Bool)

(declare-fun fliteral1 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral1)
  (= (tqtreal fliteral1) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_51)))

;; min__post_axiom
  (assert
  (forall ((x1 t) (x2 t))
  (! (=>
     (and (dynamic_invariant x1 true true true) (dynamic_invariant x2 true
     true true))
     (let ((result (min1 x1 x2)))
     (=> (min__function_guard result x1 x2)
     (and (ite (le x1 x2) (eq result x1) (eq result x2)) (dynamic_invariant
     result true false true))))) :pattern ((min1 x1 x2)) )))

(declare-fun is_valid (us_rep1) Bool)

(declare-fun is_valid__function_guard (Bool us_rep1) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((sfun us_rep1))
  (! (=> (is_valid__function_guard (is_valid sfun) sfun)
     (= (= (is_valid sfun) true)
     (and
     (= (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___182 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun))))
        (select temp___182 0))))) 0)
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields3 sfun))) 1)))
     (< (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___184 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun))))
        (select temp___184 i))))) (to_rep2
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields1
                                  (let ((temp___183 (rec__step_function__step_function_t__step
                                                    (us_split_fields3 sfun))))
                                  (select temp___183 (+ i 1)))))))))))) :pattern (
  (is_valid sfun)) )))

(declare-fun has_same_delimiters (us_rep1 us_rep1) Bool)

(declare-fun has_same_delimiters__function_guard (Bool us_rep1 us_rep1) Bool)

;; has_same_delimiters__post_axiom
  (assert true)

;; has_same_delimiters__def_axiom
  (assert
  (forall ((sfun1 us_rep1) (sfun2 us_rep1))
  (! (=> (has_same_delimiters__function_guard
     (has_same_delimiters sfun1 sfun2) sfun1 sfun2)
     (= (= (has_same_delimiters sfun1 sfun2) true)
     (and
     (= (to_rep1
        (rec__step_function__step_function_t__number_of_delimiters
        (us_split_fields3 sfun1))) (to_rep1
                                   (rec__step_function__step_function_t__number_of_delimiters
                                   (us_split_fields3 sfun2))))
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun1)))))
     (= (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___191 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun1))))
        (select temp___191 i))))) (to_rep2
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields1
                                  (let ((temp___192 (rec__step_function__step_function_t__step
                                                    (us_split_fields3 sfun2))))
                                  (select temp___192 i))))))))))) :pattern (
  (has_same_delimiters sfun1 sfun2)) )))

(declare-fun get_value (us_rep1 Int) t)

(declare-fun get_value__function_guard (t us_rep1 Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_142)))

;; get_value__post_axiom
  (assert
  (forall ((sfun us_rep1))
  (forall ((x Int))
  (! (and (is_valid__function_guard (is_valid sfun) sfun)
     (=> (and (dynamic_invariant1 x true true true) (= (is_valid sfun) true))
     (let ((result (get_value sfun x)))
     (=> (get_value__function_guard result sfun x)
     (and
     (or
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields3 sfun))) 1)))
     (and
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___201 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___201 i))))) x)
     (< x (to_rep2
          (rec__step_function__delimiter_entry__delimiter
          (us_split_fields1
          (let ((temp___202 (rec__step_function__step_function_t__step
                            (us_split_fields3 sfun))))
          (select temp___202 (+ i 1))))))))
     (eq result
     (to_rep
     (rec__step_function__delimiter_entry__value
     (us_split_fields1
     (let ((temp___203 (rec__step_function__step_function_t__step
                       (us_split_fields3 sfun))))
     (select temp___203 i)))))))))
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___204 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___204 (to_rep1
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields3 sfun)))))))) x)
     (eq result
     (to_rep
     (rec__step_function__delimiter_entry__value
     (us_split_fields1
     (let ((temp___205 (rec__step_function__step_function_t__step
                       (us_split_fields3 sfun))))
     (select temp___205 (to_rep1
                        (rec__step_function__step_function_t__number_of_delimiters
                        (us_split_fields3 sfun)))))))))))
     (dynamic_invariant result true false true)))))) :pattern ((get_value
                                                               sfun x)) ))))

(declare-fun minimum_until_point (us_rep1 Int) t)

(declare-fun minimum_until_point__function_guard (t us_rep1 Int) Bool)

;; minimum_until_point__post_axiom
  (assert
  (forall ((sfun us_rep1))
  (forall ((x Int))
  (! (and (is_valid__function_guard (is_valid sfun) sfun)
     (=> (and (dynamic_invariant1 x true true true) (= (is_valid sfun) true))
     (let ((result (minimum_until_point sfun x)))
     (=> (minimum_until_point__function_guard result sfun x)
     (and
     (and
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun)))))
     (=>
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___215 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___215 i))))) x)
     (le result
     (to_rep
     (rec__step_function__delimiter_entry__value
     (us_split_fields1
     (let ((temp___214 (rec__step_function__step_function_t__step
                       (us_split_fields3 sfun))))
     (select temp___214 i)))))))))
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun)))))
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___216 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___216 i))))) x)
     (eq result
     (to_rep
     (rec__step_function__delimiter_entry__value
     (us_split_fields1
     (let ((temp___217 (rec__step_function__step_function_t__step
                       (us_split_fields3 sfun))))
     (select temp___217 i)))))))))) (dynamic_invariant result true false
     true)))))) :pattern ((minimum_until_point sfun x)) ))))

(declare-sort t1b 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (t1b t1b) Bool)

(declare-fun dummy6 () t1b)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t3b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (t3b t3b) Bool)

(declare-fun dummy7 () t3b)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content t3b)))))
(define-fun t3b__ref___projection ((a t3b__ref)) t3b (t3b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t5b 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (t5b t5b) Bool)

(declare-fun dummy8 () t5b)

(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a t5b__ref)) t5b (t5b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort t7b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (t7b t7b) Bool)

(declare-fun dummy9 () t7b)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content t7b)))))
(define-fun t7b__ref___projection ((a t7b__ref)) t7b (t7b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun temp___284 (us_rep us_rep us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___286 us_rep) (temp___287 us_rep) (temp___288 us_rep)
  (temp___289 us_rep))
  (let ((temp___285 (temp___284 temp___286 temp___287 temp___288 temp___289)))
  (forall ((temp___290 Int))
  (ite (= temp___290 0) (= (select temp___285 temp___290) temp___286)
  (ite (= temp___290 1) (= (select temp___285 temp___290) temp___287)
  (ite (= temp___290 2) (= (select temp___285 temp___290) temp___288)
  (= (select temp___285 temp___290) temp___289))))))))

(declare-fun temp___291 (us_rep us_rep us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___293 us_rep) (temp___294 us_rep) (temp___295 us_rep)
  (temp___296 us_rep))
  (let ((temp___292 (temp___291 temp___293 temp___294 temp___295 temp___296)))
  (forall ((temp___297 Int))
  (ite (= temp___297 0) (= (select temp___292 temp___297) temp___293)
  (ite (= temp___297 1) (= (select temp___292 temp___297) temp___294)
  (ite (= temp___297 2) (= (select temp___292 temp___297) temp___295)
  (= (select temp___292 temp___297) temp___296))))))))

(declare-fun temp___298 (us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___300 us_rep) (temp___301 us_rep) (temp___302 us_rep)
  (temp___303 us_rep) (temp___304 us_rep) (temp___305 us_rep)
  (temp___306 us_rep))
  (let ((temp___299 (temp___298 temp___300 temp___301 temp___302 temp___303
                    temp___304 temp___305 temp___306)))
  (forall ((temp___307 Int))
  (ite (= temp___307 0) (= (select temp___299 temp___307) temp___300)
  (ite (= temp___307 1) (= (select temp___299 temp___307) temp___301)
  (ite (= temp___307 2) (= (select temp___299 temp___307) temp___302)
  (ite (= temp___307 3) (= (select temp___299 temp___307) temp___303)
  (ite (= temp___307 4) (= (select temp___299 temp___307) temp___304)
  (ite (= temp___307 5) (= (select temp___299 temp___307) temp___305)
  (= (select temp___299 temp___307) temp___306)))))))))))

(declare-fun temp___308 (us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___310 us_rep) (temp___311 us_rep) (temp___312 us_rep)
  (temp___313 us_rep) (temp___314 us_rep) (temp___315 us_rep)
  (temp___316 us_rep))
  (let ((temp___309 (temp___308 temp___310 temp___311 temp___312 temp___313
                    temp___314 temp___315 temp___316)))
  (forall ((temp___317 Int))
  (ite (= temp___317 0) (= (select temp___309 temp___317) temp___310)
  (ite (= temp___317 1) (= (select temp___309 temp___317) temp___311)
  (ite (= temp___317 2) (= (select temp___309 temp___317) temp___312)
  (ite (= temp___317 3) (= (select temp___309 temp___317) temp___313)
  (ite (= temp___317 4) (= (select temp___309 temp___317) temp___314)
  (ite (= temp___317 5) (= (select temp___309 temp___317) temp___315)
  (= (select temp___309 temp___317) temp___316)))))))))))

(define-fun dynamic_invariant2 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10)) (in_range2 temp___expr_136)))

(declare-fun fliteral2 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral2) (= (tqtreal fliteral2) (/ 0.0 10.0))))

(declare-fun fliteral3 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral3) (= (tqtreal fliteral3) 5.0)))

(declare-fun fliteral4 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral4) (= (tqtreal fliteral4) 2.0)))

(declare-fun fliteral5 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral5) (= (tqtreal fliteral5) 3.0)))

(declare-fun fliteral6 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral6) (= (tqtreal fliteral6) 9.0)))

(declare-fun fliteral7 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral7) (= (tqtreal fliteral7) 7.0)))

(declare-fun fliteral8 () t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral8)
  (= (tqtreal fliteral8) (/ 500000000000000000000000.0 1000000000000000000000000.0))))

(declare-fun fliteral9 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral9) (= (tqtreal fliteral9) 4.0)))

(declare-fun fliteral10 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral10) (= (tqtreal fliteral10) 6.0)))

(declare-fun fliteral11 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral11) (= (tqtreal fliteral11) 8.0)))

(declare-fun fliteral12 () t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral12) (= (tqtreal fliteral12) 10.0)))

(declare-fun sfun1__split_fields () num_delimiters_range)

(declare-fun sfun1__split_fields1 () (Array Int us_rep))

(declare-fun sfun2__split_fields () num_delimiters_range)

(declare-fun sfun2__split_fields1 () (Array Int us_rep))

(declare-fun sfun3__split_fields () num_delimiters_range)

(declare-fun sfun3__split_fields1 () (Array Int us_rep))

(declare-fun sfun4__split_fields () num_delimiters_range)

(declare-fun sfun4__split_fields1 () (Array Int us_rep))

(declare-fun i () Int)

(declare-fun o () float)

(declare-fun o1 () function_range)

(declare-fun o2 () function_range)

(declare-fun o3 () float)

(declare-fun o4 () float)

(declare-fun o5 () function_range)

(declare-fun o6 () function_range)

(declare-fun o7 () float)

(declare-fun o8 () float)

(declare-fun o9 () function_range)

(declare-fun o10 () function_range)

(declare-fun o11 () float)

(declare-fun o12 () float)

(declare-fun o13 () function_range)

(declare-fun o14 () function_range)

(declare-fun o15 () float)

(declare-fun o16 () function_range)

(declare-fun o17 () float)

(declare-fun o18 () function_range)

(declare-fun o19 () float)

(declare-fun o20 () function_range)

(declare-fun o21 () float)

(declare-fun o22 () us_rep)

(declare-fun o23 () (Array Int us_rep))

(declare-fun o24 () num_delimiters_range)

(declare-fun o25 () us_split_fields2)

(declare-fun step_function_test__sfun1__assume () us_rep1)

(declare-fun o26 () float)

(declare-fun o27 () function_range)

(declare-fun o28 () us_split_fields)

(declare-fun o29 () float)

(declare-fun o30 () function_range)

(declare-fun o31 () us_split_fields)

(declare-fun o32 () float)

(declare-fun o33 () function_range)

(declare-fun o34 () us_split_fields)

(declare-fun o35 () float)

(declare-fun o36 () function_range)

(declare-fun o37 () us_split_fields)

(declare-fun o38 () us_rep)

(declare-fun o39 () us_rep)

(declare-fun o40 () us_rep)

(declare-fun o41 () us_rep)

(declare-fun o42 () (Array Int us_rep))

(declare-fun o43 () num_delimiters_range)

(declare-fun o44 () us_split_fields2)

(declare-fun step_function_test__sfun2__assume () us_rep1)

(declare-fun o45 () float)

(declare-fun o46 () function_range)

(declare-fun o47 () us_split_fields)

(declare-fun o48 () float)

(declare-fun o49 () function_range)

(declare-fun o50 () us_split_fields)

(declare-fun o51 () float)

(declare-fun o52 () function_range)

(declare-fun o53 () us_split_fields)

(declare-fun o54 () float)

(declare-fun o55 () function_range)

(declare-fun o56 () us_split_fields)

(declare-fun o57 () float)

(declare-fun o58 () function_range)

(declare-fun o59 () us_split_fields)

(declare-fun o60 () float)

(declare-fun o61 () function_range)

(declare-fun o62 () us_split_fields)

(declare-fun o63 () float)

(declare-fun o64 () function_range)

(declare-fun o65 () us_split_fields)

(declare-fun o66 () us_rep)

(declare-fun o67 () us_rep)

(declare-fun o68 () us_rep)

(declare-fun o69 () us_rep)

(declare-fun o70 () us_rep)

(declare-fun o71 () us_rep)

(declare-fun o72 () us_rep)

(declare-fun o73 () (Array Int us_rep))

(declare-fun o74 () num_delimiters_range)

(declare-fun o75 () us_split_fields2)

(declare-fun step_function_test__sfun3__assume () us_rep1)

(declare-fun o76 () float)

(declare-fun o77 () function_range)

(declare-fun o78 () us_split_fields)

(declare-fun o79 () float)

(declare-fun o80 () function_range)

(declare-fun o81 () us_split_fields)

(declare-fun o82 () float)

(declare-fun o83 () function_range)

(declare-fun o84 () us_split_fields)

(declare-fun o85 () float)

(declare-fun o86 () function_range)

(declare-fun o87 () us_split_fields)

(declare-fun o88 () float)

(declare-fun o89 () function_range)

(declare-fun o90 () us_split_fields)

(declare-fun o91 () float)

(declare-fun o92 () function_range)

(declare-fun o93 () us_split_fields)

(declare-fun o94 () float)

(declare-fun o95 () function_range)

(declare-fun o96 () us_split_fields)

(declare-fun o97 () us_rep)

(declare-fun o98 () us_rep)

(declare-fun o99 () us_rep)

(declare-fun o100 () us_rep)

(declare-fun o101 () us_rep)

(declare-fun o102 () us_rep)

(declare-fun o103 () us_rep)

(declare-fun o104 () (Array Int us_rep))

(declare-fun o105 () num_delimiters_range)

(declare-fun o106 () us_split_fields2)

(declare-fun step_function_test__sfun4__assume () us_rep1)

(declare-fun result () us_split_fields__ref1)

(declare-fun sfun1__split_fields2 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun sfun2__split_fields2 () us_split_fields2)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun sfun3__split_fields2 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun sfun4__split_fields2 () us_split_fields2)

(declare-fun sfun_merge__split_fields () us_split_fields2)

(declare-fun result4 () int__ref)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun i3 () int__ref)

(declare-fun i4 () Int)

(declare-fun i5 () int__ref)

(declare-fun i6 () Int)

;; H
  (assert (= (to_rep o12) fliteral2))

;; H
  (assert (= (to_rep2 o13) 0))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert (= o16 o14))

;; H
  (assert (= o17 o15))

;; H
  (assert (= (to_rep o8) fliteral3))

;; H
  (assert (= (to_rep2 o9) 5))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= o18 o10))

;; H
  (assert (= o19 o11))

;; H
  (assert (= (to_rep o4) fliteral4))

;; H
  (assert (= (to_rep2 o5) 3))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= o20 o6))

;; H
  (assert (= o21 o7))

;; H
  (assert (= (to_rep o) fliteral5))

;; H
  (assert (= (to_rep2 o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o22 (mk___rep (mk___split_fields o2 o3))))

;; H
  (assert
  (= o23 (temp___284 o22 (mk___rep (mk___split_fields o20 o21))
         (mk___rep (mk___split_fields o18 o19))
         (mk___rep (mk___split_fields o16 o17)))))

;; H
  (assert (= (to_rep1 o24) 2))

;; H
  (assert (= o25 (mk___split_fields1 o24 o23)))

;; H
  (assert (= step_function_test__sfun1__assume (mk___rep1 o25)))

;; H
  (assert
  (= result (mk___split_fields__ref1
            (mk___split_fields1 sfun1__split_fields sfun1__split_fields1))))

;; H
  (assert
  (= sfun1__split_fields2 (us_split_fields3
                          step_function_test__sfun1__assume)))

;; H
  (assert (= (to_rep o35) fliteral2))

;; H
  (assert (= (to_rep2 o36) 0))

;; H
  (assert (= o37 (mk___split_fields o36 o35)))

;; H
  (assert (= o38 (mk___rep o37)))

;; H
  (assert (= (to_rep o32) fliteral5))

;; H
  (assert (= (to_rep2 o33) 5))

;; H
  (assert (= o34 (mk___split_fields o33 o32)))

;; H
  (assert (= o39 (mk___rep o34)))

;; H
  (assert (= (to_rep o29) fliteral))

;; H
  (assert (= (to_rep2 o30) 3))

;; H
  (assert (= o31 (mk___split_fields o30 o29)))

;; H
  (assert (= o40 (mk___rep o31)))

;; H
  (assert (= (to_rep o26) fliteral))

;; H
  (assert (= (to_rep2 o27) 0))

;; H
  (assert (= o28 (mk___split_fields o27 o26)))

;; H
  (assert (= o41 (mk___rep o28)))

;; H
  (assert (= o42 (temp___291 o41 o40 o39 o38)))

;; H
  (assert (= (to_rep1 o43) 2))

;; H
  (assert (= o44 (mk___split_fields1 o43 o42)))

;; H
  (assert (= step_function_test__sfun2__assume (mk___rep1 o44)))

;; H
  (assert
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1 sfun2__split_fields sfun2__split_fields1))))

;; H
  (assert
  (= sfun2__split_fields2 (us_split_fields3
                          step_function_test__sfun2__assume)))

;; H
  (assert (= (to_rep o63) fliteral2))

;; H
  (assert (= (to_rep2 o64) 0))

;; H
  (assert (= o65 (mk___split_fields o64 o63)))

;; H
  (assert (= o66 (mk___rep o65)))

;; H
  (assert (= (to_rep o60) fliteral6))

;; H
  (assert (= (to_rep2 o61) 9))

;; H
  (assert (= o62 (mk___split_fields o61 o60)))

;; H
  (assert (= o67 (mk___rep o62)))

;; H
  (assert (= (to_rep o57) fliteral7))

;; H
  (assert (= (to_rep2 o58) 7))

;; H
  (assert (= o59 (mk___split_fields o58 o57)))

;; H
  (assert (= o68 (mk___rep o59)))

;; H
  (assert (= (to_rep o54) fliteral3))

;; H
  (assert (= (to_rep2 o55) 5))

;; H
  (assert (= o56 (mk___split_fields o55 o54)))

;; H
  (assert (= o69 (mk___rep o56)))

;; H
  (assert (= (to_rep o51) fliteral5))

;; H
  (assert (= (to_rep2 o52) 3))

;; H
  (assert (= o53 (mk___split_fields o52 o51)))

;; H
  (assert (= o70 (mk___rep o53)))

;; H
  (assert (= (to_rep o48) fliteral))

;; H
  (assert (= (to_rep2 o49) 1))

;; H
  (assert (= o50 (mk___split_fields o49 o48)))

;; H
  (assert (= o71 (mk___rep o50)))

;; H
  (assert (= (to_rep o45) fliteral))

;; H
  (assert (= (to_rep2 o46) 0))

;; H
  (assert (= o47 (mk___split_fields o46 o45)))

;; H
  (assert (= o72 (mk___rep o47)))

;; H
  (assert (= o73 (temp___298 o72 o71 o70 o69 o68 o67 o66)))

;; H
  (assert (= (to_rep1 o74) 5))

;; H
  (assert (= o75 (mk___split_fields1 o74 o73)))

;; H
  (assert (= step_function_test__sfun3__assume (mk___rep1 o75)))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 sfun3__split_fields sfun3__split_fields1))))

;; H
  (assert
  (= sfun3__split_fields2 (us_split_fields3
                          step_function_test__sfun3__assume)))

;; H
  (assert (= (to_rep o94) fliteral2))

;; H
  (assert (= (to_rep2 o95) 0))

;; H
  (assert (= o96 (mk___split_fields o95 o94)))

;; H
  (assert (= o97 (mk___rep o96)))

;; H
  (assert (= (to_rep o91) fliteral8))

;; H
  (assert (= (to_rep2 o92) 10))

;; H
  (assert (= o93 (mk___split_fields o92 o91)))

;; H
  (assert (= o98 (mk___rep o93)))

;; H
  (assert (= (to_rep o88) fliteral4))

;; H
  (assert (= (to_rep2 o89) 8))

;; H
  (assert (= o90 (mk___split_fields o89 o88)))

;; H
  (assert (= o99 (mk___rep o90)))

;; H
  (assert (= (to_rep o85) fliteral9))

;; H
  (assert (= (to_rep2 o86) 6))

;; H
  (assert (= o87 (mk___split_fields o86 o85)))

;; H
  (assert (= o100 (mk___rep o87)))

;; H
  (assert (= (to_rep o82) fliteral10))

;; H
  (assert (= (to_rep2 o83) 4))

;; H
  (assert (= o84 (mk___split_fields o83 o82)))

;; H
  (assert (= o101 (mk___rep o84)))

;; H
  (assert (= (to_rep o79) fliteral11))

;; H
  (assert (= (to_rep2 o80) 2))

;; H
  (assert (= o81 (mk___split_fields o80 o79)))

;; H
  (assert (= o102 (mk___rep o81)))

;; H
  (assert (= (to_rep o76) fliteral12))

;; H
  (assert (= (to_rep2 o77) 0))

;; H
  (assert (= o78 (mk___split_fields o77 o76)))

;; H
  (assert (= o103 (mk___rep o78)))

;; H
  (assert (= o104 (temp___308 o103 o102 o101 o100 o99 o98 o97)))

;; H
  (assert (= (to_rep1 o105) 5))

;; H
  (assert (= o106 (mk___split_fields1 o105 o104)))

;; H
  (assert (= step_function_test__sfun4__assume (mk___rep1 o106)))

;; H
  (assert
  (= result3 (mk___split_fields__ref1
             (mk___split_fields1 sfun4__split_fields sfun4__split_fields1))))

;; H
  (assert
  (= sfun4__split_fields2 (us_split_fields3
                          step_function_test__sfun4__assume)))

;; H
  (assert (is_valid__function_guard
  (is_valid (mk___rep1 sfun1__split_fields2))
  (mk___rep1 sfun1__split_fields2)))

;; H
  (assert (= (is_valid (mk___rep1 sfun1__split_fields2)) true))

;; H
  (assert (is_valid__function_guard
  (is_valid (mk___rep1 sfun2__split_fields2))
  (mk___rep1 sfun2__split_fields2)))

;; H
  (assert (= (is_valid (mk___rep1 sfun2__split_fields2)) true))

;; H
  (assert (is_valid__function_guard
  (is_valid (mk___rep1 sfun3__split_fields2))
  (mk___rep1 sfun3__split_fields2)))

;; H
  (assert (= (is_valid (mk___rep1 sfun3__split_fields2)) true))

;; H
  (assert (is_valid__function_guard
  (is_valid (mk___rep1 sfun4__split_fields2))
  (mk___rep1 sfun4__split_fields2)))

;; H
  (assert (= (is_valid (mk___rep1 sfun4__split_fields2)) true))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 0)
  (mk___rep1 sfun1__split_fields2) 0))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 0) fliteral5))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 1)
  (mk___rep1 sfun1__split_fields2) 1))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 1) fliteral5))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 3)
  (mk___rep1 sfun1__split_fields2) 3))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 3) fliteral4))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 4)
  (mk___rep1 sfun1__split_fields2) 4))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 4) fliteral4))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 5)
  (mk___rep1 sfun1__split_fields2) 5))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 5) fliteral3))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun1__split_fields2) 2147483647)
  (mk___rep1 sfun1__split_fields2) 2147483647))

;; H
  (assert (eq (get_value (mk___rep1 sfun1__split_fields2) 2147483647)
  fliteral3))

;; H
  (assert (has_same_delimiters__function_guard
  (has_same_delimiters (mk___rep1 sfun1__split_fields2)
  (mk___rep1 sfun2__split_fields2)) (mk___rep1 sfun1__split_fields2)
  (mk___rep1 sfun2__split_fields2)))

;; H
  (assert
  (= (has_same_delimiters (mk___rep1 sfun1__split_fields2)
     (mk___rep1 sfun2__split_fields2)) true))

;; H
  (assert (is_valid__function_guard
  (is_valid (mk___rep1 sfun_merge__split_fields))
  (mk___rep1 sfun_merge__split_fields)))

;; H
  (assert
  (forall ((i7 Int)) (get_value__function_guard
  (get_value (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))))

;; H
  (assert
  (forall ((i7 Int)) (get_value__function_guard
  (get_value (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))))

;; H
  (assert
  (forall ((i7 Int)) (get_value__function_guard
  (get_value (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))))

;; H
  (assert
  (forall ((i7 Int)) (get_value__function_guard
  (get_value (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))))

;; H
  (assert
  (forall ((i7 Int)) (min__function_guard
  (min1
  (get_value (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (get_value (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7))))))
  (get_value (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (get_value (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7))))))))

;; H
  (assert
  (and
  (and
  (and (= (is_valid (mk___rep1 sfun_merge__split_fields)) true)
  (forall ((i7 Int))
  (=>
  (and (<= 0 i7)
  (<= i7 (to_rep1
         (rec__step_function__step_function_t__number_of_delimiters
         sfun3__split_fields2))))
  (exists ((j Int))
  (and
  (and (<= 0 j)
  (<= j (to_rep1
        (rec__step_function__step_function_t__number_of_delimiters
        sfun_merge__split_fields))))
  (= (to_rep2
     (rec__step_function__delimiter_entry__delimiter
     (us_split_fields1
     (select (rec__step_function__step_function_t__step
             sfun_merge__split_fields) j)))) (to_rep2
                                             (rec__step_function__delimiter_entry__delimiter
                                             (us_split_fields1
                                             (select (rec__step_function__step_function_t__step
                                                     sfun3__split_fields2) i7))))))))))
  (forall ((i7 Int))
  (=>
  (and (<= 0 i7)
  (<= i7 (to_rep1
         (rec__step_function__step_function_t__number_of_delimiters
         sfun4__split_fields2))))
  (exists ((j Int))
  (and
  (and (<= 0 j)
  (<= j (to_rep1
        (rec__step_function__step_function_t__number_of_delimiters
        sfun_merge__split_fields))))
  (= (to_rep2
     (rec__step_function__delimiter_entry__delimiter
     (us_split_fields1
     (select (rec__step_function__step_function_t__step
             sfun_merge__split_fields) j)))) (to_rep2
                                             (rec__step_function__delimiter_entry__delimiter
                                             (us_split_fields1
                                             (select (rec__step_function__step_function_t__step
                                                     sfun4__split_fields2) i7))))))))))
  (forall ((i7 Int))
  (=>
  (and (<= 0 i7)
  (<= i7 (to_rep1
         (rec__step_function__step_function_t__number_of_delimiters
         sfun_merge__split_fields))))
  (eq
  (to_rep
  (rec__step_function__delimiter_entry__value
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7))))
  (min1
  (get_value (mk___rep1 sfun3__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))
  (get_value (mk___rep1 sfun4__split_fields2)
  (to_rep2
  (rec__step_function__delimiter_entry__delimiter
  (us_split_fields1
  (select (rec__step_function__step_function_t__step
          sfun_merge__split_fields) i7)))))))))))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun_merge__split_fields) i2)
  (mk___rep1 sfun_merge__split_fields) i2))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun3__split_fields2) i2)
  (mk___rep1 sfun3__split_fields2) i2))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun4__split_fields2) i2)
  (mk___rep1 sfun4__split_fields2) i2))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun3__split_fields2) i2)
  (mk___rep1 sfun3__split_fields2) i2))

;; H
  (assert (get_value__function_guard
  (get_value (mk___rep1 sfun4__split_fields2) i2)
  (mk___rep1 sfun4__split_fields2) i2))

;; H
  (assert (min__function_guard
  (min1 (get_value (mk___rep1 sfun3__split_fields2) i2)
  (get_value (mk___rep1 sfun4__split_fields2) i2))
  (get_value (mk___rep1 sfun3__split_fields2) i2)
  (get_value (mk___rep1 sfun4__split_fields2) i2)))

;; H
  (assert (= result4 (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (and (<= 0 i2) (<= i2 12))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 12)) (eq
  (get_value (mk___rep1 sfun_merge__split_fields) i2)
  (min1 (get_value (mk___rep1 sfun3__split_fields2) i2)
  (get_value (mk___rep1 sfun4__split_fields2) i2)))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (= i2 12)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (= i3 (mk_int__ref i2))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (= i4 i2)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (= i5 i3)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 12)) (= i6 i4)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 12))) (= i5 (mk_int__ref i1))))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 12))) (= i6 i1)))

;; H
  (assert (minimum_until_point__function_guard
  (minimum_until_point (mk___rep1 sfun4__split_fields2) 1)
  (mk___rep1 sfun4__split_fields2) 1))

;; H
  (assert (eq (minimum_until_point (mk___rep1 sfun4__split_fields2) 1)
  fliteral12))

;; H
  (assert (minimum_until_point__function_guard
  (minimum_until_point (mk___rep1 sfun4__split_fields2) 5)
  (mk___rep1 sfun4__split_fields2) 5))

;; H
  (assert (eq (minimum_until_point (mk___rep1 sfun4__split_fields2) 5)
  fliteral10))

;; H
  (assert (minimum_until_point__function_guard
  (minimum_until_point (mk___rep1 sfun_merge__split_fields) 11)
  (mk___rep1 sfun_merge__split_fields) 11))

(assert
;; WP_parameter_def
 ;; File "step_function_test.adb", line 4, characters 0-0
  (not (eq (minimum_until_point (mk___rep1 sfun_merge__split_fields) 11)
  fliteral8)))
(check-sat)
