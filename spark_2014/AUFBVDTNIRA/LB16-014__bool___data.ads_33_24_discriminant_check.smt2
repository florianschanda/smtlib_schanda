;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort t_nat32 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (t_nat32 t_nat32) Bool)

(declare-fun dummy () t_nat32)

(declare-datatypes ()
((t_nat32__ref (mk_t_nat32__ref (t_nat32__content t_nat32)))))
(define-fun t_nat32__ref___projection ((a t_nat32__ref)) t_nat32 (t_nat32__content
                                                                 a))

(declare-fun to_rep (t_nat32) Int)

(declare-fun of_rep (Int) t_nat32)

;; inversion_axiom
  (assert
  (forall ((x t_nat32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x t_nat32)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort t_data_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t_data_type t_data_type) Bool)

(declare-fun dummy1 () t_data_type)

(declare-datatypes ()
((t_data_type__ref (mk_t_data_type__ref (t_data_type__content t_data_type)))))
(define-fun t_data_type__ref___projection ((a t_data_type__ref)) t_data_type 
  (t_data_type__content a))

(declare-fun to_rep1 (t_data_type) Int)

(declare-fun of_rep1 (Int) t_data_type)

;; inversion_axiom
  (assert
  (forall ((x t_data_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x t_data_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__data__t_strong_data_type__data_type t_data_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) t_data_type 
  (rec__data__t_strong_data_type__data_type a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__data__t_strong_data_type__min_nat32 t_nat32)))))
(define-fun us_split_fields_Min_Nat32__projection ((a us_split_fields)) t_nat32 
  (rec__data__t_strong_data_type__min_nat32 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun data__t_strong_data_type__min_nat32__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__data__t_strong_data_type__data_type (us_split_discrs1 a))) 1))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__data__t_strong_data_type__data_type
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__data__t_strong_data_type__data_type
                                                  (us_split_discrs1 b))))
                        (=> (data__t_strong_data_type__min_nat32__pred a)
                        (= (to_rep
                           (rec__data__t_strong_data_type__min_nat32
                           (us_split_fields1 a))) (to_rep
                                                  (rec__data__t_strong_data_type__min_nat32
                                                  (us_split_fields1 b))))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun data__t_strong_data_type__data_type__first__bit () Int)

(declare-fun data__t_strong_data_type__data_type__last__bit () Int)

(declare-fun data__t_strong_data_type__data_type__position () Int)

;; data__t_strong_data_type__data_type__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__first__bit))

;; data__t_strong_data_type__data_type__last__bit_axiom
  (assert
  (< data__t_strong_data_type__data_type__first__bit data__t_strong_data_type__data_type__last__bit))

;; data__t_strong_data_type__data_type__position_axiom
  (assert (<= 0 data__t_strong_data_type__data_type__position))

(declare-fun data__t_strong_data_type__min_nat32__first__bit () Int)

(declare-fun data__t_strong_data_type__min_nat32__last__bit () Int)

(declare-fun data__t_strong_data_type__min_nat32__position () Int)

;; data__t_strong_data_type__min_nat32__first__bit_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__first__bit))

;; data__t_strong_data_type__min_nat32__last__bit_axiom
  (assert
  (< data__t_strong_data_type__min_nat32__first__bit data__t_strong_data_type__min_nat32__last__bit))

;; data__t_strong_data_type__min_nat32__position_axiom
  (assert (<= 0 data__t_strong_data_type__min_nat32__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((t_strong_data_type__ref
 (mk_t_strong_data_type__ref (t_strong_data_type__content us_rep)))))
(define-fun t_strong_data_type__ref___projection ((a t_strong_data_type__ref)) us_rep 
  (t_strong_data_type__content a))

(define-fun default_initial_assumption ((temp___expr_149 us_rep)
  (temp___skip_top_level_150 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_149) false)
                                         (= (to_rep1
                                            (rec__data__t_strong_data_type__data_type
                                            (us_split_discrs1
                                            temp___expr_149))) 0)))

(declare-fun is_nat32 (us_rep) Bool)

(declare-fun is_nat32__function_guard (Bool us_rep) Bool)

;; is_nat32__post_axiom
  (assert true)

;; is_nat32__def_axiom
  (assert
  (forall ((strong_data_type us_rep))
  (! (=> (is_nat32__function_guard (is_nat32 strong_data_type)
     strong_data_type)
     (= (= (is_nat32 strong_data_type) true)
     (= (to_rep1
        (rec__data__t_strong_data_type__data_type
        (us_split_discrs1 strong_data_type))) 1))) :pattern ((is_nat32
                                                             strong_data_type)) )))

(declare-fun strong_data_type () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 4294967295)) (in_range
                                      temp___expr_135)))

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 1)) (in_range1 temp___expr_141)))

;; H
  (assert (is_nat32__function_guard (is_nat32 strong_data_type)
  strong_data_type))

;; H
  (assert (= (is_nat32 strong_data_type) true))

(assert
;; WP_parameter_def
 ;; File "data.ads", line 4, characters 0-0
  (not
  (= (to_rep1
     (rec__data__t_strong_data_type__data_type
     (us_split_discrs1 strong_data_type))) 1)))
(check-sat)
