;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun id (Int) Int)

(declare-fun id__function_guard (Int Int) Bool)

(declare-fun c () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__dic_pred__t__f natural)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) natural 
  (rec__dic_pred__t__f a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__dic_pred__t__f (us_split_fields1 a))) 
                   (to_rep (rec__dic_pred__t__f (us_split_fields1 b)))) true
                   false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dic_pred__t__f__first__bit () Int)

(declare-fun dic_pred__t__f__last__bit () Int)

(declare-fun dic_pred__t__f__position () Int)

;; dic_pred__t__f__first__bit_axiom
  (assert (<= 0 dic_pred__t__f__first__bit))

;; dic_pred__t__f__last__bit_axiom
  (assert (< dic_pred__t__f__first__bit dic_pred__t__f__last__bit))

;; dic_pred__t__f__position_axiom
  (assert (<= 0 dic_pred__t__f__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun get (us_rep) Int)

(declare-fun get__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_147 us_rep)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=> (= temp___do_toplevel_146 true)
                                      (=> (= temp___is_init_144 true)
                                      (< 0 (id
                                           (to_rep
                                           (rec__dic_pred__t__f
                                           (us_split_fields1 temp___expr_147))))))))

(define-fun default_initial_assumption ((temp___expr_149 us_rep)
  (temp___skip_top_level_150 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_pred__t__f
                                            (us_split_fields1
                                            temp___expr_149))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_150 true))
                                         (< 0 (get temp___expr_149)))))

(define-fun dynamic_predicate ((temp___152 us_rep)) Bool (< 0 (id
                                                              (to_rep
                                                              (rec__dic_pred__t__f
                                                              (us_split_fields1
                                                              temp___152))))))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__dic_pred__s__f natural)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) natural 
  (rec__dic_pred__s__f a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__dic_pred__s__f (us_split_fields3 a))) 
                    (to_rep (rec__dic_pred__s__f (us_split_fields3 b)))) true
                    false))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dic_pred__s__f__first__bit () Int)

(declare-fun dic_pred__s__f__last__bit () Int)

(declare-fun dic_pred__s__f__position () Int)

;; dic_pred__s__f__first__bit_axiom
  (assert (<= 0 dic_pred__s__f__first__bit))

;; dic_pred__s__f__last__bit_axiom
  (assert (< dic_pred__s__f__first__bit dic_pred__s__f__last__bit))

;; dic_pred__s__f__position_axiom
  (assert (<= 0 dic_pred__s__f__position))

(declare-fun dummy3 () us_rep1)

(declare-datatypes () ((s__ref (mk_s__ref (s__content us_rep1)))))
(define-fun s__ref___projection ((a s__ref)) us_rep1 (s__content a))

(define-fun default_initial_assumption1 ((temp___expr_158 us_rep1)
  (temp___skip_top_level_159 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_pred__s__f
                                            (us_split_fields3
                                            temp___expr_158))) c)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_159 true))
                                         (<= 0 c))))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-fun dummy4 () integer)

(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___projection ((a t3s__ref)) integer (t3s__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq6 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-fun dummy5 () us_t)

(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content us_t)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t (t4s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__containers__container__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural 
  (rec__containers__container__c a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__containers__container__l natural)(rec__containers__container__v us_t)))))
(define-fun us_split_fields_L__projection ((a us_split_fields4)) natural 
  (rec__containers__container__l a))

(define-fun us_split_fields_V__projection ((a us_split_fields4)) us_t 
  (rec__containers__container__v a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (mk___rep2
 (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq7 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__containers__container__c
                            (us_split_discrs1 a))) (to_rep
                                                   (rec__containers__container__c
                                                   (us_split_discrs1 b))))
                         (= (to_rep
                            (rec__containers__container__l
                            (us_split_fields5 a))) (to_rep
                                                   (rec__containers__container__l
                                                   (us_split_fields5 b)))))
                         (= (bool_eq6
                            (rec__containers__container__v
                            (us_split_fields5 a))
                            (rec__containers__container__v
                            (us_split_fields5 b))) true))
                    true false))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun containers__container__c__first__bit () Int)

(declare-fun containers__container__c__last__bit () Int)

(declare-fun containers__container__c__position () Int)

;; containers__container__c__first__bit_axiom
  (assert (<= 0 containers__container__c__first__bit))

;; containers__container__c__last__bit_axiom
  (assert
  (< containers__container__c__first__bit containers__container__c__last__bit))

;; containers__container__c__position_axiom
  (assert (<= 0 containers__container__c__position))

(declare-fun containers__container__l__first__bit () Int)

(declare-fun containers__container__l__last__bit () Int)

(declare-fun containers__container__l__position () Int)

;; containers__container__l__first__bit_axiom
  (assert (<= 0 containers__container__l__first__bit))

;; containers__container__l__last__bit_axiom
  (assert
  (< containers__container__l__first__bit containers__container__l__last__bit))

;; containers__container__l__position_axiom
  (assert (<= 0 containers__container__l__position))

(declare-fun containers__container__v__first__bit () Int)

(declare-fun containers__container__v__last__bit () Int)

(declare-fun containers__container__v__position () Int)

;; containers__container__v__first__bit_axiom
  (assert (<= 0 containers__container__v__first__bit))

;; containers__container__v__last__bit_axiom
  (assert
  (< containers__container__v__first__bit containers__container__v__last__bit))

;; containers__container__v__position_axiom
  (assert (<= 0 containers__container__v__position))

(declare-fun dummy6 () us_rep2)

(declare-datatypes ()
((container__ref (mk_container__ref (container__content us_rep2)))))
(define-fun container__ref___projection ((a container__ref)) us_rep2 
  (container__content a))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort tT1sP1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (tT1sP1 tT1sP1) Bool)

(declare-fun dummy7 () tT1sP1)

(declare-datatypes ()
((tT1sP1__ref (mk_tT1sP1__ref (tT1sP1__content tT1sP1)))))
(define-fun tT1sP1__ref___projection ((a tT1sP1__ref)) tT1sP1 (tT1sP1__content
                                                              a))

(declare-fun dummy8 () (Array Int natural))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq8 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__containers__container__l1 natural)(rec__containers__container__v1 (Array Int natural))))))
(define-fun us_split_fields_L2__projection ((a us_split_fields6)) natural 
  (rec__containers__container__l1 a))

(define-fun us_split_fields_V2__projection ((a us_split_fields6)) (Array Int natural) 
  (rec__containers__container__v1 a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3
 (mk___rep3
 (us_split_discrs2 us_split_discrs)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep_5__projection ((a us_rep3)) us_split_discrs (us_split_discrs2
                                                               a))

(define-fun us_rep_6__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun to_base ((a us_rep3)) us_rep2 (mk___rep2 (us_split_discrs2 a)
                                          (mk___split_fields2
                                          (rec__containers__container__l1
                                          (us_split_fields7 a))
                                          (of_array
                                          (rec__containers__container__v1
                                          (us_split_fields7 a)) 1 10))))

(define-fun of_base ((r us_rep2)) us_rep3 (mk___rep3 (us_split_discrs1 r)
                                          (mk___split_fields3
                                          (rec__containers__container__l
                                          (us_split_fields5 r))
                                          (let ((temp___133 (rec__containers__container__v
                                                            (us_split_fields5
                                                            r))))
                                          (to_array temp___133)))))

(define-fun bool_eq9 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__containers__container__c
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__containers__container__c
                                                   (us_split_discrs2 b))))
                         (= (to_rep
                            (rec__containers__container__l1
                            (us_split_fields7 a))) (to_rep
                                                   (rec__containers__container__l1
                                                   (us_split_fields7 b)))))
                         (= (bool_eq4
                            (rec__containers__container__v1
                            (us_split_fields7 a)) 1 10
                            (rec__containers__container__v1
                            (us_split_fields7 b)) 1 10) true))
                    true false))

(declare-fun user_eq9 (us_rep3 us_rep3) Bool)

(define-fun in_range3 ((rec__containers__container__c1 Int)
  (a us_rep2)) Bool (= rec__containers__container__c1 (to_rep
                                                      (rec__containers__container__c
                                                      (us_split_discrs1 a)))))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-fun containers__container__c__first__bit1 () Int)

(declare-fun containers__container__c__last__bit1 () Int)

(declare-fun containers__container__c__position1 () Int)

;; containers__container__c__first__bit_axiom
  (assert (<= 0 containers__container__c__first__bit1))

;; containers__container__c__last__bit_axiom
  (assert
  (< containers__container__c__first__bit1 containers__container__c__last__bit1))

;; containers__container__c__position_axiom
  (assert (<= 0 containers__container__c__position1))

(declare-fun containers__container__l__first__bit1 () Int)

(declare-fun containers__container__l__last__bit1 () Int)

(declare-fun containers__container__l__position1 () Int)

;; containers__container__l__first__bit_axiom
  (assert (<= 0 containers__container__l__first__bit1))

;; containers__container__l__last__bit_axiom
  (assert
  (< containers__container__l__first__bit1 containers__container__l__last__bit1))

;; containers__container__l__position_axiom
  (assert (<= 0 containers__container__l__position1))

(declare-fun containers__container__v__first__bit1 () Int)

(declare-fun containers__container__v__last__bit1 () Int)

(declare-fun containers__container__v__position1 () Int)

;; containers__container__v__first__bit_axiom
  (assert (<= 0 containers__container__v__first__bit1))

;; containers__container__v__last__bit_axiom
  (assert
  (< containers__container__v__first__bit1 containers__container__v__last__bit1))

;; containers__container__v__position_axiom
  (assert (<= 0 containers__container__v__position1))

(declare-fun dummy9 () us_rep3)

(declare-datatypes () ((tvS__ref (mk_tvS__ref (tvS__content us_rep3)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep3 (tvS__content a))

(declare-fun v__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

;; id__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (dynamic_invariant (id x) true
     false true)) :pattern ((id x)) )))

;; id__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (id x) x)) :pattern (
  (id x)) )))

;; c__def_axiom
  (assert (= c (id 0)))

;; get__post_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (dynamic_invariant2 x true true true) (dynamic_invariant (get x)
     true false true)) :pattern ((get x)) )))

;; get__def_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (dynamic_invariant2 x true true true)
     (= (get x) (id (to_rep (rec__dic_pred__t__f (us_split_fields1 x)))))) :pattern (
  (get x)) )))

(define-fun dynamic_invariant3 ((temp___expr_169 us_rep2)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)) Bool (let ((temp___170 (rec__containers__container__c
                                                        (us_split_discrs1
                                                        temp___expr_169))))
                                      (and (dynamic_property1 1
                                      (to_rep temp___170)
                                      (first1
                                      (rec__containers__container__v
                                      (us_split_fields5 temp___expr_169)))
                                      (last1
                                      (rec__containers__container__v
                                      (us_split_fields5 temp___expr_169))))
                                      (and
                                      (= (first1
                                         (rec__containers__container__v
                                         (us_split_fields5 temp___expr_169))) 1)
                                      (= (last1
                                         (rec__containers__container__v
                                         (us_split_fields5 temp___expr_169))) 
                                      (to_rep temp___170))))))

;; length__post_axiom
  (assert
  (forall ((x us_rep2))
  (! (=> (dynamic_invariant3 x true true true) (dynamic_invariant1
     (length1 x) true false true)) :pattern ((length1 x)) )))

;; length__def_axiom
  (assert
  (forall ((x us_rep2))
  (! (=> (dynamic_invariant3 x true true true)
     (= (length1 x) (to_rep
                    (rec__containers__container__l (us_split_fields5 x))))) :pattern (
  (length1 x)) )))

(declare-fun x__split_fields () natural)

(declare-fun usobject () natural)

;; H
  (assert (in_range c))

;; H
  (assert (= (id 0) c))

;; H
  (assert (default_initial_assumption
  (mk___rep (mk___split_fields x__split_fields)) false))

;; H
  (assert (= (to_rep usobject) c))

(assert
;; WP_parameter_def
 ;; File "use_dic_pred.ads", line 5, characters 0-0
  (not (<= 0 c)))
(check-sat)
