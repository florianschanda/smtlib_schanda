;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 4294967296)) (= (bv2nat ((_ int2bv 32) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-fun nouser () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun temp___String_Literal_135 (tuple0) (Array Int character))

;; temp___String_Literal_135__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_135 us_void_param)) )))

(declare-sort unsigned32t 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (unsigned32t unsigned32t) Bool)

(declare-fun dummy4 () unsigned32t)

(declare-datatypes ()
((unsigned32t__ref (mk_unsigned32t__ref (unsigned32t__content unsigned32t)))))
(define-fun unsigned32t__ref___projection ((a unsigned32t__ref)) unsigned32t 
  (unsigned32t__content a))

(define-fun dynamic_invariant ((temp___expr_259 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)) Bool (=>
                                      (or (= temp___is_init_256 true)
                                      (<= 0 4294967295)) (in_range4
                                      temp___expr_259)))

(declare-fun to_rep2 (unsigned32t) Int)

(declare-fun of_rep2 (Int) unsigned32t)

;; inversion_axiom
  (assert
  (forall ((x unsigned32t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned32t)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort namecountt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (namecountt namecountt) Bool)

(declare-fun dummy5 () namecountt)

(declare-datatypes ()
((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt 
  (namecountt__content a))

(declare-fun to_rep3 (namecountt) Int)

(declare-fun of_rep3 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun blankname () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort issueridt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (issueridt issueridt) Bool)

(declare-fun dummy6 () issueridt)

(declare-datatypes ()
((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt 
  (issueridt__content a))

(declare-fun to_rep4 (issueridt) Int)

(declare-fun of_rep4 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-fun dummy7 () (Array Int character))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt 
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt 
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character) 
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq8 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep4
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq3
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun cryptotypes__issuert__id__first__bit () Int)

(declare-fun cryptotypes__issuert__id__last__bit () Int)

(declare-fun cryptotypes__issuert__id__position () Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-fun cryptotypes__issuert__namelength__first__bit () Int)

(declare-fun cryptotypes__issuert__namelength__last__bit () Int)

(declare-fun cryptotypes__issuert__namelength__position () Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-fun cryptotypes__issuert__name__first__bit () Int)

(declare-fun cryptotypes__issuert__name__last__bit () Int)

(declare-fun cryptotypes__issuert__name__position () Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun dummy8 () us_rep)

(declare-datatypes ()
((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-fun nullissuer () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-sort maskt 0)

(define-fun in_range7 ((x (_ BitVec 32))) Bool (and
                                               (bvule ((_ int2bv 32) 0) x)
                                               (bvule x ((_ int2bv 32) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(define-fun bool_eq9 ((x (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 32))

(declare-fun user_eq9 (maskt maskt) Bool)

(declare-fun dummy9 () maskt)

(declare-datatypes () ((maskt__ref (mk_maskt__ref (maskt__content maskt)))))
(define-fun maskt__ref___projection ((a maskt__ref)) maskt (maskt__content a))

(declare-fun to_rep5 (maskt) (_ BitVec 32))

(declare-fun of_rep5 ((_ BitVec 32)) maskt)

;; inversion_axiom
  (assert
  (forall ((x maskt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x maskt)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (let ((y (bvurem x ((_ int2bv 32) 16))))
     (=> (in_range7 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(define-fun to_int3 ((x maskt)) Int (bv2nat (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x maskt)) (! (in_range_int (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__keystore__interfac__keytemplatet__attrmask maskt)(rec__keystore__interfac__keytemplatet__owner us_rep)(rec__keystore__interfac__keytemplatet__keyid unsigned32t)(rec__keystore__interfac__keytemplatet__keylength unsigned32t)(rec__keystore__interfac__keytemplatet__ispublic Bool)))))
(define-fun us_split_fields_AttrMask__projection ((a us_split_fields2)) maskt 
  (rec__keystore__interfac__keytemplatet__attrmask a))

(define-fun us_split_fields_Owner__projection ((a us_split_fields2)) us_rep 
  (rec__keystore__interfac__keytemplatet__owner a))

(define-fun us_split_fields_KeyID2__projection ((a us_split_fields2)) unsigned32t 
  (rec__keystore__interfac__keytemplatet__keyid a))

(define-fun us_split_fields_KeyLength2__projection ((a us_split_fields2)) unsigned32t 
  (rec__keystore__interfac__keytemplatet__keylength a))

(define-fun us_split_fields_IsPublic__projection ((a us_split_fields2)) Bool 
  (rec__keystore__interfac__keytemplatet__ispublic a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_11__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                 a))

(define-fun bool_eq10 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep5
                            (rec__keystore__interfac__keytemplatet__attrmask
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__keystore__interfac__keytemplatet__attrmask
                                                   (us_split_fields3 b))))
                         (= (bool_eq8
                            (rec__keystore__interfac__keytemplatet__owner
                            (us_split_fields3 a))
                            (rec__keystore__interfac__keytemplatet__owner
                            (us_split_fields3 b))) true))
                         (= (to_rep2
                            (rec__keystore__interfac__keytemplatet__keyid
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__keystore__interfac__keytemplatet__keyid
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__keystore__interfac__keytemplatet__keylength
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__keystore__interfac__keytemplatet__keylength
                                                   (us_split_fields3 b)))))
                         (= (rec__keystore__interfac__keytemplatet__ispublic
                            (us_split_fields3 a)) (rec__keystore__interfac__keytemplatet__ispublic
                                                  (us_split_fields3 b))))
                    true false))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun keystore__interfac__keytemplatet__attrmask__first__bit () Int)

(declare-fun keystore__interfac__keytemplatet__attrmask__last__bit () Int)

(declare-fun keystore__interfac__keytemplatet__attrmask__position () Int)

;; keystore__interfac__keytemplatet__attrmask__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__attrmask__first__bit))

;; keystore__interfac__keytemplatet__attrmask__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__attrmask__first__bit keystore__interfac__keytemplatet__attrmask__last__bit))

;; keystore__interfac__keytemplatet__attrmask__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__attrmask__position))

(declare-fun keystore__interfac__keytemplatet__owner__first__bit () Int)

(declare-fun keystore__interfac__keytemplatet__owner__last__bit () Int)

(declare-fun keystore__interfac__keytemplatet__owner__position () Int)

;; keystore__interfac__keytemplatet__owner__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__owner__first__bit))

;; keystore__interfac__keytemplatet__owner__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__owner__first__bit keystore__interfac__keytemplatet__owner__last__bit))

;; keystore__interfac__keytemplatet__owner__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__owner__position))

(declare-fun keystore__interfac__keytemplatet__keyid__first__bit () Int)

(declare-fun keystore__interfac__keytemplatet__keyid__last__bit () Int)

(declare-fun keystore__interfac__keytemplatet__keyid__position () Int)

;; keystore__interfac__keytemplatet__keyid__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keyid__first__bit))

;; keystore__interfac__keytemplatet__keyid__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__keyid__first__bit keystore__interfac__keytemplatet__keyid__last__bit))

;; keystore__interfac__keytemplatet__keyid__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keyid__position))

(declare-fun keystore__interfac__keytemplatet__keylength__first__bit () Int)

(declare-fun keystore__interfac__keytemplatet__keylength__last__bit () Int)

(declare-fun keystore__interfac__keytemplatet__keylength__position () Int)

;; keystore__interfac__keytemplatet__keylength__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keylength__first__bit))

;; keystore__interfac__keytemplatet__keylength__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__keylength__first__bit keystore__interfac__keytemplatet__keylength__last__bit))

;; keystore__interfac__keytemplatet__keylength__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__keylength__position))

(declare-fun keystore__interfac__keytemplatet__ispublic__first__bit () Int)

(declare-fun keystore__interfac__keytemplatet__ispublic__last__bit () Int)

(declare-fun keystore__interfac__keytemplatet__ispublic__position () Int)

;; keystore__interfac__keytemplatet__ispublic__first__bit_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__ispublic__first__bit))

;; keystore__interfac__keytemplatet__ispublic__last__bit_axiom
  (assert
  (< keystore__interfac__keytemplatet__ispublic__first__bit keystore__interfac__keytemplatet__ispublic__last__bit))

;; keystore__interfac__keytemplatet__ispublic__position_axiom
  (assert (<= 0 keystore__interfac__keytemplatet__ispublic__position))

(declare-fun dummy10 () us_rep1)

(declare-datatypes ()
((keytemplatet__ref (mk_keytemplatet__ref (keytemplatet__content us_rep1)))))
(define-fun keytemplatet__ref___projection ((a keytemplatet__ref)) us_rep1 
  (keytemplatet__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int unsigned32t))))))
(declare-fun slide1 ((Array Int unsigned32t) Int
  Int) (Array Int unsigned32t))

;; slide_eq
  (assert
  (forall ((a (Array Int unsigned32t)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int unsigned32t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int unsigned32t) Int Int (Array Int unsigned32t)
  Int Int) (Array Int unsigned32t))

;; concat_def
  (assert
  (forall ((a (Array Int unsigned32t)) (b (Array Int unsigned32t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (unsigned32t Int) (Array Int unsigned32t))

;; singleton_def
  (assert
  (forall ((v unsigned32t))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq11 ((a (Array Int unsigned32t)) (a__first Int)
  (a__last Int) (b (Array Int unsigned32t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (to_rep2 (select a temp___idx_152)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_152)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int unsigned32t)) (b (Array Int unsigned32t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq11 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (to_rep2 (select a temp___idx_152)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_152)))))))))))

(declare-fun compare1 ((Array Int unsigned32t) Int Int
  (Array Int unsigned32t) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int unsigned32t)) (b (Array Int unsigned32t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq11 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int unsigned32t)) (b (Array Int unsigned32t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq11 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int unsigned32t)) (b (Array Int unsigned32t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq11 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun expectedcount () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun temp___String_Literal_1326 (tuple0) (Array Int character))

;; temp___String_Literal_1326__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 2)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 3)) 121))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 4)) 112))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 5)) 116))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 6)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 8)) 76))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 10)) 98))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 11)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 14)) 121))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 16)) 69))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 18)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 20)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 22)) 58))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 24)) 76))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 25)) 105))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 26)) 98))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 27)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 28)) 97))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 29)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 30)) 121))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 32)) 104))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 33)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 34)) 108))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 35)) 100))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 36)) 115))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 38)) 109))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 39)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 40)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 41)) 101))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 43)) 116))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 44)) 104))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 45)) 97))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 46)) 110))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 48)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 49)) 110))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 50)) 101))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 51)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 52)) 112))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 53)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 54)) 105))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 55)) 118))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 56)) 97))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 57)) 116))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 58)) 101))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 59)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 60)) 107))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 61)) 101))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 62)) 121))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 63)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 64)) 102))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 65)) 111))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 66)) 114))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 67)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 68)) 116))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 69)) 104))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 70)) 105))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 71)) 115))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 72)) 32))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 73)) 84))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 74)) 73))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 75)) 83))
     (= (to_rep (select (temp___String_Literal_1326 us_void_param) 76)) 46)) :pattern (
  (temp___String_Literal_1326 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; expectedcount__def_axiom
  (assert (= expectedcount 1))

(define-fun dynamic_invariant5 ((temp___expr_703 Int)
  (temp___is_init_700 Bool) (temp___skip_constant_701 Bool)
  (temp___do_toplevel_702 Bool)) Bool (=>
                                      (or (= temp___is_init_700 true)
                                      (<= 0 40)) (in_range5 temp___expr_703)))

(declare-fun cryptotypes__blankname__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___139 Int))
  (forall ((temp___140 Int))
  (= (select (cryptotypes__blankname__aggregate_def temp___139) temp___140) 
  (of_rep temp___139)))))

;; blankname__def_axiom
  (assert (= blankname (cryptotypes__blankname__aggregate_def 32)))

(define-fun dynamic_invariant6 ((temp___expr_724 Int)
  (temp___is_init_721 Bool) (temp___skip_constant_722 Bool)
  (temp___do_toplevel_723 Bool)) Bool (=>
                                      (or (= temp___is_init_721 true)
                                      (<= 0 4294967295)) (in_range6
                                      temp___expr_724)))

;; nullissuer__def_axiom
  (assert
  (= nullissuer (mk___rep
                (mk___split_fields (of_rep4 0) (of_rep3 0) blankname))))

;; nouser__def_axiom
  (assert (= nouser (temp___String_Literal_135 Tuple0)))

;; valid_numberlogentries__post_axiom
  (assert true)

(define-fun dynamic_invariant7 ((temp___expr_979 (_ BitVec 32))
  (temp___is_init_976 Bool) (temp___skip_constant_977 Bool)
  (temp___do_toplevel_978 Bool)) Bool (=>
                                      (or (= temp___is_init_976 true)
                                      (bvule ((_ int2bv 32) 0) ((_ int2bv 32) 15)))
                                      (in_range7 temp___expr_979)))

(declare-fun privatekeyhandle () Int)

(declare-fun privatetemplate__split_fields () maskt)

(declare-fun privatetemplate__split_fields1 () issueridt)

(declare-fun privatetemplate__split_fields2 () namecountt)

(declare-fun privatetemplate__split_fields3 () (Array Int character))

(declare-fun privatetemplate__split_fields4 () unsigned32t)

(declare-fun privatetemplate__split_fields5 () unsigned32t)

(declare-fun privatetemplate__split_fields6 () Bool)

(declare-fun actualcount () Int)

(declare-fun o () namecountt)

(declare-fun o1 () issueridt)

(declare-fun o2 () issueridt)

(declare-fun o3 () namecountt)

(declare-fun o4 () (Array Int character))

(declare-fun temp___1327 () issueridt)

(declare-fun temp___13271 () namecountt)

(declare-fun temp___13272 () (Array Int character))

(declare-fun o5 () unsigned32t)

(declare-fun o6 () unsigned32t)

(declare-fun o7 () maskt)

(declare-fun o8 () maskt)

(declare-fun o9 () issueridt)

(declare-fun o10 () namecountt)

(declare-fun o11 () (Array Int character))

(declare-fun o12 () unsigned32t)

(declare-fun o13 () unsigned32t)

(declare-fun o14 () Bool)

(declare-fun temp___1325 () maskt)

(declare-fun temp___13251 () issueridt)

(declare-fun temp___13252 () namecountt)

(declare-fun temp___13253 () (Array Int character))

(declare-fun temp___13254 () unsigned32t)

(declare-fun temp___13255 () unsigned32t)

(declare-fun temp___13256 () Bool)

(declare-fun result () Int)

(declare-fun actualcount1 () Int)

(declare-fun result1 () maskt)

(declare-fun result2 () issueridt)

(declare-fun result3 () namecountt)

(declare-fun result4 () (Array Int character))

(declare-fun result5 () unsigned32t)

(declare-fun result6 () unsigned32t)

(declare-fun result7 () Bool)

(declare-fun privatetemplate__split_fields7 () us_split_fields2)

(declare-fun state () us_private)

(declare-fun actualcount2 () Int)

;; H
  (assert (= (to_rep3 o) 0))

;; H
  (assert (= (to_rep4 o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= blankname o4))

;; H
  (assert (= temp___1327 o2))

;; H
  (assert (= temp___13271 o3))

;; H
  (assert (= temp___13272 o4))

;; H
  (assert
  (= (mk___rep (mk___split_fields temp___1327 temp___13271 temp___13272)) 
  nullissuer))

;; H
  (assert (= (temp___String_Literal_135 Tuple0) nouser))

;; H
  (assert (=> (<= 0 4294967295) (in_range4 privatekeyhandle)))

;; H
  (assert (in_range4 expectedcount))

;; H
  (assert (= result actualcount))

;; H
  (assert (= actualcount1 1))

;; H
  (assert (in_range4 actualcount1))

;; H
  (assert (= (to_rep2 o5) 0))

;; H
  (assert (= (to_rep2 o6) 0))

;; H
  (assert (= (to_rep5 o7) ((_ int2bv 32) 8)))

;; H
  (assert (= o7 o8))

;; H
  (assert (= nullissuer (mk___rep (mk___split_fields o9 o10 o11))))

;; H
  (assert (= o6 o12))

;; H
  (assert (= o5 o13))

;; H
  (assert (= (of_int 0) o14))

;; H
  (assert (= temp___1325 o8))

;; H
  (assert (= temp___13251 o9))

;; H
  (assert (= temp___13252 o10))

;; H
  (assert (= temp___13253 o11))

;; H
  (assert (= temp___13254 o12))

;; H
  (assert (= temp___13255 o13))

;; H
  (assert (= temp___13256 o14))

;; H
  (assert (= result1 privatetemplate__split_fields))

;; H
  (assert (= result2 privatetemplate__split_fields1))

;; H
  (assert (= result3 privatetemplate__split_fields2))

;; H
  (assert (= result4 privatetemplate__split_fields3))

;; H
  (assert (= result5 privatetemplate__split_fields4))

;; H
  (assert (= result6 privatetemplate__split_fields5))

;; H
  (assert (= result7 privatetemplate__split_fields6))

;; H
  (assert
  (= privatetemplate__split_fields7 (mk___split_fields1 temp___1325
                                    (mk___rep
                                    (mk___split_fields temp___13251
                                    temp___13252 temp___13253)) temp___13254
                                    temp___13255 temp___13256)))

;; H
  (assert (in_range4 actualcount2))

;; H
  (assert (< 1 actualcount2))

(assert
;; WP_parameter_def
 ;; File "keystore.adb", line 380, characters 0-0
  (not (= (valid_numberlogentries state) true)))
(check-sat)
