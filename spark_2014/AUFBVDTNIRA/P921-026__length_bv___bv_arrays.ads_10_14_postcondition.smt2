;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (bv2nat ((_ int2bv 16) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-sort mod_16 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(define-fun bool_eq ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 16))

(declare-fun user_eq (mod_16 mod_16) Bool)

(declare-fun dummy () mod_16)

(declare-datatypes ()
((mod_16__ref (mk_mod_16__ref (mod_16__content mod_16)))))
(define-fun mod_16__ref___projection ((a mod_16__ref)) mod_16 (mod_16__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_142 (_ BitVec 16))
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool true)

(declare-fun to_rep (mod_16) (_ BitVec 16))

(declare-fun of_rep ((_ BitVec 16)) mod_16)

;; inversion_axiom
  (assert
  (forall ((x mod_16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x mod_16)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x mod_16)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) natural))))))
(declare-fun slide ((Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) natural))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) natural))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural
  (_ BitVec 16)) (Array (_ BitVec 16) natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i (_ BitVec 16)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array (_ BitVec 16) natural))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) natural)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep1 (select a temp___idx_132)) 
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 16)) (j (_ BitVec 16)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_rep1 (select a (bvadd i #x0001))) (to_rep1
                                              (select b (bvadd j #x0001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 16)) (j (_ BitVec 16)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_rep1 (select b (bvadd i #x0001))) (to_rep1
                                              (select a (bvadd j #x0001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) mod_16)

(declare-fun last (t) mod_16)

(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 16) natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) natural) (elts a))

(define-fun of_array ((a (Array (_ BitVec 16) natural)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array (_ BitVec 16) natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-fun dummy2 () us_t)

(declare-datatypes ()
((my_array__ref (mk_my_array__ref (my_array__content us_t)))))
(define-fun my_array__ref___projection ((a my_array__ref)) us_t (my_array__content
                                                                a))

(declare-fun c () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(define-fun dynamic_property1 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq4 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq3 (mod_16 mod_16) Bool)

(declare-fun dummy3 () mod_16)

(declare-datatypes ()
((tTaSP1__ref (mk_tTaSP1__ref (tTaSP1__content mod_16)))))
(define-fun tTaSP1__ref___projection ((a tTaSP1__ref)) mod_16 (tTaSP1__content
                                                              a))

(declare-sort t1 0)

(declare-fun first2 (t1) mod_16)

(declare-fun last2 (t1) mod_16)

(declare-fun mk1 ((_ BitVec 16) (_ BitVec 16)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array (_ BitVec 16) natural))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 16) natural) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 16) natural)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 16) (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) (_ BitVec 16) (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2nat (last3 a)) (bv2nat 
                                    (first3 a))) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array (_ BitVec 16) natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq5 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq4 (us_t1 us_t1) Bool)

(declare-fun dummy4 () us_t1)

(declare-datatypes () ((taS__ref (mk_taS__ref (taS__content us_t1)))))
(define-fun taS__ref___projection ((a taS__ref)) us_t1 (taS__content a))

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 16))

(define-fun dynamic_property3 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq6 ((x (_ BitVec 16))
  (y (_ BitVec 16))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq5 (mod_16 mod_16) Bool)

(declare-fun dummy5 () mod_16)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content mod_16)))))
(define-fun t1b__ref___projection ((a t1b__ref)) mod_16 (t1b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) mod_16)

(declare-fun last4 (t2) mod_16)

(declare-fun mk2 ((_ BitVec 16) (_ BitVec 16)) t2)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property3 range_first range_last
                             low) (dynamic_property3 range_first range_last
                             high))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array (_ BitVec 16) natural))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 16) natural) (elts2 a))

(define-fun of_array2 ((a (Array (_ BitVec 16) natural)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) (_ BitVec 16) (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) (_ BitVec 16) (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (bvule (first5 a) (last5 a))
                                    (+ (- (bv2nat (last5 a)) (bv2nat 
                                    (first5 a))) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array (_ BitVec 16) natural)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array (_ BitVec 16) natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) natural))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq7 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq6 (us_t2 us_t2) Bool)

(declare-fun dummy6 () us_t2)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content us_t2)))))
(define-fun t2b__ref___projection ((a t2b__ref)) us_t2 (t2b__content a))

(declare-fun a__first () mod_16)

(declare-fun a__last () mod_16)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun bv_arrays__create__a__aggregate_def (Int (_ BitVec 16)
  (_ BitVec 16)) us_t2)

;; def_axiom
  (assert
  (forall ((temp___162 Int))
  (forall ((temp___163 (_ BitVec 16)) (temp___164 (_ BitVec 16)))
  (let ((temp___161 (bv_arrays__create__a__aggregate_def temp___162
                    temp___163 temp___164)))
  (and
  (=> (dynamic_property ((_ int2bv 16) 0) ((_ int2bv 16) 65535) temp___163
  temp___164)
  (and (= (first5 temp___161) temp___163) (= (last5 temp___161) temp___164)))
  (forall ((temp___165 (_ BitVec 16)))
  (= (select (to_array2 temp___161) temp___165) (of_rep1 temp___162))))))))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_148 us_t)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (not (= temp___skip_constant_146 true))
                                      (dynamic_property ((_ int2bv 16) 0)
                                      ((_ int2bv 16) 65535)
                                      (first1 temp___expr_148)
                                      (last1 temp___expr_148))))

(define-fun dynamic_invariant3 ((temp___expr_155 us_t1)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (not (= temp___skip_constant_153 true))
                                      (and (dynamic_property2
                                      ((_ int2bv 16) 0) c
                                      (first3 temp___expr_155)
                                      (last3 temp___expr_155))
                                      (and
                                      (= (first3 temp___expr_155) ((_ int2bv 16) 0))
                                      (= (last3 temp___expr_155) c)))))

(declare-fun a () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result1 () t)

(declare-fun temp___167 () (Array (_ BitVec 16) natural))

(declare-fun temp___1671 () t2)

(declare-fun bv_arrays__create__a__assume () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__a__assume1 () t1)

(declare-fun result () (Array (_ BitVec 16) natural))

(declare-fun a1 () (Array (_ BitVec 16) natural))

(declare-fun result1 () (Array (_ BitVec 16) natural))

(declare-fun result2 () t)

(declare-fun bv_arrays__create__result2 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result3 () t)

(declare-fun bv_arrays__create__result4 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result5 () t)

(declare-fun bv_arrays__create__result6 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result7 () t)

(declare-fun a2 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result8 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result9 () t)

(declare-fun a3 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result10 () (Array (_ BitVec 16) natural))

(declare-fun bv_arrays__create__result11 () t)

(declare-fun result3 () (Array (_ BitVec 16) natural))

(declare-fun result4 () t)

;; H
  (assert
  (= (to_rep
     (first4
     (rt2 (bv_arrays__create__a__aggregate_def 0 ((_ int2bv 16) 0) c)))) ((_ int2bv 16) 0)))

;; H
  (assert
  (= (to_rep
     (last4
     (rt2 (bv_arrays__create__a__aggregate_def 0 ((_ int2bv 16) 0) c)))) 
  c))

;; H
  (assert
  (= (mk___t2 temp___167 temp___1671) (bv_arrays__create__a__aggregate_def 0
                                      ((_ int2bv 16) 0) c)))

;; H
  (assert
  (= (ite (<= (bv2nat (to_rep (first4 temp___1671))) (bv2nat (to_rep
                                                             (last4
                                                             temp___1671))))
     (+ (- (bv2nat (to_rep (last4 temp___1671))) (bv2nat (to_rep
                                                         (first4 temp___1671)))) 1)
     0) (ite (<= (bv2nat ((_ int2bv 16) 0)) (bv2nat c))
        (+ (- (bv2nat c) (bv2nat ((_ int2bv 16) 0))) 1) 0)))

;; H
  (assert (= temp___167 bv_arrays__create__a__assume))

;; H
  (assert
  (= (mk1 (to_rep (first4 temp___1671)) (to_rep (last4 temp___1671))) 
  bv_arrays__create__a__assume1))

;; H
  (assert (= result a))

;; H
  (assert (= a1 bv_arrays__create__a__assume))

;; H
  (assert
  (= (to_rep a__first) (to_rep (first2 bv_arrays__create__a__assume1))))

;; H
  (assert
  (= (to_rep a__last) (to_rep (last2 bv_arrays__create__a__assume1))))

;; H
  (assert
  (and (dynamic_property2 ((_ int2bv 16) 0) c (to_rep a__first)
  (to_rep a__last))
  (and (= (to_rep a__first) ((_ int2bv 16) 0)) (= (to_rep a__last) c))))

;; H
  (assert (= bv_arrays__create__result4 bv_arrays__create__result2))

;; H
  (assert (= bv_arrays__create__result5 bv_arrays__create__result3))

;; H
  (assert
  (= (mk___t bv_arrays__create__result6 bv_arrays__create__result7) (mk___t
                                                                    bv_arrays__create__result2
                                                                    bv_arrays__create__result3)))

;; H
  (assert (= result1 bv_arrays__create__result))

;; H
  (assert (= result2 bv_arrays__create__result1))

;; H
  (assert (= a1 bv_arrays__create__result2))

;; H
  (assert
  (= (mk (to_rep a__first) (to_rep a__last)) bv_arrays__create__result3))

;; H
  (assert
  (= (mk_my_array__ref
     (mk___t bv_arrays__create__result8 bv_arrays__create__result9)) 
  (mk_my_array__ref
  (mk___t bv_arrays__create__result4 bv_arrays__create__result5))))

;; H
  (assert (= a2 a1))

;; H
  (assert (= bv_arrays__create__result10 bv_arrays__create__result6))

;; H
  (assert (= bv_arrays__create__result11 bv_arrays__create__result7))

;; H
  (assert (= a3 a1))

;; H
  (assert (= result3 bv_arrays__create__result8))

;; H
  (assert (= result4 bv_arrays__create__result9))

(assert
;; WP_parameter_def
 ;; File "bv_arrays.ads", line 5, characters 0-0
  (not (= (to_rep (first bv_arrays__create__result9)) ((_ int2bv 16) 0))))
(check-sat)
