;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 4294967296)) (= (bv2nat ((_ int2bv 32) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort long_long_integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (long_long_integer long_long_integer) Bool)

(declare-fun dummy1 () long_long_integer)

(declare-datatypes ()
((long_long_integer__ref
 (mk_long_long_integer__ref (long_long_integer__content long_long_integer)))))
(define-fun long_long_integer__ref___projection ((a long_long_integer__ref)) long_long_integer 
  (long_long_integer__content a))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-fun dummy2 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(declare-sort unsigned_32 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(define-fun bool_eq3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned_32 unsigned_32) Bool)

(declare-fun dummy3 () unsigned_32)

(declare-datatypes ()
((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32 
  (unsigned_32__content a))

(declare-fun to_rep (unsigned_32) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) unsigned_32)

;; inversion_axiom
  (assert
  (forall ((x unsigned_32))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x unsigned_32)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort state_range 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 623)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (state_range state_range) Bool)

(declare-fun dummy4 () state_range)

(declare-datatypes ()
((state_range__ref (mk_state_range__ref (state_range__content state_range)))))
(define-fun state_range__ref___projection ((a state_range__ref)) state_range 
  (state_range__content a))

(define-fun dynamic_invariant1 ((temp___expr_207 Int)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=>
                                      (or (= temp___is_init_204 true)
                                      (<= 0 623)) (in_range4
                                      temp___expr_207)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int unsigned_32))))))
(declare-fun slide ((Array Int unsigned_32) Int Int) (Array Int unsigned_32))

;; slide_eq
  (assert
  (forall ((a (Array Int unsigned_32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int unsigned_32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int unsigned_32) Int Int (Array Int unsigned_32)
  Int Int) (Array Int unsigned_32))

;; concat_def
  (assert
  (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned_32 Int) (Array Int unsigned_32))

;; singleton_def
  (assert
  (forall ((v unsigned_32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int unsigned_32)) (a__first Int)
  (a__last Int) (b (Array Int unsigned_32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int unsigned_32) Int Int (Array Int unsigned_32)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int unsigned_32)) (b (Array Int unsigned_32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (state_range) Int)

(declare-fun of_rep1 (Int) state_range)

;; inversion_axiom
  (assert
  (forall ((x state_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x state_range)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun dummy5 () (Array Int unsigned_32))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int unsigned_32)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int unsigned_32)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int unsigned_32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int unsigned_32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int unsigned_32))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int unsigned_32) (Array Int unsigned_32)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__random__generator__state (Array Int unsigned_32))(rec__random__generator__index state_range)))))
(define-fun us_split_fields_State__projection ((a us_split_fields)) (Array Int unsigned_32) 
  (rec__random__generator__state a))

(define-fun us_split_fields_Index__projection ((a us_split_fields)) state_range 
  (rec__random__generator__index a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq6 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq5
                           (rec__random__generator__state
                           (us_split_fields1 a)) 0 623
                           (rec__random__generator__state
                           (us_split_fields1 b)) 0 623) true)
                        (= (to_rep1
                           (rec__random__generator__index
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__random__generator__index
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun random__generator__state__first__bit () Int)

(declare-fun random__generator__state__last__bit () Int)

(declare-fun random__generator__state__position () Int)

;; random__generator__state__first__bit_axiom
  (assert (<= 0 random__generator__state__first__bit))

;; random__generator__state__last__bit_axiom
  (assert
  (< random__generator__state__first__bit random__generator__state__last__bit))

;; random__generator__state__position_axiom
  (assert (<= 0 random__generator__state__position))

(declare-fun random__generator__index__first__bit () Int)

(declare-fun random__generator__index__last__bit () Int)

(declare-fun random__generator__index__position () Int)

;; random__generator__index__first__bit_axiom
  (assert (<= 0 random__generator__index__first__bit))

;; random__generator__index__last__bit_axiom
  (assert
  (< random__generator__index__first__bit random__generator__index__last__bit))

;; random__generator__index__position_axiom
  (assert (<= 0 random__generator__index__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((generator__ref (mk_generator__ref (generator__content us_rep)))))
(define-fun generator__ref___projection ((a generator__ref)) us_rep (generator__content
                                                                    a))

(declare-fun to_rep2 (integer) Int)

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int unsigned_32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int unsigned_32) (elts a))

(define-fun of_array ((a (Array Int unsigned_32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int unsigned_32)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int unsigned_32)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int unsigned_32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int unsigned_32))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int unsigned_32))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int unsigned_32))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq7 ((x us_t)
  (y us_t)) Bool (bool_eq5 (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq7 (us_t us_t) Bool)

(declare-fun dummy7 () us_t)

(declare-datatypes ()
((initialization_vector__ref
 (mk_initialization_vector__ref (initialization_vector__content us_t)))))
(define-fun initialization_vector__ref___projection ((a initialization_vector__ref)) us_t 
  (initialization_vector__content a))

(define-fun dynamic_invariant2 ((temp___expr_233 us_t)
  (temp___is_init_230 Bool) (temp___skip_constant_231 Bool)
  (temp___do_toplevel_232 Bool)) Bool (=>
                                      (not (= temp___skip_constant_231 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_233)
                                      (last1 temp___expr_233))))

(define-fun dynamic_invariant3 ((temp___expr_183 (_ BitVec 32))
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool true)

(declare-fun reset ((_ BitVec 32)) us_rep)

(declare-fun reset__function_guard (us_rep (_ BitVec 32)) Bool)

;; reset__post_axiom
  (assert true)

(declare-fun initiator () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun to_state (Int) (_ BitVec 32))

(declare-fun to_state__function_guard ((_ BitVec 32) Int) Bool)

;; to_state__post_axiom
  (assert
  (forall ((s Int))
  (! (=> (dynamic_invariant1 s true true true)
     (let ((result (to_state s)))
     (=> (to_state__function_guard result s) (dynamic_invariant3 result true
     false true)))) :pattern ((to_state s)) )))

;; to_state__def_axiom
  (assert
  (forall ((s Int))
  (! (=>
     (and (dynamic_invariant1 s true true true) (to_state__function_guard
     (to_state s) s)) (= (to_state s) ((_ int2bv 32) s))) :pattern ((to_state
                                                                    s)) )))

(declare-fun to_state__2 (Int) (_ BitVec 32))

(declare-fun to_state__2__function_guard ((_ BitVec 32) Int) Bool)

;; to_state__2__post_axiom
  (assert
  (forall ((s Int))
  (! (=> (dynamic_invariant s true true true)
     (let ((result (to_state__2 s)))
     (=> (to_state__2__function_guard result s) (dynamic_invariant3 result
     true false true)))) :pattern ((to_state__2 s)) )))

;; to_state__2__def_axiom
  (assert
  (forall ((s Int))
  (! (=>
     (and (dynamic_invariant s true true true) (to_state__2__function_guard
     (to_state__2 s) s)) (= (to_state__2 s) ((_ int2bv 32) s))) :pattern (
  (to_state__2 s)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun to_rep3 (long_long_integer) Int)

(declare-fun of_rep3 (Int) long_long_integer)

;; inversion_axiom
  (assert
  (forall ((x long_long_integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x long_long_integer)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun last2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (long_long_integer long_long_integer) Bool)

(declare-fun dummy8 () long_long_integer)

(declare-datatypes ()
((t4b__ref (mk_t4b__ref (t4b__content long_long_integer)))))
(define-fun t4b__ref___projection ((a t4b__ref)) long_long_integer (t4b__content
                                                                   a))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort t5b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 623)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (t5b t5b) Bool)

(declare-fun dummy9 () t5b)

(declare-datatypes () ((t5b__ref (mk_t5b__ref (t5b__content t5b)))))
(define-fun t5b__ref___projection ((a t5b__ref)) t5b (t5b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant4 ((temp___expr_27 Int) (temp___is_init_24 Bool)
  (temp___skip_constant_25 Bool)
  (temp___do_toplevel_26 Bool)) Bool (=>
                                     (or (= temp___is_init_24 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range2 temp___expr_27)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun i () Int)

(declare-fun j () Int)

(declare-fun g__split_fields () (Array Int unsigned_32))

(declare-fun g__split_fields1 () state_range)

(declare-fun k () Int)

(declare-fun k1 () Int)

(declare-fun random__reset__2__R3b__g__assume () (Array Int unsigned_32))

(declare-fun random__reset__2__R3b__g__assume1 () state_range)

(declare-fun temp___285 () Int)

(declare-fun temp___284 () Int)

(declare-fun temp___283 () Int)

(declare-fun temp___281 () (Array Int unsigned_32))

(declare-fun temp___2811 () state_range)

(declare-fun o () Int)

(declare-fun o1 () unsigned_32)

(declare-fun o2 () Int)

(declare-fun o3 () unsigned_32)

(declare-fun o4 () (_ BitVec 32))

(declare-fun o5 () (_ BitVec 32))

(declare-fun o6 () (_ BitVec 32))

(declare-fun o7 () (_ BitVec 32))

(declare-fun o8 () (_ BitVec 32))

(declare-fun o9 () Int)

(declare-fun o10 () unsigned_32)

(declare-fun o11 () (_ BitVec 32))

(declare-fun o12 () (_ BitVec 32))

(declare-fun o13 () (_ BitVec 32))

(declare-fun o14 () (_ BitVec 32))

(declare-fun o15 () (_ BitVec 32))

(declare-fun o16 () unsigned_32)

(declare-fun o17 () (Array Int unsigned_32))

(declare-fun o18 () (Array Int unsigned_32))

(declare-fun o19 () state_range)

(declare-fun temp___276 () (Array Int unsigned_32))

(declare-fun temp___2761 () state_range)

(declare-fun o20 () unsigned_32)

(declare-fun o21 () (Array Int unsigned_32))

(declare-fun o22 () (Array Int unsigned_32))

(declare-fun o23 () state_range)

(declare-fun temp___280 () (Array Int unsigned_32))

(declare-fun temp___2801 () state_range)

(declare-fun o24 () Int)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () unsigned_32)

(declare-fun o28 () Int)

(declare-fun o29 () unsigned_32)

(declare-fun o30 () (_ BitVec 32))

(declare-fun o31 () (_ BitVec 32))

(declare-fun o32 () (_ BitVec 32))

(declare-fun o33 () (_ BitVec 32))

(declare-fun o34 () (_ BitVec 32))

(declare-fun o35 () (_ BitVec 32))

(declare-fun o36 () (_ BitVec 32))

(declare-fun o37 () (_ BitVec 32))

(declare-fun o38 () unsigned_32)

(declare-fun o39 () (Array Int unsigned_32))

(declare-fun o40 () us_split_fields)

(declare-fun temp___295 () us_rep)

(declare-fun result () int__ref)

(declare-fun i1 () Int)

(declare-fun result1 () int__ref)

(declare-fun j1 () Int)

(declare-fun result2 () us_split_fields__ref)

(declare-fun g__split_fields2 () us_split_fields)

(declare-fun result3 () int__ref)

(declare-fun k2 () Int)

(declare-fun result4 () us_split_fields__ref)

(declare-fun g__split_fields3 () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun g__split_fields4 () us_split_fields)

(declare-fun result6 () int__ref)

(declare-fun i2 () Int)

(declare-fun result7 () int__ref)

(declare-fun i3 () Int)

(declare-fun result8 () int__ref)

(declare-fun j2 () Int)

(declare-fun i4 () Int)

(declare-fun j3 () Int)

(declare-fun g__split_fields5 () us_split_fields)

(declare-fun k3 () Int)

(declare-fun i5 () int__ref)

(declare-fun j4 () int__ref)

(declare-fun g__split_fields6 () us_split_fields__ref)

(declare-fun k4 () int__ref)

(declare-fun i6 () Int)

(declare-fun j5 () Int)

(declare-fun g__split_fields7 () us_split_fields)

(declare-fun k5 () Int)

(declare-fun i7 () int__ref)

(declare-fun j6 () int__ref)

(declare-fun g__split_fields8 () us_split_fields__ref)

(declare-fun k6 () int__ref)

(declare-fun i8 () Int)

(declare-fun j7 () Int)

(declare-fun g__split_fields9 () us_split_fields)

(declare-fun k7 () Int)

(declare-fun result9 () int__ref)

(declare-fun k8 () Int)

(declare-fun result10 () us_split_fields__ref)

(declare-fun g__split_fields10 () us_split_fields)

(define-fun random__reset__2__R3b__g__assume2 () us_rep (mk___rep
                                                        (mk___split_fields
                                                        random__reset__2__R3b__g__assume
                                                        random__reset__2__R3b__g__assume1)))

;; H
  (assert (dynamic_invariant2 initiator true false true))

;; H
  (assert
  (and (= (to_rep2 (first (rt initiator))) 0) (<= 1 (length initiator))))

;; H
  (assert (= result (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (in_range4 i1))

;; H
  (assert (= result1 (mk_int__ref j)))

;; H
  (assert (= j1 0))

;; H
  (assert (in_range3 j1))

;; H
  (assert
  (and (= random__reset__2__R3b__g__assume2 (reset ((_ int2bv 32) 19650218)))
  (reset__function_guard random__reset__2__R3b__g__assume2
  ((_ int2bv 32) 19650218))))

;; H
  (assert
  (= result2 (mk___split_fields__ref
             (mk___split_fields g__split_fields g__split_fields1))))

;; H
  (assert
  (= g__split_fields2 (mk___split_fields random__reset__2__R3b__g__assume
                      random__reset__2__R3b__g__assume1)))

;; H
  (assert (= result3 (mk_int__ref k)))

;; H
  (assert (= k2 1))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= temp___285 j1)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= temp___284 i1)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= temp___283 k2)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields2 (mk___split_fields temp___281 temp___2811))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and (and (= o13 (to_state__2 j1)) (to_state__2__function_guard o13 j1))
  (= o13 ((_ int2bv 32) j1)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and (<= (to_rep2 (first (rt initiator))) j1)
  (<= j1 (to_rep2 (last (rt initiator)))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  o9 j1)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o10 (select (elts initiator) o9))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o11 (to_rep o10))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and (<= 0 (- i1 1)) (<= (- i1 1) 623))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o2 (- i1 1))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o3 (select (rec__random__generator__state g__split_fields2) o2))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o4 (to_rep o3))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o5 (bvlshr o4 ((_ int2bv 32) 30)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and (<= 0 (- i1 1)) (<= (- i1 1) 623))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o (- i1 1))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o1 (select (rec__random__generator__state g__split_fields2) o))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o6 (to_rep o1))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o7 (bvxor o6 o5))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o8 (bvmul o7 ((_ int2bv 32) 1664525)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o12 (bvxor (to_rep
                (select (rec__random__generator__state g__split_fields2) 
                i1)) o8))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o14 (bvadd o12 o11))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o15 (bvadd o14 o13))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= (to_rep o16) o15)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o17 (store (rec__random__generator__state g__split_fields2) i1 o16))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= o17 o18)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= (rec__random__generator__index g__split_fields2) o19)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= temp___276 o18)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= temp___2761 o19)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= result4 (mk___split_fields__ref g__split_fields2))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields3 (mk___split_fields temp___276 temp___2761))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623)
  (= (to_rep o20) (to_rep
                  (select (rec__random__generator__state g__split_fields3) 623))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623)
  (= o21 (store (rec__random__generator__state g__split_fields3) 0 o20)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= o21 o22))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= (rec__random__generator__index g__split_fields3) o23))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= temp___280 o22))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= temp___2801 o23))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= result5 (mk___split_fields__ref g__split_fields3)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623)
  (= g__split_fields4 (mk___split_fields temp___280 temp___2801)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= result6 (mk_int__ref i1)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= i1 623) (= i2 1))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= i1 623)) (and (= o24 (+ i1 1)) (in_range4 (+ i1 1))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= i1 623)) (= result7 (mk_int__ref i1)))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= i1 623)) (= i3 o24))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= i1 623)) (= g__split_fields4 g__split_fields3))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= i1 623)) (= i2 i3))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (= j1 (to_rep2 (last (rt initiator)))) (= o25 0))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (=> (not (= j1 (to_rep2 (last (rt initiator)))))
  (and (= o25 (+ j1 1)) (in_range1 (+ j1 1))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= result8 (mk_int__ref j1))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= j2 o25)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and (< 0 i4)
  (and (<= (to_rep2 (first (rt initiator))) j3)
  (<= j3 (to_rep2 (last (rt initiator))))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (and
  (and
  (and
  (and (= (rec__random__generator__index g__split_fields5) temp___2811)
  (=> (<= 1 (ite (< 624 (length initiator)) (length initiator) 624))
  (dynamic_property1 1
  (ite (< 624 (length initiator)) (length initiator) 624) k3)))
  (=> (<= 0 623) (in_range4 i4))) (=> (<= 0 2147483647) (in_range3 j3)))
  (and (<= 1 k3)
  (<= k3 (ite (< 624 (length initiator)) (length initiator) 624))))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= k3 (ite (< 624 (length initiator)) (length initiator) 624))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= k4 (mk_int__ref k3))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields6 (mk___split_fields__ref g__split_fields5))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= j4 (mk_int__ref j3))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= i5 (mk_int__ref i4))))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  k5 k3)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields7 g__split_fields5)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  j5 j3)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  i6 i4)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  k6 k4)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields8 g__split_fields6)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  j6 j4)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  i7 i5)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  k7 k5)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624)))
  (= g__split_fields9 g__split_fields7)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  j7 j5)))

;; H
  (assert
  (=>
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))) (= 
  i8 i6)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= k6 (mk_int__ref k2))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= g__split_fields8 (mk___split_fields__ref g__split_fields2))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= j6 (mk_int__ref j1))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= i7 (mk_int__ref i1))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= k7 k2)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= g__split_fields9 g__split_fields2)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= j7 j1)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 k2)
  (<= k2 (ite (< 624 (length initiator)) (length initiator) 624))))
  (= i8 i1)))

;; H
  (assert (= result9 (mk_int__ref k1)))

;; H
  (assert (= k8 1))

;; H
  (assert (<= 1 k8))

;; H
  (assert (<= k8 623))

;; H
  (assert
  (and
  (and (= o35 (to_state (int__content i7))) (to_state__function_guard 
  o35 (int__content i7))) (= o35 ((_ int2bv 32) (int__content i7)))))

;; H
  (assert
  (and (<= 0 (- (int__content i7) 1)) (<= (- (int__content i7) 1) 623)))

;; H
  (assert (= o28 (- (int__content i7) 1)))

;; H
  (assert
  (= o29 (select (rec__random__generator__state
                 (us_split_fields__content g__split_fields8)) o28)))

;; H
  (assert (= o30 (to_rep o29)))

;; H
  (assert (= o31 (bvlshr o30 ((_ int2bv 32) 30))))

;; H
  (assert
  (and (<= 0 (- (int__content i7) 1)) (<= (- (int__content i7) 1) 623)))

;; H
  (assert (= o26 (- (int__content i7) 1)))

;; H
  (assert
  (= o27 (select (rec__random__generator__state
                 (us_split_fields__content g__split_fields8)) o26)))

;; H
  (assert (= o32 (to_rep o27)))

;; H
  (assert (= o33 (bvxor o32 o31)))

;; H
  (assert (= o34 (bvmul o33 ((_ int2bv 32) 1566083941))))

;; H
  (assert
  (= o36 (bvxor (to_rep
                (select (rec__random__generator__state
                        (us_split_fields__content g__split_fields8)) 
                (int__content i7))) o34)))

;; H
  (assert (= o37 (bvsub o36 o35)))

;; H
  (assert (= (to_rep o38) o37))

;; H
  (assert
  (= o39 (store (rec__random__generator__state
                (us_split_fields__content g__split_fields8)) (int__content
                                                             i7) o38)))

;; H
  (assert
  (= o40 (mk___split_fields o39
         (rec__random__generator__index
         (us_split_fields__content g__split_fields8)))))

;; H
  (assert (= temp___295 (mk___rep o40)))

;; H
  (assert (= result10 g__split_fields8))

;; H
  (assert (= g__split_fields10 (us_split_fields1 temp___295)))

;; H
  (assert (not (= (int__content i7) 623)))

(assert
;; WP_parameter_def
 ;; File "random.ads", line 68, characters 0-0
  (not (in_range4 (+ (int__content i7) 1))))
(check-sat)
