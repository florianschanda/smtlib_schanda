;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-fun divides (Int Int) Bool)

(declare-fun divides__function_guard (Bool Int Int) Bool)

;; divides__post_axiom
  (assert true)

;; divides__def_axiom
  (assert
  (forall ((a Int) (b Int))
  (! (=> (divides__function_guard (divides a b) a b)
     (= (= (divides a b) true) (= (mod2 b a) 0))) :pattern ((divides a b)) )))

(declare-fun a () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun an () Int)

(declare-fun bn () Int)

(declare-fun c () Int)

(declare-fun o () Int)

(declare-fun temp___154 () Int)

(declare-fun temp___153 () Int)

(declare-fun temp___152 () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun c1 () Int)

(declare-fun result () Int)

(declare-fun an1 () Int)

(declare-fun result1 () Int)

(declare-fun bn1 () Int)

(declare-fun result2 () Int)

(declare-fun c2 () Int)

(declare-fun result3 () Int)

(declare-fun an2 () Int)

(declare-fun result4 () Int)

(declare-fun bn2 () Int)

(declare-fun an3 () Int)

(declare-fun bn3 () Int)

(declare-fun c3 () Int)

(declare-fun an4 () Int)

(declare-fun bn4 () Int)

(declare-fun c4 () Int)

(declare-fun an5 () Int)

(declare-fun bn5 () Int)

(declare-fun c5 () Int)

(declare-fun an6 () Int)

(declare-fun bn6 () Int)

(declare-fun c6 () Int)

(declare-fun an7 () Int)

(declare-fun bn7 () Int)

(declare-fun c7 () Int)

(define-fun c8 () int__ref (mk_int__ref c6))

(define-fun c9 () int__ref (mk_int__ref c))

;; H
  (assert (in_range2 a))

;; H
  (assert (in_range2 b))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref an)))

;; H
  (assert (= an1 a))

;; H
  (assert (in_range2 an1))

;; H
  (assert (and (= o b) (in_range1 b)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref bn)))

;; H
  (assert (= bn1 o))

;; H
  (assert (in_range1 bn1))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 c)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x c2) x c2)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an2) x an2)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an2) x an2)))

;; H
  (assert (divides__function_guard (divides an2 c2) an2 c2))

;; H
  (assert
  (forall ((x Int)) (divides__function_guard (divides x (mod2 c2 an2)) x
  (mod2 c2 an2))))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x a) x a)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x b) x b)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an3) x an3)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x bn3) x bn3)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x c2) x c2)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an2) x an2)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an2) x an2)))

;; H
  (assert (divides__function_guard (divides an2 c2) an2 c2))

;; H
  (assert
  (forall ((x Int)) (divides__function_guard (divides x (mod2 c2 an2)) x
  (mod2 c2 an2))))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x a) x a)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x b) x b)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x an3) x an3)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x bn3) x bn3)))

;; H
  (assert (=> (not (= bn1 0)) (= temp___154 c)))

;; H
  (assert (=> (not (= bn1 0)) (= temp___153 bn1)))

;; H
  (assert (=> (not (= bn1 0)) (= temp___152 an1)))

;; H
  (assert (=> (not (= bn1 0)) (= (mk_int__ref result2) c9)))

;; H
  (assert (=> (not (= bn1 0)) (= c2 an1)))

;; H
  (assert (=> (not (= bn1 0)) (and (= o1 bn1) (in_range2 bn1))))

;; H
  (assert (=> (not (= bn1 0)) (= an1 result3)))

;; H
  (assert (=> (not (= bn1 0)) (= an2 o1)))

;; H
  (assert
  (=> (not (= bn1 0)) (and (= o2 (mod2 c2 bn1)) (in_range1 (mod2 c2 bn1)))))

;; H
  (assert (=> (not (= bn1 0)) (= bn1 result4)))

;; H
  (assert (=> (not (= bn1 0)) (= bn2 o2)))

;; H
  (assert
  (=> (not (= bn1 0))
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 2147483647))
  (= (and (= (divides x c2) true) (= (divides x an2) true))
  (and (= (divides x an2) true)
  (or (= (divides an2 c2) true) (= (divides x (mod2 c2 an2)) true))))))))

;; H
  (assert
  (=> (not (= bn1 0))
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 2147483647))
  (= (and (= (divides x a) true) (= (divides x b) true))
  (and (= (divides x an3) true) (or (= bn3 0) (= (divides x bn3) true))))))))

;; H
  (assert
  (=> (not (= bn1 0))
  (and
  (and (=> (<= 1 2147483647) (in_range2 an3))
  (=> (<= 0 2147483647) (in_range1 bn3)))
  (=> (<= 1 2147483647) (in_range2 c3)))))

;; H
  (assert (=> (not (= bn1 0)) (= bn3 0)))

;; H
  (assert (=> (not (= bn1 0)) (= c3 c4)))

;; H
  (assert (=> (not (= bn1 0)) (= bn3 bn4)))

;; H
  (assert (=> (not (= bn1 0)) (= an3 an4)))

;; H
  (assert (=> (not (= bn1 0)) (= c5 c3)))

;; H
  (assert (=> (not (= bn1 0)) (= bn5 bn3)))

;; H
  (assert (=> (not (= bn1 0)) (= an5 an3)))

;; H
  (assert (=> (not (= bn1 0)) (= c8 (mk_int__ref c4))))

;; H
  (assert (=> (not (= bn1 0)) (= (mk_int__ref bn6) (mk_int__ref bn4))))

;; H
  (assert (=> (not (= bn1 0)) (= (mk_int__ref an6) (mk_int__ref an4))))

;; H
  (assert (=> (not (= bn1 0)) (= c7 c5)))

;; H
  (assert (=> (not (= bn1 0)) (= bn7 bn5)))

;; H
  (assert (=> (not (= bn1 0)) (= an7 an5)))

;; H
  (assert (=> (not (not (= bn1 0))) (= c8 c9)))

;; H
  (assert (=> (not (not (= bn1 0))) (= bn1 bn6)))

;; H
  (assert (=> (not (not (= bn1 0))) (= an1 an6)))

;; H
  (assert (=> (not (not (= bn1 0))) (= c7 c1)))

;; H
  (assert (=> (not (not (= bn1 0))) (= bn7 bn1)))

;; H
  (assert (=> (not (not (= bn1 0))) (= an7 an1)))

;; H
  (assert (divides__function_guard (divides an6 an6) an6 an6))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (divides an6 an6) true)))
(check-sat)
