;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort track_opt_id 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (track_opt_id track_opt_id) Bool)

(declare-fun dummy () track_opt_id)

(declare-datatypes ()
((track_opt_id__ref
 (mk_track_opt_id__ref (track_opt_id__content track_opt_id)))))
(define-fun track_opt_id__ref___projection ((a track_opt_id__ref)) track_opt_id 
  (track_opt_id__content a))

(define-fun dynamic_invariant ((temp___expr_202 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (<= 0 8)) (in_range1 temp___expr_202)))

(declare-sort track_id 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (track_id track_id) Bool)

(declare-fun dummy1 () track_id)

(declare-datatypes ()
((track_id__ref (mk_track_id__ref (track_id__content track_id)))))
(define-fun track_id__ref___projection ((a track_id__ref)) track_id (track_id__content
                                                                    a))

(declare-fun to_rep (track_id) Int)

(declare-fun of_rep (Int) track_id)

;; inversion_axiom
  (assert
  (forall ((x track_id))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x track_id)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort prev_id 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (prev_id prev_id) Bool)

(declare-fun dummy2 () prev_id)

(declare-datatypes ()
((prev_id__ref (mk_prev_id__ref (prev_id__content prev_id)))))
(define-fun prev_id__ref___projection ((a prev_id__ref)) prev_id (prev_id__content
                                                                 a))

(declare-fun no_track_precedes_itself (tuple0) Bool)

(declare-fun no_track_precedes_itself__function_guard (Bool tuple0) Bool)

(declare-sort location 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (location location) Bool)

(declare-fun dummy3 () location)

(declare-datatypes ()
((location__ref (mk_location__ref (location__content location)))))
(define-fun location__ref___projection ((a location__ref)) location (location__content
                                                                    a))

(declare-fun to_rep1 (location) Int)

(declare-fun of_rep1 (Int) location)

;; inversion_axiom
  (assert
  (forall ((x location))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x location)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort positive 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (positive positive) Bool)

(declare-fun dummy4 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep2 (positive) Int)

(declare-fun of_rep2 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__trains__track__from location)(rec__trains__track__to location)(rec__trains__track__length positive)))))
(define-fun us_split_fields_From__projection ((a us_split_fields)) location 
  (rec__trains__track__from a))

(define-fun us_split_fields_To__projection ((a us_split_fields)) location 
  (rec__trains__track__to a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) positive 
  (rec__trains__track__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__trains__track__from (us_split_fields1 a))) 
                        (to_rep1
                        (rec__trains__track__from (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__trains__track__to (us_split_fields1 a))) 
                        (to_rep1
                        (rec__trains__track__to (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__trains__track__length (us_split_fields1 a))) 
                        (to_rep2
                        (rec__trains__track__length (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun trains__track__from__first__bit () Int)

(declare-fun trains__track__from__last__bit () Int)

(declare-fun trains__track__from__position () Int)

;; trains__track__from__first__bit_axiom
  (assert (<= 0 trains__track__from__first__bit))

;; trains__track__from__last__bit_axiom
  (assert (< trains__track__from__first__bit trains__track__from__last__bit))

;; trains__track__from__position_axiom
  (assert (<= 0 trains__track__from__position))

(declare-fun trains__track__to__first__bit () Int)

(declare-fun trains__track__to__last__bit () Int)

(declare-fun trains__track__to__position () Int)

;; trains__track__to__first__bit_axiom
  (assert (<= 0 trains__track__to__first__bit))

;; trains__track__to__last__bit_axiom
  (assert (< trains__track__to__first__bit trains__track__to__last__bit))

;; trains__track__to__position_axiom
  (assert (<= 0 trains__track__to__position))

(declare-fun trains__track__length__first__bit () Int)

(declare-fun trains__track__length__last__bit () Int)

(declare-fun trains__track__length__position () Int)

;; trains__track__length__first__bit_axiom
  (assert (<= 0 trains__track__length__first__bit))

;; trains__track__length__last__bit_axiom
  (assert
  (< trains__track__length__first__bit trains__track__length__last__bit))

;; trains__track__length__position_axiom
  (assert (<= 0 trains__track__length__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((track__ref (mk_track__ref (track__content us_rep)))))
(define-fun track__ref___projection ((a track__ref)) us_rep (track__content
                                                            a))

(declare-fun to_rep3 (track_opt_id) Int)

(declare-fun of_rep3 (Int) track_opt_id)

;; inversion_axiom
  (assert
  (forall ((x track_opt_id))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x track_opt_id)) (! (in_range1
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq5 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq5 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun tracks () (Array Int us_rep))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int track_opt_id))))))
(declare-fun slide1 ((Array Int track_opt_id) Int
  Int) (Array Int track_opt_id))

;; slide_eq
  (assert
  (forall ((a (Array Int track_opt_id)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int track_opt_id)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int track_opt_id) Int Int
  (Array Int track_opt_id) Int Int) (Array Int track_opt_id))

;; concat_def
  (assert
  (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (track_opt_id Int) (Array Int track_opt_id))

;; singleton_def
  (assert
  (forall ((v track_opt_id))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int track_opt_id)) (a__first Int)
  (a__last Int) (b (Array Int track_opt_id)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_143 Int))
                           (=>
                           (and (<= a__first temp___idx_143)
                           (<= temp___idx_143 a__last))
                           (= (to_rep3 (select a temp___idx_143)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_143)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_143 Int))
  (=> (and (<= a__first temp___idx_143) (<= temp___idx_143 a__last))
  (= (to_rep3 (select a temp___idx_143)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_143)))))))))))

(declare-fun compare ((Array Int track_opt_id) Int Int
  (Array Int track_opt_id) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq7 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq7 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int track_opt_id)) (b (Array Int track_opt_id)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq7 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy6 () (Array Int track_opt_id))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int track_opt_id)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int track_opt_id)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int track_opt_id)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int track_opt_id))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int track_opt_id))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int track_opt_id))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 ((Array Int track_opt_id)
  (Array Int track_opt_id)) Bool)

(declare-datatypes ()
((map__ref2
 (mk_map__ref2 (map__content2 (Array Int (Array Int track_opt_id)))))))
(declare-fun slide2 ((Array Int (Array Int track_opt_id)) Int
  Int) (Array Int (Array Int track_opt_id)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int track_opt_id))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int track_opt_id))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int track_opt_id)) Int Int
  (Array Int (Array Int track_opt_id)) Int
  Int) (Array Int (Array Int track_opt_id)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int track_opt_id)))
  (b (Array Int (Array Int track_opt_id))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int track_opt_id)
  Int) (Array Int (Array Int track_opt_id)))

;; singleton_def
  (assert
  (forall ((v (Array Int track_opt_id)))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq8 ((a (Array Int (Array Int track_opt_id))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int track_opt_id))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_144 Int))
                           (=>
                           (and (<= a__first temp___idx_144)
                           (<= temp___idx_144 a__last))
                           (= (bool_eq7 (select a temp___idx_144) 1 3
                              (select b (+ (- b__first a__first) temp___idx_144))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int track_opt_id)))
  (b (Array Int (Array Int track_opt_id))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_144 Int))
  (=> (and (<= a__first temp___idx_144) (<= temp___idx_144 a__last))
  (= (bool_eq7 (select a temp___idx_144) 1 3
     (select b (+ (- b__first a__first) temp___idx_144)) 1 3) true))))))))

(declare-fun previous_tracks () (Array Int (Array Int track_opt_id)))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

;; no_track_precedes_itself__post_axiom
  (assert true)

;; no_track_precedes_itself__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (=> (no_track_precedes_itself__function_guard
     (no_track_precedes_itself us_void_param) us_void_param)
     (= (= (no_track_precedes_itself us_void_param) true)
     (forall ((track Int))
     (=> (and (<= 1 track) (<= track 8))
     (forall ((id Int))
     (=> (and (<= 1 id) (<= id 3))
     (not
     (= (to_rep3
        (let ((temp___227 (select previous_tracks (to_rep1
                                                  (rec__trains__track__from
                                                  (us_split_fields1
                                                  (select tracks track)))))))
        (select temp___227 id))) track)))))))) :pattern ((no_track_precedes_itself
                                                         us_void_param)) )))

(declare-sort train_id 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (train_id train_id) Bool)

(declare-fun dummy7 () train_id)

(declare-datatypes ()
((train_id__ref (mk_train_id__ref (train_id__content train_id)))))
(define-fun train_id__ref___projection ((a train_id__ref)) train_id (train_id__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_231 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)) Bool (=>
                                      (or (= temp___is_init_228 true)
                                      (<= 1 10)) (in_range6 temp___expr_231)))

(declare-sort natural 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (natural natural) Bool)

(declare-fun dummy8 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep4 (natural) Int)

(declare-fun of_rep4 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range7 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__trains__train_position__track_begin track_id)(rec__trains__train_position__pos_begin natural)(rec__trains__train_position__track_end track_id)))))
(define-fun us_split_fields_Track_Begin__projection ((a us_split_fields2)) track_id 
  (rec__trains__train_position__track_begin a))

(define-fun us_split_fields_Pos_Begin__projection ((a us_split_fields2)) natural 
  (rec__trains__train_position__pos_begin a))

(define-fun us_split_fields_Track_End__projection ((a us_split_fields2)) track_id 
  (rec__trains__train_position__track_end a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq11 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__trains__train_position__track_begin
                            (us_split_fields3 a))) (to_rep
                                                   (rec__trains__train_position__track_begin
                                                   (us_split_fields3 b))))
                         (= (to_rep4
                            (rec__trains__train_position__pos_begin
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__trains__train_position__pos_begin
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__trains__train_position__track_end
                            (us_split_fields3 a))) (to_rep
                                                   (rec__trains__train_position__track_end
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun trains__train_position__track_begin__first__bit () Int)

(declare-fun trains__train_position__track_begin__last__bit () Int)

(declare-fun trains__train_position__track_begin__position () Int)

;; trains__train_position__track_begin__first__bit_axiom
  (assert (<= 0 trains__train_position__track_begin__first__bit))

;; trains__train_position__track_begin__last__bit_axiom
  (assert
  (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))

;; trains__train_position__track_begin__position_axiom
  (assert (<= 0 trains__train_position__track_begin__position))

(declare-fun trains__train_position__pos_begin__first__bit () Int)

(declare-fun trains__train_position__pos_begin__last__bit () Int)

(declare-fun trains__train_position__pos_begin__position () Int)

;; trains__train_position__pos_begin__first__bit_axiom
  (assert (<= 0 trains__train_position__pos_begin__first__bit))

;; trains__train_position__pos_begin__last__bit_axiom
  (assert
  (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))

;; trains__train_position__pos_begin__position_axiom
  (assert (<= 0 trains__train_position__pos_begin__position))

(declare-fun trains__train_position__track_end__first__bit () Int)

(declare-fun trains__train_position__track_end__last__bit () Int)

(declare-fun trains__train_position__track_end__position () Int)

;; trains__train_position__track_end__first__bit_axiom
  (assert (<= 0 trains__train_position__track_end__first__bit))

;; trains__train_position__track_end__last__bit_axiom
  (assert
  (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))

;; trains__train_position__track_end__position_axiom
  (assert (<= 0 trains__train_position__track_end__position))

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((train_position__ref
 (mk_train_position__ref (train_position__content us_rep1)))))
(define-fun train_position__ref___projection ((a train_position__ref)) us_rep1 
  (train_position__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep1))))))
(declare-fun slide3 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq12 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_182 Int))
                           (=>
                           (and (<= a__first temp___idx_182)
                           (<= temp___idx_182 a__last))
                           (= (bool_eq11 (select a temp___idx_182)
                              (select b (+ (- b__first a__first) temp___idx_182))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_182 Int))
  (=> (and (<= a__first temp___idx_182) (<= temp___idx_182 a__last))
  (= (bool_eq11 (select a temp___idx_182)
     (select b (+ (- b__first a__first) temp___idx_182))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun one_train_at_most_per_track (Int (Array Int us_rep1)) Bool)

(declare-fun one_train_at_most_per_track__function_guard (Bool Int
  (Array Int us_rep1)) Bool)

;; one_train_at_most_per_track__post_axiom
  (assert true)

;; one_train_at_most_per_track__def_axiom
  (assert
  (forall ((trains__cur_num_trains Int))
  (forall ((trains__trains (Array Int us_rep1)))
  (! (=> (one_train_at_most_per_track__function_guard
     (one_train_at_most_per_track trains__cur_num_trains trains__trains)
     trains__cur_num_trains trains__trains)
     (=
     (= (one_train_at_most_per_track trains__cur_num_trains trains__trains) true)
     (forall ((train Int))
     (=> (and (<= 1 train) (<= train trains__cur_num_trains))
     (forall ((other_train Int))
     (=> (and (<= 1 other_train) (<= other_train trains__cur_num_trains))
     (=> (not (= other_train train))
     (and
     (and
     (and
     (not
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 (select trains__trains train)))) (to_rep
                                                           (rec__trains__train_position__track_begin
                                                           (us_split_fields3
                                                           (select trains__trains other_train))))))
     (not
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 (select trains__trains train)))) (to_rep
                                                           (rec__trains__train_position__track_end
                                                           (us_split_fields3
                                                           (select trains__trains other_train)))))))
     (not
     (= (to_rep
        (rec__trains__train_position__track_end
        (us_split_fields3 (select trains__trains train)))) (to_rep
                                                           (rec__trains__train_position__track_begin
                                                           (us_split_fields3
                                                           (select trains__trains other_train)))))))
     (not
     (= (to_rep
        (rec__trains__train_position__track_end
        (us_split_fields3 (select trains__trains train)))) (to_rep
                                                           (rec__trains__train_position__track_end
                                                           (us_split_fields3
                                                           (select trains__trains other_train)))))))))))))) :pattern (
  (one_train_at_most_per_track trains__cur_num_trains trains__trains)) ))))

(declare-sort signal 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (signal signal) Bool)

(declare-fun dummy10 () signal)

(declare-datatypes ()
((signal__ref (mk_signal__ref (signal__content signal)))))
(define-fun signal__ref___projection ((a signal__ref)) signal (signal__content
                                                              a))

(declare-fun to_rep5 (signal) Int)

(declare-fun of_rep5 (Int) signal)

;; inversion_axiom
  (assert
  (forall ((x signal))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x signal)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int signal))))))
(declare-fun slide4 ((Array Int signal) Int Int) (Array Int signal))

;; slide_eq
  (assert
  (forall ((a (Array Int signal)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int signal)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int signal) Int Int (Array Int signal) Int
  Int) (Array Int signal))

;; concat_def
  (assert
  (forall ((a (Array Int signal)) (b (Array Int signal)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 (signal Int) (Array Int signal))

;; singleton_def
  (assert
  (forall ((v signal))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int signal)) (a__first Int) (a__last Int)
  (b (Array Int signal)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_183 Int))
                           (=>
                           (and (<= a__first temp___idx_183)
                           (<= temp___idx_183 a__last))
                           (= (to_rep5 (select a temp___idx_183)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_183)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int signal)) (b (Array Int signal)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_183 Int))
  (=> (and (<= a__first temp___idx_183) (<= temp___idx_183 a__last))
  (= (to_rep5 (select a temp___idx_183)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_183)))))))))))

(declare-fun compare1 ((Array Int signal) Int Int (Array Int signal) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int signal)) (b (Array Int signal)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq14 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int signal)) (b (Array Int signal)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq14 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep5 (select a (+ i 1))) (to_rep5 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int signal)) (b (Array Int signal)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq14 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep5 (select b (+ i 1))) (to_rep5 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun occupied_tracks_on_red (Int (Array Int us_rep1)
  (Array Int signal)) Bool)

(declare-fun occupied_tracks_on_red__function_guard (Bool Int
  (Array Int us_rep1) (Array Int signal)) Bool)

;; occupied_tracks_on_red__post_axiom
  (assert true)

;; occupied_tracks_on_red__def_axiom
  (assert
  (forall ((trains__cur_num_trains Int))
  (forall ((trains__trains (Array Int us_rep1)))
  (forall ((trains__track_signals (Array Int signal)))
  (! (=> (occupied_tracks_on_red__function_guard
     (occupied_tracks_on_red trains__cur_num_trains trains__trains
     trains__track_signals) trains__cur_num_trains trains__trains
     trains__track_signals)
     (=
     (= (occupied_tracks_on_red trains__cur_num_trains trains__trains
        trains__track_signals) true)
     (forall ((train Int))
     (=> (and (<= 1 train) (<= train trains__cur_num_trains))
     (and
     (= (to_rep5
        (select trains__track_signals (to_rep
                                      (rec__trains__train_position__track_begin
                                      (us_split_fields3
                                      (select trains__trains train)))))) 2)
     (= (to_rep5
        (select trains__track_signals (to_rep
                                      (rec__trains__train_position__track_end
                                      (us_split_fields3
                                      (select trains__trains train)))))) 2)))))) :pattern (
  (occupied_tracks_on_red trains__cur_num_trains trains__trains
  trains__track_signals)) )))))

(declare-fun get_previous_track (us_rep1 Int) Int)

(declare-fun get_previous_track__function_guard (Int us_rep1 Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_214 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (<= 1 3)) (in_range3 temp___expr_214)))

;; get_previous_track__post_axiom
  (assert
  (forall ((position us_rep1))
  (forall ((id Int))
  (! (=> (dynamic_invariant2 id true true true)
     (let ((result (get_previous_track position id)))
     (=> (get_previous_track__function_guard result position id)
     (dynamic_invariant result true false true)))) :pattern ((get_previous_track
                                                             position id)) ))))

;; get_previous_track__def_axiom
  (assert
  (forall ((position us_rep1))
  (forall ((id Int))
  (! (=>
     (and (dynamic_invariant2 id true true true)
     (get_previous_track__function_guard (get_previous_track position id)
     position id))
     (= (get_previous_track position id) (to_rep3
                                         (let ((temp___261 (select previous_tracks 
                                         (to_rep1
                                         (rec__trains__track__from
                                         (us_split_fields1
                                         (select tracks (to_rep
                                                        (rec__trains__train_position__track_end
                                                        (us_split_fields3
                                                        position))))))))))
                                         (select temp___261 id))))) :pattern (
  (get_previous_track position id)) ))))

(declare-fun get_other_previous_track (us_rep1 Int) Int)

(declare-fun get_other_previous_track__function_guard (Int us_rep1 Int) Bool)

;; get_other_previous_track__post_axiom
  (assert
  (forall ((position us_rep1))
  (forall ((id Int))
  (! (=> (dynamic_invariant2 id true true true)
     (let ((result (get_other_previous_track position id)))
     (=> (get_other_previous_track__function_guard result position id)
     (dynamic_invariant result true false true)))) :pattern ((get_other_previous_track
                                                             position id)) ))))

;; get_other_previous_track__def_axiom
  (assert
  (forall ((position us_rep1))
  (forall ((id Int))
  (! (=>
     (and (dynamic_invariant2 id true true true)
     (get_other_previous_track__function_guard
     (get_other_previous_track position id) position id))
     (= (get_other_previous_track position id) (ite (= (to_rep3
                                                       (let ((temp___265 (select 
                                                       previous_tracks 
                                                       (to_rep1
                                                       (rec__trains__track__from
                                                       (us_split_fields1
                                                       (select tracks 
                                                       (to_rep
                                                       (rec__trains__train_position__track_begin
                                                       (us_split_fields3
                                                       position))))))))))
                                                       (select temp___265 id))) 
                                               (to_rep
                                               (rec__trains__train_position__track_end
                                               (us_split_fields3 position))))
                                               0
                                               (to_rep3
                                               (let ((temp___264 (select 
                                               previous_tracks (to_rep1
                                                               (rec__trains__track__from
                                                               (us_split_fields1
                                                               (select 
                                                               tracks 
                                                               (to_rep
                                                               (rec__trains__train_position__track_begin
                                                               (us_split_fields3
                                                               position))))))))))
                                               (select temp___264 id)))))) :pattern (
  (get_other_previous_track position id)) ))))

(declare-fun is_previous_track (us_rep1 Int) Bool)

(declare-fun is_previous_track__function_guard (Bool us_rep1 Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_208 Int)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (<= 1 8)) (in_range2 temp___expr_208)))

;; is_previous_track__post_axiom
  (assert true)

;; is_previous_track__def_axiom
  (assert
  (forall ((position us_rep1))
  (forall ((track Int))
  (! (=> (is_previous_track__function_guard
     (is_previous_track position track) position track)
     (and
     (forall ((id Int)) (get_previous_track__function_guard
     (get_previous_track position id) position id))
     (and
     (forall ((id Int)) (get_other_previous_track__function_guard
     (get_other_previous_track position id) position id))
     (= (= (is_previous_track position track) true)
     (exists ((id Int))
     (and (and (<= 1 id) (<= id 3))
     (or (= track (get_previous_track position id))
     (= track (get_other_previous_track position id))))))))) :pattern (
  (is_previous_track position track)) ))))

(declare-fun previous_tracks_on_orange_or_red (Int (Array Int us_rep1)
  (Array Int signal)) Bool)

(declare-fun previous_tracks_on_orange_or_red__function_guard (Bool Int
  (Array Int us_rep1) (Array Int signal)) Bool)

;; previous_tracks_on_orange_or_red__post_axiom
  (assert true)

;; previous_tracks_on_orange_or_red__def_axiom
  (assert
  (forall ((trains__cur_num_trains Int))
  (forall ((trains__trains (Array Int us_rep1)))
  (forall ((trains__track_signals (Array Int signal)))
  (! (=> (previous_tracks_on_orange_or_red__function_guard
     (previous_tracks_on_orange_or_red trains__cur_num_trains trains__trains
     trains__track_signals) trains__cur_num_trains trains__trains
     trains__track_signals)
     (and
     (forall ((train Int) (id Int)) (get_previous_track__function_guard
     (get_previous_track (select trains__trains train) id)
     (select trains__trains train) id))
     (and
     (forall ((train Int) (id Int)) (get_previous_track__function_guard
     (get_previous_track (select trains__trains train) id)
     (select trains__trains train) id))
     (and
     (forall ((train Int) (id Int)) (get_other_previous_track__function_guard
     (get_other_previous_track (select trains__trains train) id)
     (select trains__trains train) id))
     (and
     (forall ((train Int) (id Int)) (get_other_previous_track__function_guard
     (get_other_previous_track (select trains__trains train) id)
     (select trains__trains train) id))
     (=
     (= (previous_tracks_on_orange_or_red trains__cur_num_trains
        trains__trains trains__track_signals) true)
     (forall ((train Int))
     (=> (and (<= 1 train) (<= train trains__cur_num_trains))
     (forall ((id Int))
     (=> (and (<= 1 id) (<= id 3))
     (and
     (=> (not (= (get_previous_track (select trains__trains train) id) 0))
     (let ((temp___283 (to_rep5
                       (select trains__track_signals (get_previous_track
                                                     (select trains__trains train)
                                                     id)))))
     (or (= temp___283 1) (= temp___283 2))))
     (=>
     (not (= (get_other_previous_track (select trains__trains train) id) 0))
     (let ((temp___286 (to_rep5
                       (select trains__track_signals (get_other_previous_track
                                                     (select trains__trains train)
                                                     id)))))
     (or (= temp___286 1) (= temp___286 2))))))))))))))) :pattern ((previous_tracks_on_orange_or_red
                                                                   trains__cur_num_trains
                                                                   trains__trains
                                                                   trains__track_signals)) )))))

(declare-fun safe_signaling (Int (Array Int us_rep1)
  (Array Int signal)) Bool)

(declare-fun safe_signaling__function_guard (Bool Int (Array Int us_rep1)
  (Array Int signal)) Bool)

;; safe_signaling__post_axiom
  (assert true)

;; safe_signaling__def_axiom
  (assert
  (forall ((trains__cur_num_trains Int))
  (forall ((trains__trains (Array Int us_rep1)))
  (forall ((trains__track_signals (Array Int signal)))
  (! (=> (safe_signaling__function_guard
     (safe_signaling trains__cur_num_trains trains__trains
     trains__track_signals) trains__cur_num_trains trains__trains
     trains__track_signals)
     (and (occupied_tracks_on_red__function_guard
     (occupied_tracks_on_red trains__cur_num_trains trains__trains
     trains__track_signals) trains__cur_num_trains trains__trains
     trains__track_signals)
     (and (previous_tracks_on_orange_or_red__function_guard
     (previous_tracks_on_orange_or_red trains__cur_num_trains trains__trains
     trains__track_signals) trains__cur_num_trains trains__trains
     trains__track_signals)
     (=
     (= (safe_signaling trains__cur_num_trains trains__trains
        trains__track_signals) true)
     (and
     (= (occupied_tracks_on_red trains__cur_num_trains trains__trains
        trains__track_signals) true)
     (= (previous_tracks_on_orange_or_red trains__cur_num_trains
        trains__trains trains__track_signals) true)))))) :pattern ((safe_signaling
                                                                   trains__cur_num_trains
                                                                   trains__trains
                                                                   trains__track_signals)) )))))

(declare-fun moving_inside_current_tracks (us_rep1 us_rep1) Bool)

(declare-fun moving_inside_current_tracks__function_guard (Bool us_rep1
  us_rep1) Bool)

;; moving_inside_current_tracks__post_axiom
  (assert true)

;; moving_inside_current_tracks__def_axiom
  (assert
  (forall ((cur_position us_rep1) (new_position us_rep1))
  (! (=> (moving_inside_current_tracks__function_guard
     (moving_inside_current_tracks cur_position new_position) cur_position
     new_position)
     (= (= (moving_inside_current_tracks cur_position new_position) true)
     (and
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 cur_position))) (to_rep
                                          (rec__trains__train_position__track_begin
                                          (us_split_fields3 new_position))))
     (= (to_rep
        (rec__trains__train_position__track_end
        (us_split_fields3 cur_position))) (to_rep
                                          (rec__trains__train_position__track_end
                                          (us_split_fields3 new_position))))))) :pattern (
  (moving_inside_current_tracks cur_position new_position)) )))

(declare-fun entering_a_track (us_rep1) Bool)

(declare-fun entering_a_track__function_guard (Bool us_rep1) Bool)

(declare-fun inside_a_track (us_rep1) Bool)

(declare-fun inside_a_track__function_guard (Bool us_rep1) Bool)

(declare-fun moving_away_from_current_track (us_rep1 us_rep1) Bool)

(declare-fun moving_away_from_current_track__function_guard (Bool us_rep1
  us_rep1) Bool)

;; moving_away_from_current_track__post_axiom
  (assert true)

;; moving_away_from_current_track__def_axiom
  (assert
  (forall ((cur_position us_rep1) (new_position us_rep1))
  (! (=> (moving_away_from_current_track__function_guard
     (moving_away_from_current_track cur_position new_position) cur_position
     new_position)
     (and (entering_a_track__function_guard (entering_a_track cur_position)
     cur_position)
     (and (inside_a_track__function_guard (inside_a_track new_position)
     new_position)
     (= (= (moving_away_from_current_track cur_position new_position) true)
     (and
     (and (= (entering_a_track cur_position) true)
     (= (inside_a_track new_position) true))
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 cur_position))) (to_rep
                                          (rec__trains__train_position__track_end
                                          (us_split_fields3 new_position))))))))) :pattern (
  (moving_away_from_current_track cur_position new_position)) )))

(declare-fun valid_move (us_rep1 us_rep1) Bool)

(declare-fun valid_move__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun moving_to_a_new_track (us_rep1 us_rep1) Bool)

(declare-fun moving_to_a_new_track__function_guard (Bool us_rep1
  us_rep1) Bool)

;; valid_move__post_axiom
  (assert true)

;; valid_move__def_axiom
  (assert
  (forall ((cur_position us_rep1) (new_position us_rep1))
  (! (=> (valid_move__function_guard (valid_move cur_position new_position)
     cur_position new_position)
     (and (moving_inside_current_tracks__function_guard
     (moving_inside_current_tracks cur_position new_position) cur_position
     new_position)
     (and (moving_to_a_new_track__function_guard
     (moving_to_a_new_track cur_position new_position) cur_position
     new_position)
     (and (moving_away_from_current_track__function_guard
     (moving_away_from_current_track cur_position new_position) cur_position
     new_position)
     (= (= (valid_move cur_position new_position) true)
     (or
     (or (= (moving_inside_current_tracks cur_position new_position) true)
     (= (moving_to_a_new_track cur_position new_position) true))
     (= (moving_away_from_current_track cur_position new_position) true))))))) :pattern (
  (valid_move cur_position new_position)) )))

(declare-sort move_result 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (move_result move_result) Bool)

(declare-fun dummy11 () move_result)

(declare-datatypes ()
((move_result__ref (mk_move_result__ref (move_result__content move_result)))))
(define-fun move_result__ref___projection ((a move_result__ref)) move_result 
  (move_result__content a))

(define-fun dynamic_invariant4 ((temp___expr_315 Int)
  (temp___is_init_312 Bool) (temp___skip_constant_313 Bool)
  (temp___do_toplevel_314 Bool)) Bool (=>
                                      (or (= temp___is_init_312 true)
                                      (<= 0 3)) (in_range9 temp___expr_315)))

(declare-fun train () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun new_position () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun cur_position () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(define-fun dynamic_invariant5 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_33)))

(define-fun dynamic_invariant6 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range5
                                     temp___expr_39)))

(define-fun dynamic_invariant7 ((temp___expr_187 Int)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)) Bool (=>
                                      (or (= temp___is_init_184 true)
                                      (<= 1 5)) (in_range4 temp___expr_187)))

(declare-fun trains__tracks__aggregate_def (us_rep us_rep us_rep us_rep
  us_rep us_rep us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___134 us_rep) (temp___135 us_rep) (temp___136 us_rep)
  (temp___137 us_rep) (temp___138 us_rep) (temp___139 us_rep)
  (temp___140 us_rep) (temp___141 us_rep))
  (let ((temp___133 (trains__tracks__aggregate_def temp___134 temp___135
                    temp___136 temp___137 temp___138 temp___139 temp___140
                    temp___141)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___133 1) temp___134)
  (= (select temp___133 2) temp___135)) (= (select temp___133 3) temp___136))
  (= (select temp___133 4) temp___137)) (= (select temp___133 5) temp___138))
  (= (select temp___133 6) temp___139)) (= (select temp___133 7) temp___140))
  (= (select temp___133 8) temp___141)))))

;; tracks__def_axiom
  (assert
  (= tracks (trains__tracks__aggregate_def
            (mk___rep
            (mk___split_fields (of_rep1 1) (of_rep1 2) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 1) (of_rep1 3) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 2) (of_rep1 3) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 2) (of_rep1 5) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 3) (of_rep1 4) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 3) (of_rep1 5) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 4) (of_rep1 5) (of_rep2 10)))
            (mk___rep
            (mk___split_fields (of_rep1 5) (of_rep1 1) (of_rep2 10))))))

(declare-fun trains__previous_tracks__aggregate_def ((Array Int track_opt_id)
  (Array Int track_opt_id) (Array Int track_opt_id) (Array Int track_opt_id)
  (Array Int track_opt_id)) (Array Int (Array Int track_opt_id)))

;; def_axiom
  (assert
  (forall ((temp___146 (Array Int track_opt_id))
  (temp___147 (Array Int track_opt_id)) (temp___148 (Array Int track_opt_id))
  (temp___149 (Array Int track_opt_id))
  (temp___150 (Array Int track_opt_id)))
  (let ((temp___145 (trains__previous_tracks__aggregate_def temp___146
                    temp___147 temp___148 temp___149 temp___150)))
  (and
  (and
  (and
  (and (= (select temp___145 1) temp___146)
  (= (select temp___145 2) temp___147)) (= (select temp___145 3) temp___148))
  (= (select temp___145 4) temp___149)) (= (select temp___145 5) temp___150)))))

(declare-fun temp___152 (Int Int Int) (Array Int track_opt_id))

;; def_axiom
  (assert
  (forall ((temp___154 Int) (temp___155 Int) (temp___156 Int))
  (let ((temp___153 (temp___152 temp___154 temp___155 temp___156)))
  (and
  (and (= (select temp___153 1) (of_rep3 temp___154))
  (= (select temp___153 2) (of_rep3 temp___155)))
  (= (select temp___153 3) (of_rep3 temp___156))))))

(declare-fun temp___158 (Int Int Int) (Array Int track_opt_id))

;; def_axiom
  (assert
  (forall ((temp___160 Int) (temp___161 Int) (temp___162 Int))
  (let ((temp___159 (temp___158 temp___160 temp___161 temp___162)))
  (and
  (and (= (select temp___159 1) (of_rep3 temp___160))
  (= (select temp___159 2) (of_rep3 temp___161)))
  (= (select temp___159 3) (of_rep3 temp___162))))))

(declare-fun temp___164 (Int Int Int) (Array Int track_opt_id))

;; def_axiom
  (assert
  (forall ((temp___166 Int) (temp___167 Int) (temp___168 Int))
  (let ((temp___165 (temp___164 temp___166 temp___167 temp___168)))
  (and
  (and (= (select temp___165 1) (of_rep3 temp___166))
  (= (select temp___165 2) (of_rep3 temp___167)))
  (= (select temp___165 3) (of_rep3 temp___168))))))

(declare-fun temp___170 (Int Int Int) (Array Int track_opt_id))

;; def_axiom
  (assert
  (forall ((temp___172 Int) (temp___173 Int) (temp___174 Int))
  (let ((temp___171 (temp___170 temp___172 temp___173 temp___174)))
  (and
  (and (= (select temp___171 1) (of_rep3 temp___172))
  (= (select temp___171 2) (of_rep3 temp___173)))
  (= (select temp___171 3) (of_rep3 temp___174))))))

(declare-fun temp___176 (Int Int Int) (Array Int track_opt_id))

;; def_axiom
  (assert
  (forall ((temp___178 Int) (temp___179 Int) (temp___180 Int))
  (let ((temp___177 (temp___176 temp___178 temp___179 temp___180)))
  (and
  (and (= (select temp___177 1) (of_rep3 temp___178))
  (= (select temp___177 2) (of_rep3 temp___179)))
  (= (select temp___177 3) (of_rep3 temp___180))))))

;; previous_tracks__def_axiom
  (assert
  (= previous_tracks (trains__previous_tracks__aggregate_def
                     (temp___152 8 0 0) (temp___158 1 0 0) (temp___164 2 3 0)
                     (temp___170 5 0 0) (temp___176 4 6 7))))

;; entering_a_track__post_axiom
  (assert true)

;; entering_a_track__def_axiom
  (assert
  (forall ((position us_rep1))
  (! (=> (entering_a_track__function_guard (entering_a_track position)
     position)
     (= (= (entering_a_track position) true)
     (and
     (not
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 position))) (to_rep
                                      (rec__trains__train_position__track_end
                                      (us_split_fields3 position)))))
     (exists ((id Int))
     (and (and (<= 1 id) (<= id 3))
     (= (to_rep
        (rec__trains__train_position__track_end (us_split_fields3 position))) 
     (to_rep3
     (let ((temp___244 (select previous_tracks (to_rep1
                                               (rec__trains__track__from
                                               (us_split_fields1
                                               (select tracks (to_rep
                                                              (rec__trains__train_position__track_begin
                                                              (us_split_fields3
                                                              position))))))))))
     (select temp___244 id))))))))) :pattern ((entering_a_track position)) )))

;; inside_a_track__post_axiom
  (assert true)

;; inside_a_track__def_axiom
  (assert
  (forall ((position us_rep1))
  (! (=> (inside_a_track__function_guard (inside_a_track position) position)
     (= (= (inside_a_track position) true)
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 position))) (to_rep
                                      (rec__trains__train_position__track_end
                                      (us_split_fields3 position)))))) :pattern (
  (inside_a_track position)) )))

(define-fun dynamic_invariant8 ((temp___expr_251 Int)
  (temp___is_init_248 Bool) (temp___skip_constant_249 Bool)
  (temp___do_toplevel_250 Bool)) Bool (=>
                                      (or (= temp___is_init_248 true)
                                      (<= 0 2)) (in_range8 temp___expr_251)))

;; moving_to_a_new_track__post_axiom
  (assert true)

;; moving_to_a_new_track__def_axiom
  (assert
  (forall ((cur_position1 us_rep1) (new_position1 us_rep1))
  (! (=> (moving_to_a_new_track__function_guard
     (moving_to_a_new_track cur_position1 new_position1) cur_position1
     new_position1)
     (and (inside_a_track__function_guard (inside_a_track cur_position1)
     cur_position1)
     (and (entering_a_track__function_guard (entering_a_track new_position1)
     new_position1)
     (= (= (moving_to_a_new_track cur_position1 new_position1) true)
     (and
     (and (= (inside_a_track cur_position1) true)
     (= (entering_a_track new_position1) true))
     (= (to_rep
        (rec__trains__train_position__track_begin
        (us_split_fields3 cur_position1))) (to_rep
                                           (rec__trains__train_position__track_end
                                           (us_split_fields3 new_position1))))))))) :pattern (
  (moving_to_a_new_track cur_position1 new_position1)) )))

(declare-fun cur_num_trains () Int)

(declare-fun trains () (Array Int us_rep1))

(declare-fun track_signals () (Array Int signal))

(declare-fun result__ () Int)

(declare-fun prev () Int)

(declare-fun id () Int)

(declare-fun o () signal)

(declare-fun o1 () (Array Int signal))

(declare-fun temp___414 () (Array Int signal))

(declare-fun temp___404 () Int)

(declare-fun temp___413 () (Array Int signal))

(declare-fun temp___402 () (Array Int signal))

(declare-fun temp___400 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () signal)

(declare-fun o5 () Int)

(declare-fun o6 () signal)

(declare-fun o7 () Int)

(declare-fun o8 () (Array Int signal))

(declare-fun prev1 () Int)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () int__ref)

(declare-fun result__1 () Int)

(declare-fun result3 () int__ref)

(declare-fun result__2 () Int)

(declare-fun result4 () map__ref3)

(declare-fun trains1 () (Array Int us_rep1))

(declare-fun result5 () map__ref4)

(declare-fun track_signals1 () (Array Int signal))

(declare-fun result6 () int__ref)

(declare-fun id1 () Int)

(declare-fun result7 () int__ref)

(declare-fun prev2 () Int)

(declare-fun result8 () Bool)

(declare-fun result9 () map__ref4)

(declare-fun track_signals2 () (Array Int signal))

(declare-fun track_signals3 () (Array Int signal))

(declare-fun prev3 () Int)

(declare-fun id2 () Int)

(declare-fun track_signals4 () map__ref4)

(declare-fun prev4 () int__ref)

(declare-fun id3 () int__ref)

(declare-fun track_signals5 () (Array Int signal))

(declare-fun prev5 () Int)

(declare-fun id4 () Int)

(declare-fun track_signals6 () map__ref4)

(declare-fun prev6 () int__ref)

(declare-fun id5 () int__ref)

(declare-fun track_signals7 () (Array Int signal))

(declare-fun prev7 () Int)

(declare-fun id6 () Int)

(define-fun prev8 () int__ref (mk_int__ref prev))

(define-fun result__3 () int__ref (mk_int__ref result__))

;; H
  (assert (in_range6 cur_num_trains))

;; H
  (assert (in_range6 train))

;; H
  (assert (=> (<= 0 3) (in_range9 result__)))

;; H
  (assert (valid_move__function_guard
  (valid_move (select trains train) new_position) (select trains train)
  new_position))

;; H
  (assert (one_train_at_most_per_track__function_guard
  (one_train_at_most_per_track cur_num_trains trains) cur_num_trains 
  trains))

;; H
  (assert (safe_signaling__function_guard
  (safe_signaling cur_num_trains trains track_signals) cur_num_trains 
  trains track_signals))

;; H
  (assert
  (and (and (<= 1 train) (<= train cur_num_trains))
  (and (= (valid_move (select trains train) new_position) true)
  (and (= (one_train_at_most_per_track cur_num_trains trains) true)
  (= (safe_signaling cur_num_trains trains track_signals) true)))))

;; H
  (assert (= (select trains train) cur_position))

;; H
  (assert (=> (<= 0 8) (in_range1 prev)))

;; H
  (assert
  (and
  (and (= result (moving_inside_current_tracks cur_position new_position))
  (moving_inside_current_tracks__function_guard result cur_position
  new_position))
  (= (= result true)
  (and
  (= (to_rep
     (rec__trains__train_position__track_begin
     (us_split_fields3 cur_position))) (to_rep
                                       (rec__trains__train_position__track_begin
                                       (us_split_fields3 new_position))))
  (= (to_rep
     (rec__trains__train_position__track_end (us_split_fields3 cur_position))) 
  (to_rep
  (rec__trains__train_position__track_end (us_split_fields3 new_position))))))))

;; H
  (assert (not (= result true)))

;; H
  (assert (entering_a_track__function_guard (entering_a_track cur_position)
  cur_position))

;; H
  (assert (inside_a_track__function_guard (inside_a_track new_position)
  new_position))

;; H
  (assert
  (and
  (and (= result1 (moving_away_from_current_track cur_position new_position))
  (moving_away_from_current_track__function_guard result1 cur_position
  new_position))
  (= (= result1 true)
  (and
  (and (= (entering_a_track cur_position) true)
  (= (inside_a_track new_position) true))
  (= (to_rep
     (rec__trains__train_position__track_begin
     (us_split_fields3 cur_position))) (to_rep
                                       (rec__trains__train_position__track_end
                                       (us_split_fields3 new_position))))))))

;; H
  (assert (not (= result1 true)))

;; H
  (assert
  (not
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 2)))

;; H
  (assert
  (=>
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 0)
  (= result2 result__3)))

;; H
  (assert
  (=>
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 0)
  (= result__1 0)))

;; H
  (assert
  (=>
  (not
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 0))
  (= result3 result__3)))

;; H
  (assert
  (=>
  (not
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 0))
  (= result__2 1)))

;; H
  (assert
  (=>
  (not
  (= (to_rep5
     (select track_signals (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields3 new_position))))) 0))
  (= result__1 result__2)))

;; H
  (assert (= result4 (mk_map__ref3 trains)))

;; H
  (assert (= trains1 (store trains train new_position)))

;; H
  (assert (= (to_rep5 o) 2))

;; H
  (assert
  (= o1 (store track_signals (to_rep
                             (rec__trains__train_position__track_begin
                             (us_split_fields3 new_position))) o)))

;; H
  (assert (= result5 (mk_map__ref4 track_signals)))

;; H
  (assert (= track_signals1 o1))

;; H
  (assert
  (forall ((k Int)) (get_other_previous_track__function_guard
  (get_other_previous_track new_position k) new_position k)))

;; H
  (assert
  (forall ((k Int)) (get_other_previous_track__function_guard
  (get_other_previous_track new_position k) new_position k)))

;; H
  (assert (= result6 (mk_int__ref id)))

;; H
  (assert (= id1 1))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= temp___414 track_signals1)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= temp___404 prev)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= temp___413 track_signals1)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= temp___402 track_signals1)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= temp___400 id1)))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (and
  (and (= o2 (get_other_previous_track new_position id1))
  (get_other_previous_track__function_guard o2 new_position id1))
  (and (in_range1 o2)
  (= o2 (ite (= (to_rep3
                (select (select previous_tracks (to_rep1
                                                (rec__trains__track__from
                                                (us_split_fields1
                                                (select tracks (to_rep
                                                               (rec__trains__train_position__track_begin
                                                               (us_split_fields3
                                                               new_position)))))))) 
                id1)) (to_rep
                      (rec__trains__train_position__track_end
                      (us_split_fields3 new_position))))
        0
        (to_rep3
        (select (select previous_tracks (to_rep1
                                        (rec__trains__track__from
                                        (us_split_fields1
                                        (select tracks (to_rep
                                                       (rec__trains__train_position__track_begin
                                                       (us_split_fields3
                                                       new_position)))))))) 
        id1))))))))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= result7 prev8)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= prev2 o2)))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (not (= prev2 0)) (and (<= 1 prev2) (<= prev2 8)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3)) (=> (not (= prev2 0)) (= o3 prev2))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (not (= prev2 0)) (= o4 (select track_signals1 o3)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3)) (=> (not (= prev2 0)) (= o5 (to_rep5 o4)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (not (= prev2 0)) (= result8 (ite (= o5 0) true false)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (not (not (= prev2 0))) (= result8 false))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3)) (=> (= result8 true) (= (to_rep5 o6) 1))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (= result8 true) (and (<= 1 prev2) (<= prev2 8)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3)) (=> (= result8 true) (= o7 prev2))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (= result8 true) (= o8 (store track_signals1 o7 o6)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (= result8 true) (= result9 (mk_map__ref4 track_signals1)))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (= result8 true) (= track_signals2 o8))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (=> (not (= result8 true)) (= track_signals2 track_signals1))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k id2))
  (=> (not (= (get_other_previous_track new_position k) 0))
  (let ((temp___411 (to_rep5
                    (select track_signals3 (get_other_previous_track
                                           new_position k)))))
  (or (= temp___411 1) (= temp___411 2))))))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 8))
  (and
  (=> (= (to_rep5 (select temp___413 j)) 2)
  (= (to_rep5 (select track_signals3 j)) 2))
  (=> (= (to_rep5 (select temp___414 j)) 1)
  (= (to_rep5 (select track_signals3 j)) 1)))))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (and (and (=> (<= 1 3) (in_range3 id2)) (=> (<= 0 8) (in_range1 prev3)))
  (and (<= 1 id2) (<= id2 3)))))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= id2 3)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= id3 (mk_int__ref id2))))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= prev4 (mk_int__ref prev3))))

;; H
  (assert
  (=> (and (<= 1 id1) (<= id1 3))
  (= track_signals4 (mk_map__ref4 track_signals3))))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= id4 id2)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= prev5 prev3)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= track_signals5 track_signals3)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= id5 id3)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= prev6 prev4)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= track_signals6 track_signals4)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= id6 id4)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= prev7 prev5)))

;; H
  (assert (=> (and (<= 1 id1) (<= id1 3)) (= track_signals7 track_signals5)))

;; H
  (assert (=> (not (and (<= 1 id1) (<= id1 3))) (= id5 (mk_int__ref id1))))

;; H
  (assert (=> (not (and (<= 1 id1) (<= id1 3))) (= prev6 prev8)))

;; H
  (assert
  (=> (not (and (<= 1 id1) (<= id1 3)))
  (= track_signals6 (mk_map__ref4 track_signals1))))

;; H
  (assert (=> (not (and (<= 1 id1) (<= id1 3))) (= id6 id1)))

;; H
  (assert (=> (not (and (<= 1 id1) (<= id1 3))) (= prev7 prev1)))

;; H
  (assert
  (=> (not (and (<= 1 id1) (<= id1 3))) (= track_signals7 track_signals1)))

;; H
  (assert (occupied_tracks_on_red__function_guard
  (occupied_tracks_on_red cur_num_trains trains1
  (map__content4 track_signals6)) cur_num_trains trains1
  (map__content4 track_signals6)))

(assert
;; WP_parameter_def
 ;; File "trains.ads", line 191, characters 0-0
  (not
  (= (occupied_tracks_on_red cur_num_trains trains1
     (map__content4 track_signals6)) true)))
(check-sat)
