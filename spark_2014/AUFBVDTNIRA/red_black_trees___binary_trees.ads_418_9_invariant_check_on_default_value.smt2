;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort extended_index_type 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (extended_index_type extended_index_type) Bool)

(declare-fun dummy () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(declare-fun to_rep (extended_index_type) Int)

(declare-fun of_rep (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (index_type index_type) Bool)

(declare-fun dummy1 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort position_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (position_type position_type) Bool)

(declare-fun dummy2 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep1 (position_type) Int)

(declare-fun of_rep1 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields1 a))) (to_rep
                                                  (rec__binary_trees__cell__left
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields1 a))) (to_rep
                                                  (rec__binary_trees__cell__right
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields1 a))) (to_rep
                                                  (rec__binary_trees__cell__parent
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__binary_trees__cell__position
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__binary_trees__cell__position
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep (cell__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq3 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq3 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(define-fun default_initial_assumption ((temp___expr_272 (Array Int us_rep))
  (temp___skip_top_level_273 Bool)) Bool (forall ((temp___274 Int))
                                         (=>
                                         (and (<= 1 temp___274)
                                         (<= temp___274 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields1
                                            (select temp___expr_272 temp___274)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields1
                                            (select temp___expr_272 temp___274)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields1
                                            (select temp___expr_272 temp___274)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields1
                                            (select temp___expr_272 temp___274)))) 2)))))

(declare-fun dummy4 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))
(define-fun us_split_fields_S__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__binary_trees__forest__s
                            (us_split_fields3 a))) (to_rep
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields3 b))))
                         (= (bool_eq4
                            (rec__binary_trees__forest__c
                            (us_split_fields3 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields3 b)) 1 100) true))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep1)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep1 (forest__content
                                                               a))

(declare-fun size (us_rep1) Int)

(declare-fun size__function_guard (Int us_rep1) Bool)

(declare-fun tree_structure (us_rep1) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep1) Bool)

;; temp___result_287_def
  (assert
  (forall ((temp___286 us_rep1)) (size__function_guard (size temp___286)
  temp___286)))

(define-fun default_initial_assumption1 ((temp___expr_281 us_rep1)
  (temp___skip_top_level_282 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__forest__s
                                            (us_split_fields3
                                            temp___expr_281))) 0)
                                         (forall ((temp___284 Int))
                                         (=>
                                         (and (<= 1 temp___284)
                                         (<= temp___284 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields1
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                    temp___expr_281)) temp___284)))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields1
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                    temp___expr_281)) temp___284)))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields1
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                    temp___expr_281)) temp___284)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields1
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                    temp___expr_281)) temp___284)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_282 true))
                                         (= (size temp___expr_281) 0))))

;; temp___result_290_def
  (assert
  (forall ((temp___289 us_rep1)) (tree_structure__function_guard
  (tree_structure temp___289) temp___289)))

(define-fun type_invariant ((temp___288 us_rep1)) Bool (= (tree_structure
                                                          temp___288) true))

;; tree_structure__post_axiom
  (assert true)

;; tree_structure__def_axiom
  (assert
  (forall ((f us_rep1))
  (! (=> (tree_structure__function_guard (tree_structure f) f)
     (= (= (tree_structure f) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (forall ((i Int))
     (=>
     (and
     (<= (+ (to_rep (rec__binary_trees__forest__s (us_split_fields3 f))) 1) i)
     (<= i 100))
     (= (bool_eq3
        (let ((temp___580 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___580 i))
        (mk___rep
        (mk___split_fields (of_rep 0) (of_rep 0) (of_rep 0) (of_rep1 2)))) true)))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__parent
           (us_split_fields1
           (let ((temp___581 (rec__binary_trees__forest__c
                             (us_split_fields3 f))))
           (select temp___581 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__parent
         (us_split_fields1
         (let ((temp___581 (rec__binary_trees__forest__c
                           (us_split_fields3 f))))
         (select temp___581 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields3 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__left
           (us_split_fields1
           (let ((temp___582 (rec__binary_trees__forest__c
                             (us_split_fields3 f))))
           (select temp___582 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__left
         (us_split_fields1
         (let ((temp___582 (rec__binary_trees__forest__c
                           (us_split_fields3 f))))
         (select temp___582 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields3 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (<= 0 (to_rep
           (rec__binary_trees__cell__right
           (us_split_fields1
           (let ((temp___583 (rec__binary_trees__forest__c
                             (us_split_fields3 f))))
           (select temp___583 i))))))
     (<= (to_rep
         (rec__binary_trees__cell__right
         (us_split_fields1
         (let ((temp___583 (rec__binary_trees__forest__c
                           (us_split_fields3 f))))
         (select temp___583 i))))) (to_rep
                                   (rec__binary_trees__forest__s
                                   (us_split_fields3 f))))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields1
        (let ((temp___585 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___585 i))))) 2)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields1
        (let ((temp___584 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___584 i))))) 0)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields1
        (let ((temp___590 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___590 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields1
        (let ((temp___586 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___586 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields1
                           (let ((temp___587 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___587 i)))))))))) 0)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields1
        (let ((temp___588 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___588 (to_rep
                           (rec__binary_trees__cell__left
                           (us_split_fields1
                           (let ((temp___589 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___589 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (not
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields1
        (let ((temp___595 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___595 i))))) 0))
     (and
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields1
        (let ((temp___591 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___591 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields1
                           (let ((temp___592 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___592 i)))))))))) 1)
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields1
        (let ((temp___593 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___593 (to_rep
                           (rec__binary_trees__cell__right
                           (us_split_fields1
                           (let ((temp___594 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___594 i)))))))))) i))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields1
        (let ((temp___598 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___598 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields1
        (let ((temp___599 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___599 i))))) 0))
     (= (to_rep
        (rec__binary_trees__cell__left
        (us_split_fields1
        (let ((temp___596 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___596 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields1
                           (let ((temp___597 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___597 i)))))))))) i)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (and
     (not
     (= (to_rep
        (rec__binary_trees__cell__parent
        (us_split_fields1
        (let ((temp___602 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___602 i))))) 0))
     (= (to_rep1
        (rec__binary_trees__cell__position
        (us_split_fields1
        (let ((temp___603 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___603 i))))) 1))
     (= (to_rep
        (rec__binary_trees__cell__right
        (us_split_fields1
        (let ((temp___600 (rec__binary_trees__forest__c (us_split_fields3 f))))
        (select temp___600 (to_rep
                           (rec__binary_trees__cell__parent
                           (us_split_fields1
                           (let ((temp___601 (rec__binary_trees__forest__c
                                             (us_split_fields3 f))))
                           (select temp___601 i)))))))))) i))))))) :pattern (
  (tree_structure f)) )))

(define-fun dynamic_invariant ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range temp___expr_156)))

;; size__post_axiom
  (assert
  (forall ((f us_rep1))
  (! (=> (type_invariant f)
     (let ((result (size f)))
     (=> (size__function_guard result f) (dynamic_invariant result true false
     true)))) :pattern ((size f)) )))

;; size__def_axiom
  (assert
  (forall ((f us_rep1))
  (! (=> (size__function_guard (size f) f)
     (= (size f) (to_rep (rec__binary_trees__forest__s (us_split_fields3 f))))) :pattern (
  (size f)) )))

(define-fun default_initial_assumption2 ((temp___expr_265 us_rep)
  (temp___skip_top_level_266 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__binary_trees__cell__left
                                            (us_split_fields1
                                            temp___expr_265))) 0)
                                         (= (to_rep
                                            (rec__binary_trees__cell__right
                                            (us_split_fields1
                                            temp___expr_265))) 0))
                                         (= (to_rep
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields1
                                            temp___expr_265))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__position
                                            (us_split_fields1
                                            temp___expr_265))) 2)))

(define-fun dynamic_invariant1 ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

(define-fun dynamic_invariant2 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range2 temp___expr_162)))

(declare-fun temp___832 () extended_index_type)

(declare-fun temp___8321 () (Array Int us_rep))

;; H
  (assert
  (and (= (to_rep temp___832) 0) (default_initial_assumption temp___8321
  false)))

(assert
;; WP_parameter_def
 ;; File "binary_trees.ads", line 418, characters 0-0
  (not (type_invariant
  (mk___rep1 (mk___split_fields1 temp___832 temp___8321)))))
(check-sat)
