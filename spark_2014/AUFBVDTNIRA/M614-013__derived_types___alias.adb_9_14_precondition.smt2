;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort element 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (element element) Bool)

(declare-fun dummy () element)

(declare-datatypes ()
((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 100)) (in_range temp___expr_135)))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun to_rep1 (element) Int)

(declare-fun of_rep1 (Int) element)

;; inversion_axiom
  (assert
  (forall ((x element))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x element)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__alias__my_rec__content element)(rec__alias__my_rec__modulus natural)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) element 
  (rec__alias__my_rec__content a))

(define-fun us_split_fields_Modulus__projection ((a us_split_fields)) natural 
  (rec__alias__my_rec__modulus a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__alias__my_rec__content (us_split_fields1 a))) 
                        (to_rep1
                        (rec__alias__my_rec__content (us_split_fields1 b))))
                        (= (to_rep
                           (rec__alias__my_rec__modulus (us_split_fields1 a))) 
                        (to_rep
                        (rec__alias__my_rec__modulus (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun alias__my_rec__content__first__bit () Int)

(declare-fun alias__my_rec__content__last__bit () Int)

(declare-fun alias__my_rec__content__position () Int)

;; alias__my_rec__content__first__bit_axiom
  (assert (<= 0 alias__my_rec__content__first__bit))

;; alias__my_rec__content__last__bit_axiom
  (assert
  (< alias__my_rec__content__first__bit alias__my_rec__content__last__bit))

;; alias__my_rec__content__position_axiom
  (assert (<= 0 alias__my_rec__content__position))

(declare-fun alias__my_rec__modulus__first__bit () Int)

(declare-fun alias__my_rec__modulus__last__bit () Int)

(declare-fun alias__my_rec__modulus__position () Int)

;; alias__my_rec__modulus__first__bit_axiom
  (assert (<= 0 alias__my_rec__modulus__first__bit))

;; alias__my_rec__modulus__last__bit_axiom
  (assert
  (< alias__my_rec__modulus__first__bit alias__my_rec__modulus__last__bit))

;; alias__my_rec__modulus__position_axiom
  (assert (<= 0 alias__my_rec__modulus__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content
                                                              a))

(declare-fun get_content (us_rep) Int)

(declare-fun get_content__function_guard (Int us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_142 us_rep)
  (temp___skip_top_level_143 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__alias__my_rec__content
                                            (us_split_fields1
                                            temp___expr_142))) 0)
                                         (= (to_rep
                                            (rec__alias__my_rec__modulus
                                            (us_split_fields1
                                            temp___expr_142))) 0)))

;; get_content__post_axiom
  (assert
  (forall ((r us_rep))
  (! (=> (< 0 (to_rep (rec__alias__my_rec__modulus (us_split_fields1 r))))
     (let ((result (get_content r)))
     (=> (get_content__function_guard result r) (dynamic_invariant result
     true false true)))) :pattern ((get_content r)) )))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun alias__my_rec__content__first__bit1 () Int)

(declare-fun alias__my_rec__content__last__bit1 () Int)

(declare-fun alias__my_rec__content__position1 () Int)

;; alias__my_rec__content__first__bit_axiom
  (assert (<= 0 alias__my_rec__content__first__bit1))

;; alias__my_rec__content__last__bit_axiom
  (assert
  (< alias__my_rec__content__first__bit1 alias__my_rec__content__last__bit1))

;; alias__my_rec__content__position_axiom
  (assert (<= 0 alias__my_rec__content__position1))

(declare-fun alias__my_rec__modulus__first__bit1 () Int)

(declare-fun alias__my_rec__modulus__last__bit1 () Int)

(declare-fun alias__my_rec__modulus__position1 () Int)

;; alias__my_rec__modulus__first__bit_axiom
  (assert (<= 0 alias__my_rec__modulus__first__bit1))

;; alias__my_rec__modulus__last__bit_axiom
  (assert
  (< alias__my_rec__modulus__first__bit1 alias__my_rec__modulus__last__bit1))

;; alias__my_rec__modulus__position_axiom
  (assert (<= 0 alias__my_rec__modulus__position1))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((my_alias__ref (mk_my_alias__ref (my_alias__content us_rep)))))
(define-fun my_alias__ref___projection ((a my_alias__ref)) us_rep (my_alias__content
                                                                  a))

(define-fun default_initial_assumption1 ((temp___expr_148 us_rep)
  (temp___skip_top_level_149 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__alias__my_rec__content
                                            (us_split_fields1
                                            temp___expr_148))) 0)
                                         (= (to_rep
                                            (rec__alias__my_rec__modulus
                                            (us_split_fields1
                                            temp___expr_148))) 0)))

(declare-fun r () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; H
  (assert (in_range x))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (< 0 (to_rep (rec__alias__my_rec__modulus (us_split_fields1 r))))))
(check-sat)
