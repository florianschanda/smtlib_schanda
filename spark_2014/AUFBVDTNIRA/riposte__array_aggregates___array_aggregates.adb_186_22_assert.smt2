;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort enum_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (enum_t enum_t) Bool)

(declare-fun dummy () enum_t)

(declare-datatypes ()
((enum_t__ref (mk_enum_t__ref (enum_t__content enum_t)))))
(define-fun enum_t__ref___projection ((a enum_t__ref)) enum_t (enum_t__content
                                                              a))

(declare-fun to_rep (enum_t) Int)

(declare-fun of_rep (Int) enum_t)

;; inversion_axiom
  (assert
  (forall ((x enum_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort small_index_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (small_index_t small_index_t) Bool)

(declare-fun dummy1 () small_index_t)

(declare-datatypes ()
((small_index_t__ref
 (mk_small_index_t__ref (small_index_t__content small_index_t)))))
(define-fun small_index_t__ref___projection ((a small_index_t__ref)) small_index_t 
  (small_index_t__content a))

(declare-fun to_rep1 (small_index_t) Int)

(declare-fun of_rep1 (Int) small_index_t)

;; inversion_axiom
  (assert
  (forall ((x small_index_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x small_index_t)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__array_aggregates__basic_record__a small_index_t)(rec__array_aggregates__basic_record__b Bool)(rec__array_aggregates__basic_record__c enum_t)))))
(define-fun us_split_fields_A2__projection ((a us_split_fields)) small_index_t 
  (rec__array_aggregates__basic_record__a a))

(define-fun us_split_fields_B2__projection ((a us_split_fields)) Bool 
  (rec__array_aggregates__basic_record__b a))

(define-fun us_split_fields_C__projection ((a us_split_fields)) enum_t 
  (rec__array_aggregates__basic_record__c a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_5__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__array_aggregates__basic_record__a
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__array_aggregates__basic_record__a
                                                  (us_split_fields1 b))))
                        (= (rec__array_aggregates__basic_record__b
                           (us_split_fields1 a)) (rec__array_aggregates__basic_record__b
                                                 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__array_aggregates__basic_record__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__array_aggregates__basic_record__c
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun array_aggregates__basic_record__a__first__bit () Int)

(declare-fun array_aggregates__basic_record__a__last__bit () Int)

(declare-fun array_aggregates__basic_record__a__position () Int)

;; array_aggregates__basic_record__a__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__a__first__bit))

;; array_aggregates__basic_record__a__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__a__first__bit array_aggregates__basic_record__a__last__bit))

;; array_aggregates__basic_record__a__position_axiom
  (assert (<= 0 array_aggregates__basic_record__a__position))

(declare-fun array_aggregates__basic_record__b__first__bit () Int)

(declare-fun array_aggregates__basic_record__b__last__bit () Int)

(declare-fun array_aggregates__basic_record__b__position () Int)

;; array_aggregates__basic_record__b__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__b__first__bit))

;; array_aggregates__basic_record__b__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__b__first__bit array_aggregates__basic_record__b__last__bit))

;; array_aggregates__basic_record__b__position_axiom
  (assert (<= 0 array_aggregates__basic_record__b__position))

(declare-fun array_aggregates__basic_record__c__first__bit () Int)

(declare-fun array_aggregates__basic_record__c__last__bit () Int)

(declare-fun array_aggregates__basic_record__c__position () Int)

;; array_aggregates__basic_record__c__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__c__first__bit))

;; array_aggregates__basic_record__c__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__c__first__bit array_aggregates__basic_record__c__last__bit))

;; array_aggregates__basic_record__c__position_axiom
  (assert (<= 0 array_aggregates__basic_record__c__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((basic_record__ref (mk_basic_record__ref (basic_record__content us_rep)))))
(define-fun basic_record__ref___projection ((a basic_record__ref)) us_rep 
  (basic_record__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_146 Int))
                           (=>
                           (and (<= a__first temp___idx_146)
                           (<= temp___idx_146 a__last))
                           (= (bool_eq2 (select a temp___idx_146)
                              (select b (+ (- b__first a__first) temp___idx_146))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_146 Int))
  (=> (and (<= a__first temp___idx_146) (<= temp___idx_146 a__last))
  (= (bool_eq2 (select a temp___idx_146)
     (select b (+ (- b__first a__first) temp___idx_146))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun temp___461 (us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___463 us_rep) (temp___464 us_rep))
  (let ((temp___462 (temp___461 temp___463 temp___464)))
  (forall ((temp___465 Int))
  (ite (or (= temp___465 2) (and (<= 4 temp___465) (<= temp___465 6)))
  (= (select temp___462 temp___465) temp___463)
  (= (select temp___462 temp___465) temp___464))))))

(define-fun dynamic_invariant ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 0 2)) (in_range1 temp___expr_204)))

(define-fun dynamic_invariant1 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 1000)) (in_range2
                                      temp___expr_267)))

(declare-fun x () (Array Int us_rep))

(declare-fun o () enum_t)

(declare-fun o1 () small_index_t)

(declare-fun o2 () small_index_t)

(declare-fun o3 () Bool)

(declare-fun o4 () enum_t)

(declare-fun o5 () enum_t)

(declare-fun o6 () small_index_t)

(declare-fun o7 () small_index_t)

(declare-fun o8 () Bool)

(declare-fun o9 () enum_t)

(declare-fun o10 () small_index_t)

(declare-fun o11 () Bool)

(declare-fun o12 () enum_t)

(declare-fun o13 () small_index_t)

(declare-fun o14 () Bool)

(declare-fun o15 () enum_t)

(declare-fun o16 () (Array Int us_rep))

(declare-fun result () (Array Int us_rep))

(declare-fun x1 () (Array Int us_rep))

;; H
  (assert (= (to_rep o5) 1))

;; H
  (assert (= (to_rep1 o6) 10))

;; H
  (assert (= o6 o7))

;; H
  (assert (= (of_int 1) o8))

;; H
  (assert (= o5 o9))

;; H
  (assert (= o10 o7))

;; H
  (assert (= o11 o8))

;; H
  (assert (= o12 o9))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= (to_rep1 o1) 5))

;; H
  (assert (= o1 o2))

;; H
  (assert (= (of_int 0) o3))

;; H
  (assert (= o o4))

;; H
  (assert (= o13 o2))

;; H
  (assert (= o14 o3))

;; H
  (assert (= o15 o4))

;; H
  (assert
  (= o16 (temp___461 (mk___rep (mk___split_fields o13 o14 o15))
         (mk___rep (mk___split_fields o10 o11 o12)))))

;; H
  (assert (= result x))

;; H
  (assert (= x1 o16))

(assert
;; WP_parameter_def
 ;; File "array_aggregates.adb", line 167, characters 0-0
  (not
  (= (to_rep
     (rec__array_aggregates__basic_record__c
     (us_split_fields1 (select x1 3)))) 2)))
(check-sat)
