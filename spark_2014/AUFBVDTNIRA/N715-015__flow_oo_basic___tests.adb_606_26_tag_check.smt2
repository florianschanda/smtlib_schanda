;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__ext__ us_private)))))
(define-fun us_split_fields___projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy () us_rep)

(declare-datatypes ()
((root_t__ref (mk_root_t__ref (root_t__content us_rep)))))
(define-fun root_t__ref___projection ((a root_t__ref)) us_rep (root_t__content
                                                              a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-fun dummy1 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__foo__widget_t__x integer)(rec__foo__widget_t__y integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_X__projection ((a us_split_fields2)) integer 
  (rec__foo__widget_t__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields2)) integer 
  (rec__foo__widget_t__y a))

(define-fun us_split_fields_2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer integer us_private) us_private)

(declare-fun extract__x (us_private) integer)

;; extract__x__conv
  (assert
  (forall ((x integer) (y integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__x (hide_ext__ x y rec__ext__2)) x))))

(declare-fun extract__y (us_private) integer)

;; extract__y__conv
  (assert
  (forall ((x integer) (y integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__y (hide_ext__ x y rec__ext__2)) y))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep
                                         (mk___split_fields
                                         (hide_ext__
                                         (rec__foo__widget_t__x
                                         (us_split_fields3 a))
                                         (rec__foo__widget_t__y
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1
                                         (mk___split_fields1
                                         (extract__x
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__y
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__foo__widget_t__x (us_split_fields3 a))) 
                         (to_rep
                         (rec__foo__widget_t__x (us_split_fields3 b))))
                         (= (to_rep
                            (rec__foo__widget_t__y (us_split_fields3 a))) 
                         (to_rep
                         (rec__foo__widget_t__y (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun foo__widget_t__x__first__bit () Int)

(declare-fun foo__widget_t__x__last__bit () Int)

(declare-fun foo__widget_t__x__position () Int)

;; foo__widget_t__x__first__bit_axiom
  (assert (<= 0 foo__widget_t__x__first__bit))

;; foo__widget_t__x__last__bit_axiom
  (assert (< foo__widget_t__x__first__bit foo__widget_t__x__last__bit))

;; foo__widget_t__x__position_axiom
  (assert (<= 0 foo__widget_t__x__position))

(declare-fun foo__widget_t__y__first__bit () Int)

(declare-fun foo__widget_t__y__last__bit () Int)

(declare-fun foo__widget_t__y__position () Int)

;; foo__widget_t__y__first__bit_axiom
  (assert (<= 0 foo__widget_t__y__first__bit))

;; foo__widget_t__y__last__bit_axiom
  (assert (< foo__widget_t__y__first__bit foo__widget_t__y__last__bit))

;; foo__widget_t__y__position_axiom
  (assert (<= 0 foo__widget_t__y__position))

(declare-fun dummy2 () us_rep1)

(declare-datatypes ()
((widget_t__ref (mk_widget_t__ref (widget_t__content us_rep1)))))
(define-fun widget_t__ref___projection ((a widget_t__ref)) us_rep1 (widget_t__content
                                                                   a))

(define-fun default_initial_assumption ((temp___expr_152 us_rep1)
  (temp___skip_top_level_153 Bool)) Bool (= (attr__tag1 temp___expr_152) 
  us_tag1))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__foo__nice_widget_t__round Bool)(rec__foo__widget_t__x1 integer)(rec__foo__widget_t__y1 integer)(rec__ext__2 us_private)))))
(define-fun us_split_fields_Round__projection ((a us_split_fields4)) Bool 
  (rec__foo__nice_widget_t__round a))

(define-fun us_split_fields_X2__projection ((a us_split_fields4)) integer 
  (rec__foo__widget_t__x1 a))

(define-fun us_split_fields_Y2__projection ((a us_split_fields4)) integer 
  (rec__foo__widget_t__y1 a))

(define-fun us_split_fields_3__projection ((a us_split_fields4)) us_private 
  (rec__ext__2 a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep_5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_6__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (Bool integer integer us_private) us_private)

(declare-fun extract__round (us_private) Bool)

;; extract__round__conv
  (assert
  (forall ((round Bool))
  (forall ((x integer) (y integer))
  (forall ((rec__ext__3 us_private))
  (= (to_int1 (extract__round (hide_ext__1 round x y rec__ext__3))) (to_int1
                                                                    round))))))

;; extract__x__conv
  (assert
  (forall ((round Bool))
  (forall ((x integer) (y integer))
  (forall ((rec__ext__3 us_private))
  (= (extract__x (hide_ext__1 round x y rec__ext__3)) x)))))

;; extract__y__conv
  (assert
  (forall ((round Bool))
  (forall ((x integer) (y integer))
  (forall ((rec__ext__3 us_private))
  (= (extract__y (hide_ext__1 round x y rec__ext__3)) y)))))

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep
                                          (mk___split_fields
                                          (hide_ext__1
                                          (rec__foo__nice_widget_t__round
                                          (us_split_fields5 a))
                                          (rec__foo__widget_t__x1
                                          (us_split_fields5 a))
                                          (rec__foo__widget_t__y1
                                          (us_split_fields5 a))
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2
                                          (mk___split_fields2
                                          (extract__round
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__x
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__y
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (rec__foo__nice_widget_t__round
                            (us_split_fields5 a)) (rec__foo__nice_widget_t__round
                                                  (us_split_fields5 b)))
                         (= (to_rep
                            (rec__foo__widget_t__x1 (us_split_fields5 a))) 
                         (to_rep
                         (rec__foo__widget_t__x1 (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__foo__widget_t__y1 (us_split_fields5 a))) 
                         (to_rep
                         (rec__foo__widget_t__y1 (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-fun us_tag2 () Int)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun foo__nice_widget_t__round__first__bit () Int)

(declare-fun foo__nice_widget_t__round__last__bit () Int)

(declare-fun foo__nice_widget_t__round__position () Int)

;; foo__nice_widget_t__round__first__bit_axiom
  (assert (<= 0 foo__nice_widget_t__round__first__bit))

;; foo__nice_widget_t__round__last__bit_axiom
  (assert
  (< foo__nice_widget_t__round__first__bit foo__nice_widget_t__round__last__bit))

;; foo__nice_widget_t__round__position_axiom
  (assert (<= 0 foo__nice_widget_t__round__position))

(declare-fun foo__widget_t__x__first__bit1 () Int)

(declare-fun foo__widget_t__x__last__bit1 () Int)

(declare-fun foo__widget_t__x__position1 () Int)

;; foo__widget_t__x__first__bit_axiom
  (assert (<= 0 foo__widget_t__x__first__bit1))

;; foo__widget_t__x__last__bit_axiom
  (assert (< foo__widget_t__x__first__bit1 foo__widget_t__x__last__bit1))

;; foo__widget_t__x__position_axiom
  (assert (<= 0 foo__widget_t__x__position1))

(declare-fun foo__widget_t__y__first__bit1 () Int)

(declare-fun foo__widget_t__y__last__bit1 () Int)

(declare-fun foo__widget_t__y__position1 () Int)

;; foo__widget_t__y__first__bit_axiom
  (assert (<= 0 foo__widget_t__y__first__bit1))

;; foo__widget_t__y__last__bit_axiom
  (assert (< foo__widget_t__y__first__bit1 foo__widget_t__y__last__bit1))

;; foo__widget_t__y__position_axiom
  (assert (<= 0 foo__widget_t__y__position1))

(declare-fun dummy3 () us_rep2)

(declare-datatypes ()
((nice_widget_t__ref
 (mk_nice_widget_t__ref (nice_widget_t__content us_rep2)))))
(define-fun nice_widget_t__ref___projection ((a nice_widget_t__ref)) us_rep2 
  (nice_widget_t__content a))

(define-fun default_initial_assumption1 ((temp___expr_170 us_rep2)
  (temp___skip_top_level_171 Bool)) Bool (= (attr__tag2 temp___expr_170) 
  us_tag2))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__tests__pair__a us_rep1)(rec__tests__pair__b us_rep2)))))
(define-fun us_split_fields_A__projection ((a us_split_fields6)) us_rep1 
  (rec__tests__pair__a a))

(define-fun us_split_fields_B__projection ((a us_split_fields6)) us_rep2 
  (rec__tests__pair__b a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (bool_eq2
                            (rec__tests__pair__a (us_split_fields7 a))
                            (rec__tests__pair__a (us_split_fields7 b))) true)
                         (= (bool_eq3
                            (rec__tests__pair__b (us_split_fields7 a))
                            (rec__tests__pair__b (us_split_fields7 b))) true))
                    true false))

(declare-fun user_eq4 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun tests__pair__a__first__bit () Int)

(declare-fun tests__pair__a__last__bit () Int)

(declare-fun tests__pair__a__position () Int)

;; tests__pair__a__first__bit_axiom
  (assert (<= 0 tests__pair__a__first__bit))

;; tests__pair__a__last__bit_axiom
  (assert (< tests__pair__a__first__bit tests__pair__a__last__bit))

;; tests__pair__a__position_axiom
  (assert (<= 0 tests__pair__a__position))

(declare-fun tests__pair__b__first__bit () Int)

(declare-fun tests__pair__b__last__bit () Int)

(declare-fun tests__pair__b__position () Int)

;; tests__pair__b__first__bit_axiom
  (assert (<= 0 tests__pair__b__first__bit))

;; tests__pair__b__last__bit_axiom
  (assert (< tests__pair__b__first__bit tests__pair__b__last__bit))

;; tests__pair__b__position_axiom
  (assert (<= 0 tests__pair__b__position))

(declare-fun dummy4 () us_rep3)

(declare-datatypes () ((pair__ref (mk_pair__ref (pair__content us_rep3)))))
(define-fun pair__ref___projection ((a pair__ref)) us_rep3 (pair__content a))

(define-fun default_initial_assumption2 ((temp___expr_207 us_rep3)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (attr__tag1
                                            (rec__tests__pair__a
                                            (us_split_fields7
                                            temp___expr_207))) us_tag1)
                                         (= (attr__tag2
                                            (rec__tests__pair__b
                                            (us_split_fields7
                                            temp___expr_207))) us_tag2)))

(declare-fun a__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun nw () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun c () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun d__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun e__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun f__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun g__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun h__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun default_initial_assumption3 ((temp___expr_138 us_rep)
  (temp___skip_top_level_139 Bool)) Bool (= (attr__tag temp___expr_138) 
  us_tag))

(declare-fun a__split_fields () integer)

(declare-fun a__split_fields1 () integer)

(declare-fun a__split_fields2 () us_private)

(declare-fun b__split_fields () integer)

(declare-fun b__split_fields1 () integer)

(declare-fun b__split_fields2 () us_private)

(declare-fun b__split_fields3 () Int)

(declare-fun b__split_fields4 () Bool)

(declare-fun b__split_fields5 () integer)

(declare-fun b__split_fields6 () integer)

(declare-fun b__split_fields7 () us_private)

(declare-fun b__split_fields8 () Int)

(declare-fun d__split_fields () integer)

(declare-fun d__split_fields1 () integer)

(declare-fun d__split_fields2 () us_private)

(declare-fun result () us_split_fields__ref3)

(declare-fun b__split_fields9 () us_split_fields6)

(declare-fun result1 () us_split_fields__ref3)

(declare-fun b__split_fields10 () us_split_fields6)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun a__split_fields3 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun d__split_fields3 () us_split_fields2)

;; H
  (assert
  (= result (mk___split_fields__ref3
            (mk___split_fields3
            (mk___rep1
            (mk___split_fields1 b__split_fields b__split_fields1
            b__split_fields2) b__split_fields3)
            (mk___rep2
            (mk___split_fields2 b__split_fields4 b__split_fields5
            b__split_fields6 b__split_fields7) b__split_fields8)))))

;; H
  (assert
  (= b__split_fields9 (mk___split_fields3
                      (mk___rep1
                      (mk___split_fields1 a__split_fields a__split_fields1
                      a__split_fields2) b__split_fields3)
                      (mk___rep2
                      (mk___split_fields2 b__split_fields4 b__split_fields5
                      b__split_fields6 b__split_fields7) b__split_fields8))))

;; H
  (assert (= result1 (mk___split_fields__ref3 b__split_fields9)))

;; H
  (assert
  (= b__split_fields10 (mk___split_fields3
                       (rec__tests__pair__a b__split_fields9)
                       (mk___rep2
                       (us_split_fields5
                       (of_base1
                       (mk___rep
                       (mk___split_fields
                       (hide_ext__ a__split_fields a__split_fields1
                       a__split_fields2)) a__attr__tag)))
                       (attr__tag2 (rec__tests__pair__b b__split_fields9))))))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 a__split_fields a__split_fields1
             a__split_fields2))))

;; H
  (assert
  (= a__split_fields3 (us_split_fields3
                      (rec__tests__pair__a (us_split_fields7 c)))))

;; H
  (assert
  (= result3 (mk___split_fields__ref1
             (mk___split_fields1 d__split_fields d__split_fields1
             d__split_fields2))))

;; H
  (assert
  (= d__split_fields3 (us_split_fields3
                      (rec__tests__pair__a (us_split_fields7 c)))))

(assert
;; WP_parameter_def
 ;; File "tests.adb", line 573, characters 0-0
  (not
  (= e__attr__tag (attr__tag1 (rec__tests__pair__a (us_split_fields7 c))))))
(check-sat)
