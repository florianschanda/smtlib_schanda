;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-fun dummy () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (element_type element_type) Bool)

(declare-fun dummy1 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep)))))
(define-fun set__ref_2__projection ((a set__ref)) us_rep (set__content a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_431 us_rep)
  (temp___skip_top_level_432 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_432 true))
                                         (= (is_empty temp___expr_431) true)))

(declare-fun contains (us_rep Int) Bool)

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(define-fun dynamic_invariant ((temp___expr_424 Int)
  (temp___is_init_421 Bool) (temp___skip_constant_422 Bool)
  (temp___do_toplevel_423 Bool)) Bool (=>
                                      (or (= temp___is_init_421 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_424)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range2 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (count_type count_type) Bool)

(declare-fun dummy3 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_144)))

;; length__post_axiom
  (assert
  (forall ((container us_rep)) (! (dynamic_invariant1 (length container) true
  false true) :pattern ((length container)) )))

(declare-fun ole (us_rep us_rep) Bool)

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

(declare-fun included_except (us_rep us_rep Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep us_rep Int) Bool)

(declare-fun add (us_rep Int) us_rep)

(declare-fun add__function_guard (us_rep us_rep Int) Bool)

;; add__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=>
     (and (dynamic_invariant item true true true)
     (and (not (= (contains container item) true))
     (< (length container) 2147483647)))
     (let ((result (add container item)))
     (and
     (and
     (and (= (length result) (+ (length container) 1))
     (= (contains result item) true)) (= (ole container result) true))
     (= (included_except result container item) true)))) :pattern ((add
                                                                   container
                                                                   item)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant2 ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

;; ole__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range2 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range2 item) (= (contains container item) true)))))
     (= (= result true) (= (length container) 0)))) :pattern ((is_empty
                                                              container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant item true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range2 e) (= (contains left e) true))
     (or (= (contains right e) true) (= e item)))))) :pattern ((included_except
                                                               left right
                                                               item)) ))))

(declare-fun s () us_rep)

(declare-fun i () Int)

(declare-fun binary_trees__all_indexes__result () us_rep)

(declare-fun temp___1047 () Int)

(declare-fun temp___1046 () us_rep)

(declare-fun o () us_rep)

(declare-fun s1 () us_rep)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun s2 () us_rep)

(declare-fun i2 () Int)

(declare-fun result1 () us_rep)

(declare-fun s3 () us_rep)

(declare-fun s4 () us_rep)

(declare-fun i3 () Int)

(declare-fun s5 () us_rep)

(declare-fun i4 () Int)

(declare-fun s6 () us_rep)

(declare-fun i5 () Int)

(declare-fun s7 () us_rep)

(declare-fun i6 () Int)

(declare-fun result2 () us_rep)

(declare-fun binary_trees__all_indexes__result1 () us_rep)

(declare-fun binary_trees__all_indexes__result2 () us_rep)

(declare-fun binary_trees__all_indexes__result3 () us_rep)

(declare-fun s8 () us_rep)

(declare-fun i7 () Int)

(declare-fun binary_trees__all_indexes__result4 () us_rep)

(declare-fun s9 () us_rep)

(declare-fun i8 () Int)

(declare-fun binary_trees__all_indexes__result5 () us_rep)

(define-fun s10 () set__ref (mk_set__ref s6))

(declare-fun result3 () us_rep)

;; H
  (assert (= (is_empty s) true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___1047 i1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= temp___1046 s)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= (length s2) (- i2 1))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (- i2 1))) (= (contains s2 j) true)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (forall ((j Int))
  (=> (and (in_range2 j) (= (contains s2 j) true)) (< j i2)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (and (=> (<= 1 100) (in_range1 i2)) (and (<= 1 i2) (<= i2 100)))))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100))
  (and (= o (add s2 i2))
  (and
  (and (and (= (length o) (+ (length s2) 1)) (= (contains o i2) true))
  (= (ole s2 o) true)) (= (included_except o s2 i2) true)))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s2 result1)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s3 o)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 100)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s3 s4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i4 i2)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s5 s3)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 100)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s10 (mk_set__ref s4))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= i6 i4)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 100)) (= s7 s5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= s10 (mk_set__ref s))))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 100))) (= s7 s1)))

;; H
  (assert
  (= binary_trees__all_indexes__result1 binary_trees__all_indexes__result2))

;; H
  (assert
  (= binary_trees__all_indexes__result3 binary_trees__all_indexes__result1))

;; H
  (assert (= result2 binary_trees__all_indexes__result))

;; H
  (assert (= binary_trees__all_indexes__result1 s6))

;; H
  (assert
  (= (mk_set__ref binary_trees__all_indexes__result4) (mk_set__ref
                                                      binary_trees__all_indexes__result2)))

;; H
  (assert (= i7 i5))

;; H
  (assert (= s8 s6))

;; H
  (assert
  (= binary_trees__all_indexes__result5 binary_trees__all_indexes__result3))

;; H
  (assert (= i8 i6))

;; H
  (assert (= s9 s7))

;; H
  (assert (= result3 binary_trees__all_indexes__result4))

(declare-fun i9 () Int)

;; H
  (assert (<= 1 i9))

;; H
  (assert (<= i9 100))

(assert
;; WP_parameter_def
 ;; File "a-cofuse.ads", line 49, characters 0-0
  (not (= (contains binary_trees__all_indexes__result4 i9) true)))
(check-sat)
