;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort valid_cursor 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (valid_cursor valid_cursor) Bool)

(declare-fun dummy1 () valid_cursor)

(declare-datatypes ()
((valid_cursor__ref
 (mk_valid_cursor__ref (valid_cursor__content valid_cursor)))))
(define-fun valid_cursor__ref___projection ((a valid_cursor__ref)) valid_cursor 
  (valid_cursor__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy2 () (Array Int natural))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__declare_iterable__container__content (Array Int natural))))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural) 
  (rec__declare_iterable__container__content a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (= (bool_eq2
                           (rec__declare_iterable__container__content
                           (us_split_fields1 a)) 1 100
                           (rec__declare_iterable__container__content
                           (us_split_fields1 b)) 1 100) true)
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun declare_iterable__container__content__first__bit () Int)

(declare-fun declare_iterable__container__content__last__bit () Int)

(declare-fun declare_iterable__container__content__position () Int)

;; declare_iterable__container__content__first__bit_axiom
  (assert (<= 0 declare_iterable__container__content__first__bit))

;; declare_iterable__container__content__last__bit_axiom
  (assert
  (< declare_iterable__container__content__first__bit declare_iterable__container__content__last__bit))

;; declare_iterable__container__content__position_axiom
  (assert (<= 0 declare_iterable__container__content__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((container__ref (mk_container__ref (container__content us_rep)))))
(define-fun container__ref___projection ((a container__ref)) us_rep (container__content
                                                                    a))

(declare-fun has_element (us_rep Int) Bool)

(declare-fun has_element__function_guard (Bool us_rep Int) Bool)

(declare-sort cursor 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (cursor cursor) Bool)

(declare-fun dummy4 () cursor)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content cursor)))))
(define-fun cursor__ref___projection ((a cursor__ref)) cursor (cursor__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_161 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)) Bool (=>
                                      (or (= temp___is_init_158 true)
                                      (<= 0 100)) (in_range3
                                      temp___expr_161)))

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((x us_rep))
  (forall ((c Int))
  (! (=> (has_element__function_guard (has_element x c) x c)
     (= (= (has_element x c) true) (in_range2 c))) :pattern ((has_element x
                                                             c)) ))))

(declare-fun next (us_rep Int) Int)

(declare-fun next__function_guard (Int us_rep Int) Bool)

;; next__post_axiom
  (assert
  (forall ((x us_rep))
  (forall ((c Int))
  (! (and (has_element__function_guard (has_element x c) x c)
     (=>
     (and (dynamic_invariant c true true true) (= (has_element x c) true))
     (let ((result (next x c)))
     (=> (next__function_guard result x c) (dynamic_invariant result true
     false true))))) :pattern ((next x c)) ))))

;; next__def_axiom
  (assert
  (forall ((x us_rep))
  (forall ((c Int))
  (! (=>
     (and (dynamic_invariant c true true true) (next__function_guard
     (next x c) x c)) (= (next x c) (ite (= c 100) 0 (+ c 1)))) :pattern (
  (next x c)) ))))

(declare-fun first (us_rep) Int)

(declare-fun first__function_guard (Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((x us_rep))
  (! (let ((result (first x)))
     (=> (first__function_guard result x) (dynamic_invariant result true
     false true))) :pattern ((first x)) )))

;; first__def_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (first__function_guard (first x) x) (= (first x) 1)) :pattern (
  (first x)) )))

(declare-fun element (us_rep Int) Int)

(declare-fun element__function_guard (Int us_rep Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; element__post_axiom
  (assert
  (forall ((x us_rep))
  (forall ((c Int))
  (! (and (has_element__function_guard (has_element x c) x c)
     (=>
     (and (dynamic_invariant c true true true) (= (has_element x c) true))
     (let ((result (element x c)))
     (=> (element__function_guard result x c) (dynamic_invariant1 result true
     false true))))) :pattern ((element x c)) ))))

;; element__def_axiom
  (assert
  (forall ((x us_rep))
  (forall ((c Int))
  (! (=>
     (and (dynamic_invariant c true true true) (element__function_guard
     (element x c) x c))
     (= (element x c) (to_rep
                      (let ((temp___177 (rec__declare_iterable__container__content
                                        (us_split_fields1 x))))
                      (select temp___177 c))))) :pattern ((element x c)) ))))

(declare-fun from_nat_array ((Array Int natural)) us_rep)

(declare-fun from_nat_array__function_guard (us_rep
  (Array Int natural)) Bool)

;; from_nat_array__post_axiom
  (assert true)

;; from_nat_array__def_axiom
  (assert
  (forall ((a (Array Int natural)))
  (! (=> (from_nat_array__function_guard (from_nat_array a) a)
     (= (from_nat_array a) (mk___rep (mk___split_fields a)))) :pattern (
  (from_nat_array a)) )))

(declare-sort t2b 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (t2b t2b) Bool)

(declare-fun dummy5 () t2b)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content t2b)))))
(define-fun t2b__ref___projection ((a t2b__ref)) t2b (t2b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun for_loop_iterable__p1__a__aggregate_def (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___237 Int))
  (forall ((temp___238 Int))
  (= (select (for_loop_iterable__p1__a__aggregate_def temp___237) temp___238) 
  (of_rep temp___237)))))

(define-fun dynamic_invariant2 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_136)))

(declare-fun a () (Array Int natural))

(declare-fun e () Int)

(declare-fun o () (Array Int natural))

(declare-fun temp___243 () (Array Int natural))

(declare-fun o1 () Int)

(declare-fun temp___244 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () natural)

(declare-fun o4 () (Array Int natural))

(declare-fun e1 () Int)

(declare-fun result () (Array Int natural))

(declare-fun a1 () (Array Int natural))

(declare-fun result1 () Bool)

(declare-fun result2 () Int)

(declare-fun e2 () Int)

(declare-fun result3 () Bool)

(declare-fun a2 () (Array Int natural))

(declare-fun e3 () Int)

(declare-fun temp___2441 () Int)

(declare-fun result4 () (Array Int natural))

(declare-fun a3 () (Array Int natural))

(define-fun temp___2431 () us_rep (mk___rep (mk___split_fields temp___243)))

;; H
  (assert (= o (for_loop_iterable__p1__a__aggregate_def 0)))

;; H
  (assert (= result a))

;; H
  (assert (= a1 o))

;; H
  (assert
  (and
  (and (= temp___2431 (from_nat_array a1)) (from_nat_array__function_guard
  temp___2431 a1)) (= a1 temp___243)))

;; H
  (assert
  (and
  (and (= o1 (first temp___2431)) (first__function_guard o1 temp___2431))
  (and (in_range3 o1) (= o1 1))))

;; H
  (assert (= o1 temp___244))

;; H
  (assert
  (and
  (and (= result1 (has_element temp___2431 temp___244))
  (has_element__function_guard result1 temp___2431 temp___244))
  (= (= result1 true) (in_range2 temp___244))))

;; H
  (assert
  (=> (= result1 true)
  (and
  (and (= o2 (element temp___2431 temp___244)) (element__function_guard 
  o2 temp___2431 temp___244))
  (and (in_range1 o2) (= o2 (to_rep (select temp___243 temp___244)))))))

;; H
  (assert (=> (= result1 true) (= result2 e)))

;; H
  (assert (=> (= result1 true) (= e2 o2)))

;; H
  (assert (=> (not (= result1 true)) (= e2 e)))

;; H
  (assert (=> (not (= result1 true)) (= e2 e1)))

;; H
  (assert
  (and
  (and (= result3 (has_element temp___2431 temp___244))
  (has_element__function_guard result3 temp___2431 temp___244))
  (= (= result3 true) (in_range2 temp___244))))

;; H
  (assert (= result3 true))

;; H
  (assert (has_element__function_guard (has_element temp___2431 temp___2441)
  temp___2431 temp___2441))

;; H
  (assert (element__function_guard (element temp___2431 temp___2441)
  temp___2431 temp___2441))

;; H
  (assert
  (and
  (forall ((temp___240 Int))
  (=> (and (<= 1 temp___240) (<= temp___240 100))
  (=> (not (= 2 temp___240))
  (= (select a2 temp___240) (select a1 temp___240)))))
  (and (= (has_element temp___2431 temp___2441) true)
  (= e3 (element temp___2431 temp___2441)))))

;; H
  (assert (= (to_rep o3) 1))

;; H
  (assert (= o4 (store a2 2 o3)))

;; H
  (assert (= result4 a2))

;; H
  (assert (= a3 o4))

(assert
;; WP_parameter_def
 ;; File "for_loop_iterable.adb", line 3, characters 0-0
  (not (= e3 0)))
(check-sat)
