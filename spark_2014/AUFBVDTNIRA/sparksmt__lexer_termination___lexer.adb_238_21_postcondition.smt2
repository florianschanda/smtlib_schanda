;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq3 (us_rep us_rep) Bool)

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((file__ref (mk_file__ref (file__content us_rep)))))
(define-fun file__ref___projection ((a file__ref)) us_rep (file__content a))

(declare-sort read_status 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (read_status read_status) Bool)

(declare-fun dummy4 () read_status)

(declare-datatypes ()
((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status 
  (read_status__content a))

(declare-fun to_rep1 (read_status) Int)

(declare-fun of_rep1 (Int) read_status)

;; inversion_axiom
  (assert
  (forall ((x read_status))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x read_status)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status 
  (rec__file_io__read_result__status a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character 
  (rec__file_io__read_result__c a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                               a))

(define-fun us_rep_5__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun file_io__read_result__c__pred ((a us_rep1)) Bool (= (to_rep1
                                                                (rec__file_io__read_result__status
                                                                (us_split_discrs1
                                                                a))) 0))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__file_io__read_result__status
                            (us_split_discrs1 a))) (to_rep1
                                                   (rec__file_io__read_result__status
                                                   (us_split_discrs1 b))))
                         (=> (file_io__read_result__c__pred a)
                         (= (to_rep
                            (rec__file_io__read_result__c
                            (us_split_fields1 a))) (to_rep
                                                   (rec__file_io__read_result__c
                                                   (us_split_fields1 b))))))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun file_io__read_result__status__first__bit () Int)

(declare-fun file_io__read_result__status__last__bit () Int)

(declare-fun file_io__read_result__status__position () Int)

;; file_io__read_result__status__first__bit_axiom
  (assert (<= 0 file_io__read_result__status__first__bit))

;; file_io__read_result__status__last__bit_axiom
  (assert
  (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))

;; file_io__read_result__status__position_axiom
  (assert (<= 0 file_io__read_result__status__position))

(declare-fun file_io__read_result__c__first__bit () Int)

(declare-fun file_io__read_result__c__last__bit () Int)

(declare-fun file_io__read_result__c__position () Int)

;; file_io__read_result__c__first__bit_axiom
  (assert (<= 0 file_io__read_result__c__first__bit))

;; file_io__read_result__c__last__bit_axiom
  (assert
  (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))

;; file_io__read_result__c__position_axiom
  (assert (<= 0 file_io__read_result__c__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((read_result__ref (mk_read_result__ref (read_result__content us_rep1)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep1 
  (read_result__content a))

(define-fun default_initial_assumption ((temp___expr_470 us_rep1)
  (temp___skip_top_level_471 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_470) false)
                                         (= (to_rep1
                                            (rec__file_io__read_result__status
                                            (us_split_discrs1
                                            temp___expr_470))) 2)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun current_read__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun next_read__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun local_invariant (us_rep us_split_fields us_split_discrs Int
  us_split_fields us_split_discrs Int) Bool)

(declare-fun local_invariant__function_guard (Bool us_rep us_split_fields
  us_split_discrs Int us_split_fields us_split_discrs Int) Bool)

(declare-fun size (us_rep) Int)

(declare-fun size__function_guard (Int us_rep) Bool)

(declare-fun index (us_rep) Int)

(declare-fun index__function_guard (Int us_rep) Bool)

;; local_invariant__def_axiom
  (assert
  (forall ((lexer__the_file us_rep))
  (forall ((lexer__current_read__fields us_split_fields)
  (lexer__next_read__fields us_split_fields))
  (forall ((lexer__current_read__discrs us_split_discrs)
  (lexer__next_read__discrs us_split_discrs))
  (forall ((lexer__current_idx Int) (lexer__next_idx Int))
  (! (=> (local_invariant__function_guard
     (local_invariant lexer__the_file lexer__current_read__fields
     lexer__current_read__discrs lexer__current_idx lexer__next_read__fields
     lexer__next_read__discrs lexer__next_idx) lexer__the_file
     lexer__current_read__fields lexer__current_read__discrs
     lexer__current_idx lexer__next_read__fields lexer__next_read__discrs
     lexer__next_idx)
     (and (size__function_guard (size lexer__the_file) lexer__the_file)
     (and (size__function_guard (size lexer__the_file) lexer__the_file)
     (and (index__function_guard (index lexer__the_file) lexer__the_file)
     (=
     (= (local_invariant lexer__the_file lexer__current_read__fields
        lexer__current_read__discrs lexer__current_idx
        lexer__next_read__fields lexer__next_read__discrs lexer__next_idx) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (not
     (= (attr__constrained
        (mk___rep lexer__current_read__discrs lexer__current_read__fields
        current_read__attr__constrained)) true))
     (not
     (= (attr__constrained
        (mk___rep lexer__next_read__discrs lexer__next_read__fields
        next_read__attr__constrained)) true)))
     (<= lexer__current_idx (size lexer__the_file)))
     (<= lexer__next_idx (size lexer__the_file)))
     (= lexer__next_idx (index lexer__the_file)))
     (<= lexer__current_idx lexer__next_idx))
     (ite (= (to_rep1
             (rec__file_io__read_result__status
             (us_split_discrs1
             (mk___rep lexer__next_read__discrs lexer__next_read__fields
             next_read__attr__constrained)))) 0)
     (and
     (= (to_rep1
        (rec__file_io__read_result__status
        (us_split_discrs1
        (mk___rep lexer__current_read__discrs lexer__current_read__fields
        current_read__attr__constrained)))) 0)
     (= lexer__current_idx (- lexer__next_idx 1)))
     (= lexer__current_idx lexer__next_idx)))))))) :pattern ((local_invariant
                                                             lexer__the_file
                                                             lexer__current_read__fields
                                                             lexer__current_read__discrs
                                                             lexer__current_idx
                                                             lexer__next_read__fields
                                                             lexer__next_read__discrs
                                                             lexer__next_idx)) ))))))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_462 Int)
  (temp___is_init_459 Bool) (temp___skip_constant_460 Bool)
  (temp___do_toplevel_461 Bool)) Bool (=>
                                      (or (= temp___is_init_459 true)
                                      (<= 0 2)) (in_range4 temp___expr_462)))

(declare-fun the_file () us_rep)

(declare-fun current_read__split_fields () character)

(declare-fun current_read__split_discrs () read_status)

(declare-fun current_line () Int)

(declare-fun current_col () Int)

(declare-fun current_idx () Int)

(declare-fun next_read__split_fields () character)

(declare-fun next_read__split_discrs () read_status)

(declare-fun next_idx () Int)

(declare-fun temp___957 () Int)

(declare-fun temp___956 () us_rep)

(declare-fun temp___958 () Int)

(declare-fun temp___955 () read_status)

(declare-fun temp___9551 () character)

(declare-fun temp___9552 () Bool)

(declare-fun temp___954 () Int)

(declare-fun temp___953 () Int)

(declare-fun temp___952 () Int)

(declare-fun temp___951 () read_status)

(declare-fun temp___9511 () character)

(declare-fun temp___9512 () Bool)

(declare-fun temp___961 () Int)

(declare-fun temp___960 () Int)

(declare-fun o () Bool)

(declare-fun the_file1 () us_rep)

(declare-fun current_read__split_fields1 () us_split_fields)

(declare-fun current_read__split_discrs1 () us_split_discrs)

(declare-fun current_line1 () Int)

(declare-fun current_col1 () Int)

(declare-fun current_idx1 () Int)

(declare-fun next_read__split_fields1 () us_split_fields)

(declare-fun next_read__split_discrs1 () us_split_discrs)

(declare-fun next_idx1 () Int)

(declare-fun result () Bool)

(declare-fun the_file2 () us_rep)

(declare-fun current_read__split_fields2 () us_split_fields)

(declare-fun current_read__split_discrs2 () us_split_discrs)

(declare-fun current_line2 () Int)

(declare-fun current_col2 () Int)

(declare-fun current_idx2 () Int)

(declare-fun next_read__split_fields2 () us_split_fields)

(declare-fun next_read__split_discrs2 () us_split_discrs)

(declare-fun next_idx2 () Int)

(declare-fun temp___9611 () Int)

(declare-fun temp___9601 () Int)

(declare-fun result1 () int__ref)

(declare-fun temp___9612 () Int)

(declare-fun result2 () int__ref)

(declare-fun temp___9602 () Int)

(declare-fun the_file3 () us_rep)

(declare-fun current_read__split_fields3 () us_split_fields)

(declare-fun current_read__split_discrs3 () us_split_discrs)

(declare-fun current_line3 () Int)

(declare-fun current_col3 () Int)

(declare-fun current_idx3 () Int)

(declare-fun next_read__split_fields3 () us_split_fields)

(declare-fun next_read__split_discrs3 () us_split_discrs)

(declare-fun next_idx3 () Int)

(declare-fun result3 () Bool)

(declare-fun the_file4 () file__ref)

(declare-fun current_read__split_fields4 () us_split_fields__ref)

(declare-fun current_read__split_discrs4 () us_split_discrs__ref)

(declare-fun current_line4 () int__ref)

(declare-fun current_col4 () int__ref)

(declare-fun current_idx4 () int__ref)

(declare-fun next_read__split_fields4 () us_split_fields__ref)

(declare-fun next_read__split_discrs4 () us_split_discrs__ref)

(declare-fun next_idx4 () int__ref)

(declare-fun the_file5 () us_rep)

(declare-fun current_read__split_fields5 () us_split_fields)

(declare-fun current_read__split_discrs5 () us_split_discrs)

(declare-fun current_line5 () Int)

(declare-fun current_col5 () Int)

(declare-fun current_idx5 () Int)

(declare-fun next_read__split_fields5 () us_split_fields)

(declare-fun next_read__split_discrs5 () us_split_discrs)

(declare-fun next_idx5 () Int)

(declare-fun the_file6 () file__ref)

(declare-fun current_read__split_fields6 () us_split_fields__ref)

(declare-fun current_read__split_discrs6 () us_split_discrs__ref)

(declare-fun current_line6 () int__ref)

(declare-fun current_col6 () int__ref)

(declare-fun current_idx6 () int__ref)

(declare-fun next_read__split_fields6 () us_split_fields__ref)

(declare-fun next_read__split_discrs6 () us_split_discrs__ref)

(declare-fun next_idx6 () int__ref)

(declare-fun the_file7 () us_rep)

(declare-fun current_read__split_fields7 () us_split_fields)

(declare-fun current_read__split_discrs7 () us_split_discrs)

(declare-fun current_line7 () Int)

(declare-fun current_col7 () Int)

(declare-fun current_idx7 () Int)

(declare-fun next_read__split_fields7 () us_split_fields)

(declare-fun next_read__split_discrs7 () us_split_discrs)

(declare-fun next_idx7 () Int)

(declare-fun the_file8 () file__ref)

(declare-fun current_read__split_fields8 () us_split_fields__ref)

(declare-fun current_read__split_discrs8 () us_split_discrs__ref)

(declare-fun current_line8 () int__ref)

(declare-fun current_col8 () int__ref)

(declare-fun current_idx8 () int__ref)

(declare-fun next_read__split_fields8 () us_split_fields__ref)

(declare-fun next_read__split_discrs8 () us_split_discrs__ref)

(declare-fun next_idx8 () int__ref)

(declare-fun the_file9 () us_rep)

(declare-fun current_read__split_fields9 () us_split_fields)

(declare-fun current_read__split_discrs9 () us_split_discrs)

(declare-fun current_line9 () Int)

(declare-fun current_col9 () Int)

(declare-fun current_idx9 () Int)

(declare-fun next_read__split_fields9 () us_split_fields)

(declare-fun next_read__split_discrs9 () us_split_discrs)

(declare-fun next_idx9 () Int)

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file (mk___split_fields current_read__split_fields)
  (mk___split_discrs current_read__split_discrs) current_idx
  (mk___split_fields next_read__split_fields)
  (mk___split_discrs next_read__split_discrs) next_idx) the_file
  (mk___split_fields current_read__split_fields)
  (mk___split_discrs current_read__split_discrs) current_idx
  (mk___split_fields next_read__split_fields)
  (mk___split_discrs next_read__split_discrs) next_idx))

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file1 current_read__split_fields1
  current_read__split_discrs1 current_idx1 next_read__split_fields1
  next_read__split_discrs1 next_idx1) the_file1 current_read__split_fields1
  current_read__split_discrs1 current_idx1 next_read__split_fields1
  next_read__split_discrs1 next_idx1))

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file1 current_read__split_fields1
  current_read__split_discrs1 current_idx1 next_read__split_fields1
  next_read__split_discrs1 next_idx1) the_file1 current_read__split_fields1
  current_read__split_discrs1 current_idx1 next_read__split_fields1
  next_read__split_discrs1 next_idx1))

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file2 current_read__split_fields2
  current_read__split_discrs2 current_idx2 next_read__split_fields2
  next_read__split_discrs2 next_idx2) the_file2 current_read__split_fields2
  current_read__split_discrs2 current_idx2 next_read__split_fields2
  next_read__split_discrs2 next_idx2))

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file2 current_read__split_fields2
  current_read__split_discrs2 current_idx2 next_read__split_fields2
  next_read__split_discrs2 next_idx2) the_file2 current_read__split_fields2
  current_read__split_discrs2 current_idx2 next_read__split_fields2
  next_read__split_discrs2 next_idx2))

;; H
  (assert (local_invariant__function_guard
  (local_invariant the_file3 current_read__split_fields3
  current_read__split_discrs3 current_idx3 next_read__split_fields3
  next_read__split_discrs3 next_idx3) the_file3 current_read__split_fields3
  current_read__split_discrs3 current_idx3 next_read__split_fields3
  next_read__split_discrs3 next_idx3))

;; H
  (assert (= current_read__attr__constrained false))

;; H
  (assert (in_range2 current_line))

;; H
  (assert (in_range1 current_col))

;; H
  (assert (in_range1 current_idx))

;; H
  (assert (= next_read__attr__constrained false))

;; H
  (assert (in_range1 next_idx))

;; H
  (assert
  (and
  (= (local_invariant the_file (mk___split_fields current_read__split_fields)
     (mk___split_discrs current_read__split_discrs) current_idx
     (mk___split_fields next_read__split_fields)
     (mk___split_discrs next_read__split_discrs) next_idx) true)
  (and (= (to_rep1 current_read__split_discrs) 0)
  (= (to_rep current_read__split_fields) 59))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (local_invariant the_file1 current_read__split_fields1
     current_read__split_discrs1 current_idx1 next_read__split_fields1
     next_read__split_discrs1 next_idx1) true)
  (= (bool_eq5
     (mk___rep current_read__split_discrs1 current_read__split_fields1
     current_read__attr__constrained)
     (mk___rep (mk___split_discrs next_read__split_discrs)
     (mk___split_fields next_read__split_fields)
     next_read__attr__constrained)) true))
  (= current_idx1 next_idx)) (<= current_idx current_idx1))
  (and
  (and (and (in_range2 current_line1) (in_range1 current_col1)) (in_range1
  current_idx1)) (in_range1 next_idx1))))

;; H
  (assert
  (=>
  (= (to_rep1
     (rec__file_io__read_result__status current_read__split_discrs1)) 0)
  (= result (ite (not
                 (= (to_rep
                    (rec__file_io__read_result__c
                    current_read__split_fields1)) 10))
            true false))))

;; H
  (assert
  (=>
  (not
  (= (to_rep1
     (rec__file_io__read_result__status current_read__split_discrs1)) 0))
  (= result false)))

;; H
  (assert (=> (= result true) (= temp___957 next_idx1)))

;; H
  (assert (=> (= result true) (= temp___956 the_file1)))

;; H
  (assert (=> (= result true) (= temp___958 current_idx1)))

;; H
  (assert
  (=> (= result true)
  (and (= (mk___split_discrs temp___955) next_read__split_discrs1)
  (and (= (mk___split_fields temp___9551) next_read__split_fields1)
  (= temp___9552 next_read__attr__constrained)))))

;; H
  (assert (=> (= result true) (= temp___954 current_idx1)))

;; H
  (assert (=> (= result true) (= temp___953 current_col1)))

;; H
  (assert (=> (= result true) (= temp___952 current_line1)))

;; H
  (assert
  (=> (= result true)
  (and (= (mk___split_discrs temp___951) current_read__split_discrs1)
  (and (= (mk___split_fields temp___9511) current_read__split_fields1)
  (= temp___9512 current_read__attr__constrained)))))

;; H
  (assert (=> (= result true) (= 0 temp___961)))

;; H
  (assert (=> (= result true) (= 0 temp___960)))

;; H
  (assert
  (=> (= result true)
  (and
  (= (local_invariant the_file2 current_read__split_fields2
     current_read__split_discrs2 current_idx2 next_read__split_fields2
     next_read__split_discrs2 next_idx2) true)
  (<= temp___958 current_idx2))))

;; H
  (assert
  (=> (= result true)
  (and
  (and
  (and (and (in_range2 current_line2) (in_range1 current_col2)) (in_range1
  current_idx2)) (in_range1 next_idx2))
  (and
  (= (to_rep1
     (rec__file_io__read_result__status current_read__split_discrs2)) 0)
  (not
  (= (to_rep (rec__file_io__read_result__c current_read__split_fields2)) 10))))))

;; H
  (assert (=> (= result true) (= result1 (mk_int__ref temp___9611))))

;; H
  (assert (=> (= result true) (= temp___9612 next_idx2)))

;; H
  (assert (=> (= result true) (= result2 (mk_int__ref temp___9601))))

;; H
  (assert
  (=> (= result true)
  (= temp___9602 (to_int1
                 (ite (= (to_rep1
                         (rec__file_io__read_result__status
                         next_read__split_discrs2)) 0)
                 true false)))))

;; H
  (assert
  (=> (= result true)
  (and
  (and
  (and
  (and
  (= (local_invariant the_file3 current_read__split_fields3
     current_read__split_discrs3 current_idx3 next_read__split_fields3
     next_read__split_discrs3 next_idx3) true)
  (= (bool_eq5
     (mk___rep current_read__split_discrs3 current_read__split_fields3
     current_read__attr__constrained)
     (mk___rep next_read__split_discrs2 next_read__split_fields2
     next_read__attr__constrained)) true))
  (= current_idx3 next_idx2)) (<= current_idx2 current_idx3))
  (and
  (and (and (in_range2 current_line3) (in_range1 current_col3)) (in_range1
  current_idx3)) (in_range1 next_idx3)))))

;; H
  (assert
  (=> (= result true)
  (=>
  (= (to_rep1
     (rec__file_io__read_result__status current_read__split_discrs3)) 0)
  (= o (ite (not
            (= (to_rep
               (rec__file_io__read_result__c current_read__split_fields3)) 10))
       true false)))))

;; H
  (assert
  (=> (= result true)
  (=>
  (not
  (= (to_rep1
     (rec__file_io__read_result__status current_read__split_discrs3)) 0))
  (= o false))))

;; H
  (assert (=> (= result true) (= result3 (ite (not (= o true)) true false))))

;; H
  (assert (=> (= result true) (= result3 true)))

;; H
  (assert (=> (= result true) (= next_idx4 (mk_int__ref next_idx3))))

;; H
  (assert
  (=> (= result true)
  (= next_read__split_discrs4 (mk___split_discrs__ref
                              next_read__split_discrs3))))

;; H
  (assert
  (=> (= result true)
  (= next_read__split_fields4 (mk___split_fields__ref
                              next_read__split_fields3))))

;; H
  (assert (=> (= result true) (= current_idx4 (mk_int__ref current_idx3))))

;; H
  (assert (=> (= result true) (= current_col4 (mk_int__ref current_col3))))

;; H
  (assert (=> (= result true) (= current_line4 (mk_int__ref current_line3))))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_discrs4 (mk___split_discrs__ref
                                 current_read__split_discrs3))))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_fields4 (mk___split_fields__ref
                                 current_read__split_fields3))))

;; H
  (assert (=> (= result true) (= the_file4 (mk_file__ref the_file3))))

;; H
  (assert (=> (= result true) (= next_idx5 next_idx3)))

;; H
  (assert
  (=> (= result true) (= next_read__split_discrs5 next_read__split_discrs3)))

;; H
  (assert
  (=> (= result true) (= next_read__split_fields5 next_read__split_fields3)))

;; H
  (assert (=> (= result true) (= current_idx5 current_idx3)))

;; H
  (assert (=> (= result true) (= current_col5 current_col3)))

;; H
  (assert (=> (= result true) (= current_line5 current_line3)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_discrs5 current_read__split_discrs3)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_fields5 current_read__split_fields3)))

;; H
  (assert (=> (= result true) (= the_file5 the_file3)))

;; H
  (assert (=> (= result true) (= next_idx6 next_idx4)))

;; H
  (assert
  (=> (= result true) (= next_read__split_discrs6 next_read__split_discrs4)))

;; H
  (assert
  (=> (= result true) (= next_read__split_fields6 next_read__split_fields4)))

;; H
  (assert (=> (= result true) (= current_idx6 current_idx4)))

;; H
  (assert (=> (= result true) (= current_col6 current_col4)))

;; H
  (assert (=> (= result true) (= current_line6 current_line4)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_discrs6 current_read__split_discrs4)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_fields6 current_read__split_fields4)))

;; H
  (assert (=> (= result true) (= the_file6 the_file4)))

;; H
  (assert (=> (= result true) (= next_idx7 next_idx5)))

;; H
  (assert
  (=> (= result true) (= next_read__split_discrs7 next_read__split_discrs5)))

;; H
  (assert
  (=> (= result true) (= next_read__split_fields7 next_read__split_fields5)))

;; H
  (assert (=> (= result true) (= current_idx7 current_idx5)))

;; H
  (assert (=> (= result true) (= current_col7 current_col5)))

;; H
  (assert (=> (= result true) (= current_line7 current_line5)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_discrs7 current_read__split_discrs5)))

;; H
  (assert
  (=> (= result true)
  (= current_read__split_fields7 current_read__split_fields5)))

;; H
  (assert (=> (= result true) (= the_file7 the_file5)))

;; H
  (assert (=> (not (= result true)) (= next_idx6 (mk_int__ref next_idx1))))

;; H
  (assert
  (=> (not (= result true))
  (= next_read__split_discrs6 (mk___split_discrs__ref
                              next_read__split_discrs1))))

;; H
  (assert
  (=> (not (= result true))
  (= next_read__split_fields6 (mk___split_fields__ref
                              next_read__split_fields1))))

;; H
  (assert
  (=> (not (= result true)) (= current_idx6 (mk_int__ref current_idx1))))

;; H
  (assert
  (=> (not (= result true)) (= current_col6 (mk_int__ref current_col1))))

;; H
  (assert
  (=> (not (= result true)) (= current_line6 (mk_int__ref current_line1))))

;; H
  (assert
  (=> (not (= result true))
  (= current_read__split_discrs6 (mk___split_discrs__ref
                                 current_read__split_discrs1))))

;; H
  (assert
  (=> (not (= result true))
  (= current_read__split_fields6 (mk___split_fields__ref
                                 current_read__split_fields1))))

;; H
  (assert (=> (not (= result true)) (= the_file6 (mk_file__ref the_file1))))

;; H
  (assert (=> (not (= result true)) (= next_idx7 next_idx1)))

;; H
  (assert
  (=> (not (= result true))
  (= next_read__split_discrs7 next_read__split_discrs1)))

;; H
  (assert
  (=> (not (= result true))
  (= next_read__split_fields7 next_read__split_fields1)))

;; H
  (assert (=> (not (= result true)) (= current_idx7 current_idx1)))

;; H
  (assert (=> (not (= result true)) (= current_col7 current_col1)))

;; H
  (assert (=> (not (= result true)) (= current_line7 current_line1)))

;; H
  (assert
  (=> (not (= result true))
  (= current_read__split_discrs7 current_read__split_discrs1)))

;; H
  (assert
  (=> (not (= result true))
  (= current_read__split_fields7 current_read__split_fields1)))

;; H
  (assert (=> (not (= result true)) (= the_file7 the_file1)))

;; H
  (assert (= next_idx8 next_idx6))

;; H
  (assert (= next_read__split_discrs8 next_read__split_discrs6))

;; H
  (assert (= next_read__split_fields8 next_read__split_fields6))

;; H
  (assert (= current_idx8 current_idx6))

;; H
  (assert (= current_col8 current_col6))

;; H
  (assert (= current_line8 current_line6))

;; H
  (assert (= current_read__split_discrs8 current_read__split_discrs6))

;; H
  (assert (= current_read__split_fields8 current_read__split_fields6))

;; H
  (assert (= the_file8 the_file6))

;; H
  (assert (= next_idx9 next_idx7))

;; H
  (assert (= next_read__split_discrs9 next_read__split_discrs7))

;; H
  (assert (= next_read__split_fields9 next_read__split_fields7))

;; H
  (assert (= current_idx9 current_idx7))

;; H
  (assert (= current_col9 current_col7))

;; H
  (assert (= current_line9 current_line7))

;; H
  (assert (= current_read__split_discrs9 current_read__split_discrs7))

;; H
  (assert (= current_read__split_fields9 current_read__split_fields7))

;; H
  (assert (= the_file9 the_file7))

;; H
  (assert (local_invariant__function_guard
  (local_invariant (file__content the_file8)
  (us_split_fields__content current_read__split_fields8)
  (us_split_discrs__content current_read__split_discrs8)
  (int__content current_idx8)
  (us_split_fields__content next_read__split_fields8)
  (us_split_discrs__content next_read__split_discrs8)
  (int__content next_idx8)) (file__content the_file8)
  (us_split_fields__content current_read__split_fields8)
  (us_split_discrs__content current_read__split_discrs8)
  (int__content current_idx8)
  (us_split_fields__content next_read__split_fields8)
  (us_split_discrs__content next_read__split_discrs8)
  (int__content next_idx8)))

(assert
;; WP_parameter_def
 ;; File "lexer.adb", line 48, characters 0-0
  (not
  (= (local_invariant (file__content the_file8)
     (us_split_fields__content current_read__split_fields8)
     (us_split_discrs__content current_read__split_discrs8)
     (int__content current_idx8)
     (us_split_fields__content next_read__split_fields8)
     (us_split_discrs__content next_read__split_discrs8)
     (int__content next_idx8)) true)))
(check-sat)
