;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__rec_aggregate__r2__x integer)(rec__rec_aggregate__r2__y integer)))))
(define-fun us_split_fields_X2__projection ((a us_split_fields)) integer 
  (rec__rec_aggregate__r2__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer 
  (rec__rec_aggregate__r2__y a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__rec_aggregate__r2__x (us_split_fields1 a))) 
                        (to_rep
                        (rec__rec_aggregate__r2__x (us_split_fields1 b))))
                        (= (to_rep
                           (rec__rec_aggregate__r2__y (us_split_fields1 a))) 
                        (to_rep
                        (rec__rec_aggregate__r2__y (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun rec_aggregate__r2__x__first__bit () Int)

(declare-fun rec_aggregate__r2__x__last__bit () Int)

(declare-fun rec_aggregate__r2__x__position () Int)

;; rec_aggregate__r2__x__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__x__first__bit))

;; rec_aggregate__r2__x__last__bit_axiom
  (assert
  (< rec_aggregate__r2__x__first__bit rec_aggregate__r2__x__last__bit))

;; rec_aggregate__r2__x__position_axiom
  (assert (<= 0 rec_aggregate__r2__x__position))

(declare-fun rec_aggregate__r2__y__first__bit () Int)

(declare-fun rec_aggregate__r2__y__last__bit () Int)

(declare-fun rec_aggregate__r2__y__position () Int)

;; rec_aggregate__r2__y__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__y__first__bit))

;; rec_aggregate__r2__y__last__bit_axiom
  (assert
  (< rec_aggregate__r2__y__first__bit rec_aggregate__r2__y__last__bit))

;; rec_aggregate__r2__y__position_axiom
  (assert (<= 0 rec_aggregate__r2__y__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((r2__ref (mk_r2__ref (r2__content us_rep)))))
(define-fun r2__ref___projection ((a r2__ref)) us_rep (r2__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__rec_aggregate__r3__x integer)(rec__rec_aggregate__r3__y integer)(rec__rec_aggregate__r3__z us_rep)))))
(define-fun us_split_fields_X3__projection ((a us_split_fields2)) integer 
  (rec__rec_aggregate__r3__x a))

(define-fun us_split_fields_Y2__projection ((a us_split_fields2)) integer 
  (rec__rec_aggregate__r3__y a))

(define-fun us_split_fields_Z__projection ((a us_split_fields2)) us_rep 
  (rec__rec_aggregate__r3__z a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__rec_aggregate__r3__x (us_split_fields3 a))) 
                         (to_rep
                         (rec__rec_aggregate__r3__x (us_split_fields3 b))))
                         (= (to_rep
                            (rec__rec_aggregate__r3__y (us_split_fields3 a))) 
                         (to_rep
                         (rec__rec_aggregate__r3__y (us_split_fields3 b)))))
                         (= (bool_eq1
                            (rec__rec_aggregate__r3__z (us_split_fields3 a))
                            (rec__rec_aggregate__r3__z (us_split_fields3 b))) true))
                    true false))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun rec_aggregate__r3__x__first__bit () Int)

(declare-fun rec_aggregate__r3__x__last__bit () Int)

(declare-fun rec_aggregate__r3__x__position () Int)

;; rec_aggregate__r3__x__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__x__first__bit))

;; rec_aggregate__r3__x__last__bit_axiom
  (assert
  (< rec_aggregate__r3__x__first__bit rec_aggregate__r3__x__last__bit))

;; rec_aggregate__r3__x__position_axiom
  (assert (<= 0 rec_aggregate__r3__x__position))

(declare-fun rec_aggregate__r3__y__first__bit () Int)

(declare-fun rec_aggregate__r3__y__last__bit () Int)

(declare-fun rec_aggregate__r3__y__position () Int)

;; rec_aggregate__r3__y__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__y__first__bit))

;; rec_aggregate__r3__y__last__bit_axiom
  (assert
  (< rec_aggregate__r3__y__first__bit rec_aggregate__r3__y__last__bit))

;; rec_aggregate__r3__y__position_axiom
  (assert (<= 0 rec_aggregate__r3__y__position))

(declare-fun rec_aggregate__r3__z__first__bit () Int)

(declare-fun rec_aggregate__r3__z__last__bit () Int)

(declare-fun rec_aggregate__r3__z__position () Int)

;; rec_aggregate__r3__z__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__z__first__bit))

;; rec_aggregate__r3__z__last__bit_axiom
  (assert
  (< rec_aggregate__r3__z__first__bit rec_aggregate__r3__z__last__bit))

;; rec_aggregate__r3__z__position_axiom
  (assert (<= 0 rec_aggregate__r3__z__position))

(declare-fun dummy2 () us_rep1)

(declare-datatypes () ((r3__ref (mk_r3__ref (r3__content us_rep1)))))
(define-fun r3__ref___projection ((a r3__ref)) us_rep1 (r3__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun one () Int)

(declare-fun r__split_fields () integer)

(declare-fun r__split_fields1 () integer)

(declare-fun r__split_fields2 () integer)

(declare-fun r__split_fields3 () integer)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun o8 () integer)

(declare-fun o9 () integer)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun temp___178 () integer)

(declare-fun temp___1781 () integer)

(declare-fun temp___1782 () integer)

(declare-fun temp___1783 () integer)

(declare-fun o12 () integer)

(declare-fun o13 () integer)

(declare-fun o14 () integer)

(declare-fun o15 () integer)

(declare-fun o16 () integer)

(declare-fun o17 () integer)

(declare-fun o18 () integer)

(declare-fun o19 () integer)

(declare-fun o20 () integer)

(declare-fun o21 () integer)

(declare-fun o22 () integer)

(declare-fun o23 () integer)

(declare-fun temp___179 () us_rep1)

(declare-fun o24 () integer)

(declare-fun o25 () integer)

(declare-fun o26 () us_split_fields)

(declare-fun o27 () us_rep)

(declare-fun o28 () integer)

(declare-fun o29 () integer)

(declare-fun o30 () us_split_fields2)

(declare-fun temp___180 () us_rep1)

(declare-fun o31 () integer)

(declare-fun o32 () integer)

(declare-fun o33 () us_split_fields)

(declare-fun o34 () us_rep)

(declare-fun o35 () integer)

(declare-fun o36 () integer)

(declare-fun o37 () us_split_fields2)

(declare-fun temp___181 () us_rep1)

(declare-fun o38 () integer)

(declare-fun o39 () integer)

(declare-fun o40 () us_split_fields)

(declare-fun o41 () us_rep)

(declare-fun o42 () integer)

(declare-fun o43 () integer)

(declare-fun o44 () us_split_fields2)

(declare-fun temp___182 () us_rep1)

(declare-fun result () us_split_fields__ref1)

(declare-fun r__split_fields4 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun r__split_fields5 () us_split_fields2)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun r__split_fields6 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun r__split_fields7 () us_split_fields2)

(declare-fun result4 () us_split_fields__ref1)

(declare-fun r__split_fields8 () us_split_fields2)

(declare-fun r__split_fields9 () us_split_fields__ref1)

(declare-fun r__split_fields10 () us_split_fields2)

(define-fun r__split_fields11 () us_split_fields__ref1 (mk___split_fields__ref1
                                                       (mk___split_fields1
                                                       r__split_fields
                                                       r__split_fields1
                                                       (mk___rep
                                                       (mk___split_fields
                                                       r__split_fields2
                                                       r__split_fields3)))))

;; H
  (assert (in_range one))

;; H
  (assert (in_range b))

;; H
  (assert (= one 1))

;; H
  (assert (=> (= b 1) (= (to_rep o) 2)))

;; H
  (assert (=> (= b 1) (= (to_rep o1) one)))

;; H
  (assert (=> (= b 1) (= o1 o2)))

;; H
  (assert (=> (= b 1) (= o o3)))

;; H
  (assert (=> (= b 1) (= o4 o2)))

;; H
  (assert (=> (= b 1) (= o5 o3)))

;; H
  (assert (=> (= b 1) (= (to_rep o6) 2)))

;; H
  (assert (=> (= b 1) (= (to_rep o7) one)))

;; H
  (assert (=> (= b 1) (= o7 o8)))

;; H
  (assert (=> (= b 1) (= o6 o9)))

;; H
  (assert (=> (= b 1) (= o10 o4)))

;; H
  (assert (=> (= b 1) (= o11 o5)))

;; H
  (assert (=> (= b 1) (= temp___178 o8)))

;; H
  (assert (=> (= b 1) (= temp___1781 o9)))

;; H
  (assert (=> (= b 1) (= temp___1782 o10)))

;; H
  (assert (=> (= b 1) (= temp___1783 o11)))

;; H
  (assert (=> (= b 1) (= result r__split_fields11)))

;; H
  (assert
  (=> (= b 1)
  (= r__split_fields4 (mk___split_fields1 temp___178 temp___1781
                      (mk___rep (mk___split_fields temp___1782 temp___1783))))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o12) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o13) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o13 o14))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o12 o15))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o16 o14))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o17 o15))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o18) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= (to_rep o19) one))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o19 o20))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o18 o21))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o22 o16))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= o23 o17))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (= b 2)
  (= temp___179 (mk___rep1
                (mk___split_fields1 o20 o21
                (mk___rep (mk___split_fields o22 o23))))))))

;; H
  (assert (=> (not (= b 1)) (=> (= b 2) (= result1 r__split_fields11))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (= b 2) (= r__split_fields5 (us_split_fields3 temp___179)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o24) one)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o25) 1)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= o26 (mk___split_fields o25 o24))))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= o27 (mk___rep o26))))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o28) one)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (to_rep o29) one)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= o30 (mk___split_fields1 o29 o28 o27))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= temp___180 (mk___rep1 o30))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (= b 3) (= result2 r__split_fields11)))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (= b 3) (= r__split_fields6 (us_split_fields3 temp___180))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o31) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o32) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= o33 (mk___split_fields o32 o31)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= o34 (mk___rep o33)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o35) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (to_rep o36) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= o37 (mk___split_fields1 o36 o35 o34)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= temp___181 (mk___rep1 o37)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (= b 4) (= result3 r__split_fields11))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3))
  (=> (= b 4) (= r__split_fields7 (us_split_fields3 temp___181)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o38) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o39) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= o40 (mk___split_fields o39 o38)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= o41 (mk___rep o40)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o42) 2))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= (to_rep o43) one))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3))
  (=> (not (= b 4)) (= o44 (mk___split_fields1 o43 o42 o41)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= temp___182 (mk___rep1 o44)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= result4 r__split_fields11))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3))
  (=> (not (= b 4)) (= r__split_fields8 (us_split_fields3 temp___182)))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2))
  (=> (not (= b 3)) (=> (not (= b 4)) (= r__split_fields7 r__split_fields8))))))

;; H
  (assert
  (=> (not (= b 1))
  (=> (not (= b 2)) (=> (not (= b 3)) (= r__split_fields6 r__split_fields7)))))

;; H
  (assert
  (=> (not (= b 1)) (=> (not (= b 2)) (= r__split_fields5 r__split_fields6))))

;; H
  (assert (=> (not (= b 1)) (= r__split_fields4 r__split_fields5)))

;; H
  (assert (= r__split_fields9 (mk___split_fields__ref1 r__split_fields4)))

;; H
  (assert (= r__split_fields10 r__split_fields4))

;; H
  (assert (= b 1))

(assert
;; WP_parameter_def
 ;; File "rec_aggregate.ads", line 43, characters 0-0
  (not
  (= (bool_eq2 (mk___rep1 (us_split_fields__content1 r__split_fields9))
     (mk___rep1
     (mk___split_fields1 (of_rep one) (of_rep 2)
     (mk___rep (mk___split_fields (of_rep one) (of_rep 2)))))) true)))
(check-sat)
