;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__po_t__p_intT__condition Bool)(rec__po_t__the_protected_int integer)))))
(define-fun us_split_fields_Condition__projection ((a us_split_fields)) Bool 
  (rec__po_t__p_intT__condition a))

(define-fun us_split_fields_The_Protected_Int__projection ((a us_split_fields)) integer 
  (rec__po_t__the_protected_int a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun po_t__p_intT__condition__first__bit () Int)

(declare-fun po_t__p_intT__condition__last__bit () Int)

(declare-fun po_t__p_intT__condition__position () Int)

;; po_t__p_intT__condition__first__bit_axiom
  (assert (<= 0 po_t__p_intT__condition__first__bit))

;; po_t__p_intT__condition__last__bit_axiom
  (assert
  (< po_t__p_intT__condition__first__bit po_t__p_intT__condition__last__bit))

;; po_t__p_intT__condition__position_axiom
  (assert (<= 0 po_t__p_intT__condition__position))

(declare-datatypes ()
((p_intT__ref (mk_p_intT__ref (p_intT__content us_rep)))))
(define-fun p_intT__ref___projection ((a p_intT__ref)) us_rep (p_intT__content
                                                              a))

(declare-fun the_protected_int () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun get (us_rep) Int)

(declare-fun get__function_guard (Int us_rep) Bool)

;; get__post_axiom
  (assert
  (forall ((self__ us_rep))
  (! (let ((result (get self__)))
     (=> (get__function_guard result self__) (dynamic_invariant result true
     false true))) :pattern ((get self__)) )))

;; get__def_axiom
  (assert
  (forall ((self__ us_rep))
  (! (=> (get__function_guard (get self__) self__)
     (= (get self__) (ite (<= 0 the_protected_int) the_protected_int
                     (+ the_protected_int 10)))) :pattern ((get self__)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__po_t__hidden_poT__the_protected_int integer)(rec__po_t__hidden_poT__switch Bool)))))
(define-fun us_split_fields_The_Protected_Int2__projection ((a us_split_fields2)) integer 
  (rec__po_t__hidden_poT__the_protected_int a))

(define-fun us_split_fields_Switch__projection ((a us_split_fields2)) Bool 
  (rec__po_t__hidden_poT__switch a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun po_t__hidden_poT__the_protected_int__first__bit () Int)

(declare-fun po_t__hidden_poT__the_protected_int__last__bit () Int)

(declare-fun po_t__hidden_poT__the_protected_int__position () Int)

;; po_t__hidden_poT__the_protected_int__first__bit_axiom
  (assert (<= 0 po_t__hidden_poT__the_protected_int__first__bit))

;; po_t__hidden_poT__the_protected_int__last__bit_axiom
  (assert
  (< po_t__hidden_poT__the_protected_int__first__bit po_t__hidden_poT__the_protected_int__last__bit))

;; po_t__hidden_poT__the_protected_int__position_axiom
  (assert (<= 0 po_t__hidden_poT__the_protected_int__position))

(declare-fun po_t__hidden_poT__switch__first__bit () Int)

(declare-fun po_t__hidden_poT__switch__last__bit () Int)

(declare-fun po_t__hidden_poT__switch__position () Int)

;; po_t__hidden_poT__switch__first__bit_axiom
  (assert (<= 0 po_t__hidden_poT__switch__first__bit))

;; po_t__hidden_poT__switch__last__bit_axiom
  (assert
  (< po_t__hidden_poT__switch__first__bit po_t__hidden_poT__switch__last__bit))

;; po_t__hidden_poT__switch__position_axiom
  (assert (<= 0 po_t__hidden_poT__switch__position))

(declare-datatypes ()
((hidden_poT__ref (mk_hidden_poT__ref (hidden_poT__content us_rep1)))))
(define-fun hidden_poT__ref___projection ((a hidden_poT__ref)) us_rep1 
  (hidden_poT__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun get1 (us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep1) Bool)

;; get__post_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (let ((result (get1 self__)))
     (=> (get__function_guard1 result self__) (dynamic_invariant result true
     false true))) :pattern ((get1 self__)) )))

;; get__def_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (=> (get__function_guard1 (get1 self__) self__)
     (= (get1 self__) (ite (<= 0 (to_rep
                                 (rec__po_t__hidden_poT__the_protected_int
                                 (us_split_fields3 self__))))
                      (to_rep
                      (rec__po_t__hidden_poT__the_protected_int
                      (us_split_fields3 self__)))
                      (+ (to_rep
                         (rec__po_t__hidden_poT__the_protected_int
                         (us_split_fields3 self__))) 10)))) :pattern (
  (get1 self__)) )))

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun y () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun o () Bool)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () Bool)

(declare-fun o4 () Bool)

(declare-fun o5 () integer)

(declare-fun po_t__B_1__x__assume () Int)

(declare-fun o6 () integer)

(declare-fun o7 () Bool)

(declare-fun po_t__B_1__y__assume () Int)

(declare-fun p_int () Bool)

(declare-fun p_int1 () integer)

(declare-fun hidden_po () integer)

(declare-fun hidden_po1 () Bool)

(declare-fun p_int2 () Bool)

(declare-fun p_int3 () integer)

(declare-fun hidden_po2 () integer)

(declare-fun hidden_po3 () Bool)

(define-fun o8 () us_rep1 (mk___rep1 (mk___split_fields1 o6 o7)))

(define-fun o9 () us_rep (mk___rep (mk___split_fields o4 o5)))

;; H
  (assert (in_range the_protected_int))

;; H
  (assert (= o p_int))

;; H
  (assert (= o1 p_int1))

;; H
  (assert (= o2 hidden_po))

;; H
  (assert (= o3 hidden_po1))

;; H
  (assert (= o9 (mk___rep (mk___split_fields p_int2 p_int3))))

;; H
  (assert
  (and
  (and (= po_t__B_1__x__assume (get o9)) (get__function_guard
  po_t__B_1__x__assume o9))
  (and (in_range po_t__B_1__x__assume)
  (= po_t__B_1__x__assume (ite (<= 0 the_protected_int) the_protected_int
                          (+ the_protected_int 10))))))

;; H
  (assert (= po_t__B_1__x__assume x))

;; H
  (assert (in_range x))

;; H
  (assert (= o8 (mk___rep1 (mk___split_fields1 hidden_po2 hidden_po3))))

;; H
  (assert
  (and
  (and (= po_t__B_1__y__assume (get1 o8)) (get__function_guard1
  po_t__B_1__y__assume o8))
  (and (in_range po_t__B_1__y__assume)
  (= po_t__B_1__y__assume (ite (<= 0 (to_rep o6)) (to_rep o6)
                          (+ (to_rep o6) 10))))))

;; H
  (assert (= po_t__B_1__y__assume y))

;; H
  (assert (in_range y))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= x y)))
(check-sat)
