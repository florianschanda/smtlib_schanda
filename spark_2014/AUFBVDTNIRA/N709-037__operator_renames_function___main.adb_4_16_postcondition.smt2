;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__test__record_t__x integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer 
  (rec__test__record_t__x a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__test__record_t__x (us_split_fields1 a))) 
                   (to_rep (rec__test__record_t__x (us_split_fields1 b))))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun test__record_t__x__first__bit () Int)

(declare-fun test__record_t__x__last__bit () Int)

(declare-fun test__record_t__x__position () Int)

;; test__record_t__x__first__bit_axiom
  (assert (<= 0 test__record_t__x__first__bit))

;; test__record_t__x__last__bit_axiom
  (assert (< test__record_t__x__first__bit test__record_t__x__last__bit))

;; test__record_t__x__position_axiom
  (assert (<= 0 test__record_t__x__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((record_t__ref (mk_record_t__ref (record_t__content us_rep)))))
(define-fun record_t__ref___projection ((a record_t__ref)) us_rep (record_t__content
                                                                  a))

(declare-fun equivalent (us_rep us_rep) Bool)

(declare-fun equivalent__function_guard (Bool us_rep us_rep) Bool)

;; equivalent__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun a__split_fields () integer)

(declare-fun b__split_fields () integer)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun temp___141 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun temp___143 () integer)

(declare-fun result () integer)

(declare-fun a__split_fields1 () integer)

(declare-fun result1 () integer)

(declare-fun b__split_fields1 () integer)

(declare-fun a__split_fields2 () integer)

(declare-fun b__split_fields2 () integer)

(declare-fun a__split_fields3 () integer)

(declare-fun b__split_fields3 () us_split_fields)

;; H
  (assert
  (and (= o (+ (to_rep a__split_fields) (to_rep b__split_fields))) (in_range
  (+ (to_rep a__split_fields) (to_rep b__split_fields)))))

;; H
  (assert (= o1 (div1 o 2)))

;; H
  (assert (= (to_rep o2) o1))

;; H
  (assert (= o2 o3))

;; H
  (assert (= temp___141 o3))

;; H
  (assert (= result a__split_fields))

;; H
  (assert (= temp___141 a__split_fields1))

;; H
  (assert (= (to_rep o4) (to_rep a__split_fields1)))

;; H
  (assert (= o4 o5))

;; H
  (assert (= temp___143 o5))

;; H
  (assert (= result1 b__split_fields))

;; H
  (assert (= temp___143 b__split_fields1))

;; H
  (assert (= b__split_fields2 b__split_fields1))

;; H
  (assert (= a__split_fields2 a__split_fields1))

;; H
  (assert (= b__split_fields3 (mk___split_fields b__split_fields1)))

;; H
  (assert (= a__split_fields3 a__split_fields1))

;; H
  (assert (equivalent__function_guard
  (equivalent (mk___rep (mk___split_fields a__split_fields2))
  (mk___rep (mk___split_fields b__split_fields2)))
  (mk___rep (mk___split_fields a__split_fields2))
  (mk___rep (mk___split_fields b__split_fields2))))

(assert
;; WP_parameter_def
 ;; File "main.adb", line 3, characters 0-0
  (not
  (= (equivalent (mk___rep (mk___split_fields a__split_fields2))
     (mk___rep (mk___split_fields b__split_fields2))) true)))
(check-sat)
