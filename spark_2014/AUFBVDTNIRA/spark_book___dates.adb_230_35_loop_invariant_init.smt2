;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort day_advance_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 36524) x) (<= x 36524)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (day_advance_type day_advance_type) Bool)

(declare-fun dummy () day_advance_type)

(declare-datatypes ()
((day_advance_type__ref
 (mk_day_advance_type__ref (day_advance_type__content day_advance_type)))))
(define-fun day_advance_type__ref___projection ((a day_advance_type__ref)) day_advance_type 
  (day_advance_type__content a))

(define-fun dynamic_invariant ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= (- 36524) 36524)) (in_range1
                                      temp___expr_192)))

(declare-sort year_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (year_type year_type) Bool)

(declare-fun dummy1 () year_type)

(declare-datatypes ()
((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type 
  (year_type__content a))

(declare-fun to_rep (year_type) Int)

(declare-fun of_rep (Int) year_type)

;; inversion_axiom
  (assert
  (forall ((x year_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x year_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort month_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (month_type month_type) Bool)

(declare-fun dummy2 () month_type)

(declare-datatypes ()
((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type 
  (month_type__content a))

(declare-fun to_rep1 (month_type) Int)

(declare-fun of_rep1 (Int) month_type)

;; inversion_axiom
  (assert
  (forall ((x month_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x month_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort day_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (day_type day_type) Bool)

(declare-fun dummy3 () day_type)

(declare-datatypes ()
((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content
                                                                    a))

(declare-fun to_rep2 (day_type) Int)

(declare-fun of_rep2 (Int) day_type)

;; inversion_axiom
  (assert
  (forall ((x day_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x day_type)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__dates__date__day day_type)(rec__dates__date__month month_type)(rec__dates__date__year year_type)))))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) day_type 
  (rec__dates__date__day a))

(define-fun us_split_fields_Month__projection ((a us_split_fields)) month_type 
  (rec__dates__date__month a))

(define-fun us_split_fields_Year__projection ((a us_split_fields)) year_type 
  (rec__dates__date__year a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__dates__date__day (us_split_fields1 a))) 
                        (to_rep2
                        (rec__dates__date__day (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__dates__date__month (us_split_fields1 a))) 
                        (to_rep1
                        (rec__dates__date__month (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__dates__date__year (us_split_fields1 a))) 
                        (to_rep
                        (rec__dates__date__year (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun by__ () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun maximum_date (tuple0) us_rep)

(declare-fun maximum_date__function_guard (us_rep tuple0) Bool)

;; maximum_date__post_axiom
  (assert true)

;; maximum_date__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (maximum_date us_void_param) (mk___rep
                                     (mk___split_fields (of_rep2 31)
                                     (of_rep1 12) (of_rep 2099)))) :pattern (
  (maximum_date us_void_param)) )))

(declare-fun minimum_date (tuple0) us_rep)

(declare-fun minimum_date__function_guard (us_rep tuple0) Bool)

;; minimum_date__post_axiom
  (assert true)

;; minimum_date__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (minimum_date us_void_param) (mk___rep
                                     (mk___split_fields (of_rep2 1)
                                     (of_rep1 1) (of_rep 2000)))) :pattern (
  (minimum_date us_void_param)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun r36b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort integer 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep3 (integer) Int)

(declare-fun of_rep3 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t37b__ref (mk_t37b__ref (t37b__content integer)))))
(define-fun t37b__ref___projection ((a t37b__ref)) integer (t37b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun r38b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes () ((t39b__ref (mk_t39b__ref (t39b__content integer)))))
(define-fun t39b__ref___projection ((a t39b__ref)) integer (t39b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 2000 2099)) (in_range2
                                      temp___expr_150)))

(define-fun dynamic_invariant3 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 1 12)) (in_range3 temp___expr_156)))

(define-fun dynamic_invariant4 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 1 31)) (in_range4 temp___expr_162)))

(declare-fun current_date__split_fields () day_type)

(declare-fun current_date__split_fields1 () month_type)

(declare-fun current_date__split_fields2 () year_type)

(declare-fun valid () Bool)

(declare-fun steps () Int)

(declare-fun i () Int)

(declare-fun o () day_type)

(declare-fun o1 () month_type)

(declare-fun o2 () year_type)

(declare-fun result () Bool)

(declare-fun valid1 () Bool)

(declare-fun result1 () Int)

(declare-fun steps1 () Int)

(declare-fun result2 () Int)

(declare-fun i1 () Int)

(declare-fun result3 () Bool)

(declare-fun valid2 () Bool)

(define-fun o3 () us_rep (mk___rep (mk___split_fields o o1 o2)))

;; H
  (assert (in_range1 by__))

;; H
  (assert (=> (<= (- 36524) 36524) (in_range1 steps)))

;; H
  (assert (= result valid))

;; H
  (assert (= valid1 (of_int 1)))

;; H
  (assert (<= 0 by__))

;; H
  (assert (= result1 steps))

;; H
  (assert (= steps1 by__))

;; H
  (assert (= steps1 r36b))

;; H
  (assert (in_range1 r36b))

;; H
  (assert (= result2 i))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 r36b))

;; H
  (assert
  (and (= o3 (maximum_date Tuple0))
  (and (= (of_rep2 31) o) (and (= (of_rep1 12) o1) (= (of_rep 2099) o2)))))

;; H
  (assert
  (= result3 (bool_eq4
             (mk___rep
             (mk___split_fields current_date__split_fields
             current_date__split_fields1 current_date__split_fields2)) 
             o3)))

;; H
  (assert (not (= result3 true)))

;; H
  (assert (= valid2 valid1))

(assert
;; WP_parameter_def
 ;; File "dates.ads", line 89, characters 0-0
  (not
  (not
  (= (bool_eq4
     (mk___rep
     (mk___split_fields current_date__split_fields
     current_date__split_fields1 current_date__split_fields2))
     (maximum_date Tuple0)) true))))
(check-sat)
