;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun fib (Int) Int)

(declare-fun fib__function_guard (Int Int) Bool)

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-fun power (Float32 Int) Float32)

;; Power_0
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 0) ((_ to_fp 8 24) RNE (to_real 1))))))

;; Power_1
  (assert
  (forall ((x Float32)) (=> (fp.isFinite32 x) (fp.eq (power x 1) x))))

;; Power_2
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 2) (fp.mul RNE x x)))))

;; Power_3
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x) (fp.eq (power x 3) (fp.mul RNE x (fp.mul RNE x x))))))

;; Power_neg1
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 1)) (fp.div RNE ((_ to_fp 8 24) RNE (to_real 1)) x))))))

;; Power_neg2
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 2)) (fp.div RNE ((_ to_fp 8 24) RNE (to_real 1))
  (power x 2)))))))

;; Power_neg3
  (assert
  (forall ((x Float32))
  (=> (fp.isFinite32 x)
  (=> (not (fp.isZero x))
  (fp.eq (power x (- 2)) (fp.div RNE ((_ to_fp 8 24) RNE (to_real 1))
  (power x 3)))))))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-sort fibonacci_argument_type 0)

(declare-fun fibonacci_argument_typeqtint (fibonacci_argument_type) Int)

;; fibonacci_argument_type'axiom
  (assert
  (forall ((i fibonacci_argument_type))
  (and (<= 0 (fibonacci_argument_typeqtint i))
  (<= (fibonacci_argument_typeqtint i) 46))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 46)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (fibonacci_argument_type fibonacci_argument_type) Bool)

(declare-const dummy1 fibonacci_argument_type)

(declare-datatypes ()
((fibonacci_argument_type__ref
 (mk_fibonacci_argument_type__ref
 (fibonacci_argument_type__content fibonacci_argument_type)))))
(define-fun fibonacci_argument_type__ref___projection ((a fibonacci_argument_type__ref)) fibonacci_argument_type
  (fibonacci_argument_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_208 Int)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)
  (temp___do_typ_inv_207 Bool)) Bool (=>
                                     (or (= temp___is_init_204 true)
                                     (<= 0 46)) (in_range1 temp___expr_208)))

;; fib__def_axiom
  (assert
  (forall ((n Int))
  (! (=> (dynamic_invariant1 n true true true true)
     (= (fib n) (ite (or (= n 0) (= n 1)) n (+ (fib (- n 1)) (fib (- n 2)))))) :pattern (
  (fib n)) )))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const lookup_table (Array Int natural))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun number_theory__fibonacci2__lookup_table__aggregate_def (Int Int
  Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int
  Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int
  Int Int Int Int Int Int Int) (Array Int natural))

;; lookup_table__def_axiom
  (assert
  (= lookup_table (number_theory__fibonacci2__lookup_table__aggregate_def 0 1
                  1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
                  6765 10946 17711 28657 46368 75025 121393 196418 317811
                  514229 832040 1346269 2178309 3524578 5702887 9227465
                  14930352 24157817 39088169 63245986 102334155 165580141
                  267914296 433494437 701408733 1134903170 1836311903)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 0))

(declare-const rliteral1 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral1) 1))

(declare-const rliteral2 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral2) 2))

(declare-const rliteral3 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral3) 3))

(declare-const rliteral4 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral4) 5))

(declare-const rliteral5 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral5) 8))

(declare-const rliteral6 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral6) 13))

(declare-const rliteral7 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral7) 21))

(declare-const rliteral8 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral8) 34))

(declare-const rliteral9 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral9) 55))

(declare-const rliteral10 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral10) 89))

(declare-const rliteral11 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral11) 144))

(declare-const rliteral12 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral12) 233))

(declare-const rliteral13 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral13) 377))

(declare-const rliteral14 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral14) 610))

(declare-const rliteral15 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral15) 987))

(declare-const rliteral16 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral16) 1597))

(declare-const rliteral17 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral17) 2584))

(declare-const rliteral18 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral18) 4181))

(declare-const rliteral19 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral19) 6765))

(declare-const rliteral20 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral20) 10946))

(declare-const rliteral21 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral21) 17711))

(declare-const rliteral22 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral22) 28657))

(declare-const rliteral23 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral23) 46368))

(declare-const rliteral24 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral24) 75025))

(declare-const rliteral25 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral25) 121393))

(declare-const rliteral26 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral26) 196418))

(declare-const rliteral27 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral27) 317811))

(declare-const rliteral28 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral28) 514229))

(declare-const rliteral29 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral29) 832040))

(declare-const rliteral30 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral30) 1346269))

(declare-const rliteral31 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral31) 2178309))

(declare-const rliteral32 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral32) 3524578))

(declare-const rliteral33 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral33) 5702887))

(declare-const rliteral34 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral34) 9227465))

(declare-const rliteral35 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral35) 14930352))

(declare-const rliteral36 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral36) 24157817))

(declare-const rliteral37 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral37) 39088169))

(declare-const rliteral38 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral38) 63245986))

(declare-const rliteral39 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral39) 102334155))

(declare-const rliteral40 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral40) 165580141))

(declare-const rliteral41 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral41) 267914296))

(declare-const rliteral42 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral42) 433494437))

(declare-const rliteral43 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral43) 701408733))

(declare-const rliteral44 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral44) 1134903170))

(declare-const rliteral45 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral45) 1836311903))

;; def_axiom
  (assert
  (forall ((temp___156 Int) (temp___157 Int) (temp___158 Int)
  (temp___159 Int) (temp___160 Int) (temp___161 Int) (temp___162 Int)
  (temp___163 Int) (temp___164 Int) (temp___165 Int) (temp___166 Int)
  (temp___167 Int) (temp___168 Int) (temp___169 Int) (temp___170 Int)
  (temp___171 Int) (temp___172 Int) (temp___173 Int) (temp___174 Int)
  (temp___175 Int) (temp___176 Int) (temp___177 Int) (temp___178 Int)
  (temp___179 Int) (temp___180 Int) (temp___181 Int) (temp___182 Int)
  (temp___183 Int) (temp___184 Int) (temp___185 Int) (temp___186 Int)
  (temp___187 Int) (temp___188 Int) (temp___189 Int) (temp___190 Int)
  (temp___191 Int) (temp___192 Int) (temp___193 Int) (temp___194 Int)
  (temp___195 Int) (temp___196 Int) (temp___197 Int) (temp___198 Int)
  (temp___199 Int) (temp___200 Int) (temp___201 Int) (temp___202 Int))
  (let ((temp___155 (number_theory__fibonacci2__lookup_table__aggregate_def
                    temp___156 temp___157 temp___158 temp___159 temp___160
                    temp___161 temp___162 temp___163 temp___164 temp___165
                    temp___166 temp___167 temp___168 temp___169 temp___170
                    temp___171 temp___172 temp___173 temp___174 temp___175
                    temp___176 temp___177 temp___178 temp___179 temp___180
                    temp___181 temp___182 temp___183 temp___184 temp___185
                    temp___186 temp___187 temp___188 temp___189 temp___190
                    temp___191 temp___192 temp___193 temp___194 temp___195
                    temp___196 temp___197 temp___198 temp___199 temp___200
                    temp___201 temp___202)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant temp___156 true true true true) (dynamic_invariant
  temp___157 true true true true)) (dynamic_invariant temp___158 true true
  true true)) (dynamic_invariant temp___159 true true true true))
  (dynamic_invariant temp___160 true true true true)) (dynamic_invariant
  temp___161 true true true true)) (dynamic_invariant temp___162 true true
  true true)) (dynamic_invariant temp___163 true true true true))
  (dynamic_invariant temp___164 true true true true)) (dynamic_invariant
  temp___165 true true true true)) (dynamic_invariant temp___166 true true
  true true)) (dynamic_invariant temp___167 true true true true))
  (dynamic_invariant temp___168 true true true true)) (dynamic_invariant
  temp___169 true true true true)) (dynamic_invariant temp___170 true true
  true true)) (dynamic_invariant temp___171 true true true true))
  (dynamic_invariant temp___172 true true true true)) (dynamic_invariant
  temp___173 true true true true)) (dynamic_invariant temp___174 true true
  true true)) (dynamic_invariant temp___175 true true true true))
  (dynamic_invariant temp___176 true true true true)) (dynamic_invariant
  temp___177 true true true true)) (dynamic_invariant temp___178 true true
  true true)) (dynamic_invariant temp___179 true true true true))
  (dynamic_invariant temp___180 true true true true)) (dynamic_invariant
  temp___181 true true true true)) (dynamic_invariant temp___182 true true
  true true)) (dynamic_invariant temp___183 true true true true))
  (dynamic_invariant temp___184 true true true true)) (dynamic_invariant
  temp___185 true true true true)) (dynamic_invariant temp___186 true true
  true true)) (dynamic_invariant temp___187 true true true true))
  (dynamic_invariant temp___188 true true true true)) (dynamic_invariant
  temp___189 true true true true)) (dynamic_invariant temp___190 true true
  true true)) (dynamic_invariant temp___191 true true true true))
  (dynamic_invariant temp___192 true true true true)) (dynamic_invariant
  temp___193 true true true true)) (dynamic_invariant temp___194 true true
  true true)) (dynamic_invariant temp___195 true true true true))
  (dynamic_invariant temp___196 true true true true)) (dynamic_invariant
  temp___197 true true true true)) (dynamic_invariant temp___198 true true
  true true)) (dynamic_invariant temp___199 true true true true))
  (dynamic_invariant temp___200 true true true true)) (dynamic_invariant
  temp___201 true true true true)) (dynamic_invariant temp___202 true true
  true true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___155 0) rliteral)
  (= (select temp___155 1) rliteral1)) (= (select temp___155 2) rliteral1))
  (= (select temp___155 3) rliteral2)) (= (select temp___155 4) rliteral3))
  (= (select temp___155 5) rliteral4)) (= (select temp___155 6) rliteral5))
  (= (select temp___155 7) rliteral6)) (= (select temp___155 8) rliteral7))
  (= (select temp___155 9) rliteral8)) (= (select temp___155 10) rliteral9))
  (= (select temp___155 11) rliteral10))
  (= (select temp___155 12) rliteral11))
  (= (select temp___155 13) rliteral12))
  (= (select temp___155 14) rliteral13))
  (= (select temp___155 15) rliteral14))
  (= (select temp___155 16) rliteral15))
  (= (select temp___155 17) rliteral16))
  (= (select temp___155 18) rliteral17))
  (= (select temp___155 19) rliteral18))
  (= (select temp___155 20) rliteral19))
  (= (select temp___155 21) rliteral20))
  (= (select temp___155 22) rliteral21))
  (= (select temp___155 23) rliteral22))
  (= (select temp___155 24) rliteral23))
  (= (select temp___155 25) rliteral24))
  (= (select temp___155 26) rliteral25))
  (= (select temp___155 27) rliteral26))
  (= (select temp___155 28) rliteral27))
  (= (select temp___155 29) rliteral28))
  (= (select temp___155 30) rliteral29))
  (= (select temp___155 31) rliteral30))
  (= (select temp___155 32) rliteral31))
  (= (select temp___155 33) rliteral32))
  (= (select temp___155 34) rliteral33))
  (= (select temp___155 35) rliteral34))
  (= (select temp___155 36) rliteral35))
  (= (select temp___155 37) rliteral36))
  (= (select temp___155 38) rliteral37))
  (= (select temp___155 39) rliteral38))
  (= (select temp___155 40) rliteral39))
  (= (select temp___155 41) rliteral40))
  (= (select temp___155 42) rliteral41))
  (= (select temp___155 43) rliteral42))
  (= (select temp___155 44) rliteral43))
  (= (select temp___155 45) rliteral44))
  (= (select temp___155 46) rliteral45))))))

(declare-const number_theory__fibonacci2__result Int)

(declare-const number_theory__fibonacci2__result1 Int)

(declare-const number_theory__fibonacci2__result2 Int)

;; H
  (assert (in_range1 n))

;; H
  (assert
  (= (number_theory__fibonacci2__lookup_table__aggregate_def 0 1 1 2 3 5 8 13
     21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657
     46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578
     5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141
     267914296 433494437 701408733 1134903170 1836311903) lookup_table))

;; H
  (assert
  (= number_theory__fibonacci2__result number_theory__fibonacci2__result1))

;; H
  (assert
  (= number_theory__fibonacci2__result (to_rep (select lookup_table n))))

;; H
  (assert
  (= (mk_int__ref number_theory__fibonacci2__result2) (mk_int__ref
                                                      number_theory__fibonacci2__result1)))

(assert
;; WP_parameter_def
 ;; File "/home/florian/adacore/spark2014/testsuite/gnatprove/tests/O512-022__number_theory/gnatprove/number_theory.mlw", line 3028, characters 5-8
  (not (= number_theory__fibonacci2__result2 (fib n))))
(check-sat)
(exit)
