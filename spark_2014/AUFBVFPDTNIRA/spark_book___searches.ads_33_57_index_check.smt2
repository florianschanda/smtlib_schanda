;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-fun dummy2 () us_t)

(declare-datatypes ()
((array_type__ref (mk_array_type__ref (array_type__content us_t)))))
(define-fun array_type__ref___projection ((a array_type__ref)) us_t (array_type__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_136 us_t)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (not (= temp___skip_constant_134 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_136)
                                      (last1 temp___expr_136))))

(declare-fun list () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun value () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun found () Bool)

(declare-fun position () Int)

(declare-fun o () Int)

(declare-fun temp___160 () Int)

(declare-fun o1 () Int)

(declare-fun o2 () integer)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () integer)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun j () Int)

(declare-fun o9 () Int)

(declare-fun o10 () integer)

(declare-fun o11 () Int)

(declare-fun result () Int)

(declare-fun position1 () Int)

(declare-fun result1 () Bool)

(declare-fun result2 () Int)

(declare-fun position2 () Int)

(declare-fun position3 () Int)

(declare-fun result3 () Bool)

(declare-fun position4 () Int)

(declare-fun position5 () Int)

(declare-fun position6 () Int)

(declare-fun position7 () Int)

(declare-fun position8 () Int)

(declare-fun position9 () Int)

(declare-fun result4 () Bool)

(declare-fun found1 () Bool)

(declare-fun result5 () Int)

(declare-fun position10 () Int)

(declare-fun position11 () Int)

(declare-fun position12 () Int)

(declare-fun found2 () Bool)

(declare-fun position13 () Int)

(declare-fun found3 () Bool)

(declare-fun position14 () Int)

(declare-fun result6 () Bool)

(declare-fun result7 () Bool)

(define-fun position15 () int__ref (mk_int__ref position11))

(define-fun position16 () int__ref (mk_int__ref position8))

(define-fun position17 () int__ref (mk_int__ref position6))

;; H
  (assert (dynamic_invariant2 list true false true))

;; H
  (assert (in_range1 value))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 position)))

;; H
  (assert
  (and (< 0 (length list))
  (and (< (to_rep (last (rt list))) 2147483647)
  (forall ((j1 Int))
  (=>
  (and (<= (to_rep (first (rt list))) j1) (<= j1 (to_rep (last (rt list)))))
  (forall ((k Int))
  (=>
  (and (<= (to_rep (first (rt list))) k) (<= k (to_rep (last (rt list)))))
  (=> (= (to_rep (select (elts list) j1)) (to_rep (select (elts list) k)))
  (= j1 k)))))))))

;; H
  (assert
  (and (= o (to_rep (first (rt list)))) (in_range2
  (to_rep (first (rt list))))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref position)))

;; H
  (assert (= position1 o))

;; H
  (assert (= temp___160 position1))

;; H
  (assert
  (or
  (and (and (= position1 position4) (= position5 position1))
  (and
  (ite (< (to_rep (last (rt list))) position1) (= result1 true)
  (and
  (and
  (and
  (and
  (and (<= (to_rep (first (rt list))) position1)
  (<= position1 (to_rep (last (rt list))))) (= o1 position1))
  (= o2 (select (elts list) o1))) (= o3 (to_rep o2)))
  (= result1 (ite (= o3 value) true false)))) (= result1 true)))
  (and
  (and
  (ite (< (to_rep (last (rt list))) position1) (= result1 true)
  (and
  (and
  (and
  (and
  (and (<= (to_rep (first (rt list))) position1)
  (<= position1 (to_rep (last (rt list))))) (= o1 position1))
  (= o2 (select (elts list) o1))) (= o3 (to_rep o2)))
  (= result1 (ite (= o3 value) true false)))) (not (= result1 true)))
  (and (and (= position3 position4) (= position5 position3))
  (and
  (and (and (= o4 (+ position1 1)) (in_range1 (+ position1 1)))
  (and (= position1 result2) (= position2 o4)))
  (and
  (and
  (and (<= (to_rep (first (rt list))) position3)
  (<= position3 (+ (to_rep (last (rt list))) 1)))
  (forall ((j1 Int))
  (=> (and (<= (to_rep (first (rt list))) j1) (<= j1 (- position3 1)))
  (not (= (to_rep (select (elts list) j1)) value)))))
  (and (=> (<= 1 2147483647) (in_range2 position3))
  (and
  (ite (< (to_rep (last (rt list))) position3) (= result3 true)
  (and
  (and
  (and
  (and
  (and (<= (to_rep (first (rt list))) position3)
  (<= position3 (to_rep (last (rt list))))) (= o5 position3))
  (= o6 (select (elts list) o5))) (= o7 (to_rep o6)))
  (= result3 (ite (= o7 value) true false)))) (= result3 true)))))))))

;; H
  (assert (= position17 (mk_int__ref position4)))

;; H
  (assert (= position7 position5))

;; H
  (assert (= position16 position17))

;; H
  (assert (= position9 position7))

;; H
  (assert (= (mk_bool__ref result4) (mk_bool__ref found)))

;; H
  (assert
  (= found1 (ite (<= position8 (to_rep (last (rt list)))) true false)))

;; H
  (assert
  (=> (not (= found1 true))
  (and (= o8 (to_rep (last (rt list)))) (in_range2
  (to_rep (last (rt list)))))))

;; H
  (assert (=> (not (= found1 true)) (= (mk_int__ref result5) position16)))

;; H
  (assert (=> (not (= found1 true)) (= position10 o8)))

;; H
  (assert (=> (not (= found1 true)) (= position10 position11)))

;; H
  (assert (=> (not (= found1 true)) (= position12 position10)))

;; H
  (assert (=> (not (not (= found1 true))) (= position15 position16)))

;; H
  (assert (=> (not (not (= found1 true))) (= position12 position9)))

;; H
  (assert (= (mk_int__ref position13) position15))

;; H
  (assert (= found1 found2))

;; H
  (assert (= position14 position12))

;; H
  (assert (= found3 found1))

;; H
  (assert (<= (to_rep (first (rt list))) position13))

;; H
  (assert (<= position13 (to_rep (last (rt list)))))

;; H
  (assert
  (=> (= found2 true)
  (and (<= (to_rep (first (rt list))) position13)
  (<= position13 (to_rep (last (rt list)))))))

;; H
  (assert (=> (= found2 true) (= o9 position13)))

;; H
  (assert (=> (= found2 true) (= o10 (select (elts list) o9))))

;; H
  (assert (=> (= found2 true) (= o11 (to_rep o10))))

;; H
  (assert (=> (= found2 true) (= result6 (ite (= o11 value) true false))))

;; H
  (assert (=> (not (= found2 true)) (= result6 false)))

;; H
  (assert (not (= result6 true)))

;; H
  (assert
  (=> (not (= found2 true))
  (= result7 (ite (= position13 (to_rep (last (rt list)))) true false))))

;; H
  (assert (=> (not (not (= found2 true))) (= result7 false)))

;; H
  (assert (= result7 true))

;; H
  (assert (<= (to_rep (first (rt list))) j))

;; H
  (assert (<= j (to_rep (last (rt list)))))

(assert
;; WP_parameter_def
 ;; File "searches.ads", line 8, characters 0-0
  (not (<= (to_rep (first (rt list))) j)))
(check-sat)
(exit)
