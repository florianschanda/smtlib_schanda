;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun maxpupils () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort percentage 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (percentage percentage) Bool)

(declare-fun dummy1 () percentage)

(declare-datatypes ()
((percentage__ref (mk_percentage__ref (percentage__content percentage)))))
(define-fun percentage__ref___projection ((a percentage__ref)) percentage 
  (percentage__content a))

(declare-fun to_rep (percentage) Int)

(declare-fun of_rep (Int) percentage)

;; inversion_axiom
  (assert
  (forall ((x percentage))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x percentage)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__pupils__participation__studying Bool)(rec__pupils__participation__score percentage)))))
(define-fun us_split_fields_Studying__projection ((a us_split_fields)) Bool 
  (rec__pupils__participation__studying a))

(define-fun us_split_fields_Score__projection ((a us_split_fields)) percentage 
  (rec__pupils__participation__score a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__pupils__participation__studying
                           (us_split_fields1 a)) (rec__pupils__participation__studying
                                                 (us_split_fields1 b)))
                        (= (to_rep
                           (rec__pupils__participation__score
                           (us_split_fields1 a))) (to_rep
                                                  (rec__pupils__participation__score
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun pupils__participation__studying__first__bit () Int)

(declare-fun pupils__participation__studying__last__bit () Int)

(declare-fun pupils__participation__studying__position () Int)

;; pupils__participation__studying__first__bit_axiom
  (assert (<= 0 pupils__participation__studying__first__bit))

;; pupils__participation__studying__last__bit_axiom
  (assert
  (< pupils__participation__studying__first__bit pupils__participation__studying__last__bit))

;; pupils__participation__studying__position_axiom
  (assert (<= 0 pupils__participation__studying__position))

(declare-fun pupils__participation__score__first__bit () Int)

(declare-fun pupils__participation__score__last__bit () Int)

(declare-fun pupils__participation__score__position () Int)

;; pupils__participation__score__first__bit_axiom
  (assert (<= 0 pupils__participation__score__first__bit))

;; pupils__participation__score__last__bit_axiom
  (assert
  (< pupils__participation__score__first__bit pupils__participation__score__last__bit))

;; pupils__participation__score__position_axiom
  (assert (<= 0 pupils__participation__score__position))

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((participation__ref (mk_participation__ref (participation__content us_rep)))))
(define-fun participation__ref___projection ((a participation__ref)) us_rep 
  (participation__content a))

(declare-fun null_participation () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort subject 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 18)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (subject subject) Bool)

(declare-fun dummy3 () subject)

(declare-datatypes ()
((subject__ref (mk_subject__ref (subject__content subject)))))
(define-fun subject__ref___projection ((a subject__ref)) subject (subject__content
                                                                 a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq2 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq2 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort t3s 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 18)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (t3s t3s) Bool)

(declare-fun dummy4 () t3s)

(declare-datatypes () ((t3s__ref (mk_t3s__ref (t3s__content t3s)))))
(define-fun t3s__ref___projection ((a t3s__ref)) t3s (t3s__content a))

(declare-fun null_results () (Array Int us_rep))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun pupils__null_results__aggregate_def (us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___134 us_rep))
  (forall ((temp___135 Int))
  (= (select (pupils__null_results__aggregate_def temp___134) temp___135) temp___134))))

(declare-sort nameindex 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 25)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (nameindex nameindex) Bool)

(declare-fun dummy5 () nameindex)

(declare-datatypes ()
((nameindex__ref (mk_nameindex__ref (nameindex__content nameindex)))))
(define-fun nameindex__ref___projection ((a nameindex__ref)) nameindex 
  (nameindex__content a))

(declare-sort character 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (character character) Bool)

(declare-fun dummy6 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range6
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq8 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq8 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq8 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq8 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t5s 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 25)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (t5s t5s) Bool)

(declare-fun dummy7 () t5s)

(declare-datatypes () ((t5s__ref (mk_t5s__ref (t5s__content t5s)))))
(define-fun t5s__ref___projection ((a t5s__ref)) t5s (t5s__content a))

(declare-fun null_name () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun pupils__null_name__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___137 Int))
  (forall ((temp___138 Int))
  (= (select (pupils__null_name__aggregate_def temp___137) temp___138) 
  (of_rep1 temp___137)))))

(declare-sort formtype 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (formtype formtype) Bool)

(declare-fun dummy8 () formtype)

(declare-datatypes ()
((formtype__ref (mk_formtype__ref (formtype__content formtype)))))
(define-fun formtype__ref___projection ((a formtype__ref)) formtype (formtype__content
                                                                    a))

(declare-fun to_rep2 (formtype) Int)

(declare-fun of_rep2 (Int) formtype)

;; inversion_axiom
  (assert
  (forall ((x formtype))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x formtype)) (! (in_range8 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun dummy9 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq9 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-fun dummy10 () (Array Int character))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__pupils__pupiltype__surname (Array Int character))(rec__pupils__pupiltype__forename (Array Int character))(rec__pupils__pupiltype__form formtype)(rec__pupils__pupiltype__scores (Array Int us_rep))))))
(define-fun us_split_fields_Surname__projection ((a us_split_fields2)) (Array Int character) 
  (rec__pupils__pupiltype__surname a))

(define-fun us_split_fields_Forename__projection ((a us_split_fields2)) (Array Int character) 
  (rec__pupils__pupiltype__forename a))

(define-fun us_split_fields_Form__projection ((a us_split_fields2)) formtype 
  (rec__pupils__pupiltype__form a))

(define-fun us_split_fields_Scores__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__pupils__pupiltype__scores a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq11 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq8
                            (rec__pupils__pupiltype__surname
                            (us_split_fields3 a)) 1 25
                            (rec__pupils__pupiltype__surname
                            (us_split_fields3 b)) 1 25) true)
                         (= (bool_eq8
                            (rec__pupils__pupiltype__forename
                            (us_split_fields3 a)) 1 25
                            (rec__pupils__pupiltype__forename
                            (us_split_fields3 b)) 1 25) true))
                         (= (to_rep2
                            (rec__pupils__pupiltype__form
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__pupils__pupiltype__form
                                                   (us_split_fields3 b)))))
                         (= (bool_eq4
                            (rec__pupils__pupiltype__scores
                            (us_split_fields3 a)) 0 18
                            (rec__pupils__pupiltype__scores
                            (us_split_fields3 b)) 0 18) true))
                    true false))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun pupils__pupiltype__surname__first__bit () Int)

(declare-fun pupils__pupiltype__surname__last__bit () Int)

(declare-fun pupils__pupiltype__surname__position () Int)

;; pupils__pupiltype__surname__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__surname__first__bit))

;; pupils__pupiltype__surname__last__bit_axiom
  (assert
  (< pupils__pupiltype__surname__first__bit pupils__pupiltype__surname__last__bit))

;; pupils__pupiltype__surname__position_axiom
  (assert (<= 0 pupils__pupiltype__surname__position))

(declare-fun pupils__pupiltype__forename__first__bit () Int)

(declare-fun pupils__pupiltype__forename__last__bit () Int)

(declare-fun pupils__pupiltype__forename__position () Int)

;; pupils__pupiltype__forename__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__forename__first__bit))

;; pupils__pupiltype__forename__last__bit_axiom
  (assert
  (< pupils__pupiltype__forename__first__bit pupils__pupiltype__forename__last__bit))

;; pupils__pupiltype__forename__position_axiom
  (assert (<= 0 pupils__pupiltype__forename__position))

(declare-fun pupils__pupiltype__form__first__bit () Int)

(declare-fun pupils__pupiltype__form__last__bit () Int)

(declare-fun pupils__pupiltype__form__position () Int)

;; pupils__pupiltype__form__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__form__first__bit))

;; pupils__pupiltype__form__last__bit_axiom
  (assert
  (< pupils__pupiltype__form__first__bit pupils__pupiltype__form__last__bit))

;; pupils__pupiltype__form__position_axiom
  (assert (<= 0 pupils__pupiltype__form__position))

(declare-fun pupils__pupiltype__scores__first__bit () Int)

(declare-fun pupils__pupiltype__scores__last__bit () Int)

(declare-fun pupils__pupiltype__scores__position () Int)

;; pupils__pupiltype__scores__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__scores__first__bit))

;; pupils__pupiltype__scores__last__bit_axiom
  (assert
  (< pupils__pupiltype__scores__first__bit pupils__pupiltype__scores__last__bit))

;; pupils__pupiltype__scores__position_axiom
  (assert (<= 0 pupils__pupiltype__scores__position))

(declare-fun dummy11 () us_rep1)

(declare-datatypes ()
((pupiltype__ref (mk_pupiltype__ref (pupiltype__content us_rep1)))))
(define-fun pupiltype__ref___projection ((a pupiltype__ref)) us_rep1 
  (pupiltype__content a))

(declare-fun null_pupil () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort pupilnumbers 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 250)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (pupilnumbers pupilnumbers) Bool)

(declare-fun dummy12 () pupilnumbers)

(declare-datatypes ()
((pupilnumbers__ref
 (mk_pupilnumbers__ref (pupilnumbers__content pupilnumbers)))))
(define-fun pupilnumbers__ref___projection ((a pupilnumbers__ref)) pupilnumbers 
  (pupilnumbers__content a))

(declare-fun to_rep3 (pupilnumbers) Int)

(declare-fun of_rep3 (Int) pupilnumbers)

;; inversion_axiom
  (assert
  (forall ((x pupilnumbers))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x pupilnumbers)) (! (in_range9
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort pupilindex 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 250)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (pupilindex pupilindex) Bool)

(declare-fun dummy13 () pupilindex)

(declare-datatypes ()
((pupilindex__ref (mk_pupilindex__ref (pupilindex__content pupilindex)))))
(define-fun pupilindex__ref___projection ((a pupilindex__ref)) pupilindex 
  (pupilindex__content a))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep1))))))
(declare-fun slide2 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_139 Int))
                           (=>
                           (and (<= a__first temp___idx_139)
                           (<= temp___idx_139 a__last))
                           (= (bool_eq11 (select a temp___idx_139)
                              (select b (+ (- b__first a__first) temp___idx_139))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_139 Int))
  (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last))
  (= (bool_eq11 (select a temp___idx_139)
     (select b (+ (- b__first a__first) temp___idx_139))) true))))))))

(declare-fun dummy14 () (Array Int us_rep1))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int us_rep1)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int us_rep1)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int us_rep1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq14 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__pupils__pupildata__numberofpupils pupilnumbers)(rec__pupils__pupildata__pupilentries (Array Int us_rep1))))))
(define-fun us_split_fields_NumberOfPupils__projection ((a us_split_fields4)) pupilnumbers 
  (rec__pupils__pupildata__numberofpupils a))

(define-fun us_split_fields_PupilEntries__projection ((a us_split_fields4)) (Array Int us_rep1) 
  (rec__pupils__pupildata__pupilentries a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq15 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep3
                            (rec__pupils__pupildata__numberofpupils
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__pupils__pupildata__numberofpupils
                                                   (us_split_fields5 b))))
                         (= (bool_eq14
                            (rec__pupils__pupildata__pupilentries
                            (us_split_fields5 a)) 1 250
                            (rec__pupils__pupildata__pupilentries
                            (us_split_fields5 b)) 1 250) true))
                    true false))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun pupils__pupildata__numberofpupils__first__bit () Int)

(declare-fun pupils__pupildata__numberofpupils__last__bit () Int)

(declare-fun pupils__pupildata__numberofpupils__position () Int)

;; pupils__pupildata__numberofpupils__first__bit_axiom
  (assert (<= 0 pupils__pupildata__numberofpupils__first__bit))

;; pupils__pupildata__numberofpupils__last__bit_axiom
  (assert
  (< pupils__pupildata__numberofpupils__first__bit pupils__pupildata__numberofpupils__last__bit))

;; pupils__pupildata__numberofpupils__position_axiom
  (assert (<= 0 pupils__pupildata__numberofpupils__position))

(declare-fun pupils__pupildata__pupilentries__first__bit () Int)

(declare-fun pupils__pupildata__pupilentries__last__bit () Int)

(declare-fun pupils__pupildata__pupilentries__position () Int)

;; pupils__pupildata__pupilentries__first__bit_axiom
  (assert (<= 0 pupils__pupildata__pupilentries__first__bit))

;; pupils__pupildata__pupilentries__last__bit_axiom
  (assert
  (< pupils__pupildata__pupilentries__first__bit pupils__pupildata__pupilentries__last__bit))

;; pupils__pupildata__pupilentries__position_axiom
  (assert (<= 0 pupils__pupildata__pupilentries__position))

(declare-fun dummy15 () us_rep2)

(declare-datatypes ()
((pupildata__ref (mk_pupildata__ref (pupildata__content us_rep2)))))
(define-fun pupildata__ref___projection ((a pupildata__ref)) us_rep2 
  (pupildata__content a))

(declare-sort t9s 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 250)))

(define-fun bool_eq16 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq16 (t9s t9s) Bool)

(declare-fun dummy16 () t9s)

(declare-datatypes () ((t9s__ref (mk_t9s__ref (t9s__content t9s)))))
(define-fun t9s__ref___projection ((a t9s__ref)) t9s (t9s__content a))

(declare-fun null_pupildata () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun temp___140 (us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___142 us_rep1))
  (forall ((temp___143 Int))
  (= (select (temp___140 temp___142) temp___143) temp___142))))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range6 temp___expr_63)))

;; maxpupils__def_axiom
  (assert (= maxpupils 250))

(define-fun dynamic_invariant2 ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_149)))

;; null_participation__def_axiom
  (assert
  (= null_participation (mk___rep (mk___split_fields (of_int 0) (of_rep 0)))))

(define-fun dynamic_invariant3 ((temp___expr_163 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)) Bool (=>
                                      (or (= temp___is_init_160 true)
                                      (<= 0 18)) (in_range3 temp___expr_163)))

;; null_results__def_axiom
  (assert
  (= null_results (pupils__null_results__aggregate_def null_participation)))

(define-fun dynamic_invariant4 ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 1 25)) (in_range5 temp___expr_180)))

;; null_name__def_axiom
  (assert (= null_name (pupils__null_name__aggregate_def 32)))

(define-fun dynamic_invariant5 ((temp___expr_195 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)) Bool (=>
                                      (or (= temp___is_init_192 true)
                                      (<= 0 8)) (in_range8 temp___expr_195)))

;; null_pupil__def_axiom
  (assert
  (= null_pupil (mk___rep1
                (mk___split_fields1 null_name null_name (of_rep2 8)
                null_results))))

(define-fun dynamic_invariant6 ((temp___expr_222 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)) Bool (=>
                                      (or (= temp___is_init_219 true)
                                      (<= 0 250)) (in_range9
                                      temp___expr_222)))

(define-fun dynamic_invariant7 ((temp___expr_228 Int)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)) Bool (=>
                                      (or (= temp___is_init_225 true)
                                      (<= 1 250)) (in_range10
                                      temp___expr_228)))

;; null_pupildata__def_axiom
  (assert
  (= null_pupildata (mk___rep2
                    (mk___split_fields2 (of_rep3 0) (temp___140 null_pupil)))))

(assert
;; WP_parameter_def
 ;; File "pupils.ads", line 99, characters 0-0
  (not true))
(check-sat)
