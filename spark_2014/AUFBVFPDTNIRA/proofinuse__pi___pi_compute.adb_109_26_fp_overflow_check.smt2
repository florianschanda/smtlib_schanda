;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float)

(declare-datatypes ((float__ref 0))
(((mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_51)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const t1 Float32)

(declare-const t2 Float32)

(declare-const t3 Float32)

(declare-const t4 Float32)

(declare-const t5 Float32)

(declare-const t6 Float32)

(declare-const t7 Float32)

(declare-const t8 Float32)

(declare-const t9 Float32)

(declare-const t10 Float32)

(declare-const a1 Float32)

(declare-const a2 Float32)

(declare-const a3 Float32)

(declare-const a4 Float32)

(declare-const a5 Float32)

(declare-const a6 Float32)

(declare-const a7 Float32)

(declare-const a8 Float32)

(declare-const a9 Float32)

(declare-const a10 Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const result t__ref)

(declare-const t11 Float32)

(declare-const result1 t__ref)

(declare-const t21 Float32)

(declare-const result2 t__ref)

(declare-const t31 Float32)

(declare-const result3 t__ref)

(declare-const t41 Float32)

(declare-const result4 t__ref)

(declare-const t51 Float32)

(declare-const result5 t__ref)

(declare-const t61 Float32)

(declare-const result6 t__ref)

(declare-const t71 Float32)

(declare-const result7 t__ref)

(declare-const t81 Float32)

(declare-const result8 t__ref)

(declare-const t91 Float32)

(declare-const result9 t__ref)

(declare-const t101 Float32)

(declare-const result10 t__ref)

(declare-const a11 Float32)

(declare-const result11 t__ref)

(declare-const a21 Float32)

(declare-const result12 t__ref)

(declare-const a31 Float32)

(declare-const result13 t__ref)

(declare-const a41 Float32)

(declare-const result14 t__ref)

(declare-const a51 Float32)

(declare-const result15 t__ref)

(declare-const a61 Float32)

(declare-const result16 t__ref)

(declare-const a71 Float32)

(declare-const result17 t__ref)

(declare-const a81 Float32)

(declare-const result18 t__ref)

(declare-const a91 Float32)

(declare-const result19 t__ref)

(declare-const a101 Float32)

;; H
  (assert (= result (mk_t__ref t1)))

;; H
  (assert (= t11 (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (fp.isFinite32 t11))

;; H
  (assert (= result1 (mk_t__ref t2)))

;; H
  (assert (= t21 (fp #b0 #b01111101 #b01010101010101010101011)))

;; H
  (assert (fp.isFinite32 t21))

;; H
  (assert (= result2 (mk_t__ref t3)))

;; H
  (assert (= t31 (fp #b0 #b01111100 #b10011001100110011001101)))

;; H
  (assert (fp.isFinite32 t31))

;; H
  (assert (= result3 (mk_t__ref t4)))

;; H
  (assert (= t41 (fp #b0 #b01111100 #b00100100100100100100101)))

;; H
  (assert (fp.isFinite32 t41))

;; H
  (assert (= result4 (mk_t__ref t5)))

;; H
  (assert (= t51 (fp #b0 #b01111011 #b11000111000111000111001)))

;; H
  (assert (fp.isFinite32 t51))

;; H
  (assert (= result5 (mk_t__ref t6)))

;; H
  (assert (= t61 (fp #b0 #b01111011 #b01110100010111010001100)))

;; H
  (assert (fp.isFinite32 t61))

;; H
  (assert (= result6 (mk_t__ref t7)))

;; H
  (assert (= t71 (fp #b0 #b01111011 #b00111011000100111011001)))

;; H
  (assert (fp.isFinite32 t71))

;; H
  (assert (= result7 (mk_t__ref t8)))

;; H
  (assert (= t81 (fp #b0 #b01111011 #b00010001000100010001001)))

;; H
  (assert (fp.isFinite32 t81))

;; H
  (assert (= result8 (mk_t__ref t9)))

;; H
  (assert (= t91 (fp #b0 #b01111010 #b11100001111000011110001)))

;; H
  (assert (fp.isFinite32 t91))

;; H
  (assert (= result9 (mk_t__ref t10)))

;; H
  (assert (= t101 (fp #b0 #b01111010 #b10101111001010000110110)))

;; H
  (assert (fp.isFinite32 t101))

;; H
  (assert (= result10 (mk_t__ref a1)))

;; H
  (assert (= a11 t11))

;; H
  (assert (fp.isFinite32 a11))

;; H
  (assert
  (and (= o (fp.sub RNE a11 t21)) (fp.isFinite32 (fp.sub RNE a11 t21))))

;; H
  (assert (= result11 (mk_t__ref a2)))

;; H
  (assert (= a21 o))

;; H
  (assert (fp.isFinite32 a21))

;; H
  (assert
  (and (= o1 (fp.add RNE a21 t31)) (fp.isFinite32 (fp.add RNE a21 t31))))

;; H
  (assert (= result12 (mk_t__ref a3)))

;; H
  (assert (= a31 o1))

;; H
  (assert (fp.isFinite32 a31))

;; H
  (assert
  (and (= o2 (fp.sub RNE a31 t41)) (fp.isFinite32 (fp.sub RNE a31 t41))))

;; H
  (assert (= result13 (mk_t__ref a4)))

;; H
  (assert (= a41 o2))

;; H
  (assert (fp.isFinite32 a41))

;; H
  (assert
  (and (= o3 (fp.add RNE a41 t51)) (fp.isFinite32 (fp.add RNE a41 t51))))

;; H
  (assert (= result14 (mk_t__ref a5)))

;; H
  (assert (= a51 o3))

;; H
  (assert (fp.isFinite32 a51))

;; H
  (assert
  (and (= o4 (fp.sub RNE a51 t61)) (fp.isFinite32 (fp.sub RNE a51 t61))))

;; H
  (assert (= result15 (mk_t__ref a6)))

;; H
  (assert (= a61 o4))

;; H
  (assert (fp.isFinite32 a61))

;; H
  (assert
  (and (= o5 (fp.add RNE a61 t71)) (fp.isFinite32 (fp.add RNE a61 t71))))

;; H
  (assert (= result16 (mk_t__ref a7)))

;; H
  (assert (= a71 o5))

;; H
  (assert (fp.isFinite32 a71))

;; H
  (assert
  (and (= o6 (fp.sub RNE a71 t81)) (fp.isFinite32 (fp.sub RNE a71 t81))))

;; H
  (assert (= result17 (mk_t__ref a8)))

;; H
  (assert (= a81 o6))

;; H
  (assert (fp.isFinite32 a81))

;; H
  (assert
  (and (= o7 (fp.add RNE a81 t91)) (fp.isFinite32 (fp.add RNE a81 t91))))

;; H
  (assert (= result18 (mk_t__ref a9)))

;; H
  (assert (= a91 o7))

;; H
  (assert (fp.isFinite32 a91))

;; H
  (assert
  (and (= o8 (fp.sub RNE a91 t101)) (fp.isFinite32 (fp.sub RNE a91 t101))))

;; H
  (assert (= result19 (mk_t__ref a10)))

;; H
  (assert (= a101 o8))

;; H
  (assert (fp.isFinite32 a101))

;; H
  (assert
  (and (= o9 (fp.mul RNE a91 a91)) (fp.isFinite32 (fp.mul RNE a91 a91))))

;; H
  (assert
  (and (= o10 (fp.mul RNE a101 a81)) (fp.isFinite32 (fp.mul RNE a101 a81))))

;; H
  (assert (= o11 (fp.sub RNE o10 o9)))

;; H
  (assert (and (= o12 o11) (fp.isFinite32 o11)))

;; H
  (assert
  (= o13 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) o12)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (fp.isFinite32 o13)))
(check-sat)
(exit)
