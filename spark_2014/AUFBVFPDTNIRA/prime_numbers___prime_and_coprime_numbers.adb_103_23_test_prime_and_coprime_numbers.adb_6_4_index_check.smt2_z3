;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort value_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (value_type value_type) Bool)

(declare-fun dummy1 () value_type)

(declare-datatypes ()
((value_type__ref (mk_value_type__ref (value_type__content value_type)))))
(define-fun value_type__ref___projection ((a value_type__ref)) value_type
  (value_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_178)))

(declare-sort tnumber_list_typeD1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100000)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tnumber_list_typeD1 tnumber_list_typeD1) Bool)

(declare-fun dummy2 () tnumber_list_typeD1)

(declare-datatypes ()
((tnumber_list_typeD1__ref
 (mk_tnumber_list_typeD1__ref
 (tnumber_list_typeD1__content tnumber_list_typeD1)))))
(define-fun tnumber_list_typeD1__ref___projection ((a tnumber_list_typeD1__ref)) tnumber_list_typeD1
  (tnumber_list_typeD1__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-sort nearest_mode 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (nearest_mode nearest_mode) Bool)

(declare-fun dummy3 () nearest_mode)

(declare-datatypes ()
((nearest_mode__ref
 (mk_nearest_mode__ref (nearest_mode__content nearest_mode)))))
(define-fun nearest_mode__ref___projection ((a nearest_mode__ref)) nearest_mode
  (nearest_mode__content a))

(define-fun dynamic_invariant2 ((temp___expr_193 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (=>
                                      (or (= temp___is_init_190 true)
                                      (<= 0 2)) (in_range4 temp___expr_193)))

(declare-fun has_true ((Array Int Bool) Int Int) Bool)

(declare-fun has_true__function_guard (Bool (Array Int Bool) Int Int) Bool)

;; has_true__post_axiom
  (assert true)

;; has_true__def_axiom
  (assert
  (forall ((number_list (Array Int Bool)))
  (forall ((low Int) (high Int))
  (! (= (= (has_true number_list low high) true)
     (exists ((v Int))
     (and (and (<= low v) (<= v high)) (= (select number_list v) true)))) :pattern (
  (has_true number_list low high)) ))))

(declare-fun number_list () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun mode () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun value () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun right () Int)

(declare-fun left () Int)

(declare-fun right_is_out () Bool)

(declare-fun left_is_out () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun temp___236 () Bool)

(declare-fun temp___235 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun v () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun temp___238 () Bool)

(declare-fun temp___237 () Int)

(declare-fun o10 () Int)

(declare-fun v1 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () Int)

(declare-fun v2 () Int)

(declare-fun v3 () Int)

(declare-fun o24 () Int)

(declare-fun o25 () Bool)

(declare-fun v4 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () Int)

(declare-fun o31 () Int)

(declare-fun o32 () Int)

(declare-fun o33 () Int)

(declare-fun o34 () Bool)

(declare-fun v5 () Int)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () Int)

(declare-fun o38 () Int)

(declare-fun o39 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Bool)

(declare-fun right_is_out1 () Bool)

(declare-fun left_is_out1 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result1 () Int)

(declare-fun result () Int)

(declare-fun right1 () Int)

(declare-fun result1 () Int)

(declare-fun left1 () Int)

(declare-fun result2 () Bool)

(declare-fun result3 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result2 () Int)

(declare-fun result4 () Int)

(declare-fun right2 () Int)

(declare-fun result5 () Bool)

(declare-fun right_is_out2 () Bool)

(declare-fun result6 () Bool)

(declare-fun right3 () Int)

(declare-fun right_is_out3 () Bool)

(declare-fun result7 () Int)

(declare-fun right4 () Int)

(declare-fun result8 () Bool)

(declare-fun right_is_out4 () Bool)

(declare-fun result9 () Bool)

(declare-fun right_is_out5 () Bool)

(declare-fun right_is_out6 () Bool)

(declare-fun right5 () Int)

(declare-fun right_is_out7 () Bool)

(declare-fun right6 () Int)

(declare-fun right_is_out8 () Bool)

(declare-fun right7 () Int)

(declare-fun right_is_out9 () Bool)

(declare-fun right8 () Int)

(declare-fun right_is_out10 () Bool)

(declare-fun right9 () Int)

(declare-fun right_is_out11 () Bool)

(declare-fun right10 () Int)

(declare-fun right_is_out12 () Bool)

(declare-fun result10 () bool__ref)

(declare-fun right_is_out13 () Bool)

(declare-fun right11 () int__ref)

(declare-fun right_is_out14 () bool__ref)

(declare-fun right12 () Int)

(declare-fun right_is_out15 () Bool)

(declare-fun result11 () int__ref)

(declare-fun left2 () Int)

(declare-fun result12 () bool__ref)

(declare-fun left_is_out2 () Bool)

(declare-fun result13 () Bool)

(declare-fun left3 () Int)

(declare-fun left_is_out3 () Bool)

(declare-fun result14 () int__ref)

(declare-fun left4 () Int)

(declare-fun result15 () bool__ref)

(declare-fun left_is_out4 () Bool)

(declare-fun result16 () Bool)

(declare-fun left_is_out5 () bool__ref)

(declare-fun left_is_out6 () Bool)

(declare-fun left5 () int__ref)

(declare-fun left_is_out7 () bool__ref)

(declare-fun left6 () Int)

(declare-fun left_is_out8 () Bool)

(declare-fun left7 () int__ref)

(declare-fun left_is_out9 () bool__ref)

(declare-fun left8 () Int)

(declare-fun left_is_out10 () Bool)

(declare-fun left9 () int__ref)

(declare-fun left_is_out11 () bool__ref)

(declare-fun left10 () Int)

(declare-fun left_is_out12 () Bool)

(declare-fun left11 () int__ref)

(declare-fun left_is_out13 () bool__ref)

(declare-fun left12 () Int)

(declare-fun left_is_out14 () Bool)

(declare-fun result17 () bool__ref)

(declare-fun left_is_out15 () Bool)

(declare-fun left13 () int__ref)

(declare-fun left_is_out16 () bool__ref)

(declare-fun left14 () Int)

(declare-fun left_is_out17 () Bool)

(declare-fun result18 () Bool)

(declare-fun result19 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result3 () Int)

(declare-fun result20 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result4 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result5 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result6 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result7 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result8 () Int)

(declare-fun result21 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result9 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result10 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result11 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result12 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result13 () Int)

(declare-fun result22 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result14 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result15 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result16 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result17 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result18 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result19 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result20 () Int)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result21 () int__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result22 () Int)

(declare-fun right13 () int__ref)

(declare-fun left15 () int__ref)

(declare-fun right_is_out16 () bool__ref)

(declare-fun left_is_out18 () bool__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result23 () int__ref)

(declare-fun right14 () Int)

(declare-fun left16 () Int)

(declare-fun right_is_out17 () Bool)

(declare-fun left_is_out19 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result24 () Int)

(declare-fun right15 () int__ref)

(declare-fun left17 () int__ref)

(declare-fun right_is_out18 () bool__ref)

(declare-fun left_is_out20 () bool__ref)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result25 () int__ref)

(declare-fun right16 () Int)

(declare-fun left18 () Int)

(declare-fun right_is_out19 () Bool)

(declare-fun left_is_out21 () Bool)

(declare-fun test_prime_and_coprime_numbers__p__nearest_number__result26 () Int)

(declare-fun result23 () Bool)

(declare-fun result24 () Bool)

(declare-fun result25 () Bool)

(declare-fun result26 () Bool)

(define-fun right_is_out20 () bool__ref (mk_bool__ref right_is_out11))

(define-fun right17 () int__ref (mk_int__ref right9))

(define-fun right_is_out21 () bool__ref (mk_bool__ref right_is_out9))

(define-fun right18 () int__ref (mk_int__ref right7))

(define-fun right_is_out22 () bool__ref (mk_bool__ref right_is_out7))

(define-fun right19 () int__ref (mk_int__ref right5))

(define-fun right_is_out23 () bool__ref (mk_bool__ref right_is_out5))

(define-fun result27 () bool__ref (mk_bool__ref result5))

(define-fun result28 () int__ref (mk_int__ref result3))

(define-fun result29 () int__ref (mk_int__ref result1))

(define-fun result30 () int__ref (mk_int__ref result))

(define-fun test_prime_and_coprime_numbers__p__nearest_number__result27 () int__ref
  (mk_int__ref test_prime_and_coprime_numbers__p__nearest_number__result))

(define-fun left_is_out22 () bool__ref (mk_bool__ref left_is_out))

(define-fun right_is_out24 () bool__ref (mk_bool__ref right_is_out))

(define-fun left19 () int__ref (mk_int__ref left))

(define-fun right20 () int__ref (mk_int__ref right))

;; H
  (assert (in_range4 mode))

;; H
  (assert (in_range2 value))

;; H
  (assert
  (and (and (<= 0 value) (<= value 100000))
  (ite (= mode 0) (= (has_true number_list value 100000) true)
  (ite (= mode 1) (= (has_true number_list 0 value) true)
  (= (has_true number_list 0 100000) true)))))

;; H
  (assert (= result30 right20))

;; H
  (assert (= right1 0))

;; H
  (assert (in_range1 right1))

;; H
  (assert (= result29 left19))

;; H
  (assert (= left1 0))

;; H
  (assert (in_range1 left1))

(assert
;; WP_parameter_def
 ;; File "prime_and_coprime_numbers.ads", line 3, characters 0-0
  (not (<= 0 value)))
(check-sat)
(exit)
