(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic abs : real -> real

axiom abs_def :
  (forall x:real [abs(x)]. (((0.0 <= x) -> (abs(x) = x)) and
  ((not (0.0 <= x)) -> (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

type mode = RNE | RNA | RTP | RTN | RTZ

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNE, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNA, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTP, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTN, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTZ, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: mode) = ((m = RNE) or (m = RNA))

logic zeroF : t

logic add : mode, t, t -> t

logic sub : mode, t, t -> t

logic mul : mode, t, t -> t

logic div : mode, t, t -> t

logic abs1 : t -> t

logic neg : t -> t

logic fma : mode, t, t, t -> t

logic sqrt : mode, t -> t

logic roundToIntegral : mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : mode, int -> t

logic to_int : mode, t -> int

axiom zero_of_int : (forall m:mode. (zeroF = of_int(m, 0)))

logic round : mode, real -> real

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = from_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: mode, x: real) = in_range(round(m, x))

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. (in_range(x) -> in_range(round(m, x))))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_to_real :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (round(m,
  tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (round(RTN, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(RTP, x)))

axiom Round_down_neg : (forall x:real. (round(RTN, (-x)) = (-round(RTP, x))))

axiom Round_up_neg : (forall x:real. (round(RTP, (-x)) = (-round(RTN, x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (round(m,
  from_int(i)) = from_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: mode, x: t) = ((((((m = RNE) ->
  is_infinite(x)) and ((m = RNA) -> is_infinite(x))) and ((m = RTP) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and ((m = RTN) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> is_infinite(x))))) and ((m = RTZ) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: mode, x: t) = (is_zero(x) -> ((((((m = RNE) ->
  is_positive(x)) and ((m = RNA) -> is_positive(x))) and ((m = RTP) ->
  is_positive(x))) and ((m = RTN) -> is_negative(x))) and ((m = RTZ) ->
  is_positive(x))))

axiom add_finite :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) + tqtreal(y)))) ->
  (tqtisFinite(add(m, x, y)) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(add(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(add(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) - tqtreal(y)))) ->
  (tqtisFinite(sub(m, x, y)) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(sub(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(sub(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) * tqtreal(y)))) ->
  (tqtisFinite(mul(m, x, y)) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(mul(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(mul(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> ((not is_zero(y)) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = round(m, (tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(div(m,
  x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and (not is_zero(y)))) or
  (tqtisFinite(x) and (is_infinite(y) and (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x, y)) = round(m,
  (tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs1(x)]. (tqtisFinite(x) -> (tqtisFinite(abs1(x)) and
  ((tqtreal(abs1(x)) = abs(tqtreal(x))) and is_positive(abs1(x))))))

axiom abs_finite_rev :
  (forall x:t [abs1(x)]. (tqtisFinite(abs1(x)) -> (tqtisFinite(x) and
  (tqtreal(abs1(x)) = abs(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs1(x)]. (not is_negative(abs1(x))))

axiom fma_finite_rev :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and (tqtisFinite(y) and
  tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (in_range(round(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and (tqtreal(fma(m, x, y,
  z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

logic sqrt1 : real -> real

axiom sqrt_finite_rev :
  (forall m:mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m, x)) ->
  (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = round(m, sqrt1(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:mode. forall x:int. (in_int_range(x) -> is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:mode. forall i:t. (tqtisFinite(i) -> ((le(i, neg(of_int(m,
  16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> is_int(roundToIntegral(m,
  x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:mode. (is_int(x) ->
  (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) -> is_int(fma(m,
  x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs1(x))))

axiom is_int_of_int :
  (forall x:t. forall m:mode. forall mqt:mode. (is_int(x) -> eq(x,
  of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:mode. forall x:t. (is_int(x) -> (tqtreal(x) = from_int(to_int(m,
  x)))))

axiom truncate_int :
  (forall m:mode. forall i:t. (is_int(i) -> eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTP, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTN, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(RTP, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(RTP, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTP,
  x)) = from_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTP, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(RTN, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(RTN, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTN,
  x)) = from_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTN, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (is_negative(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (is_positive(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x)))))

axiom to_int_roundToIntegral :
  (forall m:mode. forall x:t. (to_int(m, x) = to_int(m, roundToIntegral(m,
  x))))

axiom to_int_monotonic :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (to_int(m, of_int(m,
  i)) = i)))

axiom eq_to_int :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) -> (eq(x, y) ->
  (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> (to_int(m, neg(x)) = (-to_int(m,
  x)))))

axiom roundToIntegral_is_finite :
  (forall m:mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [round(RNE, x)]. (in_range(round(RNE, x)) ->
  ((((x - (0x1.0p-24 * abs(x))) - 0x1.0p-150) <= round(RNE, x)) and
  (round(RNE, x) <= ((x + (0x1.0p-24 * abs(x))) + 0x1.0p-150)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(RNA, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type float1

logic bool_eq2 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep : float1 -> t

logic of_rep : t -> float1

axiom inversion_axiom :
  (forall x:float1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float1 [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type num_delimiters_range

predicate in_range2(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : num_delimiters_range, num_delimiters_range -> bool

logic dummy1 : num_delimiters_range

type num_delimiters_range__ref = { num_delimiters_range__content :
num_delimiters_range
}

function num_delimiters_range__ref___projection(a: num_delimiters_range__ref) : num_delimiters_range =
  (a).num_delimiters_range__content

logic to_rep1 : num_delimiters_range -> int

logic of_rep1 : int -> num_delimiters_range

axiom inversion_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:num_delimiters_range [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type function_range

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : function_range, function_range -> bool

logic dummy2 : function_range

type function_range__ref = { function_range__content : function_range
}

function function_range__ref___projection(a: function_range__ref) : function_range =
  (a).function_range__content

logic to_rep2 : function_range -> int

logic of_rep2 : int -> function_range

axiom inversion_axiom2 :
  (forall x:function_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:function_range [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__step_function__delimiter_entry__delimiter :
function_range; rec__step_function__delimiter_entry__value : float1
}

function us_split_fields_Delimiter__projection(a: us_split_fields) : function_range =
  (a).rec__step_function__delimiter_entry__delimiter

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2(((b).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  (to_rep(((a).us_split_fields1).rec__step_function__delimiter_entry__value) = to_rep(((b).us_split_fields1).rec__step_function__delimiter_entry__value)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__size({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:function_range. forall a1:float1. (0 <= object__alignment({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = a;
  rec__step_function__delimiter_entry__value = a1 } })))

logic step_function__delimiter_entry__delimiter__first__bit : int

logic step_function__delimiter_entry__delimiter__last__bit : int

logic step_function__delimiter_entry__delimiter__position : int

axiom step_function__delimiter_entry__delimiter__first__bit_axiom :
  (0 <= step_function__delimiter_entry__delimiter__first__bit)

axiom step_function__delimiter_entry__delimiter__last__bit_axiom :
  (step_function__delimiter_entry__delimiter__first__bit <  step_function__delimiter_entry__delimiter__last__bit)

axiom step_function__delimiter_entry__delimiter__position_axiom :
  (0 <= step_function__delimiter_entry__delimiter__position)

logic step_function__delimiter_entry__value__first__bit : int

logic step_function__delimiter_entry__value__last__bit : int

logic step_function__delimiter_entry__value__position : int

axiom step_function__delimiter_entry__value__first__bit_axiom :
  (0 <= step_function__delimiter_entry__value__first__bit)

axiom step_function__delimiter_entry__value__last__bit_axiom :
  (step_function__delimiter_entry__value__first__bit <  step_function__delimiter_entry__value__last__bit)

axiom step_function__delimiter_entry__value__position_axiom :
  (0 <= step_function__delimiter_entry__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : function_range

logic dummy4 : float1

type delimiter_entry__ref = { delimiter_entry__content : us_rep
}

function delimiter_entry__ref___projection(a: delimiter_entry__ref) : us_rep =
  (a).delimiter_entry__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:function_range. forall v1:float1.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = v;
  rec__step_function__delimiter_entry__value = v1 } })))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic dummy5 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq4 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = {
rec__step_function__step_function_t__number_of_delimiters :
num_delimiters_range; rec__step_function__step_function_t__step :
(int,us_rep) farray
}

function us_split_fields_Number_Of_Delimiters__projection(a: us_split_fields2) : num_delimiters_range =
  (a).rec__step_function__step_function_t__number_of_delimiters

function us_split_fields_Step__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__step_function__step_function_t__step

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq7(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true)) -> (bool_eq8(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters) = to_rep1(((b).us_split_fields3).rec__step_function__step_function_t__number_of_delimiters)) and
  (bool_eq7(((a).us_split_fields3).rec__step_function__step_function_t__step,
  0, 10, ((b).us_split_fields3).rec__step_function__step_function_t__step, 0,
  10) = true))) -> (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__size2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:num_delimiters_range. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = a;
  rec__step_function__step_function_t__step = a1 } })))

logic step_function__step_function_t__number_of_delimiters__first__bit : int

logic step_function__step_function_t__number_of_delimiters__last__bit : int

logic step_function__step_function_t__number_of_delimiters__position : int

axiom step_function__step_function_t__number_of_delimiters__first__bit_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__first__bit)

axiom step_function__step_function_t__number_of_delimiters__last__bit_axiom :
  (step_function__step_function_t__number_of_delimiters__first__bit <  step_function__step_function_t__number_of_delimiters__last__bit)

axiom step_function__step_function_t__number_of_delimiters__position_axiom :
  (0 <= step_function__step_function_t__number_of_delimiters__position)

logic step_function__step_function_t__step__first__bit : int

logic step_function__step_function_t__step__last__bit : int

logic step_function__step_function_t__step__position : int

axiom step_function__step_function_t__step__first__bit_axiom :
  (0 <= step_function__step_function_t__step__first__bit)

axiom step_function__step_function_t__step__last__bit_axiom :
  (step_function__step_function_t__step__first__bit <  step_function__step_function_t__step__last__bit)

axiom step_function__step_function_t__step__position_axiom :
  (0 <= step_function__step_function_t__step__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : num_delimiters_range

logic dummy7 : (int,us_rep) farray

type step_function_t__ref = { step_function_t__content : us_rep1
}

function step_function_t__ref___projection(a: step_function_t__ref) : us_rep1 =
  (a).step_function_t__content

logic min1 : t, t -> t

logic min__function_guard : t, t, t -> prop

axiom min__post_axiom :
  (forall x1:t. forall x2:t [min1(x1, x2)]. ((tqtisFinite(x1) and
  tqtisFinite(x2)) -> (((le(x1, x2) -> eq(min1(x1, x2), x1)) and ((not le(x1,
  x2)) -> eq(min1(x1, x2), x2))) and tqtisFinite(min1(x1, x2)))))

logic is_valid : us_rep1 -> bool

logic is_valid__function_guard : bool, us_rep1 -> prop

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray
  [is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } })]. ((is_valid({
  us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true) <->
  ((to_rep2((((sfun1[0])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = 0) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) ->
  (to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

logic get_value : us_rep1, int -> t

logic get_value__function_guard : t, us_rep1, int -> prop

axiom get_value__post_axiom :
  (forall sfun:num_delimiters_range. forall sfun1:(int,us_rep) farray.
  (forall x:int [get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x)].
  ((in_range3(x) and (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }) = true)) ->
  (((exists i:int. (((0 <= i) and (i <= (to_rep1(sfun) - 1))) and
    (((to_rep2((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
    (x <  to_rep2((((sfun1[(i + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
    eq(get_value({ us_split_fields3 = {
    rec__step_function__step_function_t__number_of_delimiters = sfun;
    rec__step_function__step_function_t__step = sfun1 } }, x),
    to_rep((((sfun1[i])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= x) and
  eq(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x),
  to_rep((((sfun1[to_rep1(sfun)])).us_split_fields1).rec__step_function__delimiter_entry__value)))) and
  tqtisFinite(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun;
  rec__step_function__step_function_t__step = sfun1 } }, x))))))

logic sfun1 : num_delimiters_range

logic sfun11 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic sfun2 : num_delimiters_range

logic sfun21 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic merge__split_fields : num_delimiters_range

logic merge__split_fields1 : (int,us_rep) farray

logic i1 : int

logic i2 : int

logic im : int

logic scan_sfun1 : bool

logic scan_sfun2 : bool

logic temp___389 : bool

logic temp___387 : num_delimiters_range

logic temp___3871 : (int,us_rep) farray

logic temp___386 : bool

logic temp___385 : int

logic temp___384 : int

logic temp___383 : int

logic o : float1

logic o1 : function_range

logic o2 : function_range

logic o3 : float1

logic o4 : function_range

logic o5 : float1

logic o6 : (int,us_rep) farray

logic o7 : num_delimiters_range

logic o8 : (int,us_rep) farray

logic temp___313 : num_delimiters_range

logic temp___3131 : (int,us_rep) farray

logic i : int

logic o9 : int

logic o10 : function_range

logic o11 : float1

logic o12 : function_range

logic o13 : float1

logic o14 : function_range

logic o15 : int

logic i3 : int

logic j : int

logic o16 : int

logic o17 : function_range

logic o18 : float1

logic o19 : function_range

logic o20 : float1

logic o21 : function_range

logic o22 : int

logic i4 : int

logic j1 : int

logic o23 : int

logic o24 : function_range

logic o25 : float1

logic o26 : function_range

logic o27 : float1

logic o28 : function_range

logic o29 : int

logic i5 : int

logic j2 : int

logic o30 : int

logic o31 : function_range

logic o32 : float1

logic o33 : function_range

logic o34 : float1

logic o35 : function_range

logic o36 : int

logic i6 : int

logic j3 : int

logic o37 : int

logic o38 : function_range

logic o39 : float1

logic o40 : function_range

logic o41 : float1

logic o42 : function_range

logic o43 : int

logic i7 : int

logic o44 : int

logic o45 : function_range

logic o46 : float1

logic o47 : function_range

logic o48 : float1

logic o49 : function_range

logic o50 : int

logic o51 : t

logic o52 : int

logic o53 : function_range

logic o54 : float1

logic o55 : function_range

logic o56 : float1

logic o57 : function_range

logic o58 : int

logic o59 : t

logic o60 : t

logic o61 : function_range

logic o62 : function_range

logic o63 : float1

logic o64 : function_range

logic o65 : float1

logic o66 : (int,us_rep) farray

logic o67 : num_delimiters_range

logic o68 : (int,us_rep) farray

logic temp___375 : num_delimiters_range

logic temp___3751 : (int,us_rep) farray

logic o69 : t

logic o70 : t

logic o71 : t

logic o72 : float1

logic o73 : function_range

logic o74 : float1

logic o75 : function_range

logic o76 : float1

logic o77 : (int,us_rep) farray

logic o78 : num_delimiters_range

logic o79 : (int,us_rep) farray

logic temp___382 : num_delimiters_range

logic temp___3821 : (int,us_rep) farray

logic o80 : function_range

logic o81 : function_range

logic o82 : float1

logic o83 : function_range

logic o84 : float1

logic o85 : (int,us_rep) farray

logic o86 : num_delimiters_range

logic o87 : (int,us_rep) farray

logic temp___360 : num_delimiters_range

logic temp___3601 : (int,us_rep) farray

logic o88 : t

logic o89 : t

logic o90 : t

logic o91 : float1

logic o92 : function_range

logic o93 : float1

logic o94 : function_range

logic o95 : float1

logic o96 : (int,us_rep) farray

logic o97 : num_delimiters_range

logic o98 : (int,us_rep) farray

logic temp___367 : num_delimiters_range

logic temp___3671 : (int,us_rep) farray

logic o99 : function_range

logic o100 : function_range

logic o101 : float1

logic o102 : function_range

logic o103 : float1

logic o104 : (int,us_rep) farray

logic o105 : num_delimiters_range

logic o106 : (int,us_rep) farray

logic temp___345 : num_delimiters_range

logic temp___3451 : (int,us_rep) farray

logic o107 : t

logic o108 : t

logic o109 : t

logic o110 : float1

logic o111 : function_range

logic o112 : float1

logic o113 : function_range

logic o114 : float1

logic o115 : (int,us_rep) farray

logic o116 : num_delimiters_range

logic o117 : (int,us_rep) farray

logic temp___352 : num_delimiters_range

logic temp___3521 : (int,us_rep) farray

logic o118 : function_range

logic o119 : function_range

logic o120 : float1

logic o121 : function_range

logic o122 : float1

logic o123 : (int,us_rep) farray

logic o124 : num_delimiters_range

logic o125 : (int,us_rep) farray

logic temp___332 : num_delimiters_range

logic temp___3321 : (int,us_rep) farray

logic o126 : t

logic o127 : t

logic o128 : t

logic o129 : float1

logic o130 : function_range

logic o131 : float1

logic o132 : function_range

logic o133 : float1

logic o134 : (int,us_rep) farray

logic o135 : num_delimiters_range

logic o136 : (int,us_rep) farray

logic temp___339 : num_delimiters_range

logic temp___3391 : (int,us_rep) farray

logic o137 : function_range

logic o138 : function_range

logic o139 : float1

logic o140 : function_range

logic o141 : float1

logic o142 : (int,us_rep) farray

logic o143 : num_delimiters_range

logic o144 : (int,us_rep) farray

logic temp___319 : num_delimiters_range

logic temp___3191 : (int,us_rep) farray

logic o145 : t

logic o146 : t

logic o147 : t

logic o148 : float1

logic o149 : function_range

logic o150 : float1

logic o151 : function_range

logic o152 : float1

logic o153 : (int,us_rep) farray

logic o154 : num_delimiters_range

logic o155 : (int,us_rep) farray

logic temp___326 : num_delimiters_range

logic temp___3261 : (int,us_rep) farray

logic o156 : int

logic o157 : float1

logic o158 : function_range

logic o159 : function_range

logic o160 : float1

logic o161 : function_range

logic o162 : float1

logic o163 : (int,us_rep) farray

logic o164 : num_delimiters_range

logic o165 : (int,us_rep) farray

logic temp___3132 : num_delimiters_range

logic temp___3133 : (int,us_rep) farray

logic o166 : num_delimiters_range

logic o167 : num_delimiters_range

logic o168 : (int,us_rep) farray

logic temp___451 : num_delimiters_range

logic temp___4511 : (int,us_rep) farray

logic i8 : int

logic j4 : int

logic o169 : int

logic o170 : function_range

logic o171 : float1

logic o172 : function_range

logic o173 : float1

logic o174 : function_range

logic o175 : int

logic i9 : int

logic j5 : int

logic o176 : int

logic o177 : function_range

logic o178 : float1

logic o179 : function_range

logic o180 : float1

logic o181 : function_range

logic o182 : int

logic o183 : bool

logic i10 : int

logic o184 : int

logic o185 : function_range

logic o186 : float1

logic o187 : function_range

logic o188 : float1

logic o189 : function_range

logic o190 : int

logic o191 : t

logic o192 : int

logic o193 : function_range

logic o194 : float1

logic o195 : function_range

logic o196 : float1

logic o197 : function_range

logic o198 : int

logic o199 : t

logic o200 : t

logic o201 : bool

logic result : int

logic i11 : int

logic result1 : int

logic i21 : int

logic result2 : int

logic im1 : int

logic result3 : bool

logic scan_sfun11 : bool

logic result4 : bool

logic scan_sfun21 : bool

logic result5 : num_delimiters_range

logic result6 : (int,us_rep) farray

logic merge__split_fields2 : num_delimiters_range

logic merge__split_fields3 : (int,us_rep) farray

logic merge__split_fields4 : num_delimiters_range

logic merge__split_fields5 : (int,us_rep) farray

logic i12 : int

logic i22 : int

logic im2 : int

logic scan_sfun12 : bool

logic scan_sfun22 : bool

logic result7 : num_delimiters_range

logic result8 : (int,us_rep) farray

logic merge__split_fields6 : num_delimiters_range

logic merge__split_fields7 : (int,us_rep) farray

logic result9 : num_delimiters_range

logic result10 : (int,us_rep) farray

logic merge__split_fields8 : num_delimiters_range

logic merge__split_fields9 : (int,us_rep) farray

logic i13 : int

logic scan_sfun13 : bool

logic result11 : num_delimiters_range

logic result12 : (int,us_rep) farray

logic merge__split_fields10 : num_delimiters_range

logic merge__split_fields11 : (int,us_rep) farray

logic result13 : num_delimiters_range

logic result14 : (int,us_rep) farray

logic merge__split_fields12 : num_delimiters_range

logic merge__split_fields13 : (int,us_rep) farray

logic i23 : int

logic scan_sfun23 : bool

logic result15 : num_delimiters_range

logic result16 : (int,us_rep) farray

logic merge__split_fields14 : num_delimiters_range

logic merge__split_fields15 : (int,us_rep) farray

logic result17 : num_delimiters_range

logic result18 : (int,us_rep) farray

logic merge__split_fields16 : num_delimiters_range

logic merge__split_fields17 : (int,us_rep) farray

logic i14 : int

logic scan_sfun14 : bool

logic i24 : int

logic scan_sfun24 : bool

logic result19 : num_delimiters_range

logic result20 : (int,us_rep) farray

logic merge__split_fields18 : num_delimiters_range

logic merge__split_fields19 : (int,us_rep) farray

logic result21 : num_delimiters_range

logic result22 : (int,us_rep) farray

logic merge__split_fields20 : num_delimiters_range

logic merge__split_fields21 : (int,us_rep) farray

logic i15 : int

logic scan_sfun15 : bool

logic result23 : num_delimiters_range

logic result24 : (int,us_rep) farray

logic merge__split_fields22 : num_delimiters_range

logic merge__split_fields23 : (int,us_rep) farray

logic result25 : num_delimiters_range

logic result26 : (int,us_rep) farray

logic merge__split_fields24 : num_delimiters_range

logic merge__split_fields25 : (int,us_rep) farray

logic i25 : int

logic scan_sfun25 : bool

logic result27 : int

logic im3 : int

logic result28 : num_delimiters_range

logic result29 : (int,us_rep) farray

logic merge__split_fields26 : num_delimiters_range

logic merge__split_fields27 : (int,us_rep) farray

logic im4 : int

logic im5 : int

logic merge__split_fields28 : num_delimiters_range

logic merge__split_fields29 : (int,us_rep) farray

logic i16 : int

logic i26 : int

logic im6 : int

logic scan_sfun16 : bool

logic scan_sfun26 : bool

logic merge__split_fields30 : num_delimiters_range

logic merge__split_fields31 : (int,us_rep) farray

logic i17 : int

logic i27 : int

logic im7 : int

logic scan_sfun17 : bool

logic scan_sfun27 : bool

logic merge__split_fields32 : num_delimiters_range

logic merge__split_fields33 : (int,us_rep) farray

logic i18 : int

logic i28 : int

logic im8 : int

logic scan_sfun18 : bool

logic scan_sfun28 : bool

logic merge__split_fields34 : num_delimiters_range

logic merge__split_fields35 : (int,us_rep) farray

logic i19 : int

logic i29 : int

logic im9 : int

logic scan_sfun19 : bool

logic scan_sfun29 : bool

logic result30 : num_delimiters_range

logic result31 : (int,us_rep) farray

logic merge__split_fields36 : num_delimiters_range

logic merge__split_fields37 : (int,us_rep) farray

logic merge__split_fields38 : num_delimiters_range

logic merge__split_fields39 : (int,us_rep) farray

logic i110 : int

logic i210 : int

logic im10 : int

logic scan_sfun110 : bool

logic scan_sfun210 : bool

logic merge__split_fields40 : num_delimiters_range

logic merge__split_fields41 : (int,us_rep) farray

logic i111 : int

logic i211 : int

logic im11 : int

logic scan_sfun111 : bool

logic scan_sfun211 : bool

axiom H : (((is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } }) = true) and
  (is_valid({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } }) = true)) and
  ((to_rep1(sfun1) + to_rep1(sfun2)) <= 10))

axiom H1 : (result = i1)

axiom H2 : (i11 = 0)

axiom H3 : in_range2(i11)

axiom H4 : (result1 = i2)

axiom H5 : (i21 = 0)

axiom H6 : in_range2(i21)

axiom H7 : (result2 = im)

axiom H8 : (im1 = 0)

axiom H9 : in_range2(im1)

axiom H10 : (result3 = scan_sfun1)

axiom H11 : (scan_sfun11 = of_int1(1))

axiom H12 : (result4 = scan_sfun2)

axiom H13 : (scan_sfun21 = of_int1(1))

axiom H14 : (temp___389 = scan_sfun21)

axiom H15 : ((merge__split_fields = temp___387) and
  (merge__split_fields1 = temp___3871))

axiom H16 : (temp___386 = scan_sfun11)

axiom H17 : (temp___385 = im1)

axiom H18 : (temp___384 = i21)

axiom H19 : (temp___383 = i11)

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

axiom H20 : (to_rep(o) = fliteral1)

axiom H21 : (to_rep2(o1) = 0)

axiom H22 : (o1 = o2)

axiom H23 : (o = o3)

axiom H24 : (o4 = o2)

axiom H25 : (o5 = o3)

axiom H26 : (o6 = (merge__split_fields1[im1 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o4;
  rec__step_function__delimiter_entry__value = o5 } }]))

axiom H27 : (merge__split_fields = o7)

axiom H28 : (o6 = o8)

axiom H29 : (temp___313 = o7)

axiom H30 : (temp___3131 = o8)

axiom H31 : ((result5 = merge__split_fields) and
  (result6 = merge__split_fields1))

axiom H32 : ((merge__split_fields2 = temp___313) and
  (merge__split_fields3 = temp___3131))

axiom H33 : (0 <= i12)

axiom H34 : (0 <= i22)

axiom H35 : (0 <= im2)

axiom H36 : (i12 <= to_rep1(sfun1))

axiom H37 : (i22 <= to_rep1(sfun2))

axiom H38 : (im2 <= 10)

axiom H39 : ((scan_sfun12 = true) or (scan_sfun22 = true))

axiom H40 : ((((i12 = 0) and (i22 = 0)) and (im2 = 0)) or ((((0 <  i12) or
  (not (scan_sfun12 = true))) and ((0 <  i22) or
  (not (scan_sfun22 = true)))) and (0 <  im2)))

axiom H41 : (((((0 <  im2) and (scan_sfun12 = true)) and
  (scan_sfun22 = true)) -> (im2 <  (i12 + i22))) and ((not (((0 <  im2) and
  (scan_sfun12 = true)) and (scan_sfun22 = true))) -> (im2 <= (i12 + i22))))

axiom H42 : ((0 <  im2) ->
  (to_rep2((((merge__split_fields5[0])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = 0))

axiom H43 : (((0 <  im2) and (scan_sfun12 = true)) ->
  (to_rep2((((merge__split_fields5[(im2 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))

axiom H44 : (((0 <  im2) and (scan_sfun22 = true)) ->
  (to_rep2((((merge__split_fields5[(im2 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))

axiom H45 :
  (forall i20:int. (((1 <= i20) and (i20 <= (im2 - 1))) ->
  (to_rep2((((merge__split_fields5[(i20 - 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((merge__split_fields5[i20])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))

axiom H46 :
  (forall i30:int. (((0 <= i30) and (i30 <= (i12 - 1))) ->
  (exists j6:int. (((0 <= j6) and (j6 <= (im2 - 1))) and
  (to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((merge__split_fields5[j6])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))

axiom H47 : ((not (scan_sfun12 = true)) ->
  (forall i30:int. (((0 <= i30) and (i30 <= to_rep1(sfun1))) ->
  (exists j6:int. (((0 <= j6) and (j6 <= (im2 - 1))) and
  (to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((merge__split_fields5[j6])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

axiom H48 :
  (forall i30:int. (((0 <= i30) and (i30 <= (i22 - 1))) ->
  (exists j6:int. (((0 <= j6) and (j6 <= (im2 - 1))) and
  (to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((merge__split_fields5[j6])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))

axiom H49 : ((not (scan_sfun22 = true)) ->
  (forall i30:int. (((0 <= i30) and (i30 <= to_rep1(sfun2))) ->
  (exists j6:int. (((0 <= j6) and (j6 <= (im2 - 1))) and
  (to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((merge__split_fields5[j6])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

axiom H50 :
  (forall i30:int. (((0 <= i30) and (i30 <= (im2 - 1))) ->
  eq(to_rep((((merge__split_fields5[i30])).us_split_fields1).rec__step_function__delimiter_entry__value),
  min1(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields5[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)),
  get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields5[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))))

axiom H51 : (((((0 <= 10) -> in_range2(i12)) and ((0 <= 10) ->
  in_range2(i22))) and ((0 <= 10) -> in_range2(im2))) and
  (merge__split_fields4 = temp___387))

axiom H52 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (to_rep2(o61) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))

axiom H53 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o62 = o61) and
  (o63 = (((merge__split_fields5[im2])).us_split_fields1).rec__step_function__delimiter_entry__value))))

axiom H54 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o64 = o62) and (o65 = o63))))

axiom H55 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (o66 = (merge__split_fields5[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o64;
  rec__step_function__delimiter_entry__value = o65 } }]))))

axiom H56 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o67 = merge__split_fields4) and (o68 = o66))))

axiom H57 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((temp___375 = o67) and (temp___3751 = o68))))

axiom H58 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((result7 = merge__split_fields4) and (result8 = merge__split_fields5))))

axiom H59 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((merge__split_fields6 = temp___375) and
  (merge__split_fields7 = temp___3751))))

axiom H60 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o70 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o70) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o70,
   to_rep((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o70,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H61 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o69 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o69) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o69,
   to_rep((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o69,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H62 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o71 = min1(o69, o70)) and (tqtisFinite(o71) and ((le(o69, o70) -> eq(o71,
  o69)) and ((not le(o69, o70)) -> eq(o71, o70)))))))

axiom H63 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (to_rep(o72) = o71)))

axiom H64 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o73 = (((merge__split_fields7[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) and
  (o74 = o72))))

axiom H65 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o75 = o73) and (o76 = o74))))

axiom H66 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (o77 = (merge__split_fields7[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o75;
  rec__step_function__delimiter_entry__value = o76 } }]))))

axiom H67 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o78 = merge__split_fields6) and (o79 = o77))))

axiom H68 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((temp___382 = o78) and (temp___3821 = o79))))

axiom H69 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((result9 = merge__split_fields6) and (result10 = merge__split_fields7))))

axiom H70 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((merge__split_fields8 = temp___382) and
  (merge__split_fields9 = temp___3821))))

axiom H71 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((((i12 <  to_rep1(sfun1)) -> ((i13 = (i12 + 1)) and
  ((scan_sfun13 = true) <-> (scan_sfun12 = true)))) and
  ((not (i12 <  to_rep1(sfun1))) -> ((i13 = i12) and
  (not (scan_sfun13 = true))))) and in_range2(i13))))

axiom H72 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (scan_sfun23 = scan_sfun22)))

axiom H73 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (i23 = i22)))

axiom H74 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (to_rep2(o80) = to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))

axiom H75 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o81 = o80) and
  (o82 = (((merge__split_fields5[im2])).us_split_fields1).rec__step_function__delimiter_entry__value)))))

axiom H76 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o83 = o81) and (o84 = o82)))))

axiom H77 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (o85 = (merge__split_fields5[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o83;
  rec__step_function__delimiter_entry__value = o84 } }])))))

axiom H78 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o86 = merge__split_fields4) and (o87 = o85)))))

axiom H79 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((temp___360 = o86) and (temp___3601 = o87)))))

axiom H80 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((result11 = merge__split_fields4) and
  (result12 = merge__split_fields5)))))

axiom H81 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((merge__split_fields10 = temp___360) and
  (merge__split_fields11 = temp___3601)))))

axiom H82 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o89 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o89) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o89,
   to_rep((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o89,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))))))

axiom H83 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o88 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o88) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o88,
   to_rep((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o88,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))))))

axiom H84 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o90 = min1(o88, o89)) and (tqtisFinite(o90) and ((le(o88, o89) -> eq(o90,
  o88)) and ((not le(o88, o89)) -> eq(o90, o89))))))))

axiom H85 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (to_rep(o91) = o90))))

axiom H86 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o92 = (((merge__split_fields11[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) and
  (o93 = o91)))))

axiom H87 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o94 = o92) and (o95 = o93)))))

axiom H88 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (o96 = (merge__split_fields11[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o94;
  rec__step_function__delimiter_entry__value = o95 } }])))))

axiom H89 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((o97 = merge__split_fields10) and (o98 = o96)))))

axiom H90 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((temp___367 = o97) and (temp___3671 = o98)))))

axiom H91 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((result13 = merge__split_fields10) and
  (result14 = merge__split_fields11)))))

axiom H92 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((merge__split_fields12 = temp___367) and
  (merge__split_fields13 = temp___3671)))))

axiom H93 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  ((((i22 <  to_rep1(sfun2)) -> ((i23 = (i22 + 1)) and
  ((scan_sfun23 = true) <-> (scan_sfun22 = true)))) and
  ((not (i22 <  to_rep1(sfun2))) -> ((i23 = i22) and
  (not (scan_sfun23 = true))))) and in_range2(i23)))))

axiom H94 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (scan_sfun14 = scan_sfun12))))

axiom H95 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) ->
  (i14 = i12))))

axiom H96 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (to_rep2(o99) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))

axiom H97 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o100 = o99) and
  (o101 = (((merge__split_fields5[im2])).us_split_fields1).rec__step_function__delimiter_entry__value)))))

axiom H98 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o102 = o100) and (o103 = o101)))))

axiom H99 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (o104 = (merge__split_fields5[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o102;
  rec__step_function__delimiter_entry__value = o103 } }])))))

axiom H100 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o105 = merge__split_fields4) and (o106 = o104)))))

axiom H101 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((temp___345 = o105) and (temp___3451 = o106)))))

axiom H102 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((result15 = merge__split_fields4) and
  (result16 = merge__split_fields5)))))

axiom H103 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((merge__split_fields14 = temp___345) and
  (merge__split_fields15 = temp___3451)))))

axiom H104 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o108 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o108) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o108,
   to_rep((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o108,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))))))

axiom H105 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o107 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o107) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o107,
   to_rep((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o107,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value)))))))))

axiom H106 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o109 = min1(o107, o108)) and (tqtisFinite(o109) and ((le(o107, o108) ->
  eq(o109, o107)) and ((not le(o107, o108)) -> eq(o109, o108))))))))

axiom H107 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (to_rep(o110) = o109))))

axiom H108 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o111 = (((merge__split_fields15[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) and
  (o112 = o110)))))

axiom H109 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o113 = o111) and (o114 = o112)))))

axiom H110 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (o115 = (merge__split_fields15[im2 <- { us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o113;
  rec__step_function__delimiter_entry__value = o114 } }])))))

axiom H111 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((o116 = merge__split_fields14) and (o117 = o115)))))

axiom H112 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((temp___352 = o116) and (temp___3521 = o117)))))

axiom H113 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((result17 = merge__split_fields14) and
  (result18 = merge__split_fields15)))))

axiom H114 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((merge__split_fields16 = temp___352) and
  (merge__split_fields17 = temp___3521)))))

axiom H115 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((((i12 <  to_rep1(sfun1)) -> ((i14 = (i12 + 1)) and
  ((scan_sfun14 = true) <-> (scan_sfun12 = true)))) and
  ((not (i12 <  to_rep1(sfun1))) -> ((i14 = i12) and
  (not (scan_sfun14 = true))))) and in_range2(i14)))))

axiom H116 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((((i22 <  to_rep1(sfun2)) -> ((i24 = (i22 + 1)) and
  ((scan_sfun24 = true) <-> (scan_sfun22 = true)))) and
  ((not (i22 <  to_rep1(sfun2))) -> ((i24 = i22) and
  (not (scan_sfun24 = true))))) and in_range2(i24)))))

axiom H117 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (scan_sfun23 = scan_sfun24))))

axiom H118 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (i23 = i24))))

axiom H119 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((not (to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((merge__split_fields12 = merge__split_fields16) and
  (merge__split_fields13 = merge__split_fields17)))))

axiom H120 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (scan_sfun13 = scan_sfun14)))

axiom H121 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  (i13 = i14)))

axiom H122 : (((scan_sfun12 = true) and (scan_sfun22 = true)) ->
  ((not (to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) ->
  ((merge__split_fields8 = merge__split_fields12) and
  (merge__split_fields9 = merge__split_fields13))))

axiom H123 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) ->
  (to_rep2(o118) = to_rep2((((sfun11[i12])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))

axiom H124 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o119 = o118) and
  (o120 = (((merge__split_fields5[im2])).us_split_fields1).rec__step_function__delimiter_entry__value))))

axiom H125 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o121 = o119) and (o122 = o120))))

axiom H126 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> (o123 = (merge__split_fields5[im2 <- {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o121;
  rec__step_function__delimiter_entry__value = o122 } }]))))

axiom H127 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o124 = merge__split_fields4) and
  (o125 = o123))))

axiom H128 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((temp___332 = o124) and (temp___3321 = o125))))

axiom H129 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((result19 = merge__split_fields4) and
  (result20 = merge__split_fields5))))

axiom H130 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((merge__split_fields18 = temp___332) and
  (merge__split_fields19 = temp___3321))))

axiom H131 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o127 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o127) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o127,
   to_rep((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o127,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H132 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o126 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o126) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o126,
   to_rep((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o126,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H133 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o128 = min1(o126, o127)) and
  (tqtisFinite(o128) and ((le(o126, o127) -> eq(o128, o126)) and
  ((not le(o126, o127)) -> eq(o128, o127)))))))

axiom H134 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> (to_rep(o129) = o128)))

axiom H135 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) ->
  ((o130 = (((merge__split_fields19[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) and
  (o131 = o129))))

axiom H136 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o132 = o130) and (o133 = o131))))

axiom H137 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> (o134 = (merge__split_fields19[im2 <- {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o132;
  rec__step_function__delimiter_entry__value = o133 } }]))))

axiom H138 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((o135 = merge__split_fields18) and
  (o136 = o134))))

axiom H139 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((temp___339 = o135) and (temp___3391 = o136))))

axiom H140 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((result21 = merge__split_fields18) and
  (result22 = merge__split_fields19))))

axiom H141 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((merge__split_fields20 = temp___339) and
  (merge__split_fields21 = temp___3391))))

axiom H142 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> ((((i12 <  to_rep1(sfun1)) ->
  ((i15 = (i12 + 1)) and ((scan_sfun15 = true) <->
  (scan_sfun12 = true)))) and ((not (i12 <  to_rep1(sfun1))) ->
  ((i15 = i12) and (not (scan_sfun15 = true))))) and in_range2(i15))))

axiom H143 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> (scan_sfun25 = scan_sfun22)))

axiom H144 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((scan_sfun12 = true) -> (i25 = i22)))

axiom H145 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) ->
  (to_rep2(o137) = to_rep2((((sfun21[i22])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))))

axiom H146 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o138 = o137) and
  (o139 = (((merge__split_fields5[im2])).us_split_fields1).rec__step_function__delimiter_entry__value))))

axiom H147 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o140 = o138) and (o141 = o139))))

axiom H148 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> (o142 = (merge__split_fields5[im2 <- {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o140;
  rec__step_function__delimiter_entry__value = o141 } }]))))

axiom H149 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o143 = merge__split_fields4) and
  (o144 = o142))))

axiom H150 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((temp___319 = o143) and
  (temp___3191 = o144))))

axiom H151 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((result23 = merge__split_fields4) and
  (result24 = merge__split_fields5))))

axiom H152 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((merge__split_fields22 = temp___319) and
  (merge__split_fields23 = temp___3191))))

axiom H153 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o146 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o146) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun2) - 1))) and
   (((to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun21[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o146,
   to_rep((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o146,
  to_rep((((sfun21[to_rep1(sfun2)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H154 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o145 = get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
  (tqtisFinite(o145) and
  ((exists i30:int. (((0 <= i30) and (i30 <= (to_rep1(sfun1) - 1))) and
   (((to_rep2((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
   (to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <  to_rep2((((sfun11[(i30 + 1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter))) and
   eq(o145,
   to_rep((((sfun11[i30])).us_split_fields1).rec__step_function__delimiter_entry__value))))) or
  ((to_rep2((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) <= to_rep2((((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)) and
  eq(o145,
  to_rep((((sfun11[to_rep1(sfun1)])).us_split_fields1).rec__step_function__delimiter_entry__value))))))))

axiom H155 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o147 = min1(o145, o146)) and
  (tqtisFinite(o147) and ((le(o145, o146) -> eq(o147, o145)) and
  ((not le(o145, o146)) -> eq(o147, o146)))))))

axiom H156 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> (to_rep(o148) = o147)))

axiom H157 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) ->
  ((o149 = (((merge__split_fields23[im2])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) and
  (o150 = o148))))

axiom H158 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o151 = o149) and (o152 = o150))))

axiom H159 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> (o153 = (merge__split_fields23[im2 <- {
  us_split_fields1 = { rec__step_function__delimiter_entry__delimiter = o151;
  rec__step_function__delimiter_entry__value = o152 } }]))))

axiom H160 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((o154 = merge__split_fields22) and
  (o155 = o153))))

axiom H161 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((temp___326 = o154) and
  (temp___3261 = o155))))

axiom H162 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((result25 = merge__split_fields22) and
  (result26 = merge__split_fields23))))

axiom H163 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((merge__split_fields24 = temp___326) and
  (merge__split_fields25 = temp___3261))))

axiom H164 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> ((((i22 <  to_rep1(sfun2)) ->
  ((i25 = (i22 + 1)) and ((scan_sfun25 = true) <->
  (scan_sfun22 = true)))) and ((not (i22 <  to_rep1(sfun2))) ->
  ((i25 = i22) and (not (scan_sfun25 = true))))) and in_range2(i25))))

axiom H165 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> (scan_sfun15 = scan_sfun12)))

axiom H166 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) -> (i15 = i12)))

axiom H167 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((not (scan_sfun12 = true)) ->
  ((merge__split_fields20 = merge__split_fields24) and
  (merge__split_fields21 = merge__split_fields25))))

axiom H168 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  (scan_sfun23 = scan_sfun25))

axiom H169 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  (scan_sfun13 = scan_sfun15))

axiom H170 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  (i23 = i25))

axiom H171 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  (i13 = i15))

axiom H172 : ((not ((scan_sfun12 = true) and (scan_sfun22 = true))) ->
  ((merge__split_fields8 = merge__split_fields20) and
  (merge__split_fields9 = merge__split_fields21)))

axiom H173 : (im4 = im2)

axiom H174 : (im5 = im2)

axiom H175 : (not (match_bool(scan_sfun13, true, scan_sfun23) = true))

axiom H176 : (scan_sfun26 = scan_sfun23)

axiom H177 : (scan_sfun16 = scan_sfun13)

axiom H178 : (im6 = im4)

axiom H179 : (i26 = i23)

axiom H180 : (i16 = i13)

axiom H181 : ((merge__split_fields28 = merge__split_fields8) and
  (merge__split_fields29 = merge__split_fields9))

axiom H182 : (scan_sfun27 = scan_sfun23)

axiom H183 : (scan_sfun17 = scan_sfun13)

axiom H184 : (im7 = im5)

axiom H185 : (i27 = i23)

axiom H186 : (i17 = i13)

axiom H187 : ((merge__split_fields30 = merge__split_fields8) and
  (merge__split_fields31 = merge__split_fields9))

axiom H188 : (scan_sfun28 = scan_sfun26)

axiom H189 : (scan_sfun18 = scan_sfun16)

axiom H190 : (im8 = im6)

axiom H191 : (i28 = i26)

axiom H192 : (i18 = i16)

axiom H193 : ((merge__split_fields32 = merge__split_fields28) and
  (merge__split_fields33 = merge__split_fields29))

axiom H194 : (scan_sfun29 = scan_sfun27)

axiom H195 : (scan_sfun19 = scan_sfun17)

axiom H196 : (im9 = im7)

axiom H197 : (i29 = i27)

axiom H198 : (i19 = i17)

axiom H199 : ((merge__split_fields34 = merge__split_fields30) and
  (merge__split_fields35 = merge__split_fields31))

axiom H200 : (to_rep1(o166) = im8)

axiom H201 : ((o167 = o166) and (o168 = merge__split_fields33))

axiom H202 : ((temp___451 = o167) and (temp___4511 = o168))

axiom H203 : ((result30 = merge__split_fields32) and
  (result31 = merge__split_fields33))

axiom H204 : ((merge__split_fields36 = temp___451) and
  (merge__split_fields37 = temp___4511))

axiom H205 : (scan_sfun210 = scan_sfun28)

axiom H206 : (scan_sfun110 = scan_sfun18)

axiom H207 : (im10 = im8)

axiom H208 : (i210 = i28)

axiom H209 : (i110 = i18)

axiom H210 : ((merge__split_fields38 = merge__split_fields36) and
  (merge__split_fields39 = merge__split_fields37))

axiom H211 : (scan_sfun211 = scan_sfun29)

axiom H212 : (scan_sfun111 = scan_sfun19)

axiom H213 : (im11 = im9)

axiom H214 : (i211 = i29)

axiom H215 : (i111 = i19)

axiom H216 : ((merge__split_fields40 = merge__split_fields36) and
  (merge__split_fields41 = merge__split_fields37))

axiom H217 : ((o201 = true) <->
  (forall i30:int. (((0 <= i30) and
  (i30 <= to_rep1(merge__split_fields38))) ->
  eq(to_rep((((merge__split_fields39[i30])).us_split_fields1).rec__step_function__delimiter_entry__value),
  min1(get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun1;
  rec__step_function__step_function_t__step = sfun11 } },
  to_rep2((((merge__split_fields39[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)),
  get_value({ us_split_fields3 = {
  rec__step_function__step_function_t__number_of_delimiters = sfun2;
  rec__step_function__step_function_t__step = sfun21 } },
  to_rep2((((merge__split_fields39[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

axiom H218 : ((o183 = true) <->
  (forall i30:int. (((0 <= i30) and (i30 <= to_rep1(sfun2))) ->
  (exists j6:int. (((0 <= j6) and (j6 <= to_rep1(merge__split_fields38))) and
  (to_rep2((((merge__split_fields39[j6])).us_split_fields1).rec__step_function__delimiter_entry__delimiter) = to_rep2((((sfun21[i30])).us_split_fields1).rec__step_function__delimiter_entry__delimiter)))))))

axiom H219 : (0 <= i8)

axiom H220 : (i8 <= to_rep1(sfun1))

axiom H221 : (0 <= j4)

axiom H222 : (j4 <= to_rep1(merge__split_fields38))

axiom H223 : ((0 <= i8) and (i8 <= 10))

axiom H224 : (o169 = i8)

axiom H225 : ({ us_split_fields1 = {
  rec__step_function__delimiter_entry__delimiter = o170;
  rec__step_function__delimiter_entry__value = o171 } } = (sfun11[o169]))

axiom H226 : ((o172 = o170) and (o173 = o171))

axiom H227 : (o174 = o172)

axiom H228 : (o175 = to_rep2(o174))

 (* File "step_function.ads", line 89, characters 0-0 *)
goal WP_parameter_def : (0 <= j4)
