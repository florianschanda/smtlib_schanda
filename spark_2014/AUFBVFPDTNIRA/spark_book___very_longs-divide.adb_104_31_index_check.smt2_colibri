;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun abstr () (_ BitVec 8))

(declare-fun abstr1 () (_ BitVec 8))

(declare-fun abstr2 () (_ BitVec 8))

(declare-fun abstr3 () (_ BitVec 8))

(declare-fun abstr4 () (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(define-fun dynamic_invariant ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)) Bool true)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-fun value__size () Int)

(declare-fun value__component__size () Int)

(declare-fun value__alignment () Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

(declare-fun value__size1 () Int)

(declare-fun value__alignment1 () Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

(declare-fun very_longs__very_long__length__first__bit () Int)

(declare-fun very_longs__very_long__length__last__bit () Int)

(declare-fun very_longs__very_long__length__position () Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position))

(declare-fun very_longs__very_long__long_digits__first__bit () Int)

(declare-fun very_longs__very_long__long_digits__last__bit () Int)

(declare-fun very_longs__very_long__long_digits__position () Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(define-fun dynamic_invariant2 ((temp___expr_702 Int)
  (temp___is_init_699 Bool) (temp___skip_constant_700 Bool)
  (temp___do_toplevel_701 Bool)) Bool (=>
                                      (or (= temp___is_init_699 true)
                                      (<= 0 7)) (in_range4 temp___expr_702)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun distance () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun r123b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant3 ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 1 65536)) (in_range2
                                      temp___expr_204)))

(declare-fun old_overflow () (_ BitVec 8))

(declare-fun new_overflow () (_ BitVec 8))

(declare-fun overflow_mask () (_ BitVec 8))

(declare-fun i () Int)

(declare-fun o () (_ BitVec 8))

(declare-fun o1 () Int)

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () Int)

(declare-fun o5 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () (_ BitVec 8))

(declare-fun o10 () (_ BitVec 8))

(declare-fun o11 () (_ BitVec 8))

(declare-fun result () (_ BitVec 8))

(declare-fun old_overflow1 () (_ BitVec 8))

(declare-fun result1 () (_ BitVec 8))

(declare-fun overflow_mask1 () (_ BitVec 8))

(declare-fun result2 () Int)

(declare-fun i1 () Int)

(declare-fun old_overflow2 () (_ BitVec 8))

(declare-fun new_overflow1 () (_ BitVec 8))

(declare-fun i2 () Int)

(declare-fun result3 () (_ BitVec 8))

(declare-fun new_overflow2 () (_ BitVec 8))

;; H
  (assert (in_range4 distance))

;; H
  (assert (= result old_overflow))

(declare-fun abstr6 () (_ BitVec 8))

;; H
  (assert (= old_overflow1 abstr6))

(declare-fun abstr7 () (_ BitVec 8))

(declare-fun abstr8 () (_ BitVec 8))

(declare-fun abstr9 () (_ BitVec 8))

(declare-fun abstr10 () (_ BitVec 8))

;; H
  (assert
  (and (= o abstr10)
  (= o (bvudiv abstr7 (ite (< (- 8 distance) 256) (bvshl abstr8 abstr9)
                      abstr6)))))

;; H
  (assert (= result1 overflow_mask))

;; H
  (assert (= overflow_mask1 o))

;; H
  (assert (in_range1 r123b))

;; H
  (assert (= result2 i))

;; H
  (assert (= i1 r123b))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 r123b))

;; H
  (assert (= o1 i2))

;; H
  (assert (= o3 (bvand o2 overflow_mask1)))

;; H
  (assert (= result3 new_overflow1))

;; H
  (assert (= new_overflow2 o3))

;; H
  (assert (= o4 i2))

(declare-fun abstr11 () (_ BitVec 8))

(declare-fun abstr12 () (_ BitVec 8))

;; H
  (assert
  (and (= o6 abstr12)
  (= o6 (bvudiv o5 (ite (< distance 256) (bvshl abstr8 abstr11) abstr6)))))

;; H
  (assert (= o7 i2))

;; H
  (assert (=> (< (- 8 distance) 8) (= o9 (bvshl old_overflow2 abstr9))))

;; H
  (assert (=> (not (< (- 8 distance) 8)) (= o9 abstr6)))

(assert
;; WP_parameter_def
 ;; File "very_longs-divide.adb", line 74, characters 0-0
  (not false))
(check-sat)
(exit)
