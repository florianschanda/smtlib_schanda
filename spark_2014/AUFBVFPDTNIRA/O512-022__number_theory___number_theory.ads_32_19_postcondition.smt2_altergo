(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic fib : int -> int

logic fib__function_guard : int, int -> prop

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic abs : real -> real

axiom abs_def :
  (forall x:real [abs(x)]. (((0.0 <= x) -> (abs(x) = x)) and
  ((not (0.0 <= x)) -> (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

type mode = RNE | RNA | RTP | RTN | RTZ

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNE, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNA, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTP, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTN, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTZ, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: mode) = ((m = RNE) or (m = RNA))

logic zeroF : t

logic add : mode, t, t -> t

logic sub : mode, t, t -> t

logic mul : mode, t, t -> t

logic div : mode, t, t -> t

logic abs1 : t -> t

logic neg : t -> t

logic fma : mode, t, t, t -> t

logic sqrt : mode, t -> t

logic roundToIntegral : mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : mode, int -> t

logic to_int : mode, t -> int

axiom zero_of_int : (forall m:mode. (zeroF = of_int(m, 0)))

logic round : mode, real -> real

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = from_int(max_int1))

predicate in_range1(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range1(tqtreal(x))))

predicate no_overflow(m: mode, x: real) = in_range1(round(m, x))

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. (in_range1(x) -> in_range1(round(m, x))))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_to_real :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (round(m,
  tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (round(RTN, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(RTP, x)))

axiom Round_down_neg : (forall x:real. (round(RTN, (-x)) = (-round(RTP, x))))

axiom Round_up_neg : (forall x:real. (round(RTP, (-x)) = (-round(RTN, x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (round(m,
  from_int(i)) = from_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: mode, x: t) = ((((((m = RNE) ->
  is_infinite(x)) and ((m = RNA) -> is_infinite(x))) and ((m = RTP) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and ((m = RTN) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> is_infinite(x))))) and ((m = RTZ) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: mode, x: t) = (is_zero(x) -> ((((((m = RNE) ->
  is_positive(x)) and ((m = RNA) -> is_positive(x))) and ((m = RTP) ->
  is_positive(x))) and ((m = RTN) -> is_negative(x))) and ((m = RTZ) ->
  is_positive(x))))

axiom add_finite :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range1(round(m, (tqtreal(x) + tqtreal(y)))) ->
  (tqtisFinite(add(m, x, y)) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(add(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(add(m, x, y)) -> (in_range1(round(m,
  (tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range1(round(m, (tqtreal(x) - tqtreal(y)))) ->
  (tqtisFinite(sub(m, x, y)) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(sub(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(sub(m, x, y)) -> (in_range1(round(m,
  (tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range1(round(m, (tqtreal(x) * tqtreal(y)))) ->
  (tqtisFinite(mul(m, x, y)) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(mul(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(mul(m, x, y)) -> (in_range1(round(m,
  (tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> ((not is_zero(y)) -> (in_range1(round(m,
  (tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = round(m, (tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(div(m,
  x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and (not is_zero(y)))) or
  (tqtisFinite(x) and (is_infinite(y) and (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) -> (in_range1(round(m,
  (tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x, y)) = round(m,
  (tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs1(x)]. (tqtisFinite(x) -> (tqtisFinite(abs1(x)) and
  ((tqtreal(abs1(x)) = abs(tqtreal(x))) and is_positive(abs1(x))))))

axiom abs_finite_rev :
  (forall x:t [abs1(x)]. (tqtisFinite(abs1(x)) -> (tqtisFinite(x) and
  (tqtreal(abs1(x)) = abs(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs1(x)]. (not is_negative(abs1(x))))

axiom fma_finite_rev :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and (tqtisFinite(y) and
  tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (in_range1(round(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and (tqtreal(fma(m, x, y,
  z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

logic sqrt1 : real -> real

axiom sqrt_finite_rev :
  (forall m:mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m, x)) ->
  (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = round(m, sqrt1(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:mode. forall x:int. (in_int_range(x) -> is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:mode. forall i:t. (tqtisFinite(i) -> ((le(i, neg(of_int(m,
  16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> is_int(roundToIntegral(m,
  x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:mode. (is_int(x) ->
  (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) -> is_int(fma(m,
  x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs1(x))))

axiom is_int_of_int :
  (forall x:t. forall m:mode. forall mqt:mode. (is_int(x) -> eq(x,
  of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:mode. forall x:t. (is_int(x) -> (tqtreal(x) = from_int(to_int(m,
  x)))))

axiom truncate_int :
  (forall m:mode. forall i:t. (is_int(i) -> eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTP, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTN, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(RTP, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(RTP, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTP,
  x)) = from_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTP, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(RTN, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(RTN, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTN,
  x)) = from_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTN, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (is_negative(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (is_positive(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x)))))

axiom to_int_roundToIntegral :
  (forall m:mode. forall x:t. (to_int(m, x) = to_int(m, roundToIntegral(m,
  x))))

axiom to_int_monotonic :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (to_int(m, of_int(m,
  i)) = i)))

axiom eq_to_int :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) -> (eq(x, y) ->
  (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> (to_int(m, neg(x)) = (-to_int(m,
  x)))))

axiom roundToIntegral_is_finite :
  (forall m:mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [round(RNE, x)]. (in_range1(round(RNE, x)) ->
  ((((x - (0x1.0p-24 * abs(x))) - 0x1.0p-150) <= round(RNE, x)) and
  (round(RNE, x) <= ((x + (0x1.0p-24 * abs(x))) + 0x1.0p-150)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt1 : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt1(x, y)]. ((lt(x, y) -> (bool_lt1(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le1(x, y)]. ((le(x, y) -> (bool_le1(x,
  y) = true)) and ((not le(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt1(x, y)]. ((lt(y, x) -> (bool_gt1(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge1(x, y)]. ((le(y, x) -> (bool_ge1(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge1(x, y) = false))))

logic bool_eq2 : t, t -> bool

axiom bool_eq_def1 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(RNA, 1))

type t__ref = { t__content : t
}

logic power : t, int -> t

axiom Power_01 :
  (forall x:t. (tqtisFinite(x) -> eq(power(x, 0), of_int(RNE, 1))))

axiom Power_11 : (forall x:t. (tqtisFinite(x) -> eq(power(x, 1), x)))

axiom Power_2 :
  (forall x:t. (tqtisFinite(x) -> eq(power(x, 2), mul(RNE, x, x))))

axiom Power_3 :
  (forall x:t. (tqtisFinite(x) -> eq(power(x, 3), mul(RNE, x, mul(RNE, x,
  x)))))

axiom Power_neg1 :
  (forall x:t. (tqtisFinite(x) -> ((not is_zero(x)) -> eq(power(x, (- 1)),
  div(RNE, of_int(RNE, 1), x)))))

axiom Power_neg2 :
  (forall x:t. (tqtisFinite(x) -> ((not is_zero(x)) -> eq(power(x, (- 2)),
  div(RNE, of_int(RNE, 1), power(x, 2))))))

axiom Power_neg3 :
  (forall x:t. (tqtisFinite(x) -> ((not is_zero(x)) -> eq(power(x, (- 2)),
  div(RNE, of_int(RNE, 1), power(x, 3))))))

type fibonacci_argument_type

logic fibonacci_argument_typeqtint : fibonacci_argument_type -> int

axiom fibonacci_argument_typeqtaxiom :
  (forall i:fibonacci_argument_type.
  ((0 <= fibonacci_argument_typeqtint(i)) and
  (fibonacci_argument_typeqtint(i) <= 46)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 46))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : fibonacci_argument_type, fibonacci_argument_type -> bool

logic dummy1 : fibonacci_argument_type

type fibonacci_argument_type__ref = { fibonacci_argument_type__content :
fibonacci_argument_type
}

function fibonacci_argument_type__ref___projection(a: fibonacci_argument_type__ref) : fibonacci_argument_type =
  (a).fibonacci_argument_type__content

axiom fib__def_axiom :
  (forall n:int [fib(n)]. (in_range2(n) -> ((((n = 0) or (n = 1)) ->
  (fib(n) = n)) and ((not ((n = 0) or (n = 1))) ->
  (fib(n) = (fib((n - 1)) + fib((n - 2))))))))

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic lookup_table : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic number_theory__fibonacci2__lookup_table__aggregate_def : int, int, int,
  int, int, int, int, int, int, int, int, int, int, int, int, int, int, int,
  int, int, int, int, int, int, int, int, int, int, int, int, int, int, int,
  int, int, int, int, int, int, int, int, int, int, int, int, int,
  int -> (int,natural) farray

axiom lookup_table__def_axiom :
  (lookup_table = number_theory__fibonacci2__lookup_table__aggregate_def(0,
  1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584,
  4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,
  514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352,
  24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437,
  701408733, 1134903170, 1836311903))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

logic rliteral1 : natural

axiom rliteral_axiom1 : (naturalqtint(rliteral1) = 1)

logic rliteral2 : natural

axiom rliteral_axiom2 : (naturalqtint(rliteral2) = 2)

logic rliteral3 : natural

axiom rliteral_axiom3 : (naturalqtint(rliteral3) = 3)

logic rliteral4 : natural

axiom rliteral_axiom4 : (naturalqtint(rliteral4) = 5)

logic rliteral5 : natural

axiom rliteral_axiom5 : (naturalqtint(rliteral5) = 8)

logic rliteral6 : natural

axiom rliteral_axiom6 : (naturalqtint(rliteral6) = 13)

logic rliteral7 : natural

axiom rliteral_axiom7 : (naturalqtint(rliteral7) = 21)

logic rliteral8 : natural

axiom rliteral_axiom8 : (naturalqtint(rliteral8) = 34)

logic rliteral9 : natural

axiom rliteral_axiom9 : (naturalqtint(rliteral9) = 55)

logic rliteral10 : natural

axiom rliteral_axiom10 : (naturalqtint(rliteral10) = 89)

logic rliteral11 : natural

axiom rliteral_axiom11 : (naturalqtint(rliteral11) = 144)

logic rliteral12 : natural

axiom rliteral_axiom12 : (naturalqtint(rliteral12) = 233)

logic rliteral13 : natural

axiom rliteral_axiom13 : (naturalqtint(rliteral13) = 377)

logic rliteral14 : natural

axiom rliteral_axiom14 : (naturalqtint(rliteral14) = 610)

logic rliteral15 : natural

axiom rliteral_axiom15 : (naturalqtint(rliteral15) = 987)

logic rliteral16 : natural

axiom rliteral_axiom16 : (naturalqtint(rliteral16) = 1597)

logic rliteral17 : natural

axiom rliteral_axiom17 : (naturalqtint(rliteral17) = 2584)

logic rliteral18 : natural

axiom rliteral_axiom18 : (naturalqtint(rliteral18) = 4181)

logic rliteral19 : natural

axiom rliteral_axiom19 : (naturalqtint(rliteral19) = 6765)

logic rliteral20 : natural

axiom rliteral_axiom20 : (naturalqtint(rliteral20) = 10946)

logic rliteral21 : natural

axiom rliteral_axiom21 : (naturalqtint(rliteral21) = 17711)

logic rliteral22 : natural

axiom rliteral_axiom22 : (naturalqtint(rliteral22) = 28657)

logic rliteral23 : natural

axiom rliteral_axiom23 : (naturalqtint(rliteral23) = 46368)

logic rliteral24 : natural

axiom rliteral_axiom24 : (naturalqtint(rliteral24) = 75025)

logic rliteral25 : natural

axiom rliteral_axiom25 : (naturalqtint(rliteral25) = 121393)

logic rliteral26 : natural

axiom rliteral_axiom26 : (naturalqtint(rliteral26) = 196418)

logic rliteral27 : natural

axiom rliteral_axiom27 : (naturalqtint(rliteral27) = 317811)

logic rliteral28 : natural

axiom rliteral_axiom28 : (naturalqtint(rliteral28) = 514229)

logic rliteral29 : natural

axiom rliteral_axiom29 : (naturalqtint(rliteral29) = 832040)

logic rliteral30 : natural

axiom rliteral_axiom30 : (naturalqtint(rliteral30) = 1346269)

logic rliteral31 : natural

axiom rliteral_axiom31 : (naturalqtint(rliteral31) = 2178309)

logic rliteral32 : natural

axiom rliteral_axiom32 : (naturalqtint(rliteral32) = 3524578)

logic rliteral33 : natural

axiom rliteral_axiom33 : (naturalqtint(rliteral33) = 5702887)

logic rliteral34 : natural

axiom rliteral_axiom34 : (naturalqtint(rliteral34) = 9227465)

logic rliteral35 : natural

axiom rliteral_axiom35 : (naturalqtint(rliteral35) = 14930352)

logic rliteral36 : natural

axiom rliteral_axiom36 : (naturalqtint(rliteral36) = 24157817)

logic rliteral37 : natural

axiom rliteral_axiom37 : (naturalqtint(rliteral37) = 39088169)

logic rliteral38 : natural

axiom rliteral_axiom38 : (naturalqtint(rliteral38) = 63245986)

logic rliteral39 : natural

axiom rliteral_axiom39 : (naturalqtint(rliteral39) = 102334155)

logic rliteral40 : natural

axiom rliteral_axiom40 : (naturalqtint(rliteral40) = 165580141)

logic rliteral41 : natural

axiom rliteral_axiom41 : (naturalqtint(rliteral41) = 267914296)

logic rliteral42 : natural

axiom rliteral_axiom42 : (naturalqtint(rliteral42) = 433494437)

logic rliteral43 : natural

axiom rliteral_axiom43 : (naturalqtint(rliteral43) = 701408733)

logic rliteral44 : natural

axiom rliteral_axiom44 : (naturalqtint(rliteral44) = 1134903170)

logic rliteral45 : natural

axiom rliteral_axiom45 : (naturalqtint(rliteral45) = 1836311903)

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int. forall temp___164:int.
  forall temp___165:int. forall temp___166:int. forall temp___167:int.
  forall temp___168:int. forall temp___169:int. forall temp___170:int.
  forall temp___171:int. forall temp___172:int. forall temp___173:int.
  forall temp___174:int. forall temp___175:int. forall temp___176:int.
  forall temp___177:int. forall temp___178:int. forall temp___179:int.
  forall temp___180:int. forall temp___181:int. forall temp___182:int.
  forall temp___183:int. forall temp___184:int. forall temp___185:int.
  forall temp___186:int. forall temp___187:int. forall temp___188:int.
  forall temp___189:int. forall temp___190:int. forall temp___191:int.
  forall temp___192:int. forall temp___193:int. forall temp___194:int.
  forall temp___195:int. forall temp___196:int. forall temp___197:int.
  forall temp___198:int. forall temp___199:int. forall temp___200:int.
  forall temp___201:int. forall temp___202:int.
  (((((((((((((((((((((((((((((((((((((((((((((((in_range(temp___156) and
  in_range(temp___157)) and in_range(temp___158)) and
  in_range(temp___159)) and in_range(temp___160)) and
  in_range(temp___161)) and in_range(temp___162)) and
  in_range(temp___163)) and in_range(temp___164)) and
  in_range(temp___165)) and in_range(temp___166)) and
  in_range(temp___167)) and in_range(temp___168)) and
  in_range(temp___169)) and in_range(temp___170)) and
  in_range(temp___171)) and in_range(temp___172)) and
  in_range(temp___173)) and in_range(temp___174)) and
  in_range(temp___175)) and in_range(temp___176)) and
  in_range(temp___177)) and in_range(temp___178)) and
  in_range(temp___179)) and in_range(temp___180)) and
  in_range(temp___181)) and in_range(temp___182)) and
  in_range(temp___183)) and in_range(temp___184)) and
  in_range(temp___185)) and in_range(temp___186)) and
  in_range(temp___187)) and in_range(temp___188)) and
  in_range(temp___189)) and in_range(temp___190)) and
  in_range(temp___191)) and in_range(temp___192)) and
  in_range(temp___193)) and in_range(temp___194)) and
  in_range(temp___195)) and in_range(temp___196)) and
  in_range(temp___197)) and in_range(temp___198)) and
  in_range(temp___199)) and in_range(temp___200)) and
  in_range(temp___201)) and in_range(temp___202)) ->
  ((((((((((((((((((((((((((((((((((((((((((((((((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[0]) = rliteral) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[1]) = rliteral1)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[2]) = rliteral1)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[3]) = rliteral2)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[4]) = rliteral3)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[5]) = rliteral4)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[6]) = rliteral5)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[7]) = rliteral6)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[8]) = rliteral7)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[9]) = rliteral8)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[10]) = rliteral9)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[11]) = rliteral10)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[12]) = rliteral11)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[13]) = rliteral12)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[14]) = rliteral13)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[15]) = rliteral14)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[16]) = rliteral15)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[17]) = rliteral16)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[18]) = rliteral17)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[19]) = rliteral18)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[20]) = rliteral19)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[21]) = rliteral20)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[22]) = rliteral21)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[23]) = rliteral22)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[24]) = rliteral23)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[25]) = rliteral24)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[26]) = rliteral25)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[27]) = rliteral26)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[28]) = rliteral27)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[29]) = rliteral28)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[30]) = rliteral29)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[31]) = rliteral30)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[32]) = rliteral31)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[33]) = rliteral32)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[34]) = rliteral33)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[35]) = rliteral34)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[36]) = rliteral35)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[37]) = rliteral36)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[38]) = rliteral37)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[39]) = rliteral38)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[40]) = rliteral39)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[41]) = rliteral40)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[42]) = rliteral41)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[43]) = rliteral42)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[44]) = rliteral43)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[45]) = rliteral44)) and
  ((number_theory__fibonacci2__lookup_table__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167, temp___168,
  temp___169, temp___170, temp___171, temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187, temp___188, temp___189, temp___190, temp___191, temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202)[46]) = rliteral45))))

 (* File "/home/florian/adacore/spark2014/testsuite/gnatprove/tests/O512-022__number_theory/gnatprove/number_theory.mlw", line 3028, characters 5-8 *)
goal WP_parameter_def :
  (forall number_theory__fibonacci2__result:int. forall result:int.
  forall number_theory__fibonacci2__result1:int.
  forall number_theory__fibonacci2__result2:int.
  forall number_theory__fibonacci2__result3:int.
  forall number_theory__fibonacci2__result4:int.
  forall number_theory__fibonacci2__result5:int.
  (forall result1:int. ((in_range2(n) and
  ((((number_theory__fibonacci2__lookup_table__aggregate_def(0, 1, 1, 2, 3,
  5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,
  10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040,
  1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169,
  63245986, 102334155, 165580141, 267914296, 433494437, 701408733,
  1134903170, 1836311903) = lookup_table) and
  (((number_theory__fibonacci2__result1 = number_theory__fibonacci2__result2) and
  (number_theory__fibonacci2__result3 = number_theory__fibonacci2__result1)) and
  ((result = number_theory__fibonacci2__result) and
  (number_theory__fibonacci2__result1 = to_rep((lookup_table[n])))))) and
  ((number_theory__fibonacci2__result4 = number_theory__fibonacci2__result2) and
  (number_theory__fibonacci2__result5 = number_theory__fibonacci2__result3))) and
  (result1 = number_theory__fibonacci2__result4))) ->
  (number_theory__fibonacci2__result4 = fib(n)))))
