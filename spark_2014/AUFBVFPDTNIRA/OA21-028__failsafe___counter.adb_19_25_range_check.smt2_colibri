;; produced by colibri_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun abstr () (_ BitVec 8))

(declare-fun abstr1 () (_ BitVec 8))

(declare-fun abstr2 () (_ BitVec 8))

(declare-fun abstr3 () (_ BitVec 8))

(declare-fun abstr4 () (_ BitVec 8))

(define-fun nth_bv ((x (_ BitVec 8))
  (i (_ BitVec 8))) Bool (ite (not (= (bvand (bvlshr x i) #x01) #x00)) true
                         false))

(declare-fun abstr5 () Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool abstr5)

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun abstr6 () (_ BitVec 8))

(declare-fun abstr7 () (_ BitVec 8))

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule abstr7 x)
                                              (bvule x abstr6)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun abstr8 () (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr6)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun abstr9 () Bool)

(define-fun bool_eq ((a (Array (_ BitVec 8) Bool)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) Bool))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last)) abstr9)
                               true false))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun input () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(declare-fun abstr10 () (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule abstr8 x)
                                              (bvule x abstr10)))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 1 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 8))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (bvule abstr7 abstr6)) (in_range1
                                      temp___expr_202)))

(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule abstr8 abstr6)) (in_range2
                                      temp___expr_208)))

(declare-fun inputs () (Array (_ BitVec 8) Bool))

(declare-fun i () (_ BitVec 8))

(declare-fun temp___237 () (_ BitVec 8))

(declare-fun temp___238 () (Array (_ BitVec 8) Bool))

(declare-fun temp___240 () (Array (_ BitVec 8) Bool))

(declare-fun temp___235 () (Array (_ BitVec 8) Bool))

(declare-fun k () (_ BitVec 8))

(declare-fun o () (_ BitVec 8))

(declare-fun o1 () Bool)

(declare-fun o2 () Int)

(declare-fun k1 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () Bool)

(declare-fun o5 () Int)

(declare-fun inputs1 () (Array (_ BitVec 8) Bool))

(declare-fun result () (_ BitVec 8))

(declare-fun i1 () (_ BitVec 8))

(declare-fun inputs2 () (Array (_ BitVec 8) Bool))

(declare-fun i2 () (_ BitVec 8))

(declare-fun result1 () Bool)

(declare-fun result2 () (Array (_ BitVec 8) Bool))

(declare-fun inputs3 () (Array (_ BitVec 8) Bool))

(declare-fun result3 () (_ BitVec 8))

(declare-fun i3 () (_ BitVec 8))

(declare-fun inputs4 () (Array (_ BitVec 8) Bool))

(declare-fun i4 () (_ BitVec 8))

(declare-fun inputs5 () (Array (_ BitVec 8) Bool))

(declare-fun i5 () (_ BitVec 8))

(declare-fun inputs6 () (Array (_ BitVec 8) Bool))

(declare-fun i6 () (_ BitVec 8))

(declare-fun inputs7 () (Array (_ BitVec 8) Bool))

(declare-fun i7 () (_ BitVec 8))

(declare-fun inputs8 () (Array (_ BitVec 8) Bool))

(declare-fun i8 () (_ BitVec 8))

(declare-fun inputs9 () (Array (_ BitVec 8) Bool))

(declare-fun i9 () (_ BitVec 8))

(declare-fun result4 () (Array (_ BitVec 8) Bool))

(declare-fun inputs10 () (Array (_ BitVec 8) Bool))

(declare-fun inputs11 () (Array (_ BitVec 8) Bool))

(declare-fun i10 () (_ BitVec 8))

(declare-fun inputs12 () (Array (_ BitVec 8) Bool))

(declare-fun i11 () (_ BitVec 8))

;; H
  (assert (= i1 abstr8))

;; H
  (assert (bvule abstr8 i1))

;; H
  (assert (bvule i1 abstr10))

;; H
  (assert (and true true))

;; H
  (assert
  (and (and true (=> (bvule abstr8 abstr10) (in_range3 i2)))
  (and (bvule abstr8 i2) (bvule i2 abstr10))))

;; H
  (assert (bvule abstr8 (bvsub i2 abstr8)))

(assert
;; WP_parameter_def
 ;; File "counter.ads", line 9, characters 0-0
  (not (bvuge abstr8 abstr7)))
(check-sat)
(exit)
