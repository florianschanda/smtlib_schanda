;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort num_delimiters_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (num_delimiters_range num_delimiters_range) Bool)

(declare-fun dummy1 () num_delimiters_range)

(declare-datatypes ()
((num_delimiters_range__ref
 (mk_num_delimiters_range__ref
 (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range 
  (num_delimiters_range__content a))

(declare-fun to_rep1 (num_delimiters_range) Int)

(declare-fun of_rep1 (Int) num_delimiters_range)

;; inversion_axiom
  (assert
  (forall ((x num_delimiters_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x num_delimiters_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort function_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (function_range function_range) Bool)

(declare-fun dummy2 () function_range)

(declare-datatypes ()
((function_range__ref
 (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range 
  (function_range__content a))

(declare-fun to_rep2 (function_range) Int)

(declare-fun of_rep2 (Int) function_range)

;; inversion_axiom
  (assert
  (forall ((x function_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x function_range)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__step_function__delimiter_entry__delimiter function_range)(rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields)) function_range 
  (rec__step_function__delimiter_entry__delimiter a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__step_function__delimiter_entry__delimiter
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__step_function__delimiter_entry__delimiter
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__step_function__delimiter_entry__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__step_function__delimiter_entry__value
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun step_function__delimiter_entry__delimiter__first__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__last__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__position () Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-fun step_function__delimiter_entry__value__first__bit () Int)

(declare-fun step_function__delimiter_entry__value__last__bit () Int)

(declare-fun step_function__delimiter_entry__value__position () Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((delimiter_entry__ref
 (mk_delimiter_entry__ref (delimiter_entry__content us_rep)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep 
  (delimiter_entry__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun dummy4 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range)(rec__step_function__step_function_t__step (Array Int us_rep))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields2)) num_delimiters_range 
  (rec__step_function__step_function_t__number_of_delimiters a))

(define-fun us_split_fields_Step__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__step_function__step_function_t__step a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__step_function__step_function_t__number_of_delimiters
                                                   (us_split_fields3 b))))
                         (= (bool_eq1
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 a)) 0 10
                            (rec__step_function__step_function_t__step
                            (us_split_fields3 b)) 0 10) true))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun step_function__step_function_t__number_of_delimiters__first__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__last__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__position () Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit 
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-fun step_function__step_function_t__step__first__bit () Int)

(declare-fun step_function__step_function_t__step__last__bit () Int)

(declare-fun step_function__step_function_t__step__position () Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((step_function_t__ref
 (mk_step_function_t__ref (step_function_t__content us_rep1)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep1 
  (step_function_t__content a))

(declare-fun min (Float32 Float32) Float32)

(declare-fun min__function_guard (Float32 Float32 Float32) Bool)

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

;; min__post_axiom
  (assert
  (forall ((x1 Float32) (x2 Float32))
  (! (=>
     (and (dynamic_invariant x1 true true true) (dynamic_invariant x2 true
     true true))
     (let ((result (min x1 x2)))
     (and (ite (fp.leq x1 x2) (fp.eq result x1) (fp.eq result x2))
     (dynamic_invariant result true false true)))) :pattern ((min x1 x2)) )))

(declare-fun is_valid (us_rep1) Bool)

(declare-fun is_valid__function_guard (Bool us_rep1) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((sfun us_rep1))
  (! (= (= (is_valid sfun) true)
     (and
     (= (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___182 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun))))
        (select temp___182 0))))) 0)
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields3 sfun))) 1)))
     (< (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___184 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun))))
        (select temp___184 i))))) (to_rep2
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields1
                                  (let ((temp___183 (rec__step_function__step_function_t__step
                                                    (us_split_fields3 sfun))))
                                  (select temp___183 (+ i 1))))))))))) :pattern (
  (is_valid sfun)) )))

(declare-fun has_same_delimiters (us_rep1 us_rep1) Bool)

(declare-fun has_same_delimiters__function_guard (Bool us_rep1 us_rep1) Bool)

;; has_same_delimiters__post_axiom
  (assert true)

;; has_same_delimiters__def_axiom
  (assert
  (forall ((sfun1 us_rep1) (sfun2 us_rep1))
  (! (= (= (has_same_delimiters sfun1 sfun2) true)
     (and
     (= (to_rep1
        (rec__step_function__step_function_t__number_of_delimiters
        (us_split_fields3 sfun1))) (to_rep1
                                   (rec__step_function__step_function_t__number_of_delimiters
                                   (us_split_fields3 sfun2))))
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun1)))))
     (= (to_rep2
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields1
        (let ((temp___191 (rec__step_function__step_function_t__step
                          (us_split_fields3 sfun1))))
        (select temp___191 i))))) (to_rep2
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields1
                                  (let ((temp___192 (rec__step_function__step_function_t__step
                                                    (us_split_fields3 sfun2))))
                                  (select temp___192 i)))))))))) :pattern (
  (has_same_delimiters sfun1 sfun2)) )))

(declare-fun get_value (us_rep1 Int) Float32)

(declare-fun get_value__function_guard (Float32 us_rep1 Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_142)))

;; get_value__post_axiom
  (assert
  (forall ((sfun us_rep1))
  (forall ((x Int))
  (! (=> (and (dynamic_invariant1 x true true true) (= (is_valid sfun) true))
     (let ((result (get_value sfun x)))
     (and
     (or
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (- (to_rep1
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields3 sfun))) 1)))
     (and
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___199 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___199 i))))) x)
     (< x (to_rep2
          (rec__step_function__delimiter_entry__delimiter
          (us_split_fields1
          (let ((temp___200 (rec__step_function__step_function_t__step
                            (us_split_fields3 sfun))))
          (select temp___200 (+ i 1))))))))
     (fp.eq result (to_rep
                   (rec__step_function__delimiter_entry__value
                   (us_split_fields1
                   (let ((temp___201 (rec__step_function__step_function_t__step
                                     (us_split_fields3 sfun))))
                   (select temp___201 i)))))))))
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___202 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___202 (to_rep1
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields3 sfun)))))))) x)
     (fp.eq result (to_rep
                   (rec__step_function__delimiter_entry__value
                   (us_split_fields1
                   (let ((temp___203 (rec__step_function__step_function_t__step
                                     (us_split_fields3 sfun))))
                   (select temp___203 (to_rep1
                                      (rec__step_function__step_function_t__number_of_delimiters
                                      (us_split_fields3 sfun)))))))))))
     (dynamic_invariant result true false true)))) :pattern ((get_value sfun
                                                             x)) ))))

(declare-fun minimum_until_point (us_rep1 Int) Float32)

(declare-fun minimum_until_point__function_guard (Float32 us_rep1 Int) Bool)

;; minimum_until_point__post_axiom
  (assert
  (forall ((sfun us_rep1))
  (forall ((x Int))
  (! (=> (and (dynamic_invariant1 x true true true) (= (is_valid sfun) true))
     (let ((result (minimum_until_point sfun x)))
     (and
     (and
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun)))))
     (=>
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___211 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___211 i))))) x)
     (fp.leq result (to_rep
                    (rec__step_function__delimiter_entry__value
                    (us_split_fields1
                    (let ((temp___210 (rec__step_function__step_function_t__step
                                      (us_split_fields3 sfun))))
                    (select temp___210 i)))))))))
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (to_rep1
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields3 sfun)))))
     (and
     (<= (to_rep2
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields1
         (let ((temp___212 (rec__step_function__step_function_t__step
                           (us_split_fields3 sfun))))
         (select temp___212 i))))) x)
     (fp.eq result (to_rep
                   (rec__step_function__delimiter_entry__value
                   (us_split_fields1
                   (let ((temp___213 (rec__step_function__step_function_t__step
                                     (us_split_fields3 sfun))))
                   (select temp___213 i))))))))))
     (dynamic_invariant result true false true)))) :pattern ((minimum_until_point
                                                             sfun x)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun temp___274 (us_rep us_rep us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___276 us_rep) (temp___277 us_rep) (temp___278 us_rep)
  (temp___279 us_rep))
  (let ((temp___275 (temp___274 temp___276 temp___277 temp___278 temp___279)))
  (forall ((temp___280 Int))
  (ite (= temp___280 0) (= (select temp___275 temp___280) temp___276)
  (ite (= temp___280 1) (= (select temp___275 temp___280) temp___277)
  (ite (= temp___280 2) (= (select temp___275 temp___280) temp___278)
  (= (select temp___275 temp___280) temp___279))))))))

(declare-fun temp___281 (us_rep us_rep us_rep us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___283 us_rep) (temp___284 us_rep) (temp___285 us_rep)
  (temp___286 us_rep))
  (let ((temp___282 (temp___281 temp___283 temp___284 temp___285 temp___286)))
  (forall ((temp___287 Int))
  (ite (= temp___287 0) (= (select temp___282 temp___287) temp___283)
  (ite (= temp___287 1) (= (select temp___282 temp___287) temp___284)
  (ite (= temp___287 2) (= (select temp___282 temp___287) temp___285)
  (= (select temp___282 temp___287) temp___286))))))))

(declare-fun temp___288 (us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___290 us_rep) (temp___291 us_rep) (temp___292 us_rep)
  (temp___293 us_rep) (temp___294 us_rep) (temp___295 us_rep)
  (temp___296 us_rep))
  (let ((temp___289 (temp___288 temp___290 temp___291 temp___292 temp___293
                    temp___294 temp___295 temp___296)))
  (forall ((temp___297 Int))
  (ite (= temp___297 0) (= (select temp___289 temp___297) temp___290)
  (ite (= temp___297 1) (= (select temp___289 temp___297) temp___291)
  (ite (= temp___297 2) (= (select temp___289 temp___297) temp___292)
  (ite (= temp___297 3) (= (select temp___289 temp___297) temp___293)
  (ite (= temp___297 4) (= (select temp___289 temp___297) temp___294)
  (ite (= temp___297 5) (= (select temp___289 temp___297) temp___295)
  (= (select temp___289 temp___297) temp___296)))))))))))

(declare-fun temp___298 (us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___300 us_rep) (temp___301 us_rep) (temp___302 us_rep)
  (temp___303 us_rep) (temp___304 us_rep) (temp___305 us_rep)
  (temp___306 us_rep))
  (let ((temp___299 (temp___298 temp___300 temp___301 temp___302 temp___303
                    temp___304 temp___305 temp___306)))
  (forall ((temp___307 Int))
  (ite (= temp___307 0) (= (select temp___299 temp___307) temp___300)
  (ite (= temp___307 1) (= (select temp___299 temp___307) temp___301)
  (ite (= temp___307 2) (= (select temp___299 temp___307) temp___302)
  (ite (= temp___307 3) (= (select temp___299 temp___307) temp___303)
  (ite (= temp___307 4) (= (select temp___299 temp___307) temp___304)
  (ite (= temp___307 5) (= (select temp___299 temp___307) temp___305)
  (= (select temp___299 temp___307) temp___306)))))))))))

(define-fun dynamic_invariant2 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10)) (in_range2 temp___expr_136)))

(declare-fun sfun1__split_fields () num_delimiters_range)

(declare-fun sfun1__split_fields1 () (Array Int us_rep))

(declare-fun sfun2__split_fields () num_delimiters_range)

(declare-fun sfun2__split_fields1 () (Array Int us_rep))

(declare-fun sfun3__split_fields () num_delimiters_range)

(declare-fun sfun3__split_fields1 () (Array Int us_rep))

(declare-fun sfun4__split_fields () num_delimiters_range)

(declare-fun sfun4__split_fields1 () (Array Int us_rep))

(declare-fun i () Int)

(declare-fun o () float)

(declare-fun o1 () function_range)

(declare-fun o2 () function_range)

(declare-fun o3 () float)

(declare-fun o4 () float)

(declare-fun o5 () function_range)

(declare-fun o6 () function_range)

(declare-fun o7 () float)

(declare-fun o8 () float)

(declare-fun o9 () function_range)

(declare-fun o10 () function_range)

(declare-fun o11 () float)

(declare-fun o12 () float)

(declare-fun o13 () function_range)

(declare-fun o14 () function_range)

(declare-fun o15 () float)

(declare-fun o16 () function_range)

(declare-fun o17 () float)

(declare-fun o18 () function_range)

(declare-fun o19 () float)

(declare-fun o20 () function_range)

(declare-fun o21 () float)

(declare-fun o22 () us_rep)

(declare-fun o23 () (Array Int us_rep))

(declare-fun o24 () num_delimiters_range)

(declare-fun o25 () us_split_fields2)

(declare-fun step_function_test__sfun1__assume () us_rep1)

(declare-fun o26 () float)

(declare-fun o27 () function_range)

(declare-fun o28 () us_split_fields)

(declare-fun o29 () float)

(declare-fun o30 () function_range)

(declare-fun o31 () us_split_fields)

(declare-fun o32 () float)

(declare-fun o33 () function_range)

(declare-fun o34 () us_split_fields)

(declare-fun o35 () float)

(declare-fun o36 () function_range)

(declare-fun o37 () us_split_fields)

(declare-fun o38 () us_rep)

(declare-fun o39 () us_rep)

(declare-fun o40 () us_rep)

(declare-fun o41 () us_rep)

(declare-fun o42 () (Array Int us_rep))

(declare-fun o43 () num_delimiters_range)

(declare-fun o44 () us_split_fields2)

(declare-fun step_function_test__sfun2__assume () us_rep1)

(declare-fun o45 () float)

(declare-fun o46 () function_range)

(declare-fun o47 () us_split_fields)

(declare-fun o48 () float)

(declare-fun o49 () function_range)

(declare-fun o50 () us_split_fields)

(declare-fun o51 () float)

(declare-fun o52 () function_range)

(declare-fun o53 () us_split_fields)

(declare-fun o54 () float)

(declare-fun o55 () function_range)

(declare-fun o56 () us_split_fields)

(declare-fun o57 () float)

(declare-fun o58 () function_range)

(declare-fun o59 () us_split_fields)

(declare-fun o60 () float)

(declare-fun o61 () function_range)

(declare-fun o62 () us_split_fields)

(declare-fun o63 () float)

(declare-fun o64 () function_range)

(declare-fun o65 () us_split_fields)

(declare-fun o66 () us_rep)

(declare-fun o67 () us_rep)

(declare-fun o68 () us_rep)

(declare-fun o69 () us_rep)

(declare-fun o70 () us_rep)

(declare-fun o71 () us_rep)

(declare-fun o72 () us_rep)

(declare-fun o73 () (Array Int us_rep))

(declare-fun o74 () num_delimiters_range)

(declare-fun o75 () us_split_fields2)

(declare-fun step_function_test__sfun3__assume () us_rep1)

(declare-fun o76 () float)

(declare-fun o77 () function_range)

(declare-fun o78 () us_split_fields)

(declare-fun o79 () float)

(declare-fun o80 () function_range)

(declare-fun o81 () us_split_fields)

(declare-fun o82 () float)

(declare-fun o83 () function_range)

(declare-fun o84 () us_split_fields)

(declare-fun o85 () float)

(declare-fun o86 () function_range)

(declare-fun o87 () us_split_fields)

(declare-fun o88 () float)

(declare-fun o89 () function_range)

(declare-fun o90 () us_split_fields)

(declare-fun o91 () float)

(declare-fun o92 () function_range)

(declare-fun o93 () us_split_fields)

(declare-fun o94 () float)

(declare-fun o95 () function_range)

(declare-fun o96 () us_split_fields)

(declare-fun o97 () us_rep)

(declare-fun o98 () us_rep)

(declare-fun o99 () us_rep)

(declare-fun o100 () us_rep)

(declare-fun o101 () us_rep)

(declare-fun o102 () us_rep)

(declare-fun o103 () us_rep)

(declare-fun o104 () (Array Int us_rep))

(declare-fun o105 () num_delimiters_range)

(declare-fun o106 () us_split_fields2)

(declare-fun step_function_test__sfun4__assume () us_rep1)

(declare-fun o107 () Float32)

(declare-fun o108 () Float32)

(declare-fun o109 () Float32)

(declare-fun o110 () Float32)

(declare-fun o111 () Float32)

(declare-fun o112 () Float32)

(declare-fun o113 () Float32)

(declare-fun o114 () Float32)

(declare-fun o115 () Float32)

(declare-fun o116 () Float32)

(declare-fun o117 () Float32)

(declare-fun o118 () Float32)

(declare-fun o119 () Float32)

(declare-fun result () us_split_fields__ref1)

(declare-fun sfun1__split_fields2 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun sfun2__split_fields2 () us_split_fields2)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun sfun3__split_fields2 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun sfun4__split_fields2 () us_split_fields2)

(declare-fun sfun_merge__split_fields () us_split_fields2)

(declare-fun result4 () int__ref)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun i3 () int__ref)

(declare-fun i4 () Int)

(declare-fun i5 () int__ref)

(declare-fun i6 () Int)

(define-fun i7 () int__ref (mk_int__ref i))

;; H
  (assert (= (to_rep o12) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o13) 0))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert (= o16 o14))

;; H
  (assert (= o17 o15))

;; H
  (assert (= (to_rep o8) (fp #b0 #b10000001 #b01000000000000000000000)))

;; H
  (assert (= (to_rep2 o9) 5))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= o18 o10))

;; H
  (assert (= o19 o11))

;; H
  (assert (= (to_rep o4) (fp #b0 #b10000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o5) 3))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= o20 o6))

;; H
  (assert (= o21 o7))

;; H
  (assert (= (to_rep o) (fp #b0 #b10000000 #b10000000000000000000000)))

;; H
  (assert (= (to_rep2 o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o22 (mk___rep (mk___split_fields o2 o3))))

;; H
  (assert
  (= o23 (temp___274 o22 (mk___rep (mk___split_fields o20 o21))
         (mk___rep (mk___split_fields o18 o19))
         (mk___rep (mk___split_fields o16 o17)))))

;; H
  (assert (= (to_rep1 o24) 2))

;; H
  (assert (= o25 (mk___split_fields1 o24 o23)))

;; H
  (assert (= step_function_test__sfun1__assume (mk___rep1 o25)))

;; H
  (assert
  (= result (mk___split_fields__ref1
            (mk___split_fields1 sfun1__split_fields sfun1__split_fields1))))

;; H
  (assert
  (= sfun1__split_fields2 (us_split_fields3
                          step_function_test__sfun1__assume)))

;; H
  (assert (= (to_rep o35) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o36) 0))

;; H
  (assert (= o37 (mk___split_fields o36 o35)))

;; H
  (assert (= o38 (mk___rep o37)))

;; H
  (assert (= (to_rep o32) (fp #b0 #b10000000 #b10000000000000000000000)))

;; H
  (assert (= (to_rep2 o33) 5))

;; H
  (assert (= o34 (mk___split_fields o33 o32)))

;; H
  (assert (= o39 (mk___rep o34)))

;; H
  (assert (= (to_rep o29) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o30) 3))

;; H
  (assert (= o31 (mk___split_fields o30 o29)))

;; H
  (assert (= o40 (mk___rep o31)))

;; H
  (assert (= (to_rep o26) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o27) 0))

;; H
  (assert (= o28 (mk___split_fields o27 o26)))

;; H
  (assert (= o41 (mk___rep o28)))

;; H
  (assert (= o42 (temp___281 o41 o40 o39 o38)))

;; H
  (assert (= (to_rep1 o43) 2))

;; H
  (assert (= o44 (mk___split_fields1 o43 o42)))

;; H
  (assert (= step_function_test__sfun2__assume (mk___rep1 o44)))

;; H
  (assert
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1 sfun2__split_fields sfun2__split_fields1))))

;; H
  (assert
  (= sfun2__split_fields2 (us_split_fields3
                          step_function_test__sfun2__assume)))

;; H
  (assert (= (to_rep o63) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o64) 0))

;; H
  (assert (= o65 (mk___split_fields o64 o63)))

;; H
  (assert (= o66 (mk___rep o65)))

;; H
  (assert (= (to_rep o60) (fp #b0 #b10000010 #b00100000000000000000000)))

;; H
  (assert (= (to_rep2 o61) 9))

;; H
  (assert (= o62 (mk___split_fields o61 o60)))

;; H
  (assert (= o67 (mk___rep o62)))

;; H
  (assert (= (to_rep o57) (fp #b0 #b10000001 #b11000000000000000000000)))

;; H
  (assert (= (to_rep2 o58) 7))

;; H
  (assert (= o59 (mk___split_fields o58 o57)))

;; H
  (assert (= o68 (mk___rep o59)))

;; H
  (assert (= (to_rep o54) (fp #b0 #b10000001 #b01000000000000000000000)))

;; H
  (assert (= (to_rep2 o55) 5))

;; H
  (assert (= o56 (mk___split_fields o55 o54)))

;; H
  (assert (= o69 (mk___rep o56)))

;; H
  (assert (= (to_rep o51) (fp #b0 #b10000000 #b10000000000000000000000)))

;; H
  (assert (= (to_rep2 o52) 3))

;; H
  (assert (= o53 (mk___split_fields o52 o51)))

;; H
  (assert (= o70 (mk___rep o53)))

;; H
  (assert (= (to_rep o48) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o49) 1))

;; H
  (assert (= o50 (mk___split_fields o49 o48)))

;; H
  (assert (= o71 (mk___rep o50)))

;; H
  (assert (= (to_rep o45) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o46) 0))

;; H
  (assert (= o47 (mk___split_fields o46 o45)))

;; H
  (assert (= o72 (mk___rep o47)))

;; H
  (assert (= o73 (temp___288 o72 o71 o70 o69 o68 o67 o66)))

;; H
  (assert (= (to_rep1 o74) 5))

;; H
  (assert (= o75 (mk___split_fields1 o74 o73)))

;; H
  (assert (= step_function_test__sfun3__assume (mk___rep1 o75)))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 sfun3__split_fields sfun3__split_fields1))))

;; H
  (assert
  (= sfun3__split_fields2 (us_split_fields3
                          step_function_test__sfun3__assume)))

;; H
  (assert (= (to_rep o94) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o95) 0))

;; H
  (assert (= o96 (mk___split_fields o95 o94)))

;; H
  (assert (= o97 (mk___rep o96)))

;; H
  (assert (= (to_rep o91) (fp #b0 #b01111110 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o92) 10))

;; H
  (assert (= o93 (mk___split_fields o92 o91)))

;; H
  (assert (= o98 (mk___rep o93)))

;; H
  (assert (= (to_rep o88) (fp #b0 #b10000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o89) 8))

;; H
  (assert (= o90 (mk___split_fields o89 o88)))

;; H
  (assert (= o99 (mk___rep o90)))

;; H
  (assert (= (to_rep o85) (fp #b0 #b10000001 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o86) 6))

;; H
  (assert (= o87 (mk___split_fields o86 o85)))

;; H
  (assert (= o100 (mk___rep o87)))

;; H
  (assert (= (to_rep o82) (fp #b0 #b10000001 #b10000000000000000000000)))

;; H
  (assert (= (to_rep2 o83) 4))

;; H
  (assert (= o84 (mk___split_fields o83 o82)))

;; H
  (assert (= o101 (mk___rep o84)))

;; H
  (assert (= (to_rep o79) (fp #b0 #b10000010 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o80) 2))

;; H
  (assert (= o81 (mk___split_fields o80 o79)))

;; H
  (assert (= o102 (mk___rep o81)))

;; H
  (assert (= (to_rep o76) (fp #b0 #b10000010 #b01000000000000000000000)))

;; H
  (assert (= (to_rep2 o77) 0))

;; H
  (assert (= o78 (mk___split_fields o77 o76)))

;; H
  (assert (= o103 (mk___rep o78)))

;; H
  (assert (= o104 (temp___298 o103 o102 o101 o100 o99 o98 o97)))

;; H
  (assert (= (to_rep1 o105) 5))

;; H
  (assert (= o106 (mk___split_fields1 o105 o104)))

;; H
  (assert (= step_function_test__sfun4__assume (mk___rep1 o106)))

;; H
  (assert
  (= result3 (mk___split_fields__ref1
             (mk___split_fields1 sfun4__split_fields sfun4__split_fields1))))

;; H
  (assert
  (= sfun4__split_fields2 (us_split_fields3
                          step_function_test__sfun4__assume)))

;; H
  (assert (= (is_valid (mk___rep1 sfun1__split_fields2)) true))

;; H
  (assert (= (is_valid (mk___rep1 sfun2__split_fields2)) true))

;; H
  (assert (= (is_valid (mk___rep1 sfun3__split_fields2)) true))

;; H
  (assert (= (is_valid (mk___rep1 sfun4__split_fields2)) true))

(assert
;; WP_parameter_def
 ;; File "step_function_test.adb", line 4, characters 0-0
  (not
  (fp.eq (get_value (mk___rep1 sfun1__split_fields2) 0) (fp #b0 #b10000000 #b10000000000000000000000))))
(check-sat)
