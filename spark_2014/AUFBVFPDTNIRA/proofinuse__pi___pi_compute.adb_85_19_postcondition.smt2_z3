;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun t1 () Float32)

(declare-fun t2 () Float32)

(declare-fun t3 () Float32)

(declare-fun t4 () Float32)

(declare-fun t5 () Float32)

(declare-fun t6 () Float32)

(declare-fun t7 () Float32)

(declare-fun t8 () Float32)

(declare-fun t9 () Float32)

(declare-fun t10 () Float32)

(declare-fun a1 () Float32)

(declare-fun a2 () Float32)

(declare-fun a3 () Float32)

(declare-fun a4 () Float32)

(declare-fun a5 () Float32)

(declare-fun a6 () Float32)

(declare-fun a7 () Float32)

(declare-fun a8 () Float32)

(declare-fun a9 () Float32)

(declare-fun a10 () Float32)

(declare-fun num () Float32)

(declare-fun den () t__ref)

(declare-fun res () t__ref)

(declare-fun pi_compute__shanks_float__result () t__ref)

(declare-fun o () Float32)

(declare-fun o1 () Float32)

(declare-fun o2 () Float32)

(declare-fun o3 () Float32)

(declare-fun o4 () Float32)

(declare-fun o5 () Float32)

(declare-fun o6 () Float32)

(declare-fun o7 () Float32)

(declare-fun o8 () Float32)

(declare-fun o9 () Float32)

(declare-fun o10 () Float32)

(declare-fun o11 () Float32)

(declare-fun o12 () Float32)

(declare-fun o13 () Float32)

(declare-fun o14 () Float32)

(declare-fun o15 () Float32)

(declare-fun o16 () Float32)

(declare-fun o17 () Float32)

(declare-fun o18 () Float32)

(declare-fun o19 () Float32)

(declare-fun o20 () Float32)

(declare-fun result () t__ref)

(declare-fun t11 () Float32)

(declare-fun result1 () t__ref)

(declare-fun t21 () Float32)

(declare-fun result2 () t__ref)

(declare-fun t31 () Float32)

(declare-fun result3 () t__ref)

(declare-fun t41 () Float32)

(declare-fun result4 () t__ref)

(declare-fun t51 () Float32)

(declare-fun result5 () t__ref)

(declare-fun t61 () Float32)

(declare-fun result6 () t__ref)

(declare-fun t71 () Float32)

(declare-fun result7 () t__ref)

(declare-fun t81 () Float32)

(declare-fun result8 () t__ref)

(declare-fun t91 () Float32)

(declare-fun result9 () t__ref)

(declare-fun t101 () Float32)

(declare-fun result10 () t__ref)

(declare-fun a11 () Float32)

(declare-fun result11 () t__ref)

(declare-fun a21 () Float32)

(declare-fun result12 () t__ref)

(declare-fun a31 () Float32)

(declare-fun result13 () t__ref)

(declare-fun a41 () Float32)

(declare-fun result14 () t__ref)

(declare-fun a51 () Float32)

(declare-fun result15 () t__ref)

(declare-fun a61 () Float32)

(declare-fun result16 () t__ref)

(declare-fun a71 () Float32)

(declare-fun result17 () t__ref)

(declare-fun a81 () Float32)

(declare-fun result18 () t__ref)

(declare-fun a91 () Float32)

(declare-fun result19 () t__ref)

(declare-fun a101 () Float32)

(declare-fun result20 () t__ref)

(declare-fun num1 () Float32)

(declare-fun result21 () t__ref)

(declare-fun den1 () Float32)

(declare-fun result22 () t__ref)

(declare-fun res1 () Float32)

(declare-fun result23 () t__ref)

(declare-fun pi_compute__shanks_float__result1 () Float32)

(declare-fun pi_compute__shanks_float__result2 () t__ref)

(declare-fun pi_compute__shanks_float__result3 () Float32)

(declare-fun t12 () t__ref)

(declare-fun t22 () t__ref)

(declare-fun t32 () t__ref)

(declare-fun t42 () t__ref)

(declare-fun t52 () t__ref)

(declare-fun t62 () t__ref)

(declare-fun t72 () t__ref)

(declare-fun t82 () t__ref)

(declare-fun t92 () t__ref)

(declare-fun t102 () t__ref)

(declare-fun a12 () t__ref)

(declare-fun a22 () t__ref)

(declare-fun a32 () t__ref)

(declare-fun a42 () t__ref)

(declare-fun a52 () t__ref)

(declare-fun a62 () t__ref)

(declare-fun a72 () t__ref)

(declare-fun a82 () t__ref)

(declare-fun a92 () t__ref)

(declare-fun a102 () t__ref)

(declare-fun num2 () t__ref)

(declare-fun den2 () t__ref)

(declare-fun res2 () t__ref)

(declare-fun pi_compute__shanks_float__result4 () t__ref)

(declare-fun t13 () Float32)

(declare-fun t23 () Float32)

(declare-fun t33 () Float32)

(declare-fun t43 () Float32)

(declare-fun t53 () Float32)

(declare-fun t63 () Float32)

(declare-fun t73 () Float32)

(declare-fun t83 () Float32)

(declare-fun t93 () Float32)

(declare-fun t103 () Float32)

(declare-fun a13 () Float32)

(declare-fun a23 () Float32)

(declare-fun a33 () Float32)

(declare-fun a43 () Float32)

(declare-fun a53 () Float32)

(declare-fun a63 () Float32)

(declare-fun a73 () Float32)

(declare-fun a83 () Float32)

(declare-fun a93 () Float32)

(declare-fun a103 () Float32)

(declare-fun num3 () Float32)

(declare-fun den3 () Float32)

(declare-fun res3 () Float32)

(declare-fun pi_compute__shanks_float__result5 () Float32)

(define-fun num4 () t__ref (mk_t__ref num))

(define-fun a104 () t__ref (mk_t__ref a10))

(define-fun a94 () t__ref (mk_t__ref a9))

(define-fun a84 () t__ref (mk_t__ref a8))

(define-fun a74 () t__ref (mk_t__ref a7))

(define-fun a64 () t__ref (mk_t__ref a6))

(define-fun a54 () t__ref (mk_t__ref a5))

(define-fun a44 () t__ref (mk_t__ref a4))

(define-fun a34 () t__ref (mk_t__ref a3))

(define-fun a24 () t__ref (mk_t__ref a2))

(define-fun a14 () t__ref (mk_t__ref a1))

(define-fun t104 () t__ref (mk_t__ref t10))

(define-fun t94 () t__ref (mk_t__ref t9))

(define-fun t84 () t__ref (mk_t__ref t8))

(define-fun t74 () t__ref (mk_t__ref t7))

(define-fun t64 () t__ref (mk_t__ref t6))

(define-fun t54 () t__ref (mk_t__ref t5))

(define-fun t44 () t__ref (mk_t__ref t4))

(define-fun t34 () t__ref (mk_t__ref t3))

(define-fun t24 () t__ref (mk_t__ref t2))

(define-fun t14 () t__ref (mk_t__ref t1))

(declare-fun result24 () Float32)

;; H
  (assert
  (and
  (and
  (and (= result t14) (= t11 (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (not (or (fp.isInfinite t11) (fp.isNaN t11)))
  (and
  (and (= result1 t24) (= t21 (fp #b0 #b01111101 #b01010101010101010101011)))
  (and (not (or (fp.isInfinite t21) (fp.isNaN t21)))
  (and
  (and (= result2 t34) (= t31 (fp #b0 #b01111100 #b10011001100110011001101)))
  (and (not (or (fp.isInfinite t31) (fp.isNaN t31)))
  (and
  (and (= result3 t44) (= t41 (fp #b0 #b01111100 #b00100100100100100100101)))
  (and (not (or (fp.isInfinite t41) (fp.isNaN t41)))
  (and
  (and (= result4 t54) (= t51 (fp #b0 #b01111011 #b11000111000111000111001)))
  (and (not (or (fp.isInfinite t51) (fp.isNaN t51)))
  (and
  (and (= result5 t64) (= t61 (fp #b0 #b01111011 #b01110100010111010001100)))
  (and (not (or (fp.isInfinite t61) (fp.isNaN t61)))
  (and
  (and (= result6 t74) (= t71 (fp #b0 #b01111011 #b00111011000100111011001)))
  (and (not (or (fp.isInfinite t71) (fp.isNaN t71)))
  (and
  (and (= result7 t84) (= t81 (fp #b0 #b01111011 #b00010001000100010001001)))
  (and (not (or (fp.isInfinite t81) (fp.isNaN t81)))
  (and
  (and (= result8 t94) (= t91 (fp #b0 #b01111010 #b11100001111000011110001)))
  (and (not (or (fp.isInfinite t91) (fp.isNaN t91)))
  (and
  (and (= result9 t104)
  (= t101 (fp #b0 #b01111010 #b10101111001010000110110)))
  (and (not (or (fp.isInfinite t101) (fp.isNaN t101)))
  (and (and (= result10 a14) (= a11 t11))
  (and (not (or (fp.isInfinite a11) (fp.isNaN a11)))
  (and
  (and
  (and (= o (fp.sub RNE a11 t21))
  (not (or (fp.isInfinite (fp.sub RNE a11 t21)) (fp.isNaN (fp.sub RNE
  a11 t21))))) (and (= result11 a24) (= a21 o)))
  (and (not (or (fp.isInfinite a21) (fp.isNaN a21)))
  (and
  (and
  (and (= o1 (fp.add RNE a21 t31))
  (not (or (fp.isInfinite (fp.add RNE a21 t31)) (fp.isNaN (fp.add RNE
  a21 t31))))) (and (= result12 a34) (= a31 o1)))
  (and (not (or (fp.isInfinite a31) (fp.isNaN a31)))
  (and
  (and
  (and (= o2 (fp.sub RNE a31 t41))
  (not (or (fp.isInfinite (fp.sub RNE a31 t41)) (fp.isNaN (fp.sub RNE
  a31 t41))))) (and (= result13 a44) (= a41 o2)))
  (and (not (or (fp.isInfinite a41) (fp.isNaN a41)))
  (and
  (and
  (and (= o3 (fp.add RNE a41 t51))
  (not (or (fp.isInfinite (fp.add RNE a41 t51)) (fp.isNaN (fp.add RNE
  a41 t51))))) (and (= result14 a54) (= a51 o3)))
  (and (not (or (fp.isInfinite a51) (fp.isNaN a51)))
  (and
  (and
  (and (= o4 (fp.sub RNE a51 t61))
  (not (or (fp.isInfinite (fp.sub RNE a51 t61)) (fp.isNaN (fp.sub RNE
  a51 t61))))) (and (= result15 a64) (= a61 o4)))
  (and (not (or (fp.isInfinite a61) (fp.isNaN a61)))
  (and
  (and
  (and (= o5 (fp.add RNE a61 t71))
  (not (or (fp.isInfinite (fp.add RNE a61 t71)) (fp.isNaN (fp.add RNE
  a61 t71))))) (and (= result16 a74) (= a71 o5)))
  (and (not (or (fp.isInfinite a71) (fp.isNaN a71)))
  (and
  (and
  (and (= o6 (fp.sub RNE a71 t81))
  (not (or (fp.isInfinite (fp.sub RNE a71 t81)) (fp.isNaN (fp.sub RNE
  a71 t81))))) (and (= result17 a84) (= a81 o6)))
  (and (not (or (fp.isInfinite a81) (fp.isNaN a81)))
  (and
  (and
  (and (= o7 (fp.add RNE a81 t91))
  (not (or (fp.isInfinite (fp.add RNE a81 t91)) (fp.isNaN (fp.add RNE
  a81 t91))))) (and (= result18 a94) (= a91 o7)))
  (and (not (or (fp.isInfinite a91) (fp.isNaN a91)))
  (and
  (and
  (and (= o8 (fp.sub RNE a91 t101))
  (not (or (fp.isInfinite (fp.sub RNE a91 t101)) (fp.isNaN (fp.sub RNE
  a91 t101))))) (and (= result19 a104) (= a101 o8)))
  (and (not (or (fp.isInfinite a101) (fp.isNaN a101)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o9 (fp.mul RNE a91 a91))
  (not (or (fp.isInfinite (fp.mul RNE a91 a91)) (fp.isNaN (fp.mul RNE
  a91 a91)))))
  (and
  (and (= o10 (fp.mul RNE a101 a81))
  (not (or (fp.isInfinite (fp.mul RNE a101 a81)) (fp.isNaN (fp.mul RNE
  a101 a81))))) (= o11 (fp.sub RNE o10 o9))))
  (and (= o12 o11) (not (or (fp.isInfinite o11) (fp.isNaN o11)))))
  (= o13 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) o12)))
  (and (= o14 o13) (not (or (fp.isInfinite o13) (fp.isNaN o13)))))
  (and (= result20 num4) (= num1 o14)))
  (and (not (or (fp.isInfinite num1) (fp.isNaN num1)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= o15 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  a91))
  (not (or (fp.isInfinite (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  a91)) (fp.isNaN (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  a91))))) (= o16 (fp.sub RNE a101 o15)))
  (and (= o17 o16) (not (or (fp.isInfinite o16) (fp.isNaN o16)))))
  (= o18 (fp.add RNE o17 a81)))
  (and (= o19 o18) (not (or (fp.isInfinite o18) (fp.isNaN o18)))))
  (and (= result21 den) (= (let ((subject den)) den1) o19)))
  (and
  (not (or (fp.isInfinite (let ((subject den)) den1)) (fp.isNaN (let ((subject
                                                                den))
                                                                den1))))
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite (t__content res)) (fp.isNaN (t__content res)))))
  (and
  (and
  (and (= o20 (fp.div RNE num1 (let ((subject den)) den1)))
  (not (or (fp.isInfinite (fp.div RNE num1 (let ((subject den)) den1))) (fp.isNaN (fp.div RNE
  num1 (let ((subject den)) den1))))))
  (and (= result22 res) (= (let ((subject res)) res1) o20)))
  (and
  (fp.eq (let ((subject res)) res1) (fp #b0 #b10000000 #b10010010000101001010011))
  (and
  (and
  (= pi_compute__shanks_float__result2 (let ((subject pi_compute__shanks_float__result))
                                       (mk_t__ref
                                       pi_compute__shanks_float__result1)))
  (= pi_compute__shanks_float__result3 pi_compute__shanks_float__result1))
  (and (= result23 pi_compute__shanks_float__result)
  (= (let ((subject pi_compute__shanks_float__result))
     pi_compute__shanks_float__result1) (let ((subject res)) res1)))))))))))))))))))))))))))))))))))))))))))))))))))
  (and
  (and
  (= pi_compute__shanks_float__result4 pi_compute__shanks_float__result2)
  (and (= res2 (let ((subject res)) (mk_t__ref res1)))
  (and (= den2 (let ((subject den)) (mk_t__ref den1)))
  (and (= num2 (mk_t__ref num1))
  (and (= a102 (mk_t__ref a101))
  (and (= a92 (mk_t__ref a91))
  (and (= a82 (mk_t__ref a81))
  (and (= a72 (mk_t__ref a71))
  (and (= a62 (mk_t__ref a61))
  (and (= a52 (mk_t__ref a51))
  (and (= a42 (mk_t__ref a41))
  (and (= a32 (mk_t__ref a31))
  (and (= a22 (mk_t__ref a21))
  (and (= a12 (mk_t__ref a11))
  (and (= t102 (mk_t__ref t101))
  (and (= t92 (mk_t__ref t91))
  (and (= t82 (mk_t__ref t81))
  (and (= t72 (mk_t__ref t71))
  (and (= t62 (mk_t__ref t61))
  (and (= t52 (mk_t__ref t51))
  (and (= t42 (mk_t__ref t41))
  (and (= t32 (mk_t__ref t31))
  (and (= t22 (mk_t__ref t21)) (= t12 (mk_t__ref t11)))))))))))))))))))))))))
  (and
  (= pi_compute__shanks_float__result5 pi_compute__shanks_float__result3)
  (and (= res3 res1)
  (and (= den3 den1)
  (and (= num3 num1)
  (and (= a103 a101)
  (and (= a93 a91)
  (and (= a83 a81)
  (and (= a73 a71)
  (and (= a63 a61)
  (and (= a53 a51)
  (and (= a43 a41)
  (and (= a33 a31)
  (and (= a23 a21)
  (and (= a13 a11)
  (and (= t103 t101)
  (and (= t93 t91)
  (and (= t83 t81)
  (and (= t73 t71)
  (and (= t63 t61)
  (and (= t53 t51)
  (and (= t43 t41) (and (= t33 t31) (and (= t23 t21) (= t13 t11)))))))))))))))))))))))))))

;; H
  (assert (= result24 (t__content pi_compute__shanks_float__result4)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (fp.eq (t__content pi_compute__shanks_float__result4) (fp #b0 #b10000000 #b10010010000101001010011))))
(check-sat)
(exit)
