;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes ((mode 0)) (((RNE1) (RNA1) (RTP1) (RTN1) (RTZ1))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE1) (= m RNA1)))

(declare-const zeroF t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-const max_int Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN1 (- x)) (- (round RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP1 (- x)) (- (round RTN1 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; eq_special
  (assert
  (forall ((x t) (y t))
  (=> (eq x y)
  (and (is_not_nan x)
  (and (is_not_nan y)
  (or (and (tqtisFinite x) (tqtisFinite y))
  (and (is_infinite x) (and (is_infinite y) (same_sign x y)))))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; le_special
  (assert
  (forall ((x t) (y t))
  (! (=> (le x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or (and (is_minus_infinity x) (is_not_nan y))
     (and (is_not_nan x) (is_plus_infinity y))))) :pattern ((le
  x y)) )))

;; lt_special
  (assert
  (forall ((x t) (y t))
  (! (=> (lt x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or
     (and (is_minus_infinity x)
     (and (is_not_nan y) (not (is_minus_infinity y))))
     (and (is_not_nan x)
     (and (not (is_plus_infinity x)) (is_plus_infinity y)))))) :pattern ((lt
  x y)) )))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN1 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP1 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RTZ1 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RNA1 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN1 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (tqtisFinite z)
     (=> (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (and (tqtisFinite (fma m x y z))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; Sqrt_positive
  (assert (forall ((x Real)) (=> (<= 0.0 x) (<= 0.0 (sqrt1 x)))))

;; Sqrt_square
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqr (sqrt1 x)) x))))

;; Square_sqrt
  (assert (forall ((x Real)) (=> (<= 0.0 x) (= (sqrt1 (* x x)) x))))

;; Sqrt_mul
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= 0.0 y))
  (= (sqrt1 (* x y)) (* (sqrt1 x) (sqrt1 y))))))

;; Sqrt_le
  (assert
  (forall ((x Real) (y Real))
  (=> (and (<= 0.0 x) (<= x y)) (<= (sqrt1 x) (sqrt1 y)))))

;; sqrt_finite
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite x)
     (=> (<= 0.0 (tqtreal x))
     (and (tqtisFinite (sqrt m x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; add_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (add m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (same_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y))) (is_nan
     r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (+ (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (+ (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (same_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (add m x y)) )))

;; sub_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (sub m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (diff_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y))) (is_nan
     r))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (- (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (- (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (diff_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (sub m x y)) )))

;; mul_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (mul m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (and (is_infinite y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=> (and (is_infinite x) (and (tqtisFinite y) (not (is_zero y))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_infinite r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (* (tqtreal x) (tqtreal y))))))
     (overflow_value m r)) (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern (
  (mul m x y)) )))

;; div_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (div1 m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (tqtisFinite x) (is_infinite y)) (is_zero r))
     (and (=> (and (is_infinite x) (tqtisFinite y)) (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (not (is_zero y))
     (not (no_overflow m (/ (tqtreal x) (tqtreal y))))))) (overflow_value m
     r))
     (and
     (=> (and (tqtisFinite x) (and (is_zero y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_zero x) (is_zero y)) (is_nan r))
     (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern ((div1 m x
                                                                  y)) )))

;; neg_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (neg x)))
     (and (=> (is_infinite x) (is_infinite (neg x)))
     (=> (not (is_nan x)) (diff_sign x (neg x))))) :pattern ((neg x)) )))

;; abs_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (abs1 x)))
     (and (=> (is_infinite x) (is_infinite (abs1 x)))
     (=> (not (is_nan x)) (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; fma_special
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (let ((r (fma m x y z)))
     (and (=> (or (is_nan x) (or (is_nan y) (is_nan z))) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (tqtisFinite z)))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (is_infinite z)))
     (and (is_infinite r) (same_sign r z)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (is_infinite z)))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (tqtisFinite z)
     (not (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))))))
     (and (same_sign_real r (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (overflow_value m r)))
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))
     (ite (product_sign z x y) (same_sign r z)
     (=> (= (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)) 0.0)
     (ite (= m RTN1) (is_negative r) (is_positive r))))))))))))))))) :pattern (
  (fma m x y z)) )))

;; sqrt_special
  (assert
  (forall ((m mode) (x t))
  (! (let ((r (sqrt m x)))
     (and (=> (is_nan x) (is_nan r))
     (and (=> (is_plus_infinity x) (is_plus_infinity r))
     (and (=> (is_minus_infinity x) (is_nan r))
     (and (=> (and (tqtisFinite x) (< (tqtreal x) 0.0)) (is_nan r))
     (and (=> (is_zero x) (same_sign r x))
     (=> (and (tqtisFinite x) (< 0.0 (tqtreal x))) (is_positive r)))))))) :pattern (
  (sqrt m x)) )))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP1 x)) (to_real (- 1 (to_int (- 1.0
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN1 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN1 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (=> (is_positive x) (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))
     (round RNE1 x))
     (<= (round RNE1 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE1 x)) )))

;; round_bound
  (assert
  (forall ((m mode) (x Real))
  (! (=> (no_overflow m x)
     (and
     (<= (- (- x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))
     (round m x))
     (<= (round m x) (+ (+ x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))))) :pattern (
  (round m x)) )))

(define-fun neq ((x t) (y t)) Bool (not (eq x y)))

(define-fun bool_lt ((x t) (y t)) Bool (ite (lt x y) true false))

(define-fun bool_le ((x t) (y t)) Bool (ite (le x y) true false))

(define-fun bool_gt ((x t) (y t)) Bool (ite (lt y x) true false))

(define-fun bool_ge ((x t) (y t)) Bool (ite (le y x) true false))

(define-fun bool_eq ((x t) (y t)) Bool (ite (eq x y) true false))

(define-fun bool_neq ((x t) (y t)) Bool (ite (not (eq x y)) true false))

(declare-fun rem (t t) t)

(declare-const fliteral t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) 1.0)))

;; one_is_int
  (assert (is_int1 fliteral))

;; one_of_int
  (assert (= fliteral (of_int RNA1 1)))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content t)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(define-fun bool_eq1 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) t)

(declare-const dummy float)

(declare-datatypes ((float__ref 0))
(((mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-const fliteral1 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral1)
  (= (tqtreal fliteral1) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_51)))

(declare-sort positive_float 0)

(declare-const fliteral2 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral2) (= (tqtreal fliteral2) (/ 0.0 10.0))))

(define-fun in_range2 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral2 x) (le x fliteral1))))

(define-fun bool_eq2 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq1 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t)

(declare-const dummy1 positive_float)

(declare-datatypes ((positive_float__ref 0))
(((mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(define-fun dynamic_invariant1 ((temp___expr_140 t) (temp___is_init_137 Bool)
  (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true) (le
                                      fliteral2 fliteral1)) (in_range2
                                      temp___expr_140)))

(declare-sort nonnegative_float 0)

(define-fun in_range3 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral2 x) (le x fliteral1))))

(define-fun bool_eq3 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq2 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) t)

(declare-const dummy2 nonnegative_float)

(declare-datatypes ((nonnegative_float__ref 0))
(((mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(declare-fun to_rep (nonnegative_float) t)

(declare-fun of_rep (t) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range3
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun cos1 (t) t)

(declare-fun cos__function_guard (t t) Bool)

;; cos__post_axiom
  (assert
  (forall ((x t))
  (! (=> (dynamic_invariant x true true true)
     (let ((result (cos1 x)))
     (and
     (and (and (le (neg fliteral) result) (le result fliteral))
     (=> (eq x fliteral2) (eq result fliteral))) (dynamic_invariant result
     true false true)))) :pattern ((cos1 x)) )))

(declare-sort normalized2pi 0)

(declare-const fliteral3 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral3)
  (= (tqtreal fliteral3) (/ 6283185482025146484375.0 1000000000000000000000.0))))

(define-fun in_range4 ((x t)) Bool (and (tqtisFinite x)
                                   (and (le fliteral2 x) (le x fliteral3))))

(define-fun bool_eq4 ((x t) (y t)) Bool (ite (eq x y) true false))

(declare-fun user_eq3 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) t)

(declare-const dummy3 normalized2pi)

(declare-datatypes ((normalized2pi__ref 0))
(((mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep1 (normalized2pi) t)

(declare-fun of_rep1 (t) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const spaces__angles__angle__theta__first__bit Int)

(declare-const spaces__angles__angle__theta__last__bit Int)

(declare-const spaces__angles__angle__theta__position Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((angle__ref 0))
(((mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(declare-fun ccwdiff (us_rep us_rep) t)

(declare-fun ccwdiff__function_guard (t us_rep us_rep) Bool)

(declare-fun to_rep2 (float) t)

(declare-fun of_rep2 (t) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (tqtisFinite (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                (of_rep2 x))) )))

(declare-sort idir_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (idir_t idir_t) Bool)

(declare-const dummy5 idir_t)

(declare-datatypes ((idir_t__ref 0))
(((mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content
                                                              a))

(declare-fun to_rep3 (idir_t) Int)

(declare-fun of_rep3 (Int) idir_t)

;; inversion_axiom
  (assert
  (forall ((x idir_t))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x idir_t)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__gaps__gap__bearing us_rep)(rec__gaps__gap__distance float)(rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields2)) us_rep
  (rec__gaps__gap__bearing a))

(define-fun us_split_fields_iDir__projection ((a us_split_fields2)) idir_t
  (rec__gaps__gap__idir a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq6 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq5
                            (rec__gaps__gap__bearing (us_split_fields3 a))
                            (rec__gaps__gap__bearing (us_split_fields3 b))) true)
                         (= (to_rep2
                            (rec__gaps__gap__distance (us_split_fields3 a)))
                         (to_rep2
                         (rec__gaps__gap__distance (us_split_fields3 b)))))
                         (= (to_rep3
                            (rec__gaps__gap__idir (us_split_fields3 a)))
                         (to_rep3
                         (rec__gaps__gap__idir (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const gaps__gap__bearing__first__bit Int)

(declare-const gaps__gap__bearing__last__bit Int)

(declare-const gaps__gap__bearing__position Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-const gaps__gap__distance__first__bit Int)

(declare-const gaps__gap__distance__last__bit Int)

(declare-const gaps__gap__distance__position Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-const gaps__gap__idir__first__bit Int)

(declare-const gaps__gap__idir__last__bit Int)

(declare-const gaps__gap__idir__position Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((gap__ref 0)) (((mk_gap__ref (gap__content us_rep1)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep1 (gap__content a))

(declare-fun create__2 (us_rep t Int) us_rep1)

(declare-fun create__2__function_guard (us_rep1 us_rep t Int) Bool)

(declare-sort count_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (count_type count_type) Bool)

(declare-const dummy7 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep4 (count_type) Int)

(declare-fun of_rep4 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields4)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___13__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                                  a))

(define-fun us_rep___14__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun bool_eq7 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep4
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs1 a))) (to_rep4
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields5 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__position Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes ((list__ref 0))
(((mk_list__ref (list__content us_rep2)))))
(define-fun list__ref___projection ((a list__ref)) us_rep2 (list__content a))

(declare-fun length (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(define-fun dynamic_invariant2 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_324)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep4
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant2 result true false true))) :pattern ((length
                                                             container)) )))

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content us_rep1)))))
(define-fun element_type__ref___projection ((a element_type__ref)) us_rep1
  (element_type__content a))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3 (rec__algorithm__gap_vectors__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields6)) count_type
  (rec__algorithm__gap_vectors__cursor__node a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___15__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                   a))

(define-fun bool_eq8 ((a us_rep3)
  (b us_rep3)) Bool (ite (= (to_rep4
                            (rec__algorithm__gap_vectors__cursor__node
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__algorithm__gap_vectors__cursor__node
                                                   (us_split_fields7 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-const algorithm__gap_vectors__cursor__node__first__bit Int)

(declare-const algorithm__gap_vectors__cursor__node__last__bit Int)

(declare-const algorithm__gap_vectors__cursor__node__position Int)

;; algorithm__gap_vectors__cursor__node__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__first__bit))

;; algorithm__gap_vectors__cursor__node__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__cursor__node__first__bit algorithm__gap_vectors__cursor__node__last__bit))

;; algorithm__gap_vectors__cursor__node__position_axiom
  (assert (<= 0 algorithm__gap_vectors__cursor__node__position))

(declare-fun user_eq9 (us_rep3 us_rep3) Bool)

(declare-const dummy9 us_rep3)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep3)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep3 (cursor__content
                                                               a))

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 us_rep1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) us_rep1
  (element_type__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq9 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq10 (us_rep4 us_rep4) Bool)

(declare-const dummy10 us_rep4)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep4)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep4 (sequence__content
                                                                   a))

(declare-fun get (us_rep4 Int) us_rep1)

(declare-fun get__function_guard (us_rep1 us_rep4 Int) Bool)

(declare-fun length1 (us_rep4) Int)

(declare-fun length__function_guard1 (Int us_rep4) Bool)

(define-fun last ((container us_rep4)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep4) Bool)

(define-fun ole ((left us_rep4)
  (right us_rep4)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (bool_eq6
                                                                    (get left
                                                                    n)
                                                                    (get
                                                                    right n)) true)))
                                                                 true false)))

(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep5 0)

(declare-fun bool_eq10 (us_rep5 us_rep5) Bool)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep5) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-const dummy11 us_rep5)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content us_rep5)))))
(define-fun map__ref___projection ((a map__ref)) us_rep5 (map__content a))

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content us_rep3)))))
(define-fun key_type__ref___projection ((a key_type__ref)) us_rep3 (key_type__content
                                                                   a))

(declare-fun get1 (us_rep5 us_rep3) Int)

(declare-fun get__function_guard1 (Int us_rep5 us_rep3) Bool)

(declare-fun ole1 (us_rep5 us_rep5) Bool)

(declare-fun ole__function_guard1 (Bool us_rep5 us_rep5) Bool)

(declare-fun keys_included_except (us_rep5 us_rep5 us_rep3) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep5 us_rep5
  us_rep3) Bool)

(declare-fun model__ (us_rep2) us_rep4)

(declare-fun model____function_guard (us_rep4 us_rep2) Bool)

(declare-fun positions (us_rep2) us_rep5)

(declare-fun positions__function_guard (us_rep5 us_rep2) Bool)

(declare-fun last1 (us_rep2) us_rep3)

(declare-fun last__function_guard1 (us_rep3 us_rep2) Bool)

(define-fun in_range7 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep2)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep4
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs1
                                                                    a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__position1 Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((list__ref1 0))
(((mk_list__ref1 (list__content1 us_rep2)))))
(define-fun list__ref___2__projection ((a list__ref1)) us_rep2 (list__content1
                                                               a))

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun dynamic_invariant3 ((temp___expr_577 us_rep2)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range7 1000 temp___expr_577)))

(define-fun default_initial_assumption ((temp___expr_579 us_rep2)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep4
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs1
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4
  (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields8)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep6 0))
(((mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___16__projection ((a us_rep6)) us_split_fields8 (us_split_fields9
                                                                   a))

(define-fun bool_eq11 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (to_rep
                            (rec__algorithm__laser_scan_data__first
                            (us_split_fields9 a))) (to_rep
                                                   (rec__algorithm__laser_scan_data__first
                                                   (us_split_fields9 b))))
                         (= (bool_eq5
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields9 a))
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep6) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment7 a))))

(declare-const algorithm__laser_scan_data__first__first__bit Int)

(declare-const algorithm__laser_scan_data__first__last__bit Int)

(declare-const algorithm__laser_scan_data__first__position Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-const algorithm__laser_scan_data__second__first__bit Int)

(declare-const algorithm__laser_scan_data__second__last__bit Int)

(declare-const algorithm__laser_scan_data__second__position Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun user_eq13 (us_rep6 us_rep6) Bool)

(declare-const dummy13 us_rep6)

(declare-datatypes ((laser_scan_data__ref 0))
(((mk_laser_scan_data__ref (laser_scan_data__content us_rep6)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep6
  (laser_scan_data__content a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int us_rep6))))))
(declare-fun slide ((Array Int us_rep6) Int Int) (Array Int us_rep6))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep6)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep6)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep6) Int Int (Array Int us_rep6) Int
  Int) (Array Int us_rep6))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep6 Int) (Array Int us_rep6))

;; singleton_def
  (assert
  (forall ((v us_rep6))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq12 ((a (Array Int us_rep6)) (a__first Int) (a__last Int)
  (b (Array Int us_rep6)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq11 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep6)) (b (Array Int us_rep6)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq11 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const gapvec__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const laserscan (Array Int us_rep6))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const robotradius t)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const mingapwidth t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const fmaxrange t)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const dist t)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort t27b 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 2 x) (<= x 999)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (t27b t27b) Bool)

(declare-const dummy14 t27b)

(declare-datatypes ((t27b__ref 0)) (((mk_t27b__ref (t27b__content t27b)))))
(define-fun t27b__ref___projection ((a t27b__ref)) t27b (t27b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const dist1 t)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const dist2 t)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant4 ((temp___expr_146 t) (temp___is_init_143 Bool)
  (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true) (le
                                      fliteral2 fliteral1)) (in_range3
                                      temp___expr_146)))

(define-fun dynamic_invariant5 ((temp___expr_170 t) (temp___is_init_167 Bool)
  (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true) (le
                                      fliteral2 fliteral3)) (in_range4
                                      temp___expr_170)))

(define-fun dynamic_invariant6 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range5
                                      temp___expr_286)))

(define-fun default_initial_assumption1 ((temp___expr_413 us_rep3)
  (temp___skip_top_level_414 Bool)) Bool (= (to_rep4
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields7
                                            temp___expr_413))) 0))

(declare-const no_element us_rep3)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep3 (mk___split_fields3 (of_rep4 0)))))

(define-fun oeq ((left us_rep4)
  (right us_rep4)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq6
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_449 us_rep4)
  (temp___skip_top_level_450 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_450 true))
                                         (= (length1 temp___expr_449) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-fun length2 (us_rep5) Int)

(declare-fun length__function_guard2 (Int us_rep5) Bool)

(declare-fun is_empty1 (us_rep5) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep5) Bool)

(define-fun default_initial_assumption3 ((temp___expr_468 us_rep5)
  (temp___skip_top_level_469 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_469 true))
                                         (and
                                         (= (is_empty1 temp___expr_468) true)
                                         (= (length2 temp___expr_468) 0))))

(declare-fun has_key (us_rep5 us_rep3) Bool)

(declare-fun has_key__function_guard (Bool us_rep5 us_rep3) Bool)

(define-fun default_initial_assumption4 ((temp___expr_456 us_rep3)
  (temp___skip_top_level_457 Bool)) Bool (= (to_rep4
                                            (rec__algorithm__gap_vectors__cursor__node
                                            (us_split_fields7
                                            temp___expr_456))) 0))

;; positions__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep3))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep3))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq8 i j) true))))))))) :pattern (
  (positions container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(define-fun has_element ((container us_rep2)
  (position us_rep3)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep2 us_rep3) Bool)

;; last__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (last1 container)))
     (ite (= (length container) 0) (= (bool_eq8 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (length container))))) :pattern (
  (last1 container)) )))

(declare-sort extended_index 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq15 (extended_index extended_index) Bool)

(declare-const dummy15 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant7 ((temp___expr_442 Int)
  (temp___is_init_439 Bool) (temp___skip_constant_440 Bool)
  (temp___do_toplevel_441 Bool)) Bool (=>
                                      (or (= temp___is_init_439 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_442)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length1 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (of_int1 0) true)
     (=>
     (exists ((k us_rep3))
     (and (= (has_key container k) true) (= (bool_eq8 k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-sort element_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq16 (element_type element_type) Bool)

(declare-const dummy16 element_type)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref2)) element_type
  (element_type__content2 a))

(define-fun dynamic_invariant8 ((temp___expr_461 Int)
  (temp___is_init_458 Bool) (temp___skip_constant_459 Bool)
  (temp___do_toplevel_460 Bool)) Bool (=>
                                      (or (= temp___is_init_458 true)
                                      (<= 1 2147483647)) (in_range10
                                      temp___expr_461)))

(declare-fun witness (us_rep5 us_rep3) Int)

(declare-fun witness__function_guard (Int us_rep5 us_rep3) Bool)

(declare-fun w_get (us_rep5 Int) Int)

(declare-fun w_get__function_guard (Int us_rep5 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int1 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep3))
     (=> (= (has_key container k) true)
     (= (= (bool_eq8 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant8 result true false true)))) :pattern ((get1 container
                                                              key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep5)) (! (dynamic_invariant2 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (ole1 left right) true)
     (forall ((key us_rep3))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))) :pattern (
  (ole1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty1 container) true)
     (forall ((key us_rep3)) (not (= (has_key container key) true)))) :pattern (
  (is_empty1 container)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((new_key us_rep3))
  (! (= (= (keys_included_except left right new_key) true)
     (forall ((key us_rep3))
     (=> (= (has_key left key) true)
     (=> (not (= (bool_eq8 key new_key) true)) (= (has_key right key) true))))) :pattern (
  (keys_included_except left right new_key)) ))))

(declare-fun has_witness (us_rep5 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key us_rep3))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant2 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant8
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-const fliteral4 t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral4) (= (tqtreal fliteral4) 2.0)))

(declare-const i Int)

(declare-const temp___820 nonnegative_float)

(declare-const temp___8201 normalized2pi)

(declare-const temp___819 nonnegative_float)

(declare-const temp___8191 normalized2pi)

(declare-const temp___818 us_rep2)

(declare-const temp___817 Int)

(declare-const algorithm__buildgapvector__B_9__dist__assume t)

(declare-const o us_rep1)

(declare-const o1 us_rep1)

(declare-const o2 t)

(declare-const o3 t)

(declare-const rayr__split_fields us_split_fields8)

(declare-const rayl__split_fields us_split_fields8)

(declare-const gapvec__split_fields us_split_fields4)

(declare-const result int__ref)

(declare-const i1 Int)

(declare-const gapvec__split_fields1 us_split_fields4)

(declare-const rayr__split_fields1 us_split_fields8)

(declare-const rayl__split_fields1 us_split_fields8)

(declare-const i2 Int)

(declare-const rho us_split_fields4)

(declare-const rho1 us_split_fields4)

(declare-const result1 us_split_fields__ref4)

(declare-const rayr__split_fields2 us_split_fields8)

(declare-const result2 us_split_fields__ref4)

(declare-const rayl__split_fields2 us_split_fields8)

(declare-const algorithm__gap_vectors__append__container__fields us_split_fields4)

(declare-const result3 us_split_fields__ref2)

(declare-const gapvec__split_fields2 us_split_fields4)

(declare-const algorithm__gap_vectors__append__container__fields1 us_split_fields4)

(declare-const result4 us_split_fields__ref2)

(declare-const gapvec__split_fields3 us_split_fields4)

(declare-const gapvec__split_fields4 us_split_fields__ref2)

(declare-const rayr__split_fields3 us_split_fields__ref4)

(declare-const rayl__split_fields3 us_split_fields__ref4)

(declare-const i3 int__ref)

(declare-const gapvec__split_fields5 us_split_fields4)

(declare-const rayr__split_fields4 us_split_fields8)

(declare-const rayl__split_fields4 us_split_fields8)

(declare-const i4 Int)

(declare-const gapvec__split_fields6 us_split_fields__ref2)

(declare-const rayr__split_fields5 us_split_fields__ref4)

(declare-const rayl__split_fields5 us_split_fields__ref4)

(declare-const i5 int__ref)

(declare-const gapvec__split_fields7 us_split_fields4)

(declare-const rayr__split_fields6 us_split_fields8)

(declare-const rayl__split_fields6 us_split_fields8)

(declare-const i6 Int)

(declare-const result5 us_split_fields__ref4)

(declare-const rayr__split_fields7 us_split_fields8)

(declare-const result6 us_split_fields__ref4)

(declare-const rayl__split_fields7 us_split_fields8)

;; H
  (assert
  (= 1000 (to_rep4
          (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs))))

;; H
  (assert (in_range2 robotradius))

;; H
  (assert (in_range2 mingapwidth))

;; H
  (assert (in_range2 fmaxrange))

;; H
  (assert
  (and
  (= (to_rep4
     (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs)) 1000)
  (<= (length (mk___rep2 gapvec__split_discrs gapvec__split_fields)) 1)))

;; H
  (assert (= result (mk_int__ref i)))

;; H
  (assert (= i1 2))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= (mk___split_fields4 temp___820
     (mk___rep (mk___split_fields temp___8201))) rayl__split_fields)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= (mk___split_fields4 temp___819
     (mk___rep (mk___split_fields temp___8191))) rayr__split_fields)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= temp___818 (mk___rep2 gapvec__split_discrs gapvec__split_fields))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= temp___817 i1)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (and
  (= (to_rep4
     (rec__algorithm__gap_vectors__list__capacity gapvec__split_discrs)) 1000)
  (< (length (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
  i2))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (and (=> (<= 2 999) (in_range8 i2)) (and (<= 2 i2) (<= i2 999)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= result1 (mk___split_fields__ref4 rayr__split_fields1))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayr__split_fields2 rayl__split_fields1)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= result2 (mk___split_fields__ref4 rayl__split_fields1))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayl__split_fields2 (us_split_fields9 (select laserscan i2)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (and
  (= algorithm__buildgapvector__B_9__dist__assume (sub RNE1
                                                  (to_rep
                                                  (rec__algorithm__laser_scan_data__first
                                                  rayl__split_fields2))
                                                  (to_rep
                                                  (rec__algorithm__laser_scan_data__first
                                                  rayr__split_fields2))))
  (tqtisFinite
  (sub RNE1
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2)))))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= algorithm__buildgapvector__B_9__dist__assume dist1)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (tqtisFinite dist1)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))
  (= o (create__2
       (rec__algorithm__laser_scan_data__second rayr__split_fields2)
       (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
       (- 1))))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields)) (+ (length
                                                            (mk___rep2
                                                            gapvec__split_discrs
                                                            gapvec__split_fields1)) 1))
  (= (get1
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))
     (last1
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))) (length
                                                          (mk___rep2
                                                          gapvec__split_discrs
                                                          algorithm__gap_vectors__append__container__fields))))
  (= (keys_included_except
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))
     (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (last1
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))) true))
  (= (ole1 (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))) true))
  (= (bool_eq6
     (get
     (model__
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))
     (length
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))) o) true))
  (= (ole (model__ (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (model__
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields))) true)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))) (= result3 (mk___split_fields__ref2 gapvec__split_fields1)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))
  (= gapvec__split_fields2 algorithm__gap_vectors__append__container__fields))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))) (= algorithm__gap_vectors__append__container__fields1
  rho1))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))
  (= o1 (create__2
        (rec__algorithm__laser_scan_data__second rayl__split_fields2)
        (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
        1))))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1)) (+ (length
                                                             (mk___rep2
                                                             gapvec__split_discrs
                                                             gapvec__split_fields1)) 1))
  (= (get1
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))
     (last1
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))) (length
                                                           (mk___rep2
                                                           gapvec__split_discrs
                                                           algorithm__gap_vectors__append__container__fields1))))
  (= (keys_included_except
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))
     (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (last1
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))) true))
  (= (ole1 (positions (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (positions
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))) true))
  (= (bool_eq6
     (get
     (model__
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))
     (length
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))) o1) true))
  (= (ole (model__ (mk___rep2 gapvec__split_discrs gapvec__split_fields1))
     (model__
     (mk___rep2 gapvec__split_discrs
     algorithm__gap_vectors__append__container__fields1))) true))))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange))) (= result4 (mk___split_fields__ref2 gapvec__split_fields1))))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))
  (= gapvec__split_fields3 algorithm__gap_vectors__append__container__fields1)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (not
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))) (= gapvec__split_fields3 gapvec__split_fields1)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (not
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))) (= algorithm__gap_vectors__append__container__fields1
  rho1)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange))))
  (=>
  (not
  (or (le dist1 (neg mingapwidth))
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange)))) (= gapvec__split_fields3 gapvec__split_fields1)))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))) (= gapvec__split_fields2 gapvec__split_fields3))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))) (= algorithm__gap_vectors__append__container__fields
  rho))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (=>
  (not
  (or (le mingapwidth dist1)
  (and (eq
  (to_rep (rec__algorithm__laser_scan_data__first rayl__split_fields2))
  fmaxrange) (lt
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields2))
  fmaxrange)))) (= gapvec__split_fields2 gapvec__split_fields3))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= i2 999)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= i3 (mk_int__ref i2))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayl__split_fields3 (mk___split_fields__ref4 rayl__split_fields2))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayr__split_fields3 (mk___split_fields__ref4 rayr__split_fields2))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= gapvec__split_fields4 (mk___split_fields__ref2 gapvec__split_fields2))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= i4 i2)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayl__split_fields4 rayl__split_fields2)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayr__split_fields4 rayr__split_fields2)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= gapvec__split_fields5 gapvec__split_fields2)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= i5 i3)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayl__split_fields5 rayl__split_fields3)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayr__split_fields5 rayr__split_fields3)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= gapvec__split_fields6 gapvec__split_fields4)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 999)) (= i6 i4)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayl__split_fields6 rayl__split_fields4)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= rayr__split_fields6 rayr__split_fields4)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 999))
  (= gapvec__split_fields7 gapvec__split_fields5)))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 999))) (= i5 (mk_int__ref i1))))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= rayl__split_fields5 (mk___split_fields__ref4 rayl__split_fields))))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= rayr__split_fields5 (mk___split_fields__ref4 rayr__split_fields))))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= gapvec__split_fields6 (mk___split_fields__ref2 gapvec__split_fields))))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 999))) (= i6 i1)))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= rayl__split_fields6 rayl__split_fields)))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= rayr__split_fields6 rayr__split_fields)))

;; H
  (assert
  (=> (not (and (<= 2 i1) (<= i1 999)))
  (= gapvec__split_fields7 gapvec__split_fields)))

;; H
  (assert (= result5 rayr__split_fields5))

;; H
  (assert (= rayr__split_fields7 (us_split_fields9 (select laserscan 1000))))

;; H
  (assert (= result6 rayl__split_fields5))

;; H
  (assert (= rayl__split_fields7 (us_split_fields9 (select laserscan 1))))

;; H
  (assert
  (and
  (= o2 (ccwdiff
        (rec__algorithm__laser_scan_data__second rayr__split_fields7)
        (rec__algorithm__laser_scan_data__second rayl__split_fields7)))
  (tqtisFinite o2)))

;; H
  (assert
  (and (= o3 (cos1 o2))
  (and (tqtisFinite o3)
  (and (and (le (neg fliteral) o3) (le o3 fliteral))
  (=> (eq o2 fliteral2) (eq o3 fliteral))))))

(assert
;; WP_parameter_def
 ;; File "algorithm.adb", line 132, characters 0-0
  (not (tqtisFinite
  (mul RNE1 fliteral4
  (to_rep (rec__algorithm__laser_scan_data__first rayr__split_fields7))))))
(check-sat)
(exit)
