;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t 0)

(declare-fun tqtreal (t) Real)

(declare-fun tqtisFinite (t) Bool)

;; t'axiom
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (and (<= (- (* 16777215.0 20282409603651670423947251286016.0)) (tqtreal x))
  (<= (tqtreal x) (* 16777215.0 20282409603651670423947251286016.0))))))

(declare-fun pow2 (Int) Int)

(declare-datatypes ((mode 0)) (((RNE1) (RNA1) (RTP1) (RTN1) (RTZ1))))
(define-fun to_nearest ((m mode)) Bool (or (= m RNE1) (= m RNA1)))

(declare-const zeroF t)

(declare-fun add (mode t t) t)

(declare-fun sub (mode t t) t)

(declare-fun mul (mode t t) t)

(declare-fun div1 (mode t t) t)

(declare-fun abs1 (t) t)

(declare-fun neg (t) t)

(declare-fun fma (mode t t t) t)

(declare-fun sqrt (mode t) t)

(declare-fun roundToIntegral (mode t) t)

(declare-fun min (t t) t)

(declare-fun max (t t) t)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun eq (t t) Bool)

(declare-fun is_normal (t) Bool)

(declare-fun is_subnormal (t) Bool)

(declare-fun is_zero (t) Bool)

(declare-fun is_infinite (t) Bool)

(declare-fun is_nan (t) Bool)

(declare-fun is_positive (t) Bool)

(declare-fun is_negative (t) Bool)

(define-fun is_plus_infinity ((x t)) Bool (and (is_infinite x) (is_positive
                                          x)))

(define-fun is_minus_infinity ((x t)) Bool (and (is_infinite x) (is_negative
                                           x)))

(define-fun is_plus_zero ((x t)) Bool (and (is_zero x) (is_positive x)))

(define-fun is_minus_zero ((x t)) Bool (and (is_zero x) (is_negative x)))

(define-fun is_not_nan ((x t)) Bool (or (tqtisFinite x) (is_infinite x)))

;; is_not_nan
  (assert (forall ((x t)) (= (is_not_nan x) (not (is_nan x)))))

;; is_not_finite
  (assert
  (forall ((x t)) (= (not (tqtisFinite x)) (or (is_infinite x) (is_nan x)))))

;; zeroF_is_positive
  (assert (is_positive zeroF))

;; zeroF_is_zero
  (assert (is_zero zeroF))

;; zero_to_real
  (assert
  (forall ((x t))
  (! (= (is_zero x) (and (tqtisFinite x) (= (tqtreal x) 0.0))) :pattern ((is_zero
  x)) )))

(declare-fun of_int (mode Int) t)

(declare-fun to_int1 (mode t) Int)

;; zero_of_int
  (assert (forall ((m mode)) (= zeroF (of_int m 0))))

(declare-fun round (mode Real) Real)

(declare-const max_int Int)

;; max_real_int
  (assert
  (= (* 33554430.0 10141204801825835211973625643008.0) (to_real max_int)))

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

;; is_finite
  (assert (forall ((x t)) (=> (tqtisFinite x) (in_range (tqtreal x)))))

(define-fun no_overflow ((m mode) (x Real)) Bool (in_range (round m x)))

;; Bounded_real_no_overflow
  (assert (forall ((m mode) (x Real)) (=> (in_range x) (no_overflow m x))))

;; Round_monotonic
  (assert
  (forall ((m mode) (x Real) (y Real))
  (=> (<= x y) (<= (round m x) (round m y)))))

;; Round_idempotent
  (assert
  (forall ((m1 mode) (m2 mode) (x Real))
  (= (round m1 (round m2 x)) (round m2 x))))

;; Round_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (= (round m (tqtreal x)) (tqtreal x)))))

;; Round_down_le
  (assert (forall ((x Real)) (<= (round RTN1 x) x)))

;; Round_up_ge
  (assert (forall ((x Real)) (<= x (round RTP1 x))))

;; Round_down_neg
  (assert (forall ((x Real)) (= (round RTN1 (- x)) (- (round RTP1 x)))))

;; Round_up_neg
  (assert (forall ((x Real)) (= (round RTP1 (- x)) (- (round RTN1 x)))))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

;; Exact_rounding_for_integers
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (round m (to_real i)) (to_real i)))))

(define-fun same_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_positive y))
              (and (is_negative x) (is_negative y))))

(define-fun diff_sign ((x t)
  (y t)) Bool (or (and (is_positive x) (is_negative y))
              (and (is_negative x) (is_positive y))))

;; feq_eq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (not (is_zero x)) (=> (eq x y) (= x y)))))))

;; eq_feq
  (assert
  (forall ((x t) (y t))
  (=> (tqtisFinite x) (=> (tqtisFinite y) (=> (= x y) (eq x y))))))

;; eq_refl
  (assert (forall ((x t)) (=> (tqtisFinite x) (eq x x))))

;; eq_sym
  (assert (forall ((x t) (y t)) (=> (eq x y) (eq y x))))

;; eq_trans
  (assert (forall ((x t) (y t) (z t)) (=> (eq x y) (=> (eq y z) (eq x z)))))

;; eq_zero
  (assert (eq zeroF (neg zeroF)))

;; eq_to_real_finite
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (tqtisFinite y))
  (= (eq x y) (= (tqtreal x) (tqtreal y))))))

;; eq_special
  (assert
  (forall ((x t) (y t))
  (=> (eq x y)
  (and (is_not_nan x)
  (and (is_not_nan y)
  (or (and (tqtisFinite x) (tqtisFinite y))
  (and (is_infinite x) (and (is_infinite y) (same_sign x y)))))))))

;; lt_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (lt x y) (< (tqtreal x) (tqtreal y)))) :pattern ((lt
  x y)) )))

;; le_finite
  (assert
  (forall ((x t) (y t))
  (! (=> (and (tqtisFinite x) (tqtisFinite y))
     (= (le x y) (<= (tqtreal x) (tqtreal y)))) :pattern ((le
  x y)) )))

;; le_lt_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (le x y) (lt y z)) (lt x z))))

;; lt_le_trans
  (assert (forall ((x t) (y t) (z t)) (=> (and (lt x y) (le y z)) (lt x z))))

;; le_ge_asym
  (assert (forall ((x t) (y t)) (=> (and (le x y) (le y x)) (eq x y))))

;; not_lt_ge
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt x y)) (and (is_not_nan x) (is_not_nan y))) (le y x))))

;; not_gt_le
  (assert
  (forall ((x t) (y t))
  (=> (and (not (lt y x)) (and (is_not_nan x) (is_not_nan y))) (le x y))))

;; le_special
  (assert
  (forall ((x t) (y t))
  (! (=> (le x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or (and (is_minus_infinity x) (is_not_nan y))
     (and (is_not_nan x) (is_plus_infinity y))))) :pattern ((le
  x y)) )))

;; lt_special
  (assert
  (forall ((x t) (y t))
  (! (=> (lt x y)
     (or (and (tqtisFinite x) (tqtisFinite y))
     (or
     (and (is_minus_infinity x)
     (and (is_not_nan y) (not (is_minus_infinity y))))
     (and (is_not_nan x)
     (and (not (is_plus_infinity x)) (is_plus_infinity y)))))) :pattern ((lt
  x y)) )))

;; lt_lt_finite
  (assert
  (forall ((x t) (y t) (z t)) (=> (lt x y) (=> (lt y z) (tqtisFinite y)))))

;; positive_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_positive x) (<= 0.0 (tqtreal x)))) :pattern ((is_positive
  x)) :pattern ((<= 0.0 (tqtreal x))) )))

;; to_real_positive
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< 0.0 (tqtreal x)) (is_positive x))) :pattern ((is_positive
  x)) )))

;; negative_to_real
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (is_negative x) (<= (tqtreal x) 0.0))) :pattern ((is_negative
  x)) :pattern ((<= (tqtreal x) 0.0)) )))

;; to_real_negative
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (=> (< (tqtreal x) 0.0) (is_negative x))) :pattern ((is_negative
  x)) )))

;; negative_xor_positive
  (assert (forall ((x t)) (not (and (is_positive x) (is_negative x)))))

;; negative_or_positive
  (assert
  (forall ((x t)) (=> (is_not_nan x) (or (is_positive x) (is_negative x)))))

;; diff_sign_trans
  (assert
  (forall ((x t) (y t) (z t))
  (=> (and (diff_sign x y) (diff_sign y z)) (same_sign x z))))

;; diff_sign_product
  (assert
  (forall ((x t) (y t))
  (=>
  (and (tqtisFinite x)
  (and (tqtisFinite y) (< (* (tqtreal x) (tqtreal y)) 0.0))) (diff_sign x y))))

;; same_sign_product
  (assert
  (forall ((x t) (y t))
  (=> (and (tqtisFinite x) (and (tqtisFinite y) (same_sign x y)))
  (<= 0.0 (* (tqtreal x) (tqtreal y))))))

(define-fun product_sign ((z t) (x t)
  (y t)) Bool (and (=> (same_sign x y) (is_positive z))
              (=> (diff_sign x y) (is_negative z))))

(define-fun overflow_value ((m mode)
  (x t)) Bool (ite (is-RTN1 m) (ite (is_positive x)
                               (and (tqtisFinite x)
                               (= (tqtreal x) (* 33554430.0 10141204801825835211973625643008.0)))
                               (is_infinite x)) (ite (is-RTP1 m) (ite (is_positive
                                                                 x)
                                                                 (is_infinite
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RTZ1 m) (ite (is_positive
                                                                 x)
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (* 33554430.0 10141204801825835211973625643008.0)))
                                                                 (and
                                                                 (tqtisFinite
                                                                 x)
                                                                 (= (tqtreal
                                                                    x) (- (* 33554430.0 10141204801825835211973625643008.0)))))
                                                (ite (is-RNA1 m) (is_infinite
                                                x) (is_infinite x))))))

(define-fun sign_zero_result ((m mode)
  (x t)) Bool (=> (is_zero x)
              (ite (is-RTN1 m) (is_negative x) (is_positive x))))

;; add_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (add m x y))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y)))))))) :pattern (
  (add m x y)) )))

;; add_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (add m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (add m x y)) )))

;; add_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (add m x y))
     (and (no_overflow m (+ (tqtreal x) (tqtreal y)))
     (= (tqtreal (add m x y)) (round m (+ (tqtreal x) (tqtreal y))))))) :pattern (
  (add m x y)) )))

;; sub_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (- (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (sub m x y))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y)))))))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (sub m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (sub m x y)) )))

;; sub_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (sub m x y))
     (and (no_overflow m (- (tqtreal x) (tqtreal y)))
     (= (tqtreal (sub m x y)) (round m (- (tqtreal x) (tqtreal y))))))) :pattern (
  (sub m x y)) )))

;; mul_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (no_overflow m (* (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (mul m x y))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y)))))))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (mul m x y)) (and (tqtisFinite x) (tqtisFinite y))) :pattern (
  (mul m x y)) )))

;; mul_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (mul m x y))
     (and (no_overflow m (* (tqtreal x) (tqtreal y)))
     (= (tqtreal (mul m x y)) (round m (* (tqtreal x) (tqtreal y))))))) :pattern (
  (mul m x y)) )))

;; div_finite
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (not (is_zero y))
     (=> (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (and (tqtisFinite (div1 m x y))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y))))))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (tqtisFinite (div1 m x y))
     (or (and (tqtisFinite x) (and (tqtisFinite y) (not (is_zero y))))
     (and (tqtisFinite x)
     (and (is_infinite y) (= (tqtreal (div1 m x y)) 0.0))))) :pattern (
  (div1 m x y)) )))

;; div_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (div1 m x y))
     (=> (tqtisFinite y)
     (and (no_overflow m (/ (tqtreal x) (tqtreal y)))
     (= (tqtreal (div1 m x y)) (round m (/ (tqtreal x) (tqtreal y)))))))) :pattern (
  (div1 m x y)) )))

;; neg_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (neg x)) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; neg_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (neg x))
     (and (tqtisFinite x) (= (tqtreal (neg x)) (- (tqtreal x))))) :pattern (
  (neg x)) )))

;; abs_finite
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x)
     (and (tqtisFinite (abs1 x))
     (and
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x))))
     (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; abs_finite_rev
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite (abs1 x))
     (and (tqtisFinite x)
     (= (tqtreal (abs1 x)) (ite (>= (tqtreal x) 0.0) (tqtreal x) (- (tqtreal
                                                                    x)))))) :pattern (
  (abs1 x)) )))

;; abs_universal
  (assert
  (forall ((x t)) (! (not (is_negative (abs1 x))) :pattern ((abs1 x)) )))

;; fma_finite
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite x)
     (=> (tqtisFinite y)
     (=> (tqtisFinite z)
     (=> (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (and (tqtisFinite (fma m x y z))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (tqtisFinite (fma m x y z))
     (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))) :pattern (
  (fma m x y z)) )))

;; fma_finite_rev_n
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (=> (to_nearest m)
     (=> (tqtisFinite (fma m x y z))
     (and (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (= (tqtreal (fma m x y z)) (round m
                                (+ (* (tqtreal x) (tqtreal y)) (tqtreal z))))))) :pattern (
  (fma m x y z)) )))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

;; sqrt_finite
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite x)
     (=> (<= 0.0 (tqtreal x))
     (and (tqtisFinite (sqrt m x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

;; sqrt_finite_rev
  (assert
  (forall ((m mode) (x t))
  (! (=> (tqtisFinite (sqrt m x))
     (and (tqtisFinite x)
     (and (<= 0.0 (tqtreal x))
     (= (tqtreal (sqrt m x)) (round m (sqrt1 (tqtreal x))))))) :pattern (
  (sqrt m x)) )))

(define-fun same_sign_real ((x t)
  (r Real)) Bool (or (and (is_positive x) (< 0.0 r))
                 (and (is_negative x) (< r 0.0))))

;; add_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (add m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (same_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y))) (is_nan
     r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (+ (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (+ (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (same_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (add m x y)) )))

;; sub_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (sub m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (is_infinite y))
     (and (is_infinite r) (diff_sign r y)))
     (and
     (=> (and (is_infinite x) (tqtisFinite y))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (same_sign x y))) (is_nan
     r))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (diff_sign x y)))
     (and (is_infinite r) (same_sign r x)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (- (tqtreal x) (tqtreal y))))))
     (and (same_sign_real r (- (tqtreal x) (tqtreal y))) (overflow_value m
     r)))
     (=> (and (tqtisFinite x) (tqtisFinite y))
     (ite (diff_sign x y) (same_sign r x) (sign_zero_result m r)))))))))) :pattern (
  (sub m x y)) )))

;; mul_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (mul m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and
     (=> (and (tqtisFinite x) (and (is_infinite y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=> (and (is_infinite x) (and (tqtisFinite y) (not (is_zero y))))
     (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_infinite r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y) (not (no_overflow m (* (tqtreal x) (tqtreal y))))))
     (overflow_value m r)) (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern (
  (mul m x y)) )))

;; div_special
  (assert
  (forall ((m mode) (x t) (y t))
  (! (let ((r (div1 m x y)))
     (and (=> (or (is_nan x) (is_nan y)) (is_nan r))
     (and (=> (and (tqtisFinite x) (is_infinite y)) (is_zero r))
     (and (=> (and (is_infinite x) (tqtisFinite y)) (is_infinite r))
     (and (=> (and (is_infinite x) (is_infinite y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (not (is_zero y))
     (not (no_overflow m (/ (tqtreal x) (tqtreal y))))))) (overflow_value m
     r))
     (and
     (=> (and (tqtisFinite x) (and (is_zero y) (not (is_zero x))))
     (is_infinite r))
     (and (=> (and (is_zero x) (is_zero y)) (is_nan r))
     (=> (not (is_nan r)) (product_sign r x y)))))))))) :pattern ((div1 m x
                                                                  y)) )))

;; neg_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (neg x)))
     (and (=> (is_infinite x) (is_infinite (neg x)))
     (=> (not (is_nan x)) (diff_sign x (neg x))))) :pattern ((neg x)) )))

;; abs_special
  (assert
  (forall ((x t))
  (! (and (=> (is_nan x) (is_nan (abs1 x)))
     (and (=> (is_infinite x) (is_infinite (abs1 x)))
     (=> (not (is_nan x)) (is_positive (abs1 x))))) :pattern ((abs1 x)) )))

;; fma_special
  (assert
  (forall ((m mode) (x t) (y t) (z t))
  (! (let ((r (fma m x y z)))
     (and (=> (or (is_nan x) (or (is_nan y) (is_nan z))) (is_nan r))
     (and (=> (and (is_zero x) (is_infinite y)) (is_nan r))
     (and (=> (and (is_infinite x) (is_zero y)) (is_nan r))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (not (is_zero x)) (and (is_infinite y) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (tqtisFinite z))))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=>
     (and (is_infinite x)
     (and (tqtisFinite y) (and (not (is_zero y)) (is_infinite z))))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (tqtisFinite z)))
     (and (is_infinite r) (product_sign r x y)))
     (and
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (is_infinite z)))
     (and (is_infinite r) (same_sign r z)))
     (and
     (=> (and (is_infinite x) (and (is_infinite y) (is_infinite z)))
     (ite (product_sign z x y) (and (is_infinite r) (same_sign r z)) (is_nan
     r)))
     (and
     (=>
     (and (tqtisFinite x)
     (and (tqtisFinite y)
     (and (tqtisFinite z)
     (not (no_overflow m (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))))))
     (and (same_sign_real r (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)))
     (overflow_value m r)))
     (=> (and (tqtisFinite x) (and (tqtisFinite y) (tqtisFinite z)))
     (ite (product_sign z x y) (same_sign r z)
     (=> (= (+ (* (tqtreal x) (tqtreal y)) (tqtreal z)) 0.0)
     (ite (= m RTN1) (is_negative r) (is_positive r))))))))))))))))) :pattern (
  (fma m x y z)) )))

;; sqrt_special
  (assert
  (forall ((m mode) (x t))
  (! (let ((r (sqrt m x)))
     (and (=> (is_nan x) (is_nan r))
     (and (=> (is_plus_infinity x) (is_plus_infinity r))
     (and (=> (is_minus_infinity x) (is_nan r))
     (and (=> (and (tqtisFinite x) (< (tqtreal x) 0.0)) (is_nan r))
     (and (=> (is_zero x) (same_sign r x))
     (=> (and (tqtisFinite x) (< 0.0 (tqtreal x))) (is_positive r)))))))) :pattern (
  (sqrt m x)) )))

;; of_int_add_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (+ i j)) (eq (of_int m (+ i j))
  (add n (of_int m i) (of_int m j))))))))

;; of_int_sub_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (- i j)) (eq (of_int m (- i j))
  (sub n (of_int m i) (of_int m j))))))))

;; of_int_mul_exact
  (assert
  (forall ((m mode) (n mode) (i Int) (j Int))
  (=> (in_safe_int_range i)
  (=> (in_safe_int_range j)
  (=> (in_safe_int_range (* i j)) (eq (of_int m (* i j))
  (mul n (of_int m i) (of_int m j))))))))

;; Min_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (min x y) y))))

;; Min_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (min x y) x))))

;; Max_r
  (assert (forall ((x t) (y t)) (=> (le y x) (eq (max x y) x))))

;; Max_l
  (assert (forall ((x t) (y t)) (=> (le x y) (eq (max x y) y))))

(declare-fun is_int1 (t) Bool)

;; zeroF_is_int
  (assert (is_int1 zeroF))

;; of_int_is_int
  (assert
  (forall ((m mode) (x Int)) (=> (in_int_range x) (is_int1 (of_int m x)))))

;; big_float_is_int
  (assert
  (forall ((m mode) (i t))
  (=> (tqtisFinite i)
  (=> (or (le i (neg (of_int m 16777216))) (le (of_int m 16777216) i))
  (is_int1 i)))))

;; roundToIntegral_is_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (is_int1 (roundToIntegral m x)))))

;; eq_is_int
  (assert (forall ((x t) (y t)) (=> (eq x y) (=> (is_int1 x) (is_int1 y)))))

;; add_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (add m x y)) (is_int1 (add m x y)))))))

;; sub_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (sub m x y)) (is_int1 (sub m x y)))))))

;; mul_int
  (assert
  (forall ((x t) (y t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y) (=> (tqtisFinite (mul m x y)) (is_int1 (mul m x y)))))))

;; fma_int
  (assert
  (forall ((x t) (y t) (z t) (m mode))
  (=> (is_int1 x)
  (=> (is_int1 y)
  (=> (is_int1 z) (=> (tqtisFinite (fma m x y z)) (is_int1 (fma m x y z))))))))

;; neg_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (neg x)))))

;; abs_int
  (assert (forall ((x t)) (=> (is_int1 x) (is_int1 (abs1 x)))))

;; is_int_of_int
  (assert
  (forall ((x t) (m mode) (mqt mode))
  (=> (is_int1 x) (eq x (of_int mqt (to_int1 m x))))))

;; is_int_to_int
  (assert
  (forall ((m mode) (x t)) (=> (is_int1 x) (in_int_range (to_int1 m x)))))

;; is_int_is_finite
  (assert (forall ((x t)) (=> (is_int1 x) (tqtisFinite x))))

;; int_to_real
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (tqtreal x) (to_real (to_int1 m x))))))

;; truncate_int
  (assert
  (forall ((m mode) (i t)) (=> (is_int1 i) (eq (roundToIntegral m i) i))))

;; truncate_neg
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_negative x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTP1 x))))))

;; truncate_pos
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (=> (is_positive x) (= (roundToIntegral RTZ1 x) (roundToIntegral RTN1 x))))))

;; ceil_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le x (roundToIntegral RTP1 x)))))

;; ceil_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le x y) (is_int1 y)) (le (roundToIntegral RTP1 x) y))))

;; ceil_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTP1 x)) (to_real (- 1 (to_int (- 1.0
  (tqtreal x)))))))))

;; ceil_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTP1 x)) (- 1 (to_int (- 1.0 (tqtreal x))))))))

;; floor_le
  (assert
  (forall ((x t)) (=> (tqtisFinite x) (le (roundToIntegral RTN1 x) x))))

;; floor_lest
  (assert
  (forall ((x t) (y t))
  (=> (and (le y x) (is_int1 y)) (le y (roundToIntegral RTN1 x)))))

;; floor_to_real
  (assert
  (forall ((x t))
  (=> (tqtisFinite x)
  (= (tqtreal (roundToIntegral RTN1 x)) (to_real (to_int (tqtreal x)))))))

;; floor_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x)
  (= (to_int1 m (roundToIntegral RTN1 x)) (to_int (tqtreal x))))))

;; RNA_down
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x)))))

;; RNA_up
  (assert
  (forall ((x t))
  (=> (lt (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x)))))

;; RNA_down_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 x (roundToIntegral RTN1 x))
  (sub RNE1 (roundToIntegral RTP1 x) x))
  (=> (is_negative x) (= (roundToIntegral RNA1 x) (roundToIntegral RTN1 x))))))

;; RNA_up_tie
  (assert
  (forall ((x t))
  (=> (eq (sub RNE1 (roundToIntegral RTP1 x) x)
  (sub RNE1 x (roundToIntegral RTN1 x)))
  (=> (is_positive x) (= (roundToIntegral RNA1 x) (roundToIntegral RTP1 x))))))

;; to_int_roundToIntegral
  (assert
  (forall ((m mode) (x t))
  (= (to_int1 m x) (to_int1 m (roundToIntegral m x)))))

;; to_int_monotonic
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x)
  (=> (tqtisFinite y) (=> (le x y) (<= (to_int1 m x) (to_int1 m y)))))))

;; to_int_of_int
  (assert
  (forall ((m mode) (i Int))
  (=> (in_safe_int_range i) (= (to_int1 m (of_int m i)) i))))

;; eq_to_int
  (assert
  (forall ((m mode) (x t) (y t))
  (=> (tqtisFinite x) (=> (eq x y) (= (to_int1 m x) (to_int1 m y))))))

;; neg_to_int
  (assert
  (forall ((m mode) (x t))
  (=> (is_int1 x) (= (to_int1 m (neg x)) (- (to_int1 m x))))))

;; roundToIntegral_is_finite
  (assert
  (forall ((m mode) (x t))
  (=> (tqtisFinite x) (tqtisFinite (roundToIntegral m x)))))

;; round_bound_ne
  (assert
  (forall ((x Real))
  (! (=> (no_overflow RNE1 x)
     (and
     (<= (- (- x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))
     (round RNE1 x))
     (<= (round RNE1 x) (+ (+ x (* (/ 1.0 16777216.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 1427247692705959881058285969449495136382746624.0))))) :pattern (
  (round RNE1 x)) )))

;; round_bound
  (assert
  (forall ((m mode) (x Real))
  (! (=> (no_overflow m x)
     (and
     (<= (- (- x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))
     (round m x))
     (<= (round m x) (+ (+ x (* (/ 1.0 8388608.0) (ite (>= x 0.0) x (- x)))) (/ 1.0 713623846352979940529142984724747568191373312.0))))) :pattern (
  (round m x)) )))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content t)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort float 0)

(declare-fun user_eq1 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (t) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) t)

(declare-const dummy1 float)

(declare-datatypes ((float__ref 0))
(((mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep1 (float) t)

(declare-fun of_rep1 (t) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (tqtisFinite (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x t))
  (! (=> (tqtisFinite x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                (of_rep1 x))) )))

(declare-sort e 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (e e) Bool)

(declare-const dummy2 e)

(declare-datatypes ((e__ref 0)) (((mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 3)) (in_range3 temp___expr_135)))

(declare-fun to_rep2 (e) Int)

(declare-fun of_rep2 (Int) e)

;; inversion_axiom
  (assert
  (forall ((x e)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x e)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__tagged_discr__t__discr e)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) e (rec__tagged_discr__t__discr
                                                                 a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__tagged_discr__t__z Bool)(rec__tagged_discr__t__x integer)(rec__tagged_discr__t__y float)(rec__ext__ us_private)))))
(define-fun us_split_fields_Z__projection ((a us_split_fields)) Bool
  (rec__tagged_discr__t__z a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__tagged_discr__t__x a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Int (attr__tag a))

(define-fun tagged_discr__t__x__pred ((a us_rep)) Bool (or
                                                       (= (to_rep2
                                                          (rec__tagged_discr__t__discr
                                                          (us_split_discrs1
                                                          a))) 0)
                                                       (= (to_rep2
                                                          (rec__tagged_discr__t__discr
                                                          (us_split_discrs1
                                                          a))) 2)))

(define-fun tagged_discr__t__y__pred ((a us_rep)) Bool (not
                                                       (or
                                                       (= (to_rep2
                                                          (rec__tagged_discr__t__discr
                                                          (us_split_discrs1
                                                          a))) 0)
                                                       (= (to_rep2
                                                          (rec__tagged_discr__t__discr
                                                          (us_split_discrs1
                                                          a))) 2))))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep2
                           (rec__tagged_discr__t__discr (us_split_discrs1 a)))
                        (to_rep2
                        (rec__tagged_discr__t__discr (us_split_discrs1 b))))
                        (= (rec__tagged_discr__t__z (us_split_fields1 a))
                        (rec__tagged_discr__t__z (us_split_fields1 b))))
                        (=> (tagged_discr__t__x__pred a)
                        (= (to_rep
                           (rec__tagged_discr__t__x (us_split_fields1 a)))
                        (to_rep
                        (rec__tagged_discr__t__x (us_split_fields1 b))))))
                        (=> (tagged_discr__t__y__pred a)
                        (= (to_rep1
                           (rec__tagged_discr__t__y (us_split_fields1 a)))
                        (to_rep1
                        (rec__tagged_discr__t__y (us_split_fields1 b))))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const tagged_discr__t__discr__first__bit Int)

(declare-const tagged_discr__t__discr__last__bit Int)

(declare-const tagged_discr__t__discr__position Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit tagged_discr__t__discr__last__bit))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position))

(declare-const tagged_discr__t__z__first__bit Int)

(declare-const tagged_discr__t__z__last__bit Int)

(declare-const tagged_discr__t__z__position Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit tagged_discr__t__z__last__bit))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position))

(declare-const tagged_discr__t__x__first__bit Int)

(declare-const tagged_discr__t__x__last__bit Int)

(declare-const tagged_discr__t__x__position Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit tagged_discr__t__x__last__bit))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position))

(declare-const tagged_discr__t__y__first__bit Int)

(declare-const tagged_discr__t__y__last__bit Int)

(declare-const tagged_discr__t__y__position Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit tagged_discr__t__y__last__bit))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 us_rep)))))
(define-fun t__ref___projection ((a t__ref1)) us_rep (t__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__tagged_discr__u2__w integer)(rec__tagged_discr__u2__xx integer)(rec__tagged_discr__u2__yy float)(rec__tagged_discr__t__z1 Bool)(rec__tagged_discr__t__x1 integer)(rec__tagged_discr__t__y1 float)(rec__ext__1 us_private)))))
(define-fun us_split_fields_W2__projection ((a us_split_fields2)) integer
  (rec__tagged_discr__u2__w a))

(define-fun us_split_fields_XX__projection ((a us_split_fields2)) integer
  (rec__tagged_discr__u2__xx a))

(define-fun us_split_fields_Z3__projection ((a us_split_fields2)) Bool
  (rec__tagged_discr__t__z1 a))

(define-fun us_split_fields_X3__projection ((a us_split_fields2)) integer
  (rec__tagged_discr__t__x1 a))

(define-fun us_split_fields_3__projection ((a us_split_fields2)) us_private
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_7__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                               a))

(define-fun us_rep_8__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_9__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer integer float us_private) us_private)

(declare-fun extract__w (us_private) integer)

;; extract__w__conv
  (assert
  (forall ((w integer) (xx integer))
  (forall ((yy float))
  (forall ((rec__ext__2 us_private))
  (= (extract__w (hide_ext__ w xx yy rec__ext__2)) w)))))

(declare-fun extract__xx (us_private) integer)

;; extract__xx__conv
  (assert
  (forall ((w integer) (xx integer))
  (forall ((yy float))
  (forall ((rec__ext__2 us_private))
  (= (extract__xx (hide_ext__ w xx yy rec__ext__2)) xx)))))

(declare-fun extract__yy (us_private) float)

;; extract__yy__conv
  (assert
  (forall ((w integer) (xx integer))
  (forall ((yy float))
  (forall ((rec__ext__2 us_private))
  (= (extract__yy (hide_ext__ w xx yy rec__ext__2)) yy)))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__tagged_discr__t__z1
                                         (us_split_fields3 a))
                                         (rec__tagged_discr__t__x1
                                         (us_split_fields3 a))
                                         (rec__tagged_discr__t__y1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__tagged_discr__u2__w
                                         (us_split_fields3 a))
                                         (rec__tagged_discr__u2__xx
                                         (us_split_fields3 a))
                                         (rec__tagged_discr__u2__yy
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (extract__w
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__xx
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__yy
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__tagged_discr__t__z
                                         (us_split_fields1 r))
                                         (rec__tagged_discr__t__x
                                         (us_split_fields1 r))
                                         (rec__tagged_discr__t__y
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun tagged_discr__t__x__pred1 ((a us_rep1)) Bool (or
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs2
                                                            a))) 0)
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs2
                                                            a))) 2)))

(define-fun tagged_discr__t__y__pred1 ((a us_rep1)) Bool (not
                                                         (or
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs2
                                                            a))) 0)
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs2
                                                            a))) 2))))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__tagged_discr__t__discr
                            (us_split_discrs2 a))) (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs2 b))))
                         (= (to_rep
                            (rec__tagged_discr__u2__w (us_split_fields3 a)))
                         (to_rep
                         (rec__tagged_discr__u2__w (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__tagged_discr__u2__xx (us_split_fields3 a)))
                         (to_rep
                         (rec__tagged_discr__u2__xx (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__tagged_discr__u2__yy (us_split_fields3 a)))
                         (to_rep1
                         (rec__tagged_discr__u2__yy (us_split_fields3 b)))))
                         (= (rec__tagged_discr__t__z1 (us_split_fields3 a))
                         (rec__tagged_discr__t__z1 (us_split_fields3 b))))
                         (=> (tagged_discr__t__x__pred1 a)
                         (= (to_rep
                            (rec__tagged_discr__t__x1 (us_split_fields3 a)))
                         (to_rep
                         (rec__tagged_discr__t__x1 (us_split_fields3 b))))))
                         (=> (tagged_discr__t__y__pred1 a)
                         (= (to_rep1
                            (rec__tagged_discr__t__y1 (us_split_fields3 a)))
                         (to_rep1
                         (rec__tagged_discr__t__y1 (us_split_fields3 b))))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const tagged_discr__t__discr__first__bit1 Int)

(declare-const tagged_discr__t__discr__last__bit1 Int)

(declare-const tagged_discr__t__discr__position1 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit1))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit1 tagged_discr__t__discr__last__bit1))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position1))

(declare-const tagged_discr__u2__w__first__bit Int)

(declare-const tagged_discr__u2__w__last__bit Int)

(declare-const tagged_discr__u2__w__position Int)

;; tagged_discr__u2__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__w__first__bit))

;; tagged_discr__u2__w__last__bit_axiom
  (assert (< tagged_discr__u2__w__first__bit tagged_discr__u2__w__last__bit))

;; tagged_discr__u2__w__position_axiom
  (assert (<= 0 tagged_discr__u2__w__position))

(declare-const tagged_discr__u2__xx__first__bit Int)

(declare-const tagged_discr__u2__xx__last__bit Int)

(declare-const tagged_discr__u2__xx__position Int)

;; tagged_discr__u2__xx__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__xx__first__bit))

;; tagged_discr__u2__xx__last__bit_axiom
  (assert
  (< tagged_discr__u2__xx__first__bit tagged_discr__u2__xx__last__bit))

;; tagged_discr__u2__xx__position_axiom
  (assert (<= 0 tagged_discr__u2__xx__position))

(declare-const tagged_discr__u2__yy__first__bit Int)

(declare-const tagged_discr__u2__yy__last__bit Int)

(declare-const tagged_discr__u2__yy__position Int)

;; tagged_discr__u2__yy__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__yy__first__bit))

;; tagged_discr__u2__yy__last__bit_axiom
  (assert
  (< tagged_discr__u2__yy__first__bit tagged_discr__u2__yy__last__bit))

;; tagged_discr__u2__yy__position_axiom
  (assert (<= 0 tagged_discr__u2__yy__position))

(declare-const tagged_discr__t__z__first__bit1 Int)

(declare-const tagged_discr__t__z__last__bit1 Int)

(declare-const tagged_discr__t__z__position1 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit1))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit1 tagged_discr__t__z__last__bit1))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position1))

(declare-const tagged_discr__t__x__first__bit1 Int)

(declare-const tagged_discr__t__x__last__bit1 Int)

(declare-const tagged_discr__t__x__position1 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit1))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit1 tagged_discr__t__x__last__bit1))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position1))

(declare-const tagged_discr__t__y__first__bit1 Int)

(declare-const tagged_discr__t__y__last__bit1 Int)

(declare-const tagged_discr__t__y__position1 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit1))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit1 tagged_discr__t__y__last__bit1))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position1))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((u2__ref 0)) (((mk_u2__ref (u2__content us_rep1)))))
(define-fun u2__ref___projection ((a u2__ref)) us_rep1 (u2__content a))

(declare-fun is_zero__3 (us_rep1) Bool)

(declare-fun is_zero__3__function_guard (Bool us_rep1) Bool)

(declare-fun is_zero__31 (Int us_rep1) Bool)

(declare-fun is_zero__3__function_guard1 (Bool Int us_rep1) Bool)

(declare-fun is_zero1 (us_rep) Bool)

(declare-fun is_zero__function_guard (Bool us_rep) Bool)

(declare-fun is_zero2 (Int us_rep) Bool)

(declare-fun is_zero__function_guard1 (Bool Int us_rep) Bool)

(declare-const us_tag2 Int)

(define-fun in_range4 ((rec__tagged_discr__t__discr1 Int)
  (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const tagged_discr__t__discr__first__bit2 Int)

(declare-const tagged_discr__t__discr__last__bit2 Int)

(declare-const tagged_discr__t__discr__position2 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit2))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit2 tagged_discr__t__discr__last__bit2))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position2))

(declare-const tagged_discr__t__z__first__bit2 Int)

(declare-const tagged_discr__t__z__last__bit2 Int)

(declare-const tagged_discr__t__z__position2 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit2))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit2 tagged_discr__t__z__last__bit2))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position2))

(declare-const tagged_discr__t__x__first__bit2 Int)

(declare-const tagged_discr__t__x__last__bit2 Int)

(declare-const tagged_discr__t__x__position2 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit2))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit2 tagged_discr__t__x__last__bit2))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position2))

(declare-const tagged_discr__t__y__first__bit2 Int)

(declare-const tagged_discr__t__y__last__bit2 Int)

(declare-const tagged_discr__t__y__position2 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit2))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit2 tagged_discr__t__y__last__bit2))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position2))

(declare-const tagged_discr__u2__w__first__bit1 Int)

(declare-const tagged_discr__u2__w__last__bit1 Int)

(declare-const tagged_discr__u2__w__position1 Int)

;; tagged_discr__u2__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__w__first__bit1))

;; tagged_discr__u2__w__last__bit_axiom
  (assert
  (< tagged_discr__u2__w__first__bit1 tagged_discr__u2__w__last__bit1))

;; tagged_discr__u2__w__position_axiom
  (assert (<= 0 tagged_discr__u2__w__position1))

(declare-const tagged_discr__u2__xx__first__bit1 Int)

(declare-const tagged_discr__u2__xx__last__bit1 Int)

(declare-const tagged_discr__u2__xx__position1 Int)

;; tagged_discr__u2__xx__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__xx__first__bit1))

;; tagged_discr__u2__xx__last__bit_axiom
  (assert
  (< tagged_discr__u2__xx__first__bit1 tagged_discr__u2__xx__last__bit1))

;; tagged_discr__u2__xx__position_axiom
  (assert (<= 0 tagged_discr__u2__xx__position1))

(declare-const tagged_discr__u2__yy__first__bit1 Int)

(declare-const tagged_discr__u2__yy__last__bit1 Int)

(declare-const tagged_discr__u2__yy__position1 Int)

;; tagged_discr__u2__yy__first__bit_axiom
  (assert (<= 0 tagged_discr__u2__yy__first__bit1))

;; tagged_discr__u2__yy__last__bit_axiom
  (assert
  (< tagged_discr__u2__yy__first__bit1 tagged_discr__u2__yy__last__bit1))

;; tagged_discr__u2__yy__position_axiom
  (assert (<= 0 tagged_discr__u2__yy__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((t13b__ref 0))
(((mk_t13b__ref (t13b__content us_rep1)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_rep1 (t13b__content a))

;; is_zero__3__post_axiom
  (assert true)

;; is_zero__3__post__dispatch_axiom
  (assert true)

;; tagged_discr__u2__compat_axiom
  (assert
  (forall ((v us_rep1))
  (! (= (to_int2 (is_zero__3 v)) (to_int2 (is_zero__31 us_tag1 v))) :pattern (
  (is_zero__31 us_tag1 v)) )))

;; tagged_discr__init__3__T13b__compat_axiom
  (assert
  (forall ((v us_rep1))
  (! (= (to_int2 (is_zero__3 v)) (to_int2 (is_zero__31 us_tag2 v))) :pattern (
  (is_zero__31 us_tag2 v)) )))

(declare-const fliteral t)

;; fliteral_axiom
  (assert (and (tqtisFinite fliteral) (= (tqtreal fliteral) (/ 0.0 10.0))))

;; is_zero__3__def_axiom
  (assert
  (forall ((v us_rep1))
  (! (= (= (is_zero__3 v) true)
     (and
     (and
     (and (= (is_zero1 (to_base v)) true)
     (= (to_rep (rec__tagged_discr__u2__w (us_split_fields3 v))) 0))
     (= (to_rep (rec__tagged_discr__u2__xx (us_split_fields3 v))) 0)) (eq
     (to_rep1 (rec__tagged_discr__u2__yy (us_split_fields3 v))) fliteral))) :pattern (
  (is_zero__3 v)) )))

(declare-const v__split_discrs us_split_discrs)

(declare-const v__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r10b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const us_tag3 Int)

(define-fun in_range5 ((rec__tagged_discr__t__discr1 Int)
  (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const tagged_discr__t__discr__first__bit3 Int)

(declare-const tagged_discr__t__discr__last__bit3 Int)

(declare-const tagged_discr__t__discr__position3 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit3))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit3 tagged_discr__t__discr__last__bit3))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position3))

(declare-const tagged_discr__t__y__first__bit3 Int)

(declare-const tagged_discr__t__y__last__bit3 Int)

(declare-const tagged_discr__t__y__position3 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit3))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit3 tagged_discr__t__y__last__bit3))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position3))

(declare-const tagged_discr__t__z__first__bit3 Int)

(declare-const tagged_discr__t__z__last__bit3 Int)

(declare-const tagged_discr__t__z__position3 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit3))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit3 tagged_discr__t__z__last__bit3))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position3))

(declare-const tagged_discr__t__x__first__bit3 Int)

(declare-const tagged_discr__t__x__last__bit3 Int)

(declare-const tagged_discr__t__x__position3 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit3))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit3 tagged_discr__t__x__last__bit3))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position3))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((t11b__ref 0)) (((mk_t11b__ref (t11b__content us_rep)))))
(define-fun t11b__ref___projection ((a t11b__ref)) us_rep (t11b__content a))

(declare-const r12b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-const fliteral1 t)

;; fliteral_axiom
  (assert
  (and (tqtisFinite fliteral1)
  (= (tqtreal fliteral1) 340282346638528859811704183484516925440.0)))

(define-fun dynamic_invariant2 ((temp___expr_51 t) (temp___is_init_48 Bool)
  (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true) (le
                                     (neg fliteral1) fliteral1)) (tqtisFinite
                                     temp___expr_51)))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__tagged_discr__u1__w integer)(rec__tagged_discr__t__z2 Bool)(rec__tagged_discr__t__x2 integer)(rec__tagged_discr__t__y2 float)(rec__ext__2 us_private)))))
(define-fun us_split_fields_W__projection ((a us_split_fields4)) integer
  (rec__tagged_discr__u1__w a))

(define-fun us_split_fields_Z2__projection ((a us_split_fields4)) Bool
  (rec__tagged_discr__t__z2 a))

(define-fun us_split_fields_X2__projection ((a us_split_fields4)) integer
  (rec__tagged_discr__t__x2 a))

(define-fun us_split_fields_2__projection ((a us_split_fields4)) us_private
  (rec__ext__2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep_4__projection ((a us_rep2)) us_split_discrs (us_split_discrs3
                                                               a))

(define-fun us_rep_5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_6__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (integer us_private) us_private)

(declare-fun extract__w1 (us_private) integer)

;; extract__w__conv
  (assert
  (forall ((w integer))
  (forall ((rec__ext__3 us_private))
  (= (extract__w1 (hide_ext__1 w rec__ext__3)) w))))

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a)
                                          (mk___split_fields
                                          (rec__tagged_discr__t__z2
                                          (us_split_fields5 a))
                                          (rec__tagged_discr__t__x2
                                          (us_split_fields5 a))
                                          (rec__tagged_discr__t__y2
                                          (us_split_fields5 a))
                                          (hide_ext__1
                                          (rec__tagged_discr__u1__w
                                          (us_split_fields5 a))
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r)
                                          (mk___split_fields2
                                          (extract__w1
                                          (rec__ext__ (us_split_fields1 r)))
                                          (rec__tagged_discr__t__z
                                          (us_split_fields1 r))
                                          (rec__tagged_discr__t__x
                                          (us_split_fields1 r))
                                          (rec__tagged_discr__t__y
                                          (us_split_fields1 r))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun tagged_discr__t__x__pred2 ((a us_rep2)) Bool (or
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs3
                                                            a))) 0)
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs3
                                                            a))) 2)))

(define-fun tagged_discr__t__y__pred2 ((a us_rep2)) Bool (not
                                                         (or
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs3
                                                            a))) 0)
                                                         (= (to_rep2
                                                            (rec__tagged_discr__t__discr
                                                            (us_split_discrs3
                                                            a))) 2))))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__tagged_discr__t__discr
                            (us_split_discrs3 a))) (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs3 b))))
                         (= (to_rep
                            (rec__tagged_discr__u1__w (us_split_fields5 a)))
                         (to_rep
                         (rec__tagged_discr__u1__w (us_split_fields5 b)))))
                         (= (rec__tagged_discr__t__z2 (us_split_fields5 a))
                         (rec__tagged_discr__t__z2 (us_split_fields5 b))))
                         (=> (tagged_discr__t__x__pred2 a)
                         (= (to_rep
                            (rec__tagged_discr__t__x2 (us_split_fields5 a)))
                         (to_rep
                         (rec__tagged_discr__t__x2 (us_split_fields5 b))))))
                         (=> (tagged_discr__t__y__pred2 a)
                         (= (to_rep1
                            (rec__tagged_discr__t__y2 (us_split_fields5 a)))
                         (to_rep1
                         (rec__tagged_discr__t__y2 (us_split_fields5 b))))))
                    true false))

(declare-const us_tag4 Int)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const tagged_discr__t__discr__first__bit4 Int)

(declare-const tagged_discr__t__discr__last__bit4 Int)

(declare-const tagged_discr__t__discr__position4 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit4))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit4 tagged_discr__t__discr__last__bit4))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position4))

(declare-const tagged_discr__u1__w__first__bit Int)

(declare-const tagged_discr__u1__w__last__bit Int)

(declare-const tagged_discr__u1__w__position Int)

;; tagged_discr__u1__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u1__w__first__bit))

;; tagged_discr__u1__w__last__bit_axiom
  (assert (< tagged_discr__u1__w__first__bit tagged_discr__u1__w__last__bit))

;; tagged_discr__u1__w__position_axiom
  (assert (<= 0 tagged_discr__u1__w__position))

(declare-const tagged_discr__t__z__first__bit4 Int)

(declare-const tagged_discr__t__z__last__bit4 Int)

(declare-const tagged_discr__t__z__position4 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit4))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit4 tagged_discr__t__z__last__bit4))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position4))

(declare-const tagged_discr__t__x__first__bit4 Int)

(declare-const tagged_discr__t__x__last__bit4 Int)

(declare-const tagged_discr__t__x__position4 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit4))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit4 tagged_discr__t__x__last__bit4))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position4))

(declare-const tagged_discr__t__y__first__bit4 Int)

(declare-const tagged_discr__t__y__last__bit4 Int)

(declare-const tagged_discr__t__y__position4 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit4))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit4 tagged_discr__t__y__last__bit4))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position4))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((u1__ref 0)) (((mk_u1__ref (u1__content us_rep2)))))
(define-fun u1__ref___projection ((a u1__ref)) us_rep2 (u1__content a))

(declare-fun is_zero__2 (us_rep2) Bool)

(declare-fun is_zero__2__function_guard (Bool us_rep2) Bool)

(declare-fun is_zero__21 (Int us_rep2) Bool)

(declare-fun is_zero__2__function_guard1 (Bool Int us_rep2) Bool)

(declare-const us_tag5 Int)

(define-fun in_range6 ((rec__tagged_discr__t__discr1 Int)
  (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs1 a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const tagged_discr__t__discr__first__bit5 Int)

(declare-const tagged_discr__t__discr__last__bit5 Int)

(declare-const tagged_discr__t__discr__position5 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit5))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit5 tagged_discr__t__discr__last__bit5))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position5))

(declare-const tagged_discr__t__y__first__bit5 Int)

(declare-const tagged_discr__t__y__last__bit5 Int)

(declare-const tagged_discr__t__y__position5 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit5))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit5 tagged_discr__t__y__last__bit5))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position5))

(declare-const tagged_discr__t__z__first__bit5 Int)

(declare-const tagged_discr__t__z__last__bit5 Int)

(declare-const tagged_discr__t__z__position5 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit5))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit5 tagged_discr__t__z__last__bit5))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position5))

(declare-const tagged_discr__t__x__first__bit5 Int)

(declare-const tagged_discr__t__x__last__bit5 Int)

(declare-const tagged_discr__t__x__position5 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit5))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit5 tagged_discr__t__x__last__bit5))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position5))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((t3b__ref 0)) (((mk_t3b__ref (t3b__content us_rep)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep (t3b__content a))

(declare-const us_tag6 Int)

(define-fun in_range7 ((rec__tagged_discr__t__discr1 Int)
  (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs1 a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const tagged_discr__t__discr__first__bit6 Int)

(declare-const tagged_discr__t__discr__last__bit6 Int)

(declare-const tagged_discr__t__discr__position6 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit6))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit6 tagged_discr__t__discr__last__bit6))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position6))

(declare-const tagged_discr__t__y__first__bit6 Int)

(declare-const tagged_discr__t__y__last__bit6 Int)

(declare-const tagged_discr__t__y__position6 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit6))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit6 tagged_discr__t__y__last__bit6))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position6))

(declare-const tagged_discr__t__z__first__bit6 Int)

(declare-const tagged_discr__t__z__last__bit6 Int)

(declare-const tagged_discr__t__z__position6 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit6))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit6 tagged_discr__t__z__last__bit6))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position6))

(declare-const tagged_discr__t__x__first__bit6 Int)

(declare-const tagged_discr__t__x__last__bit6 Int)

(declare-const tagged_discr__t__x__position6 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit6))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit6 tagged_discr__t__x__last__bit6))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position6))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t6b__ref 0)) (((mk_t6b__ref (t6b__content us_rep)))))
(define-fun t6b__ref___projection ((a t6b__ref)) us_rep (t6b__content a))

(declare-const us_tag7 Int)

(define-fun in_range8 ((rec__tagged_discr__t__discr1 Int)
  (a us_rep)) Bool (= rec__tagged_discr__t__discr1 (to_rep2
                                                   (rec__tagged_discr__t__discr
                                                   (us_split_discrs1 a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep2) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))

(declare-const tagged_discr__t__discr__first__bit7 Int)

(declare-const tagged_discr__t__discr__last__bit7 Int)

(declare-const tagged_discr__t__discr__position7 Int)

;; tagged_discr__t__discr__first__bit_axiom
  (assert (<= 0 tagged_discr__t__discr__first__bit7))

;; tagged_discr__t__discr__last__bit_axiom
  (assert
  (< tagged_discr__t__discr__first__bit7 tagged_discr__t__discr__last__bit7))

;; tagged_discr__t__discr__position_axiom
  (assert (<= 0 tagged_discr__t__discr__position7))

(declare-const tagged_discr__t__z__first__bit7 Int)

(declare-const tagged_discr__t__z__last__bit7 Int)

(declare-const tagged_discr__t__z__position7 Int)

;; tagged_discr__t__z__first__bit_axiom
  (assert (<= 0 tagged_discr__t__z__first__bit7))

;; tagged_discr__t__z__last__bit_axiom
  (assert (< tagged_discr__t__z__first__bit7 tagged_discr__t__z__last__bit7))

;; tagged_discr__t__z__position_axiom
  (assert (<= 0 tagged_discr__t__z__position7))

(declare-const tagged_discr__t__x__first__bit7 Int)

(declare-const tagged_discr__t__x__last__bit7 Int)

(declare-const tagged_discr__t__x__position7 Int)

;; tagged_discr__t__x__first__bit_axiom
  (assert (<= 0 tagged_discr__t__x__first__bit7))

;; tagged_discr__t__x__last__bit_axiom
  (assert (< tagged_discr__t__x__first__bit7 tagged_discr__t__x__last__bit7))

;; tagged_discr__t__x__position_axiom
  (assert (<= 0 tagged_discr__t__x__position7))

(declare-const tagged_discr__t__y__first__bit7 Int)

(declare-const tagged_discr__t__y__last__bit7 Int)

(declare-const tagged_discr__t__y__position7 Int)

;; tagged_discr__t__y__first__bit_axiom
  (assert (<= 0 tagged_discr__t__y__first__bit7))

;; tagged_discr__t__y__last__bit_axiom
  (assert (< tagged_discr__t__y__first__bit7 tagged_discr__t__y__last__bit7))

;; tagged_discr__t__y__position_axiom
  (assert (<= 0 tagged_discr__t__y__position7))

(declare-const tagged_discr__u1__w__first__bit1 Int)

(declare-const tagged_discr__u1__w__last__bit1 Int)

(declare-const tagged_discr__u1__w__position1 Int)

;; tagged_discr__u1__w__first__bit_axiom
  (assert (<= 0 tagged_discr__u1__w__first__bit1))

;; tagged_discr__u1__w__last__bit_axiom
  (assert
  (< tagged_discr__u1__w__first__bit1 tagged_discr__u1__w__last__bit1))

;; tagged_discr__u1__w__position_axiom
  (assert (<= 0 tagged_discr__u1__w__position1))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((t8b__ref 0)) (((mk_t8b__ref (t8b__content us_rep2)))))
(define-fun t8b__ref___projection ((a t8b__ref)) us_rep2 (t8b__content a))

;; is_zero__post_axiom
  (assert true)

;; is_zero__post__dispatch_axiom
  (assert true)

;; tagged_discr__t__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero1 v)) (to_int2 (is_zero2 us_tag v))) :pattern (
  (is_zero2 us_tag v)) )))

;; tagged_discr__u1__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero__2 (of_base1 v))) (to_int2 (is_zero2 us_tag4 v))) :pattern (
  (is_zero2 us_tag4 v)) )))

;; tagged_discr__u2__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero__3 (of_base v))) (to_int2 (is_zero2 us_tag1 v))) :pattern (
  (is_zero2 us_tag1 v)) )))

;; tagged_discr__init__T3b__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero1 v)) (to_int2 (is_zero2 us_tag5 v))) :pattern (
  (is_zero2 us_tag5 v)) )))

;; tagged_discr__init__2__T6b__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero1 v)) (to_int2 (is_zero2 us_tag6 v))) :pattern (
  (is_zero2 us_tag6 v)) )))

;; tagged_discr__init__2__T8b__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero__2 (of_base1 v))) (to_int2 (is_zero2 us_tag7 v))) :pattern (
  (is_zero2 us_tag7 v)) )))

;; tagged_discr__init__3__T11b__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero1 v)) (to_int2 (is_zero2 us_tag3 v))) :pattern (
  (is_zero2 us_tag3 v)) )))

;; tagged_discr__init__3__T13b__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (to_int2 (is_zero__3 (of_base v))) (to_int2 (is_zero2 us_tag2 v))) :pattern (
  (is_zero2 us_tag2 v)) )))

;; is_zero__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (is_zero1 v) true)
     (and (not (= (rec__tagged_discr__t__z (us_split_fields1 v)) true))
     (ite (or
          (= (to_rep2 (rec__tagged_discr__t__discr (us_split_discrs1 v))) 0)
          (= (to_rep2 (rec__tagged_discr__t__discr (us_split_discrs1 v))) 2))
     (= (to_rep (rec__tagged_discr__t__x (us_split_fields1 v))) 0) (eq
     (to_rep1 (rec__tagged_discr__t__y (us_split_fields1 v))) fliteral)))) :pattern (
  (is_zero1 v)) )))

;; is_zero__2__post_axiom
  (assert true)

;; is_zero__2__post__dispatch_axiom
  (assert true)

;; tagged_discr__u1__compat_axiom
  (assert
  (forall ((v us_rep2))
  (! (= (to_int2 (is_zero__2 v)) (to_int2 (is_zero__21 us_tag4 v))) :pattern (
  (is_zero__21 us_tag4 v)) )))

;; tagged_discr__init__2__T8b__compat_axiom
  (assert
  (forall ((v us_rep2))
  (! (= (to_int2 (is_zero__2 v)) (to_int2 (is_zero__21 us_tag7 v))) :pattern (
  (is_zero__21 us_tag7 v)) )))

;; is_zero__2__def_axiom
  (assert
  (forall ((v us_rep2))
  (! (= (= (is_zero__2 v) true)
     (and
     (and (not (= (rec__tagged_discr__t__z2 (us_split_fields5 v)) true))
     (ite (or
          (= (to_rep2 (rec__tagged_discr__t__discr (us_split_discrs3 v))) 0)
          (= (to_rep2 (rec__tagged_discr__t__discr (us_split_discrs3 v))) 2))
     (= (to_rep (rec__tagged_discr__t__x2 (us_split_fields5 v))) 0) (eq
     (to_rep1 (rec__tagged_discr__t__y2 (us_split_fields5 v))) fliteral)))
     (= (to_rep (rec__tagged_discr__u1__w (us_split_fields5 v))) 0))) :pattern (
  (is_zero__2 v)) )))

(declare-const v__split_fields integer)

(declare-const v__split_fields1 integer)

(declare-const v__split_fields2 float)

(declare-const v__split_fields3 Bool)

(declare-const v__split_fields4 integer)

(declare-const v__split_fields5 float)

(declare-const v__split_fields6 us_private)

(declare-const o e)

(declare-const o1 integer)

(declare-const o2 Bool)

(declare-const o3 integer)

(declare-const o4 float)

(declare-const o5 us_private)

(declare-const o6 e)

(declare-const tagged_discr__init__3__R12b__assume e)

(declare-const tagged_discr__init__3__R12b__assume1 Bool)

(declare-const tagged_discr__init__3__R12b__assume2 integer)

(declare-const tagged_discr__init__3__R12b__assume3 float)

(declare-const tagged_discr__init__3__R12b__assume4 us_private)

(declare-const tagged_discr__init__3__R12b__assume5 Int)

(declare-const o7 float)

(declare-const o8 integer)

(declare-const o9 integer)

(declare-const o10 integer)

(declare-const o11 integer)

(declare-const o12 float)

(declare-const o13 Bool)

(declare-const o14 integer)

(declare-const o15 float)

(declare-const o16 us_private)

(declare-const temp___227 e)

(declare-const temp___2271 integer)

(declare-const temp___2272 integer)

(declare-const temp___2273 float)

(declare-const temp___2274 Bool)

(declare-const temp___2275 integer)

(declare-const temp___2276 float)

(declare-const temp___2277 us_private)

(declare-const temp___2278 Int)

(declare-const usq_ e)

(declare-const usq_1 integer)

(declare-const usq_2 integer)

(declare-const usq_3 float)

(declare-const usq_4 Bool)

(declare-const usq_5 integer)

(declare-const usq_6 float)

(declare-const usq_7 us_private)

(declare-const usq_8 Int)

(declare-const temp___229 e)

(declare-const temp___2291 integer)

(declare-const temp___2292 integer)

(declare-const temp___2293 float)

(declare-const temp___2294 Bool)

(declare-const temp___2295 integer)

(declare-const temp___2296 float)

(declare-const temp___2297 us_private)

(declare-const temp___2298 Int)

(declare-const result integer)

(declare-const result1 integer)

(declare-const result2 float)

(declare-const result3 Bool)

(declare-const result4 integer)

(declare-const result5 float)

(declare-const result6 us_private)

(declare-const v__split_fields7 integer)

(declare-const v__split_fields8 integer)

(declare-const v__split_fields9 float)

(declare-const v__split_fields10 Bool)

(declare-const v__split_fields11 integer)

(declare-const v__split_fields12 float)

(declare-const v__split_fields13 us_private)

(declare-const v__split_fields14 integer)

(declare-const v__split_fields15 integer)

(declare-const v__split_fields16 float)

(declare-const v__split_fields17 Bool)

(declare-const v__split_fields18 integer)

(declare-const v__split_fields19 float)

(declare-const v__split_fields20 us_private)

(declare-const v__split_fields21 us_split_fields2)

;; H
  (assert (= (to_rep2 (rec__tagged_discr__t__discr v__split_discrs)) 0))

;; H
  (assert (= (to_rep2 (rec__tagged_discr__t__discr v__split_discrs)) r10b))

;; H
  (assert (in_range3 r10b))

;; H
  (assert (= (to_rep o1) 0))

;; H
  (assert (= (of_int1 0) o2))

;; H
  (assert (= o1 o3))

;; H
  (assert (= dummy1 o4))

;; H
  (assert (= us_null_ext__ o5))

;; H
  (assert (= (to_rep2 o) 0))

;; H
  (assert (= o o6))

;; H
  (assert (= tagged_discr__init__3__R12b__assume o6))

;; H
  (assert (= tagged_discr__init__3__R12b__assume1 o2))

;; H
  (assert (= tagged_discr__init__3__R12b__assume2 o3))

;; H
  (assert (= tagged_discr__init__3__R12b__assume3 o4))

;; H
  (assert (= tagged_discr__init__3__R12b__assume4 o5))

;; H
  (assert (= us_tag3 tagged_discr__init__3__R12b__assume5))

;; H
  (assert
  (= (mk___rep (mk___split_discrs tagged_discr__init__3__R12b__assume)
     (mk___split_fields tagged_discr__init__3__R12b__assume1
     tagged_discr__init__3__R12b__assume2
     tagged_discr__init__3__R12b__assume3
     tagged_discr__init__3__R12b__assume4) us_tag3) r12b))

;; H
  (assert
  (= 0 (to_rep2 (rec__tagged_discr__t__discr (us_split_discrs1 r12b)))))

;; H
  (assert (= (to_rep1 o7) fliteral))

;; H
  (assert (= (to_rep o8) 0))

;; H
  (assert (= (to_rep o9) 0))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= o7 o12))

;; H
  (assert (= (rec__tagged_discr__t__z (us_split_fields1 r12b)) o13))

;; H
  (assert (= (rec__tagged_discr__t__x (us_split_fields1 r12b)) o14))

;; H
  (assert (= (rec__tagged_discr__t__y (us_split_fields1 r12b)) o15))

;; H
  (assert (= us_null_ext__ o16))

;; H
  (assert (= (us_split_discrs1 r12b) (mk___split_discrs temp___227)))

;; H
  (assert (= temp___2271 o10))

;; H
  (assert (= temp___2272 o11))

;; H
  (assert (= temp___2273 o12))

;; H
  (assert (= temp___2274 o13))

;; H
  (assert (= temp___2275 o14))

;; H
  (assert (= temp___2276 o15))

;; H
  (assert (= temp___2277 o16))

;; H
  (assert (= us_tag2 temp___2278))

;; H
  (assert (= temp___227 (rec__tagged_discr__t__discr v__split_discrs)))

;; H
  (assert
  (= (mk___rep1 (mk___split_discrs usq_)
     (mk___split_fields1 usq_1 usq_2 usq_3 usq_4 usq_5 usq_6 usq_7) usq_8)
  (mk___rep1 (mk___split_discrs temp___227)
  (mk___split_fields1 temp___2271 temp___2272 temp___2273 temp___2274
  temp___2275 temp___2276 temp___2277) temp___2278)))

;; H
  (assert (= usq_ temp___229))

;; H
  (assert (= usq_1 temp___2291))

;; H
  (assert (= usq_2 temp___2292))

;; H
  (assert (= usq_3 temp___2293))

;; H
  (assert (= usq_4 temp___2294))

;; H
  (assert (= usq_5 temp___2295))

;; H
  (assert (= usq_6 temp___2296))

;; H
  (assert (= usq_7 temp___2297))

;; H
  (assert (= v__attr__tag temp___2298))

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= result1 v__split_fields1))

;; H
  (assert (= result2 v__split_fields2))

;; H
  (assert (= result3 v__split_fields3))

;; H
  (assert (= result4 v__split_fields4))

;; H
  (assert (= result5 v__split_fields5))

;; H
  (assert (= result6 v__split_fields6))

;; H
  (assert (= temp___2291 v__split_fields7))

;; H
  (assert (= temp___2292 v__split_fields8))

;; H
  (assert (= temp___2293 v__split_fields9))

;; H
  (assert (= temp___2294 v__split_fields10))

;; H
  (assert (= temp___2295 v__split_fields11))

;; H
  (assert (= temp___2296 v__split_fields12))

;; H
  (assert (= temp___2297 v__split_fields13))

;; H
  (assert (= v__split_discrs (mk___split_discrs temp___229)))

;; H
  (assert (= v__split_fields14 v__split_fields7))

;; H
  (assert (= v__split_fields15 v__split_fields8))

;; H
  (assert (= v__split_fields16 v__split_fields9))

;; H
  (assert (= v__split_fields17 v__split_fields10))

;; H
  (assert (= v__split_fields18 v__split_fields11))

;; H
  (assert (= v__split_fields19 v__split_fields12))

;; H
  (assert (= v__split_fields20 v__split_fields13))

;; H
  (assert
  (= v__split_fields21 (mk___split_fields1 v__split_fields7 v__split_fields8
                       v__split_fields9 v__split_fields10 v__split_fields11
                       v__split_fields12 v__split_fields13)))

(assert
;; WP_parameter_def
 ;; File "tagged_discr.ads", line 52, characters 0-0
  (not
  (= (is_zero__3
     (mk___rep1 v__split_discrs
     (mk___split_fields1 v__split_fields14 v__split_fields15
     v__split_fields16 v__split_fields17 v__split_fields18 v__split_fields19
     v__split_fields20) v__attr__tag)) true)))
(check-sat)
(exit)
