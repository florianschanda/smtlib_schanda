;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int float))))))
(declare-fun slide ((Array Int float) Int Int) (Array Int float))

;; slide_eq
  (assert
  (forall ((a (Array Int float)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int float)) (a__first Int) (a__last Int)
  (b (Array Int float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int float)) (b (Array Int float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j)
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq1 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_155 Int)
                             (temp___idx_156 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_155)
                             (<= temp___idx_155 a__last))
                             (and (<= a__first_2 temp___idx_156)
                             (<= temp___idx_156 a__last_2)))
                             (= (to_rep1
                                (get a temp___idx_155 temp___idx_156))
                             (to_rep1
                             (get b (+ (- b__first a__first) temp___idx_155)
                             (+ (- b__first_2 a__first_2) temp___idx_156)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq1 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_155 Int) (temp___idx_156 Int))
  (=>
  (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2)))
  (= (to_rep1 (get a temp___idx_155 temp___idx_156)) (to_rep1
                                                     (get b
                                                     (+ (- b__first a__first) temp___idx_155)
                                                     (+ (- b__first_2 a__first_2) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c13b Float32)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const tolerance Float32)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun temp_____aggregate_def_241 (Float32 Float32 Float32 Float32
  Float32 Float32 Float32 Float32 Float32 Float32) (Array Int float))

(declare-fun temp_____aggregate_def_254 (Float32) (Array Int float))

(declare-fun temp_____aggregate_def_258 (Float32 Float32) (Array Int float))

(declare-fun temp_____aggregate_def_263 (Float32 Float32) (Array Int float))

(declare-fun temp_____aggregate_def_269 (Float32) (Array Int float))

(declare-fun temp_____aggregate_def_273 (Int Int Int Int Int Int Int Int Int
  Int Int Int) map1)

(declare-fun temp_____aggregate_def_289 (Int Int Int Int Int Int Int Int Int
  Int Int Int) map1)

(declare-fun temp_____aggregate_def_305 (Int Int Int Int Int) map1)

(declare-fun temp_____aggregate_def_314 (Int) map1)

(declare-fun temp_____aggregate_def_319 (Int) map1)

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

;; def_axiom
  (assert
  (forall ((temp___243 Float32) (temp___244 Float32) (temp___245 Float32)
  (temp___246 Float32) (temp___247 Float32) (temp___248 Float32)
  (temp___249 Float32) (temp___250 Float32) (temp___251 Float32)
  (temp___252 Float32))
  (let ((temp___242 (temp_____aggregate_def_241 temp___243 temp___244
                    temp___245 temp___246 temp___247 temp___248 temp___249
                    temp___250 temp___251 temp___252)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant temp___243 true true true true) (dynamic_invariant
  temp___244 true true true true)) (dynamic_invariant temp___245 true true
  true true)) (dynamic_invariant temp___246 true true true true))
  (dynamic_invariant temp___247 true true true true)) (dynamic_invariant
  temp___248 true true true true)) (dynamic_invariant temp___249 true true
  true true)) (dynamic_invariant temp___250 true true true true))
  (dynamic_invariant temp___251 true true true true)) (dynamic_invariant
  temp___252 true true true true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (to_rep (select temp___242 1)) temp___243)
  (= (to_rep (select temp___242 2)) temp___244))
  (= (to_rep (select temp___242 3)) temp___245))
  (= (to_rep (select temp___242 4)) temp___246))
  (= (to_rep (select temp___242 5)) temp___247))
  (= (to_rep (select temp___242 6)) temp___248))
  (= (to_rep (select temp___242 7)) temp___249))
  (= (to_rep (select temp___242 8)) temp___250))
  (= (to_rep (select temp___242 9)) temp___251))
  (= (to_rep (select temp___242 10)) temp___252))))))

;; def_axiom
  (assert
  (forall ((temp___256 Float32))
  (=> (dynamic_invariant temp___256 true true true true)
  (forall ((temp___257 Int))
  (= (to_rep (select (temp_____aggregate_def_254 temp___256) temp___257)) temp___256)))))

;; def_axiom
  (assert
  (forall ((temp___260 Float32) (temp___261 Float32))
  (let ((temp___259 (temp_____aggregate_def_258 temp___260 temp___261)))
  (=>
  (and (dynamic_invariant temp___260 true true true true) (dynamic_invariant
  temp___261 true true true true))
  (forall ((temp___262 Int))
  (ite (and (<= 6 temp___262) (<= temp___262 10))
  (= (to_rep (select temp___259 temp___262)) temp___261)
  (=> (and (<= 1 temp___262) (<= temp___262 5))
  (= (to_rep (select temp___259 temp___262)) temp___260))))))))

;; def_axiom
  (assert
  (forall ((temp___265 Float32) (temp___266 Float32))
  (let ((temp___264 (temp_____aggregate_def_263 temp___265 temp___266)))
  (=>
  (and (dynamic_invariant temp___265 true true true true) (dynamic_invariant
  temp___266 true true true true))
  (forall ((temp___267 Int))
  (ite (or
       (or (or (or (= temp___267 1) (= temp___267 3)) (= temp___267 5))
       (= temp___267 7)) (= temp___267 9))
  (= (to_rep (select temp___264 temp___267)) temp___265)
  (= (to_rep (select temp___264 temp___267)) temp___266)))))))

;; def_axiom
  (assert
  (forall ((temp___271 Float32))
  (=> (dynamic_invariant temp___271 true true true true)
  (forall ((temp___272 Int))
  (= (to_rep (select (temp_____aggregate_def_269 temp___271) temp___272)) temp___271)))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 2))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 3))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 4))

(declare-const rliteral4 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral4) 5))

(declare-const rliteral5 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral5) 6))

(declare-const rliteral6 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral6) 7))

(declare-const rliteral7 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral7) 8))

(declare-const rliteral8 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral8) 9))

;; def_axiom
  (assert
  (forall ((temp___275 Int) (temp___276 Int) (temp___277 Int)
  (temp___278 Int) (temp___279 Int) (temp___280 Int) (temp___281 Int)
  (temp___282 Int) (temp___283 Int) (temp___284 Int) (temp___285 Int)
  (temp___286 Int))
  (let ((temp___274 (temp_____aggregate_def_273 temp___275 temp___276
                    temp___277 temp___278 temp___279 temp___280 temp___281
                    temp___282 temp___283 temp___284 temp___285 temp___286)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant1 temp___275 true true true true)
  (dynamic_invariant1 temp___276 true true true true)) (dynamic_invariant1
  temp___277 true true true true)) (dynamic_invariant1 temp___278 true true
  true true)) (dynamic_invariant1 temp___279 true true true true))
  (dynamic_invariant1 temp___280 true true true true)) (dynamic_invariant1
  temp___281 true true true true)) (dynamic_invariant1 temp___282 true true
  true true)) (dynamic_invariant1 temp___283 true true true true))
  (dynamic_invariant1 temp___284 true true true true)) (dynamic_invariant1
  temp___285 true true true true)) (dynamic_invariant1 temp___286 true true
  true true))
  (and
  (and
  (and
  (and
  (and (= (get temp___274 (- 1) 1) rliteral)
  (= (get temp___274 (- 1) 2) rliteral1))
  (= (get temp___274 (- 1) 3) rliteral2))
  (= (get temp___274 (- 1) 4) rliteral3))
  (and
  (and
  (and (= (get temp___274 0 1) rliteral4) (= (get temp___274 0 2) rliteral5))
  (= (get temp___274 0 3) rliteral6)) (= (get temp___274 0 4) rliteral7)))
  (and
  (and
  (and (= (get temp___274 1 1) rliteral8) (= (get temp___274 1 2) rliteral7))
  (= (get temp___274 1 3) rliteral6)) (= (get temp___274 1 4) rliteral5)))))))

;; def_axiom
  (assert
  (forall ((temp___291 Int) (temp___292 Int) (temp___293 Int)
  (temp___294 Int) (temp___295 Int) (temp___296 Int) (temp___297 Int)
  (temp___298 Int) (temp___299 Int) (temp___300 Int) (temp___301 Int)
  (temp___302 Int))
  (let ((temp___290 (temp_____aggregate_def_289 temp___291 temp___292
                    temp___293 temp___294 temp___295 temp___296 temp___297
                    temp___298 temp___299 temp___300 temp___301 temp___302)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant1 temp___291 true true true true)
  (dynamic_invariant1 temp___292 true true true true)) (dynamic_invariant1
  temp___293 true true true true)) (dynamic_invariant1 temp___294 true true
  true true)) (dynamic_invariant1 temp___295 true true true true))
  (dynamic_invariant1 temp___296 true true true true)) (dynamic_invariant1
  temp___297 true true true true)) (dynamic_invariant1 temp___298 true true
  true true)) (dynamic_invariant1 temp___299 true true true true))
  (dynamic_invariant1 temp___300 true true true true)) (dynamic_invariant1
  temp___301 true true true true)) (dynamic_invariant1 temp___302 true true
  true true))
  (and
  (and
  (and
  (and
  (and (= (get temp___290 (- 1) 1) rliteral)
  (= (get temp___290 (- 1) 2) rliteral1))
  (= (get temp___290 (- 1) 3) rliteral2))
  (= (get temp___290 (- 1) 4) rliteral3))
  (and
  (and
  (and (= (get temp___290 0 1) rliteral4) (= (get temp___290 0 2) rliteral5))
  (= (get temp___290 0 3) rliteral6)) (= (get temp___290 0 4) rliteral7)))
  (and
  (and
  (and (= (get temp___290 1 1) rliteral8) (= (get temp___290 1 2) rliteral7))
  (= (get temp___290 1 3) rliteral6)) (= (get temp___290 1 4) rliteral5)))))))

;; def_axiom
  (assert
  (forall ((temp___307 Int) (temp___308 Int) (temp___309 Int)
  (temp___310 Int) (temp___311 Int))
  (let ((temp___306 (temp_____aggregate_def_305 temp___307 temp___308
                    temp___309 temp___310 temp___311)))
  (=>
  (and
  (and
  (and
  (and (dynamic_invariant1 temp___307 true true true true)
  (dynamic_invariant1 temp___308 true true true true)) (dynamic_invariant1
  temp___309 true true true true)) (dynamic_invariant1 temp___310 true true
  true true)) (dynamic_invariant1 temp___311 true true true true))
  (forall ((temp___312 Int) (temp___313 Int))
  (ite (= temp___312 1)
  (ite (= temp___313 2) (= (get temp___306 temp___312 temp___313) rliteral4)
  (= (get temp___306 temp___312 temp___313) rliteral6))
  (ite (= temp___312 0)
  (ite (= temp___313 4) (= (get temp___306 temp___312 temp___313) rliteral5)
  (=> (and (<= 1 temp___313) (<= temp___313 3))
  (= (get temp___306 temp___312 temp___313) rliteral2)))
  (=> (= temp___312 (- 1))
  (= (get temp___306 temp___312 temp___313) rliteral1)))))))))

(declare-const rliteral9 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral9) 0))

;; def_axiom
  (assert
  (forall ((temp___316 Int))
  (=> (dynamic_invariant1 temp___316 true true true true)
  (forall ((temp___317 Int) (temp___318 Int))
  (= (get (temp_____aggregate_def_314 temp___316) temp___317 temp___318)
  rliteral9)))))

;; def_axiom
  (assert
  (forall ((temp___321 Int))
  (=> (dynamic_invariant1 temp___321 true true true true)
  (forall ((temp___322 Int) (temp___323 Int))
  (= (get (temp_____aggregate_def_319 temp___321) temp___322 temp___323)
  rliteral9)))))

(declare-const small (Array Int float))

(declare-const a Float32)

(declare-const b Float32)

(declare-const c14b Float32)

(declare-const approx Float32)

(declare-const o Float32)

(declare-const o1 Float32)

(declare-const o2 Float32)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const result Float32)

(declare-const a1 Float32)

(declare-const result1 Float32)

(declare-const b1 Float32)

(declare-const result2 (Array Int float))

(declare-const small1 (Array Int float))

(declare-const result3 (Array Int float))

(declare-const small2 (Array Int float))

(declare-const result4 (Array Int float))

(declare-const small3 (Array Int float))

(declare-const result5 (Array Int float))

(declare-const small4 (Array Int float))

(declare-const result6 Float32)

(declare-const approx1 Float32)

(declare-const result7 Bool)

(declare-const approx2 Float32)

(declare-const result8 Float32)

(declare-const approx3 Float32)

;; H
  (assert (= result a))

;; H
  (assert (= a1 (fp #b0 #b10000011 #b01110110011001100110011)))

;; H
  (assert (fp.isFinite32 a1))

;; H
  (assert (= result1 b))

;; H
  (assert (= b1 (fp #b0 #b10000011 #b00111110011001100110011)))

;; H
  (assert (fp.isFinite32 b1))

;; H
  (assert (= result2 small))

;; H
  (assert
  (= small1 (temp_____aggregate_def_241
            (fp #b0 #b00000000 #b00000000000000000000000)
            (fp #b0 #b01111111 #b00000000000000000000000)
            (fp #b0 #b10000000 #b00000000000000000000000)
            (fp #b0 #b10000000 #b10000000000000000000000)
            (fp #b0 #b10000001 #b00000000000000000000000)
            (fp #b0 #b10000001 #b01000000000000000000000)
            (fp #b0 #b10000001 #b00000000000000000000000)
            (fp #b0 #b10000000 #b10000000000000000000000)
            (fp #b0 #b10000000 #b00000000000000000000000)
            (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result3 small1))

;; H
  (assert
  (= small2 (temp_____aggregate_def_254
            (fp #b0 #b00000000 #b00000000000000000000000))))

;; H
  (assert (= result4 small2))

;; H
  (assert
  (= small3 (temp_____aggregate_def_258
            (fp #b0 #b00000000 #b00000000000000000000000)
            (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= result5 small3))

;; H
  (assert
  (= small4 (temp_____aggregate_def_263
            (fp #b0 #b00000000 #b00000000000000000000000)
            (fp #b0 #b01111111 #b00000000000000000000000))))

;; H
  (assert (= b1 c13b))

;; H
  (assert (fp.isFinite32 c13b))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 c14b)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx)))

;; H
  (assert
  (= (fp.mul RNE (fp #b0 #b01101011 #b00001100011011110111101) c13b)
  tolerance))

;; H
  (assert (fp.isFinite32 tolerance))

;; H
  (assert (= (mk_t__ref result6) (mk_t__ref approx)))

;; H
  (assert
  (= approx1 (fp.div RNE c13b (fp #b0 #b10000000 #b00000000000000000000000))))

;; H
  (assert
  (and (= o (fp.mul RNE approx1 approx1))
  (fp.isFinite32 (fp.mul RNE approx1 approx1))))

;; H
  (assert (= o1 (fp.sub RNE c13b o)))

;; H
  (assert (and (= o2 o1) (fp.isFinite32 o1)))

;; H
  (assert (= o3 (fp.abs o2)))

;; H
  (assert (= result7 (ite (fp.lt tolerance o3) true false)))

;; H
  (assert (= result7 true))

;; H
  (assert
  (and
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 approx2))
  (fp.lt tolerance (fp.abs (fp.sub RNE c13b (fp.mul RNE approx2 approx2))))))

;; H
  (assert
  (and (= o4 (fp.div RNE c13b approx2))
  (fp.isFinite32 (fp.div RNE c13b approx2))))

;; H
  (assert (= o5 (fp.add RNE approx2 o4)))

;; H
  (assert (and (= o6 o5) (fp.isFinite32 o5)))

;; H
  (assert
  (= o7 (fp.mul RNE (fp #b0 #b01111110 #b00000000000000000000000) o6)))

;; H
  (assert (= approx2 result8))

;; H
  (assert (= approx3 o7))

(assert
;; WP_parameter_def
 ;; File "/home/florian/adacore/spark2014/testsuite/gnatprove/tests/spark_book/Chapter-02/build/gnatprove/aggregates.mlw", line 6457, characters 5-8
  (not (fp.isFinite32 (fp.mul RNE approx3 approx3))))
(check-sat)
(exit)
