;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort float 0)

(declare-fun user_eq1 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-fun to_rep (float) Float32)

(declare-fun of_rep (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__classwide__t__z Bool)(rec__classwide__t__x integer)(rec__classwide__t__y float)(rec__ext__ us_private)))))
(define-fun us_split_fields_Z__projection ((a us_split_fields)) Bool
  (rec__classwide__t__z a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__classwide__t__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) float
  (rec__classwide__t__y a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (rec__classwide__t__z (us_split_fields1 a))
                        (rec__classwide__t__z (us_split_fields1 b)))
                        (= (to_rep1
                           (rec__classwide__t__x (us_split_fields1 a)))
                        (to_rep1 (rec__classwide__t__x (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__classwide__t__y (us_split_fields1 a)))
                        (to_rep (rec__classwide__t__y (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const classwide__t__z__first__bit Int)

(declare-const classwide__t__z__last__bit Int)

(declare-const classwide__t__z__position Int)

;; classwide__t__z__first__bit_axiom
  (assert (<= 0 classwide__t__z__first__bit))

;; classwide__t__z__last__bit_axiom
  (assert (< classwide__t__z__first__bit classwide__t__z__last__bit))

;; classwide__t__z__position_axiom
  (assert (<= 0 classwide__t__z__position))

(declare-const classwide__t__x__first__bit Int)

(declare-const classwide__t__x__last__bit Int)

(declare-const classwide__t__x__position Int)

;; classwide__t__x__first__bit_axiom
  (assert (<= 0 classwide__t__x__first__bit))

;; classwide__t__x__last__bit_axiom
  (assert (< classwide__t__x__first__bit classwide__t__x__last__bit))

;; classwide__t__x__position_axiom
  (assert (<= 0 classwide__t__x__position))

(declare-const classwide__t__y__first__bit Int)

(declare-const classwide__t__y__last__bit Int)

(declare-const classwide__t__y__position Int)

;; classwide__t__y__first__bit_axiom
  (assert (<= 0 classwide__t__y__first__bit))

;; classwide__t__y__last__bit_axiom
  (assert (< classwide__t__y__first__bit classwide__t__y__last__bit))

;; classwide__t__y__position_axiom
  (assert (<= 0 classwide__t__y__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((u1__ref (mk_u1__ref (u1__content us_rep)))))
(define-fun u1__ref___projection ((a u1__ref)) us_rep (u1__content a))

(declare-fun is_zero__2 (us_rep) Bool)

(declare-fun is_zero__2__function_guard (Bool us_rep) Bool)

(declare-fun is_zero__21 (Int us_rep) Bool)

(declare-fun is_zero__2__function_guard1 (Bool Int us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_192 us_rep)
  (temp___skip_top_level_193 Bool)) Bool (= (attr__tag temp___expr_192)
  us_tag))

;; is_zero__2__post_axiom
  (assert true)

;; is_zero__2__post__dispatch_axiom
  (assert true)

;; classwide__u1__compat_axiom
  (assert
  (forall ((v us_rep))
  (! (= (ite (is_zero__2 v) 1 0) (ite (is_zero__21 us_tag v) 1 0)) :pattern (
  (is_zero__21 us_tag v)) )))

;; is_zero__2__def_axiom
  (assert
  (forall ((v us_rep))
  (! (= (= (is_zero__2 v) true)
     (and
     (and (not (= (rec__classwide__t__z (us_split_fields1 v)) true))
     (= (to_rep1 (rec__classwide__t__x (us_split_fields1 v))) 0))
     (fp.eq (to_rep (rec__classwide__t__y (us_split_fields1 v))) (fp #b0 #b00000000 #b00000000000000000000000)))) :pattern (
  (is_zero__2 v)) )))

(declare-const v__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(declare-const v__split_fields us_private)

(declare-const o float)

(declare-const o1 Bool)

(declare-const o2 integer)

(declare-const o3 float)

(declare-const o4 us_private)

(declare-const temp___237 Bool)

(declare-const temp___2371 integer)

(declare-const temp___2372 float)

(declare-const temp___2373 us_private)

(declare-const v__split_fields1 Bool)

(declare-const v__split_fields2 us_private)

(declare-const v__split_fields3 Bool)

(declare-const v__split_fields4 integer)

(declare-const v__split_fields5 us_private)

(declare-const v__split_fields6 Bool)

(declare-const v__split_fields7 integer)

(declare-const v__split_fields8 float)

(declare-const v__split_fields9 us_private)

(declare-const v__split_fields10 Bool)

(declare-const v__split_fields11 integer)

(declare-const v__split_fields12 float)

(declare-const v__split_fields13 us_private)

;; H
  (assert (= v__split_fields v__split_fields2))

;; H
  (assert (= (distinct 0 0) v__split_fields1))

;; H
  (assert (= v__split_fields1 v__split_fields3))

;; H
  (assert (= v__split_fields2 v__split_fields5))

;; H
  (assert (= v__split_fields3 o1))

;; H
  (assert (= rliteral v__split_fields4))

;; H
  (assert (= v__split_fields4 o2))

;; H
  (assert (= v__split_fields5 o4))

;; H
  (assert (= (to_rep o) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= o o3))

;; H
  (assert (= temp___237 o1))

;; H
  (assert (= temp___2371 o2))

;; H
  (assert (= temp___2372 o3))

;; H
  (assert (= temp___2373 o4))

;; H
  (assert (= temp___237 v__split_fields6))

;; H
  (assert (= temp___2371 v__split_fields7))

;; H
  (assert (= temp___2372 v__split_fields8))

;; H
  (assert (= temp___2373 v__split_fields9))

;; H
  (assert (= v__split_fields10 v__split_fields6))

;; H
  (assert (= v__split_fields11 v__split_fields7))

;; H
  (assert (= v__split_fields12 v__split_fields8))

;; H
  (assert (= v__split_fields13 v__split_fields9))

(assert
;; WP_parameter_def
 ;; File "classwide.ads", line 66, characters 0-0
  (not
  (= (is_zero__2
     (mk___rep
     (mk___split_fields v__split_fields10 v__split_fields11 v__split_fields12
     v__split_fields13) v__attr__tag)) true)))
(check-sat)
(exit)
