;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort ft 0)

(declare-fun user_eq (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy ft)

(declare-datatypes () ((ft__ref (mk_ft__ref (ft__content ft)))))
(define-fun ft__ref___projection ((a ft__ref)) ft (ft__content a))

(define-fun dynamic_invariant ((temp___expr_160 Float32)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_160)))

(declare-fun to_rep (ft) Float32)

(declare-fun of_rep (Float32) ft)

;; inversion_axiom
  (assert
  (forall ((x ft)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x ft)) (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__float_tests__test_record_1__rec__a ft)(rec__foo__float_tests__test_record_1__rec__b ft)(rec__foo__float_tests__test_record_1__rec__c ft)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) ft (rec__foo__float_tests__test_record_1__rec__a
                                                                   a))

(define-fun us_split_fields_B__projection ((a us_split_fields)) ft (rec__foo__float_tests__test_record_1__rec__b
                                                                   a))

(define-fun us_split_fields_C__projection ((a us_split_fields)) ft (rec__foo__float_tests__test_record_1__rec__c
                                                                   a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__a
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__b
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__c
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const foo__float_tests__test_record_1__rec__a__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__a__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__a__position Int)

;; foo__float_tests__test_record_1__rec__a__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__first__bit))

;; foo__float_tests__test_record_1__rec__a__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__a__first__bit foo__float_tests__test_record_1__rec__a__last__bit))

;; foo__float_tests__test_record_1__rec__a__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__position))

(declare-const foo__float_tests__test_record_1__rec__b__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__b__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__b__position Int)

;; foo__float_tests__test_record_1__rec__b__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__first__bit))

;; foo__float_tests__test_record_1__rec__b__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__b__first__bit foo__float_tests__test_record_1__rec__b__last__bit))

;; foo__float_tests__test_record_1__rec__b__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__position))

(declare-const foo__float_tests__test_record_1__rec__c__first__bit Int)

(declare-const foo__float_tests__test_record_1__rec__c__last__bit Int)

(declare-const foo__float_tests__test_record_1__rec__c__position Int)

;; foo__float_tests__test_record_1__rec__c__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__first__bit))

;; foo__float_tests__test_record_1__rec__c__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__c__first__bit foo__float_tests__test_record_1__rec__c__last__bit))

;; foo__float_tests__test_record_1__rec__c__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y Float32)

(declare-const o ft)

(declare-const o1 ft)

(declare-const o2 ft)

(declare-const o3 ft)

(declare-const temp___239 ft)

(declare-const o4 ft)

(declare-const o5 ft)

(declare-const temp___241 ft)

(declare-const r__split_fields ft)

(declare-const r__split_fields1 ft)

(declare-const y1 Float32)

(declare-const y2 Float32)

;; H
  (assert (fp.isFinite32 x))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (fp.isFinite32 y)))

;; H
  (assert (= (to_rep o) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep o1) x))

;; H
  (assert (= o1 o3))

;; H
  (assert (= (to_rep o2) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= temp___239 o3))

;; H
  (assert (= temp___239 r__split_fields))

;; H
  (assert (= (to_rep o4) (to_rep r__split_fields)))

;; H
  (assert (= o4 o5))

;; H
  (assert (= temp___241 o5))

;; H
  (assert (= temp___241 r__split_fields1))

;; H
  (assert (= y1 (to_rep r__split_fields1)))

;; H
  (assert (= y1 y2))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.adb", line 398, characters 0-0
  (not (fp.eq x y2)))
(check-sat)
(exit)
