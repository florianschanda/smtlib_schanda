;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort ft 0)

(declare-fun user_eq (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () ft)

(declare-datatypes () ((ft__ref (mk_ft__ref (ft__content ft)))))
(define-fun ft__ref___projection ((a ft__ref)) ft (ft__content a))

(define-fun dynamic_invariant ((temp___expr_137 Float32)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_137) (fp.isNaN temp___expr_137)))))

(declare-fun to_rep (ft) Float32)

(declare-fun of_rep (Float32) ft)

;; inversion_axiom
  (assert
  (forall ((x ft)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x ft))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-fun x () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__float_tests__test_record_1__rec__a ft)(rec__foo__float_tests__test_record_1__rec__b ft)(rec__foo__float_tests__test_record_1__rec__c ft)))))
(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__a
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__b
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__foo__float_tests__test_record_1__rec__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__foo__float_tests__test_record_1__rec__c
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun foo__float_tests__test_record_1__rec__a__first__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__a__last__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__a__position () Int)

;; foo__float_tests__test_record_1__rec__a__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__first__bit))

;; foo__float_tests__test_record_1__rec__a__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__a__first__bit foo__float_tests__test_record_1__rec__a__last__bit))

;; foo__float_tests__test_record_1__rec__a__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__a__position))

(declare-fun foo__float_tests__test_record_1__rec__b__first__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__b__last__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__b__position () Int)

;; foo__float_tests__test_record_1__rec__b__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__first__bit))

;; foo__float_tests__test_record_1__rec__b__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__b__first__bit foo__float_tests__test_record_1__rec__b__last__bit))

;; foo__float_tests__test_record_1__rec__b__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__b__position))

(declare-fun foo__float_tests__test_record_1__rec__c__first__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__c__last__bit () Int)

(declare-fun foo__float_tests__test_record_1__rec__c__position () Int)

;; foo__float_tests__test_record_1__rec__c__first__bit_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__first__bit))

;; foo__float_tests__test_record_1__rec__c__last__bit_axiom
  (assert
  (< foo__float_tests__test_record_1__rec__c__first__bit foo__float_tests__test_record_1__rec__c__last__bit))

;; foo__float_tests__test_record_1__rec__c__position_axiom
  (assert (<= 0 foo__float_tests__test_record_1__rec__c__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun y () Float32)

(declare-fun r__split_fields () ft)

(declare-fun r__split_fields1 () ft)

(declare-fun r__split_fields2 () ft)

(declare-fun o () ft)

(declare-fun o1 () ft)

(declare-fun o2 () ft)

(declare-fun o3 () ft)

(declare-fun o4 () ft)

(declare-fun o5 () ft)

(declare-fun temp___206 () ft)

(declare-fun temp___2061 () ft)

(declare-fun temp___2062 () ft)

(declare-fun o6 () ft)

(declare-fun o7 () ft)

(declare-fun o8 () ft)

(declare-fun o9 () ft)

(declare-fun temp___208 () ft)

(declare-fun temp___2081 () ft)

(declare-fun temp___2082 () ft)

(declare-fun result () ft)

(declare-fun result1 () ft)

(declare-fun result2 () ft)

(declare-fun r__split_fields3 () ft)

(declare-fun r__split_fields4 () ft)

(declare-fun r__split_fields5 () ft)

(declare-fun result3 () ft)

(declare-fun result4 () ft)

(declare-fun result5 () ft)

(declare-fun r__split_fields6 () ft)

(declare-fun r__split_fields7 () ft)

(declare-fun r__split_fields8 () ft)

(declare-fun result6 () Float32)

(declare-fun y1 () Float32)

(declare-fun y2 () Float32)

(declare-fun r__split_fields9 () ft)

(declare-fun r__split_fields10 () ft)

(declare-fun r__split_fields11 () ft)

(declare-fun y3 () Float32)

(declare-fun r__split_fields12 () ft)

(declare-fun r__split_fields13 () ft)

(declare-fun r__split_fields14 () ft)

;; H
  (assert (not (or (fp.isInfinite x) (fp.isNaN x))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite y) (fp.isNaN y)))))

;; H
  (assert (= (to_rep o) (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (= (to_rep o1) x))

;; H
  (assert (= (to_rep o2) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= o2 o3))

;; H
  (assert (= o1 o4))

;; H
  (assert (= o o5))

;; H
  (assert (= temp___206 o3))

;; H
  (assert (= temp___2061 o4))

;; H
  (assert (= temp___2062 o5))

;; H
  (assert (= result r__split_fields))

;; H
  (assert (= result1 r__split_fields1))

;; H
  (assert (= result2 r__split_fields2))

;; H
  (assert (= temp___206 r__split_fields3))

;; H
  (assert (= temp___2061 r__split_fields4))

;; H
  (assert (= temp___2062 r__split_fields5))

;; H
  (assert (= (to_rep o6) (to_rep r__split_fields4)))

;; H
  (assert (= o6 o7))

;; H
  (assert (= r__split_fields4 o8))

;; H
  (assert (= r__split_fields5 o9))

;; H
  (assert (= temp___208 o7))

;; H
  (assert (= temp___2081 o8))

;; H
  (assert (= temp___2082 o9))

;; H
  (assert (= result3 r__split_fields3))

;; H
  (assert (= result4 r__split_fields4))

;; H
  (assert (= result5 r__split_fields5))

;; H
  (assert (= temp___208 r__split_fields6))

;; H
  (assert (= temp___2081 r__split_fields7))

;; H
  (assert (= temp___2082 r__split_fields8))

;; H
  (assert (= result6 y))

;; H
  (assert (= y1 (to_rep r__split_fields6)))

;; H
  (assert (= r__split_fields9 r__split_fields6))

;; H
  (assert (= r__split_fields10 r__split_fields7))

;; H
  (assert (= r__split_fields11 r__split_fields8))

;; H
  (assert (= y1 y2))

;; H
  (assert (= r__split_fields12 r__split_fields6))

;; H
  (assert (= r__split_fields13 r__split_fields7))

;; H
  (assert (= r__split_fields14 r__split_fields8))

;; H
  (assert (= y3 y1))

(assert
;; WP_parameter_def
 ;; File "generic_float_tests.adb", line 398, characters 0-0
  (not (fp.eq x y2)))
(check-sat)
