;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (or (fp.isZero x) (fp.isSubnormal x) (fp.isNormal x)))
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0)) x)
                                     (<= x (* 9007199254740991.0 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float64) Bool)

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 Float64)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort long_float 0)

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy long_float)

(declare-datatypes ((long_float__ref 0))
(((mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float
  (long_float__content a))

(declare-fun to_rep (long_float) Float64)

(declare-fun of_rep (Float64) long_float)

;; inversion_axiom
  (assert
  (forall ((x long_float))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x long_float))
  (! (fp.isFinite64 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (fp.isFinite64 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned_16 unsigned_16) Bool)

(declare-const dummy1 unsigned_16)

(declare-datatypes ((unsigned_16__ref 0))
(((mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16
  (unsigned_16__content a))

(declare-fun to_rep1 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep1 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x unsigned_16)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__logger__log_entry__ngrotations unsigned_16)(rec__logger__log_entry__ngclicktime unsigned_16)(rec__logger__log_entry__millisecs unsigned_16)(rec__logger__log_entry__estimatedgroundvelocity long_float)(rec__logger__log_entry__estimatedgroundvelocityisavailable Bool)))))
(define-fun us_split_fields_NGRotations__projection ((a us_split_fields)) unsigned_16
  (rec__logger__log_entry__ngrotations a))

(define-fun us_split_fields_NGClickTime__projection ((a us_split_fields)) unsigned_16
  (rec__logger__log_entry__ngclicktime a))

(define-fun us_split_fields_Millisecs__projection ((a us_split_fields)) unsigned_16
  (rec__logger__log_entry__millisecs a))

(define-fun us_split_fields_EstimatedGroundVelocityIsAvailable__projection ((a us_split_fields)) Bool
  (rec__logger__log_entry__estimatedgroundvelocityisavailable a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__logger__log_entry__ngrotations
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__ngrotations
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__logger__log_entry__ngclicktime
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__ngclicktime
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__logger__log_entry__millisecs
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__logger__log_entry__millisecs
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__logger__log_entry__estimatedgroundvelocity
                           (us_split_fields1 a))) (to_rep
                                                  (rec__logger__log_entry__estimatedgroundvelocity
                                                  (us_split_fields1 b)))))
                        (= (rec__logger__log_entry__estimatedgroundvelocityisavailable
                           (us_split_fields1 a)) (rec__logger__log_entry__estimatedgroundvelocityisavailable
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const logger__log_entry__ngrotations__first__bit Int)

(declare-const logger__log_entry__ngrotations__last__bit Int)

(declare-const logger__log_entry__ngrotations__position Int)

;; logger__log_entry__ngrotations__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngrotations__first__bit))

;; logger__log_entry__ngrotations__last__bit_axiom
  (assert
  (< logger__log_entry__ngrotations__first__bit logger__log_entry__ngrotations__last__bit))

;; logger__log_entry__ngrotations__position_axiom
  (assert (<= 0 logger__log_entry__ngrotations__position))

(declare-const logger__log_entry__ngclicktime__first__bit Int)

(declare-const logger__log_entry__ngclicktime__last__bit Int)

(declare-const logger__log_entry__ngclicktime__position Int)

;; logger__log_entry__ngclicktime__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__first__bit))

;; logger__log_entry__ngclicktime__last__bit_axiom
  (assert
  (< logger__log_entry__ngclicktime__first__bit logger__log_entry__ngclicktime__last__bit))

;; logger__log_entry__ngclicktime__position_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__position))

(declare-const logger__log_entry__millisecs__first__bit Int)

(declare-const logger__log_entry__millisecs__last__bit Int)

(declare-const logger__log_entry__millisecs__position Int)

;; logger__log_entry__millisecs__first__bit_axiom
  (assert (<= 0 logger__log_entry__millisecs__first__bit))

;; logger__log_entry__millisecs__last__bit_axiom
  (assert
  (< logger__log_entry__millisecs__first__bit logger__log_entry__millisecs__last__bit))

;; logger__log_entry__millisecs__position_axiom
  (assert (<= 0 logger__log_entry__millisecs__position))

(declare-const logger__log_entry__estimatedgroundvelocity__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__position Int)

;; logger__log_entry__estimatedgroundvelocity__first__bit_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__first__bit))

;; logger__log_entry__estimatedgroundvelocity__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocity__first__bit logger__log_entry__estimatedgroundvelocity__last__bit))

;; logger__log_entry__estimatedgroundvelocity__position_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__position))

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__position Int)

;; logger__log_entry__estimatedgroundvelocityisavailable__first__bit_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__first__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocityisavailable__first__bit
  logger__log_entry__estimatedgroundvelocityisavailable__last__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__position_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((log_entry__ref 0))
(((mk_log_entry__ref (log_entry__content us_rep)))))
(define-fun log_entry__ref___projection ((a log_entry__ref)) us_rep (log_entry__content
                                                                    a))

(declare-sort log_index 0)

(define-fun in_range2 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 599))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq3 (log_index log_index) Bool)

(declare-const dummy3 log_index)

(declare-datatypes ((log_index__ref 0))
(((mk_log_index__ref (log_index__content log_index)))))
(define-fun log_index__ref___projection ((a log_index__ref)) log_index
  (log_index__content a))

(define-fun dynamic_invariant ((temp___expr_213 (_ BitVec 16))
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)) Bool (=>
                                      (or (= temp___is_init_210 true)
                                      (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 599)))
                                      (in_range2 temp___expr_213)))

(declare-fun to_rep2 (log_index) (_ BitVec 16))

(declare-fun of_rep2 ((_ BitVec 16)) log_index)

;; inversion_axiom
  (assert
  (forall ((x log_index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x log_index)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x ((_ int2bv 16) 600))))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int4 ((x log_index)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x log_index)) (! (in_range_int
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 16) us_rep))))))
(declare-fun slide ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 16)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array (_ BitVec 16) us_rep))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) us_rep)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (bool_eq (select a temp___idx_132)
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (bvadd (bvsub b__first a__first) temp___idx_132))) true))))))))

(declare-sort t 0)

(declare-fun first (t) log_index)

(declare-fun last (t) log_index)

(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range2 low)
                             (and (in_range2 high)
                             (=> (bvule low high)
                             (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array (_ BitVec 16) us_rep))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) us_rep) (elts a))

(define-fun of_array ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2int (last1 a)) (bv2int (first1 a))) 1)
                                  0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((log_array__ref 0))
(((mk_log_array__ref (log_array__content us_t)))))
(define-fun log_array__ref___projection ((a log_array__ref)) us_t (log_array__content
                                                                  a))

(declare-sort t4s 0)

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 599))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq5 (t4s t4s) Bool)

(declare-const dummy5 t4s)

(declare-datatypes ((t4s__ref 0)) (((mk_t4s__ref (t4s__content t4s)))))
(define-fun t4s__ref___projection ((a t4s__ref)) t4s (t4s__content a))

(declare-const dummy6 (Array (_ BitVec 16) us_rep))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq6 ((Array (_ BitVec 16) us_rep)
  (Array (_ BitVec 16) us_rep)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__logger__log_database__data (Array (_ BitVec 16) us_rep))(rec__logger__log_database__first log_index)(rec__logger__log_database__last log_index)(rec__logger__log_database__empty Bool)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields2)) (Array (_ BitVec 16) us_rep)
  (rec__logger__log_database__data a))

(define-fun us_split_fields_First__projection ((a us_split_fields2)) log_index
  (rec__logger__log_database__first a))

(define-fun us_split_fields_Last__projection ((a us_split_fields2)) log_index
  (rec__logger__log_database__last a))

(define-fun us_split_fields_Empty__projection ((a us_split_fields2)) Bool
  (rec__logger__log_database__empty a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq1
                            (rec__logger__log_database__data
                            (us_split_fields3 a)) ((_ int2bv 16) 0)
                            ((_ int2bv 16) 599)
                            (rec__logger__log_database__data
                            (us_split_fields3 b)) ((_ int2bv 16) 0)
                            ((_ int2bv 16) 599)) true)
                         (= (to_rep2
                            (rec__logger__log_database__first
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__logger__log_database__first
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__logger__log_database__last
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__logger__log_database__last
                                                   (us_split_fields3 b)))))
                         (= (rec__logger__log_database__empty
                            (us_split_fields3 a)) (rec__logger__log_database__empty
                                                  (us_split_fields3 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const logger__log_database__data__first__bit Int)

(declare-const logger__log_database__data__last__bit Int)

(declare-const logger__log_database__data__position Int)

;; logger__log_database__data__first__bit_axiom
  (assert (<= 0 logger__log_database__data__first__bit))

;; logger__log_database__data__last__bit_axiom
  (assert
  (< logger__log_database__data__first__bit logger__log_database__data__last__bit))

;; logger__log_database__data__position_axiom
  (assert (<= 0 logger__log_database__data__position))

(declare-const logger__log_database__first__first__bit Int)

(declare-const logger__log_database__first__last__bit Int)

(declare-const logger__log_database__first__position Int)

;; logger__log_database__first__first__bit_axiom
  (assert (<= 0 logger__log_database__first__first__bit))

;; logger__log_database__first__last__bit_axiom
  (assert
  (< logger__log_database__first__first__bit logger__log_database__first__last__bit))

;; logger__log_database__first__position_axiom
  (assert (<= 0 logger__log_database__first__position))

(declare-const logger__log_database__last__first__bit Int)

(declare-const logger__log_database__last__last__bit Int)

(declare-const logger__log_database__last__position Int)

;; logger__log_database__last__first__bit_axiom
  (assert (<= 0 logger__log_database__last__first__bit))

;; logger__log_database__last__last__bit_axiom
  (assert
  (< logger__log_database__last__first__bit logger__log_database__last__last__bit))

;; logger__log_database__last__position_axiom
  (assert (<= 0 logger__log_database__last__position))

(declare-const logger__log_database__empty__first__bit Int)

(declare-const logger__log_database__empty__last__bit Int)

(declare-const logger__log_database__empty__position Int)

;; logger__log_database__empty__first__bit_axiom
  (assert (<= 0 logger__log_database__empty__first__bit))

;; logger__log_database__empty__last__bit_axiom
  (assert
  (< logger__log_database__empty__first__bit logger__log_database__empty__last__bit))

;; logger__log_database__empty__position_axiom
  (assert (<= 0 logger__log_database__empty__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((log_database__ref 0))
(((mk_log_database__ref (log_database__content us_rep1)))))
(define-fun log_database__ref___projection ((a log_database__ref)) us_rep1
  (log_database__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun log_size (us_split_fields2) Int)

(declare-fun log_size__function_guard (Int us_split_fields2) Bool)

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (natural natural) Bool)

(declare-const dummy8 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

;; log_size__post_axiom
  (assert
  (forall ((logger__event_log__fields us_split_fields2))
  (! (dynamic_invariant1 (log_size logger__event_log__fields) true false
  true) :pattern ((log_size logger__event_log__fields)) )))

;; log_size__def_axiom
  (assert
  (forall ((logger__event_log__fields us_split_fields2))
  (! (= (log_size logger__event_log__fields) (ite (= (rec__logger__log_database__empty
                                                     (us_split_fields3
                                                     (mk___rep1
                                                     logger__event_log__fields))) true)
                                             0
                                             (+ (bv2int (let ((temp___242 (bvsub
                                                        (to_rep2
                                                        (rec__logger__log_database__last
                                                        (us_split_fields3
                                                        (mk___rep1
                                                        logger__event_log__fields))))
                                                        (to_rep2
                                                        (rec__logger__log_database__first
                                                        (us_split_fields3
                                                        (mk___rep1
                                                        logger__event_log__fields)))))))
                                                        (ite (bvult (to_rep2
                                                                    (rec__logger__log_database__last
                                                                    (us_split_fields3
                                                                    (mk___rep1
                                                                    logger__event_log__fields))))
                                                        (to_rep2
                                                        (rec__logger__log_database__first
                                                        (us_split_fields3
                                                        (mk___rep1
                                                        logger__event_log__fields)))))
                                                        (bvadd temp___242 ((_ int2bv 16) 600))
                                                        temp___242))) 1))) :pattern (
  (log_size logger__event_log__fields)) )))

(define-fun dynamic_invariant2 ((temp___expr_57 Float64)
  (temp___is_init_54 Bool) (temp___skip_constant_55 Bool)
  (temp___do_toplevel_56 Bool)) Bool (=>
                                     (or (= temp___is_init_54 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_57)))

(define-fun dynamic_invariant3 ((temp___expr_166 (_ BitVec 16))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool true)

(declare-fun make_entry ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) Float64
  Bool) us_rep)

(declare-fun make_entry__function_guard (us_rep (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16) Float64 Bool) Bool)

;; make_entry__post_axiom
  (assert true)

;; make_entry__def_axiom
  (assert
  (forall ((ngrotations (_ BitVec 16)) (ngclicktime (_ BitVec 16))
  (millisecs (_ BitVec 16)))
  (forall ((estimatedgroundvelocity Float64))
  (forall ((estimatedgroundvelocityisavailable Bool))
  (! (=>
     (and
     (and
     (and (dynamic_invariant3 ngrotations true true true) (dynamic_invariant3
     ngclicktime true true true)) (dynamic_invariant3 millisecs true true
     true)) (dynamic_invariant2 estimatedgroundvelocity true true true))
     (= (make_entry ngrotations ngclicktime millisecs estimatedgroundvelocity
        estimatedgroundvelocityisavailable) (mk___rep
                                            (mk___split_fields
                                            (of_rep1 ngrotations)
                                            (of_rep1 ngclicktime)
                                            (of_rep1 millisecs)
                                            (of_rep estimatedgroundvelocity)
                                            estimatedgroundvelocityisavailable)))) :pattern (
  (make_entry ngrotations ngclicktime millisecs estimatedgroundvelocity
  estimatedgroundvelocityisavailable)) )))))

(declare-const tmp (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_property1 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 16))

(declare-fun user_eq9 (log_index log_index) Bool)

(declare-const dummy9 log_index)

(declare-datatypes ((tTresultSP1__ref 0))
(((mk_tTresultSP1__ref (tTresultSP1__content log_index)))))
(define-fun tTresultSP1__ref___projection ((a tTresultSP1__ref)) log_index
  (tTresultSP1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) log_index)

(declare-fun last2 (t1) log_index)

(declare-fun mk1 ((_ BitVec 16) (_ BitVec 16)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first2 (mk1 f l))) f)
     (= (to_rep2 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range2 low)
                             (and (in_range2 high)
                             (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array (_ BitVec 16) us_rep))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 16) us_rep) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 16) (to_rep2 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) (_ BitVec 16) (to_rep2 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2int (last3 a)) (bv2int
                                    (first3 a))) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq1 (elts1 x) (to_rep2 (first2 (rt1 x)))
                  (to_rep2 (last2 (rt1 x))) (elts1 y)
                  (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))

(declare-fun user_eq10 (us_t1 us_t1) Bool)

(declare-const dummy10 us_t1)

(declare-datatypes ((tresultS__ref 0))
(((mk_tresultS__ref (tresultS__content us_t1)))))
(define-fun tresultS__ref___projection ((a tresultS__ref)) us_t1 (tresultS__content
                                                                 a))

(define-fun dynamic_invariant4 ((temp___expr_250 us_t1)
  (temp___is_init_247 Bool) (temp___skip_constant_248 Bool)
  (temp___do_toplevel_249 Bool)) Bool (=>
                                      (not (= temp___skip_constant_248 true))
                                      (and (dynamic_property2
                                      ((_ int2bv 16) 0) tmp
                                      (first3 temp___expr_250)
                                      (last3 temp___expr_250))
                                      (and
                                      (= (first3 temp___expr_250) ((_ int2bv 16) 0))
                                      (= (last3 temp___expr_250) tmp)))))

(declare-const result____first log_index)

(declare-const result____last log_index)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r4b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r5b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property3 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 16))

(declare-fun user_eq11 (log_index log_index) Bool)

(declare-const dummy11 log_index)

(declare-datatypes ((t6b__ref 0)) (((mk_t6b__ref (t6b__content log_index)))))
(define-fun t6b__ref___projection ((a t6b__ref)) log_index (t6b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) log_index)

(declare-fun last4 (t2) log_index)

(declare-fun mk2 ((_ BitVec 16) (_ BitVec 16)) t2)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first4 (mk2 f l))) f)
     (= (to_rep2 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range2 low)
                             (and (in_range2 high)
                             (=> (bvule low high)
                             (and (dynamic_property3 range_first range_last
                             low) (dynamic_property3 range_first range_last
                             high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array (_ BitVec 16) us_rep))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 16) us_rep) (elts2 a))

(define-fun of_array2 ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) (_ BitVec 16) (to_rep2 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) (_ BitVec 16) (to_rep2 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (bvule (first5 a) (last5 a))
                                    (+ (- (bv2int (last5 a)) (bv2int
                                    (first5 a))) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq1 (elts2 x) (to_rep2 (first4 (rt2 x)))
                  (to_rep2 (last4 (rt2 x))) (elts2 y)
                  (to_rep2 (first4 (rt2 y))) (to_rep2 (last4 (rt2 y)))))

(declare-fun user_eq12 (us_t2 us_t2) Bool)

(declare-const dummy12 us_t2)

(declare-datatypes ((t7b__ref 0)) (((mk_t7b__ref (t7b__content us_t2)))))
(define-fun t7b__ref___projection ((a t7b__ref)) us_t2 (t7b__content a))

(declare-const r8b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r11b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_property5 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 16))

(declare-fun user_eq13 (log_index log_index) Bool)

(declare-const dummy13 log_index)

(declare-datatypes ((t9b__ref 0)) (((mk_t9b__ref (t9b__content log_index)))))
(define-fun t9b__ref___projection ((a t9b__ref)) log_index (t9b__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) log_index)

(declare-fun last6 (t3) log_index)

(declare-fun mk3 ((_ BitVec 16) (_ BitVec 16)) t3)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first6 (mk3 f l))) f)
     (= (to_rep2 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range2 low)
                             (and (in_range2 high)
                             (=> (bvule low high)
                             (and (dynamic_property5 range_first range_last
                             low) (dynamic_property5 range_first range_last
                             high))))))

(declare-datatypes ((us_t3 0))
(((mk___t3 (elts3 (Array (_ BitVec 16) us_rep))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array (_ BitVec 16) us_rep) (elts3 a))

(define-fun of_array3 ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) (_ BitVec 16) (to_rep2 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) (_ BitVec 16) (to_rep2 (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (bvule (first7 a) (last7 a))
                                    (+ (- (bv2int (last7 a)) (bv2int
                                    (first7 a))) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq6 ((x us_t3)
  (y us_t3)) Bool (bool_eq1 (elts3 x) (to_rep2 (first6 (rt3 x)))
                  (to_rep2 (last6 (rt3 x))) (elts3 y)
                  (to_rep2 (first6 (rt3 y))) (to_rep2 (last6 (rt3 y)))))

(declare-fun user_eq14 (us_t3 us_t3) Bool)

(declare-const dummy14 us_t3)

(declare-datatypes ((t10b__ref 0)) (((mk_t10b__ref (t10b__content us_t3)))))
(define-fun t10b__ref___projection ((a t10b__ref)) us_t3 (t10b__content a))

(define-fun dynamic_property7 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 16))

(declare-fun user_eq15 (log_index log_index) Bool)

(declare-const dummy15 log_index)

(declare-datatypes ((t12b__ref 0))
(((mk_t12b__ref (t12b__content log_index)))))
(define-fun t12b__ref___projection ((a t12b__ref)) log_index (t12b__content
                                                             a))

(declare-sort t4 0)

(declare-fun first8 (t4) log_index)

(declare-fun last8 (t4) log_index)

(declare-fun mk4 ((_ BitVec 16) (_ BitVec 16)) t4)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first8 (mk4 f l))) f)
     (= (to_rep2 (last8 (mk4 f l))) l)))) :pattern ((mk4 f l)) )))

(define-fun dynamic_property8 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range2 low)
                             (and (in_range2 high)
                             (=> (bvule low high)
                             (and (dynamic_property7 range_first range_last
                             low) (dynamic_property7 range_first range_last
                             high))))))

(declare-datatypes ((us_t4 0))
(((mk___t4 (elts4 (Array (_ BitVec 16) us_rep))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array (_ BitVec 16) us_rep) (elts4 a))

(define-fun of_array4 ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) (_ BitVec 16) (to_rep2 (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) (_ BitVec 16) (to_rep2 (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (bvule (first9 a) (last9 a))
                                    (+ (- (bv2int (last9 a)) (bv2int
                                    (first9 a))) 1) 0))

(declare-const value__size7 Int)

(declare-fun object__size7 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__component__size5 Int)

(declare-fun object__component__size5 ((Array (_ BitVec 16) us_rep)) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 ((Array (_ BitVec 16) us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size5))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (<= 0 (object__component__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep))) (<= 0 (object__alignment7 a))))

(define-fun bool_eq7 ((x us_t4)
  (y us_t4)) Bool (bool_eq1 (elts4 x) (to_rep2 (first8 (rt4 x)))
                  (to_rep2 (last8 (rt4 x))) (elts4 y)
                  (to_rep2 (first8 (rt4 y))) (to_rep2 (last8 (rt4 y)))))

(declare-fun user_eq16 (us_t4 us_t4) Bool)

(declare-const dummy16 us_t4)

(declare-datatypes ((t13b__ref 0)) (((mk_t13b__ref (t13b__content us_t4)))))
(define-fun t13b__ref___projection ((a t13b__ref)) us_t4 (t13b__content a))

(declare-fun temp___284 (us_rep) (Array (_ BitVec 16) us_rep))

;; def_axiom
  (assert
  (forall ((temp___286 us_rep))
  (forall ((temp___287 (_ BitVec 16)))
  (= (select (temp___284 temp___286) temp___287) temp___286))))

(define-fun dynamic_invariant5 ((temp___expr_219 us_t)
  (temp___is_init_216 Bool) (temp___skip_constant_217 Bool)
  (temp___do_toplevel_218 Bool)) Bool (=>
                                      (not (= temp___skip_constant_217 true))
                                      (dynamic_property ((_ int2bv 16) 0)
                                      ((_ int2bv 16) 599)
                                      (first1 temp___expr_219)
                                      (last1 temp___expr_219))))

(declare-const event_log__split_fields (Array (_ BitVec 16) us_rep))

(declare-const event_log__split_fields1 log_index)

(declare-const event_log__split_fields2 log_index)

(declare-const event_log__split_fields3 Bool)

(declare-const result__ (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result1 t)

(declare-const o unsigned_16)

(declare-const o1 unsigned_16)

(declare-const o2 unsigned_16)

(declare-const o3 long_float)

(declare-const o4 Bool)

(declare-const o5 (Array (_ BitVec 16) us_rep))

(declare-const o6 (Array (_ BitVec 16) us_rep))

(declare-const o7 t)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const logger__log_content__B_1__tmp__assume (_ BitVec 16))

(declare-const o11 (Array (_ BitVec 16) us_rep))

(declare-const temp___279 (Array (_ BitVec 16) us_rep))

(declare-const temp___2791 t2)

(declare-const temp___280 (Array (_ BitVec 16) us_rep))

(declare-const temp___2801 t1)

(declare-const o12 (Array (_ BitVec 16) us_rep))

(declare-const o13 t1)

(declare-const o14 (Array (_ BitVec 16) us_rep))

(declare-const o15 (Array (_ BitVec 16) us_rep))

(declare-const temp___275 (Array (_ BitVec 16) us_rep))

(declare-const temp___2751 t4)

(declare-const o16 (Array (_ BitVec 16) us_rep))

(declare-const temp___274 (Array (_ BitVec 16) us_rep))

(declare-const temp___2741 t3)

(declare-const o17 Int)

(declare-const o18 Int)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const o23 (_ BitVec 16))

(declare-const temp___276 (Array (_ BitVec 16) us_rep))

(declare-const temp___2761 t)

(declare-const temp___277 (Array (_ BitVec 16) us_rep))

(declare-const temp___2771 t1)

(declare-const o24 (Array (_ BitVec 16) us_rep))

(declare-const o25 t1)

(declare-const o26 (Array (_ BitVec 16) us_rep))

(declare-const o27 Int)

(declare-const o28 Int)

(declare-const o29 Int)

(declare-const result__1 (Array (_ BitVec 16) us_rep))

(declare-const result (Array (_ BitVec 16) us_rep))

(declare-const result1 t)

(declare-const logger__log_content__result2 (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result3 t)

(declare-const result2 (Array (_ BitVec 16) us_rep))

(declare-const result__2 (Array (_ BitVec 16) us_rep))

(declare-const result3 (Array (_ BitVec 16) us_rep))

(declare-const result__3 (Array (_ BitVec 16) us_rep))

(declare-const result4 log_array__ref)

(declare-const logger__log_content__result4 us_t)

(declare-const result__4 map__ref)

(declare-const logger__log_content__result5 log_array__ref)

(declare-const result__5 (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result6 us_t)

(declare-const result__6 map__ref)

(declare-const logger__log_content__result7 log_array__ref)

(declare-const result__7 (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result8 us_t)

(declare-const result__8 map__ref)

(declare-const logger__log_content__result9 log_array__ref)

(declare-const result__9 (Array (_ BitVec 16) us_rep))

(declare-const logger__log_content__result10 us_t)

(define-fun result5 () map__ref (mk_map__ref result3))

(define-fun result6 () map__ref (mk_map__ref result2))

(define-fun logger__log_content__result11 () us_t (mk___t
                                                  logger__log_content__result2
                                                  logger__log_content__result3))

(define-fun result7 () log_array__ref (mk_log_array__ref
                                      (mk___t result result1)))

(define-fun o30 () us_t1 (mk___t1 o24 o25))

(define-fun temp___2772 () us_t1 (mk___t1 temp___277 temp___2771))

(define-fun temp___2742 () us_t3 (mk___t3 temp___274 temp___2741))

(define-fun o31 () us_t1 (mk___t1 o12 o13))

(define-fun temp___2802 () us_t1 (mk___t1 temp___280 temp___2801))

(define-fun o32 () us_t (mk___t o6 o7))

(define-fun o33 () us_rep (mk___rep (mk___split_fields o o1 o2 o3 o4)))

(define-fun logger__log_content__result12 () log_array__ref (mk_log_array__ref
                                                            (mk___t
                                                            logger__log_content__result
                                                            logger__log_content__result1)))

(define-fun result__10 () map__ref (mk_map__ref result__))

;; H
  (assert (not (= event_log__split_fields3 true)))

;; H
  (assert
  (and
  (= o8 (log_size
        (mk___split_fields1 event_log__split_fields event_log__split_fields1
        event_log__split_fields2 event_log__split_fields3)))
  (and (in_range4 o8)
  (= o8 (ite (= event_log__split_fields3 true) 0
        (+ (bv2int (let ((temp___239 (bvsub (to_rep2
                                            event_log__split_fields2)
                   (to_rep2 event_log__split_fields1))))
                   (ite (bvult (to_rep2 event_log__split_fields2) (to_rep2
                                                                  event_log__split_fields1))
                   (bvadd temp___239 ((_ int2bv 16) 600)) temp___239))) 1))))))

;; H
  (assert (= o9 (- o8 1)))

;; H
  (assert (and (= o10 o9) (in_range_int o9)))

;; H
  (assert (= logger__log_content__B_1__tmp__assume ((_ int2bv 16) o10)))

;; H
  (assert (= logger__log_content__B_1__tmp__assume tmp))

;; H
  (assert (in_range2 tmp))

;; H
  (assert
  (and (dynamic_property2 ((_ int2bv 16) 0) tmp (to_rep2 result____first)
  (to_rep2 result____last))
  (and (= (to_rep2 result____first) ((_ int2bv 16) 0))
  (= (to_rep2 result____last) tmp))))

;; H
  (assert
  (not
  (bvule (to_rep2 event_log__split_fields1) (to_rep2
                                            event_log__split_fields2))))

;; H
  (assert (= (to_rep2 event_log__split_fields1) r8b))

;; H
  (assert (in_range2 r8b))

;; H
  (assert (= (to_rep2 event_log__split_fields2) r11b))

;; H
  (assert (in_range2 r11b))

;; H
  (assert
  (=> (bvule ((_ int2bv 16) 0) r11b)
  (and
  (and (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 0))
  (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 599)))
  (and (bvule ((_ int2bv 16) 0) r11b) (bvule r11b ((_ int2bv 16) 599))))))

;; H
  (assert (= o15 event_log__split_fields))

;; H
  (assert (= o15 temp___275))

;; H
  (assert (= (mk4 ((_ int2bv 16) 0) r11b) temp___2751))

;; H
  (assert (bvule r8b ((_ int2bv 16) 599)))

(assert
;; WP_parameter_def
 ;; File "logger.ads", line 23, characters 0-0
  (not (bvule ((_ int2bv 16) 0) r8b)))
(check-sat)
(exit)
