(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) -> (((-0xFFFFFF.0p104) <= tqtreal(x)) and
  (tqtreal(x) <= 0xFFFFFF.0p104))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic abs : real -> real

axiom abs_def :
  (forall x:real [abs(x)]. (((0.0 <= x) -> (abs(x) = x)) and
  ((not (0.0 <= x)) -> (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
  (forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
  (forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
  (forall x:int. forall y:int.
  (from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
  (forall x:int. forall y:int.
  (from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
  (forall x:int. forall y:int.
  (from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
  (x <  from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) <  x) and
  (x <= from_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
  (from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((from_int(floor(x)) <= x) and
  (x <  from_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((from_int((ceil(x) - 1)) <  x) and
  (x <= from_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

type mode = RNE | RNA | RTP | RTN | RTZ

logic match_mode : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNE, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RNA, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTP, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTN, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(RTZ, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: mode) = ((m = RNE) or (m = RNA))

logic zeroF : t

logic add : mode, t, t -> t

logic sub : mode, t, t -> t

logic mul : mode, t, t -> t

logic div : mode, t, t -> t

logic abs1 : t -> t

logic neg : t -> t

logic fma : mode, t, t, t -> t

logic sqrt : mode, t -> t

logic roundToIntegral : mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : mode, int -> t

logic to_int : mode, t -> int

axiom zero_of_int : (forall m:mode. (zeroF = of_int(m, 0)))

logic round : mode, real -> real

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = from_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: mode, x: real) = in_range(round(m, x))

axiom Bounded_real_no_overflow :
  (forall m:mode. forall x:real. (in_range(x) -> in_range(round(m, x))))

axiom Round_monotonic :
  (forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
  x) <= round(m, y))))

axiom Round_idempotent :
  (forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
  x)) = round(m2, x)))

axiom Round_to_real :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (round(m,
  tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (round(RTN, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(RTP, x)))

axiom Round_down_neg : (forall x:real. (round(RTN, (-x)) = (-round(RTP, x))))

axiom Round_up_neg : (forall x:real. (round(RTP, (-x)) = (-round(RTN, x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (round(m,
  from_int(i)) = from_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: mode, x: t) = ((((((m = RNE) ->
  is_infinite(x)) and ((m = RNA) -> is_infinite(x))) and ((m = RTP) ->
  ((is_positive(x) -> is_infinite(x)) and ((not is_positive(x)) ->
  (tqtisFinite(x) and (tqtreal(x) = (-0x1.FFFFFEp127))))))) and ((m = RTN) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> is_infinite(x))))) and ((m = RTZ) ->
  ((is_positive(x) -> (tqtisFinite(x) and (tqtreal(x) = 0x1.FFFFFEp127))) and
  ((not is_positive(x)) -> (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))))

predicate sign_zero_result(m: mode, x: t) = (is_zero(x) -> ((((((m = RNE) ->
  is_positive(x)) and ((m = RNA) -> is_positive(x))) and ((m = RTP) ->
  is_positive(x))) and ((m = RTN) -> is_negative(x))) and ((m = RTZ) ->
  is_positive(x))))

axiom add_finite :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) + tqtreal(y)))) ->
  (tqtisFinite(add(m, x, y)) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (tqtisFinite(add(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [add(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(add(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) + tqtreal(y)))) and (tqtreal(add(m, x, y)) = round(m,
  (tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) - tqtreal(y)))) ->
  (tqtisFinite(sub(m, x, y)) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (tqtisFinite(sub(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [sub(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(sub(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) - tqtreal(y)))) and (tqtreal(sub(m, x, y)) = round(m,
  (tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (in_range(round(m, (tqtreal(x) * tqtreal(y)))) ->
  (tqtisFinite(mul(m, x, y)) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (tqtisFinite(mul(m,
  x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [mul(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(mul(m, x, y)) -> (in_range(round(m,
  (tqtreal(x) * tqtreal(y)))) and (tqtreal(mul(m, x, y)) = round(m,
  (tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(x) ->
  (tqtisFinite(y) -> ((not is_zero(y)) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = round(m, (tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (tqtisFinite(div(m,
  x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and (not is_zero(y)))) or
  (tqtisFinite(x) and (is_infinite(y) and (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t [div(m, x, y)]. (to_nearest(m) ->
  (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) -> (in_range(round(m,
  (tqtreal(x) / tqtreal(y)))) and (tqtreal(div(m, x, y)) = round(m,
  (tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs1(x)]. (tqtisFinite(x) -> (tqtisFinite(abs1(x)) and
  ((tqtreal(abs1(x)) = abs(tqtreal(x))) and is_positive(abs1(x))))))

axiom abs_finite_rev :
  (forall x:t [abs1(x)]. (tqtisFinite(abs1(x)) -> (tqtisFinite(x) and
  (tqtreal(abs1(x)) = abs(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs1(x)]. (not is_negative(abs1(x))))

axiom fma_finite_rev :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and (tqtisFinite(y) and
  tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:mode. forall x:t. forall y:t. forall z:t [fma(m, x, y, z)].
  (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (in_range(round(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))) and (tqtreal(fma(m, x, y,
  z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

function sqr(x: real) : real = (x * x)

logic sqrt1 : real -> real

axiom sqrt_finite_rev :
  (forall m:mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m, x)) ->
  (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = round(m, sqrt1(tqtreal(x))))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:mode. forall n:mode. forall i:int. forall j:int.
  (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:mode. forall x:int. (in_int_range(x) -> is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:mode. forall i:t. (tqtisFinite(i) -> ((le(i, neg(of_int(m,
  16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> is_int(roundToIntegral(m,
  x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:mode. (is_int(x) -> (is_int(y) ->
  (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:mode. (is_int(x) ->
  (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) -> is_int(fma(m,
  x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs1(x))))

axiom is_int_of_int :
  (forall x:t. forall m:mode. forall mqt:mode. (is_int(x) -> eq(x,
  of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:mode. forall x:t. (is_int(x) -> (tqtreal(x) = from_int(to_int(m,
  x)))))

axiom truncate_int :
  (forall m:mode. forall i:t. (is_int(i) -> eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTP, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(RTZ,
  x) = roundToIntegral(RTN, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(RTP, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(RTP, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTP,
  x)) = from_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTP, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(RTN, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(RTN, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(RTN,
  x)) = from_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(RTN, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(RNE, x, roundToIntegral(RTN, x)), sub(RNE,
  roundToIntegral(RTP, x), x)) -> (is_negative(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTN, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(RNE, roundToIntegral(RTP, x), x), sub(RNE, x,
  roundToIntegral(RTN, x))) -> (is_positive(x) -> (roundToIntegral(RNA,
  x) = roundToIntegral(RTP, x)))))

axiom to_int_roundToIntegral :
  (forall m:mode. forall x:t. (to_int(m, x) = to_int(m, roundToIntegral(m,
  x))))

axiom to_int_monotonic :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:mode. forall i:int. (in_safe_int_range(i) -> (to_int(m, of_int(m,
  i)) = i)))

axiom eq_to_int :
  (forall m:mode. forall x:t. forall y:t. (tqtisFinite(x) -> (eq(x, y) ->
  (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:mode. forall x:t. (is_int(x) -> (to_int(m, neg(x)) = (-to_int(m,
  x)))))

axiom roundToIntegral_is_finite :
  (forall m:mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [round(RNE, x)]. (in_range(round(RNE, x)) ->
  ((((x - (0x1.0p-24 * abs(x))) - 0x1.0p-150) <= round(RNE, x)) and
  (round(RNE, x) <= ((x + (0x1.0p-24 * abs(x))) + 0x1.0p-150)))))

predicate neq(x: t, y: t) = (not eq(x, y))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((lt(x, y) -> (bool_lt(x,
  y) = true)) and ((not lt(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((le(x, y) -> (bool_le(x,
  y) = true)) and ((not le(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((lt(y, x) -> (bool_gt(x,
  y) = true)) and ((not lt(y, x)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((le(y, x) -> (bool_ge(x,
  y) = true)) and ((not le(y, x)) -> (bool_ge(x, y) = false))))

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. ((eq(x, y) -> (bool_eq(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq(x, y) = false))))

logic bool_neq : t, t -> bool

axiom bool_neq_def :
  (forall x:t. forall y:t [bool_neq(x, y)]. (((not eq(x, y)) -> (bool_neq(x,
  y) = true)) and (eq(x, y) -> (bool_neq(x, y) = false))))

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(RNA, 1))

type t__ref = { t__content : t
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type float1

logic bool_eq2 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. ((eq(x, y) -> (bool_eq2(x,
  y) = true)) and ((not eq(x, y)) -> (bool_eq2(x, y) = false))))

logic user_eq : float1, float1 -> bool

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic dummy : float1

type float__ref = { float__content : float1
}

function float__ref___projection(a: float__ref) : float1 = (a).float__content

logic to_rep : float1 -> t

logic of_rep : t -> float1

axiom inversion_axiom :
  (forall x:float1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float1 [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

logic adjust2triangle : t, t, t -> t

logic adjust2triangle__function_guard : t, t, t, t -> prop

logic fliteral1 : t

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 0.0e-1))

axiom adjust2triangle__post_axiom :
  (forall d:t. forall kv:t. forall ka:t [adjust2triangle(d, kv, ka)].
  ((((tqtisFinite(d) and tqtisFinite(kv)) and tqtisFinite(ka)) and ((neq(d,
  fliteral1) and lt(fliteral1, kv)) and lt(fliteral1, ka))) ->
  ((lt(fliteral1, adjust2triangle(d, kv, ka)) and le(adjust2triangle(d, kv,
  ka), kv)) and tqtisFinite(adjust2triangle(d, kv, ka)))))

type joint_index

logic joint_indexqtint : joint_index -> int

axiom joint_indexqtaxiom :
  (forall i:joint_index. ((1 <= joint_indexqtint(i)) and
  (joint_indexqtint(i) <= 2)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : joint_index, joint_index -> bool

logic dummy1 : joint_index

type joint_index__ref = { joint_index__content : joint_index
}

function joint_index__ref___projection(a: joint_index__ref) : joint_index =
  (a).joint_index__content

type map__ref = { map__content : (int,float1) farray
}

logic slide : (int,float1) farray, int, int -> (int,float1) farray

axiom slide_eq :
  (forall a:(int,float1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,float1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,float1) farray, int, int, (int,float1) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,float1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,float1) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,float1) farray. forall b:(int,float1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic d : (int,float1) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic kv : (int,float1) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ka : (int,float1) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type t11b

logic t11bqtint : t11b -> int

axiom t11bqtaxiom :
  (forall i:t11b. ((1 <= t11bqtint(i)) and (t11bqtint(i) <= 2)))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t11b, t11b -> bool

logic dummy2 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref___projection(a: t11b__ref) : t11b = (a).t11b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic homothetical__homothetical__lambda__aggregate_def : t -> (int,float1) farray

logic homothetical__homothetical__upsilon__aggregate_def : t -> (int,float1) farray

logic homothetical__homothetical__kvp__aggregate_def : t -> (int,float1) farray

logic temp_____aggregate_def_198 : t -> (int,float1) farray

logic temp_____aggregate_def_202 : t -> (int,float1) farray

axiom def_axiom :
  (forall temp___185:t. (tqtisFinite(temp___185) ->
  (forall temp___186:int.
  (to_rep((homothetical__homothetical__lambda__aggregate_def(temp___185)[temp___186])) = temp___185))))

axiom def_axiom1 :
  (forall temp___188:t. (tqtisFinite(temp___188) ->
  (forall temp___189:int.
  (to_rep((homothetical__homothetical__upsilon__aggregate_def(temp___188)[temp___189])) = temp___188))))

axiom def_axiom2 :
  (forall temp___191:t. (tqtisFinite(temp___191) ->
  (forall temp___192:int.
  (to_rep((homothetical__homothetical__kvp__aggregate_def(temp___191)[temp___192])) = temp___191))))

axiom def_axiom3 :
  (forall temp___200:t. (tqtisFinite(temp___200) ->
  (forall temp___201:int.
  (to_rep((temp_____aggregate_def_198(temp___200)[temp___201])) = temp___200))))

axiom def_axiom4 :
  (forall temp___204:t. (tqtisFinite(temp___204) ->
  (forall temp___205:int.
  (to_rep((temp_____aggregate_def_202(temp___204)[temp___205])) = temp___204))))

 (* File "homothetical.adb", line 48, characters 0-0 *)
goal WP_parameter_def :
  (forall lambda:(int,float1) farray. forall upsilon:(int,float1) farray.
  forall kvp:(int,float1) farray. forall i:int. forall j:int. forall o:t.
  forall o1:t. forall o2:t. forall o3:t. forall o4:t. forall o5:float1.
  forall o6:(int,float1) farray. forall o7:t. forall o8:t. forall o9:t.
  forall o10:t. forall o11:t. forall o12:float1.
  forall o13:(int,float1) farray. forall o14:t. forall o15:t. forall o16:t.
  forall o17:t. forall o18:t. forall o19:float1.
  forall o20:(int,float1) farray. forall o21:t. forall o22:t. forall o23:t.
  forall o24:t. forall o25:t. forall o26:float1.
  forall o27:(int,float1) farray. forall o28:t. forall o29:float1.
  forall o30:(int,float1) farray. forall o31:t. forall o32:float1.
  forall o33:(int,float1) farray. forall o34:t. forall o35:t. forall o36:t.
  forall o37:t. forall o38:t. forall o39:float1.
  forall o40:(int,float1) farray. forall o41:t. forall o42:t. forall o43:t.
  forall o44:t. forall o45:t. forall o46:float1.
  forall o47:(int,float1) farray. forall o48:t. forall o49:t. forall o50:t.
  forall o51:t. forall o52:t. forall o53:float1.
  forall o54:(int,float1) farray. forall o55:t. forall o56:t. forall o57:t.
  forall o58:t. forall o59:t. forall o60:float1.
  forall o61:(int,float1) farray. forall o62:t. forall o63:float1.
  forall o64:(int,float1) farray. forall o65:t. forall o66:float1.
  forall o67:(int,float1) farray. forall result:(int,float1) farray.
  forall lambda1:(int,float1) farray. forall result1:(int,float1) farray.
  forall upsilon1:(int,float1) farray. forall result2:(int,float1) farray.
  forall kvp1:(int,float1) farray. forall kvp2:(int,float1) farray.
  forall i1:int. forall kvp3:(int,float1) farray. forall i2:int.
  forall kvmax:(int,float1) farray. forall kamax:(int,float1) farray.
  forall result3:int. forall i3:int. forall result4:int. forall j1:int.
  forall result5:(int,float1) farray. forall lambda2:(int,float1) farray.
  forall result6:(int,float1) farray. forall upsilon2:(int,float1) farray.
  forall lambda3:(int,float1) farray. forall upsilon3:(int,float1) farray.
  forall lambda4:(int,float1) farray. forall upsilon4:(int,float1) farray.
  forall result7:int. forall j2:int. forall result8:(int,float1) farray.
  forall lambda5:(int,float1) farray. forall result9:(int,float1) farray.
  forall upsilon5:(int,float1) farray. forall lambda6:(int,float1) farray.
  forall upsilon6:(int,float1) farray. forall lambda7:(int,float1) farray.
  forall upsilon7:(int,float1) farray. forall result10:(int,float1) farray.
  forall kvmax1:(int,float1) farray. forall result11:(int,float1) farray.
  forall kamax1:(int,float1) farray. forall result12:int. forall i4:int.
  forall result13:int. forall j3:int. forall result14:(int,float1) farray.
  forall lambda8:(int,float1) farray. forall result15:(int,float1) farray.
  forall upsilon8:(int,float1) farray. forall lambda9:(int,float1) farray.
  forall upsilon9:(int,float1) farray. forall lambda10:(int,float1) farray.
  forall upsilon10:(int,float1) farray. forall result16:int. forall j4:int.
  forall result17:map__ref. forall lambda11:(int,float1) farray.
  forall result18:map__ref. forall upsilon11:(int,float1) farray.
  forall lambda12:map__ref. forall upsilon12:map__ref.
  forall lambda13:(int,float1) farray. forall upsilon13:(int,float1) farray.
  forall result19:map__ref. forall kvmax2:(int,float1) farray.
  forall result20:map__ref. forall kamax2:(int,float1) farray.
  forall kvmax3:map__ref. forall kamax3:map__ref. forall lambda14:map__ref.
  forall upsilon14:map__ref. forall kvp4:map__ref. forall i5:int__ref.
  forall i6:int__ref. forall j5:int__ref. forall kvmax4:(int,float1) farray.
  forall kamax4:(int,float1) farray. forall lambda15:(int,float1) farray.
  forall upsilon15:(int,float1) farray. forall kvp5:(int,float1) farray.
  forall i7:int. forall i8:int. forall j6:int.
  (((forall j7:int. (((1 <= j7) and (j7 <= 2)) -> ((neq(to_rep((d[j7])),
    fliteral1) and lt(fliteral1, to_rep((kv[j7])))) and lt(fliteral1,
    to_rep((ka[j7])))))) and
  (((({ map__content = result } = { map__content = lambda }) and
  (lambda1 = homothetical__homothetical__lambda__aggregate_def(fliteral))) and
  ((({ map__content = result1 } = { map__content = upsilon }) and
  (upsilon1 = homothetical__homothetical__upsilon__aggregate_def(fliteral))) and
  ((({ map__content = result2 } = { map__content = kvp }) and
  (kvp1 = homothetical__homothetical__kvp__aggregate_def(fliteral1))) and
  ((forall i9:int. (((1 <= i9) and (i9 <= 2)) -> ((lt(fliteral1,
   to_rep((ka[i9]))) and neq(to_rep((kvp2[i9])), fliteral1)) and
   neq(to_rep((d[i9])), fliteral1)))) and
  (((result3 = i) and (i3 = 1)) and ((((result4 = j) and (j1 = 1)) and
  ((((not (i3 = j1)) and ((((((((((o1 = mul(RNE, to_rep((kvp2[i3])),
  abs1(to_rep((d[j1]))))) and tqtisFinite(mul(RNE, to_rep((kvp2[i3])),
  abs1(to_rep((d[j1])))))) and (((o = mul(RNE, to_rep((kvp2[j1])),
  abs1(to_rep((d[i3]))))) and tqtisFinite(mul(RNE, to_rep((kvp2[j1])),
  abs1(to_rep((d[i3])))))) and (o2 = div(RNE, o, o1)))) and ((o3 = o2) and
  tqtisFinite(o2))) and (o4 = min(to_rep((lambda1[i3])), o3))) and
  (to_rep(o5) = o4)) and (o6 = (lambda1[i3 <- o5]))) and
  ((result5 = lambda1) and (lambda2 = o6))) and ((((((((o8 = mul(RNE,
  to_rep((ka[i3])), abs1(to_rep((d[j1]))))) and tqtisFinite(mul(RNE,
  to_rep((ka[i3])), abs1(to_rep((d[j1])))))) and (((o7 = mul(RNE,
  to_rep((ka[j1])), abs1(to_rep((d[i3]))))) and tqtisFinite(mul(RNE,
  to_rep((ka[j1])), abs1(to_rep((d[i3])))))) and (o9 = div(RNE, o7,
  o8)))) and ((o10 = o9) and tqtisFinite(o9))) and
  (o11 = min(to_rep((upsilon1[i3])), o10))) and (to_rep(o12) = o11)) and
  (o13 = (upsilon1[i3 <- o12]))) and ((result6 = upsilon1) and
  (upsilon2 = o13)))) and (((upsilon2 = upsilon3) and
  (lambda2 = lambda3)) and ((upsilon4 = upsilon2) and
  (lambda4 = lambda2))))) or ((i3 = j1) and (((upsilon1 = upsilon3) and
  (lambda1 = lambda3)) and ((upsilon4 = upsilon1) and
  (lambda4 = lambda1))))) and (((result7 = j1) and (j2 = 2)) and
  (((not (i3 = j2)) and ((((((((((o15 = mul(RNE, to_rep((kvp2[i3])),
  abs1(to_rep((d[j2]))))) and tqtisFinite(mul(RNE, to_rep((kvp2[i3])),
  abs1(to_rep((d[j2])))))) and (((o14 = mul(RNE, to_rep((kvp2[j2])),
  abs1(to_rep((d[i3]))))) and tqtisFinite(mul(RNE, to_rep((kvp2[j2])),
  abs1(to_rep((d[i3])))))) and (o16 = div(RNE, o14, o15)))) and
  ((o17 = o16) and tqtisFinite(o16))) and (o18 = min(to_rep((lambda3[i3])),
  o17))) and (to_rep(o19) = o18)) and (o20 = (lambda3[i3 <- o19]))) and
  ((result8 = lambda3) and (lambda5 = o20))) and ((((((((o22 = mul(RNE,
  to_rep((ka[i3])), abs1(to_rep((d[j2]))))) and tqtisFinite(mul(RNE,
  to_rep((ka[i3])), abs1(to_rep((d[j2])))))) and (((o21 = mul(RNE,
  to_rep((ka[j2])), abs1(to_rep((d[i3]))))) and tqtisFinite(mul(RNE,
  to_rep((ka[j2])), abs1(to_rep((d[i3])))))) and (o23 = div(RNE, o21,
  o22)))) and ((o24 = o23) and tqtisFinite(o23))) and
  (o25 = min(to_rep((upsilon3[i3])), o24))) and (to_rep(o26) = o25)) and
  (o27 = (upsilon3[i3 <- o26]))) and ((result9 = upsilon3) and
  (upsilon5 = o27)))) and (((upsilon5 = upsilon6) and
  (lambda5 = lambda6)) and ((upsilon7 = upsilon5) and
  (lambda7 = lambda5))))) or ((i3 = j2) and ((({ map__content = upsilon6
  } = { map__content = upsilon3 }) and ({ map__content = lambda6 } = {
  map__content = lambda3 })) and ((upsilon7 = upsilon4) and
  (lambda7 = lambda4)))))))) and ((((((o28 = mul(RNE, to_rep((lambda6[i3])),
  to_rep((kvp2[i3])))) and tqtisFinite(mul(RNE, to_rep((lambda6[i3])),
  to_rep((kvp2[i3]))))) and (to_rep(o29) = o28)) and
  (o30 = (kvmax[i3 <- o29]))) and ((result10 = kvmax) and
  (kvmax1 = o30))) and ((((((o31 = mul(RNE, to_rep((upsilon6[i3])),
  to_rep((ka[i3])))) and tqtisFinite(mul(RNE, to_rep((upsilon6[i3])),
  to_rep((ka[i3]))))) and (to_rep(o32) = o31)) and
  (o33 = (kamax[i3 <- o32]))) and ((result11 = kamax) and
  (kamax1 = o33))) and (((result12 = i3) and (i4 = 2)) and
  ((((result13 = j2) and (j3 = 1)) and ((((not (i4 = j3)) and
  ((((((((((o35 = mul(RNE, to_rep((kvp2[i4])), abs1(to_rep((d[j3]))))) and
  tqtisFinite(mul(RNE, to_rep((kvp2[i4])), abs1(to_rep((d[j3])))))) and
  (((o34 = mul(RNE, to_rep((kvp2[j3])), abs1(to_rep((d[i4]))))) and
  tqtisFinite(mul(RNE, to_rep((kvp2[j3])), abs1(to_rep((d[i4])))))) and
  (o36 = div(RNE, o34, o35)))) and ((o37 = o36) and tqtisFinite(o36))) and
  (o38 = min(to_rep((lambda6[i4])), o37))) and (to_rep(o39) = o38)) and
  (o40 = (lambda6[i4 <- o39]))) and ((result14 = lambda6) and
  (lambda8 = o40))) and ((((((((o42 = mul(RNE, to_rep((ka[i4])),
  abs1(to_rep((d[j3]))))) and tqtisFinite(mul(RNE, to_rep((ka[i4])),
  abs1(to_rep((d[j3])))))) and (((o41 = mul(RNE, to_rep((ka[j3])),
  abs1(to_rep((d[i4]))))) and tqtisFinite(mul(RNE, to_rep((ka[j3])),
  abs1(to_rep((d[i4])))))) and (o43 = div(RNE, o41, o42)))) and
  ((o44 = o43) and tqtisFinite(o43))) and (o45 = min(to_rep((upsilon6[i4])),
  o44))) and (to_rep(o46) = o45)) and (o47 = (upsilon6[i4 <- o46]))) and
  ((result15 = upsilon6) and (upsilon8 = o47)))) and
  (((upsilon8 = upsilon9) and (lambda8 = lambda9)) and
  ((upsilon10 = upsilon8) and (lambda10 = lambda8))))) or ((i4 = j3) and ((({
  map__content = upsilon9 } = { map__content = upsilon6 }) and ({
  map__content = lambda9 } = { map__content = lambda6 })) and
  ((upsilon10 = upsilon7) and (lambda10 = lambda7))))) and
  (((result16 = j3) and (j4 = 2)) and (((not (i4 = j4)) and
  ((((((((((o49 = mul(RNE, to_rep((kvp2[i4])), abs1(to_rep((d[j4]))))) and
  tqtisFinite(mul(RNE, to_rep((kvp2[i4])), abs1(to_rep((d[j4])))))) and
  (((o48 = mul(RNE, to_rep((kvp2[j4])), abs1(to_rep((d[i4]))))) and
  tqtisFinite(mul(RNE, to_rep((kvp2[j4])), abs1(to_rep((d[i4])))))) and
  (o50 = div(RNE, o48, o49)))) and ((o51 = o50) and tqtisFinite(o50))) and
  (o52 = min(to_rep((lambda9[i4])), o51))) and (to_rep(o53) = o52)) and
  (o54 = (lambda9[i4 <- o53]))) and ((result17 = { map__content = lambda9
  }) and (lambda11 = o54))) and ((((((((o56 = mul(RNE, to_rep((ka[i4])),
  abs1(to_rep((d[j4]))))) and tqtisFinite(mul(RNE, to_rep((ka[i4])),
  abs1(to_rep((d[j4])))))) and (((o55 = mul(RNE, to_rep((ka[j4])),
  abs1(to_rep((d[i4]))))) and tqtisFinite(mul(RNE, to_rep((ka[j4])),
  abs1(to_rep((d[i4])))))) and (o57 = div(RNE, o55, o56)))) and
  ((o58 = o57) and tqtisFinite(o57))) and (o59 = min(to_rep((upsilon9[i4])),
  o58))) and (to_rep(o60) = o59)) and (o61 = (upsilon9[i4 <- o60]))) and
  ((result18 = { map__content = upsilon9 }) and (upsilon11 = o61)))) and
  (((upsilon12 = { map__content = upsilon11 }) and (lambda12 = {
  map__content = lambda11 })) and ((upsilon13 = upsilon11) and
  (lambda13 = lambda11))))) or ((i4 = j4) and (((upsilon12 = { map__content =
  upsilon9 }) and (lambda12 = { map__content = lambda9 })) and
  ((upsilon13 = upsilon10) and (lambda13 = lambda10)))))))) and
  ((((((o62 = mul(RNE, to_rep(((lambda12).map__content[i4])),
  to_rep((kvp2[i4])))) and tqtisFinite(mul(RNE,
  to_rep(((lambda12).map__content[i4])), to_rep((kvp2[i4]))))) and
  (to_rep(o63) = o62)) and (o64 = (kvmax1[i4 <- o63]))) and ((result19 = {
  map__content = kvmax1 }) and (kvmax2 = o64))) and (((((o65 = mul(RNE,
  to_rep(((upsilon12).map__content[i4])), to_rep((ka[i4])))) and
  tqtisFinite(mul(RNE, to_rep(((upsilon12).map__content[i4])),
  to_rep((ka[i4]))))) and (to_rep(o66) = o65)) and
  (o67 = (kamax1[i4 <- o66]))) and ((result20 = { map__content = kamax1
  }) and (kamax2 = o67)))))))))))))) and (((j5 = { int__content = j4 }) and
  ((i6 = { int__content = i4 }) and ((i5 = { int__content = i1 }) and
  ((kvp4 = { map__content = kvp2 }) and ((upsilon14 = upsilon12) and
  ((lambda14 = lambda12) and ((kamax3 = { map__content = kamax2 }) and
  (kvmax3 = { map__content = kvmax2 })))))))) and ((j6 = j4) and
  ((i8 = i4) and ((i7 = i2) and ((kvp5 = kvp3) and
  ((upsilon15 = upsilon13) and ((lambda15 = lambda13) and
  ((kamax4 = kamax2) and (kvmax4 = kvmax2))))))))))) ->
  (forall j7:int. (((1 <= j7) and (j7 <= 2)) ->
  le(to_rep(((kvmax3).map__content[j7])), to_rep((kv[j7])))))))
