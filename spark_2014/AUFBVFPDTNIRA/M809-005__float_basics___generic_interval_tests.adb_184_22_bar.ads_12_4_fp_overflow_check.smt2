;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort long_float 0)

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy long_float)

(declare-datatypes ()
((long_float__ref (mk_long_float__ref (long_float__content long_float)))))
(define-fun long_float__ref___projection ((a long_float__ref)) long_float
  (long_float__content a))

(declare-sort ft 0)

(declare-fun user_eq1 (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)

(declare-const dummy1 ft)

(declare-datatypes () ((ft__ref (mk_ft__ref (ft__content ft)))))
(define-fun ft__ref___2__projection ((a ft__ref)) ft (ft__content a))

(define-fun dynamic_invariant ((temp___expr_165 Float64)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (=>
                                     (or (= temp___is_init_161 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_165)))

(declare-const a Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const d Float64)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant1 ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(declare-const z Float64)

(declare-const o Float64)

(declare-const o1 Float64)

(declare-const o2 Float64)

(declare-const o3 Float64)

;; H
  (assert (fp.isFinite64 a))

;; H
  (assert (fp.isFinite64 b))

;; H
  (assert (fp.isFinite64 c))

;; H
  (assert (fp.isFinite64 d))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111))
  (fp.isFinite64 z)))

;; H
  (assert
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  a))

;; H
  (assert
  (fp.leq a (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (fp.leq (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)
  b))

;; H
  (assert
  (fp.leq b (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (fp.leq (fp #b0 #b10000000001 #b0000000000000000000000000000000000000000000000000000)
  c))

;; H
  (assert
  (fp.leq c (fp #b0 #b10000000001 #b1000000000000000000000000000000000000000000000000000)))

;; H
  (assert (fp.lt a d))

;; H
  (assert (fp.lt d b))

;; H
  (assert (fp.leq c a))

;; H
  (assert (fp.leq b c))

;; H
  (assert (fp.lt a b))

;; H
  (assert
  (fp.eq c (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)))

;; H
  (assert
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  d))

;; H
  (assert
  (fp.leq d (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))

;; H
  (assert (= o (fp.add RNE a b)))

;; H
  (assert (fp.isFinite64 (fp.add RNE a b)))

;; H
  (assert (= o1 (fp.add RNE o c)))

;; H
  (assert (= o2 o1))

;; H
  (assert (fp.isFinite64 o1))

;; H
  (assert (= o3 (fp.add RNE o2 d)))

(assert
;; WP_parameter_def
 ;; File "generic_interval_tests.adb", line 162, characters 0-0
  (not (fp.isFinite64 o3)))
(check-sat)
(exit)
