;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-const max_int Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_33)))

(declare-sort float 0)

(declare-fun user_eq5 (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-const dummy5 float)

(declare-datatypes ((float__ref 0))
(((mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant1 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun to_rep2 (float) Float32)

(declare-fun of_rep2 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep2 x)) (fp.isNaN (to_rep2 x)))) :pattern (
  (to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))) )))

(declare-sort positive_float 0)

(define-fun in_range6 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq6 (positive_float positive_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE6 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Float32)

(declare-const dummy6 positive_float)

(declare-datatypes ((positive_float__ref 0))
(((mk_positive_float__ref (positive_float__content positive_float)))))
(define-fun positive_float__ref___projection ((a positive_float__ref)) positive_float
  (positive_float__content a))

(define-fun dynamic_invariant2 ((temp___expr_140 Float32)
  (temp___is_init_137 Bool) (temp___skip_constant_138 Bool)
  (temp___do_toplevel_139 Bool)) Bool (=>
                                      (or (= temp___is_init_137 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range6 temp___expr_140)))

(declare-fun to_rep3 (positive_float) Float32)

(declare-fun of_rep3 (Float32) positive_float)

;; inversion_axiom
  (assert
  (forall ((x positive_float))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive_float)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort nonnegative_float 0)

(define-fun in_range7 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq7 (nonnegative_float nonnegative_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Float32)

(declare-const dummy7 nonnegative_float)

(declare-datatypes ((nonnegative_float__ref 0))
(((mk_nonnegative_float__ref (nonnegative_float__content nonnegative_float)))))
(define-fun nonnegative_float__ref___projection ((a nonnegative_float__ref)) nonnegative_float
  (nonnegative_float__content a))

(define-fun dynamic_invariant3 ((temp___expr_146 Float32)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (=>
                                      (or (= temp___is_init_143 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range7 temp___expr_146)))

(declare-fun to_rep4 (nonnegative_float) Float32)

(declare-fun of_rep4 (Float32) nonnegative_float)

;; inversion_axiom
  (assert
  (forall ((x nonnegative_float))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x nonnegative_float)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-fun sqrt1 (Float32) Float32)

(declare-fun sqrt__function_guard (Float32 Float32) Bool)

;; sqrt__post_axiom
  (assert
  (forall ((x Float32))
  (! (=>
     (and (dynamic_invariant1 x true true true)
     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x))
     (let ((result (sqrt1 x)))
     (and
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) result)
     (and
     (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))
     (=> (fp.eq x (fp #b0 #b01111111 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b01111111 #b00000000000000000000000)))))
     (dynamic_invariant1 result true false true)))) :pattern ((sqrt1 x)) )))

(declare-fun arctan (Float32 Float32) Float32)

(declare-fun arctan__function_guard (Float32 Float32 Float32) Bool)

;; arctan__post_axiom
  (assert
  (forall ((y Float32) (x Float32))
  (! (=>
     (and
     (and (dynamic_invariant1 y true true true) (dynamic_invariant1 x true
     true true))
     (or (not (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000)))
     (not (fp.eq y (fp #b0 #b00000000 #b00000000000000000000000)))))
     (let ((result (arctan y x)))
     (and
     (=>
     (and (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) x)
     (fp.eq y (fp #b0 #b00000000 #b00000000000000000000000)))
     (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))
     (dynamic_invariant1 result true false true)))) :pattern ((arctan y x)) )))

(declare-sort normalized2pi 0)

(define-fun in_range8 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq8 (normalized2pi normalized2pi) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE8 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Float32)

(declare-const dummy8 normalized2pi)

(declare-datatypes ((normalized2pi__ref 0))
(((mk_normalized2pi__ref (normalized2pi__content normalized2pi)))))
(define-fun normalized2pi__ref___projection ((a normalized2pi__ref)) normalized2pi
  (normalized2pi__content a))

(declare-fun to_rep5 (normalized2pi) Float32)

(declare-fun of_rep5 (Float32) normalized2pi)

;; inversion_axiom
  (assert
  (forall ((x normalized2pi))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x normalized2pi)) (! (in_range8
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__spaces__angles__angle__theta normalized2pi)))))
(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep5
                           (rec__spaces__angles__angle__theta
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__spaces__angles__angle__theta
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const spaces__angles__angle__theta__first__bit Int)

(declare-const spaces__angles__angle__theta__last__bit Int)

(declare-const spaces__angles__angle__theta__position Int)

;; spaces__angles__angle__theta__first__bit_axiom
  (assert (<= 0 spaces__angles__angle__theta__first__bit))

;; spaces__angles__angle__theta__last__bit_axiom
  (assert
  (< spaces__angles__angle__theta__first__bit spaces__angles__angle__theta__last__bit))

;; spaces__angles__angle__theta__position_axiom
  (assert (<= 0 spaces__angles__angle__theta__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((angle__ref 0))
(((mk_angle__ref (angle__content us_rep)))))
(define-fun angle__ref___projection ((a angle__ref)) us_rep (angle__content
                                                            a))

(declare-fun create (tuple0) us_rep)

(declare-fun create__function_guard (us_rep tuple0) Bool)

(declare-fun create__2 (Float32) us_rep)

(declare-fun create__2__function_guard (us_rep Float32) Bool)

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun osubtract (us_rep us_rep) us_rep)

(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun dcast (us_rep) Float32)

(declare-fun dcast__function_guard (Float32 us_rep) Bool)

(declare-fun dcastpi (us_rep) Float32)

(declare-fun dcastpi__function_guard (Float32 us_rep) Bool)

(declare-fun aldiff (us_rep us_rep) Float32)

(declare-fun aldiff__function_guard (Float32 us_rep us_rep) Bool)

(declare-fun ccwdiff (us_rep us_rep) Float32)

(declare-fun ccwdiff__function_guard (Float32 us_rep us_rep) Bool)

(declare-fun cwdiff (us_rep us_rep) Float32)

(declare-fun cwdiff__function_guard (Float32 us_rep us_rep) Bool)

(declare-fun almostequal (us_rep us_rep Float32) Bool)

(declare-fun almostequal__function_guard (Bool us_rep us_rep Float32) Bool)

(declare-fun ccwmean (us_rep us_rep) us_rep)

(declare-fun ccwmean__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun cwmean (us_rep us_rep) us_rep)

(declare-fun cwmean__function_guard (us_rep us_rep us_rep) Bool)

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun print (us_rep) us_t)

(declare-fun print__function_guard (us_t us_rep) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__spaces__positions__position__x float)(rec__spaces__positions__position__y float)))))
(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__spaces__positions__position__x
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__spaces__positions__position__x
                                                   (us_split_fields3 b))))
                         (= (to_rep2
                            (rec__spaces__positions__position__y
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__spaces__positions__position__y
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const spaces__positions__position__x__first__bit Int)

(declare-const spaces__positions__position__x__last__bit Int)

(declare-const spaces__positions__position__x__position Int)

;; spaces__positions__position__x__first__bit_axiom
  (assert (<= 0 spaces__positions__position__x__first__bit))

;; spaces__positions__position__x__last__bit_axiom
  (assert
  (< spaces__positions__position__x__first__bit spaces__positions__position__x__last__bit))

;; spaces__positions__position__x__position_axiom
  (assert (<= 0 spaces__positions__position__x__position))

(declare-const spaces__positions__position__y__first__bit Int)

(declare-const spaces__positions__position__y__last__bit Int)

(declare-const spaces__positions__position__y__position Int)

;; spaces__positions__position__y__first__bit_axiom
  (assert (<= 0 spaces__positions__position__y__first__bit))

;; spaces__positions__position__y__last__bit_axiom
  (assert
  (< spaces__positions__position__y__first__bit spaces__positions__position__y__last__bit))

;; spaces__positions__position__y__position_axiom
  (assert (<= 0 spaces__positions__position__y__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((position__ref 0))
(((mk_position__ref (position__content us_rep1)))))
(define-fun position__ref___projection ((a position__ref)) us_rep1 (position__content
                                                                   a))

(declare-const zero_position us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun create__4 (Float32 us_rep) us_rep1)

(declare-fun create__4__function_guard (us_rep1 Float32 us_rep) Bool)

(declare-fun norm (us_rep1) Float32)

(declare-fun norm__function_guard (Float32 us_rep1) Bool)

(declare-fun bearing (us_rep1) us_rep)

(declare-fun bearing__function_guard (us_rep us_rep1) Bool)

(declare-fun print1 (us_rep1) us_t)

(declare-fun print__function_guard1 (us_t us_rep1) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__spaces__poses__pose__pos us_rep1)(rec__spaces__poses__pose__ori us_rep)))))
(define-fun us_split_fields_pos__projection ((a us_split_fields4)) us_rep1
  (rec__spaces__poses__pose__pos a))

(define-fun us_split_fields_ori__projection ((a us_split_fields4)) us_rep
  (rec__spaces__poses__pose__ori a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq3
                            (rec__spaces__poses__pose__pos
                            (us_split_fields5 a))
                            (rec__spaces__poses__pose__pos
                            (us_split_fields5 b))) true)
                         (= (bool_eq2
                            (rec__spaces__poses__pose__ori
                            (us_split_fields5 a))
                            (rec__spaces__poses__pose__ori
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const spaces__poses__pose__pos__first__bit Int)

(declare-const spaces__poses__pose__pos__last__bit Int)

(declare-const spaces__poses__pose__pos__position Int)

;; spaces__poses__pose__pos__first__bit_axiom
  (assert (<= 0 spaces__poses__pose__pos__first__bit))

;; spaces__poses__pose__pos__last__bit_axiom
  (assert
  (< spaces__poses__pose__pos__first__bit spaces__poses__pose__pos__last__bit))

;; spaces__poses__pose__pos__position_axiom
  (assert (<= 0 spaces__poses__pose__pos__position))

(declare-const spaces__poses__pose__ori__first__bit Int)

(declare-const spaces__poses__pose__ori__last__bit Int)

(declare-const spaces__poses__pose__ori__position Int)

;; spaces__poses__pose__ori__first__bit_axiom
  (assert (<= 0 spaces__poses__pose__ori__first__bit))

;; spaces__poses__pose__ori__last__bit_axiom
  (assert
  (< spaces__poses__pose__ori__first__bit spaces__poses__pose__ori__last__bit))

;; spaces__poses__pose__ori__position_axiom
  (assert (<= 0 spaces__poses__pose__ori__position))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((pose__ref 0))
(((mk_pose__ref (pose__content us_rep2)))))
(define-fun pose__ref___projection ((a pose__ref)) us_rep2 (pose__content a))

(declare-fun create1 (Float32 Float32 us_rep) us_rep2)

(declare-fun create__function_guard1 (us_rep2 Float32 Float32 us_rep) Bool)

(declare-fun osubtract1 (us_rep2 us_rep2) us_rep2)

(declare-fun osubtract__function_guard1 (us_rep2 us_rep2 us_rep2) Bool)

(declare-fun pos (us_rep2) us_rep1)

(declare-fun pos__function_guard (us_rep1 us_rep2) Bool)

(declare-fun ori (us_rep2) us_rep)

(declare-fun ori__function_guard (us_rep us_rep2) Bool)

(declare-fun print2 (us_rep2) us_t)

(declare-fun print__function_guard2 (us_t us_rep2) Bool)

(declare-sort laser_scan_id 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (laser_scan_id laser_scan_id) Bool)

(declare-const dummy12 laser_scan_id)

(declare-datatypes ((laser_scan_id__ref 0))
(((mk_laser_scan_id__ref (laser_scan_id__content laser_scan_id)))))
(define-fun laser_scan_id__ref___projection ((a laser_scan_id__ref)) laser_scan_id
  (laser_scan_id__content a))

(declare-fun to_rep6 (natural) Int)

(declare-fun of_rep6 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range5 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort unbounded_float 0)

(declare-fun user_eq13 (unbounded_float unbounded_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE10 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Float32)

(declare-const dummy13 unbounded_float)

(declare-datatypes ((unbounded_float__ref 0))
(((mk_unbounded_float__ref (unbounded_float__content unbounded_float)))))
(define-fun unbounded_float__ref___projection ((a unbounded_float__ref)) unbounded_float
  (unbounded_float__content a))

(declare-fun to_rep7 (unbounded_float) Float32)

(declare-fun of_rep7 (Float32) unbounded_float)

;; inversion_axiom
  (assert
  (forall ((x unbounded_float))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x unbounded_float))
  (! (not (or (fp.isInfinite (to_rep7 x)) (fp.isNaN (to_rep7 x)))) :pattern (
  (to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7 (of_rep7 x))) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int nonnegative_float))))))
(declare-fun slide1 ((Array Int nonnegative_float) Int
  Int) (Array Int nonnegative_float))

;; slide_eq
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int nonnegative_float) Int Int
  (Array Int nonnegative_float) Int Int) (Array Int nonnegative_float))

;; concat_def
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (nonnegative_float
  Int) (Array Int nonnegative_float))

;; singleton_def
  (assert
  (forall ((v nonnegative_float))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int nonnegative_float)) (a__first Int)
  (a__last Int) (b (Array Int nonnegative_float)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int nonnegative_float))
  (b (Array Int nonnegative_float)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-const dummy14 (Array Int nonnegative_float))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int nonnegative_float)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int nonnegative_float)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int nonnegative_float)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int nonnegative_float)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int nonnegative_float))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq14 ((Array Int nonnegative_float)
  (Array Int nonnegative_float)) Bool)

(declare-sort option 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (option option) Bool)

(declare-const dummy15 option)

(declare-datatypes ((option__ref 0))
(((mk_option__ref (option__content option)))))
(define-fun option__ref___projection ((a option__ref)) option (option__content
                                                              a))

(declare-fun to_rep8 (option) Int)

(declare-fun of_rep8 (Int) option)

;; inversion_axiom
  (assert
  (forall ((x option))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x option)) (! (in_range10 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__robot_iface__speed_option__opt option)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) option
  (rec__robot_iface__speed_option__opt a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__robot_iface__speed_option__modulus float)(rec__robot_iface__speed_option__angle float)))))
(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3
  (us_split_discrs1 us_split_discrs)(us_split_fields7 us_split_fields6)(attr__constrained Bool)))))
(define-fun us_rep_4__projection ((a us_rep3)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_5__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun us_rep_6__projection ((a us_rep3)) Bool (attr__constrained a))

(define-fun robot_iface__speed_option__modulus__pred ((a us_rep3)) Bool (=
  (to_rep8 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun robot_iface__speed_option__angle__pred ((a us_rep3)) Bool (=
  (to_rep8 (rec__robot_iface__speed_option__opt (us_split_discrs1 a))) 1))

(define-fun bool_eq6 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep8
                            (rec__robot_iface__speed_option__opt
                            (us_split_discrs1 a))) (to_rep8
                                                   (rec__robot_iface__speed_option__opt
                                                   (us_split_discrs1 b))))
                         (=> (robot_iface__speed_option__modulus__pred a)
                         (= (to_rep2
                            (rec__robot_iface__speed_option__modulus
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__robot_iface__speed_option__modulus
                                                   (us_split_fields7 b))))))
                         (=> (robot_iface__speed_option__angle__pred a)
                         (= (to_rep2
                            (rec__robot_iface__speed_option__angle
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__robot_iface__speed_option__angle
                                                   (us_split_fields7 b))))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const robot_iface__speed_option__opt__first__bit Int)

(declare-const robot_iface__speed_option__opt__last__bit Int)

(declare-const robot_iface__speed_option__opt__position Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit robot_iface__speed_option__opt__last__bit))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position))

(declare-const robot_iface__speed_option__modulus__first__bit Int)

(declare-const robot_iface__speed_option__modulus__last__bit Int)

(declare-const robot_iface__speed_option__modulus__position Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit robot_iface__speed_option__modulus__last__bit))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position))

(declare-const robot_iface__speed_option__angle__first__bit Int)

(declare-const robot_iface__speed_option__angle__last__bit Int)

(declare-const robot_iface__speed_option__angle__position Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit robot_iface__speed_option__angle__last__bit))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position))

(declare-fun user_eq16 (us_rep3 us_rep3) Bool)

(declare-const dummy16 us_rep3)

(declare-datatypes ((speed_option__ref 0))
(((mk_speed_option__ref (speed_option__content us_rep3)))))
(define-fun speed_option__ref___projection ((a speed_option__ref)) us_rep3
  (speed_option__content a))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4
  (rec__robot_iface__proxy__robot_radius positive_float)(rec__robot_iface__proxy__min_gap_width positive_float)(rec__robot_iface__proxy__obstacle_avoid_dist positive_float)(rec__robot_iface__proxy__max_speed positive_float)(rec__robot_iface__proxy__max_turn_rate positive_float)(rec__robot_iface__proxy__goal_position_tol nonnegative_float)(rec__robot_iface__proxy__goal_angle_tol nonnegative_float)(rec__robot_iface__proxy__goalx float)(rec__robot_iface__proxy__goaly float)(rec__robot_iface__proxy__goala float)(rec__robot_iface__proxy__scan_count natural)(rec__robot_iface__proxy__scan_res positive_float)(rec__robot_iface__proxy__max_range positive_float)(rec__robot_iface__proxy__scans (Array Int nonnegative_float))(rec__robot_iface__proxy__x unbounded_float)(rec__robot_iface__proxy__y unbounded_float)(rec__robot_iface__proxy__yaw unbounded_float)(rec__robot_iface__proxy__speed us_rep3)(rec__robot_iface__proxy__goal_reached Bool)))))
(define-fun us_split_fields_scan_Count__projection ((a us_split_fields8)) natural
  (rec__robot_iface__proxy__scan_count a))

(define-fun us_split_fields_scans__projection ((a us_split_fields8)) (Array Int nonnegative_float)
  (rec__robot_iface__proxy__scans a))

(define-fun us_split_fields_speed__projection ((a us_split_fields8)) us_rep3
  (rec__robot_iface__proxy__speed a))

(define-fun us_split_fields_goal_reached__projection ((a us_split_fields8)) Bool
  (rec__robot_iface__proxy__goal_reached a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_7__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                a))

(define-fun bool_eq7 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep3
                            (rec__robot_iface__proxy__robot_radius
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__robot_radius
                                                   (us_split_fields9 b))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__min_gap_width
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__min_gap_width
                                                   (us_split_fields9 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__obstacle_avoid_dist
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__obstacle_avoid_dist
                                                   (us_split_fields9 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__max_speed
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__max_speed
                                                   (us_split_fields9 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__max_turn_rate
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__max_turn_rate
                                                   (us_split_fields9 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__goal_position_tol
                            (us_split_fields9 a))) (to_rep4
                                                   (rec__robot_iface__proxy__goal_position_tol
                                                   (us_split_fields9 b)))))
                         (= (to_rep4
                            (rec__robot_iface__proxy__goal_angle_tol
                            (us_split_fields9 a))) (to_rep4
                                                   (rec__robot_iface__proxy__goal_angle_tol
                                                   (us_split_fields9 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__goalx
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__robot_iface__proxy__goalx
                                                   (us_split_fields9 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__goaly
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__robot_iface__proxy__goaly
                                                   (us_split_fields9 b)))))
                         (= (to_rep2
                            (rec__robot_iface__proxy__goala
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__robot_iface__proxy__goala
                                                   (us_split_fields9 b)))))
                         (= (to_rep6
                            (rec__robot_iface__proxy__scan_count
                            (us_split_fields9 a))) (to_rep6
                                                   (rec__robot_iface__proxy__scan_count
                                                   (us_split_fields9 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__scan_res
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__scan_res
                                                   (us_split_fields9 b)))))
                         (= (to_rep3
                            (rec__robot_iface__proxy__max_range
                            (us_split_fields9 a))) (to_rep3
                                                   (rec__robot_iface__proxy__max_range
                                                   (us_split_fields9 b)))))
                         (= (bool_eq5
                            (rec__robot_iface__proxy__scans
                            (us_split_fields9 a)) 1 1000
                            (rec__robot_iface__proxy__scans
                            (us_split_fields9 b)) 1 1000) true))
                         (= (to_rep7
                            (rec__robot_iface__proxy__x (us_split_fields9 a)))
                         (to_rep7
                         (rec__robot_iface__proxy__x (us_split_fields9 b)))))
                         (= (to_rep7
                            (rec__robot_iface__proxy__y (us_split_fields9 a)))
                         (to_rep7
                         (rec__robot_iface__proxy__y (us_split_fields9 b)))))
                         (= (to_rep7
                            (rec__robot_iface__proxy__yaw
                            (us_split_fields9 a))) (to_rep7
                                                   (rec__robot_iface__proxy__yaw
                                                   (us_split_fields9 b)))))
                         (= (bool_eq6
                            (rec__robot_iface__proxy__speed
                            (us_split_fields9 a))
                            (rec__robot_iface__proxy__speed
                            (us_split_fields9 b))) true))
                         (= (rec__robot_iface__proxy__goal_reached
                            (us_split_fields9 a)) (rec__robot_iface__proxy__goal_reached
                                                  (us_split_fields9 b))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const robot_iface__proxy__robot_radius__first__bit Int)

(declare-const robot_iface__proxy__robot_radius__last__bit Int)

(declare-const robot_iface__proxy__robot_radius__position Int)

;; robot_iface__proxy__robot_radius__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__first__bit))

;; robot_iface__proxy__robot_radius__last__bit_axiom
  (assert
  (< robot_iface__proxy__robot_radius__first__bit robot_iface__proxy__robot_radius__last__bit))

;; robot_iface__proxy__robot_radius__position_axiom
  (assert (<= 0 robot_iface__proxy__robot_radius__position))

(declare-const robot_iface__proxy__min_gap_width__first__bit Int)

(declare-const robot_iface__proxy__min_gap_width__last__bit Int)

(declare-const robot_iface__proxy__min_gap_width__position Int)

;; robot_iface__proxy__min_gap_width__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__first__bit))

;; robot_iface__proxy__min_gap_width__last__bit_axiom
  (assert
  (< robot_iface__proxy__min_gap_width__first__bit robot_iface__proxy__min_gap_width__last__bit))

;; robot_iface__proxy__min_gap_width__position_axiom
  (assert (<= 0 robot_iface__proxy__min_gap_width__position))

(declare-const robot_iface__proxy__obstacle_avoid_dist__first__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__last__bit Int)

(declare-const robot_iface__proxy__obstacle_avoid_dist__position Int)

;; robot_iface__proxy__obstacle_avoid_dist__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__first__bit))

;; robot_iface__proxy__obstacle_avoid_dist__last__bit_axiom
  (assert
  (< robot_iface__proxy__obstacle_avoid_dist__first__bit robot_iface__proxy__obstacle_avoid_dist__last__bit))

;; robot_iface__proxy__obstacle_avoid_dist__position_axiom
  (assert (<= 0 robot_iface__proxy__obstacle_avoid_dist__position))

(declare-const robot_iface__proxy__max_speed__first__bit Int)

(declare-const robot_iface__proxy__max_speed__last__bit Int)

(declare-const robot_iface__proxy__max_speed__position Int)

;; robot_iface__proxy__max_speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__first__bit))

;; robot_iface__proxy__max_speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_speed__first__bit robot_iface__proxy__max_speed__last__bit))

;; robot_iface__proxy__max_speed__position_axiom
  (assert (<= 0 robot_iface__proxy__max_speed__position))

(declare-const robot_iface__proxy__max_turn_rate__first__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__last__bit Int)

(declare-const robot_iface__proxy__max_turn_rate__position Int)

;; robot_iface__proxy__max_turn_rate__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__first__bit))

;; robot_iface__proxy__max_turn_rate__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_turn_rate__first__bit robot_iface__proxy__max_turn_rate__last__bit))

;; robot_iface__proxy__max_turn_rate__position_axiom
  (assert (<= 0 robot_iface__proxy__max_turn_rate__position))

(declare-const robot_iface__proxy__goal_position_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_position_tol__position Int)

;; robot_iface__proxy__goal_position_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__first__bit))

;; robot_iface__proxy__goal_position_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_position_tol__first__bit robot_iface__proxy__goal_position_tol__last__bit))

;; robot_iface__proxy__goal_position_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_position_tol__position))

(declare-const robot_iface__proxy__goal_angle_tol__first__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__last__bit Int)

(declare-const robot_iface__proxy__goal_angle_tol__position Int)

;; robot_iface__proxy__goal_angle_tol__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__first__bit))

;; robot_iface__proxy__goal_angle_tol__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_angle_tol__first__bit robot_iface__proxy__goal_angle_tol__last__bit))

;; robot_iface__proxy__goal_angle_tol__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_angle_tol__position))

(declare-const robot_iface__proxy__goalx__first__bit Int)

(declare-const robot_iface__proxy__goalx__last__bit Int)

(declare-const robot_iface__proxy__goalx__position Int)

;; robot_iface__proxy__goalx__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goalx__first__bit))

;; robot_iface__proxy__goalx__last__bit_axiom
  (assert
  (< robot_iface__proxy__goalx__first__bit robot_iface__proxy__goalx__last__bit))

;; robot_iface__proxy__goalx__position_axiom
  (assert (<= 0 robot_iface__proxy__goalx__position))

(declare-const robot_iface__proxy__goaly__first__bit Int)

(declare-const robot_iface__proxy__goaly__last__bit Int)

(declare-const robot_iface__proxy__goaly__position Int)

;; robot_iface__proxy__goaly__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goaly__first__bit))

;; robot_iface__proxy__goaly__last__bit_axiom
  (assert
  (< robot_iface__proxy__goaly__first__bit robot_iface__proxy__goaly__last__bit))

;; robot_iface__proxy__goaly__position_axiom
  (assert (<= 0 robot_iface__proxy__goaly__position))

(declare-const robot_iface__proxy__goala__first__bit Int)

(declare-const robot_iface__proxy__goala__last__bit Int)

(declare-const robot_iface__proxy__goala__position Int)

;; robot_iface__proxy__goala__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goala__first__bit))

;; robot_iface__proxy__goala__last__bit_axiom
  (assert
  (< robot_iface__proxy__goala__first__bit robot_iface__proxy__goala__last__bit))

;; robot_iface__proxy__goala__position_axiom
  (assert (<= 0 robot_iface__proxy__goala__position))

(declare-const robot_iface__proxy__scan_count__first__bit Int)

(declare-const robot_iface__proxy__scan_count__last__bit Int)

(declare-const robot_iface__proxy__scan_count__position Int)

;; robot_iface__proxy__scan_count__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__first__bit))

;; robot_iface__proxy__scan_count__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_count__first__bit robot_iface__proxy__scan_count__last__bit))

;; robot_iface__proxy__scan_count__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_count__position))

(declare-const robot_iface__proxy__scan_res__first__bit Int)

(declare-const robot_iface__proxy__scan_res__last__bit Int)

(declare-const robot_iface__proxy__scan_res__position Int)

;; robot_iface__proxy__scan_res__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__first__bit))

;; robot_iface__proxy__scan_res__last__bit_axiom
  (assert
  (< robot_iface__proxy__scan_res__first__bit robot_iface__proxy__scan_res__last__bit))

;; robot_iface__proxy__scan_res__position_axiom
  (assert (<= 0 robot_iface__proxy__scan_res__position))

(declare-const robot_iface__proxy__max_range__first__bit Int)

(declare-const robot_iface__proxy__max_range__last__bit Int)

(declare-const robot_iface__proxy__max_range__position Int)

;; robot_iface__proxy__max_range__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__max_range__first__bit))

;; robot_iface__proxy__max_range__last__bit_axiom
  (assert
  (< robot_iface__proxy__max_range__first__bit robot_iface__proxy__max_range__last__bit))

;; robot_iface__proxy__max_range__position_axiom
  (assert (<= 0 robot_iface__proxy__max_range__position))

(declare-const robot_iface__proxy__scans__first__bit Int)

(declare-const robot_iface__proxy__scans__last__bit Int)

(declare-const robot_iface__proxy__scans__position Int)

;; robot_iface__proxy__scans__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__scans__first__bit))

;; robot_iface__proxy__scans__last__bit_axiom
  (assert
  (< robot_iface__proxy__scans__first__bit robot_iface__proxy__scans__last__bit))

;; robot_iface__proxy__scans__position_axiom
  (assert (<= 0 robot_iface__proxy__scans__position))

(declare-const robot_iface__proxy__x__first__bit Int)

(declare-const robot_iface__proxy__x__last__bit Int)

(declare-const robot_iface__proxy__x__position Int)

;; robot_iface__proxy__x__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__x__first__bit))

;; robot_iface__proxy__x__last__bit_axiom
  (assert
  (< robot_iface__proxy__x__first__bit robot_iface__proxy__x__last__bit))

;; robot_iface__proxy__x__position_axiom
  (assert (<= 0 robot_iface__proxy__x__position))

(declare-const robot_iface__proxy__y__first__bit Int)

(declare-const robot_iface__proxy__y__last__bit Int)

(declare-const robot_iface__proxy__y__position Int)

;; robot_iface__proxy__y__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__y__first__bit))

;; robot_iface__proxy__y__last__bit_axiom
  (assert
  (< robot_iface__proxy__y__first__bit robot_iface__proxy__y__last__bit))

;; robot_iface__proxy__y__position_axiom
  (assert (<= 0 robot_iface__proxy__y__position))

(declare-const robot_iface__proxy__yaw__first__bit Int)

(declare-const robot_iface__proxy__yaw__last__bit Int)

(declare-const robot_iface__proxy__yaw__position Int)

;; robot_iface__proxy__yaw__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__yaw__first__bit))

;; robot_iface__proxy__yaw__last__bit_axiom
  (assert
  (< robot_iface__proxy__yaw__first__bit robot_iface__proxy__yaw__last__bit))

;; robot_iface__proxy__yaw__position_axiom
  (assert (<= 0 robot_iface__proxy__yaw__position))

(declare-const robot_iface__proxy__speed__first__bit Int)

(declare-const robot_iface__proxy__speed__last__bit Int)

(declare-const robot_iface__proxy__speed__position Int)

;; robot_iface__proxy__speed__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__speed__first__bit))

;; robot_iface__proxy__speed__last__bit_axiom
  (assert
  (< robot_iface__proxy__speed__first__bit robot_iface__proxy__speed__last__bit))

;; robot_iface__proxy__speed__position_axiom
  (assert (<= 0 robot_iface__proxy__speed__position))

(declare-const robot_iface__proxy__goal_reached__first__bit Int)

(declare-const robot_iface__proxy__goal_reached__last__bit Int)

(declare-const robot_iface__proxy__goal_reached__position Int)

;; robot_iface__proxy__goal_reached__first__bit_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__first__bit))

;; robot_iface__proxy__goal_reached__last__bit_axiom
  (assert
  (< robot_iface__proxy__goal_reached__first__bit robot_iface__proxy__goal_reached__last__bit))

;; robot_iface__proxy__goal_reached__position_axiom
  (assert (<= 0 robot_iface__proxy__goal_reached__position))

(declare-fun user_eq17 (us_rep4 us_rep4) Bool)

(declare-const dummy17 us_rep4)

(declare-datatypes ((proxy__ref 0))
(((mk_proxy__ref (proxy__content us_rep4)))))
(define-fun proxy__ref___projection ((a proxy__ref)) us_rep4 (proxy__content
                                                             a))

(declare-fun getscancount (us_rep4) Int)

(declare-fun getscancount__function_guard (Int us_rep4) Bool)

(declare-fun getrange (us_rep4 Int) Float32)

(declare-fun getrange__function_guard (Float32 us_rep4 Int) Bool)

(declare-fun getxpos (us_rep4) Float32)

(declare-fun getxpos__function_guard (Float32 us_rep4) Bool)

(declare-fun getypos (us_rep4) Float32)

(declare-fun getypos__function_guard (Float32 us_rep4) Bool)

(declare-fun getyaw (us_rep4) Float32)

(declare-fun getyaw__function_guard (Float32 us_rep4) Bool)

(define-fun dynamic_invariant5 ((temp___expr_236 us_rep4)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields9 temp___expr_236))) false))

(define-fun default_initial_assumption ((temp___expr_239 us_rep4)
  (temp___skip_top_level_240 Bool)) Bool (and
                                         (= (attr__constrained
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields9
                                            temp___expr_239))) false)
                                         (= (to_rep8
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            (rec__robot_iface__proxy__speed
                                            (us_split_fields9
                                            temp___expr_239))))) 0)))

(declare-sort idir_t 0)

(define-fun in_range11 ((x Int)) Bool (and (<= (- 1) x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq18 (idir_t idir_t) Bool)

(declare-const dummy18 idir_t)

(declare-datatypes ((idir_t__ref 0))
(((mk_idir_t__ref (idir_t__content idir_t)))))
(define-fun idir_t__ref___projection ((a idir_t__ref)) idir_t (idir_t__content
                                                              a))

(declare-fun to_rep9 (idir_t) Int)

(declare-fun of_rep9 (Int) idir_t)

;; inversion_axiom
  (assert
  (forall ((x idir_t))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x idir_t)) (! (in_range11 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-datatypes ((us_split_fields10 0))
(((mk___split_fields5
  (rec__gaps__gap__bearing us_rep)(rec__gaps__gap__distance float)(rec__gaps__gap__idir idir_t)))))
(define-fun us_split_fields_bearing__projection ((a us_split_fields10)) us_rep
  (rec__gaps__gap__bearing a))

(define-fun us_split_fields_iDir__projection ((a us_split_fields10)) idir_t
  (rec__gaps__gap__idir a))

(declare-datatypes ((us_split_fields__ref5 0))
(((mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep_8__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                 a))

(define-fun bool_eq8 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__gaps__gap__bearing (us_split_fields11 a))
                            (rec__gaps__gap__bearing (us_split_fields11 b))) true)
                         (= (to_rep2
                            (rec__gaps__gap__distance (us_split_fields11 a)))
                         (to_rep2
                         (rec__gaps__gap__distance (us_split_fields11 b)))))
                         (= (to_rep9
                            (rec__gaps__gap__idir (us_split_fields11 a)))
                         (to_rep9
                         (rec__gaps__gap__idir (us_split_fields11 b)))))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-const gaps__gap__bearing__first__bit Int)

(declare-const gaps__gap__bearing__last__bit Int)

(declare-const gaps__gap__bearing__position Int)

;; gaps__gap__bearing__first__bit_axiom
  (assert (<= 0 gaps__gap__bearing__first__bit))

;; gaps__gap__bearing__last__bit_axiom
  (assert (< gaps__gap__bearing__first__bit gaps__gap__bearing__last__bit))

;; gaps__gap__bearing__position_axiom
  (assert (<= 0 gaps__gap__bearing__position))

(declare-const gaps__gap__distance__first__bit Int)

(declare-const gaps__gap__distance__last__bit Int)

(declare-const gaps__gap__distance__position Int)

;; gaps__gap__distance__first__bit_axiom
  (assert (<= 0 gaps__gap__distance__first__bit))

;; gaps__gap__distance__last__bit_axiom
  (assert (< gaps__gap__distance__first__bit gaps__gap__distance__last__bit))

;; gaps__gap__distance__position_axiom
  (assert (<= 0 gaps__gap__distance__position))

(declare-const gaps__gap__idir__first__bit Int)

(declare-const gaps__gap__idir__last__bit Int)

(declare-const gaps__gap__idir__position Int)

;; gaps__gap__idir__first__bit_axiom
  (assert (<= 0 gaps__gap__idir__first__bit))

;; gaps__gap__idir__last__bit_axiom
  (assert (< gaps__gap__idir__first__bit gaps__gap__idir__last__bit))

;; gaps__gap__idir__position_axiom
  (assert (<= 0 gaps__gap__idir__position))

(declare-fun user_eq19 (us_rep5 us_rep5) Bool)

(declare-const dummy19 us_rep5)

(declare-datatypes ((gap__ref 0)) (((mk_gap__ref (gap__content us_rep5)))))
(define-fun gap__ref___projection ((a gap__ref)) us_rep5 (gap__content a))

(declare-datatypes ((us_split_fields12 0))
(((mk___split_fields6
  (rec__valleys__valley__risinggap us_rep5)(rec__valleys__valley__othergap us_rep5)))))
(define-fun us_split_fields_risingGap__projection ((a us_split_fields12)) us_rep5
  (rec__valleys__valley__risinggap a))

(define-fun us_split_fields_otherGap__projection ((a us_split_fields12)) us_rep5
  (rec__valleys__valley__othergap a))

(declare-datatypes ((us_split_fields__ref6 0))
(((mk___split_fields__ref6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref6)) us_split_fields12
  (us_split_fields__content6 a))

(declare-datatypes ((us_rep6 0))
(((mk___rep6 (us_split_fields13 us_split_fields12)))))
(define-fun us_rep_9__projection ((a us_rep6)) us_split_fields12 (us_split_fields13
                                                                 a))

(define-fun bool_eq9 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (bool_eq8
                            (rec__valleys__valley__risinggap
                            (us_split_fields13 a))
                            (rec__valleys__valley__risinggap
                            (us_split_fields13 b))) true)
                         (= (bool_eq8
                            (rec__valleys__valley__othergap
                            (us_split_fields13 a))
                            (rec__valleys__valley__othergap
                            (us_split_fields13 b))) true))
                    true false))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep6) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep6) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep6)) (<= 0 (object__alignment8 a))))

(declare-const valleys__valley__risinggap__first__bit Int)

(declare-const valleys__valley__risinggap__last__bit Int)

(declare-const valleys__valley__risinggap__position Int)

;; valleys__valley__risinggap__first__bit_axiom
  (assert (<= 0 valleys__valley__risinggap__first__bit))

;; valleys__valley__risinggap__last__bit_axiom
  (assert
  (< valleys__valley__risinggap__first__bit valleys__valley__risinggap__last__bit))

;; valleys__valley__risinggap__position_axiom
  (assert (<= 0 valleys__valley__risinggap__position))

(declare-const valleys__valley__othergap__first__bit Int)

(declare-const valleys__valley__othergap__last__bit Int)

(declare-const valleys__valley__othergap__position Int)

;; valleys__valley__othergap__first__bit_axiom
  (assert (<= 0 valleys__valley__othergap__first__bit))

;; valleys__valley__othergap__last__bit_axiom
  (assert
  (< valleys__valley__othergap__first__bit valleys__valley__othergap__last__bit))

;; valleys__valley__othergap__position_axiom
  (assert (<= 0 valleys__valley__othergap__position))

(declare-fun user_eq20 (us_rep6 us_rep6) Bool)

(declare-const dummy20 us_rep6)

(declare-datatypes ((valley__ref 0))
(((mk_valley__ref (valley__content us_rep6)))))
(define-fun valley__ref___projection ((a valley__ref)) us_rep6 (valley__content
                                                               a))

(declare-sort option1 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq21 (option1 option1) Bool)

(declare-const dummy21 option1)

(declare-datatypes ((option__ref1 0))
(((mk_option__ref1 (option__content1 option1)))))
(define-fun option__ref_2__projection ((a option__ref1)) option1 (option__content1
                                                                 a))

(declare-fun to_rep10 (option1) Int)

(declare-fun of_rep10 (Int) option1)

;; inversion_axiom
  (assert
  (forall ((x option1))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x option1)) (! (in_range12
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1 (rec__algorithm__valley_option__opt option1)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) option1
  (rec__algorithm__valley_option__opt a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields14 0))
(((mk___split_fields7 (rec__algorithm__valley_option__value us_rep6)))))
(define-fun us_split_fields_value__projection ((a us_split_fields14)) us_rep6
  (rec__algorithm__valley_option__value a))

(declare-datatypes ((us_split_fields__ref7 0))
(((mk___split_fields__ref7 (us_split_fields__content7 us_split_fields14)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref7)) us_split_fields14
  (us_split_fields__content7 a))

(declare-datatypes ((us_rep7 0))
(((mk___rep7
  (us_split_discrs3 us_split_discrs2)(us_split_fields15 us_split_fields14)(attr__constrained1 Bool)))))
(define-fun us_rep_10__projection ((a us_rep7)) us_split_discrs2 (us_split_discrs3
                                                                 a))

(define-fun us_rep_11__projection ((a us_rep7)) us_split_fields14 (us_split_fields15
                                                                  a))

(define-fun us_rep_12__projection ((a us_rep7)) Bool (attr__constrained1 a))

(define-fun algorithm__valley_option__value__pred ((a us_rep7)) Bool (=
  (to_rep10 (rec__algorithm__valley_option__opt (us_split_discrs3 a))) 1))

(define-fun bool_eq10 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (= (to_rep10
                            (rec__algorithm__valley_option__opt
                            (us_split_discrs3 a))) (to_rep10
                                                   (rec__algorithm__valley_option__opt
                                                   (us_split_discrs3 b))))
                         (=> (algorithm__valley_option__value__pred a)
                         (= (bool_eq9
                            (rec__algorithm__valley_option__value
                            (us_split_fields15 a))
                            (rec__algorithm__valley_option__value
                            (us_split_fields15 b))) true)))
                    true false))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep7) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep7) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep7)) (<= 0 (object__alignment9 a))))

(declare-const algorithm__valley_option__opt__first__bit Int)

(declare-const algorithm__valley_option__opt__last__bit Int)

(declare-const algorithm__valley_option__opt__position Int)

;; algorithm__valley_option__opt__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__opt__first__bit))

;; algorithm__valley_option__opt__last__bit_axiom
  (assert
  (< algorithm__valley_option__opt__first__bit algorithm__valley_option__opt__last__bit))

;; algorithm__valley_option__opt__position_axiom
  (assert (<= 0 algorithm__valley_option__opt__position))

(declare-const algorithm__valley_option__value__first__bit Int)

(declare-const algorithm__valley_option__value__last__bit Int)

(declare-const algorithm__valley_option__value__position Int)

;; algorithm__valley_option__value__first__bit_axiom
  (assert (<= 0 algorithm__valley_option__value__first__bit))

;; algorithm__valley_option__value__last__bit_axiom
  (assert
  (< algorithm__valley_option__value__first__bit algorithm__valley_option__value__last__bit))

;; algorithm__valley_option__value__position_axiom
  (assert (<= 0 algorithm__valley_option__value__position))

(declare-fun user_eq22 (us_rep7 us_rep7) Bool)

(declare-const dummy22 us_rep7)

(declare-datatypes ((valley_option__ref 0))
(((mk_valley_option__ref (valley_option__content us_rep7)))))
(define-fun valley_option__ref___projection ((a valley_option__ref)) us_rep7
  (valley_option__content a))

(define-fun default_initial_assumption1 ((temp___expr_374 us_rep7)
  (temp___skip_top_level_375 Bool)) Bool (and
                                         (= (attr__constrained1
                                            temp___expr_374) false)
                                         (= (to_rep10
                                            (rec__algorithm__valley_option__opt
                                            (us_split_discrs3
                                            temp___expr_374))) 0)))

(declare-sort count_type 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq23 (count_type count_type) Bool)

(declare-const dummy23 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep11 (count_type) Int)

(declare-fun of_rep11 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range13
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs4 0))
(((mk___split_discrs2
  (rec__algorithm__gap_vectors__list__capacity count_type)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs4)) count_type
  (rec__algorithm__gap_vectors__list__capacity a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref2)) us_split_discrs4
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields16 0))
(((mk___split_fields8 (rec__algorithm__gap_vectors__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields16)) us_main_type
  (rec__algorithm__gap_vectors__list a))

(declare-datatypes ((us_split_fields__ref8 0))
(((mk___split_fields__ref8 (us_split_fields__content8 us_split_fields16)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref8)) us_split_fields16
  (us_split_fields__content8 a))

(declare-datatypes ((us_rep8 0))
(((mk___rep8
  (us_split_discrs5 us_split_discrs4)(us_split_fields17 us_split_fields16)))))
(define-fun us_rep_13__projection ((a us_rep8)) us_split_discrs4 (us_split_discrs5
                                                                 a))

(define-fun us_rep_14__projection ((a us_rep8)) us_split_fields16 (us_split_fields17
                                                                  a))

(define-fun bool_eq11 ((a us_rep8)
  (b us_rep8)) Bool (ite (and
                         (= (to_rep11
                            (rec__algorithm__gap_vectors__list__capacity
                            (us_split_discrs5 a))) (to_rep11
                                                   (rec__algorithm__gap_vectors__list__capacity
                                                   (us_split_discrs5 b))))
                         (= (us_main_eq
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields17 a))
                            (rec__algorithm__gap_vectors__list
                            (us_split_fields17 b))) true))
                    true false))

(declare-const value__size10 Int)

(declare-fun object__size10 (us_rep8) Int)

(declare-const value__alignment10 Int)

(declare-fun object__alignment10 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment10 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit Int)

(declare-const algorithm__gap_vectors__list__capacity__position Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit algorithm__gap_vectors__list__capacity__last__bit))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position))

(declare-fun user_eq24 (us_rep8 us_rep8) Bool)

(declare-const dummy24 us_rep8)

(declare-datatypes ((list__ref 0))
(((mk_list__ref (list__content us_rep8)))))
(define-fun list__ref___projection ((a list__ref)) us_rep8 (list__content a))

(define-fun in_range14 ((rec__algorithm__gap_vectors__list__capacity1 Int)
  (a us_rep8)) Bool (= rec__algorithm__gap_vectors__list__capacity1 (to_rep11
                                                                    (rec__algorithm__gap_vectors__list__capacity
                                                                    (us_split_discrs5
                                                                    a)))))

(declare-const value__size11 Int)

(declare-fun object__size11 (us_rep8) Int)

(declare-const value__alignment11 Int)

(declare-fun object__alignment11 (us_rep8) Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__size11 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment11))

;; object__alignment_axiom
  (assert (forall ((a us_rep8)) (<= 0 (object__alignment11 a))))

(declare-const algorithm__gap_vectors__list__capacity__first__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__last__bit1 Int)

(declare-const algorithm__gap_vectors__list__capacity__position1 Int)

;; algorithm__gap_vectors__list__capacity__first__bit_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__first__bit1))

;; algorithm__gap_vectors__list__capacity__last__bit_axiom
  (assert
  (< algorithm__gap_vectors__list__capacity__first__bit1 algorithm__gap_vectors__list__capacity__last__bit1))

;; algorithm__gap_vectors__list__capacity__position_axiom
  (assert (<= 0 algorithm__gap_vectors__list__capacity__position1))

(declare-fun user_eq25 (us_rep8 us_rep8) Bool)

(declare-const dummy25 us_rep8)

(declare-datatypes ((list__ref1 0))
(((mk_list__ref1 (list__content1 us_rep8)))))
(define-fun list__ref_2__projection ((a list__ref1)) us_rep8 (list__content1
                                                             a))

(declare-datatypes ((us_split_fields18 0))
(((mk___split_fields9
  (rec__algorithm__laser_scan_data__first nonnegative_float)(rec__algorithm__laser_scan_data__second us_rep)))))
(define-fun us_split_fields_second__projection ((a us_split_fields18)) us_rep
  (rec__algorithm__laser_scan_data__second a))

(declare-datatypes ((us_split_fields__ref9 0))
(((mk___split_fields__ref9 (us_split_fields__content9 us_split_fields18)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref9)) us_split_fields18
  (us_split_fields__content9 a))

(declare-datatypes ((us_rep9 0))
(((mk___rep9 (us_split_fields19 us_split_fields18)))))
(define-fun us_rep_16__projection ((a us_rep9)) us_split_fields18 (us_split_fields19
                                                                  a))

(define-fun bool_eq12 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (= (to_rep4
                            (rec__algorithm__laser_scan_data__first
                            (us_split_fields19 a))) (to_rep4
                                                    (rec__algorithm__laser_scan_data__first
                                                    (us_split_fields19 b))))
                         (= (bool_eq2
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields19 a))
                            (rec__algorithm__laser_scan_data__second
                            (us_split_fields19 b))) true))
                    true false))

(declare-const value__size12 Int)

(declare-fun object__size12 (us_rep9) Int)

(declare-const value__alignment12 Int)

(declare-fun object__alignment12 (us_rep9) Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__size12 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment12))

;; object__alignment_axiom
  (assert (forall ((a us_rep9)) (<= 0 (object__alignment12 a))))

(declare-const algorithm__laser_scan_data__first__first__bit Int)

(declare-const algorithm__laser_scan_data__first__last__bit Int)

(declare-const algorithm__laser_scan_data__first__position Int)

;; algorithm__laser_scan_data__first__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__first__bit))

;; algorithm__laser_scan_data__first__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__first__first__bit algorithm__laser_scan_data__first__last__bit))

;; algorithm__laser_scan_data__first__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__first__position))

(declare-const algorithm__laser_scan_data__second__first__bit Int)

(declare-const algorithm__laser_scan_data__second__last__bit Int)

(declare-const algorithm__laser_scan_data__second__position Int)

;; algorithm__laser_scan_data__second__first__bit_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__first__bit))

;; algorithm__laser_scan_data__second__last__bit_axiom
  (assert
  (< algorithm__laser_scan_data__second__first__bit algorithm__laser_scan_data__second__last__bit))

;; algorithm__laser_scan_data__second__position_axiom
  (assert (<= 0 algorithm__laser_scan_data__second__position))

(declare-fun user_eq26 (us_rep9 us_rep9) Bool)

(declare-const dummy26 us_rep9)

(declare-datatypes ((laser_scan_data__ref 0))
(((mk_laser_scan_data__ref (laser_scan_data__content us_rep9)))))
(define-fun laser_scan_data__ref___projection ((a laser_scan_data__ref)) us_rep9
  (laser_scan_data__content a))

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 (Array Int us_rep9))))))
(declare-fun slide2 ((Array Int us_rep9) Int Int) (Array Int us_rep9))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep9)))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep9)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep9) Int Int (Array Int us_rep9) Int
  Int) (Array Int us_rep9))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep9)) (b (Array Int us_rep9)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep9 Int) (Array Int us_rep9))

;; singleton_def
  (assert
  (forall ((v us_rep9))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq13 ((a (Array Int us_rep9)) (a__first Int) (a__last Int)
  (b (Array Int us_rep9)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq12 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep9)) (b (Array Int us_rep9)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq13 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq12 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const dummy27 (Array Int us_rep9))

(declare-const value__size13 Int)

(declare-fun object__size13 ((Array Int us_rep9)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int us_rep9)) Int)

(declare-const value__alignment13 Int)

(declare-fun object__alignment13 ((Array Int us_rep9)) Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep9))) (<= 0 (object__size13 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep9))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment13))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep9))) (<= 0 (object__alignment13 a))))

(declare-fun user_eq27 ((Array Int us_rep9) (Array Int us_rep9)) Bool)

(declare-datatypes ((us_split_fields20 0))
(((mk___split_fields10
  (rec__algorithm__controller__robot us_rep4)(rec__algorithm__controller__laserscan (Array Int us_rep9))(rec__algorithm__controller__gapvec us_rep8)(rec__algorithm__controller__obsavoiddelta float)(rec__algorithm__controller__driveangle us_rep)))))
(define-fun us_split_fields_robot__projection ((a us_split_fields20)) us_rep4
  (rec__algorithm__controller__robot a))

(define-fun us_split_fields_laserScan__projection ((a us_split_fields20)) (Array Int us_rep9)
  (rec__algorithm__controller__laserscan a))

(define-fun us_split_fields_gapVec__projection ((a us_split_fields20)) us_rep8
  (rec__algorithm__controller__gapvec a))

(define-fun us_split_fields_driveAngle__projection ((a us_split_fields20)) us_rep
  (rec__algorithm__controller__driveangle a))

(declare-datatypes ((us_split_fields__ref10 0))
(((mk___split_fields__ref10 (us_split_fields__content10 us_split_fields20)))))
(define-fun us_split_fields__ref_12__projection ((a us_split_fields__ref10)) us_split_fields20
  (us_split_fields__content10 a))

(declare-datatypes ((us_rep10 0))
(((mk___rep10 (us_split_fields21 us_split_fields20)))))
(define-fun us_rep_17__projection ((a us_rep10)) us_split_fields20 (us_split_fields21
                                                                   a))

(define-fun bool_eq14 ((a us_rep10)
  (b us_rep10)) Bool (ite (and
                          (and
                          (and
                          (and
                          (= (bool_eq7
                             (rec__algorithm__controller__robot
                             (us_split_fields21 a))
                             (rec__algorithm__controller__robot
                             (us_split_fields21 b))) true)
                          (= (bool_eq13
                             (rec__algorithm__controller__laserscan
                             (us_split_fields21 a)) 1 1000
                             (rec__algorithm__controller__laserscan
                             (us_split_fields21 b)) 1 1000) true))
                          (= (bool_eq11
                             (rec__algorithm__controller__gapvec
                             (us_split_fields21 a))
                             (rec__algorithm__controller__gapvec
                             (us_split_fields21 b))) true))
                          (= (to_rep2
                             (rec__algorithm__controller__obsavoiddelta
                             (us_split_fields21 a))) (to_rep2
                                                     (rec__algorithm__controller__obsavoiddelta
                                                     (us_split_fields21 b)))))
                          (= (bool_eq2
                             (rec__algorithm__controller__driveangle
                             (us_split_fields21 a))
                             (rec__algorithm__controller__driveangle
                             (us_split_fields21 b))) true))
                     true false))

(declare-const value__size14 Int)

(declare-fun object__size14 (us_rep10) Int)

(declare-const value__alignment14 Int)

(declare-fun object__alignment14 (us_rep10) Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__size14 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment14))

;; object__alignment_axiom
  (assert (forall ((a us_rep10)) (<= 0 (object__alignment14 a))))

(declare-const algorithm__controller__robot__first__bit Int)

(declare-const algorithm__controller__robot__last__bit Int)

(declare-const algorithm__controller__robot__position Int)

;; algorithm__controller__robot__first__bit_axiom
  (assert (<= 0 algorithm__controller__robot__first__bit))

;; algorithm__controller__robot__last__bit_axiom
  (assert
  (< algorithm__controller__robot__first__bit algorithm__controller__robot__last__bit))

;; algorithm__controller__robot__position_axiom
  (assert (<= 0 algorithm__controller__robot__position))

(declare-const algorithm__controller__laserscan__first__bit Int)

(declare-const algorithm__controller__laserscan__last__bit Int)

(declare-const algorithm__controller__laserscan__position Int)

;; algorithm__controller__laserscan__first__bit_axiom
  (assert (<= 0 algorithm__controller__laserscan__first__bit))

;; algorithm__controller__laserscan__last__bit_axiom
  (assert
  (< algorithm__controller__laserscan__first__bit algorithm__controller__laserscan__last__bit))

;; algorithm__controller__laserscan__position_axiom
  (assert (<= 0 algorithm__controller__laserscan__position))

(declare-const algorithm__controller__gapvec__first__bit Int)

(declare-const algorithm__controller__gapvec__last__bit Int)

(declare-const algorithm__controller__gapvec__position Int)

;; algorithm__controller__gapvec__first__bit_axiom
  (assert (<= 0 algorithm__controller__gapvec__first__bit))

;; algorithm__controller__gapvec__last__bit_axiom
  (assert
  (< algorithm__controller__gapvec__first__bit algorithm__controller__gapvec__last__bit))

;; algorithm__controller__gapvec__position_axiom
  (assert (<= 0 algorithm__controller__gapvec__position))

(declare-const algorithm__controller__obsavoiddelta__first__bit Int)

(declare-const algorithm__controller__obsavoiddelta__last__bit Int)

(declare-const algorithm__controller__obsavoiddelta__position Int)

;; algorithm__controller__obsavoiddelta__first__bit_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__first__bit))

;; algorithm__controller__obsavoiddelta__last__bit_axiom
  (assert
  (< algorithm__controller__obsavoiddelta__first__bit algorithm__controller__obsavoiddelta__last__bit))

;; algorithm__controller__obsavoiddelta__position_axiom
  (assert (<= 0 algorithm__controller__obsavoiddelta__position))

(declare-const algorithm__controller__driveangle__first__bit Int)

(declare-const algorithm__controller__driveangle__last__bit Int)

(declare-const algorithm__controller__driveangle__position Int)

;; algorithm__controller__driveangle__first__bit_axiom
  (assert (<= 0 algorithm__controller__driveangle__first__bit))

;; algorithm__controller__driveangle__last__bit_axiom
  (assert
  (< algorithm__controller__driveangle__first__bit algorithm__controller__driveangle__last__bit))

;; algorithm__controller__driveangle__position_axiom
  (assert (<= 0 algorithm__controller__driveangle__position))

(declare-fun user_eq28 (us_rep10 us_rep10) Bool)

(declare-const dummy28 us_rep10)

(declare-datatypes ((controller__ref 0))
(((mk_controller__ref (controller__content us_rep10)))))
(define-fun controller__ref___projection ((a controller__ref)) us_rep10
  (controller__content a))

(declare-const null_angle us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_empty (us_rep8) Bool)

(declare-fun is_empty__function_guard (Bool us_rep8) Bool)

(define-fun in_range15 ((rec__robot_iface__speed_option__opt1 Int)
  (a us_rep3)) Bool (= rec__robot_iface__speed_option__opt1 (to_rep8
                                                            (rec__robot_iface__speed_option__opt
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size15 Int)

(declare-fun object__size15 (us_rep3) Int)

(declare-const value__alignment15 Int)

(declare-fun object__alignment15 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size15 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment15))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment15 a))))

(declare-const robot_iface__speed_option__opt__first__bit1 Int)

(declare-const robot_iface__speed_option__opt__last__bit1 Int)

(declare-const robot_iface__speed_option__opt__position1 Int)

;; robot_iface__speed_option__opt__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__opt__first__bit1))

;; robot_iface__speed_option__opt__last__bit_axiom
  (assert
  (< robot_iface__speed_option__opt__first__bit1 robot_iface__speed_option__opt__last__bit1))

;; robot_iface__speed_option__opt__position_axiom
  (assert (<= 0 robot_iface__speed_option__opt__position1))

(declare-const robot_iface__speed_option__modulus__first__bit1 Int)

(declare-const robot_iface__speed_option__modulus__last__bit1 Int)

(declare-const robot_iface__speed_option__modulus__position1 Int)

;; robot_iface__speed_option__modulus__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__first__bit1))

;; robot_iface__speed_option__modulus__last__bit_axiom
  (assert
  (< robot_iface__speed_option__modulus__first__bit1 robot_iface__speed_option__modulus__last__bit1))

;; robot_iface__speed_option__modulus__position_axiom
  (assert (<= 0 robot_iface__speed_option__modulus__position1))

(declare-const robot_iface__speed_option__angle__first__bit1 Int)

(declare-const robot_iface__speed_option__angle__last__bit1 Int)

(declare-const robot_iface__speed_option__angle__position1 Int)

;; robot_iface__speed_option__angle__first__bit_axiom
  (assert (<= 0 robot_iface__speed_option__angle__first__bit1))

;; robot_iface__speed_option__angle__last__bit_axiom
  (assert
  (< robot_iface__speed_option__angle__first__bit1 robot_iface__speed_option__angle__last__bit1))

;; robot_iface__speed_option__angle__position_axiom
  (assert (<= 0 robot_iface__speed_option__angle__position1))

(declare-fun user_eq29 (us_rep3 us_rep3) Bool)

(declare-const dummy29 us_rep3)

(declare-datatypes ((t252s__ref 0))
(((mk_t252s__ref (t252s__content us_rep3)))))
(define-fun t252s__ref___projection ((a t252s__ref)) us_rep3 (t252s__content
                                                             a))

(declare-fun temp___614 (Float32) (Array Int nonnegative_float))

;; def_axiom
  (assert
  (forall ((temp___616 Float32))
  (forall ((temp___617 Int))
  (= (select (temp___614 temp___616) temp___617) (of_rep4 temp___616)))))

(declare-fun temp___618 (us_rep9) (Array Int us_rep9))

;; def_axiom
  (assert
  (forall ((temp___620 us_rep9))
  (forall ((temp___621 Int))
  (= (select (temp___618 temp___620) temp___621) temp___620))))

(define-fun dynamic_invariant6 ((temp___expr_607 us_rep10)
  (temp___is_init_604 Bool) (temp___skip_constant_605 Bool)
  (temp___do_toplevel_606 Bool)) Bool (and
                                      (= (attr__constrained
                                         (rec__robot_iface__proxy__speed
                                         (us_split_fields9
                                         (rec__algorithm__controller__robot
                                         (us_split_fields21 temp___expr_607))))) false)
                                      (in_range14 1000
                                      (rec__algorithm__controller__gapvec
                                      (us_split_fields21 temp___expr_607)))))

(define-fun default_initial_assumption2 ((temp___expr_612 us_rep10)
  (temp___skip_top_level_613 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (rec__algorithm__controller__robot
                                            (us_split_fields21
                                            temp___expr_612)) (mk___rep4
                                                              (mk___split_fields4
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep2
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep6 0)
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep3
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (temp___614
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (of_rep7
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              (let ((usq_
                                                              (mk___rep3
                                                              (mk___split_discrs
                                                              (of_rep8 0))
                                                              (mk___split_fields3
                                                              dummy5
                                                              dummy5) true)))
                                                              (mk___rep3
                                                              (us_split_discrs1
                                                              usq_)
                                                              (us_split_fields7
                                                              usq_) false))
                                                              (of_int1 0))))
                                         (= (rec__algorithm__controller__laserscan
                                            (us_split_fields21
                                            temp___expr_612)) (temp___618
                                                              (mk___rep9
                                                              (mk___split_fields9
                                                              (of_rep4
                                                              (fp #b0 #b00000000 #b00000000000000000000000))
                                                              null_angle)))))
                                         (and
                                         (= (to_rep11
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs5
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields21
                                            temp___expr_612))))) 1000)
                                         (= (is_empty
                                            (rec__algorithm__controller__gapvec
                                            (us_split_fields21
                                            temp___expr_612))) true)))
                                         (= (to_rep2
                                            (rec__algorithm__controller__obsavoiddelta
                                            (us_split_fields21
                                            temp___expr_612))) (fp #b0 #b00000000 #b00000000000000000000000)))
                                         (= (rec__algorithm__controller__driveangle
                                            (us_split_fields21
                                            temp___expr_612)) null_angle)))

(declare-fun isfilterclear ((Array Int us_rep9) us_rep Float32 Float32
  Bool) Bool)

(declare-fun isfilterclear__function_guard (Bool (Array Int us_rep9) us_rep
  Float32 Float32 Bool) Bool)

(define-fun dynamic_invariant7 ((temp___expr_577 us_rep8)
  (temp___is_init_574 Bool) (temp___skip_constant_575 Bool)
  (temp___do_toplevel_576 Bool)) Bool (=>
                                      (not (= temp___skip_constant_575 true))
                                      (in_range14 1000 temp___expr_577)))

(define-fun default_initial_assumption3 ((temp___expr_579 us_rep8)
  (temp___skip_top_level_580 Bool)) Bool (and
                                         (= (to_rep11
                                            (rec__algorithm__gap_vectors__list__capacity
                                            (us_split_discrs5
                                            temp___expr_579))) 1000)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_580 true))
                                         (= (is_empty temp___expr_579) true))))

(declare-fun findbestvalley (us_rep10 us_rep1) us_rep7)

(declare-fun findbestvalley__function_guard (us_rep7 us_rep10 us_rep1) Bool)

(declare-fun obsavoiddelta (us_rep10 Float32) Float32)

(declare-fun obsavoiddelta__function_guard (Float32 us_rep10 Float32) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun limit (Float32 Float32 Float32) Float32)

(declare-fun limit__function_guard (Float32 Float32 Float32 Float32) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const pbestvalley__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq30 (integer integer) Bool)

(declare-const dummy30 integer)

(declare-datatypes ((t75b__ref 0))
(((mk_t75b__ref (t75b__content integer)))))
(define-fun t75b__ref___projection ((a t75b__ref)) integer (t75b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const safetydeltaangle us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-fun temp___String_Literal_910 (tuple0) (Array Int character))

;; temp___String_Literal_910__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_910 us_void_param) 1)) 112)
     (= (to_rep (select (temp___String_Literal_910 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_910 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_910 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_910 us_void_param) 5)) 32)) :pattern (
  (temp___String_Literal_910 us_void_param)) )))

(declare-fun temp___String_Literal_912 (tuple0) (Array Int character))

;; temp___String_Literal_912__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_912 us_void_param) 1)) 103)
     (= (to_rep (select (temp___String_Literal_912 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_912 us_void_param) 3)) 97))
     (= (to_rep (select (temp___String_Literal_912 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_912 us_void_param) 5)) 32)) :pattern (
  (temp___String_Literal_912 us_void_param)) )))

(declare-fun temp___String_Literal_935 (tuple0) (Array Int character))

;; temp___String_Literal_935__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 3)) 82))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 7)) 103))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 12)) 112))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 13)) 111))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 14)) 115))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 15)) 101))
     (= (to_rep (select (temp___String_Literal_935 us_void_param) 16)) 32)) :pattern (
  (temp___String_Literal_935 us_void_param)) )))

(declare-fun temp___String_Literal_938 (tuple0) (Array Int character))

;; temp___String_Literal_938__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 3)) 97))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 4)) 99))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 5)) 104))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 7)) 100))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 9)) 103))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 12)) 108))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 14)) 108))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 15)) 111))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 16)) 99))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 17)) 97))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 20)) 111))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 21)) 110))
     (= (to_rep (select (temp___String_Literal_938 us_void_param) 22)) 32)) :pattern (
  (temp___String_Literal_938 us_void_param)) )))

(declare-fun temp___String_Literal_944 (tuple0) (Array Int character))

;; temp___String_Literal_944__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 3)) 68))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 5)) 115))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 6)) 116))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 8)) 116))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 9)) 111))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 11)) 103))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 13)) 97))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 14)) 108))
     (= (to_rep (select (temp___String_Literal_944 us_void_param) 15)) 32)) :pattern (
  (temp___String_Literal_944 us_void_param)) )))

(declare-fun temp___String_Literal_946 (tuple0) (Array Int character))

;; temp___String_Literal_946__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 2)) 79))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 3)) 98))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 5)) 116))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 6)) 97))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 8)) 108))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 12)) 110))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 13)) 115))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 14)) 105))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 18)) 111))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 19)) 102))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 21)) 114))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 22)) 111))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 23)) 98))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 25)) 116))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 26)) 39))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 27)) 115))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 29)) 98))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 30)) 111))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 31)) 117))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 32)) 110))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 33)) 100))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 34)) 97))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 35)) 114))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 36)) 121))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 37)) 33))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 40)) 83))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 41)) 116))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 42)) 111))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 43)) 112))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 44)) 112))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 45)) 105))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 46)) 110))
     (= (to_rep (select (temp___String_Literal_946 us_void_param) 47)) 103)) :pattern (
  (temp___String_Literal_946 us_void_param)) )))

(declare-fun temp___String_Literal_963 (tuple0) (Array Int character))

;; temp___String_Literal_963__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 5)) 66))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 8)) 116))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 10)) 118))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 12)) 108))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 13)) 108))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 14)) 101))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 15)) 121))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 17)) 104))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 18)) 97))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 19)) 115))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 21)) 114))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 23)) 115))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 24)) 105))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 25)) 110))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 26)) 103))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 28)) 97))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 29)) 116))
     (= (to_rep (select (temp___String_Literal_963 us_void_param) 30)) 32)) :pattern (
  (temp___String_Literal_963 us_void_param)) )))

(declare-fun temp___String_Literal_964 (tuple0) (Array Int character))

;; temp___String_Literal_964__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 8)) 97))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 9)) 102))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 11)) 116))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 12)) 121))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 14)) 100))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 15)) 101))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 16)) 108))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 17)) 116))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 18)) 97))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 20)) 61))
     (= (to_rep (select (temp___String_Literal_964 us_void_param) 21)) 32)) :pattern (
  (temp___String_Literal_964 us_void_param)) )))

(declare-fun temp___String_Literal_972 (tuple0) (Array Int character))

;; temp___String_Literal_972__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 3)) 78))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 6)) 119))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 7)) 104))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 8)) 101))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 9)) 114))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 12)) 116))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 13)) 111))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 15)) 103))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 17)) 44))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 19)) 116))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 20)) 117))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 21)) 114))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 22)) 110))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 23)) 105))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 24)) 110))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 25)) 103))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 28)) 110))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 30)) 112))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 31)) 108))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 32)) 97))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 33)) 99))
     (= (to_rep (select (temp___String_Literal_972 us_void_param) 34)) 101)) :pattern (
  (temp___String_Literal_972 us_void_param)) )))

(declare-fun temp___String_Literal_977 (tuple0) (Array Int character))

;; temp___String_Literal_977__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 3)) 72))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 5)) 97))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 6)) 100))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 8)) 110))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 9)) 103))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 12)) 116))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 14)) 97))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 15)) 105))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 16)) 103))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 17)) 104))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 20)) 102))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 21)) 111))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 22)) 114))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 24)) 103))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 25)) 111))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 26)) 97))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 27)) 108))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 28)) 44))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 30)) 112))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 31)) 97))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 32)) 116))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 33)) 104))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 35)) 105))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 36)) 115))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 38)) 99))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 39)) 108))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 40)) 101))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 41)) 97))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 42)) 114))
     (= (to_rep (select (temp___String_Literal_977 us_void_param) 43)) 33)) :pattern (
  (temp___String_Literal_977 us_void_param)) )))

(declare-fun temp___String_Literal_978 (tuple0) (Array Int character))

;; temp___String_Literal_978__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 4)) 68))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 6)) 115))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 12)) 103))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 13)) 111))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 14)) 97))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 15)) 108))
     (= (to_rep (select (temp___String_Literal_978 us_void_param) 16)) 32)) :pattern (
  (temp___String_Literal_978 us_void_param)) )))

(declare-fun temp___String_Literal_979 (tuple0) (Array Int character))

;; temp___String_Literal_979__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 2)) 97))
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 4)) 103))
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_979 us_void_param) 7)) 32)) :pattern (
  (temp___String_Literal_979 us_void_param)) )))

(declare-fun temp___String_Literal_984 (tuple0) (Array Int character))

;; temp___String_Literal_984__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 2)) 83))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 5)) 114))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 6)) 116))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 7)) 105))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 8)) 110))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 9)) 103))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 11)) 100))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 13)) 105))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 14)) 118))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 15)) 101))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 17)) 97))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 18)) 110))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 19)) 103))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 20)) 108))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_984 us_void_param) 22)) 32)) :pattern (
  (temp___String_Literal_984 us_void_param)) )))

(declare-fun temp___String_Literal_995 (tuple0) (Array Int character))

;; temp___String_Literal_995__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 2)) 68))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 5)) 118))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 8)) 97))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 9)) 110))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 10)) 103))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 11)) 108))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 12)) 101))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 14)) 58))
     (= (to_rep (select (temp___String_Literal_995 us_void_param) 15)) 32)) :pattern (
  (temp___String_Literal_995 us_void_param)) )))

(declare-fun temp___String_Literal_996 (tuple0) (Array Int character))

;; temp___String_Literal_996__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 2)) 102))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 5)) 109))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 7)) 109))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 9)) 100))
     (= (to_rep (select (temp___String_Literal_996 us_void_param) 10)) 32)) :pattern (
  (temp___String_Literal_996 us_void_param)) )))

(declare-fun temp___String_Literal_997 (tuple0) (Array Int character))

;; temp___String_Literal_997__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 5)) 102))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 10)) 115))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 12)) 110))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 13)) 103))
     (= (to_rep (select (temp___String_Literal_997 us_void_param) 14)) 32)) :pattern (
  (temp___String_Literal_997 us_void_param)) )))

(declare-fun temp___String_Literal_998 (tuple0) (Array Int character))

;; temp___String_Literal_998__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 3)) 97))
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 4)) 110))
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 5)) 100))
     (= (to_rep (select (temp___String_Literal_998 us_void_param) 6)) 32)) :pattern (
  (temp___String_Literal_998 us_void_param)) )))

(declare-fun temp___String_Literal_999 (tuple0) (Array Int character))

;; temp___String_Literal_999__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 3)) 98))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 6)) 100))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 8)) 108))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_999 us_void_param) 10)) 97)) :pattern (
  (temp___String_Literal_999 us_void_param)) )))

(declare-fun temp___String_Literal_1000 (tuple0) (Array Int character))

;; temp___String_Literal_1000__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 2)) 84))
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 3)) 104))
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 5)) 116))
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 6)) 97))
     (= (to_rep (select (temp___String_Literal_1000 us_void_param) 7)) 32)) :pattern (
  (temp___String_Literal_1000 us_void_param)) )))

(declare-fun temp___String_Literal_1001 (tuple0) (Array Int character))

;; temp___String_Literal_1001__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_1001 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1001 us_void_param) 2)) 44))
     (= (to_rep (select (temp___String_Literal_1001 us_void_param) 3)) 32)) :pattern (
  (temp___String_Literal_1001 us_void_param)) )))

(declare-fun temp___String_Literal_1004 (tuple0) (Array Int character))

;; temp___String_Literal_1004__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 2)) 68))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 5)) 118))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 6)) 101))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 8)) 99))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 9)) 111))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 10)) 109))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 11)) 109))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 14)) 100))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 15)) 115))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 16)) 58))
     (= (to_rep (select (temp___String_Literal_1004 us_void_param) 17)) 32)) :pattern (
  (temp___String_Literal_1004 us_void_param)) )))

(declare-fun temp___String_Literal_1005 (tuple0) (Array Int character))

;; temp___String_Literal_1005__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_1005 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_1005 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_1005 us_void_param)) )))

(define-fun dynamic_invariant8 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant9 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant10 ((temp___expr_15 Int)
  (temp___is_init_12 Bool) (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant11 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 0 1)) (in_range12 temp___expr_366)))

(define-fun dynamic_invariant12 ((temp___expr_205 Int)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=>
                                      (or (= temp___is_init_202 true)
                                      (<= 1 1000)) (in_range9
                                      temp___expr_205)))

(define-fun dynamic_invariant13 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 1)) (in_range10 temp___expr_220)))

(define-fun default_initial_assumption4 ((temp___expr_228 us_rep3)
  (temp___skip_top_level_229 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_228) false)
                                         (= (to_rep8
                                            (rec__robot_iface__speed_option__opt
                                            (us_split_discrs1
                                            temp___expr_228))) 0)))

(define-fun dynamic_invariant14 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_158) (fp.isNaN temp___expr_158)))))

;; null_angle__def_axiom
  (assert
  (= null_angle (mk___rep
                (mk___split_fields
                (of_rep5 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant15 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b10000001 #b10010010000111111011011)))
                                      (in_range8 temp___expr_170)))

;; zero_position__def_axiom
  (assert
  (= zero_position (mk___rep1
                   (mk___split_fields1
                   (of_rep2 (fp #b0 #b00000000 #b00000000000000000000000))
                   (of_rep2 (fp #b0 #b00000000 #b00000000000000000000000))))))

(define-fun dynamic_invariant16 ((temp___expr_286 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (<= (- 1) 1)) (in_range11
                                      temp___expr_286)))

(define-fun dynamic_invariant17 ((temp___expr_324 Int)
  (temp___is_init_321 Bool) (temp___skip_constant_322 Bool)
  (temp___do_toplevel_323 Bool)) Bool (=>
                                      (or (= temp___is_init_321 true)
                                      (<= 0 2147483647)) (in_range13
                                      temp___expr_324)))

(declare-fun length1 (us_rep8) Int)

(declare-fun length__function_guard (Int us_rep8) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep11
                (rec__algorithm__gap_vectors__list__capacity
                (us_split_discrs5 container))))
     (dynamic_invariant17 result true false true))) :pattern ((length1
                                                              container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-const this__split_fields us_split_fields__ref10)

(declare-const drivespeed Float32)

(declare-const driveturnrate Float32)

(declare-const disttoclosestobstacle Float32)

(declare-const safetydist Float32)

(declare-const saferisinggapangle__split_fields normalized2pi)

(declare-const midvalleyangle__split_fields normalized2pi)

(declare-const theta Float32)

(declare-const pbestvalley__split_discrs us_split_discrs__ref1)

(declare-const inumlps int__ref)

(declare-const o float)

(declare-const o1 float)

(declare-const o2 us_split_fields2)

(declare-const temp___1014 us_rep1)

(declare-const algorithm__step__saferisinggapangle__assume us_rep)

(declare-const algorithm__step__midvalleyangle__assume us_rep)

(declare-const o3 Float32)

(declare-const o4 Float32)

(declare-const o5 Float32)

(declare-const o6 Float32)

(declare-const o7 Float32)

(declare-const o8 Float32)

(declare-const o9 Float32)

(declare-const o10 Float32)

(declare-const o11 Float32)

(declare-const o12 Float32)

(declare-const o13 Float32)

(declare-const o14 Float32)

(declare-const o15 Float32)

(declare-const o16 Float32)

(declare-const o17 Float32)

(declare-const o18 Float32)

(declare-const o19 Float32)

(declare-const o20 Float32)

(declare-const o21 Float32)

(declare-const o22 Float32)

(declare-const o23 Float32)

(declare-const o24 Float32)

(declare-const o25 Float32)

(declare-const o26 Float32)

(declare-const o27 Float32)

(declare-const o28 Float32)

(declare-const o29 Float32)

(declare-const o30 Float32)

(declare-const o31 Float32)

(declare-const o32 Float32)

(declare-const result us_split_fields__ref)

(declare-const saferisinggapangle__split_fields1 us_split_fields)

(declare-const result1 us_split_fields__ref)

(declare-const midvalleyangle__split_fields1 us_split_fields)

(declare-const disttogoal__split_fields us_split_fields2)

(declare-const disttoclosestobstacle1 t__ref)

(declare-const driveturnrate1 t__ref)

(declare-const this__split_fields1 us_split_fields__ref10)

(declare-const theta1 t__ref)

(declare-const result2 t__ref)

(declare-const theta2 Float32)

(declare-const result3 t__ref)

(declare-const driveturnrate2 Float32)

(declare-const result4 t__ref)

(declare-const driveturnrate3 Float32)

(declare-const result5 t__ref)

(declare-const driveturnrate4 Float32)

(declare-const result6 t__ref)

(declare-const theta3 Float32)

(declare-const result7 t__ref)

(declare-const drivespeed1 Float32)

(declare-const result8 t__ref)

(declare-const drivespeed2 Float32)

(declare-const result9 t__ref)

(declare-const drivespeed3 Float32)

;; H
  (assert (= (to_rep2 o) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= (to_rep2 o1) (fp #b0 #b00000000 #b00000000000000000000000)))

;; H
  (assert (= o2 (mk___split_fields1 o1 o)))

;; H
  (assert (= temp___1014 (mk___rep1 o2)))

;; H
  (assert (= temp___1014 zero_position))

;; H
  (assert
  (and
  (= (attr__constrained
     (rec__robot_iface__proxy__speed
     (us_split_fields9
     (rec__algorithm__controller__robot
     (us_split_fields__content10 this__split_fields))))) false)
  (= 1000 (to_rep11
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs5
          (rec__algorithm__controller__gapvec
          (us_split_fields__content10 this__split_fields))))))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite drivespeed) (fp.isNaN drivespeed)))))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite driveturnrate) (fp.isNaN driveturnrate)))))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range7 disttoclosestobstacle)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range6 safetydist)))

;; H
  (assert (= algorithm__step__saferisinggapangle__assume (create Tuple0)))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields saferisinggapangle__split_fields))))

;; H
  (assert
  (= saferisinggapangle__split_fields1 (us_split_fields1
                                       algorithm__step__saferisinggapangle__assume)))

;; H
  (assert (= algorithm__step__midvalleyangle__assume (create Tuple0)))

;; H
  (assert
  (= result1 (mk___split_fields__ref
             (mk___split_fields midvalleyangle__split_fields))))

;; H
  (assert
  (= midvalleyangle__split_fields1 (us_split_fields1
                                   algorithm__step__midvalleyangle__assume)))

;; H
  (assert
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite theta) (fp.isNaN theta)))))

;; H
  (assert
  (and (= pbestvalley__attr__constrained false)
  (= (to_rep10
     (rec__algorithm__valley_option__opt
     (us_split_discrs__content1 pbestvalley__split_discrs))) 0)))

;; H
  (assert (=> (<= 0 2147483647) (in_range5 (int__content inumlps))))

;; H
  (assert
  (fp.lt (to_rep3
         (rec__robot_iface__proxy__robot_radius
         (us_split_fields9
         (rec__algorithm__controller__robot
         (us_split_fields__content10 this__split_fields1))))) (t__content
                                                              disttoclosestobstacle1)))

;; H
  (assert
  (=>
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111))
  (in_range7 (t__content disttoclosestobstacle1))))

;; H
  (assert
  (and
  (= (attr__constrained
     (rec__robot_iface__proxy__speed
     (us_split_fields9
     (rec__algorithm__controller__robot
     (us_split_fields__content10 this__split_fields1))))) false)
  (= 1000 (to_rep11
          (rec__algorithm__gap_vectors__list__capacity
          (us_split_discrs5
          (rec__algorithm__controller__gapvec
          (us_split_fields__content10 this__split_fields1))))))))

;; H
  (assert
  (and
  (= o3 (limit (t__content theta1)
        (fp.neg (fp #b0 #b01111111 #b10010010000111111011011))
        (fp #b0 #b01111111 #b10010010000111111011011)))
  (and (not (or (fp.isInfinite o3) (fp.isNaN o3)))
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b10010010000111111011011))
  o3) (fp.leq o3 (fp #b0 #b01111111 #b10010010000111111011011))))))

;; H
  (assert (= result2 theta1))

;; H
  (assert (= theta2 o3))

;; H
  (assert
  (and
  (= o4 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) theta2))
  (not (or (fp.isInfinite (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  theta2)) (fp.isNaN (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000)
  theta2))))))

;; H
  (assert
  (= o5 (fp.div RNE o4 (fp #b0 #b10000000 #b10010010000111111011011))))

;; H
  (assert
  (= o6 (fp.mul RNE (to_rep3
                    (rec__robot_iface__proxy__max_turn_rate
                    (us_split_fields9
                    (rec__algorithm__controller__robot
                    (us_split_fields__content10 this__split_fields1)))))
  o5)))

;; H
  (assert (and (= o7 o6) (not (or (fp.isInfinite o6) (fp.isNaN o6)))))

;; H
  (assert (= result3 driveturnrate1))

;; H
  (assert (= driveturnrate2 o7))

;; H
  (assert
  (and (= o8 (norm (mk___rep1 disttogoal__split_fields)))
  (and (not (or (fp.isInfinite o8) (fp.isNaN o8)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o8)
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) o8)
  (not (= (oeq (mk___rep1 disttogoal__split_fields) zero_position) true)))))))

;; H
  (assert
  (and (= o9 (sqrt1 o8))
  (and (not (or (fp.isInfinite o9) (fp.isNaN o9)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o9)
  (and
  (=> (fp.eq o8 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o9 (fp #b0 #b00000000 #b00000000000000000000000)))
  (=> (fp.eq o8 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o9 (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (and
  (= o10 (limit o9 (fp #b0 #b01111100 #b10011001100110011001101)
         (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (not (or (fp.isInfinite o10) (fp.isNaN o10)))
  (and (fp.leq (fp #b0 #b01111100 #b10011001100110011001101) o10)
  (fp.leq o10 (fp #b0 #b01111111 #b00000000000000000000000))))))

;; H
  (assert (= o11 (fp.mul RNE driveturnrate2 o10)))

;; H
  (assert (and (= o12 o11) (not (or (fp.isInfinite o11) (fp.isNaN o11)))))

;; H
  (assert (= result4 (mk_t__ref driveturnrate2)))

;; H
  (assert (= driveturnrate3 o12))

;; H
  (assert
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.sub RNE (t__content
                                                                   disttoclosestobstacle1)
  (to_rep3
  (rec__robot_iface__proxy__robot_radius
  (us_split_fields9
  (rec__algorithm__controller__robot
  (us_split_fields__content10 this__split_fields1))))))))

;; H
  (assert
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep3
                                                       (rec__robot_iface__proxy__obstacle_avoid_dist
                                                       (us_split_fields9
                                                       (rec__algorithm__controller__robot
                                                       (us_split_fields__content10
                                                       this__split_fields1)))))))

;; H
  (assert
  (and
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.sub RNE (t__content
                                                                   disttoclosestobstacle1)
  (to_rep3
  (rec__robot_iface__proxy__robot_radius
  (us_split_fields9
  (rec__algorithm__controller__robot
  (us_split_fields__content10 this__split_fields1)))))))
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (to_rep3
                                                       (rec__robot_iface__proxy__obstacle_avoid_dist
                                                       (us_split_fields9
                                                       (rec__algorithm__controller__robot
                                                       (us_split_fields__content10
                                                       this__split_fields1))))))))

;; H
  (assert
  (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) (fp.div RNE (fp.sub RNE
  (t__content disttoclosestobstacle1) (to_rep3
                                      (rec__robot_iface__proxy__robot_radius
                                      (us_split_fields9
                                      (rec__algorithm__controller__robot
                                      (us_split_fields__content10
                                      this__split_fields1)))))) (to_rep3
                                                                (rec__robot_iface__proxy__obstacle_avoid_dist
                                                                (us_split_fields9
                                                                (rec__algorithm__controller__robot
                                                                (us_split_fields__content10
                                                                this__split_fields1))))))))

;; H
  (assert
  (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp.div RNE (fp.sub RNE
  (t__content disttoclosestobstacle1) (to_rep3
                                      (rec__robot_iface__proxy__robot_radius
                                      (us_split_fields9
                                      (rec__algorithm__controller__robot
                                      (us_split_fields__content10
                                      this__split_fields1)))))) (to_rep3
                                                                (rec__robot_iface__proxy__obstacle_avoid_dist
                                                                (us_split_fields9
                                                                (rec__algorithm__controller__robot
                                                                (us_split_fields__content10
                                                                this__split_fields1))))))))

;; H
  (assert
  (and
  (= o13 (fp.sub RNE (t__content disttoclosestobstacle1) (to_rep3
                                                         (rec__robot_iface__proxy__robot_radius
                                                         (us_split_fields9
                                                         (rec__algorithm__controller__robot
                                                         (us_split_fields__content10
                                                         this__split_fields1)))))))
  (not (or (fp.isInfinite (fp.sub RNE (t__content disttoclosestobstacle1)
  (to_rep3
  (rec__robot_iface__proxy__robot_radius
  (us_split_fields9
  (rec__algorithm__controller__robot
  (us_split_fields__content10 this__split_fields1))))))) (fp.isNaN (fp.sub RNE
  (t__content disttoclosestobstacle1) (to_rep3
                                      (rec__robot_iface__proxy__robot_radius
                                      (us_split_fields9
                                      (rec__algorithm__controller__robot
                                      (us_split_fields__content10
                                      this__split_fields1)))))))))))

;; H
  (assert
  (= o14 (fp.div RNE o13 (to_rep3
                         (rec__robot_iface__proxy__obstacle_avoid_dist
                         (us_split_fields9
                         (rec__algorithm__controller__robot
                         (us_split_fields__content10 this__split_fields1))))))))

;; H
  (assert (and (= o15 o14) (not (or (fp.isInfinite o14) (fp.isNaN o14)))))

;; H
  (assert
  (and (= o16 (sqrt1 o15))
  (and (not (or (fp.isInfinite o16) (fp.isNaN o16)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o16)
  (and
  (=> (fp.eq o15 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o16 (fp #b0 #b00000000 #b00000000000000000000000)))
  (=> (fp.eq o15 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o16 (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (and
  (= o17 (limit o16 (fp #b0 #b01111110 #b00000000000000000000000)
         (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (not (or (fp.isInfinite o17) (fp.isNaN o17)))
  (and (fp.leq (fp #b0 #b01111110 #b00000000000000000000000) o17)
  (fp.leq o17 (fp #b0 #b01111111 #b00000000000000000000000))))))

;; H
  (assert (= o18 (fp.mul RNE driveturnrate3 o17)))

;; H
  (assert (and (= o19 o18) (not (or (fp.isInfinite o18) (fp.isNaN o18)))))

;; H
  (assert (= result5 (mk_t__ref driveturnrate3)))

;; H
  (assert (= driveturnrate4 o19))

;; H
  (assert
  (and
  (= o20 (limit theta2 (fp.neg (fp #b0 #b01111110 #b10010010000111111011011))
         (fp #b0 #b01111110 #b10010010000111111011011)))
  (and (not (or (fp.isInfinite o20) (fp.isNaN o20)))
  (and (fp.leq (fp.neg (fp #b0 #b01111110 #b10010010000111111011011))
  o20) (fp.leq o20 (fp #b0 #b01111110 #b10010010000111111011011))))))

;; H
  (assert (= result6 (mk_t__ref theta2)))

;; H
  (assert (= theta3 o20))

;; H
  (assert (= result7 (mk_t__ref drivespeed)))

;; H
  (assert
  (= drivespeed1 (to_rep3
                 (rec__robot_iface__proxy__max_speed
                 (us_split_fields9
                 (rec__algorithm__controller__robot
                 (us_split_fields__content10 this__split_fields1)))))))

;; H
  (assert
  (and (= o21 (norm (mk___rep1 disttogoal__split_fields)))
  (and (not (or (fp.isInfinite o21) (fp.isNaN o21)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o21)
  (=> (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) o21)
  (not (= (oeq (mk___rep1 disttogoal__split_fields) zero_position) true)))))))

;; H
  (assert
  (and (= o22 (sqrt1 o21))
  (and (not (or (fp.isInfinite o22) (fp.isNaN o22)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o22)
  (and
  (=> (fp.eq o21 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o22 (fp #b0 #b00000000 #b00000000000000000000000)))
  (=> (fp.eq o21 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o22 (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (and
  (= o23 (limit o22 (fp #b0 #b00000000 #b00000000000000000000000)
         (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (not (or (fp.isInfinite o23) (fp.isNaN o23)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o23)
  (fp.leq o23 (fp #b0 #b01111111 #b00000000000000000000000))))))

;; H
  (assert (= o24 (fp.mul RNE drivespeed1 o23)))

;; H
  (assert (and (= o25 o24) (not (or (fp.isInfinite o24) (fp.isNaN o24)))))

;; H
  (assert (= result8 (mk_t__ref drivespeed1)))

;; H
  (assert (= drivespeed2 o25))

;; H
  (assert
  (and
  (= o26 (fp.sub RNE (t__content disttoclosestobstacle1) (to_rep3
                                                         (rec__robot_iface__proxy__robot_radius
                                                         (us_split_fields9
                                                         (rec__algorithm__controller__robot
                                                         (us_split_fields__content10
                                                         this__split_fields1)))))))
  (not (or (fp.isInfinite (fp.sub RNE (t__content disttoclosestobstacle1)
  (to_rep3
  (rec__robot_iface__proxy__robot_radius
  (us_split_fields9
  (rec__algorithm__controller__robot
  (us_split_fields__content10 this__split_fields1))))))) (fp.isNaN (fp.sub RNE
  (t__content disttoclosestobstacle1) (to_rep3
                                      (rec__robot_iface__proxy__robot_radius
                                      (us_split_fields9
                                      (rec__algorithm__controller__robot
                                      (us_split_fields__content10
                                      this__split_fields1)))))))))))

;; H
  (assert
  (= o27 (fp.div RNE o26 (to_rep3
                         (rec__robot_iface__proxy__obstacle_avoid_dist
                         (us_split_fields9
                         (rec__algorithm__controller__robot
                         (us_split_fields__content10 this__split_fields1))))))))

;; H
  (assert (and (= o28 o27) (not (or (fp.isInfinite o27) (fp.isNaN o27)))))

;; H
  (assert
  (and (= o29 (sqrt1 o28))
  (and (not (or (fp.isInfinite o29) (fp.isNaN o29)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o29)
  (and
  (=> (fp.eq o28 (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.eq o29 (fp #b0 #b00000000 #b00000000000000000000000)))
  (=> (fp.eq o28 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o29 (fp #b0 #b01111111 #b00000000000000000000000))))))))

;; H
  (assert
  (and
  (= o30 (limit o29 (fp #b0 #b00000000 #b00000000000000000000000)
         (fp #b0 #b01111111 #b00000000000000000000000)))
  (and (not (or (fp.isInfinite o30) (fp.isNaN o30)))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) o30)
  (fp.leq o30 (fp #b0 #b01111111 #b00000000000000000000000))))))

;; H
  (assert (= o31 (fp.mul RNE drivespeed2 o30)))

;; H
  (assert (and (= o32 o31) (not (or (fp.isInfinite o31) (fp.isNaN o31)))))

;; H
  (assert (= result9 (mk_t__ref drivespeed2)))

;; H
  (assert (= drivespeed3 o32))

(assert
;; WP_parameter_def
 ;; File "algorithm.ads", line 107, characters 0-0
  (not
  (not (or (fp.isInfinite (fp.sub RNE (fp #b0 #b01111110 #b00001100000101010010010) (fp.abs
  theta3))) (fp.isNaN (fp.sub RNE (fp #b0 #b01111110 #b00001100000101010010010) (fp.abs
  theta3)))))))
(check-sat)
(exit)
