;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(define-fun dynamic_invariant ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-sort nb_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (nb_type nb_type) Bool)

(declare-fun dummy1 () nb_type)

(declare-datatypes ()
((nb_type__ref (mk_nb_type__ref (nb_type__content nb_type)))))
(define-fun nb_type__ref___projection ((a nb_type__ref)) nb_type (nb_type__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 100)) (in_range1
                                      temp___expr_135)))

(declare-sort delta_time_type 0)

(define-fun in_range2 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq2 (delta_time_type delta_time_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-fun dummy2 () delta_time_type)

(declare-datatypes ()
((delta_time_type__ref
 (mk_delta_time_type__ref (delta_time_type__content delta_time_type)))))
(define-fun delta_time_type__ref___projection ((a delta_time_type__ref)) delta_time_type
  (delta_time_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_147 Float32)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                      (in_range2 temp___expr_147)))

(declare-sort nb_type1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (nb_type1 nb_type1) Bool)

(declare-fun dummy3 () nb_type1)

(declare-datatypes ()
((nb_type__ref1 (mk_nb_type__ref1 (nb_type__content1 nb_type1)))))
(define-fun nb_type__ref_2__projection ((a nb_type__ref1)) nb_type1 (nb_type__content1
                                                                    a))

(define-fun dynamic_invariant3 ((temp___expr_159 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool (=>
                                      (or (= temp___is_init_156 true)
                                      (<= 0 100)) (in_range3
                                      temp___expr_159)))

(declare-sort delta_time_type1 0)

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq4 (delta_time_type1 delta_time_type1) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-fun dummy4 () delta_time_type1)

(declare-datatypes ()
((delta_time_type__ref1
 (mk_delta_time_type__ref1 (delta_time_type__content1 delta_time_type1)))))
(define-fun delta_time_type__ref_2__projection ((a delta_time_type__ref1)) delta_time_type1
  (delta_time_type__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_171 Float32)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b01111111 #b00000000000000000000000)))
                                      (in_range4 temp___expr_171)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun nb_of_fp () Int)

(declare-fun nb_of_pp () Int)

(declare-fun delta_time () Float32)

(declare-fun time () Float32)

(declare-fun nb_of_fp1 () Int)

(declare-fun nb_of_pp1 () Int)

(declare-fun delta_time1 () Float32)

(declare-fun time1 () Float32)

(declare-fun result () Int)

(declare-fun nb_of_fp2 () Int)

(declare-fun result1 () Int)

(declare-fun nb_of_pp2 () Int)

(declare-fun result2 () Float32)

(declare-fun delta_time2 () Float32)

(declare-fun result3 () Float32)

(declare-fun time2 () Float32)

(declare-fun time3 () Float32)

(declare-fun result4 () Int)

(declare-fun nb_of_fp3 () Int)

(declare-fun result5 () Int)

(declare-fun nb_of_pp3 () Int)

(declare-fun result6 () Float32)

(declare-fun delta_time3 () Float32)

(declare-fun result7 () Float32)

(declare-fun time4 () Float32)

(define-fun result8 () t__ref (mk_t__ref result3))

(define-fun result9 () t__ref (mk_t__ref result2))

(define-fun result10 () int__ref (mk_int__ref result1))

(define-fun result11 () int__ref (mk_int__ref result))

(define-fun time5 () t__ref (mk_t__ref time))

(define-fun delta_time4 () t__ref (mk_t__ref delta_time))

(define-fun nb_of_pp4 () int__ref (mk_int__ref nb_of_pp))

(define-fun nb_of_fp4 () int__ref (mk_int__ref nb_of_fp))

;; H
  (assert (= result11 nb_of_fp4))

;; H
  (assert (= nb_of_fp2 2))

;; H
  (assert (in_range1 nb_of_fp2))

;; H
  (assert (= result10 nb_of_pp4))

;; H
  (assert (= nb_of_pp2 46))

;; H
  (assert (in_range1 nb_of_pp2))

;; H
  (assert (= result9 delta_time4))

;; H
  (assert (= delta_time2 (fp #b0 #b00000000 #b10011111111111111111110)))

;; H
  (assert (in_range2 delta_time2))

;; H
  (assert (= result8 time5))

;; H
  (assert (= time2 (fp #b0 #b00000101 #b11110000000000000000001)))

;; H
  (assert (not (or (fp.isInfinite time2) (fp.isNaN time2))))

;; H
  (assert
  (and (=> (< 0 nb_of_fp2) (fp.leq time2 time3))
  (not (or (fp.isInfinite time3) (fp.isNaN time3)))))

;; H
  (assert (= result4 nb_of_fp1))

;; H
  (assert (= nb_of_fp3 2))

;; H
  (assert (in_range3 nb_of_fp3))

;; H
  (assert (= result5 nb_of_pp1))

;; H
  (assert (= nb_of_pp3 46))

;; H
  (assert (in_range3 nb_of_pp3))

;; H
  (assert (= result6 delta_time1))

;; H
  (assert (= delta_time3 (fp #b0 #b00000000 #b10011111111111111111110)))

;; H
  (assert (in_range4 delta_time3))

;; H
  (assert (= result7 time1))

;; H
  (assert (= time4 (fp #b0 #b00000101 #b11110000000000000000001)))

;; H
  (assert (not (or (fp.isInfinite time4) (fp.isNaN time4))))

(assert
;; WP_parameter_def
 ;; File "call_sample2.adb", line 4, characters 0-0
  (not (< 0 nb_of_pp3)))
(check-sat)
(exit)
