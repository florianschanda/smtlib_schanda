;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort scrabble_letter 0)

(define-fun in_range ((x Int)) Bool (and (<= 65 x) (<= x 90)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (scrabble_letter scrabble_letter) Bool)

(declare-fun dummy () scrabble_letter)

(declare-datatypes ()
((scrabble_letter__ref
 (mk_scrabble_letter__ref (scrabble_letter__content scrabble_letter)))))
(define-fun scrabble_letter__ref___projection ((a scrabble_letter__ref)) scrabble_letter
  (scrabble_letter__content a))

(declare-sort scrabble_value 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (scrabble_value scrabble_value) Bool)

(declare-fun dummy1 () scrabble_value)

(declare-datatypes ()
((scrabble_value__ref
 (mk_scrabble_value__ref (scrabble_value__content scrabble_value)))))
(define-fun scrabble_value__ref___projection ((a scrabble_value__ref)) scrabble_value
  (scrabble_value__content a))

(declare-fun to_rep (scrabble_value) Int)

(declare-fun of_rep (Int) scrabble_value)

;; inversion_axiom
  (assert
  (forall ((x scrabble_value))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x scrabble_value)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int scrabble_value))))))
(declare-fun slide ((Array Int scrabble_value) Int
  Int) (Array Int scrabble_value))

;; slide_eq
  (assert
  (forall ((a (Array Int scrabble_value)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int scrabble_value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int scrabble_value) Int Int
  (Array Int scrabble_value) Int Int) (Array Int scrabble_value))

;; concat_def
  (assert
  (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (scrabble_value Int) (Array Int scrabble_value))

;; singleton_def
  (assert
  (forall ((v scrabble_value))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int scrabble_value)) (a__first Int)
  (a__last Int) (b (Array Int scrabble_value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int scrabble_value) Int Int
  (Array Int scrabble_value) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int scrabble_value)) (b (Array Int scrabble_value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(define-fun dynamic_invariant ((temp___expr_193 (Array Int scrabble_value))
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)) Bool (forall ((temp___194 Int))
                                      (=>
                                      (and (<= 65 temp___194)
                                      (<= temp___194 90))
                                      (=> (= temp___is_init_190 true)
                                      (let ((temp___196 (to_rep
                                                        (select temp___expr_193 temp___194))))
                                      (or
                                      (and (<= 1 temp___196)
                                      (<= temp___196 5))
                                      (or
                                      (and (<= 8 temp___196)
                                      (<= temp___196 8))
                                      (and (<= 10 temp___196)
                                      (<= temp___196 10)))))))))

(declare-fun lookup_table () (Array Int scrabble_value))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun scrabble__lookup_table__aggregate_def (Int Int Int Int Int Int
  Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int
  Int) (Array Int scrabble_value))

;; def_axiom
  (assert
  (forall ((temp___135 Int) (temp___136 Int) (temp___137 Int)
  (temp___138 Int) (temp___139 Int) (temp___140 Int) (temp___141 Int)
  (temp___142 Int) (temp___143 Int) (temp___144 Int) (temp___145 Int)
  (temp___146 Int) (temp___147 Int) (temp___148 Int) (temp___149 Int)
  (temp___150 Int) (temp___151 Int) (temp___152 Int) (temp___153 Int)
  (temp___154 Int) (temp___155 Int) (temp___156 Int) (temp___157 Int)
  (temp___158 Int) (temp___159 Int) (temp___160 Int))
  (let ((temp___134 (scrabble__lookup_table__aggregate_def temp___135
                    temp___136 temp___137 temp___138 temp___139 temp___140
                    temp___141 temp___142 temp___143 temp___144 temp___145
                    temp___146 temp___147 temp___148 temp___149 temp___150
                    temp___151 temp___152 temp___153 temp___154 temp___155
                    temp___156 temp___157 temp___158 temp___159 temp___160)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___134 65) (of_rep temp___135))
  (= (select temp___134 66) (of_rep temp___136)))
  (= (select temp___134 67) (of_rep temp___137)))
  (= (select temp___134 68) (of_rep temp___138)))
  (= (select temp___134 69) (of_rep temp___139)))
  (= (select temp___134 70) (of_rep temp___140)))
  (= (select temp___134 71) (of_rep temp___141)))
  (= (select temp___134 72) (of_rep temp___142)))
  (= (select temp___134 73) (of_rep temp___143)))
  (= (select temp___134 74) (of_rep temp___144)))
  (= (select temp___134 75) (of_rep temp___145)))
  (= (select temp___134 76) (of_rep temp___146)))
  (= (select temp___134 77) (of_rep temp___147)))
  (= (select temp___134 78) (of_rep temp___148)))
  (= (select temp___134 79) (of_rep temp___149)))
  (= (select temp___134 80) (of_rep temp___150)))
  (= (select temp___134 81) (of_rep temp___151)))
  (= (select temp___134 82) (of_rep temp___152)))
  (= (select temp___134 83) (of_rep temp___153)))
  (= (select temp___134 84) (of_rep temp___154)))
  (= (select temp___134 85) (of_rep temp___155)))
  (= (select temp___134 86) (of_rep temp___156)))
  (= (select temp___134 87) (of_rep temp___157)))
  (= (select temp___134 88) (of_rep temp___158)))
  (= (select temp___134 89) (of_rep temp___159)))
  (= (select temp___134 90) (of_rep temp___160))))))

;; lookup_table__def_axiom
  (assert
  (= lookup_table (scrabble__lookup_table__aggregate_def 1 3 3 2 1 4 2 4 1 8
                  5 1 3 1 1 3 10 1 1 1 1 4 4 8 4 10)))

(define-fun dynamic_invariant1 ((temp___expr_165 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool (=>
                                      (or (= temp___is_init_162 true)
                                      (<= 65 90)) (in_range temp___expr_165)))

(define-fun dynamic_invariant2 ((temp___expr_171 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (and
                                      (=>
                                      (or (= temp___is_init_168 true)
                                      (<= 1 2147483647)) (in_range1
                                      temp___expr_171))
                                      (=> (= temp___do_toplevel_170 true)
                                      (=> (= temp___is_init_168 true)
                                      (or
                                      (and (<= 1 temp___expr_171)
                                      (<= temp___expr_171 5))
                                      (or
                                      (and (<= 8 temp___expr_171)
                                      (<= temp___expr_171 8))
                                      (and (<= 10 temp___expr_171)
                                      (<= temp___expr_171 10))))))))

(define-fun dynamic_predicate ((temp___175 Int)) Bool (or
                                                      (and (<= 1 temp___175)
                                                      (<= temp___175 5))
                                                      (or
                                                      (and (<= 8 temp___175)
                                                      (<= temp___175 8))
                                                      (and (<= 10 temp___175)
                                                      (<= temp___175 10)))))

(assert
;; WP_parameter_def
 ;; File "scrabble.ads", line 12, characters 0-0
  (not
  (or (and (<= 1 10) (<= 10 5)) (or (and (<= 8 10) (<= 10 8)) (<= 10 10)))))
(check-sat)
(exit)
