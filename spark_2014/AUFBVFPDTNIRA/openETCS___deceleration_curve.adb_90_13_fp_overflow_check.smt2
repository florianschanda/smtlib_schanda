;; produced by cvc4_14.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun to_nearest ((m RoundingMode)) Bool (or (= m RNE) (= m RNA)))

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                (fp.isPositive  x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite  x)
                                                 (fp.isNegative  x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                            (fp.isPositive  x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero      x)
                                             (fp.isNegative  x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-fun to_int1 (RoundingMode Float32) Int)

(declare-fun round (RoundingMode Real) Real)

(declare-fun max_int () Int)

(define-fun in_range ((x Real)) Bool (and
                                     (<= (- (* 33554430.0 10141204801825835211973625643008.0)) x)
                                     (<= x (* 33554430.0 10141204801825835211973625643008.0))))

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun no_overflow ((m RoundingMode) (x Real)) Bool (in_range
  (round m x)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isPositive  y))
                    (and (fp.isNegative  x) (fp.isNegative  y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive  x) (fp.isNegative  y))
                    (and (fp.isNegative  x) (fp.isPositive  y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive  z))
                    (=> (diff_sign x y) (fp.isNegative  z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive  x) (< 0.0 r))
                 (and (fp.isNegative  x) (< r 0.0))))

(declare-fun is_int1 (Float32) Bool)

(declare-datatypes () ((t__ref (mk_t__ref (t__content Float32)))))
(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int1 ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float 0)

(declare-fun user_eq (float float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-fun dummy () float)

(declare-datatypes () ((float__ref (mk_float__ref (float__content float)))))
(define-fun float__ref___projection ((a float__ref)) float (float__content a))

(declare-sort speed_t 0)

(declare-fun user_eq1 (speed_t speed_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-fun dummy1 () speed_t)

(declare-datatypes ()
((speed_t__ref (mk_speed_t__ref (speed_t__content speed_t)))))
(define-fun speed_t__ref___projection ((a speed_t__ref)) speed_t (speed_t__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_152 Float32)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_152) (fp.isNaN temp___expr_152)))))

(declare-fun to_rep (speed_t) Float32)

(declare-fun of_rep (Float32) speed_t)

;; inversion_axiom
  (assert
  (forall ((x speed_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x speed_t))
  (! (not (or (fp.isInfinite (to_rep x)) (fp.isNaN (to_rep x)))) :pattern (
  (to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x))) (= (to_rep (of_rep x)) x)) :pattern (
  (to_rep (of_rep x))) )))

(declare-sort tdistance_tB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tdistance_tB tdistance_tB) Bool)

(declare-fun dummy2 () tdistance_tB)

(declare-datatypes ()
((tdistance_tB__ref
 (mk_tdistance_tB__ref (tdistance_tB__content tdistance_tB)))))
(define-fun tdistance_tB__ref___projection ((a tdistance_tB__ref)) tdistance_tB 
  (tdistance_tB__content a))

(declare-sort distance_t 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (distance_t distance_t) Bool)

(declare-fun dummy3 () distance_t)

(declare-datatypes ()
((distance_t__ref (mk_distance_t__ref (distance_t__content distance_t)))))
(define-fun distance_t__ref___projection ((a distance_t__ref)) distance_t 
  (distance_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_176)))

(declare-fun to_rep1 (distance_t) Int)

(declare-fun of_rep1 (Int) distance_t)

;; inversion_axiom
  (assert
  (forall ((x distance_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x distance_t)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun m_per_s_from_km_per_h (Float32) Float32)

(declare-fun m_per_s_from_km_per_h__function_guard (Float32 Float32) Bool)

(define-fun dynamic_invariant2 ((temp___expr_51 Float32)
  (temp___is_init_48 Bool) (temp___skip_constant_49 Bool)
  (temp___do_toplevel_50 Bool)) Bool (=>
                                     (or (= temp___is_init_48 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (not (or (fp.isInfinite temp___expr_51) (fp.isNaN temp___expr_51)))))

(declare-fun sqrt1 (Float32) Float32)

(declare-fun sqrt__function_guard (Float32 Float32) Bool)

;; sqrt__post_axiom
  (assert
  (forall ((x Float32))
  (! (=>
     (and (dynamic_invariant2 x true true true)
     (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x))
     (let ((result (sqrt1 x)))
     (and
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) result)
     (and
     (=> (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b00000000 #b00000000000000000000000)))
     (and
     (=> (fp.eq x (fp #b0 #b01111111 #b00000000000000000000000))
     (fp.eq result (fp #b0 #b01111111 #b00000000000000000000000)))
     (=> (fp.leq (fp #b0 #b00000000 #b00000000000000000000001) x)
     (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) result)))))
     (dynamic_invariant2 result true false true)))) :pattern ((sqrt1 x)) )))

(declare-sort deceleration_t 0)

(define-fun in_range4 ((x Float32)) Bool (and
                                         (not (or (fp.isInfinite x) (fp.isNaN x)))
                                         (and
                                         (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b11111110 #b11111111111111111111111)))))

(declare-fun user_eq4 (deceleration_t deceleration_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-fun dummy4 () deceleration_t)

(declare-datatypes ()
((deceleration_t__ref
 (mk_deceleration_t__ref (deceleration_t__content deceleration_t)))))
(define-fun deceleration_t__ref___projection ((a deceleration_t__ref)) deceleration_t 
  (deceleration_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_170 Float32)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (in_range4 temp___expr_170)))

(declare-fun a_gradient (Int) Float32)

(declare-fun a_gradient__function_guard (Float32 Int) Bool)

(declare-fun a_brake_safe (Float32 Int) Float32)

(declare-fun a_brake_safe__function_guard (Float32 Float32 Int) Bool)

(declare-fun a_safe (Float32 Int) Float32)

(declare-fun a_safe__function_guard (Float32 Float32 Int) Bool)

;; a_safe__post_axiom
  (assert
  (forall ((v Float32))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 d true
     true true)) (dynamic_invariant3 (a_safe v d) true false true)) :pattern (
  (a_safe v d)) ))))

;; a_safe__def_axiom
  (assert
  (forall ((v Float32))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 d true
     true true))
     (= (a_safe v d) (fp.add RNE (a_brake_safe v d) (a_gradient d)))) :pattern (
  (a_safe v d)) ))))

(declare-fun maximum_valid_speed () Float32)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort braking_curve_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (braking_curve_range braking_curve_range) Bool)

(declare-fun dummy5 () braking_curve_range)

(declare-datatypes ()
((braking_curve_range__ref
 (mk_braking_curve_range__ref
 (braking_curve_range__content braking_curve_range)))))
(define-fun braking_curve_range__ref___projection ((a braking_curve_range__ref)) braking_curve_range 
  (braking_curve_range__content a))

(define-fun dynamic_invariant4 ((temp___expr_323 Int)
  (temp___is_init_320 Bool) (temp___skip_constant_321 Bool)
  (temp___do_toplevel_322 Bool)) Bool (=>
                                      (or (= temp___is_init_320 true)
                                      (<= 0 1000)) (in_range5
                                      temp___expr_323)))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__deceleration_curve__braking_curve_entry__location distance_t)(rec__deceleration_curve__braking_curve_entry__speed speed_t)))))
(define-fun us_split_fields_location__projection ((a us_split_fields)) distance_t 
  (rec__deceleration_curve__braking_curve_entry__location a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__deceleration_curve__braking_curve_entry__location
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__deceleration_curve__braking_curve_entry__location
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__deceleration_curve__braking_curve_entry__speed
                           (us_split_fields1 a))) (to_rep
                                                  (rec__deceleration_curve__braking_curve_entry__speed
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun deceleration_curve__braking_curve_entry__location__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__location__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__location__position () Int)

;; deceleration_curve__braking_curve_entry__location__first__bit_axiom
  (assert
  (<= 0 deceleration_curve__braking_curve_entry__location__first__bit))

;; deceleration_curve__braking_curve_entry__location__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__location__first__bit deceleration_curve__braking_curve_entry__location__last__bit))

;; deceleration_curve__braking_curve_entry__location__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__location__position))

(declare-fun deceleration_curve__braking_curve_entry__speed__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__speed__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_entry__speed__position () Int)

;; deceleration_curve__braking_curve_entry__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__first__bit))

;; deceleration_curve__braking_curve_entry__speed__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_entry__speed__first__bit deceleration_curve__braking_curve_entry__speed__last__bit))

;; deceleration_curve__braking_curve_entry__speed__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_entry__speed__position))

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((braking_curve_entry__ref
 (mk_braking_curve_entry__ref (braking_curve_entry__content us_rep)))))
(define-fun braking_curve_entry__ref___projection ((a braking_curve_entry__ref)) us_rep 
  (braking_curve_entry__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_148 Int))
                           (=>
                           (and (<= a__first temp___idx_148)
                           (<= temp___idx_148 a__last))
                           (= (bool_eq (select a temp___idx_148)
                              (select b (+ (- b__first a__first) temp___idx_148))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_148 Int))
  (=> (and (<= a__first temp___idx_148) (<= temp___idx_148 a__last))
  (= (bool_eq (select a temp___idx_148)
     (select b (+ (- b__first a__first) temp___idx_148))) true))))))))

(declare-fun dummy7 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__deceleration_curve__braking_curve_t__curve (Array Int us_rep))(rec__deceleration_curve__braking_curve_t__end_point distance_t)))))
(define-fun us_split_fields_curve__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__deceleration_curve__braking_curve_t__curve a))

(define-fun us_split_fields_end_point__projection ((a us_split_fields2)) distance_t 
  (rec__deceleration_curve__braking_curve_t__end_point a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq1
                            (rec__deceleration_curve__braking_curve_t__curve
                            (us_split_fields3 a)) 0 1000
                            (rec__deceleration_curve__braking_curve_t__curve
                            (us_split_fields3 b)) 0 1000) true)
                         (= (to_rep1
                            (rec__deceleration_curve__braking_curve_t__end_point
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__deceleration_curve__braking_curve_t__end_point
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun deceleration_curve__braking_curve_t__curve__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__curve__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__curve__position () Int)

;; deceleration_curve__braking_curve_t__curve__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__first__bit))

;; deceleration_curve__braking_curve_t__curve__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__curve__first__bit deceleration_curve__braking_curve_t__curve__last__bit))

;; deceleration_curve__braking_curve_t__curve__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__curve__position))

(declare-fun deceleration_curve__braking_curve_t__end_point__first__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__end_point__last__bit () Int)

(declare-fun deceleration_curve__braking_curve_t__end_point__position () Int)

;; deceleration_curve__braking_curve_t__end_point__first__bit_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__first__bit))

;; deceleration_curve__braking_curve_t__end_point__last__bit_axiom
  (assert
  (< deceleration_curve__braking_curve_t__end_point__first__bit deceleration_curve__braking_curve_t__end_point__last__bit))

;; deceleration_curve__braking_curve_t__end_point__position_axiom
  (assert (<= 0 deceleration_curve__braking_curve_t__end_point__position))

(declare-fun dummy8 () us_rep1)

(declare-datatypes ()
((braking_curve_t__ref
 (mk_braking_curve_t__ref (braking_curve_t__content us_rep1)))))
(define-fun braking_curve_t__ref___projection ((a braking_curve_t__ref)) us_rep1 
  (braking_curve_t__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__deceleration_curve__target_t__supervise Bool)(rec__deceleration_curve__target_t__location distance_t)(rec__deceleration_curve__target_t__speed speed_t)))))
(define-fun us_split_fields_supervise__projection ((a us_split_fields4)) Bool 
  (rec__deceleration_curve__target_t__supervise a))

(define-fun us_split_fields_location2__projection ((a us_split_fields4)) distance_t 
  (rec__deceleration_curve__target_t__location a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (rec__deceleration_curve__target_t__supervise
                            (us_split_fields5 a)) (rec__deceleration_curve__target_t__supervise
                                                  (us_split_fields5 b)))
                         (= (to_rep1
                            (rec__deceleration_curve__target_t__location
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__deceleration_curve__target_t__location
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__deceleration_curve__target_t__speed
                            (us_split_fields5 a))) (to_rep
                                                   (rec__deceleration_curve__target_t__speed
                                                   (us_split_fields5 b)))))
                    true false))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun deceleration_curve__target_t__supervise__first__bit () Int)

(declare-fun deceleration_curve__target_t__supervise__last__bit () Int)

(declare-fun deceleration_curve__target_t__supervise__position () Int)

;; deceleration_curve__target_t__supervise__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__first__bit))

;; deceleration_curve__target_t__supervise__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__supervise__first__bit deceleration_curve__target_t__supervise__last__bit))

;; deceleration_curve__target_t__supervise__position_axiom
  (assert (<= 0 deceleration_curve__target_t__supervise__position))

(declare-fun deceleration_curve__target_t__location__first__bit () Int)

(declare-fun deceleration_curve__target_t__location__last__bit () Int)

(declare-fun deceleration_curve__target_t__location__position () Int)

;; deceleration_curve__target_t__location__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__location__first__bit))

;; deceleration_curve__target_t__location__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__location__first__bit deceleration_curve__target_t__location__last__bit))

;; deceleration_curve__target_t__location__position_axiom
  (assert (<= 0 deceleration_curve__target_t__location__position))

(declare-fun deceleration_curve__target_t__speed__first__bit () Int)

(declare-fun deceleration_curve__target_t__speed__last__bit () Int)

(declare-fun deceleration_curve__target_t__speed__position () Int)

;; deceleration_curve__target_t__speed__first__bit_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__first__bit))

;; deceleration_curve__target_t__speed__last__bit_axiom
  (assert
  (< deceleration_curve__target_t__speed__first__bit deceleration_curve__target_t__speed__last__bit))

;; deceleration_curve__target_t__speed__position_axiom
  (assert (<= 0 deceleration_curve__target_t__speed__position))

(declare-fun dummy9 () us_rep2)

(declare-datatypes ()
((target_t__ref (mk_target_t__ref (target_t__content us_rep2)))))
(define-fun target_t__ref___projection ((a target_t__ref)) us_rep2 (target_t__content
                                                                   a))

(declare-fun curve_index_from_location (Int) Int)

(declare-fun curve_index_from_location__function_guard (Int Int) Bool)

;; curve_index_from_location__post_axiom
  (assert
  (forall ((d Int))
  (! (=> (and (dynamic_invariant1 d true true true) (<= d 5000))
     (dynamic_invariant4 (curve_index_from_location d) true false true)) :pattern (
  (curve_index_from_location d)) )))

(declare-fun target () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun end_point () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

;; end_point__def_axiom
  (assert
  (= end_point (curve_index_from_location
               (to_rep1
               (rec__deceleration_curve__target_t__location
               (us_split_fields5 target))))))

;; maximum_valid_speed__def_axiom
  (assert
  (= maximum_valid_speed (m_per_s_from_km_per_h
                         (fp #b0 #b10000111 #b11110100000000000000000))))

(declare-sort speed_km_per_h_t 0)

(declare-fun user_eq10 (speed_km_per_h_t speed_km_per_h_t) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE7 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Float32)

(declare-fun dummy10 () speed_km_per_h_t)

(declare-datatypes ()
((speed_km_per_h_t__ref
 (mk_speed_km_per_h_t__ref (speed_km_per_h_t__content speed_km_per_h_t)))))
(define-fun speed_km_per_h_t__ref___projection ((a speed_km_per_h_t__ref)) speed_km_per_h_t 
  (speed_km_per_h_t__content a))

(define-fun dynamic_invariant5 ((temp___expr_158 Float32)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                      (not (or (fp.isInfinite temp___expr_158) (fp.isNaN temp___expr_158)))))

(declare-fun is_valid_speed_km_per_h (Float32) Bool)

(declare-fun is_valid_speed_km_per_h__function_guard (Bool Float32) Bool)

;; is_valid_speed_km_per_h__post_axiom
  (assert true)

;; is_valid_speed_km_per_h__def_axiom
  (assert
  (forall ((speed Float32))
  (! (= (= (is_valid_speed_km_per_h speed) true)
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed)
     (fp.leq speed (fp #b0 #b10000111 #b11110100000000000000000)))) :pattern (
  (is_valid_speed_km_per_h speed)) )))

;; m_per_s_from_km_per_h__post_axiom
  (assert
  (forall ((speed Float32))
  (! (=>
     (and (dynamic_invariant5 speed true true true)
     (= (is_valid_speed_km_per_h speed) true)) (dynamic_invariant
     (m_per_s_from_km_per_h speed) true false true)) :pattern ((m_per_s_from_km_per_h
                                                               speed)) )))

;; m_per_s_from_km_per_h__def_axiom
  (assert
  (forall ((speed Float32))
  (! (=> (dynamic_invariant5 speed true true true)
     (= (m_per_s_from_km_per_h speed) (fp.div RNE (fp.mul RNE speed (fp #b0 #b10001000 #b11110100000000000000000)) (fp #b0 #b10001010 #b11000010000000000000000)))) :pattern (
  (m_per_s_from_km_per_h speed)) )))

(declare-fun is_valid_speed (Float32) Bool)

(declare-fun is_valid_speed__function_guard (Bool Float32) Bool)

;; is_valid_speed__post_axiom
  (assert true)

;; is_valid_speed__def_axiom
  (assert
  (forall ((speed Float32))
  (! (= (= (is_valid_speed speed) true)
     (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) speed)
     (fp.leq speed (m_per_s_from_km_per_h
                   (fp #b0 #b10000111 #b11110100000000000000000))))) :pattern (
  (is_valid_speed speed)) )))

(declare-sort num_delimiters_range 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (num_delimiters_range num_delimiters_range) Bool)

(declare-fun dummy11 () num_delimiters_range)

(declare-datatypes ()
((num_delimiters_range__ref
 (mk_num_delimiters_range__ref
 (num_delimiters_range__content num_delimiters_range)))))
(define-fun num_delimiters_range__ref___projection ((a num_delimiters_range__ref)) num_delimiters_range 
  (num_delimiters_range__content a))

(declare-fun to_rep2 (num_delimiters_range) Int)

(declare-fun of_rep2 (Int) num_delimiters_range)

;; inversion_axiom
  (assert
  (forall ((x num_delimiters_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x num_delimiters_range)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun to_rep3 (float) Float32)

(declare-fun of_rep3 (Float32) float)

;; inversion_axiom
  (assert
  (forall ((x float))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x float))
  (! (not (or (fp.isInfinite (to_rep3 x)) (fp.isNaN (to_rep3 x)))) :pattern (
  (to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (not (or (fp.isInfinite x) (fp.isNaN x)))
     (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))) )))

(declare-sort function_range 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (function_range function_range) Bool)

(declare-fun dummy12 () function_range)

(declare-datatypes ()
((function_range__ref
 (mk_function_range__ref (function_range__content function_range)))))
(define-fun function_range__ref___projection ((a function_range__ref)) function_range 
  (function_range__content a))

(declare-fun to_rep4 (function_range) Int)

(declare-fun of_rep4 (Int) function_range)

;; inversion_axiom
  (assert
  (forall ((x function_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x function_range)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__step_function__delimiter_entry__delimiter function_range)(rec__step_function__delimiter_entry__value float)))))
(define-fun us_split_fields_Delimiter__projection ((a us_split_fields6)) function_range 
  (rec__step_function__delimiter_entry__delimiter a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                               a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep4
                            (rec__step_function__delimiter_entry__delimiter
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__step_function__delimiter_entry__delimiter
                                                   (us_split_fields7 b))))
                         (= (to_rep3
                            (rec__step_function__delimiter_entry__value
                            (us_split_fields7 a))) (to_rep3
                                                   (rec__step_function__delimiter_entry__value
                                                   (us_split_fields7 b)))))
                    true false))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun step_function__delimiter_entry__delimiter__first__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__last__bit () Int)

(declare-fun step_function__delimiter_entry__delimiter__position () Int)

;; step_function__delimiter_entry__delimiter__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__first__bit))

;; step_function__delimiter_entry__delimiter__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__delimiter__first__bit step_function__delimiter_entry__delimiter__last__bit))

;; step_function__delimiter_entry__delimiter__position_axiom
  (assert (<= 0 step_function__delimiter_entry__delimiter__position))

(declare-fun step_function__delimiter_entry__value__first__bit () Int)

(declare-fun step_function__delimiter_entry__value__last__bit () Int)

(declare-fun step_function__delimiter_entry__value__position () Int)

;; step_function__delimiter_entry__value__first__bit_axiom
  (assert (<= 0 step_function__delimiter_entry__value__first__bit))

;; step_function__delimiter_entry__value__last__bit_axiom
  (assert
  (< step_function__delimiter_entry__value__first__bit step_function__delimiter_entry__value__last__bit))

;; step_function__delimiter_entry__value__position_axiom
  (assert (<= 0 step_function__delimiter_entry__value__position))

(declare-fun dummy13 () us_rep3)

(declare-datatypes ()
((delimiter_entry__ref
 (mk_delimiter_entry__ref (delimiter_entry__content us_rep3)))))
(define-fun delimiter_entry__ref___projection ((a delimiter_entry__ref)) us_rep3 
  (delimiter_entry__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq4 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq4 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun dummy14 () (Array Int us_rep3))

(declare-fun value__size5 () Int)

(declare-fun object__size5 ((Array Int us_rep3)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int us_rep3)) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment5 a))))

(declare-fun user_eq14 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__step_function__step_function_t__number_of_delimiters num_delimiters_range)(rec__step_function__step_function_t__step (Array Int us_rep3))))))
(define-fun us_split_fields_Number_Of_Delimiters__projection ((a us_split_fields8)) num_delimiters_range 
  (rec__step_function__step_function_t__number_of_delimiters a))

(define-fun us_split_fields_Step__projection ((a us_split_fields8)) (Array Int us_rep3) 
  (rec__step_function__step_function_t__step a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_2__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep2
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__step_function__step_function_t__number_of_delimiters
                                                   (us_split_fields9 b))))
                         (= (bool_eq5
                            (rec__step_function__step_function_t__step
                            (us_split_fields9 a)) 0 10
                            (rec__step_function__step_function_t__step
                            (us_split_fields9 b)) 0 10) true))
                    true false))

(declare-fun user_eq15 (us_rep4 us_rep4) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-fun step_function__step_function_t__number_of_delimiters__first__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__last__bit () Int)

(declare-fun step_function__step_function_t__number_of_delimiters__position () Int)

;; step_function__step_function_t__number_of_delimiters__first__bit_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__first__bit))

;; step_function__step_function_t__number_of_delimiters__last__bit_axiom
  (assert
  (< step_function__step_function_t__number_of_delimiters__first__bit 
  step_function__step_function_t__number_of_delimiters__last__bit))

;; step_function__step_function_t__number_of_delimiters__position_axiom
  (assert
  (<= 0 step_function__step_function_t__number_of_delimiters__position))

(declare-fun step_function__step_function_t__step__first__bit () Int)

(declare-fun step_function__step_function_t__step__last__bit () Int)

(declare-fun step_function__step_function_t__step__position () Int)

;; step_function__step_function_t__step__first__bit_axiom
  (assert (<= 0 step_function__step_function_t__step__first__bit))

;; step_function__step_function_t__step__last__bit_axiom
  (assert
  (< step_function__step_function_t__step__first__bit step_function__step_function_t__step__last__bit))

;; step_function__step_function_t__step__position_axiom
  (assert (<= 0 step_function__step_function_t__step__position))

(declare-fun dummy15 () us_rep4)

(declare-datatypes ()
((step_function_t__ref
 (mk_step_function_t__ref (step_function_t__content us_rep4)))))
(define-fun step_function_t__ref___projection ((a step_function_t__ref)) us_rep4 
  (step_function_t__content a))

(declare-fun get_value (us_rep4 Int) Float32)

(declare-fun get_value__function_guard (Float32 us_rep4 Int) Bool)

(declare-fun is_valid_deceleration_model (us_rep4) Bool)

(declare-fun is_valid_deceleration_model__function_guard (Bool us_rep4) Bool)

(declare-fun a_brake_emergency_model () us_rep4)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun a_brake_emergency (Float32 Int) Float32)

(declare-fun a_brake_emergency__function_guard (Float32 Float32 Int) Bool)

;; a_brake_emergency__post_axiom
  (assert
  (forall ((v Float32))
  (forall ((d Int))
  (! (=>
     (and
     (and (dynamic_invariant v true true true) (dynamic_invariant1 d true
     true true))
     (and (= (is_valid_deceleration_model a_brake_emergency_model) true)
     (= (is_valid_speed v) true)))
     (let ((result (a_brake_emergency v d)))
     (and (fp.eq result (get_value a_brake_emergency_model (to_int1 RNA v)))
     (dynamic_invariant3 result true false true)))) :pattern ((a_brake_emergency
                                                              v d)) ))))

(declare-fun kdry_rst (Float32) Float32)

(declare-fun kdry_rst__function_guard (Float32 Float32) Bool)

(declare-fun kwet_rst (Float32) Float32)

(declare-fun kwet_rst__function_guard (Float32 Float32) Bool)

;; a_brake_safe__post_axiom
  (assert
  (forall ((v Float32))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 d true
     true true)) (dynamic_invariant3 (a_brake_safe v d) true false true)) :pattern (
  (a_brake_safe v d)) ))))

;; a_brake_safe__def_axiom
  (assert
  (forall ((v Float32))
  (forall ((d Int))
  (! (=>
     (and (dynamic_invariant v true true true) (dynamic_invariant1 d true
     true true))
     (= (a_brake_safe v d) (fp.mul RNE (fp.mul RNE (kdry_rst v) (fp.add RNE 
     (kwet_rst v) (fp.mul RNE (fp #b0 #b00000000 #b00000000000000000000000) (fp.sub RNE (fp #b0 #b01111111 #b00000000000000000000000) 
     (kwet_rst v))))) (a_brake_emergency v d)))) :pattern ((a_brake_safe v d)) ))))

(define-fun dynamic_invariant6 ((temp___expr_206 Int)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)) Bool (=>
                                      (or (= temp___is_init_203 true)
                                      (<= 0 10)) (in_range6 temp___expr_206)))

(define-fun dynamic_invariant7 ((temp___expr_212 Int)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)) Bool (=>
                                      (or (= temp___is_init_209 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_212)))

(declare-fun is_valid (us_rep4) Bool)

(declare-fun is_valid__function_guard (Bool us_rep4) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((sfun us_rep4))
  (! (= (= (is_valid sfun) true)
     (and
     (= (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___252 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun))))
        (select temp___252 0))))) 0)
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep2
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields9 sfun))) 1)))
     (< (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___254 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun))))
        (select temp___254 i))))) (to_rep4
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields7
                                  (let ((temp___253 (rec__step_function__step_function_t__step
                                                    (us_split_fields9 sfun))))
                                  (select temp___253 (+ i 1))))))))))) :pattern (
  (is_valid sfun)) )))

(declare-fun has_same_delimiters (us_rep4 us_rep4) Bool)

(declare-fun has_same_delimiters__function_guard (Bool us_rep4 us_rep4) Bool)

;; has_same_delimiters__post_axiom
  (assert true)

;; has_same_delimiters__def_axiom
  (assert
  (forall ((sfun1 us_rep4) (sfun2 us_rep4))
  (! (= (= (has_same_delimiters sfun1 sfun2) true)
     (and
     (= (to_rep2
        (rec__step_function__step_function_t__number_of_delimiters
        (us_split_fields9 sfun1))) (to_rep2
                                   (rec__step_function__step_function_t__number_of_delimiters
                                   (us_split_fields9 sfun2))))
     (forall ((i Int))
     (=>
     (and (<= 1 i)
     (<= i (to_rep2
           (rec__step_function__step_function_t__number_of_delimiters
           (us_split_fields9 sfun1)))))
     (= (to_rep4
        (rec__step_function__delimiter_entry__delimiter
        (us_split_fields7
        (let ((temp___261 (rec__step_function__step_function_t__step
                          (us_split_fields9 sfun1))))
        (select temp___261 i))))) (to_rep4
                                  (rec__step_function__delimiter_entry__delimiter
                                  (us_split_fields7
                                  (let ((temp___262 (rec__step_function__step_function_t__step
                                                    (us_split_fields9 sfun2))))
                                  (select temp___262 i)))))))))) :pattern (
  (has_same_delimiters sfun1 sfun2)) )))

;; get_value__post_axiom
  (assert
  (forall ((sfun us_rep4))
  (forall ((x Int))
  (! (=> (and (dynamic_invariant7 x true true true) (= (is_valid sfun) true))
     (let ((result (get_value sfun x)))
     (and
     (or
     (exists ((i Int))
     (and
     (and (<= 0 i)
     (<= i (- (to_rep2
              (rec__step_function__step_function_t__number_of_delimiters
              (us_split_fields9 sfun))) 1)))
     (and
     (and
     (<= (to_rep4
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields7
         (let ((temp___269 (rec__step_function__step_function_t__step
                           (us_split_fields9 sfun))))
         (select temp___269 i))))) x)
     (< x (to_rep4
          (rec__step_function__delimiter_entry__delimiter
          (us_split_fields7
          (let ((temp___270 (rec__step_function__step_function_t__step
                            (us_split_fields9 sfun))))
          (select temp___270 (+ i 1))))))))
     (fp.eq result (to_rep3
                   (rec__step_function__delimiter_entry__value
                   (us_split_fields7
                   (let ((temp___271 (rec__step_function__step_function_t__step
                                     (us_split_fields9 sfun))))
                   (select temp___271 i)))))))))
     (and
     (<= (to_rep4
         (rec__step_function__delimiter_entry__delimiter
         (us_split_fields7
         (let ((temp___272 (rec__step_function__step_function_t__step
                           (us_split_fields9 sfun))))
         (select temp___272 (to_rep2
                            (rec__step_function__step_function_t__number_of_delimiters
                            (us_split_fields9 sfun)))))))) x)
     (fp.eq result (to_rep3
                   (rec__step_function__delimiter_entry__value
                   (us_split_fields7
                   (let ((temp___273 (rec__step_function__step_function_t__step
                                     (us_split_fields9 sfun))))
                   (select temp___273 (to_rep2
                                      (rec__step_function__step_function_t__number_of_delimiters
                                      (us_split_fields9 sfun)))))))))))
     (dynamic_invariant2 result true false true)))) :pattern ((get_value sfun
                                                              x)) ))))

;; is_valid_deceleration_model__post_axiom
  (assert true)

;; is_valid_deceleration_model__def_axiom
  (assert
  (forall ((s us_rep4))
  (! (= (= (is_valid_deceleration_model s) true)
     (and (= (is_valid s) true)
     (<= (to_rep2
         (rec__step_function__step_function_t__number_of_delimiters
         (us_split_fields9 s))) 6))) :pattern ((is_valid_deceleration_model
                                               s)) )))

(declare-fun temp___133 (us_rep3 us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___135 us_rep3) (temp___136 us_rep3))
  (let ((temp___134 (temp___133 temp___135 temp___136)))
  (forall ((temp___137 Int))
  (ite (= temp___137 0) (= (select temp___134 temp___137) temp___135)
  (= (select temp___134 temp___137) temp___136))))))

;; a_brake_emergency_model__def_axiom
  (assert
  (= a_brake_emergency_model (mk___rep4
                             (mk___split_fields4 (of_rep2 0)
                             (temp___133
                             (mk___rep3
                             (mk___split_fields3 (of_rep4 0)
                             (of_rep3
                             (fp #b0 #b01111111 #b00000000000000000000000))))
                             (mk___rep3
                             (mk___split_fields3 (of_rep4 0)
                             (of_rep3
                             (fp #b0 #b00000000 #b00000000000000000000000)))))))))

(declare-fun kdry_rst_model () us_rep4)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun temp___138 (us_rep3 us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___140 us_rep3) (temp___141 us_rep3))
  (let ((temp___139 (temp___138 temp___140 temp___141)))
  (forall ((temp___142 Int))
  (ite (= temp___142 0) (= (select temp___139 temp___142) temp___140)
  (= (select temp___139 temp___142) temp___141))))))

;; kdry_rst_model__def_axiom
  (assert
  (= kdry_rst_model (mk___rep4
                    (mk___split_fields4 (of_rep2 0)
                    (temp___138
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0)
                    (of_rep3 (fp #b0 #b01111111 #b00000000000000000000000))))
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0)
                    (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000)))))))))

(declare-fun kwet_rst_model () us_rep4)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun temp___143 (us_rep3 us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___145 us_rep3) (temp___146 us_rep3))
  (let ((temp___144 (temp___143 temp___145 temp___146)))
  (forall ((temp___147 Int))
  (ite (= temp___147 0) (= (select temp___144 temp___147) temp___145)
  (= (select temp___144 temp___147) temp___146))))))

;; kwet_rst_model__def_axiom
  (assert
  (= kwet_rst_model (mk___rep4
                    (mk___split_fields4 (of_rep2 0)
                    (temp___143
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0)
                    (of_rep3 (fp #b0 #b01111111 #b00000000000000000000000))))
                    (mk___rep3
                    (mk___split_fields3 (of_rep4 0)
                    (of_rep3 (fp #b0 #b00000000 #b00000000000000000000000)))))))))

(declare-fun is_valid_kdry_rst (tuple0) Bool)

(declare-fun is_valid_kdry_rst__function_guard (Bool tuple0) Bool)

;; is_valid_kdry_rst__post_axiom
  (assert true)

;; is_valid_kdry_rst__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (is_valid_kdry_rst us_void_param) true)
     (and (= (is_valid kdry_rst_model) true)
     (= (has_same_delimiters kdry_rst_model a_brake_emergency_model) true))) :pattern (
  (is_valid_kdry_rst us_void_param)) )))

;; kdry_rst__post_axiom
  (assert
  (forall ((v Float32))
  (! (=>
     (and (dynamic_invariant v true true true)
     (= (is_valid_kdry_rst Tuple0) true))
     (let ((result (kdry_rst v)))
     (and (fp.eq result (get_value kdry_rst_model (to_int1 RNA v)))
     (dynamic_invariant2 result true false true)))) :pattern ((kdry_rst v)) )))

(declare-fun is_valid_kwet_rst (tuple0) Bool)

(declare-fun is_valid_kwet_rst__function_guard (Bool tuple0) Bool)

;; is_valid_kwet_rst__post_axiom
  (assert true)

;; is_valid_kwet_rst__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (is_valid_kwet_rst us_void_param) true)
     (and (= (is_valid kwet_rst_model) true)
     (= (has_same_delimiters kwet_rst_model a_brake_emergency_model) true))) :pattern (
  (is_valid_kwet_rst us_void_param)) )))

;; kwet_rst__post_axiom
  (assert
  (forall ((v Float32))
  (! (=>
     (and (dynamic_invariant v true true true)
     (= (is_valid_kwet_rst Tuple0) true))
     (let ((result (kwet_rst v)))
     (and (fp.eq result (get_value kwet_rst_model (to_int1 RNA v)))
     (dynamic_invariant2 result true false true)))) :pattern ((kwet_rst v)) )))

;; a_gradient__post_axiom
  (assert
  (forall ((d Int))
  (! (=> (dynamic_invariant1 d true true true) (dynamic_invariant3
     (a_gradient d) true false true)) :pattern ((a_gradient d)) )))

;; a_gradient__def_axiom
  (assert
  (forall ((d Int))
  (! (=> (dynamic_invariant1 d true true true)
     (= (a_gradient d) (fp #b0 #b00000000 #b00000000000000000000000))) :pattern (
  (a_gradient d)) )))

(declare-fun braking_curve__split_fields () (Array Int us_rep))

(declare-fun braking_curve__split_fields1 () distance_t)

(declare-fun speed () Float32)

(declare-fun location () Int)

(declare-fun i () Int)

(declare-fun deceleration_curve__curve_from_target__end_point__assume () Int)

(declare-fun o () distance_t)

(declare-fun o1 () (Array Int us_rep))

(declare-fun o2 () distance_t)

(declare-fun temp___374 () (Array Int us_rep))

(declare-fun temp___3741 () distance_t)

(declare-fun o3 () distance_t)

(declare-fun o4 () distance_t)

(declare-fun o5 () speed_t)

(declare-fun o6 () distance_t)

(declare-fun o7 () speed_t)

(declare-fun o8 () (Array Int us_rep))

(declare-fun o9 () (Array Int us_rep))

(declare-fun o10 () distance_t)

(declare-fun temp___379 () (Array Int us_rep))

(declare-fun temp___3791 () distance_t)

(declare-fun o11 () speed_t)

(declare-fun o12 () distance_t)

(declare-fun o13 () speed_t)

(declare-fun o14 () distance_t)

(declare-fun o15 () speed_t)

(declare-fun o16 () (Array Int us_rep))

(declare-fun o17 () (Array Int us_rep))

(declare-fun o18 () distance_t)

(declare-fun temp___384 () (Array Int us_rep))

(declare-fun temp___3841 () distance_t)

(declare-fun o19 () Float32)

(declare-fun o20 () Float32)

(declare-fun o21 () Float32)

(declare-fun o22 () Float32)

(declare-fun result () Float32)

(declare-fun speed1 () Float32)

(declare-fun result1 () int__ref)

(declare-fun location1 () Int)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun braking_curve__split_fields2 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun braking_curve__split_fields3 () us_split_fields2)

(declare-fun result4 () us_split_fields__ref1)

(declare-fun braking_curve__split_fields4 () us_split_fields2)

(declare-fun result5 () int__ref)

(declare-fun i1 () Int)

(declare-fun braking_curve__split_fields5 () us_split_fields2)

(declare-fun speed2 () Float32)

(declare-fun location2 () Int)

(declare-fun i2 () Int)

;; H
  (assert
  (not (or (fp.isInfinite maximum_valid_speed) (fp.isNaN maximum_valid_speed))))

;; H
  (assert
  (= (m_per_s_from_km_per_h (fp #b0 #b10000111 #b11110100000000000000000)) 
  maximum_valid_speed))

;; H
  (assert
  (<= (to_rep1
      (rec__deceleration_curve__target_t__location (us_split_fields5 target))) 5000))

;; H
  (assert (= result speed))

;; H
  (assert
  (= speed1 (to_rep
            (rec__deceleration_curve__target_t__speed
            (us_split_fields5 target)))))

;; H
  (assert (not (or (fp.isInfinite speed1) (fp.isNaN speed1))))

;; H
  (assert (= result1 (mk_int__ref location)))

;; H
  (assert
  (= location1 (to_rep1
               (rec__deceleration_curve__target_t__location
               (us_split_fields5 target)))))

;; H
  (assert (in_range3 location1))

;; H
  (assert
  (and
  (= deceleration_curve__curve_from_target__end_point__assume (curve_index_from_location
                                                              (to_rep1
                                                              (rec__deceleration_curve__target_t__location
                                                              (us_split_fields5
                                                              target)))))
  (in_range5 deceleration_curve__curve_from_target__end_point__assume)))

;; H
  (assert
  (= deceleration_curve__curve_from_target__end_point__assume end_point))

;; H
  (assert (in_range5 end_point))

;; H
  (assert
  (= (to_rep1 o) (to_rep1
                 (rec__deceleration_curve__target_t__location
                 (us_split_fields5 target)))))

;; H
  (assert (= braking_curve__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= temp___374 o1))

;; H
  (assert (= temp___3741 o2))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 braking_curve__split_fields
             braking_curve__split_fields1))))

;; H
  (assert
  (= braking_curve__split_fields2 (mk___split_fields1 temp___374 temp___3741)))

;; H
  (assert (= (to_rep1 o3) location1))

;; H
  (assert (= o3 o4))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_entry__speed
     (us_split_fields1
     (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields2) end_point))) o5))

;; H
  (assert (= o6 o4))

;; H
  (assert (= o7 o5))

;; H
  (assert
  (= o8 (store (rec__deceleration_curve__braking_curve_t__curve
               braking_curve__split_fields2) end_point (mk___rep
                                                       (mk___split_fields 
                                                       o6 o7)))))

;; H
  (assert (= o8 o9))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields2) o10))

;; H
  (assert (= temp___379 o9))

;; H
  (assert (= temp___3791 o10))

;; H
  (assert (= result3 (mk___split_fields__ref1 braking_curve__split_fields2)))

;; H
  (assert
  (= braking_curve__split_fields3 (mk___split_fields1 temp___379 temp___3791)))

;; H
  (assert (= (to_rep o11) speed1))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_entry__location
     (us_split_fields1
     (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields3) end_point))) o12))

;; H
  (assert (= o11 o13))

;; H
  (assert (= o14 o12))

;; H
  (assert (= o15 o13))

;; H
  (assert
  (= o16 (store (rec__deceleration_curve__braking_curve_t__curve
                braking_curve__split_fields3) end_point (mk___rep
                                                        (mk___split_fields
                                                        o14 o15)))))

;; H
  (assert (= o16 o17))

;; H
  (assert
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields3) o18))

;; H
  (assert (= temp___384 o17))

;; H
  (assert (= temp___3841 o18))

;; H
  (assert (= result4 (mk___split_fields__ref1 braking_curve__split_fields3)))

;; H
  (assert
  (= braking_curve__split_fields4 (mk___split_fields1 temp___384 temp___3841)))

;; H
  (assert (= result5 (mk_int__ref i)))

;; H
  (assert (= i1 (- end_point 1)))

;; H
  (assert (<= 0 i1))

;; H
  (assert (<= i1 (- end_point 1)))

;; H
  (assert
  (and
  (and
  (and (=> (<= 0 2147483647) (in_range3 location2))
  (and
  (forall ((temp___397 Int))
  (=> (and (<= 0 temp___397) (<= temp___397 1000))
  (=> (<= temp___397 i2)
  (= (select (rec__deceleration_curve__braking_curve_t__curve
             braking_curve__split_fields5) temp___397) (select (rec__deceleration_curve__braking_curve_t__curve
                                                               braking_curve__split_fields4) temp___397)))))
  (= (rec__deceleration_curve__braking_curve_t__end_point
     braking_curve__split_fields5) (rec__deceleration_curve__braking_curve_t__end_point
                                   braking_curve__split_fields4))))
  (=>
  (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111))
  (not (or (fp.isInfinite speed2) (fp.isNaN speed2)))))
  (and (<= 0 i2) (<= i2 (- end_point 1)))))

;; H
  (assert
  (and (= o19 (a_safe speed2 location2))
  (and (in_range4 o19)
  (= o19 (fp.add RNE (a_brake_safe speed2 location2) (a_gradient location2))))))

;; H
  (assert
  (= o20 (fp.mul RNE (fp #b0 #b10000001 #b00000000000000000000000) o19)))

;; H
  (assert (and (= o21 o20) (not (or (fp.isInfinite o20) (fp.isNaN o20)))))

;; H
  (assert
  (= o22 (fp.mul RNE o21 (fp #b0 #b10000001 #b01000000000000000000000))))

(assert
;; WP_parameter_def
 ;; File "deceleration_curve.ads", line 32, characters 0-0
  (not (not (or (fp.isInfinite o22) (fp.isNaN o22)))))
(check-sat)
